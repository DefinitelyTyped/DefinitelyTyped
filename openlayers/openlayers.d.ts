// Type definitions for OpenLayers v3.13.1
// Project: http://openlayers.org/
// Definitions by: Wouter Goedhart <https://github.com/woutergd>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

//
// This file is automatically generated by jsdoc-typescript-plugin (https://github.com/jumpinjackie/jsdoc-typescript-plugin). 
//
// Do not edit this file unless you know what you're doing. Where possible, consult the plugin documentation for options to
// augment and customize the content of this generated file
//

// Stubs for Closure Library types

declare module goog {
    class Disposable {
        
    }
    module events {
        class Event {
            
        }
        class EventTarget {
            
        }
    }
}
declare type proj4 = any;
declare type EsriJSONGeometry = any;
declare type GeoJSONObject = any;
declare type GeoJSONFeatureCollection = any;
declare type GeoJSONGeometry = any;
declare type GeoJSONGeometryCollection = any;
interface GeolocationPositionOptions {
    enableHighAccuracy: boolean;
    maximumAge: number;
    timeout: number;
}
declare module goog {
    module events {
        type EventLike = any;
        type Key = any;
        type BrowserEvent = any;
    }
    module vec {
        module Mat4 {
            type Number = any;
        }
    }
}
declare module ol {
    /**
     * A function returning the canvas element (`{HTMLCanvasElement}`)
     * used by the source as an image. The arguments passed to the function are:
     * {@link ol.Extent} the image extent, `{number}` the image resolution,
     * `{number}` the device pixel ratio, {@link ol.Size} the image size, and
     * {@link ol.proj.Projection} the image projection. The canvas returned by
     * this function is cached by the source. The this keyword inside the function
     * references the {@link ol.source.ImageCanvas}.
     */
    type CanvasFunctionType = (arg0: ol.Extent, arg1: number, arg2: number, arg3: ol.Size, arg4: ol.proj.Projection) => HTMLCanvasElement;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type CenterConstraintType = (arg0?: ol.Coordinate) => ol.Coordinate;
    /**
     * A function that takes a {@link ol.Coordinate} and transforms it into a
     * `{string}`.
     */
    type CoordinateFormatType = (arg0?: ol.Coordinate) => string;
    /**
     * A function that returns an array of {@link ol.style.Style styles} given a
     * resolution. The `this` keyword inside the function references the
     * {@link ol.Feature} to be styled.
     */
    type FeatureStyleFunction = (arg0: number) => ol.style.Style|ol.style.Style[];
    /**
     * {@link ol.source.Vector} sources use a function of this type to load
     * features.
     * 
     * This function takes an {@link ol.Extent} representing the area to be loaded,
     * a `{number}` representing the resolution (map units per pixel) and an
     * {@link ol.proj.Projection} for the projection  as arguments. `this` within
     * the function is bound to the {@link ol.source.Vector} it's called from.
     * 
     * The function is responsible for loading the features and adding them to the
     * source.
     */
    type FeatureLoader = (arg0: ol.Extent, arg1: number, arg2: ol.proj.Projection) => void;
    /**
     * {@link ol.source.Vector} sources use a function of this type to get the url
     * to load features from.
     * 
     * This function takes an {@link ol.Extent} representing the area to be loaded,
     * a `{number}` representing the resolution (map units per pixel) and an
     * {@link ol.proj.Projection} for the projection  as arguments and returns a
     * `{string}` representing the URL.
     */
    type FeatureUrlFunction = (arg0: ol.Extent, arg1: number, arg2: ol.proj.Projection) => string;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type PostRenderFunction = (arg0: ol.Map, arg1?: olx.FrameState) => boolean;
    /**
     * Function to perform manipulations before rendering. This function is called
     * with the {@link ol.Map} as first and an optional {@link olx.FrameState} as
     * second argument. Return `true` to keep this function for the next frame,
     * `false` to remove it.
     */
    type PreRenderFunction = (arg0: ol.Map, arg1?: olx.FrameState) => boolean;
    /**
     * A function that is called to trigger asynchronous canvas drawing.  It is
     * called with a "done" callback that should be called when drawing is done.
     * If any error occurs during drawing, the "done" callback should be called with
     * that error.
     */
    type ImageCanvasLoader = (arg0: (arg0: Error) => any) => void;
    /**
     * A function that takes an {@link ol.Image} for the image and a `{string}` for
     * the src as arguments. It is supposed to make it so the underlying image
     * {@link ol.Image#getImage} is assigned the content specified by the src. If
     * not specified, the default is
     * 
     *     function(image, src) {
     *       image.getImage().src = src;
     *     }
     * 
     * Providing a custom `imageLoadFunction` can be useful to load images with
     * post requests or - in general - through XHR requests, where the src of the
     * image element would be set to a data URI when the content is loaded.
     */
    type ImageLoadFunctionType = (arg0: ol.Image, arg1: string) => void;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type LoadingStrategy = (arg0: ol.Extent, arg1: number) => ol.Extent[];
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type ResolutionConstraintType = (arg0?: number, arg1?: number, arg2?: number) => number;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type RotationConstraintType = (arg0?: number, arg1?: number) => number;
    /**
     * A function that takes an {@link ol.Tile} for the tile and a
     * `{string}` for the url as arguments.
     */
    type TileLoadFunctionType = (arg0: ol.Tile, arg1: string) => void;
    /**
     * A function that is called with a tile url for the features to load and
     * a callback that takes the loaded features as argument.
     */
    type TileVectorLoadFunctionType = (arg0: string, arg1: (arg0: ol.Feature[]) => any) => void;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type TilePriorityFunction = (arg0: ol.Tile, arg1: string, arg2: ol.Coordinate, arg3: number) => number;
    /**
     * {@link ol.source.Tile} sources use a function of this type to get the url
     * that provides a tile for a given tile coordinate.
     * 
     * This function takes an {@link ol.TileCoord} for the tile coordinate, a
     * `{number}` representing the pixel ratio and an {@link ol.proj.Projection} for
     * the projection  as arguments and returns a `{string}` representing the tile
     * URL, or undefined if no tile should be requested for the passed tile
     * coordinate.
     */
    type TileUrlFunctionType = (arg0: ol.TileCoord, arg1: number, arg2: ol.proj.Projection) => string;
    /**
     * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
     */
    type TileCoordTransformType = (arg0: ol.TileCoord, arg1: ol.proj.Projection, arg2?: ol.TileCoord) => ol.TileCoord;
    /**
     * A transform function accepts an array of input coordinate values, an optional
     * output array, and an optional dimension (default should be 2).  The function
     * transforms the input coordinate values, populates the output array, and
     * returns the output array.
     */
    type TransformFunction = (arg0: number[], arg1?: number[], arg2?: number) => number[];
    /**
     * Inherit the prototype methods from one constructor into another.
     * 
     * Usage:
     * 
     *     function ParentClass(a, b) { }
     *     ParentClass.prototype.foo = function(a) { }
     * 
     *     function ChildClass(a, b, c) {
     *       // Call parent constructor
     *       ParentClass.call(this, a, b);
     *     }
     *     ol.inherits(ChildClass, ParentClass);
     * 
     *     var child = new ChildClass('a', 'b', 'see');
     *     child.foo(); // This works.
     * 
     * In addition, a superclass' implementation of a method can be invoked as
     * follows:
     * 
     *     ChildClass.prototype.foo = function(a) {
     *       ChildClass.base(this, 'foo', a);
     *       // Other code here.
     *     };
     * @param childCtor  (Required) Child constructor.
     * @param parentCtor  (Required) Parent constructor.
     */
    function inherits(childCtor: Function, parentCtor: Function): void;
    /**
     * An attribution for a layer source.
     * 
     * Example:
     * 
     *     source: new ol.source.OSM({
     *       attributions: [
     *         new ol.Attribution({
     *           html: 'All maps &copy; ' +
     *               '<a href="http://www.opencyclemap.org/">OpenCycleMap</a>'
     *         }),
     *         ol.source.OSM.ATTRIBUTION
     *       ],
     *     ..
     */
    class Attribution {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param options  (Required) Attribution options.
         */
        constructor(options: olx.AttributionOptions);
        /**
         * Get the attribution markup.
         */
        getHTML(): string;
    }
    /**
     * An expanded version of standard JS Array, adding convenience methods for
     * manipulation. Add and remove changes to the Collection trigger a Collection
     * event. Note that this does not cover changes to the objects _within_ the
     * Collection; they trigger events on the appropriate object, not on the
     * Collection as a whole.
     */
    class Collection<T> extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_array  (Optional) Array.
         */
        constructor(opt_array?: T[]);
        /**
         * Remove all elements from the collection.
         */
        clear(): void;
        /**
         * Add elements to the collection.  This pushes each item in the provided array
         * to the end of the collection.
         * @param arr  (Required) Array.
         */
        extend(arr: T[]): ol.Collection<T>;
        /**
         * Iterate over each element, calling the provided callback.
         * @param f  (Required) The function to call
    for every element. This function takes 3 arguments (the element, the
    index and the array). The return value is ignored.
         * @param opt_this  (Optional) The object to use as `this` in `f`.
         */
        forEach<S>(f: Function, opt_this?: S): void;
        /**
         * Get a reference to the underlying Array object. Warning: if the array
         * is mutated, no events will be dispatched by the collection, and the
         * collection's "length" property won't be in sync with the actual length
         * of the array.
         */
        getArray(): T[];
        /**
         * Get the element at the provided index.
         * @param index  (Required) Index.
         */
        item(index: number): T;
        /**
         * Get the length of this collection.
         */
        getLength(): number;
        /**
         * Insert an element at the provided index.
         * @param index  (Required) Index.
         * @param elem  (Required) Element.
         */
        insertAt(index: number, elem: T): void;
        /**
         * Remove the last element of the collection and return it.
         * Return `undefined` if the collection is empty.
         */
        pop(): T;
        /**
         * Insert the provided element at the end of the collection.
         * @param elem  (Required) Element.
         */
        push(elem: T): number;
        /**
         * Remove the first occurrence of an element from the collection.
         * @param elem  (Required) Element.
         */
        remove(elem: T): T;
        /**
         * Remove the element at the provided index and return it.
         * Return `undefined` if the collection does not contain this index.
         * @param index  (Required) Index.
         */
        removeAt(index: number): T;
        /**
         * Set the element at the provided index.
         * @param index  (Required) Index.
         * @param elem  (Required) Element.
         */
        setAt(index: number, elem: T): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * The ol.DeviceOrientation class provides access to information from
     * DeviceOrientation events.  See the [HTML 5 DeviceOrientation Specification](
     * http://www.w3.org/TR/orientation-event/) for more details.
     * 
     * Many new computers, and especially mobile phones
     * and tablets, provide hardware support for device orientation. Web
     * developers targeting mobile devices will be especially interested in this
     * class.
     * 
     * Device orientation data are relative to a common starting point. For mobile
     * devices, the starting point is to lay your phone face up on a table with the
     * top of the phone pointing north. This represents the zero state. All
     * angles are then relative to this state. For computers, it is the same except
     * the screen is open at 90 degrees.
     * 
     * Device orientation is reported as three angles - `alpha`, `beta`, and
     * `gamma` - relative to the starting position along the three planar axes X, Y
     * and Z. The X axis runs from the left edge to the right edge through the
     * middle of the device. Similarly, the Y axis runs from the bottom to the top
     * of the device through the middle. The Z axis runs from the back to the front
     * through the middle. In the starting position, the X axis points to the
     * right, the Y axis points away from you and the Z axis points straight up
     * from the device lying flat.
     * 
     * The three angles representing the device orientation are relative to the
     * three axes. `alpha` indicates how much the device has been rotated around the
     * Z axis, which is commonly interpreted as the compass heading (see note
     * below). `beta` indicates how much the device has been rotated around the X
     * axis, or how much it is tilted from front to back.  `gamma` indicates how
     * much the device has been rotated around the Y axis, or how much it is tilted
     * from left to right.
     * 
     * For most browsers, the `alpha` value returns the compass heading so if the
     * device points north, it will be 0.  With Safari on iOS, the 0 value of
     * `alpha` is calculated from when device orientation was first requested.
     * ol.DeviceOrientation provides the `heading` property which normalizes this
     * behavior across all browsers for you.
     * 
     * It is important to note that the HTML 5 DeviceOrientation specification
     * indicates that `alpha`, `beta` and `gamma` are in degrees while the
     * equivalent properties in ol.DeviceOrientation are in radians for consistency
     * with all other uses of angles throughout OpenLayers.
     */
    class DeviceOrientation extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_options  (Optional) Options.
         */
        constructor(opt_options?: olx.DeviceOrientationOptions);
        /**
         * Rotation around the device z-axis (in radians).
         */
        getAlpha(): number;
        /**
         * Rotation around the device x-axis (in radians).
         */
        getBeta(): number;
        /**
         * Rotation around the device y-axis (in radians).
         */
        getGamma(): number;
        /**
         * The heading of the device relative to north (in radians).
         */
        getHeading(): number;
        /**
         * Determine if orientation is being tracked.
         */
        getTracking(): boolean;
        /**
         * Enable or disable tracking of device orientation events.
         * @param tracking  (Required) The status of tracking changes to alpha, beta and
    gamma. If true, changes are tracked and reported immediately.
         */
        setTracking(tracking: boolean): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * A vector object for geographic features with a geometry and other
     * attribute properties, similar to the features in vector file formats like
     * GeoJSON.
     * 
     * Features can be styled individually with `setStyle`; otherwise they use the
     * style of their vector layer.
     * 
     * Note that attribute properties are set as {@link ol.Object} properties on
     * the feature object, so they are observable, and have get/set accessors.
     * 
     * Typically, a feature has a single geometry property. You can set the
     * geometry using the `setGeometry` method and get it with `getGeometry`.
     * It is possible to store more than one geometry on a feature using attribute
     * properties. By default, the geometry used for rendering is identified by
     * the property name `geometry`. If you want to use another geometry property
     * for rendering, use the `setGeometryName` method to change the attribute
     * property associated with the geometry for the feature.  For example:
     * 
     * ```js
     * var feature = new ol.Feature({
     *   geometry: new ol.geom.Polygon(polyCoords),
     *   labelPoint: new ol.geom.Point(labelCoords),
     *   name: 'My Polygon'
     * });
     * 
     * // get the polygon geometry
     * var poly = feature.getGeometry();
     * 
     * // Render the feature as a point using the coordinates from labelPoint
     * feature.setGeometryName('labelPoint');
     * 
     * // get the point geometry
     * var point = feature.getGeometry();
     * ```
     */
    class Feature extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_geometryOrProperties  (Optional) You may pass a Geometry object directly, or an object literal
    containing properties.  If you pass an object literal, you may
    include a Geometry associated with a `geometry` key.
         */
        constructor(opt_geometryOrProperties?: ol.geom.Geometry|{ [key: string]: any; });
        /**
         * Clone this feature. If the original feature has a geometry it
         * is also cloned. The feature id is not set in the clone.
         */
        clone(): ol.Feature;
        /**
         * Get the feature's default geometry.  A feature may have any number of named
         * geometries.  The "default" geometry (the one that is rendered by default) is
         * set when calling {@link ol.Feature#setGeometry}.
         */
        getGeometry(): ol.geom.Geometry;
        /**
         * Get the feature identifier.  This is a stable identifier for the feature and
         * is either set when reading data from a remote source or set explicitly by
         * calling {@link ol.Feature#setId}.
         */
        getId(): number|string;
        /**
         * Get the name of the feature's default geometry.  By default, the default
         * geometry is named `geometry`.
         */
        getGeometryName(): string;
        /**
         * Get the feature's style.  This return for this method depends on what was
         * provided to the {@link ol.Feature#setStyle} method.
         */
        getStyle(): ol.style.Style|ol.style.Style[]|ol.FeatureStyleFunction;
        /**
         * Get the feature's style function.
         */
        getStyleFunction(): ol.FeatureStyleFunction;
        /**
         * Set the default geometry for the feature.  This will update the property
         * with the name returned by {@link ol.Feature#getGeometryName}.
         * @param geometry  (Optional) The new geometry.
         */
        setGeometry(geometry?: ol.geom.Geometry): void;
        /**
         * Set the style for the feature.  This can be a single style object, an array
         * of styles, or a function that takes a resolution and returns an array of
         * styles. If it is `null` the feature has no style (a `null` style).
         * @param style  (Required) Style for this feature.
         */
        setStyle(style: ol.style.Style|ol.style.Style[]|ol.FeatureStyleFunction): void;
        /**
         * Set the feature id.  The feature id is considered stable and may be used when
         * requesting features or comparing identifiers returned from a remote source.
         * The feature id can be used with the {@link ol.source.Vector#getFeatureById}
         * method.
         * @param id  (Optional) The feature id.
         */
        setId(id?: number|string): void;
        /**
         * Set the property name to be used when getting the feature's default geometry.
         * When calling {@link ol.Feature#getGeometry}, the value of the property with
         * this name will be returned.
         * @param name  (Required) The property name of the default geometry.
         */
        setGeometryName(name: string): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * Helper class for providing HTML5 Geolocation capabilities.
     * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
     * is used to locate a user's position.
     * 
     * To get notified of position changes, register a listener for the generic
     * `change` event on your instance of `ol.Geolocation`.
     * 
     * Example:
     * 
     *     var geolocation = new ol.Geolocation({
     *       // take the projection to use from the map's view
     *       projection: view.getProjection()
     *     });
     *     // listen to changes in position
     *     geolocation.on('change', function(evt) {
     *       window.console.log(geolocation.getPosition());
     *     });
     */
    class Geolocation extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_options  (Optional) Options.
         */
        constructor(opt_options?: olx.GeolocationOptions);
        /**
         * Get the accuracy of the position in meters.
         */
        getAccuracy(): number;
        /**
         * Get a geometry of the position accuracy.
         */
        getAccuracyGeometry(): ol.geom.Geometry;
        /**
         * Get the altitude associated with the position.
         */
        getAltitude(): number;
        /**
         * Get the altitude accuracy of the position.
         */
        getAltitudeAccuracy(): number;
        /**
         * Get the heading as radians clockwise from North.
         */
        getHeading(): number;
        /**
         * Get the position of the device.
         */
        getPosition(): ol.Coordinate;
        /**
         * Get the projection associated with the position.
         */
        getProjection(): ol.proj.Projection;
        /**
         * Get the speed in meters per second.
         */
        getSpeed(): number;
        /**
         * Determine if the device location is being tracked.
         */
        getTracking(): boolean;
        /**
         * Get the tracking options.
         */
        getTrackingOptions(): GeolocationPositionOptions;
        /**
         * Set the projection to use for transforming the coordinates.
         * @param projection  (Required) The projection the position is
    reported in.
         */
        setProjection(projection: ol.proj.Projection): void;
        /**
         * Enable or disable tracking.
         * @param tracking  (Required) Enable tracking.
         */
        setTracking(tracking: boolean): void;
        /**
         * Set the tracking options.
         * @param options  (Required) PositionOptions as defined by the
    [HTML5 Geolocation spec
    ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
         */
        setTrackingOptions(options: GeolocationPositionOptions): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * Render a grid for a coordinate system on a map.
     */
    class Graticule {
        /**
         * Render a grid for a coordinate system on a map.
         * @param opt_options  (Optional) Options.
         */
        constructor(opt_options?: olx.GraticuleOptions);
        /**
         * Get the map associated with this graticule.
         */
        getMap(): ol.Map;
        /**
         * Get the list of meridians.  Meridians are lines of equal longitude.
         */
        getMeridians(): ol.geom.LineString[];
        /**
         * Get the list of parallels.  Pallels are lines of equal latitude.
         */
        getParallels(): ol.geom.LineString[];
        /**
         * Set the map for this graticule.  The graticule will be rendered on the
         * provided map.
         * @param map  (Required) Map.
         */
        setMap(map: ol.Map): void;
    }
    /**
     * TODO: This class has no documentation. Contact the library author if this class should be documented
     */
    class Image extends ol.ImageBase {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param extent  (Required) Extent.
         * @param resolution  (Optional) Resolution.
         * @param pixelRatio  (Optional) Pixel ratio.
         * @param attributions  (Optional) Attributions.
         * @param src  (Optional) Image source URI.
         * @param crossOrigin  (Optional) Cross origin.
         * @param imageLoadFunction  (Optional) Image load function.
         */
        constructor(extent: ol.Extent, resolution?: number, pixelRatio?: number, attributions?: ol.Attribution[], src?: string, crossOrigin?: string, imageLoadFunction?: ol.ImageLoadFunctionType);
        /**
         * Get the HTML image element (may be a Canvas, Image, or Video).
         * @param opt_context  (Optional) Object.
         */
        getImage(opt_context?: any): HTMLCanvasElement|HTMLImageElement|HTMLVideoElement;
    }
    /**
     * TODO: This class has no documentation. Contact the library author if this class should be documented
     */
    class ImageBase extends goog.events.EventTarget {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param extent  (Required) Extent.
         * @param resolution  (Optional) Resolution.
         * @param pixelRatio  (Optional) Pixel ratio.
         * @param state  (Optional) State.
         * @param attributions  (Optional) Attributions.
         */
        constructor(extent: ol.Extent, resolution?: number, pixelRatio?: number, state?: ol.ImageState, attributions?: ol.Attribution[]);
    }
    /**
     * Implementation of inertial deceleration for map movement.
     */
    class Kinetic {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param decay  (Required) Rate of decay (must be negative).
         * @param minVelocity  (Required) Minimum velocity (pixels/millisecond).
         * @param delay  (Required) Delay to consider to calculate the kinetic
    initial values (milliseconds).
         */
        constructor(decay: number, minVelocity: number, delay: number);
    }
    /**
     * The map is the core component of OpenLayers. For a map to render, a view,
     * one or more layers, and a target container are needed:
     * 
     *     var map = new ol.Map({
     *       view: new ol.View({
     *         center: [0, 0],
     *         zoom: 1
     *       }),
     *       layers: [
     *         new ol.layer.Tile({
     *           source: new ol.source.MapQuest({layer: 'osm'})
     *         })
     *       ],
     *       target: 'map'
     *     });
     * 
     * The above snippet creates a map using a {@link ol.layer.Tile} to display
     * {@link ol.source.MapQuest} OSM data and render it to a DOM element with the
     * id `map`.
     * 
     * The constructor places a viewport container (with CSS class name
     * `ol-viewport`) in the target element (see `getViewport()`), and then two
     * further elements within the viewport: one with CSS class name
     * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
     * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
     * option of {@link ol.Overlay} for the difference). The map itself is placed in
     * a further element within the viewport, either DOM or Canvas, depending on the
     * renderer.
     * 
     * Layers are stored as a `ol.Collection` in layerGroups. A top-level group is
     * provided by the library. This is what is accessed by `getLayerGroup` and
     * `setLayerGroup`. Layers entered in the options are added to this group, and
     * `addLayer` and `removeLayer` change the layer collection in the group.
     * `getLayers` is a convenience function for `getLayerGroup().getLayers()`.
     * Note that `ol.layer.Group` is a subclass of `ol.layer.Base`, so layers
     * entered in the options or added with `addLayer` can be groups, which can
     * contain further groups, and so on.
     */
    class Map extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param options  (Required) Map options.
         */
        constructor(options: olx.MapOptions);
        /**
         * Add the given control to the map.
         * @param control  (Required) Control.
         */
        addControl(control: ol.control.Control): void;
        /**
         * Add the given interaction to the map.
         * @param interaction  (Required) Interaction to add.
         */
        addInteraction(interaction: ol.interaction.Interaction): void;
        /**
         * Adds the given layer to the top of this map. If you want to add a layer
         * elsewhere in the stack, use `getLayers()` and the methods available on
         * {@link ol.Collection}.
         * @param layer  (Required) Layer.
         */
        addLayer(layer: ol.layer.Base): void;
        /**
         * Add the given overlay to the map.
         * @param overlay  (Required) Overlay.
         */
        addOverlay(overlay: ol.Overlay): void;
        /**
         * Add functions to be called before rendering. This can be used for attaching
         * animations before updating the map's view.  The {@link ol.animation}
         * namespace provides several static methods for creating prerender functions.
         * @param var_args  (Required) Any number of pre-render functions.
         */
        beforeRender(var_args: ol.PreRenderFunction): void;
        /**
         * Detect features that intersect a pixel on the viewport, and execute a
         * callback with each intersecting feature. Layers included in the detection can
         * be configured through `opt_layerFilter`.
         * @param pixel  (Required) Pixel.
         * @param callback  (Required) Feature callback. The callback will be
    called with two arguments. The first argument is one
    {@link ol.Feature feature} or
    {@link ol.render.Feature render feature} at the pixel, the second is
    the {@link ol.layer.Layer layer} of the feature and will be null for
    unmanaged layers. To stop detection, callback functions can return a
    truthy value.
         * @param opt_this  (Optional) Value to use as `this` when executing `callback`.
         * @param opt_layerFilter  (Optional) Layer
    filter function. The filter function will receive one argument, the
    {@link ol.layer.Layer layer-candidate} and it should return a boolean
    value. Only layers which are visible and for which this function returns
    `true` will be tested for features. By default, all visible layers will
    be tested.
         * @param opt_this2  (Optional) Value to use as `this` when executing `layerFilter`.
         */
        forEachFeatureAtPixel<S, T, U>(pixel: ol.Pixel, callback: Function, opt_this?: S, opt_layerFilter?: Function, opt_this2?: U): T;
        /**
         * Detect layers that have a color value at a pixel on the viewport, and
         * execute a callback with each matching layer. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         * @param pixel  (Required) Pixel.
         * @param callback  (Required) Layer
    callback. Will receive one argument, the {@link ol.layer.Layer layer}
    that contains the color pixel. To stop detection, callback functions can
    return a truthy value.
         * @param opt_this  (Optional) Value to use as `this` when executing `callback`.
         * @param opt_layerFilter  (Optional) Layer
    filter function. The filter function will receive one argument, the
    {@link ol.layer.Layer layer-candidate} and it should return a boolean
    value. Only layers which are visible and for which this function returns
    `true` will be tested for features. By default, all visible layers will
    be tested.
         * @param opt_this2  (Optional) Value to use as `this` when executing `layerFilter`.
         */
        forEachLayerAtPixel<S, T, U>(pixel: ol.Pixel, callback: Function, opt_this?: S, opt_layerFilter?: Function, opt_this2?: U): T;
        /**
         * Detect if features intersect a pixel on the viewport. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         * @param pixel  (Required) Pixel.
         * @param opt_layerFilter  (Optional) Layer
    filter function. The filter function will receive one argument, the
    {@link ol.layer.Layer layer-candidate} and it should return a boolean
    value. Only layers which are visible and for which this function returns
    `true` will be tested for features. By default, all visible layers will
    be tested.
         * @param opt_this  (Optional) Value to use as `this` when executing `layerFilter`.
         */
        hasFeatureAtPixel<U>(pixel: ol.Pixel, opt_layerFilter?: Function, opt_this?: U): boolean;
        /**
         * Returns the geographical coordinate for a browser event.
         * @param event  (Required) Event.
         */
        getEventCoordinate(event: Event): ol.Coordinate;
        /**
         * Returns the map pixel position for a browser event relative to the viewport.
         * @param event  (Required) Event.
         */
        getEventPixel(event: Event): ol.Pixel;
        /**
         * Get the target in which this map is rendered.
         * Note that this returns what is entered as an option or in setTarget:
         * if that was an element, it returns an element; if a string, it returns that.
         */
        getTarget(): Element|string;
        /**
         * Get the DOM element into which this map is rendered. In contrast to
         * `getTarget` this method always return an `Element`, or `null` if the
         * map has no target.
         */
        getTargetElement(): Element;
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * map view projection.
         * @param pixel  (Required) Pixel position in the map viewport.
         */
        getCoordinateFromPixel(pixel: ol.Pixel): ol.Coordinate;
        /**
         * Get the map controls. Modifying this collection changes the controls
         * associated with the map.
         */
        getControls(): ol.Collection<ol.control.Control>;
        /**
         * Get the map overlays. Modifying this collection changes the overlays
         * associated with the map.
         */
        getOverlays(): ol.Collection<ol.Overlay>;
        /**
         * Get an overlay by its identifier (the value returned by overlay.getId()).
         * Note that the index treats string and numeric identifiers as the same. So
         * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
         * @param id  (Required) Overlay identifier.
         */
        getOverlayById(id: string|number): ol.Overlay;
        /**
         * Get the map interactions. Modifying this collection changes the interactions
         * associated with the map.
         * 
         * Interactions are used for e.g. pan, zoom and rotate.
         */
        getInteractions(): ol.Collection<ol.interaction.Interaction>;
        /**
         * Get the layergroup associated with this map.
         */
        getLayerGroup(): ol.layer.Group;
        /**
         * Get the collection of layers associated with this map.
         */
        getLayers(): ol.Collection<ol.layer.Base>;
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the map view
         * projection and returns the corresponding pixel.
         * @param coordinate  (Required) A map coordinate.
         */
        getPixelFromCoordinate(coordinate: ol.Coordinate): ol.Pixel;
        /**
         * Get the size of this map.
         */
        getSize(): ol.Size;
        /**
         * Get the view associated with this map. A view manages properties such as
         * center and resolution.
         */
        getView(): ol.View;
        /**
         * Get the element that serves as the map viewport.
         */
        getViewport(): Element;
        /**
         * Requests an immediate render in a synchronous manner.
         */
        renderSync(): void;
        /**
         * Request a map rendering (at the next animation frame).
         */
        render(): void;
        /**
         * Remove the given control from the map.
         * @param control  (Required) Control.
         */
        removeControl(control: ol.control.Control): ol.control.Control;
        /**
         * Remove the given interaction from the map.
         * @param interaction  (Required) Interaction to remove.
         */
        removeInteraction(interaction: ol.interaction.Interaction): ol.interaction.Interaction;
        /**
         * Removes the given layer from the map.
         * @param layer  (Required) Layer.
         */
        removeLayer(layer: ol.layer.Base): ol.layer.Base;
        /**
         * Remove the given overlay from the map.
         * @param overlay  (Required) Overlay.
         */
        removeOverlay(overlay: ol.Overlay): ol.Overlay;
        /**
         * Sets the layergroup of this map.
         * @param layerGroup  (Required) A layer group containing the layers in
    this map.
         */
        setLayerGroup(layerGroup: ol.layer.Group): void;
        /**
         * Set the size of this map.
         * @param size  (Optional) The size in pixels of the map in the DOM.
         */
        setSize(size?: ol.Size): void;
        /**
         * Set the target element to render this map into.
         * @param target  (Optional) The Element or id of the Element
    that the map is rendered in.
         */
        setTarget(target?: Element|string): void;
        /**
         * Set the view for this map.
         * @param view  (Required) The view that controls this map.
         */
        setView(view: ol.View): void;
        /**
         * Force a recalculation of the map viewport size.  This should be called when
         * third-party code changes the size of the map viewport.
         */
        updateSize(): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * Events emitted as map browser events are instances of this type.
     * See {@link ol.Map} for which events trigger a map browser event.
     */
    class MapBrowserEvent extends ol.MapEvent {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param type  (Required) Event type.
         * @param map  (Required) Map.
         * @param browserEvent  (Required) Browser event.
         * @param opt_dragging  (Optional) Is the map currently being dragged?
         * @param opt_frameState  (Optional) Frame state.
         */
        constructor(type: string, map: ol.Map, browserEvent: goog.events.BrowserEvent, opt_dragging?: boolean, opt_frameState?: olx.FrameState);
        /**
         * The pixel of the original browser event.
         */
        pixel: ol.Pixel;
        /**
         * The coordinate of the original browser event.
         */
        coordinate: ol.Coordinate;
        /**
         * Indicates if the map is currently being dragged. Only set for
         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
         */
        dragging: boolean;
        /**
         * Prevents the default browser action.
         */
        preventDefault(): void;
        /**
         * Prevents further propagation of the current event.
         */
        stopPropagation(): void;
        /**
         * The map where the event occurred.
         */
        map: ol.Map;
        /**
         * The frame state at the time of the event.
         */
        frameState: olx.FrameState;
    }
    /**
     * TODO: This class has no documentation. Contact the library author if this class should be documented
     */
    class MapBrowserPointerEvent extends ol.MapBrowserEvent {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param type  (Required) Event type.
         * @param map  (Required) Map.
         * @param pointerEvent  (Required) Pointer event.
         * @param opt_dragging  (Optional) Is the map currently being dragged?
         * @param opt_frameState  (Optional) Frame state.
         */
        constructor(type: string, map: ol.Map, pointerEvent: ol.pointer.PointerEvent, opt_dragging?: boolean, opt_frameState?: olx.FrameState);
        /**
         * The pixel of the original browser event.
         */
        pixel: ol.Pixel;
        /**
         * The coordinate of the original browser event.
         */
        coordinate: ol.Coordinate;
        /**
         * Indicates if the map is currently being dragged. Only set for
         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
         */
        dragging: boolean;
        /**
         * Prevents the default browser action.
         */
        preventDefault(): void;
        /**
         * Prevents further propagation of the current event.
         */
        stopPropagation(): void;
        /**
         * The map where the event occurred.
         */
        map: ol.Map;
        /**
         * The frame state at the time of the event.
         */
        frameState: olx.FrameState;
    }
    /**
     * Events emitted as map events are instances of this type.
     * See {@link ol.Map} for which events trigger a map event.
     */
    class MapEvent extends goog.events.Event {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param type  (Required) Event type.
         * @param map  (Required) Map.
         * @param opt_frameState  (Optional) Frame state.
         */
        constructor(type: string, map: ol.Map, opt_frameState?: olx.FrameState);
        /**
         * The map where the event occurred.
         */
        map: ol.Map;
        /**
         * The frame state at the time of the event.
         */
        frameState: olx.FrameState;
    }
    /**
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Most non-trivial classes inherit from this.
     * 
     * This extends {@link ol.Observable} with observable properties, where each
     * property is observable as well as the object as a whole.
     * 
     * Classes that inherit from this have pre-defined properties, to which you can
     * add your owns. The pre-defined properties are listed in this documentation as
     * 'Observable Properties', and have their own accessors; for example,
     * {@link ol.Map} has a `target` property, accessed with `getTarget()`  and
     * changed with `setTarget()`. Not all properties are however settable. There
     * are also general-purpose accessors `get()` and `set()`. For example,
     * `get('target')` is equivalent to `getTarget()`.
     * 
     * The `set` accessors trigger a change event, and you can monitor this by
     * registering a listener. For example, {@link ol.View} has a `center`
     * property, so `view.on('change:center', function(evt) {...});` would call the
     * function whenever the value of the center property changes. Within the
     * function, `evt.target` would be the view, so `evt.target.getCenter()` would
     * return the new center.
     * 
     * You can add your own observable properties with
     * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
     * You can listen for changes on that property value with
     * `object.on('change:prop', listener)`. You can get a list of all
     * properties with {@link ol.Object#getProperties object.getProperties()}.
     * 
     * Note that the observable properties are separate from standard JS properties.
     * You can, for example, give your map object a title with
     * `map.title='New title'` and with `map.set('title', 'Another title')`. The
     * first will be a `hasOwnProperty`; the second will appear in
     * `getProperties()`. Only the second is observable.
     * 
     * Properties can be deleted by using the unset method. E.g.
     * object.unset('foo').
     */
    class Object extends ol.Observable {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_values  (Optional) An object with key-value pairs.
         */
        constructor(opt_values?: { [key: string]: any; });
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * An event target providing convenient methods for listener registration
     * and unregistration. A generic `change` event is always available through
     * {@link ol.Observable#changed}.
     */
    class Observable extends goog.events.EventTarget {
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        static unByKey(key: goog.events.Key): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * An element to be displayed over the map and attached to a single map
     * location.  Like {@link ol.control.Control}, Overlays are visible widgets.
     * Unlike Controls, they are not in a fixed position on the screen, but are tied
     * to a geographical coordinate, so panning the map will move an Overlay but not
     * a Control.
     * 
     * Example:
     * 
     *     var popup = new ol.Overlay({
     *       element: document.getElementById('popup')
     *     });
     *     popup.setPosition(coordinate);
     *     map.addOverlay(popup);
     */
    class Overlay extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param options  (Required) Overlay options.
         */
        constructor(options: olx.OverlayOptions);
        /**
         * Get the DOM element of this overlay.
         */
        getElement(): Element;
        /**
         * Get the overlay identifier which is set on constructor.
         */
        getId(): number|string;
        /**
         * Get the map associated with this overlay.
         */
        getMap(): ol.Map;
        /**
         * Get the offset of this overlay.
         */
        getOffset(): number[];
        /**
         * Get the current position of this overlay.
         */
        getPosition(): ol.Coordinate;
        /**
         * Get the current positioning of this overlay.
         */
        getPositioning(): string;
        /**
         * Set the DOM element to be associated with this overlay.
         * @param element  (Optional) The Element containing the overlay.
         */
        setElement(element?: Element): void;
        /**
         * Set the map to be associated with this overlay.
         * @param map  (Optional) The map that the overlay is part of.
         */
        setMap(map?: ol.Map): void;
        /**
         * Set the offset for this overlay.
         * @param offset  (Required) Offset.
         */
        setOffset(offset: number[]): void;
        /**
         * Set the position for this overlay. If the position is `undefined` the
         * overlay is hidden.
         * @param position  (Optional) The spatial point that the overlay
    is anchored at.
         */
        setPosition(position?: ol.Coordinate): void;
        /**
         * Set the positioning for this overlay.
         * @param positioning  (Required) how the overlay is
    positioned relative to its point on the map.
         */
        setPositioning(positioning: string): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * Class to create objects that can be used with {@link
     * ol.geom.Polygon.circular}.
     * 
     * For example to create a sphere whose radius is equal to the semi-major
     * axis of the WGS84 ellipsoid:
     * 
     * ```js
     * var wgs84Sphere= new ol.Sphere(6378137);
     * ```
     */
    class Sphere {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param radius  (Required) Radius.
         */
        constructor(radius: number);
        /**
         * Returns the geodesic area for a list of coordinates.
         * 
         * [Reference](http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409)
         * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
         * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
         * Laboratory, Pasadena, CA, June 2007
         * @param coordinates  (Required) List of coordinates of a linear
ring. If the ring is oriented clockwise, the area will be positive,
otherwise it will be negative.
         */
        geodesicArea(coordinates: ol.Coordinate[]): number;
        /**
         * Returns the distance from c1 to c2 using the haversine formula.
         * @param c1  (Required) Coordinate 1.
         * @param c2  (Required) Coordinate 2.
         */
        haversineDistance(c1: ol.Coordinate, c2: ol.Coordinate): number;
    }
    /**
     * Base class for tiles.
     */
    class Tile extends goog.events.EventTarget {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param tileCoord  (Required) Tile coordinate.
         * @param state  (Required) State.
         */
        constructor(tileCoord: ol.TileCoord, state: ol.TileState);
        /**
         * Get the tile coordinate for this tile.
         */
        getTileCoord(): ol.TileCoord;
    }
    /**
     * An ol.View object represents a simple 2D view of the map.
     * 
     * This is the object to act upon to change the center, resolution,
     * and rotation of the map.
     * 
     * ### The view states
     * 
     * An `ol.View` is determined by three states: `center`, `resolution`,
     * and `rotation`. Each state has a corresponding getter and setter, e.g.
     * `getCenter` and `setCenter` for the `center` state.
     * 
     * An `ol.View` has a `projection`. The projection determines the
     * coordinate system of the center, and its units determine the units of the
     * resolution (projection units per pixel). The default projection is
     * Spherical Mercator (EPSG:3857).
     * 
     * ### The constraints
     * 
     * `setCenter`, `setResolution` and `setRotation` can be used to change the
     * states of the view. Any value can be passed to the setters. And the value
     * that is passed to a setter will effectively be the value set in the view,
     * and returned by the corresponding getter.
     * 
     * But an `ol.View` object also has a *resolution constraint*, a
     * *rotation constraint* and a *center constraint*.
     * 
     * As said above, no constraints are applied when the setters are used to set
     * new states for the view. Applying constraints is done explicitly through
     * the use of the `constrain*` functions (`constrainResolution` and
     * `constrainRotation` and `constrainCenter`).
     * 
     * The main users of the constraints are the interactions and the
     * controls. For example, double-clicking on the map changes the view to
     * the "next" resolution. And releasing the fingers after pinch-zooming
     * snaps to the closest resolution (with an animation).
     * 
     * The *resolution constraint* snaps to specific resolutions. It is
     * determined by the following options: `resolutions`, `maxResolution`,
     * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three
     * options are ignored. See documentation for each option for more
     * information.
     * 
     * The *rotation constraint* snaps to specific angles. It is determined
     * by the following options: `enableRotation` and `constrainRotation`.
     * By default the rotation value is snapped to zero when approaching the
     * horizontal.
     * 
     * The *center constraint* is determined by the `extent` option. By
     * default the center is not constrained at all.
     */
    class View extends ol.Object {
        /**
         * TODO: This method has no documentation. Contact the library author if this method should be documented
         * @param opt_options  (Optional) View options.
         */
        constructor(opt_options?: olx.ViewOptions);
        /**
         * Get the constrained center of this view.
         * @param center  (Optional) Center.
         */
        constrainCenter(center?: ol.Coordinate): ol.Coordinate;
        /**
         * Get the constrained resolution of this view.
         * @param resolution  (Optional) Resolution.
         * @param opt_delta  (Optional) Delta. Default is `0`.
         * @param opt_direction  (Optional) Direction. Default is `0`.
         */
        constrainResolution(resolution?: number, opt_delta?: number, opt_direction?: number): number;
        /**
         * Get the constrained rotation of this view.
         * @param rotation  (Optional) Rotation.
         * @param opt_delta  (Optional) Delta. Default is `0`.
         */
        constrainRotation(rotation?: number, opt_delta?: number): number;
        /**
         * Get the view center.
         */
        getCenter(): ol.Coordinate;
        /**
         * Calculate the extent for the current view state and the passed size.
         * The size is the pixel dimensions of the box into which the calculated extent
         * should fit. In most cases you want to get the extent of the entire map,
         * that is `map.getSize()`.
         * @param size  (Required) Box pixel size.
         */
        calculateExtent(size: ol.Size): ol.Extent;
        /**
         * Get the view projection.
         */
        getProjection(): ol.proj.Projection;
        /**
         * Get the view resolution.
         */
        getResolution(): number;
        /**
         * Get the view rotation.
         */
        getRotation(): number;
        /**
         * Get the current zoom level. Return undefined if the current
         * resolution is undefined or not a "constrained resolution".
         */
        getZoom(): number;
        /**
         * Fit the given geometry or extent based on the given map size and border.
         * The size is pixel dimensions of the box to fit the extent into.
         * In most cases you will want to use the map size, that is `map.getSize()`.
         * Takes care of the map angle.
         * @param geometry  (Required) Geometry.
         * @param size  (Required) Box pixel size.
         * @param opt_options  (Optional) Options.
         */
        fit(geometry: ol.geom.SimpleGeometry|ol.Extent, size: ol.Size, opt_options?: olx.view.FitOptions): void;
        /**
         * Center on coordinate and view position.
         * @param coordinate  (Required) Coordinate.
         * @param size  (Required) Box pixel size.
         * @param position  (Required) Position on the view to center on.
         */
        centerOn(coordinate: ol.Coordinate, size: ol.Size, position: ol.Pixel): void;
        /**
         * Rotate the view around a given coordinate.
         * @param rotation  (Required) New rotation value for the view.
         * @param opt_anchor  (Optional) The rotation center.
         */
        rotate(rotation: number, opt_anchor?: ol.Coordinate): void;
        /**
         * Set the center of the current view.
         * @param center  (Optional) The center of the view.
         */
        setCenter(center?: ol.Coordinate): void;
        /**
         * Set the resolution for this view.
         * @param resolution  (Optional) The resolution of the view.
         */
        setResolution(resolution?: number): void;
        /**
         * Set the rotation for this view.
         * @param rotation  (Required) The rotation of the view in radians.
         */
        setRotation(rotation: number): void;
        /**
         * Zoom to a specific zoom level.
         * @param zoom  (Required) Zoom level.
         */
        setZoom(zoom: number): void;
        /**
         * Gets a value.
         * @param key  (Required) Key name.
         */
        get(key: string): any;
        /**
         * Get a list of object property names.
         */
        getKeys(): string[];
        /**
         * Get an object of all property names and values.
         */
        getProperties(): { [key: string]: any; };
        /**
         * Sets a value.
         * @param key  (Required) Key name.
         * @param value  (Required) Value.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        set(key: string, value: any, opt_silent?: boolean): void;
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param values  (Required) Values.
         * @param opt_silent  (Optional) Update without triggering an event.
         */
        setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
        /**
         * Unsets a property.
         * @param key  (Required) Key name.
         * @param opt_silent  (Optional) Unset without triggering an event.
         */
        unset(key: string, opt_silent?: boolean): void;
        /**
         * Increases the revision counter and dispatches a 'change' event.
         */
        changed(): void;
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         * @param event  (Required) Event object.
         */
        dispatchEvent(event: goog.events.EventLike): void;
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         */
        getRevision(): number;
        /**
         * Listen for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Listen once for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object to use as `this` in `listener`.
         */
        once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
        /**
         * Unlisten for a certain type of event.
         * @param type  (Required) The event type or array of event types.
         * @param listener  (Required) The listener function.
         * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
         */
        un(type: string|string[], listener: Function, opt_this?: any): void;
        /**
         * Removes an event listener using the key returned by `on()` or `once()`.
         * Note that using the {@link ol.Observable.unByKey} static function is to
         * be preferred.
         * @param key  (Required) The key returned by `on()` or `once()`.
         */
        unByKey(key: goog.events.Key): void;
    }
    /**
     * A color represented as a short array [red, green, blue, alpha].
     * red, green, and blue should be integers in the range 0..255 inclusive.
     * alpha should be a float in the range 0..1 inclusive.
     */
    type Color = number[];

    /**
     * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
     */
    type Coordinate = number[];

    /**
     * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
     */
    type Extent = number[];

    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    enum ImageState {
        IDLE = 0,
        LOADING = 1,
        LOADED = 2,
        ERROR = 3
    }
    /**
     * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
     * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
     * `'top-center'`, `'top-right'`
     */
    class OverlayPositioning {
        /**
         * "bottom-left"
         */
        public static BOTTOM_LEFT: string;
        /**
         * "bottom-center"
         */
        public static BOTTOM_CENTER: string;
        /**
         * "bottom-right"
         */
        public static BOTTOM_RIGHT: string;
        /**
         * "center-left"
         */
        public static CENTER_LEFT: string;
        /**
         * "center-center"
         */
        public static CENTER_CENTER: string;
        /**
         * "center-right"
         */
        public static CENTER_RIGHT: string;
        /**
         * "top-left"
         */
        public static TOP_LEFT: string;
        /**
         * "top-center"
         */
        public static TOP_CENTER: string;
        /**
         * "top-right"
         */
        public static TOP_RIGHT: string;
    }
    /**
     * An array with two elements, representing a pixel. The first element is the
     * x-coordinate, the second the y-coordinate of the pixel.
     */
    type Pixel = number[];

    /**
     * Available renderers: `'canvas'`, `'dom'` or `'webgl'`.
     */
    class RendererType {
        /**
         * "canvas"
         */
        public static CANVAS: string;
        /**
         * "dom"
         */
        public static DOM: string;
        /**
         * "webgl"
         */
        public static WEBGL: string;
    }
    /**
     * An array of numbers representing a size: `[width, height]`.
     */
    type Size = number[];

    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    enum TileState {
        IDLE = 0,
        LOADING = 1,
        LOADED = 2,
        ERROR = 3,
        EMPTY = 4
    }
    /**
     * An array of three numbers representing the location of a tile in a tile
     * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.
     */
    type TileCoord = number[];

    module events {
        /**
         * A function that takes an {@link ol.MapBrowserEvent} and returns a
         * `{boolean}`. If the condition is met, true should be returned.
         */
        type ConditionType = (arg0: ol.MapBrowserEvent) => boolean;
        module condition {
            /**
             * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
             * additionally the shift-key is pressed).
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function altKeyOnly(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
             * (e.g. when additionally the platform-modifier-key is pressed).
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function altShiftKeysOnly(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return always true.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function always(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the event is a `click` event, `false` otherwise.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function click(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return always false.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function never(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the browser event is a `pointermove` event, `false`
             * otherwise.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function pointerMove(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the event is a map `singleclick` event, `false` otherwise.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function singleClick(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the event is a map `dblclick` event, `false` otherwise.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function doubleClick(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
             * pressed.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function noModifierKeys(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if only the platform-modifier-key (the meta-key on Mac,
             * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally
             * the shift-key is pressed).
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function platformModifierKeyOnly(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
             * additionally the alt-key is pressed).
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function shiftKeyOnly(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the target element is not editable, i.e. not a `<input>`-,
             * `<select>`- or `<textarea>`-element, `false` otherwise.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function targetNotEditable(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return `true` if the event originates from a mouse device.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            function mouseOnly(mapBrowserEvent: ol.MapBrowserPointerEvent): boolean;
        }
    }
    module interaction {
        /**
         * A function that takes a {@link ol.MapBrowserEvent} and two
         * {@link ol.Pixel}s and returns a `{boolean}`. If the condition is met,
         * true should be returned.
         */
        type DragBoxEndConditionType = (arg0: ol.MapBrowserEvent, arg1: ol.Pixel, arg2: ol.Pixel) => boolean;
        /**
         * Function that takes coordinates and an optional existing geometry as
         * arguments, and returns a geometry. The optional existing geometry is the
         * geometry that is returned when the function is called without a second
         * argument.
         */
        type DrawGeometryFunctionType = (arg0: ol.Coordinate|ol.Coordinate[]|ol.Coordinate[][], arg1?: ol.geom.SimpleGeometry) => ol.geom.SimpleGeometry;
        /**
         * A function that takes an {@link ol.Feature} or {@link ol.render.Feature} and
         * an {@link ol.layer.Layer} and returns `true` if the feature may be selected
         * or `false` otherwise.
         */
        type SelectFilterFunction = (arg0: ol.Feature|ol.render.Feature, arg1: ol.layer.Layer) => boolean;
        /**
         * Set of interactions included in maps by default. Specific interactions can be
         * excluded by setting the appropriate option to false in the constructor
         * options, but the order of the interactions is fixed.  If you want to specify
         * a different order for interactions, you will need to create your own
         * {@link ol.interaction.Interaction} instances and insert them into a
         * {@link ol.Collection} in the order you want before creating your
         * {@link ol.Map} instance. The default set of interactions, in sequence, is:
         * * {@link ol.interaction.DragRotate}
         * * {@link ol.interaction.DoubleClickZoom}
         * * {@link ol.interaction.DragPan}
         * * {@link ol.interaction.PinchRotate}
         * * {@link ol.interaction.PinchZoom}
         * * {@link ol.interaction.KeyboardPan}
         * * {@link ol.interaction.KeyboardZoom}
         * * {@link ol.interaction.MouseWheelZoom}
         * * {@link ol.interaction.DragZoom}
         * @param opt_options  (Optional) Defaults options.
         */
        function defaults(opt_options?: olx.interaction.DefaultsOptions): ol.Collection<ol.interaction.Interaction>;
        /**
         * Allows the user to zoom by double-clicking on the map.
         */
        class DoubleClickZoom extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DoubleClickZoomOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} (if it was a
             * doubleclick) and eventually zooms the map.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Handles input of vector data by drag and drop.
         */
        class DragAndDrop extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragAndDropOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to draw a vector box by clicking and dragging on the map,
         * normally combined with an {@link ol.events.condition} that limits
         * it to when the shift or other key is held down. This is used, for example,
         * for zooming to a specific area of the map
         * (see {@link ol.interaction.DragZoom} and
         * {@link ol.interaction.DragRotateAndZoom}).
         * 
         * This interaction is only supported for mouse devices.
         */
        class DragBox extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragBoxOptions);
            /**
             * Returns geometry of last drawn box.
             */
            getGeometry(): ol.geom.Polygon;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to pan the map by dragging the map.
         */
        class DragPan extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragPanOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to zoom and rotate the map by clicking and dragging
         * on the map.  By default, this interaction is limited to when the shift
         * key is held down.
         * 
         * This interaction is only supported for mouse devices.
         * 
         * And this interaction is not included in the default interactions.
         */
        class DragRotateAndZoom extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragRotateAndZoomOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to rotate the map by clicking and dragging on the map,
         * normally combined with an {@link ol.events.condition} that limits
         * it to when the alt and shift keys are held down.
         * 
         * This interaction is only supported for mouse devices.
         */
        class DragRotate extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragRotateOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to zoom the map by clicking and dragging on the map,
         * normally combined with an {@link ol.events.condition} that limits
         * it to when a key, shift by default, is held down.
         * 
         * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
         * your custom one configured with `className`.
         */
        class DragZoom extends ol.interaction.DragBox {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.DragZoomOptions);
            /**
             * Returns geometry of last drawn box.
             */
            getGeometry(): ol.geom.Polygon;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Interaction for drawing feature geometries.
         */
        class Draw extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.interaction.DrawOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} and may actually
             * draw or finish the drawing.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Remove last point of the feature currently being drawn.
             */
            removeLastPoint(): void;
            /**
             * Stop drawing and add the sketch feature to the target layer.
             * The {@link ol.interaction.DrawEventType.DRAWEND} event is dispatched before
             * inserting the feature.
             */
            finishDrawing(): void;
            /**
             * Extend an existing geometry by adding additional points. This only works
             * on features with `LineString` geometries, where the interaction will
             * extend lines by adding points to the end of the coordinates array.
             * @param feature  (Required) Feature to be extended.
             */
            extend(feature: ol.Feature): void;
            /**
             * Create a `geometryFunction` for `mode: 'Circle'` that will create a regular
             * polygon with a user specified number of sides and start angle instead of an
             * `ol.geom.Circle` geometry.
             * @param opt_sides  (Optional) Number of sides of the regular polygon. Default is
    32.
             * @param opt_angle  (Optional) Angle of the first point in radians. 0 means East.
    Default is the angle defined by the heading from the center of the
    regular polygon to the current pointer position.
             */
            static createRegularPolygon(opt_sides?: number, opt_angle?: number): ol.interaction.DrawGeometryFunctionType;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * User actions that change the state of the map. Some are similar to controls,
         * but are not associated with a DOM element.
         * For example, {@link ol.interaction.KeyboardZoom} is functionally the same as
         * {@link ol.control.Zoom}, but triggered by a keyboard event not a button
         * element event.
         * Although interactions do not have a DOM element, some of them do render
         * vectors and so are visible on the screen.
         */
        class Interaction extends ol.Object {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.interaction.InteractionOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to pan the map using keyboard arrows.
         * Note that, although this interaction is by default included in maps,
         * the keys can only be used when browser focus is on the element to which
         * the keyboard events are attached. By default, this is the map div,
         * though you can change this with the `keyboardEventTarget` in
         * {@link ol.Map}. `document` never loses focus but, for any other element,
         * focus will have to be on, and returned to, this element if the keys are to
         * function.
         * See also {@link ol.interaction.KeyboardZoom}.
         */
        class KeyboardPan extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.KeyboardPanOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} if it was a
             * `KeyEvent`, and decides the direction to pan to (if an arrow key was
             * pressed).
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to zoom the map using keyboard + and -.
         * Note that, although this interaction is by default included in maps,
         * the keys can only be used when browser focus is on the element to which
         * the keyboard events are attached. By default, this is the map div,
         * though you can change this with the `keyboardEventTarget` in
         * {@link ol.Map}. `document` never loses focus but, for any other element,
         * focus will have to be on, and returned to, this element if the keys are to
         * function.
         * See also {@link ol.interaction.KeyboardPan}.
         */
        class KeyboardZoom extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.KeyboardZoomOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} if it was a
             * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
             * key pressed was '+' or '-').
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Interaction for modifying feature geometries.
         */
        class Modify extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.interaction.ModifyOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} and may modify the
             * geometry.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to zoom the map by scrolling the mouse wheel.
         */
        class MouseWheelZoom extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.MouseWheelZoomOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} (if it was a
             * mousewheel-event) and eventually zooms the map.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Enable or disable using the mouse's location as an anchor when zooming
             * @param useAnchor  (Required) true to zoom to the mouse's location, false
to zoom to the center of the map
             */
            setMouseAnchor(useAnchor: boolean): void;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to rotate the map by twisting with two fingers
         * on a touch screen.
         */
        class PinchRotate extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.PinchRotateOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Allows the user to zoom the map by pinching with two fingers
         * on a touch screen.
         */
        class PinchZoom extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.PinchZoomOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Base class that calls user-defined functions on `down`, `move` and `up`
         * events. This class also manages "drag sequences".
         * 
         * When the `handleDownEvent` user function returns `true` a drag sequence is
         * started. During a drag sequence the `handleDragEvent` user function is
         * called on `move` events. The drag sequence ends when the `handleUpEvent`
         * user function is called and returns `false`.
         */
        class Pointer extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.PointerOptions);
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} and may call into
             * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
             * detected.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Interaction for selecting vector features. By default, selected features are
         * styled differently, so this interaction can be used for visual highlighting,
         * as well as selecting features for other actions, such as modification or
         * output. There are three ways of controlling which features are selected:
         * using the browser event as defined by the `condition` and optionally the
         * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
         * further feature filter using the `filter` option.
         * 
         * Selected features are added to an internal unmanaged layer.
         */
        class Select extends ol.interaction.Interaction {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.SelectOptions);
            /**
             * Get the selected features.
             */
            getFeatures(): ol.Collection<ol.Feature>;
            /**
             * Returns the associated {@link ol.layer.Vector vectorlayer} of
             * the (last) selected feature. Note that this will not work with any
             * programmatic method like pushing features to
             * {@link ol.interaction.Select#getFeatures collection}.
             * @param feature  (Required) Feature
             */
            getLayer(feature: ol.Feature|ol.render.Feature): ol.layer.Vector;
            /**
             * Handles the {@link ol.MapBrowserEvent map browser event} and may change the
             * selected state of features.
             * @param mapBrowserEvent  (Required) Map browser event.
             */
            static handleEvent(mapBrowserEvent: ol.MapBrowserEvent): boolean;
            /**
             * Remove the interaction from its current map, if any,  and attach it to a new
             * map, if any. Pass `null` to just remove the interaction from the current map.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Handles snapping of vector features while modifying or drawing them.  The
         * features can come from a {@link ol.source.Vector} or {@link ol.Collection}
         * Any interaction object that allows the user to interact
         * with the features using the mouse can benefit from the snapping, as long
         * as it is added before.
         * 
         * The snap interaction modifies map browser event `coordinate` and `pixel`
         * properties to force the snap to occur to any interaction that them.
         * 
         * Example:
         * 
         *     var snap = new ol.interaction.Snap({
         *       source: source
         *     });
         */
        class Snap extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.interaction.SnapOptions);
            /**
             * Add a feature to the collection of features that we may snap to.
             * @param feature  (Required) Feature.
             * @param opt_listen  (Optional) Whether to listen to the geometry change or not
    Defaults to `true`.
             */
            addFeature(feature: ol.Feature, opt_listen?: boolean): void;
            /**
             * Remove a feature from the collection of features that we may snap to.
             * @param feature  (Required) Feature
             * @param opt_unlisten  (Optional) Whether to unlisten to the geometry change
    or not. Defaults to `true`.
             */
            removeFeature(feature: ol.Feature, opt_unlisten?: boolean): void;
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Interaction for translating (moving) features.
         */
        class Translate extends ol.interaction.Pointer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.interaction.TranslateOptions);
            /**
             * Return whether the interaction is currently active.
             */
            getActive(): boolean;
            /**
             * Get the map associated with this interaction.
             */
            getMap(): ol.Map;
            /**
             * Activate or deactivate the interaction.
             * @param active  (Required) Active.
             */
            setActive(active: boolean): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
    }
    module raster {
        /**
         * A function that takes an array of input data, performs some operation, and
         * returns an array of ouput data.  For `'pixel'` type operations, functions
         * will be called with an array of {@link ol.raster.Pixel} data and should
         * return an array of the same.  For `'image'` type operations, functions will
         * be called with an array of {@link ImageData
         * https://developer.mozilla.org/en-US/docs/Web/API/ImageData} and should return
         * an array of the same.  The operations are called with a second "data"
         * argument, which can be used for storage.  The data object is accessible
         * from raster events, where it can be initialized in "beforeoperations" and
         * accessed again in "afteroperations".
         */
        type Operation = (arg0: ol.raster.Pixel[]|ImageData[], arg1: any) => ol.raster.Pixel[]|ImageData[];
        /**
         * Raster operation type. Supported values are `'pixel'` and `'image'`.
         */
        class OperationType {
            /**
             * "pixel"
             */
            public static PIXEL: string;
            /**
             * "image"
             */
            public static IMAGE: string;
        }
        /**
         * An array of numbers representing pixel values.
         */
        type Pixel = number[];

    }
    module reproj {
        /**
         * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
         */
        type ImageFunctionType = (arg0: ol.Extent, arg1: number, arg2: number) => ol.ImageBase;
        /**
         * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
         */
        type TileFunctionType = (arg0: number, arg1: number, arg2: number, arg3: number) => ol.Tile;
    }
    module style {
        /**
         * A function that takes an {@link ol.Feature} and a `{number}` representing
         * the view's resolution. The function should return an array of
         * {@link ol.style.Style}. This way e.g. a vector layer can be styled.
         */
        type StyleFunction = (arg0: ol.Feature|ol.render.Feature, arg1: number) => ol.style.Style|ol.style.Style[];
        /**
         * A function that takes an {@link ol.Feature} as argument and returns an
         * {@link ol.geom.Geometry} that will be rendered and styled for the feature.
         */
        type GeometryFunction = (arg0: ol.Feature|ol.render.Feature) => ol.geom.Geometry|ol.render.Feature;
        /**
         * Manages the creation of image atlases.
         * 
         * Images added to this manager will be inserted into an atlas, which
         * will be used for rendering.
         * The `size` given in the constructor is the size for the first
         * atlas. After that, when new atlases are created, they will have
         * twice the size as the latest atlas (until `maxSize` is reached).
         * 
         * If an application uses many images or very large images, it is recommended
         * to set a higher `size` value to avoid the creation of too many atlases.
         */
        class AtlasManager {
            /**
             * Manages the creation of image atlases.
             * 
             * Images added to this manager will be inserted into an atlas, which
             * will be used for rendering.
             * The `size` given in the constructor is the size for the first
             * atlas. After that, when new atlases are created, they will have
             * twice the size as the latest atlas (until `maxSize` is reached).
             * 
             * If an application uses many images or very large images, it is recommended
             * to set a higher `size` value to avoid the creation of too many atlases.
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.AtlasManagerOptions);
        }
        /**
         * Set circle style for vector features.
         */
        class Circle extends ol.style.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.CircleOptions);
            /**
             * Get the fill style for the circle.
             */
            getFill(): ol.style.Fill;
            /**
             * Get the image used to render the circle.
             * @param pixelRatio  (Required) Pixel ratio.
             */
            getImage(pixelRatio: number): HTMLCanvasElement;
            /**
             * Get the circle radius.
             */
            getRadius(): number;
            /**
             * Get the stroke style for the circle.
             */
            getStroke(): ol.style.Stroke;
            /**
             * Get the symbolizer opacity.
             */
            getOpacity(): number;
            /**
             * Determine whether the symbolizer rotates with the map.
             */
            getRotateWithView(): boolean;
            /**
             * Get the symoblizer rotation.
             */
            getRotation(): number;
            /**
             * Get the symbolizer scale.
             */
            getScale(): number;
            /**
             * Determine whether the symbolizer should be snapped to a pixel.
             */
            getSnapToPixel(): boolean;
            /**
             * Set the opacity.
             * @param opacity  (Required) Opacity.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the rotation.
             * @param rotation  (Required) Rotation.
             */
            setRotation(rotation: number): void;
            /**
             * Set the scale.
             * @param scale  (Required) Scale.
             */
            setScale(scale: number): void;
        }
        /**
         * Set fill style for vector features.
         */
        class Fill {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.FillOptions);
            /**
             * Get the fill color.
             */
            getColor(): ol.Color|string;
            /**
             * Set the color.
             * @param color  (Required) Color.
             */
            setColor(color: ol.Color|string): void;
        }
        /**
         * Set icon style for vector features.
         */
        class Icon extends ol.style.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.IconOptions);
            /**
             * Get the anchor point.  The anchor determines the center point for the
             * symbolizer.  Its units are determined by `anchorXUnits` and `anchorYUnits`.
             */
            getAnchor(): number[];
            /**
             * Get the image icon.
             * @param pixelRatio  (Required) Pixel ratio.
             */
            getImage(pixelRatio: number): HTMLImageElement|HTMLCanvasElement;
            /**
             * Get the origin of the symbolizer.
             */
            getOrigin(): number[];
            /**
             * Get the image URL.
             */
            getSrc(): string;
            /**
             * Get the size of the symbolizer (in pixels).
             */
            getSize(): ol.Size;
            /**
             * Load not yet loaded URI.
             * When rendering a feature with an icon style, the vector renderer will
             * automatically call this method. However, you might want to call this
             * method yourself for preloading or other purposes.
             */
            load(): void;
            /**
             * Get the symbolizer opacity.
             */
            getOpacity(): number;
            /**
             * Determine whether the symbolizer rotates with the map.
             */
            getRotateWithView(): boolean;
            /**
             * Get the symoblizer rotation.
             */
            getRotation(): number;
            /**
             * Get the symbolizer scale.
             */
            getScale(): number;
            /**
             * Determine whether the symbolizer should be snapped to a pixel.
             */
            getSnapToPixel(): boolean;
            /**
             * Set the opacity.
             * @param opacity  (Required) Opacity.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the rotation.
             * @param rotation  (Required) Rotation.
             */
            setRotation(rotation: number): void;
            /**
             * Set the scale.
             * @param scale  (Required) Scale.
             */
            setScale(scale: number): void;
        }
        /**
         * A base class used for creating subclasses and not instantiated in
         * apps. Base class for {@link ol.style.Icon}, {@link ol.style.Circle} and
         * {@link ol.style.RegularShape}.
         */
        class Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: ol.style.ImageOptions);
            /**
             * Get the symbolizer opacity.
             */
            getOpacity(): number;
            /**
             * Determine whether the symbolizer rotates with the map.
             */
            getRotateWithView(): boolean;
            /**
             * Get the symoblizer rotation.
             */
            getRotation(): number;
            /**
             * Get the symbolizer scale.
             */
            getScale(): number;
            /**
             * Determine whether the symbolizer should be snapped to a pixel.
             */
            getSnapToPixel(): boolean;
            /**
             * Set the opacity.
             * @param opacity  (Required) Opacity.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the rotation.
             * @param rotation  (Required) Rotation.
             */
            setRotation(rotation: number): void;
            /**
             * Set the scale.
             * @param scale  (Required) Scale.
             */
            setScale(scale: number): void;
        }
        /**
         * Set regular shape style for vector features. The resulting shape will be
         * a regular polygon when `radius` is provided, or a star when `radius1` and
         * `radius2` are provided.
         */
        class RegularShape extends ol.style.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.style.RegularShapeOptions);
            /**
             * Get the anchor point.  The anchor determines the center point for the
             * symbolizer.  Its units are determined by `anchorXUnits` and `anchorYUnits`.
             */
            getAnchor(): number[];
            /**
             * Get the angle used in generating the shape.
             */
            getAngle(): number;
            /**
             * Get the fill style for the shape.
             */
            getFill(): ol.style.Fill;
            /**
             * Get the image element for the symbolizer.
             * @param pixelRatio  (Required) Pixel ratio.
             */
            getImage(pixelRatio: number): HTMLCanvasElement|HTMLVideoElement|HTMLImageElement;
            /**
             * Get the origin of the symbolizer.
             */
            getOrigin(): number[];
            /**
             * Get the number of points for generating the shape.
             */
            getPoints(): number;
            /**
             * Get the (primary) radius for the shape.
             */
            getRadius(): number;
            /**
             * Get the secondary radius for the shape.
             */
            getRadius2(): number;
            /**
             * Get the size of the symbolizer (in pixels).
             */
            getSize(): ol.Size;
            /**
             * Get the stroke style for the shape.
             */
            getStroke(): ol.style.Stroke;
            /**
             * Get the symbolizer opacity.
             */
            getOpacity(): number;
            /**
             * Determine whether the symbolizer rotates with the map.
             */
            getRotateWithView(): boolean;
            /**
             * Get the symoblizer rotation.
             */
            getRotation(): number;
            /**
             * Get the symbolizer scale.
             */
            getScale(): number;
            /**
             * Determine whether the symbolizer should be snapped to a pixel.
             */
            getSnapToPixel(): boolean;
            /**
             * Set the opacity.
             * @param opacity  (Required) Opacity.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the rotation.
             * @param rotation  (Required) Rotation.
             */
            setRotation(rotation: number): void;
            /**
             * Set the scale.
             * @param scale  (Required) Scale.
             */
            setScale(scale: number): void;
        }
        /**
         * Set stroke style for vector features.
         * Note that the defaults given are the Canvas defaults, which will be used if
         * option is not defined. The `get` functions return whatever was entered in
         * the options; they will not return the default.
         */
        class Stroke {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.StrokeOptions);
            /**
             * Get the stroke color.
             */
            getColor(): ol.Color|string;
            /**
             * Get the line cap type for the stroke.
             */
            getLineCap(): string;
            /**
             * Get the line dash style for the stroke.
             */
            getLineDash(): number[];
            /**
             * Get the line join type for the stroke.
             */
            getLineJoin(): string;
            /**
             * Get the miter limit for the stroke.
             */
            getMiterLimit(): number;
            /**
             * Get the stroke width.
             */
            getWidth(): number;
            /**
             * Set the color.
             * @param color  (Required) Color.
             */
            setColor(color: ol.Color|string): void;
            /**
             * Set the line cap.
             * @param lineCap  (Optional) Line cap.
             */
            setLineCap(lineCap?: string): void;
            /**
             * Set the line dash.
             * @param lineDash  (Required) Line dash.
             */
            setLineDash(lineDash: number[]): void;
            /**
             * Set the line join.
             * @param lineJoin  (Optional) Line join.
             */
            setLineJoin(lineJoin?: string): void;
            /**
             * Set the miter limit.
             * @param miterLimit  (Optional) Miter limit.
             */
            setMiterLimit(miterLimit?: number): void;
            /**
             * Set the width.
             * @param width  (Optional) Width.
             */
            setWidth(width?: number): void;
        }
        /**
         * Container for vector feature rendering styles. Any changes made to the style
         * or its children through `set*()` methods will not take effect until the
         * feature or layer that uses the style is re-rendered.
         */
        class Style {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Style options.
             */
            constructor(opt_options?: olx.style.StyleOptions);
            /**
             * Get the geometry to be rendered.
             */
            getGeometry(): string|ol.geom.Geometry|ol.style.GeometryFunction;
            /**
             * Get the function used to generate a geometry for rendering.
             */
            getGeometryFunction(): ol.style.GeometryFunction;
            /**
             * Get the fill style.
             */
            getFill(): ol.style.Fill;
            /**
             * Get the image style.
             */
            getImage(): ol.style.Image;
            /**
             * Get the stroke style.
             */
            getStroke(): ol.style.Stroke;
            /**
             * Get the text style.
             */
            getText(): ol.style.Text;
            /**
             * Get the z-index for the style.
             */
            getZIndex(): number;
            /**
             * Set a geometry that is rendered instead of the feature's geometry.
             * @param geometry  (Required) Feature property or geometry or function returning a geometry to render
    for this style.
             */
            setGeometry(geometry: string|ol.geom.Geometry|ol.style.GeometryFunction): void;
            /**
             * Set the z-index.
             * @param zIndex  (Optional) ZIndex.
             */
            setZIndex(zIndex?: number): void;
        }
        /**
         * Set text style for vector features.
         */
        class Text {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.style.TextOptions);
            /**
             * Get the font name.
             */
            getFont(): string;
            /**
             * Get the x-offset for the text.
             */
            getOffsetX(): number;
            /**
             * Get the y-offset for the text.
             */
            getOffsetY(): number;
            /**
             * Get the fill style for the text.
             */
            getFill(): ol.style.Fill;
            /**
             * Get the text rotation.
             */
            getRotation(): number;
            /**
             * Get the text scale.
             */
            getScale(): number;
            /**
             * Get the stroke style for the text.
             */
            getStroke(): ol.style.Stroke;
            /**
             * Get the text to be rendered.
             */
            getText(): string;
            /**
             * Get the text alignment.
             */
            getTextAlign(): string;
            /**
             * Get the text baseline.
             */
            getTextBaseline(): string;
            /**
             * Set the font.
             * @param font  (Optional) Font.
             */
            setFont(font?: string): void;
            /**
             * Set the x offset.
             * @param offsetX  (Required) Horizontal text offset.
             */
            setOffsetX(offsetX: number): void;
            /**
             * Set the y offset.
             * @param offsetY  (Required) Vertical text offset.
             */
            setOffsetY(offsetY: number): void;
            /**
             * Set the fill.
             * @param fill  (Required) Fill style.
             */
            setFill(fill: ol.style.Fill): void;
            /**
             * Set the rotation.
             * @param rotation  (Optional) Rotation.
             */
            setRotation(rotation?: number): void;
            /**
             * Set the scale.
             * @param scale  (Optional) Scale.
             */
            setScale(scale?: number): void;
            /**
             * Set the stroke.
             * @param stroke  (Required) Stroke style.
             */
            setStroke(stroke: ol.style.Stroke): void;
            /**
             * Set the text.
             * @param text  (Optional) Text.
             */
            setText(text?: string): void;
            /**
             * Set the text alignment.
             * @param textAlign  (Optional) Text align.
             */
            setTextAlign(textAlign?: string): void;
            /**
             * Set the text baseline.
             * @param textBaseline  (Optional) Text baseline.
             */
            setTextBaseline(textBaseline?: string): void;
        }
        /**
         * Icon anchor units. One of 'fraction', 'pixels'.
         */
        class IconAnchorUnits {
            /**
             * "fraction"
             */
            public static FRACTION: string;
            /**
             * "pixels"
             */
            public static PIXELS: string;
        }
        /**
         * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
         */
        class IconOrigin {
            /**
             * "bottom-left"
             */
            public static BOTTOM_LEFT: string;
            /**
             * "bottom-right"
             */
            public static BOTTOM_RIGHT: string;
            /**
             * "top-left"
             */
            public static TOP_LEFT: string;
            /**
             * "top-right"
             */
            public static TOP_RIGHT: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        type ImageOptions = any;

    }
    module xml {
        /**
         * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
         */
        type Parser = (arg0: Node, arg1: any[]) => void;
        /**
         * TODO: This function typedef has no documentation. Contact the library author if this function typedef should be documented
         */
        type Serializer = (arg0: Node, arg1: any, arg2: any[]) => void;
        /**
         * Recursively grab all text content of child nodes into a single string.
         * @param node  (Required) Node.
         * @param normalizeWhitespace  (Required) Normalize whitespace: remove all line
breaks.
         */
        function getAllTextContent(node: Node, normalizeWhitespace: boolean): string;
        /**
         * Parse an XML string to an XML Document.
         * @param xml  (Required) XML.
         */
        function parse(xml: string): Document;
    }
    module animation {
        /**
         * Generate an animated transition that will "bounce" the resolution as it
         * approaches the final value.
         * @param options  (Required) Bounce options.
         */
        function bounce(options: olx.animation.BounceOptions): ol.PreRenderFunction;
        /**
         * Generate an animated transition while updating the view center.
         * @param options  (Required) Pan options.
         */
        function pan(options: olx.animation.PanOptions): ol.PreRenderFunction;
        /**
         * Generate an animated transition while updating the view rotation.
         * @param options  (Required) Rotate options.
         */
        function rotate(options: olx.animation.RotateOptions): ol.PreRenderFunction;
        /**
         * Generate an animated transition while updating the view resolution.
         * @param options  (Required) Zoom options.
         */
        function zoom(options: olx.animation.ZoomOptions): ol.PreRenderFunction;
    }
    module color {
        /**
         * Return the color as an array. This function maintains a cache of calculated
         * arrays which means the result should not be modified.
         * @param color  (Required) Color.
         */
        function asArray(color: ol.Color|string): ol.Color;
        /**
         * Return the color as an rgba string.
         * @param color  (Required) Color.
         */
        function asString(color: ol.Color|string): string;
    }
    module control {
        /**
         * Set of controls included in maps by default. Unless configured otherwise,
         * this returns a collection containing an instance of each of the following
         * controls:
         * * {@link ol.control.Zoom}
         * * {@link ol.control.Rotate}
         * * {@link ol.control.Attribution}
         * @param opt_options  (Optional) Defaults options.
         */
        function defaults(opt_options?: olx.control.DefaultsOptions): ol.Collection<ol.control.Control>;
        /**
         * Control to show all the attributions associated with the layer sources
         * in the map. This control is one of the default controls included in maps.
         * By default it will show in the bottom right portion of the map, but this can
         * be changed by using a css selector for `.ol-attribution`.
         */
        class Attribution extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Attribution options.
             */
            constructor(opt_options?: olx.control.AttributionOptions);
            /**
             * Update the attribution element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Return `true` if the attribution is collapsible, `false` otherwise.
             */
            getCollapsible(): boolean;
            /**
             * Set whether the attribution should be collapsible.
             * @param collapsible  (Required) True if the widget is collapsible.
             */
            setCollapsible(collapsible: boolean): void;
            /**
             * Collapse or expand the attribution according to the passed parameter. Will
             * not do anything if the attribution isn't collapsible or if the current
             * collapsed state is already the one requested.
             * @param collapsed  (Required) True if the widget is collapsed.
             */
            setCollapsed(collapsed: boolean): void;
            /**
             * Return `true` when the attribution is currently collapsed or `false`
             * otherwise.
             */
            getCollapsed(): boolean;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A control is a visible widget with a DOM element in a fixed position on the
         * screen. They can involve user input (buttons), or be informational only;
         * the position is determined using CSS. By default these are placed in the
         * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
         * any outside DOM element.
         * 
         * This is the base class for controls. You can use it for simple custom
         * controls by creating the element with listeners, creating an instance:
         * ```js
         * var myControl = new ol.control.Control({element: myElement});
         * ```
         * and then adding this to the map.
         * 
         * The main advantage of having this as a control rather than a simple separate
         * DOM element is that preventing propagation is handled for you. Controls
         * will also be `ol.Object`s in a `ol.Collection`, so you can use their
         * methods.
         * 
         * You can also extend this base for your own control class. See
         * examples/custom-controls for an example of how to do this.
         */
        class Control extends ol.Object {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Control options.
             */
            constructor(options: olx.control.ControlOptions);
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Provides a button that when clicked fills up the full screen with the map.
         * When in full screen mode, a close button is shown to exit full screen mode.
         * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
         * toggle the map in full screen mode.
         */
        class FullScreen extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.control.FullScreenOptions);
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A control to show the 2D coordinates of the mouse cursor. By default, these
         * are in the view projection, but can be in any supported projection.
         * By default the control is shown in the top right corner of the map, but this
         * can be changed by using the css selector `.ol-mouse-position`.
         */
        class MousePosition extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Mouse position
    options.
             */
            constructor(opt_options?: olx.control.MousePositionOptions);
            /**
             * Update the mouseposition element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Return the coordinate format type used to render the current position or
             * undefined.
             */
            getCoordinateFormat(): ol.CoordinateFormatType;
            /**
             * Return the projection that is used to report the mouse position.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the coordinate format type used to render the current position.
             * @param format  (Required) The format to render the current
    position in.
             */
            setCoordinateFormat(format: ol.CoordinateFormatType): void;
            /**
             * Set the projection that is used to report the mouse position.
             * @param projection  (Required) The projection to report mouse
    position in.
             */
            setProjection(projection: ol.proj.Projection): void;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Create a new control with a map acting as an overview map for an other
         * defined map.
         */
        class OverviewMap extends ol.control.Control {
            /**
             * Create a new control with a map acting as an overview map for an other
             * defined map.
             * @param opt_options  (Optional) OverviewMap options.
             */
            constructor(opt_options?: olx.control.OverviewMapOptions);
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Update the overview map element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Return `true` if the overview map is collapsible, `false` otherwise.
             */
            getCollapsible(): boolean;
            /**
             * Set whether the overview map should be collapsible.
             * @param collapsible  (Required) True if the widget is collapsible.
             */
            setCollapsible(collapsible: boolean): void;
            /**
             * Collapse or expand the overview map according to the passed parameter. Will
             * not do anything if the overview map isn't collapsible or if the current
             * collapsed state is already the one requested.
             * @param collapsed  (Required) True if the widget is collapsed.
             */
            setCollapsed(collapsed: boolean): void;
            /**
             * Determine if the overview map is collapsed.
             */
            getCollapsed(): boolean;
            /**
             * Return the overview map.
             */
            getOverviewMap(): ol.Map;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A button control to reset rotation to 0.
         * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
         * selector is added to the button when the rotation is 0.
         */
        class Rotate extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Rotate options.
             */
            constructor(opt_options?: olx.control.RotateOptions);
            /**
             * Update the rotate control element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A control displaying rough x-axis distances, calculated for the center of the
         * viewport.
         * No scale line will be shown when the x-axis distance cannot be calculated in
         * the view projection (e.g. at or beyond the poles in EPSG:4326).
         * By default the scale line will show in the bottom left portion of the map,
         * but this can be changed by using the css selector `.ol-scale-line`.
         */
        class ScaleLine extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Scale line options.
             */
            constructor(opt_options?: olx.control.ScaleLineOptions);
            /**
             * Return the units to use in the scale line.
             */
            getUnits(): string;
            /**
             * Update the scale line element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Set the units to use in the scale line.
             * @param units  (Required) The units to use in the scale line.
             */
            setUnits(units: string): void;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A control with 2 buttons, one for zoom in and one for zoom out.
         * This control is one of the default controls of a map. To style this control
         * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
         */
        class Zoom extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Zoom options.
             */
            constructor(opt_options?: olx.control.ZoomOptions);
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A slider type of control for zooming.
         * 
         * Example:
         * 
         *     map.addControl(new ol.control.ZoomSlider());
         */
        class ZoomSlider extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Zoom slider options.
             */
            constructor(opt_options?: olx.control.ZoomSliderOptions);
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Update the zoomslider element.
             * @param mapEvent  (Required) Map event.
             */
            static render(mapEvent: ol.MapEvent): void;
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A button control which, when pressed, changes the map view to a specific
         * extent. To style this control use the css selector `.ol-zoom-extent`.
         */
        class ZoomToExtent extends ol.control.Control {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.control.ZoomToExtentOptions);
            /**
             * Get the map associated with this control.
             */
            getMap(): ol.Map;
            /**
             * Remove the control from its current map and attach it to the new map.
             * Subclasses may set up event handlers to get notified about changes to
             * the map here.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * This function is used to set a target element for the control. It has no
             * effect if it is called after the control has been added to the map (i.e.
             * after `setMap` is called on the control). If no `target` is set in the
             * options passed to the control constructor and if `setTarget` is not called
             * then the control is added to the map's overlay container.
             * @param target  (Required) Target.
             */
            setTarget(target: Element|string): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
         * `'nautical'`, `'metric'`, `'us'`.
         */
        class ScaleLineUnits {
            /**
             * "degrees"
             */
            public static DEGREES: string;
            /**
             * "imperial"
             */
            public static IMPERIAL: string;
            /**
             * "nautical"
             */
            public static NAUTICAL: string;
            /**
             * "metric"
             */
            public static METRIC: string;
            /**
             * "us"
             */
            public static US: string;
        }
    }
    module coordinate {
        /**
         * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
         * by the function.
         * 
         * Example:
         * 
         *     var coord = [7.85, 47.983333];
         *     ol.coordinate.add(coord, [-2, 4]);
         *     // coord is now [5.85, 51.983333]
         * @param coordinate  (Required) Coordinate.
         * @param delta  (Required) Delta.
         */
        function add(coordinate: ol.Coordinate, delta: ol.Coordinate): ol.Coordinate;
        /**
         * Returns a {@link ol.CoordinateFormatType} function that can be used to format
         * a {ol.Coordinate} to a string.
         * 
         * Example without specifying the fractional digits:
         * 
         *     var coord = [7.85, 47.983333];
         *     var stringifyFunc = ol.coordinate.createStringXY();
         *     var out = stringifyFunc(coord);
         *     // out is now '8, 48'
         * 
         * Example with explicitly specifying 2 fractional digits:
         * 
         *     var coord = [7.85, 47.983333];
         *     var stringifyFunc = ol.coordinate.createStringXY(2);
         *     var out = stringifyFunc(coord);
         *     // out is now '7.85, 47.98'
         * @param opt_fractionDigits  (Optional) The number of digits to include
   after the decimal point. Default is `0`.
         */
        function createStringXY(opt_fractionDigits?: number): ol.CoordinateFormatType;
        /**
         * Transforms the given {@link ol.Coordinate} to a string using the given string
         * template. The strings `{x}` and `{y}` in the template will be replaced with
         * the first and second coordinate values respectively.
         * 
         * Example without specifying the fractional digits:
         * 
         *     var coord = [7.85, 47.983333];
         *     var template = 'Coordinate is ({x}|{y}).';
         *     var out = ol.coordinate.format(coord, template);
         *     // out is now 'Coordinate is (8|48).'
         * 
         * Example explicitly specifying the fractional digits:
         * 
         *     var coord = [7.85, 47.983333];
         *     var template = 'Coordinate is ({x}|{y}).';
         *     var out = ol.coordinate.format(coord, template, 2);
         *     // out is now 'Coordinate is (7.85|47.98).'
         * @param coordinate  (Optional) Coordinate.
         * @param template  (Optional) A template string with `{x}` and `{y}` placeholders
    that will be replaced by first and second coordinate values.
         * @param opt_fractionDigits  (Optional) The number of digits to include
   after the decimal point. Default is `0`.
         */
        function format(coordinate?: ol.Coordinate, template?: string, opt_fractionDigits?: number): string;
        /**
         * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
         * returned by the function.
         * 
         * Example:
         * 
         *     var coord = [7.85, 47.983333];
         *     var rotateRadians = Math.PI / 2; // 90 degrees
         *     ol.coordinate.rotate(coord, rotateRadians);
         *     // coord is now [-47.983333, 7.85]
         * @param coordinate  (Required) Coordinate.
         * @param angle  (Required) Angle in radian.
         */
        function rotate(coordinate: ol.Coordinate, angle: number): ol.Coordinate;
        /**
         * Format a geographic coordinate with the hemisphere, degrees, minutes, and
         * seconds.
         * 
         * Example:
         * 
         *     var coord = [7.85, 47.983333];
         *     var out = ol.coordinate.toStringHDMS(coord);
         *     // out is now '47° 59′ 0″ N 7° 51′ 0″ E'
         * @param coordinate  (Optional) Coordinate.
         */
        function toStringHDMS(coordinate?: ol.Coordinate): string;
        /**
         * Format a coordinate as a comma delimited string.
         * 
         * Example without specifying fractional digits:
         * 
         *     var coord = [7.85, 47.983333];
         *     var out = ol.coordinate.toStringXY(coord);
         *     // out is now '8, 48'
         * 
         * Example explicitly specifying 1 fractional digit:
         * 
         *     var coord = [7.85, 47.983333];
         *     var out = ol.coordinate.toStringXY(coord, 1);
         *     // out is now '7.8, 48.0'
         * @param coordinate  (Optional) Coordinate.
         * @param opt_fractionDigits  (Optional) The number of digits to include
   after the decimal point. Default is `0`.
         */
        function toStringXY(coordinate?: ol.Coordinate, opt_fractionDigits?: number): string;
    }
    module easing {
        /**
         * Start slow and speed up.
         * @param t  (Required) Input between 0 and 1.
         */
        function easeIn(t: number): number;
        /**
         * Start fast and slow down.
         * @param t  (Required) Input between 0 and 1.
         */
        function easeOut(t: number): number;
        /**
         * Start slow, speed up, and then slow down again.
         * @param t  (Required) Input between 0 and 1.
         */
        function inAndOut(t: number): number;
        /**
         * Maintain a constant speed over time.
         * @param t  (Required) Input between 0 and 1.
         */
        function linear(t: number): number;
        /**
         * Start slow, speed up, and at the very end slow down again.  This has the
         * same general behavior as {@link ol.easing.inAndOut}, but the final slowdown
         * is delayed.
         * @param t  (Required) Input between 0 and 1.
         */
        function upAndDown(t: number): number;
    }
    module extent {
        /**
         * Build an extent that includes all given coordinates.
         * @param coordinates  (Required) Coordinates.
         */
        function boundingExtent(coordinates: ol.Coordinate[]): ol.Extent;
        /**
         * Return extent increased by the provided value.
         * @param extent  (Required) Extent.
         * @param value  (Required) The amount by which the extent should be buffered.
         * @param opt_extent  (Optional) Extent.
         */
        function buffer(extent: ol.Extent, value: number, opt_extent?: ol.Extent): ol.Extent;
        /**
         * Check if the passed coordinate is contained or on the edge of the extent.
         * @param extent  (Required) Extent.
         * @param coordinate  (Required) Coordinate.
         */
        function containsCoordinate(extent: ol.Extent, coordinate: ol.Coordinate): boolean;
        /**
         * Check if one extent contains another.
         * 
         * An extent is deemed contained if it lies completely within the other extent,
         * including if they share one or more edges.
         * @param extent1  (Required) Extent 1.
         * @param extent2  (Required) Extent 2.
         */
        function containsExtent(extent1: ol.Extent, extent2: ol.Extent): boolean;
        /**
         * Check if the passed coordinate is contained or on the edge of the extent.
         * @param extent  (Required) Extent.
         * @param x  (Required) X coordinate.
         * @param y  (Required) Y coordinate.
         */
        function containsXY(extent: ol.Extent, x: number, y: number): boolean;
        /**
         * Create an empty extent.
         */
        function createEmpty(): ol.Extent;
        /**
         * Determine if two extents are equivalent.
         * @param extent1  (Required) Extent 1.
         * @param extent2  (Required) Extent 2.
         */
        function equals(extent1: ol.Extent, extent2: ol.Extent): boolean;
        /**
         * Modify an extent to include another extent.
         * @param extent1  (Required) The extent to be modified.
         * @param extent2  (Required) The extent that will be included in the first.
         */
        function extend(extent1: ol.Extent, extent2: ol.Extent): ol.Extent;
        /**
         * Get the bottom left coordinate of an extent.
         * @param extent  (Required) Extent.
         */
        function getBottomLeft(extent: ol.Extent): ol.Coordinate;
        /**
         * Get the bottom right coordinate of an extent.
         * @param extent  (Required) Extent.
         */
        function getBottomRight(extent: ol.Extent): ol.Coordinate;
        /**
         * Get the center coordinate of an extent.
         * @param extent  (Required) Extent.
         */
        function getCenter(extent: ol.Extent): ol.Coordinate;
        /**
         * Get the height of an extent.
         * @param extent  (Required) Extent.
         */
        function getHeight(extent: ol.Extent): number;
        /**
         * Get the intersection of two extents.
         * @param extent1  (Required) Extent 1.
         * @param extent2  (Required) Extent 2.
         * @param opt_extent  (Optional) Optional extent to populate with intersection.
         */
        function getIntersection(extent1: ol.Extent, extent2: ol.Extent, opt_extent?: ol.Extent): ol.Extent;
        /**
         * Get the size (width, height) of an extent.
         * @param extent  (Required) The extent.
         */
        function getSize(extent: ol.Extent): ol.Size;
        /**
         * Get the top left coordinate of an extent.
         * @param extent  (Required) Extent.
         */
        function getTopLeft(extent: ol.Extent): ol.Coordinate;
        /**
         * Get the top right coordinate of an extent.
         * @param extent  (Required) Extent.
         */
        function getTopRight(extent: ol.Extent): ol.Coordinate;
        /**
         * Get the width of an extent.
         * @param extent  (Required) Extent.
         */
        function getWidth(extent: ol.Extent): number;
        /**
         * Determine if one extent intersects another.
         * @param extent1  (Required) Extent 1.
         * @param extent2  (Required) Extent.
         */
        function intersects(extent1: ol.Extent, extent2: ol.Extent): boolean;
        /**
         * Determine if an extent is empty.
         * @param extent  (Required) Extent.
         */
        function isEmpty(extent: ol.Extent): boolean;
        /**
         * Apply a transform function to the extent.
         * @param extent  (Required) Extent.
         * @param transformFn  (Required) Transform function.  Called with
[minX, minY, maxX, maxY] extent coordinates.
         * @param opt_extent  (Optional) Destination extent.
         */
        function applyTransform(extent: ol.Extent, transformFn: ol.TransformFunction, opt_extent?: ol.Extent): ol.Extent;
    }
    module featureloader {
        /**
         * Create an XHR feature loader for a `url` and `format`. The feature loader
         * loads features (with XHR), parses the features, and adds them to the
         * vector tile.
         * @param url  (Required) Feature URL service.
         * @param format  (Required) Feature format.
         */
        function tile(url: string|ol.FeatureUrlFunction, format: ol.format.Feature): ol.FeatureLoader;
        /**
         * Create an XHR feature loader for a `url` and `format`. The feature loader
         * loads features (with XHR), parses the features, and adds them to the
         * vector source.
         * @param url  (Required) Feature URL service.
         * @param format  (Required) Feature format.
         */
        function xhr(url: string|ol.FeatureUrlFunction, format: ol.format.Feature): ol.FeatureLoader;
    }
    module loadingstrategy {
        /**
         * Strategy function for loading all features with a single request.
         * @param extent  (Required) Extent.
         * @param resolution  (Required) Resolution.
         */
        function all(extent: ol.Extent, resolution: number): ol.Extent[];
        /**
         * Strategy function for loading features based on the view's extent and
         * resolution.
         * @param extent  (Required) Extent.
         * @param resolution  (Required) Resolution.
         */
        function bbox(extent: ol.Extent, resolution: number): ol.Extent[];
        /**
         * Creates a strategy function for loading features based on a tile grid.
         * @param tileGrid  (Required) Tile grid.
         */
        function tile(tileGrid: ol.tilegrid.TileGrid): (arg0: ol.Extent, arg1: number) => ol.Extent[];
    }
    module proj {
        /**
         * Register proj4. If not explicitly registered, it will be assumed that
         * proj4js will be loaded in the global namespace. For example in a
         * browserify ES6 environment you could use:
         * 
         *     import ol from 'openlayers';
         *     import proj4 from 'proj4';
         *     ol.proj.setProj4(proj4);
         * @param proj4  (Required) Proj4.
         */
        function setProj4(proj4: proj4): void;
        /**
         * Registers transformation functions that don't alter coordinates. Those allow
         * to transform between projections with equal meaning.
         * @param projections  (Required) Projections.
         */
        function addEquivalentProjections(projections: ol.proj.Projection[]): void;
        /**
         * Add a Projection object to the list of supported projections that can be
         * looked up by their code.
         * @param projection  (Required) Projection instance.
         */
        function addProjection(projection: ol.proj.Projection): void;
        /**
         * Registers coordinate transform functions to convert coordinates between the
         * source projection and the destination projection.
         * The forward and inverse functions convert coordinate pairs; this function
         * converts these into the functions used internally which also handle
         * extents and coordinate arrays.
         * @param source  (Optional) Source projection.
         * @param destination  (Optional) Destination projection.
         * @param forward  (Optional) The forward transform
    function (that is, from the source projection to the destination
    projection) that takes a {@link ol.Coordinate} as argument and returns
    the transformed {@link ol.Coordinate}.
         * @param inverse  (Optional) The inverse transform
    function (that is, from the destination projection to the source
    projection) that takes a {@link ol.Coordinate} as argument and returns
    the transformed {@link ol.Coordinate}.
         */
        function addCoordinateTransforms(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike, forward?: Function, inverse?: Function): void;
        /**
         * Transforms a coordinate from longitude/latitude to a different projection.
         * @param coordinate  (Required) Coordinate as longitude and latitude, i.e.
    an array with longitude as 1st and latitude as 2nd element.
         * @param opt_projection  (Optional) Target projection. The
    default is Web Mercator, i.e. 'EPSG:3857'.
         */
        function fromLonLat(coordinate: ol.Coordinate, opt_projection?: ol.proj.ProjectionLike): ol.Coordinate;
        /**
         * Transforms a coordinate to longitude/latitude.
         * @param coordinate  (Required) Projected coordinate.
         * @param opt_projection  (Optional) Projection of the coordinate.
    The default is Web Mercator, i.e. 'EPSG:3857'.
         */
        function toLonLat(coordinate: ol.Coordinate, opt_projection?: ol.proj.ProjectionLike): ol.Coordinate;
        /**
         * Fetches a Projection object for the code specified.
         * @param projectionLike  (Optional) Either a code string which is
    a combination of authority and identifier such as "EPSG:4326", or an
    existing projection object, or undefined.
         */
        function get(projectionLike?: ol.proj.ProjectionLike): ol.proj.Projection;
        /**
         * Given the projection-like objects, searches for a transformation
         * function to convert a coordinates array from the source projection to the
         * destination projection.
         * @param source  (Optional) Source.
         * @param destination  (Optional) Destination.
         */
        function getTransform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.TransformFunction;
        /**
         * Transforms a coordinate from source projection to destination projection.
         * This returns a new coordinate (and does not modify the original).
         * 
         * See {@link ol.proj.transformExtent} for extent transformation.
         * See the transform method of {@link ol.geom.Geometry} and its subclasses for
         * geometry transforms.
         * @param coordinate  (Required) Coordinate.
         * @param source  (Optional) Source projection-like.
         * @param destination  (Optional) Destination projection-like.
         */
        function transform(coordinate: ol.Coordinate, source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.Coordinate;
        /**
         * Transforms an extent from source projection to destination projection.  This
         * returns a new extent (and does not modify the original).
         * @param extent  (Required) The extent to transform.
         * @param source  (Optional) Source projection-like.
         * @param destination  (Optional) Destination projection-like.
         */
        function transformExtent(extent: ol.Extent, source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.Extent;
        /**
         * Projection definition class. One of these is created for each projection
         * supported in the application and stored in the {@link ol.proj} namespace.
         * You can use these in applications, but this is not required, as API params
         * and options use {@link ol.proj.ProjectionLike} which means the simple string
         * code will suffice.
         * 
         * You can use {@link ol.proj.get} to retrieve the object for a particular
         * projection.
         * 
         * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
         * with the following aliases:
         * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
         *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
         *     http://www.opengis.net/gml/srs/epsg.xml#4326,
         *     urn:x-ogc:def:crs:EPSG:4326
         * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
         *     urn:ogc:def:crs:EPSG:6.18:3:3857,
         *     http://www.opengis.net/gml/srs/epsg.xml#3857
         * 
         * If you use proj4js, aliases can be added using `proj4.defs()`; see
         * [documentation](https://github.com/proj4js/proj4js). To set an alternative
         * namespace for proj4, use {@link ol.proj.setProj4}.
         */
        class Projection {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Projection options.
             */
            constructor(options: olx.ProjectionOptions);
            /**
             * Get the code for this projection, e.g. 'EPSG:4326'.
             */
            getCode(): string;
            /**
             * Get the validity extent for this projection.
             */
            getExtent(): ol.Extent;
            /**
             * Get the units of this projection.
             */
            getUnits(): string;
            /**
             * Get the amount of meters per unit of this projection.  If the projection is
             * not configured with `metersPerUnit` or a units identifier, the return is
             * `undefined`.
             */
            getMetersPerUnit(): number;
            /**
             * Get the world extent for this projection.
             */
            getWorldExtent(): ol.Extent;
            /**
             * Is this projection a global projection which spans the whole world?
             */
            isGlobal(): boolean;
            /**
             * Set if the projection is a global projection which spans the whole world
             * @param global  (Required) Whether the projection is global.
             */
            setGlobal(global: boolean): void;
            /**
             * Set the validity extent for this projection.
             * @param extent  (Required) Extent.
             */
            setExtent(extent: ol.Extent): void;
            /**
             * Set the world extent for this projection.
             * @param worldExtent  (Required) World extent
    [minlon, minlat, maxlon, maxlat].
             */
            setWorldExtent(worldExtent: ol.Extent): void;
            /**
             * Set the getPointResolution function for this projection.
             * @param func  (Required) Function
             */
            setGetPointResolution(func: Function): void;
            /**
             * Get the resolution of the point in degrees or distance units.
             * For projections with degrees as the unit this will simply return the
             * provided resolution. The default for other projections is to estimate
             * the point resolution by transforming the 'point' pixel to EPSG:4326,
             * measuring its width and height on the normal sphere,
             * and taking the average of the width and height.
             * An alternative implementation may be given when constructing a
             * projection. For many local projections,
             * such a custom function will return the resolution unchanged.
             * @param resolution  (Required) Resolution in projection units.
             * @param point  (Required) Point.
             */
            getPointResolution(resolution: number, point: ol.Coordinate): number;
        }
        /**
         * A projection as {@link ol.proj.Projection}, SRS identifier string or
         * undefined.
         */
        type ProjectionLike = ol.proj.Projection|string;

        /**
         * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
         * `'us-ft'`.
         */
        class Units {
            /**
             * "degrees"
             */
            public static DEGREES: string;
            /**
             * "ft"
             */
            public static FEET: string;
            /**
             * "m"
             */
            public static METERS: string;
            /**
             * "pixels"
             */
            public static PIXELS: string;
            /**
             * "tile-pixels"
             */
            public static TILE_PIXELS: string;
            /**
             * "us-ft"
             */
            public static USFEET: string;
        }
        module common {
            /**
             * FIXME empty description for jsdoc
             */
            function add(): void;
        }
    }
    module render {
        /**
         * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries
         * to the context's canvas.
         * 
         * The units for geometry coordinates are css pixels relative to the top left
         * corner of the canvas element.
         * ```js
         * var canvas = document.createElement('canvas');
         * var render = ol.render.toContext(canvas.getContext('2d'),
         *     { size: [100, 100] });
         * render.setFillStrokeStyle(new ol.style.Fill({ color: blue }));
         * render.drawPolygonGeometry(
         *     new ol.geom.Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));
         * ```
         * 
         * Note that {@link ol.render.canvas.Immediate#drawAsync} and
         * {@link ol.render.canvas.Immediate#drawFeature} cannot be used.
         * @param context  (Required) Canvas context.
         * @param opt_options  (Optional) Options.
         */
        function toContext(context: CanvasRenderingContext2D, opt_options?: olx.render.ToContextOptions): ol.render.canvas.Immediate;
        /**
         * Lightweight, read-only, {@link ol.Feature} and {@link ol.geom.Geometry} like
         * structure, optimized for rendering and styling. Geometry access through the
         * API is limited to getting the type and extent of the geometry.
         */
        class Feature {
            /**
             * Lightweight, read-only, {@link ol.Feature} and {@link ol.geom.Geometry} like
             * structure, optimized for rendering and styling. Geometry access through the
             * API is limited to getting the type and extent of the geometry.
             * @param type  (Required) Geometry type.
             * @param flatCoordinates  (Required) Flat coordinates. These always need
    to be right-handed for polygons.
             * @param ends  (Required) Ends or Endss.
             * @param properties  (Required) Properties.
             */
            constructor(type: string, flatCoordinates: number[], ends: number[]|number[][], properties: { [key: string]: any; });
            /**
             * Get a feature property by its key.
             * @param key  (Required) Key
             */
            get(key: string): any;
            /**
             * Get the extent of this feature's geometry.
             */
            getExtent(): ol.Extent;
            /**
             * Get the feature for working with its geometry.
             */
            getGeometry(): ol.render.Feature;
            /**
             * Get the feature properties.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Get the type of this feature's geometry.
             */
            getType(): string;
        }
        /**
         * Context for drawing geometries.  A vector context is available on render
         * events and does not need to be constructed directly.
         */
        class VectorContext {
        }
        module canvas {
            /**
             * A concrete subclass of {@link ol.render.VectorContext} that implements
             * direct rendering of features and geometries to an HTML5 Canvas context.
             * Instances of this class are created internally by the library and
             * provided to application code as vectorContext member of the
             * {@link ol.render.Event} object associated with postcompose, precompose and
             * render events emitted by layers and maps.
             */
            class Immediate extends ol.render.VectorContext {
                /**
                 * TODO: This method has no documentation. Contact the library author if this method should be documented
                 * @param context  (Required) Context.
                 * @param pixelRatio  (Required) Pixel ratio.
                 * @param extent  (Required) Extent.
                 * @param transform  (Required) Transform.
                 * @param viewRotation  (Required) View rotation.
                 */
                constructor(context: CanvasRenderingContext2D, pixelRatio: number, extent: ol.Extent, transform: goog.vec.Mat4.Number, viewRotation: number);
                /**
                 * Register a function to be called for rendering at a given zIndex.  The
                 * function will be called asynchronously.  The callback will receive a
                 * reference to {@link ol.render.canvas.Immediate} context for drawing.
                 * @param zIndex  (Required) Z index.
                 * @param callback  (Required) Callback.
                 */
                drawAsync(zIndex: number, callback: Function): void;
                /**
                 * Render a circle geometry into the canvas.  Rendering is immediate and uses
                 * the current fill and stroke styles.
                 * @param circleGeometry  (Required) Circle geometry.
                 */
                drawCircleGeometry(circleGeometry: ol.geom.Circle): void;
                /**
                 * Render a feature into the canvas.  In order to respect the zIndex of the
                 * style this method draws asynchronously and thus *after* calls to
                 * drawXxxxGeometry have been finished, effectively drawing the feature
                 * *on top* of everything else.  You probably should be using an
                 * {@link ol.layer.Vector} instead of calling this method directly.
                 * @param feature  (Required) Feature.
                 * @param style  (Required) Style.
                 */
                drawFeature(feature: ol.Feature, style: ol.style.Style): void;
                /**
                 * Render a Point geometry into the canvas.  Rendering is immediate and uses
                 * the current style.
                 * @param pointGeometry  (Required) Point geometry.
                 */
                drawPointGeometry(pointGeometry: ol.geom.Point|ol.render.Feature): void;
                /**
                 * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
                 * uses the current style.
                 * @param multiPointGeometry  (Required) MultiPoint
    geometry.
                 */
                drawMultiPointGeometry(multiPointGeometry: ol.geom.MultiPoint|ol.render.Feature): void;
                /**
                 * Render a LineString into the canvas.  Rendering is immediate and uses
                 * the current style.
                 * @param lineStringGeometry  (Required) Line
    string geometry.
                 */
                drawLineStringGeometry(lineStringGeometry: ol.geom.LineString|ol.render.Feature): void;
                /**
                 * Render a MultiLineString geometry into the canvas.  Rendering is immediate
                 * and uses the current style.
                 * @param multiLineStringGeometry  (Required) MultiLineString geometry.
                 */
                drawMultiLineStringGeometry(multiLineStringGeometry: ol.geom.MultiLineString|ol.render.Feature): void;
                /**
                 * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
                 * the current style.
                 * @param polygonGeometry  (Required) Polygon
    geometry.
                 */
                drawPolygonGeometry(polygonGeometry: ol.geom.Polygon|ol.render.Feature): void;
                /**
                 * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
                 * uses the current style.
                 * @param multiPolygonGeometry  (Required) MultiPolygon geometry.
                 */
                drawMultiPolygonGeometry(multiPolygonGeometry: ol.geom.MultiPolygon): void;
                /**
                 * Set the fill and stroke style for subsequent draw operations.  To clear
                 * either fill or stroke styles, pass null for the appropriate parameter.
                 * @param fillStyle  (Required) Fill style.
                 * @param strokeStyle  (Required) Stroke style.
                 */
                setFillStrokeStyle(fillStyle: ol.style.Fill, strokeStyle: ol.style.Stroke): void;
                /**
                 * Set the image style for subsequent draw operations.  Pass null to remove
                 * the image style.
                 * @param imageStyle  (Required) Image style.
                 */
                setImageStyle(imageStyle: ol.style.Image): void;
                /**
                 * Set the text style for subsequent draw operations.  Pass null to
                 * remove the text style.
                 * @param textStyle  (Required) Text style.
                 */
                setTextStyle(textStyle: ol.style.Text): void;
            }
        }
    }
    module size {
        /**
         * Returns an `ol.Size` array for the passed in number (meaning: square) or
         * `ol.Size` array.
         * (meaning: non-square),
         * @param size  (Required) Width and height.
         * @param opt_size  (Optional) Optional reusable size array.
         */
        function toSize(size: number|ol.Size, opt_size?: ol.Size): ol.Size;
    }
    module tilegrid {
        /**
         * Creates a tile grid with a standard XYZ tiling scheme.
         * @param opt_options  (Optional) Tile grid options.
         */
        function createXYZ(opt_options?: olx.tilegrid.XYZOptions): ol.tilegrid.TileGrid;
        /**
         * Base class for setting the grid pattern for sources accessing tiled-image
         * servers.
         */
        class TileGrid {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Tile grid options.
             */
            constructor(options: olx.tilegrid.TileGridOptions);
            /**
             * Get the maximum zoom level for the grid.
             */
            getMaxZoom(): number;
            /**
             * Get the minimum zoom level for the grid.
             */
            getMinZoom(): number;
            /**
             * Get the origin for the grid at the given zoom level.
             * @param z  (Required) Z.
             */
            getOrigin(z: number): ol.Coordinate;
            /**
             * Get the resolution for the given zoom level.
             * @param z  (Required) Z.
             */
            getResolution(z: number): number;
            /**
             * Get the list of resolutions for the tile grid.
             */
            getResolutions(): number[];
            /**
             * Get the extent of a tile coordinate.
             * @param tileCoord  (Required) Tile coordinate.
             * @param opt_extent  (Optional) Temporary extent object.
             */
            getTileCoordExtent(tileCoord: ol.TileCoord, opt_extent?: ol.Extent): ol.Extent;
            /**
             * Get the tile coordinate for the given map coordinate and resolution.  This
             * method considers that coordinates that intersect tile boundaries should be
             * assigned the higher tile coordinate.
             * @param coordinate  (Required) Coordinate.
             * @param resolution  (Required) Resolution.
             * @param opt_tileCoord  (Optional) Destination ol.TileCoord object.
             */
            getTileCoordForCoordAndResolution(coordinate: ol.Coordinate, resolution: number, opt_tileCoord?: ol.TileCoord): ol.TileCoord;
            /**
             * Get a tile coordinate given a map coordinate and zoom level.
             * @param coordinate  (Required) Coordinate.
             * @param z  (Required) Zoom level.
             * @param opt_tileCoord  (Optional) Destination ol.TileCoord object.
             */
            getTileCoordForCoordAndZ(coordinate: ol.Coordinate, z: number, opt_tileCoord?: ol.TileCoord): ol.TileCoord;
            /**
             * Get the tile size for a zoom level. The type of the return value matches the
             * `tileSize` or `tileSizes` that the tile grid was configured with. To always
             * get an `ol.Size`, run the result through `ol.size.toSize()`.
             * @param z  (Required) Z.
             */
            getTileSize(z: number): number|ol.Size;
        }
        /**
         * Set the grid pattern for sources accessing WMTS tiled-image servers.
         */
        class WMTS extends ol.tilegrid.TileGrid {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) WMTS options.
             */
            constructor(options: olx.tilegrid.WMTSOptions);
            /**
             * Get the list of matrix identifiers.
             */
            getMatrixIds(): string[];
            /**
             * Create a tile grid from a WMTS capabilities matrix set.
             * @param matrixSet  (Required) An object representing a matrixSet in the
    capabilities document.
             * @param opt_extent  (Optional) An optional extent to restrict the tile
    ranges the server provides.
             */
            static createFromCapabilitiesMatrixSet(matrixSet: any, opt_extent?: ol.Extent): ol.tilegrid.WMTS;
            /**
             * Get the maximum zoom level for the grid.
             */
            getMaxZoom(): number;
            /**
             * Get the minimum zoom level for the grid.
             */
            getMinZoom(): number;
            /**
             * Get the origin for the grid at the given zoom level.
             * @param z  (Required) Z.
             */
            getOrigin(z: number): ol.Coordinate;
            /**
             * Get the resolution for the given zoom level.
             * @param z  (Required) Z.
             */
            getResolution(z: number): number;
            /**
             * Get the list of resolutions for the tile grid.
             */
            getResolutions(): number[];
            /**
             * Get the extent of a tile coordinate.
             * @param tileCoord  (Required) Tile coordinate.
             * @param opt_extent  (Optional) Temporary extent object.
             */
            getTileCoordExtent(tileCoord: ol.TileCoord, opt_extent?: ol.Extent): ol.Extent;
            /**
             * Get the tile coordinate for the given map coordinate and resolution.  This
             * method considers that coordinates that intersect tile boundaries should be
             * assigned the higher tile coordinate.
             * @param coordinate  (Required) Coordinate.
             * @param resolution  (Required) Resolution.
             * @param opt_tileCoord  (Optional) Destination ol.TileCoord object.
             */
            getTileCoordForCoordAndResolution(coordinate: ol.Coordinate, resolution: number, opt_tileCoord?: ol.TileCoord): ol.TileCoord;
            /**
             * Get a tile coordinate given a map coordinate and zoom level.
             * @param coordinate  (Required) Coordinate.
             * @param z  (Required) Zoom level.
             * @param opt_tileCoord  (Optional) Destination ol.TileCoord object.
             */
            getTileCoordForCoordAndZ(coordinate: ol.Coordinate, z: number, opt_tileCoord?: ol.TileCoord): ol.TileCoord;
            /**
             * Get the tile size for a zoom level. The type of the return value matches the
             * `tileSize` or `tileSizes` that the tile grid was configured with. To always
             * get an `ol.Size`, run the result through `ol.size.toSize()`.
             * @param z  (Required) Z.
             */
            getTileSize(z: number): number|ol.Size;
        }
    }
    module format {
        /**
         * Feature format for reading and writing data in the EsriJSON format.
         */
        class EsriJSON extends ol.format.JSONFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.EsriJSONOptions);
            /**
             * Read a feature from a EsriJSON Feature source.  Only works for Feature,
             * use `readFeatures` to read FeatureCollection source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: ArrayBuffer|Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read all features from a EsriJSON source.  Works with both Feature and
             * FeatureCollection sources.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: ArrayBuffer|Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read a geometry from a EsriJSON source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readGeometry(source: ArrayBuffer|Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.geom.Geometry;
            /**
             * Read the projection from a EsriJSON source.
             * @param source  (Required) Source.
             */
            readProjection(source: ArrayBuffer|Document|Node|any|string): ol.proj.Projection;
            /**
             * Encode a geometry as a EsriJSON string.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Write options.
             */
            writeGeometry(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode a geometry as a EsriJSON object.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Write options.
             */
            writeGeometryObject(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): EsriJSONGeometry;
            /**
             * Encode a feature as a EsriJSON Feature string.
             * @param feature  (Required) Feature.
             * @param opt_options  (Optional) Write options.
             */
            writeFeature(feature: ol.Feature, opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode a feature as a esriJSON Feature object.
             * @param feature  (Required) Feature.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatureObject(feature: ol.Feature, opt_options?: olx.format.WriteOptions): any;
            /**
             * Encode an array of features as EsriJSON.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features as a EsriJSON object.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeaturesObject(features: ol.Feature[], opt_options?: olx.format.WriteOptions): any;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for feature formats.
         * {ol.format.Feature} subclasses provide the ability to decode and encode
         * {@link ol.Feature} objects from a variety of commonly used geospatial
         * file formats.  See the documentation for each format for more details.
         */
        class Feature {
        }
        /**
         * Feature format for reading and writing data in the GeoJSON format.
         */
        class GeoJSON extends ol.format.JSONFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.GeoJSONOptions);
            /**
             * Read a feature from a GeoJSON Feature source.  Only works for Feature,
             * use `readFeatures` to read FeatureCollection source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read all features from a GeoJSON source.  Works with both Feature and
             * FeatureCollection sources.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read a geometry from a GeoJSON source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readGeometry(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.geom.Geometry;
            /**
             * Read the projection from a GeoJSON source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
            /**
             * Encode a feature as a GeoJSON Feature string.
             * @param feature  (Required) Feature.
             * @param opt_options  (Optional) Write options.
             */
            writeFeature(feature: ol.Feature, opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode a feature as a GeoJSON Feature object.
             * @param feature  (Required) Feature.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatureObject(feature: ol.Feature, opt_options?: olx.format.WriteOptions): GeoJSONObject;
            /**
             * Encode an array of features as GeoJSON.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features as a GeoJSON object.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeaturesObject(features: ol.Feature[], opt_options?: olx.format.WriteOptions): GeoJSONFeatureCollection;
            /**
             * Encode a geometry as a GeoJSON string.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Write options.
             */
            writeGeometry(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode a geometry as a GeoJSON object.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Write options.
             */
            writeGeometryObject(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): GeoJSONGeometry|GeoJSONGeometryCollection;
        }
        /**
         * Feature format for reading and writing data in the GML format,
         * version 2.1.2.
         */
        class GML2 extends ol.format.GMLBase {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.GMLOptions);
            /**
             * Read all features from a GML FeatureCollection.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
        }
        /**
         * Feature format for reading and writing data in the GML format
         * version 3.1.1.
         * Currently only supports GML 3.1.1 Simple Features profile.
         */
        class GML3 extends ol.format.GMLBase {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.GMLOptions);
            /**
             * Encode a geometry in GML 3.1.1 Simple Features.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Options.
             */
            writeGeometryNode(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): Node;
            /**
             * Encode an array of features in GML 3.1.1 Simple Features.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features in the GML 3.1.1 format as an XML node.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeaturesNode(features: ol.Feature[], opt_options?: olx.format.WriteOptions): Node;
            /**
             * Read all features from a GML FeatureCollection.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
        }
        /**
         * Feature format for reading and writing data in the GML format
         * version 3.1.1.
         * Currently only supports GML 3.1.1 Simple Features profile.
         */
        class GML extends ol.format.GMLBase {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.GMLOptions);
            /**
             * Encode an array of features in GML 3.1.1 Simple Features.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features in the GML 3.1.1 format as an XML node.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeaturesNode(features: ol.Feature[], opt_options?: olx.format.WriteOptions): Node;
            /**
             * Read all features from a GML FeatureCollection.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Feature base format for reading and writing data in the GML format.
         * This class cannot be instantiated, it contains only base content that
         * is shared with versioned format classes ol.format.GML2 and
         * ol.format.GML3.
         */
        class GMLBase extends ol.format.XMLFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.GMLOptions);
            /**
             * Read all features from a GML FeatureCollection.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
        }
        /**
         * Feature format for reading and writing data in the GPX format.
         */
        class GPX extends ol.format.XMLFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.GPXOptions);
            /**
             * Read the first feature from a GPX source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read all features from a GPX source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read the projection from a GPX source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
            /**
             * Encode an array of features in the GPX format.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features in the GPX format as an XML node.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeaturesNode(features: ol.Feature[], opt_options?: olx.format.WriteOptions): Node;
        }
        /**
         * Feature format for `*.igc` flight recording files.
         */
        class IGC extends ol.format.TextFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.IGCOptions);
            /**
             * Read the feature from the IGC source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read the feature from the source. As IGC sources contain a single
             * feature, this will return the feature in an array.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read the projection from the IGC source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for JSON feature formats.
         */
        class JSONFeature extends ol.format.Feature {
        }
        /**
         * Feature format for reading and writing data in the KML format.
         */
        class KML extends ol.format.XMLFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.KMLOptions);
            /**
             * Read the first feature from a KML source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read all features from a KML source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read the name of the KML.
             * @param source  (Required) Souce.
             */
            readName(source: Document|Node|string): string;
            /**
             * Read the network links of the KML.
             * @param source  (Required) Source.
             */
            readNetworkLinks(source: Document|Node|string): any[];
            /**
             * Read the projection from a KML source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
            /**
             * Encode an array of features in the KML format.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features in the KML format as an XML node.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Options.
             */
            writeFeaturesNode(features: ol.Feature[], opt_options?: olx.format.WriteOptions): Node;
        }
        /**
         * Feature format for reading data in the Mapbox MVT format.
         */
        class MVT extends ol.format.Feature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.MVTOptions);
            /**
             * Sets the layers that features will be read from.
             * @param layers  (Required) Layers.
             */
            setLayers(layers: string[]): void;
        }
        /**
         * Feature format for reading data in the
         * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).
         */
        class OSMXML extends ol.format.XMLFeature {
            /**
             * Read all features from an OSM source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read the projection from an OSM source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
        }
        /**
         * Feature format for reading and writing data in the Encoded
         * Polyline Algorithm Format.
         */
        class Polyline extends ol.format.TextFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.PolylineOptions);
            /**
             * Encode a list of n-dimensional points and return an encoded string
             * 
             * Attention: This function will modify the passed array!
             * @param numbers  (Required) A list of n-dimensional points.
             * @param stride  (Required) The number of dimension of the points in the list.
             * @param opt_factor  (Optional) The factor by which the numbers will be
    multiplied. The remaining decimal places will get rounded away.
    Default is `1e5`.
             */
            static encodeDeltas(numbers: number[], stride: number, opt_factor?: number): string;
            /**
             * Decode a list of n-dimensional points from an encoded string
             * @param encoded  (Required) An encoded string.
             * @param stride  (Required) The number of dimension of the points in the
    encoded string.
             * @param opt_factor  (Optional) The factor by which the resulting numbers will
    be divided. Default is `1e5`.
             */
            static decodeDeltas(encoded: string, stride: number, opt_factor?: number): number[];
            /**
             * Encode a list of floating point numbers and return an encoded string
             * 
             * Attention: This function will modify the passed array!
             * @param numbers  (Required) A list of floating point numbers.
             * @param opt_factor  (Optional) The factor by which the numbers will be
    multiplied. The remaining decimal places will get rounded away.
    Default is `1e5`.
             */
            static encodeFloats(numbers: number[], opt_factor?: number): string;
            /**
             * Decode a list of floating point numbers from an encoded string
             * @param encoded  (Required) An encoded string.
             * @param opt_factor  (Optional) The factor by which the result will be divided.
    Default is `1e5`.
             */
            static decodeFloats(encoded: string, opt_factor?: number): number[];
            /**
             * Read the feature from the Polyline source. The coordinates are assumed to be
             * in two dimensions and in latitude, longitude order.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read the feature from the source. As Polyline sources contain a single
             * feature, this will return the feature in an array.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read the geometry from the source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readGeometry(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.geom.Geometry;
            /**
             * Read the projection from a Polyline source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
            /**
             * Write a single geometry in Polyline format.
             * @param geometry  (Required) Geometry.
             * @param opt_options  (Optional) Write options.
             */
            writeGeometry(geometry: ol.geom.Geometry, opt_options?: olx.format.WriteOptions): string;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for text feature formats.
         */
        class TextFeature extends ol.format.Feature {
        }
        /**
         * Feature format for reading data in the TopoJSON format.
         */
        class TopoJSON extends ol.format.JSONFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.TopoJSONOptions);
            /**
             * Read all features from a TopoJSON source.
             * @param source  (Required) Source.
             */
            readFeatures(source: Document|Node|any|string): ol.Feature[];
            /**
             * Read the projection from a TopoJSON source.
             * @param object  (Required) Source.
             */
            readProjection(object: Document|Node|any|string): ol.proj.Projection;
        }
        /**
         * Feature format for reading and writing data in the WFS format.
         * By default, supports WFS version 1.1.0. You can pass a GML format
         * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).
         * Also see {@link ol.format.GMLBase} which is used by this format.
         */
        class WFS extends ol.format.XMLFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Optional configuration object.
             */
            constructor(opt_options?: olx.format.WFSOptions);
            /**
             * Read all features from a WFS FeatureCollection.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read transaction response of the source.
             * @param source  (Required) Source.
             */
            readTransactionResponse(source: Document|Node|any|string): ol.format.WFS.TransactionResponse;
            /**
             * Read feature collection metadata of the source.
             * @param source  (Required) Source.
             */
            readFeatureCollectionMetadata(source: Document|Node|any|string): ol.format.WFS.FeatureCollectionMetadata;
            /**
             * Encode format as WFS `GetFeature` and return the Node.
             * @param options  (Required) Options.
             */
            writeGetFeature(options: olx.format.WFSWriteGetFeatureOptions): Node;
            /**
             * Encode format as WFS `Transaction` and return the Node.
             * @param inserts  (Required) The features to insert.
             * @param updates  (Required) The features to update.
             * @param deletes  (Required) The features to delete.
             * @param options  (Required) Write options.
             */
            writeTransaction(inserts: ol.Feature[], updates: ol.Feature[], deletes: ol.Feature[], options: olx.format.WFSWriteTransactionOptions): Node;
            /**
             * Read the projection from a WFS source.
             * @param source  (Required) Source.
             */
            readProjection(source: Document|Node|any|string): ol.proj.Projection;
        }
        /**
         * Geometry format for reading and writing data in the `WellKnownText` (WKT)
         * format.
         */
        class WKT extends ol.format.TextFeature {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.format.WKTOptions);
            /**
             * Read a feature from a WKT source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeature(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature;
            /**
             * Read all features from a WKT source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
            /**
             * Read a single geometry from a WKT source.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Read options.
             */
            readGeometry(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.geom.Geometry;
            /**
             * Encode a feature as a WKT string.
             * @param feature  (Required) Feature.
             * @param opt_options  (Optional) Write options.
             */
            writeFeature(feature: ol.Feature, opt_options?: olx.format.WriteOptions): string;
            /**
             * Encode an array of features as a WKT string.
             * @param features  (Required) Features.
             * @param opt_options  (Optional) Write options.
             */
            writeFeatures(features: ol.Feature[], opt_options?: olx.format.WriteOptions): string;
            /**
             * Write a single geometry as a WKT string.
             * @param geometry  (Required) Geometry.
             */
            writeGeometry(geometry: ol.geom.Geometry): string;
        }
        /**
         * Format for reading WMS capabilities data
         */
        class WMSCapabilities extends ol.format.XML {
            /**
             * Read a WMS capabilities document.
             * @param source  (Required) The XML source.
             */
            read(source: Document|Node|string): any;
        }
        /**
         * Format for reading WMSGetFeatureInfo format. It uses
         * {@link ol.format.GML2} to read features.
         */
        class WMSGetFeatureInfo extends ol.format.XMLFeature {
            /**
             * Read all features from a WMSGetFeatureInfo response.
             * @param source  (Required) Source.
             * @param opt_options  (Optional) Options.
             */
            readFeatures(source: Document|Node|any|string, opt_options?: olx.format.ReadOptions): ol.Feature[];
        }
        /**
         * Format for reading WMTS capabilities data.
         */
        class WMTSCapabilities extends ol.format.XML {
            /**
             * Read a WMTS capabilities document.
             * @param source  (Required) The XML source.
             */
            read(source: Document|Node|string): any;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for XML feature formats.
         */
        class XMLFeature extends ol.format.Feature {
        }
        /**
         * Generic format for reading non-feature XML data
         */
        class XML {
        }
        /**
         * IGC altitude/z. One of 'barometric', 'gps', 'none'.
         */
        class IGCZ {
            /**
             * "barometric"
             */
            public static BAROMETRIC: string;
            /**
             * "gps"
             */
            public static GPS: string;
            /**
             * "none"
             */
            public static NONE: string;
        }
        module WFS {
            /**
             * Number of features; bounds/extent.
             */
            type FeatureCollectionMetadata = any;

            /**
             * Total deleted; total inserted; total updated; array of insert ids.
             */
            type TransactionResponse = any;

        }
    }
    module geom {
        /**
         * Circle geometry.
         */
        class Circle extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param center  (Required) Center.
             * @param opt_radius  (Optional) Radius.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(center: ol.Coordinate, opt_radius?: number, opt_layout?: string);
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.Circle;
            /**
             * Return the center of the circle as {@link ol.Coordinate coordinate}.
             */
            getCenter(): ol.Coordinate;
            /**
             * Return the radius of the circle.
             */
            getRadius(): number;
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the center of the circle as {@link ol.Coordinate coordinate}.
             * @param center  (Required) Center.
             */
            setCenter(center: ol.Coordinate): void;
            /**
             * Set the center (as {@link ol.Coordinate coordinate}) and the radius (as
             * number) of the circle.
             * @param center  (Required) Center.
             * @param radius  (Required) Radius.
             * @param opt_layout  (Optional) Layout.
             */
            setCenterAndRadius(center: ol.Coordinate, radius: number, opt_layout?: string): void;
            /**
             * Set the radius of the circle. The radius is in the units of the projection.
             * @param radius  (Required) Radius.
             */
            setRadius(radius: number): void;
            /**
             * Transform each coordinate of the circle from one coordinate reference system
             * to another. The geometry is modified in place.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * 
             * Internally a circle is currently represented by two points: the center of
             * the circle `[cx, cy]`, and the point to the right of the circle
             * `[cx + r, cy]`. This `transform` function just transforms these two points.
             * So the resulting geometry is also a circle, and that circle does not
             * correspond to the shape that would be obtained by transforming every point
             * of the original circle.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Circle;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for vector geometries.
         * 
         * To get notified of changes to the geometry, register a listener for the
         * generic `change` event on your geometry instance.
         */
        class Geometry extends ol.Object {
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * An array of {@link ol.geom.Geometry} objects.
         */
        class GeometryCollection extends ol.geom.Geometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_geometries  (Optional) Geometries.
             */
            constructor(opt_geometries?: ol.geom.Geometry[]);
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.GeometryCollection;
            /**
             * Return the geometries that make up this geometry collection.
             */
            getGeometries(): ol.geom.Geometry[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the geometries that make up this geometry collection.
             * @param geometries  (Required) Geometries.
             */
            setGeometries(geometries: ol.geom.Geometry[]): void;
            /**
             * Apply a transform function to each coordinate of the geometry.
             * The geometry is modified in place.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param transformFn  (Required) Transform.
             */
            applyTransform(transformFn: ol.TransformFunction): void;
            /**
             * Translate the geometry.
             * @param deltaX  (Required) Delta X.
             * @param deltaY  (Required) Delta Y.
             */
            translate(deltaX: number, deltaY: number): void;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Linear ring geometry. Only used as part of polygon; cannot be rendered
         * on its own.
         */
        class LinearRing extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[], opt_layout?: string);
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.LinearRing;
            /**
             * Return the area of the linear ring on projected plane.
             */
            getArea(): number;
            /**
             * Return the coordinates of the linear ring.
             */
            getCoordinates(): ol.Coordinate[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Set the coordinates of the linear ring.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[], opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Linestring geometry.
         */
        class LineString extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[], opt_layout?: string);
            /**
             * Append the passed coordinate to the coordinates of the linestring.
             * @param coordinate  (Required) Coordinate.
             */
            appendCoordinate(coordinate: ol.Coordinate): void;
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.LineString;
            /**
             * Iterate over each segment, calling the provided callback.
             * If the callback returns a truthy value the function returns that
             * value immediately. Otherwise the function returns `false`.
             * @param callback  (Required) Function
    called for each segment.
             * @param opt_this  (Optional) The object to be used as the value of 'this'
    within callback.
             */
            forEachSegment<T, S>(callback: Function, opt_this?: S): T|boolean;
            /**
             * Returns the coordinate at `m` using linear interpolation, or `null` if no
             * such coordinate exists.
             * 
             * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
             * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
             * M will return the first coordinate and Ms greater than the last M will
             * return the last coordinate.
             * @param m  (Required) M.
             * @param opt_extrapolate  (Optional) Extrapolate. Default is `false`.
             */
            getCoordinateAtM(m: number, opt_extrapolate?: boolean): ol.Coordinate;
            /**
             * Return the coordinates of the linestring.
             */
            getCoordinates(): ol.Coordinate[];
            /**
             * Return the coordinate at the provided fraction along the linestring.
             * The `fraction` is a number between 0 and 1, where 0 is the start of the
             * linestring and 1 is the end.
             * @param fraction  (Required) Fraction.
             * @param opt_dest  (Optional) Optional coordinate whose values will
    be modified. If not provided, a new coordinate will be returned.
             */
            getCoordinateAt(fraction: number, opt_dest?: ol.Coordinate): ol.Coordinate;
            /**
             * Return the length of the linestring on projected plane.
             */
            getLength(): number;
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinates of the linestring.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[], opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Multi-linestring geometry.
         */
        class MultiLineString extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[][], opt_layout?: string);
            /**
             * Append the passed linestring to the multilinestring.
             * @param lineString  (Required) LineString.
             */
            appendLineString(lineString: ol.geom.LineString): void;
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.MultiLineString;
            /**
             * Returns the coordinate at `m` using linear interpolation, or `null` if no
             * such coordinate exists.
             * 
             * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
             * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
             * M will return the first coordinate and Ms greater than the last M will
             * return the last coordinate.
             * 
             * `opt_interpolate` controls interpolation between consecutive LineStrings
             * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
             * will be linearly interpolated between the last coordinate of one LineString
             * and the first coordinate of the next LineString.  If `opt_interpolate` is
             * `false` then the function will return `null` for Ms falling between
             * LineStrings.
             * @param m  (Required) M.
             * @param opt_extrapolate  (Optional) Extrapolate. Default is `false`.
             * @param opt_interpolate  (Optional) Interpolate. Default is `false`.
             */
            getCoordinateAtM(m: number, opt_extrapolate?: boolean, opt_interpolate?: boolean): ol.Coordinate;
            /**
             * Return the coordinates of the multilinestring.
             */
            getCoordinates(): ol.Coordinate[][];
            /**
             * Return the linestring at the specified index.
             * @param index  (Required) Index.
             */
            getLineString(index: number): ol.geom.LineString;
            /**
             * Return the linestrings of this multilinestring.
             */
            getLineStrings(): ol.geom.LineString[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinates of the multilinestring.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[][], opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Multi-point geometry.
         */
        class MultiPoint extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[], opt_layout?: string);
            /**
             * Append the passed point to this multipoint.
             * @param point  (Required) Point.
             */
            appendPoint(point: ol.geom.Point): void;
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.MultiPoint;
            /**
             * Return the coordinates of the multipoint.
             */
            getCoordinates(): ol.Coordinate[];
            /**
             * Return the point at the specified index.
             * @param index  (Required) Index.
             */
            getPoint(index: number): ol.geom.Point;
            /**
             * Return the points of this multipoint.
             */
            getPoints(): ol.geom.Point[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinates of the multipoint.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[], opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Multi-polygon geometry.
         */
        class MultiPolygon extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[][][], opt_layout?: string);
            /**
             * Append the passed polygon to this multipolygon.
             * @param polygon  (Required) Polygon.
             */
            appendPolygon(polygon: ol.geom.Polygon): void;
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.MultiPolygon;
            /**
             * Return the area of the multipolygon on projected plane.
             */
            getArea(): number;
            /**
             * Get the coordinate array for this geometry.  This array has the structure
             * of a GeoJSON coordinate array for multi-polygons.
             * @param opt_right  (Optional) Orient coordinates according to the right-hand
    rule (counter-clockwise for exterior and clockwise for interior rings).
    If `false`, coordinates will be oriented according to the left-hand rule
    (clockwise for exterior and counter-clockwise for interior rings).
    By default, coordinate orientation will depend on how the geometry was
    constructed.
             */
            getCoordinates(opt_right?: boolean): ol.Coordinate[][][];
            /**
             * Return the interior points as {@link ol.geom.MultiPoint multipoint}.
             */
            getInteriorPoints(): ol.geom.MultiPoint;
            /**
             * Return the polygon at the specified index.
             * @param index  (Required) Index.
             */
            getPolygon(index: number): ol.geom.Polygon;
            /**
             * Return the polygons of this multipolygon.
             */
            getPolygons(): ol.geom.Polygon[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinates of the multipolygon.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[][][], opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Point geometry.
         */
        class Point extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate, opt_layout?: string);
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.Point;
            /**
             * Return the coordinate of the point.
             */
            getCoordinates(): ol.Coordinate;
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinate of the point.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate, opt_layout?: string): void;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Polygon geometry.
         */
        class Polygon extends ol.geom.SimpleGeometry {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            constructor(coordinates: ol.Coordinate[][], opt_layout?: string);
            /**
             * Append the passed linear ring to this polygon.
             * @param linearRing  (Required) Linear ring.
             */
            appendLinearRing(linearRing: ol.geom.LinearRing): void;
            /**
             * Make a complete copy of the geometry.
             */
            clone(): ol.geom.Polygon;
            /**
             * Return the area of the polygon on projected plane.
             */
            getArea(): number;
            /**
             * Get the coordinate array for this geometry.  This array has the structure
             * of a GeoJSON coordinate array for polygons.
             * @param opt_right  (Optional) Orient coordinates according to the right-hand
    rule (counter-clockwise for exterior and clockwise for interior rings).
    If `false`, coordinates will be oriented according to the left-hand rule
    (clockwise for exterior and counter-clockwise for interior rings).
    By default, coordinate orientation will depend on how the geometry was
    constructed.
             */
            getCoordinates(opt_right?: boolean): ol.Coordinate[][];
            /**
             * Return an interior point of the polygon.
             */
            getInteriorPoint(): ol.geom.Point;
            /**
             * Return the number of rings of the polygon,  this includes the exterior
             * ring and any interior rings.
             */
            getLinearRingCount(): number;
            /**
             * Return the Nth linear ring of the polygon geometry. Return `null` if the
             * given index is out of range.
             * The exterior linear ring is available at index `0` and the interior rings
             * at index `1` and beyond.
             * @param index  (Required) Index.
             */
            getLinearRing(index: number): ol.geom.LinearRing;
            /**
             * Return the linear rings of the polygon.
             */
            getLinearRings(): ol.geom.LinearRing[];
            /**
             * Get the type of this geometry.
             */
            getType(): string;
            /**
             * Test if the geometry and the passed extent intersect.
             * @param extent  (Required) Extent.
             */
            intersectsExtent(extent: ol.Extent): boolean;
            /**
             * Set the coordinates of the polygon.
             * @param coordinates  (Required) Coordinates.
             * @param opt_layout  (Optional) Layout.
             */
            setCoordinates(coordinates: ol.Coordinate[][], opt_layout?: string): void;
            /**
             * Create an approximation of a circle on the surface of a sphere.
             * @param sphere  (Required) The sphere.
             * @param center  (Required) Center (`[lon, lat]` in degrees).
             * @param radius  (Required) The great-circle distance from the center to
    the polygon vertices.
             * @param opt_n  (Optional) Optional number of vertices for the resulting
    polygon. Default is `32`.
             */
            static circular(sphere: ol.Sphere, center: ol.Coordinate, radius: number, opt_n?: number): ol.geom.Polygon;
            /**
             * Create a polygon from an extent. The layout used is `XY`.
             * @param extent  (Required) The extent.
             */
            static fromExtent(extent: ol.Extent): ol.geom.Polygon;
            /**
             * Create a regular polygon from a circle.
             * @param circle  (Required) Circle geometry.
             * @param opt_sides  (Optional) Number of sides of the polygon. Default is 32.
             * @param opt_angle  (Optional) Start angle for the first vertex of the polygon in
    radians. Default is 0.
             */
            static fromCircle(circle: ol.geom.Circle, opt_sides?: number, opt_angle?: number): ol.geom.Polygon;
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; only used for creating subclasses; do not instantiate
         * in apps, as cannot be rendered.
         */
        class SimpleGeometry extends ol.geom.Geometry {
            /**
             * Return the first coordinate of the geometry.
             */
            getFirstCoordinate(): ol.Coordinate;
            /**
             * Return the last coordinate of the geometry.
             */
            getLastCoordinate(): ol.Coordinate;
            /**
             * Return the {@link ol.geom.GeometryLayout layout} of the geometry.
             */
            getLayout(): string;
            /**
             * Apply a transform function to each coordinate of the geometry.
             * The geometry is modified in place.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param transformFn  (Required) Transform.
             */
            applyTransform(transformFn: ol.TransformFunction): void;
            /**
             * Translate the geometry.  This modifies the geometry coordinates in place.  If
             * instead you want a new geometry, first `clone()` this geometry.
             * @param deltaX  (Required) Delta X.
             * @param deltaY  (Required) Delta Y.
             */
            translate(deltaX: number, deltaY: number): void;
            /**
             * Return the closest point of the geometry to the passed point as
             * {@link ol.Coordinate coordinate}.
             * @param point  (Required) Point.
             * @param opt_closestPoint  (Optional) Closest point.
             */
            getClosestPoint(point: ol.Coordinate, opt_closestPoint?: ol.Coordinate): ol.Coordinate;
            /**
             * Get the extent of the geometry.
             * @param opt_extent  (Optional) Extent.
             */
            getExtent(opt_extent?: ol.Extent): ol.Extent;
            /**
             * Create a simplified version of this geometry.  For linestrings, this uses
             * the the {@link
             * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
             * Douglas Peucker} algorithm.  For polygons, a quantization-based
             * simplification is used to preserve topology.
             * @param tolerance  (Required) The tolerance distance for simplification.
             */
            simplify(tolerance: number): ol.geom.Geometry;
            /**
             * Transform each coordinate of the geometry from one coordinate reference
             * system to another. The geometry is modified in place.
             * For example, a line will be transformed to a line and a circle to a circle.
             * If you do not want the geometry modified in place, first clone() it and
             * then use this function on the clone.
             * @param source  (Optional) The current projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             * @param destination  (Optional) The desired projection.  Can be a
    string identifier or a {@link ol.proj.Projection} object.
             */
            transform(source?: ol.proj.ProjectionLike, destination?: ol.proj.ProjectionLike): ol.geom.Geometry;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
         * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
         * `'GeometryCollection'`, `'Circle'`.
         */
        class GeometryType {
            /**
             * "Point"
             */
            public static POINT: string;
            /**
             * "LineString"
             */
            public static LINE_STRING: string;
            /**
             * "LinearRing"
             */
            public static LINEAR_RING: string;
            /**
             * "Polygon"
             */
            public static POLYGON: string;
            /**
             * "MultiPoint"
             */
            public static MULTI_POINT: string;
            /**
             * "MultiLineString"
             */
            public static MULTI_LINE_STRING: string;
            /**
             * "MultiPolygon"
             */
            public static MULTI_POLYGON: string;
            /**
             * "GeometryCollection"
             */
            public static GEOMETRY_COLLECTION: string;
            /**
             * "Circle"
             */
            public static CIRCLE: string;
        }
        /**
         * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
         * or measure ('M') coordinate is available. Supported values are `'XY'`,
         * `'XYZ'`, `'XYM'`, `'XYZM'`.
         */
        class GeometryLayout {
            /**
             * "XY"
             */
            public static XY: string;
            /**
             * "XYZ"
             */
            public static XYZ: string;
            /**
             * "XYM"
             */
            public static XYM: string;
            /**
             * "XYZM"
             */
            public static XYZM: string;
        }
    }
    module layer {
        /**
         * Layer for rendering vector data as a heatmap.
         * Note that any property set in the options is set as a {@link ol.Object}
         * property on the layer object; for example, setting `title: 'My Title'` in the
         * options means that `title` is observable, and has get/set accessors.
         */
        class Heatmap extends ol.layer.Vector {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.layer.HeatmapOptions);
            /**
             * Return the blur size in pixels.
             */
            getBlur(): number;
            /**
             * Return the gradient colors as array of strings.
             */
            getGradient(): string[];
            /**
             * Return the size of the radius in pixels.
             */
            getRadius(): number;
            /**
             * Set the blur size in pixels.
             * @param blur  (Required) Blur size in pixels.
             */
            setBlur(blur: number): void;
            /**
             * Set the gradient colors as array of strings.
             * @param colors  (Required) Gradient.
             */
            setGradient(colors: string[]): void;
            /**
             * Set the size of the radius in pixels.
             * @param radius  (Required) Radius size in pixel.
             */
            setRadius(radius: number): void;
            /**
             * Return the associated {@link ol.source.Vector vectorsource} of the layer.
             */
            getSource(): ol.source.Vector;
            /**
             * Get the style for features.  This returns whatever was passed to the `style`
             * option at construction or to the `setStyle` method.
             */
            getStyle(): ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * Get the style function.
             */
            getStyleFunction(): ol.style.StyleFunction;
            /**
             * Set the style for features.  This can be a single style object, an array
             * of styles, or a function that takes a feature and resolution and returns
             * an array of styles. If it is `undefined` the default style is used. If
             * it is `null` the layer has no style (a `null` style), so only features
             * that have their own styles will be rendered in the layer. See
             * {@link ol.style} for information on the default style.
             * @param style  (Optional) Layer style.
             */
            setStyle(style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction): void;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Server-rendered images that are available for arbitrary extents and
         * resolutions.
         * Note that any property set in the options is set as a {@link ol.Object}
         * property on the layer object; for example, setting `title: 'My Title'` in the
         * options means that `title` is observable, and has get/set accessors.
         */
        class Image extends ol.layer.Layer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Layer options.
             */
            constructor(opt_options?: olx.layer.ImageOptions);
            /**
             * Return the associated {@link ol.source.Image source} of the image layer.
             */
            getSource(): ol.source.Image;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * A visual representation of raster or vector map data.
         * Layers group together those properties that pertain to how the data is to be
         * displayed, irrespective of the source of that data.
         * 
         * Layers are usually added to a map with {@link ol.Map#addLayer}. Components
         * like {@link ol.interaction.Select} use unmanaged layers internally. These
         * unmanaged layers are associated with the map using
         * {@link ol.layer.Layer#setMap} instead.
         * 
         * A generic `change` event is fired when the state of the source changes.
         */
        class Layer extends ol.layer.Base {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Layer options.
             */
            constructor(options: olx.layer.LayerOptions);
            /**
             * Get the layer source.
             */
            getSource(): ol.source.Source;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Note that with `ol.layer.Base` and all its subclasses, any property set in
         * the options is set as a {@link ol.Object} property on the layer object, so
         * is observable, and has get/set accessors.
         */
        class Base extends ol.Object {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Layer options.
             */
            constructor(options: olx.layer.BaseOptions);
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A {@link ol.Collection} of layers that are handled together.
         * 
         * A generic `change` event is triggered when the group/Collection changes.
         */
        class Group extends ol.layer.Base {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Layer options.
             */
            constructor(opt_options?: olx.layer.GroupOptions);
            /**
             * Returns the {@link ol.Collection collection} of {@link ol.layer.Layer layers}
             * in this group.
             */
            getLayers(): ol.Collection<ol.layer.Base>;
            /**
             * Set the {@link ol.Collection collection} of {@link ol.layer.Layer layers}
             * in this group.
             * @param layers  (Required) Collection of
  {@link ol.layer.Base layers} that are part of this group.
             */
            setLayers(layers: ol.Collection<ol.layer.Base>): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * For layer sources that provide pre-rendered, tiled images in grids that are
         * organized by zoom levels for specific resolutions.
         * Note that any property set in the options is set as a {@link ol.Object}
         * property on the layer object; for example, setting `title: 'My Title'` in the
         * options means that `title` is observable, and has get/set accessors.
         */
        class Tile extends ol.layer.Layer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Tile layer options.
             */
            constructor(opt_options?: olx.layer.TileOptions);
            /**
             * Return the level as number to which we will preload tiles up to.
             */
            getPreload(): number;
            /**
             * Return the associated {@link ol.source.Tile tilesource} of the layer.
             */
            getSource(): ol.source.Tile;
            /**
             * Set the level as number to which we will preload tiles up to.
             * @param preload  (Required) The level to preload tiles up to.
             */
            setPreload(preload: number): void;
            /**
             * Whether we use interim tiles on error.
             */
            getUseInterimTilesOnError(): boolean;
            /**
             * Set whether we use interim tiles on error.
             * @param useInterimTilesOnError  (Required) Use interim tiles on error.
             */
            setUseInterimTilesOnError(useInterimTilesOnError: boolean): void;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Vector data that is rendered client-side.
         * Note that any property set in the options is set as a {@link ol.Object}
         * property on the layer object; for example, setting `title: 'My Title'` in the
         * options means that `title` is observable, and has get/set accessors.
         */
        class Vector extends ol.layer.Layer {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.layer.VectorOptions);
            /**
             * Return the associated {@link ol.source.Vector vectorsource} of the layer.
             */
            getSource(): ol.source.Vector;
            /**
             * Get the style for features.  This returns whatever was passed to the `style`
             * option at construction or to the `setStyle` method.
             */
            getStyle(): ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * Get the style function.
             */
            getStyleFunction(): ol.style.StyleFunction;
            /**
             * Set the style for features.  This can be a single style object, an array
             * of styles, or a function that takes a feature and resolution and returns
             * an array of styles. If it is `undefined` the default style is used. If
             * it is `null` the layer has no style (a `null` style), so only features
             * that have their own styles will be rendered in the layer. See
             * {@link ol.style} for information on the default style.
             * @param style  (Optional) Layer style.
             */
            setStyle(style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction): void;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer for vector tile data that is rendered client-side.
         * Note that any property set in the options is set as a {@link ol.Object}
         * property on the layer object; for example, setting `title: 'My Title'` in the
         * options means that `title` is observable, and has get/set accessors.
         */
        class VectorTile extends ol.layer.Vector {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.layer.VectorTileOptions);
            /**
             * Return the level as number to which we will preload tiles up to.
             */
            getPreload(): number;
            /**
             * Return the associated source of the layer (NOTE: TypeScript currently prevents us from returning the intended type of ol.source.VectorTile, you will have to manually cast the returned value to this type)
             */
            getSource(): any;
            /**
             * Whether we use interim tiles on error.
             */
            getUseInterimTilesOnError(): boolean;
            /**
             * Set the level as number to which we will preload tiles up to.
             * @param preload  (Required) The level to preload tiles up to.
             */
            setPreload(preload: number): void;
            /**
             * Set whether we use interim tiles on error.
             * @param useInterimTilesOnError  (Required) Use interim tiles on error.
             */
            setUseInterimTilesOnError(useInterimTilesOnError: boolean): void;
            /**
             * Get the style for features.  This returns whatever was passed to the `style`
             * option at construction or to the `setStyle` method.
             */
            getStyle(): ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * Get the style function.
             */
            getStyleFunction(): ol.style.StyleFunction;
            /**
             * Set the style for features.  This can be a single style object, an array
             * of styles, or a function that takes a feature and resolution and returns
             * an array of styles. If it is `undefined` the default style is used. If
             * it is `null` the layer has no style (a `null` style), so only features
             * that have their own styles will be rendered in the layer. See
             * {@link ol.style} for information on the default style.
             * @param style  (Optional) Layer style.
             */
            setStyle(style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction): void;
            /**
             * Sets the layer to be rendered on top of other layers on a map. The map will
             * not manage this layer in its layers collection, and the callback in
             * {@link ol.Map#forEachLayerAtPixel} will receive `null` as layer. This
             * is useful for temporary layers. To remove an unmanaged layer from the map,
             * use `#setMap(null)`.
             * 
             * To add the layer to a map and have it managed by the map, use
             * {@link ol.Map#addLayer} instead.
             * @param map  (Required) Map.
             */
            setMap(map: ol.Map): void;
            /**
             * Set the layer source.
             * @param source  (Required) The layer source.
             */
            setSource(source: ol.source.Source): void;
            /**
             * Return the {@link ol.Extent extent} of the layer or `undefined` if it
             * will be visible regardless of extent.
             */
            getExtent(): ol.Extent;
            /**
             * Return the maximum resolution of the layer.
             */
            getMaxResolution(): number;
            /**
             * Return the minimum resolution of the layer.
             */
            getMinResolution(): number;
            /**
             * Return the opacity of the layer (between 0 and 1).
             */
            getOpacity(): number;
            /**
             * Return the visibility of the layer (`true` or `false`).
             */
            getVisible(): boolean;
            /**
             * Return the Z-index of the layer, which is used to order layers before
             * rendering. The default Z-index is 0.
             */
            getZIndex(): number;
            /**
             * Set the extent at which the layer is visible.  If `undefined`, the layer
             * will be visible at all extents.
             * @param extent  (Optional) The extent of the layer.
             */
            setExtent(extent?: ol.Extent): void;
            /**
             * Set the maximum resolution at which the layer is visible.
             * @param maxResolution  (Required) The maximum resolution of the layer.
             */
            setMaxResolution(maxResolution: number): void;
            /**
             * Set the minimum resolution at which the layer is visible.
             * @param minResolution  (Required) The minimum resolution of the layer.
             */
            setMinResolution(minResolution: number): void;
            /**
             * Set the opacity of the layer, allowed values range from 0 to 1.
             * @param opacity  (Required) The opacity of the layer.
             */
            setOpacity(opacity: number): void;
            /**
             * Set the visibility of the layer (`true` or `false`).
             * @param visible  (Required) The visibility of the layer.
             */
            setVisible(visible: boolean): void;
            /**
             * Set Z-index of the layer, which is used to order layers before rendering.
             * The default Z-index is 0.
             * @param zindex  (Required) The z-index of the layer.
             */
            setZIndex(zindex: number): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
    }
    module pointer {
        /**
         * A class for pointer events.
         * 
         * This class is used as an abstraction for mouse events,
         * touch events and even native pointer events.
         */
        class PointerEvent extends goog.events.Event {
            /**
             * A class for pointer events.
             * 
             * This class is used as an abstraction for mouse events,
             * touch events and even native pointer events.
             * @param type  (Required) The type of the event to create.
             * @param browserEvent  (Required) The event.
             * @param opt_eventDict  (Optional) An optional dictionary of
   initial event properties.
             */
            constructor(type: string, browserEvent: goog.events.BrowserEvent, opt_eventDict?: { [key: string]: any; });
        }
    }
    module source {
        /**
         * Layer source for Bing Maps tile data.
         */
        class BingMaps extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Bing Maps options.
             */
            constructor(options: olx.source.BingMapsOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source to cluster vector data.
         */
        class Cluster extends ol.source.Vector {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Constructor options.
             */
            constructor(options: olx.source.ClusterOptions);
            /**
             * Get a reference to the wrapped source.
             */
            getSource(): ol.source.Vector;
            /**
             * Add a single feature to the source.  If you want to add a batch of features
             * at once, call {@link ol.source.Vector#addFeatures source.addFeatures()}
             * instead.
             * @param feature  (Required) Feature to add.
             */
            addFeature(feature: ol.Feature): void;
            /**
             * Add a batch of features to the source.
             * @param features  (Required) Features to add.
             */
            addFeatures(features: ol.Feature[]): void;
            /**
             * Remove all features from the source.
             * @param opt_fast  (Optional) Skip dispatching of {@link removefeature} events.
             */
            clear(opt_fast?: boolean): void;
            /**
             * Iterate through all features on the source, calling the provided callback
             * with each one.  If the callback returns any "truthy" value, iteration will
             * stop and the function will return the same value.
             * @param callback  (Required) Called with each feature
    on the source.  Return a truthy value to stop iteration.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeature<T, S>(callback: Function, opt_this?: T): S;
            /**
             * Iterate through all features whose bounding box intersects the provided
             * extent (note that the feature's geometry may not intersect the extent),
             * calling the callback with each feature.  If the callback returns a "truthy"
             * value, iteration will stop and the function will return the same value.
             * 
             * If you are interested in features whose geometry intersects an extent, call
             * the {@link ol.source.Vector#forEachFeatureIntersectingExtent
             * source.forEachFeatureIntersectingExtent()} method instead.
             * 
             * When `useSpatialIndex` is set to false, this method will loop through all
             * features, equivalent to {@link ol.source.Vector#forEachFeature}.
             * @param extent  (Required) Extent.
             * @param callback  (Required) Called with each feature
    whose bounding box intersects the provided extent.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeatureInExtent<T, S>(extent: ol.Extent, callback: Function, opt_this?: T): S;
            /**
             * Iterate through all features whose geometry intersects the provided extent,
             * calling the callback with each feature.  If the callback returns a "truthy"
             * value, iteration will stop and the function will return the same value.
             * 
             * If you only want to test for bounding box intersection, call the
             * {@link ol.source.Vector#forEachFeatureInExtent
             * source.forEachFeatureInExtent()} method instead.
             * @param extent  (Required) Extent.
             * @param callback  (Required) Called with each feature
    whose geometry intersects the provided extent.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeatureIntersectingExtent<T, S>(extent: ol.Extent, callback: Function, opt_this?: T): S;
            /**
             * Get the features collection associated with this source. Will be `null`
             * unless the source was configured with `useSpatialIndex` set to `false`, or
             * with an {@link ol.Collection} as `features`.
             */
            getFeaturesCollection(): ol.Collection<ol.Feature>;
            /**
             * Get all features on the source.
             */
            getFeatures(): ol.Feature[];
            /**
             * Get all features whose geometry intersects the provided coordinate.
             * @param coordinate  (Required) Coordinate.
             */
            getFeaturesAtCoordinate(coordinate: ol.Coordinate): ol.Feature[];
            /**
             * Get all features in the provided extent.  Note that this returns all features
             * whose bounding boxes intersect the given extent (so it may include features
             * whose geometries do not intersect the extent).
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             * @param extent  (Required) Extent.
             */
            getFeaturesInExtent(extent: ol.Extent): ol.Feature[];
            /**
             * Get the closest feature to the provided coordinate.
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             * @param coordinate  (Required) Coordinate.
             */
            getClosestFeatureToCoordinate(coordinate: ol.Coordinate): ol.Feature;
            /**
             * Get the extent of the features currently in the source.
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             */
            getExtent(): ol.Extent;
            /**
             * Get a feature by its identifier (the value returned by feature.getId()).
             * Note that the index treats string and numeric identifiers as the same.  So
             * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
             * @param id  (Required) Feature identifier.
             */
            getFeatureById(id: string|number): ol.Feature;
            /**
             * Remove a single feature from the source.  If you want to remove all features
             * at once, use the {@link ol.source.Vector#clear source.clear()} method
             * instead.
             * @param feature  (Required) Feature to remove.
             */
            removeFeature(feature: ol.Feature): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Base class for image sources where a canvas element is the image.
         */
        class ImageCanvas extends ol.source.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Constructor options.
             */
            constructor(options: olx.source.ImageCanvasOptions);
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Source for images from Mapguide servers
         */
        class ImageMapGuide extends ol.source.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.source.ImageMapGuideOptions);
            /**
             * Get the user-provided params, i.e. those passed to the constructor through
             * the "params" option, and possibly updated using the updateParams method.
             */
            getParams(): any;
            /**
             * Return the image load function of the source.
             */
            getImageLoadFunction(): ol.ImageLoadFunctionType;
            /**
             * Update the user-provided params.
             * @param params  (Required) Params.
             */
            updateParams(params: any): void;
            /**
             * Set the image load function of the MapGuide source.
             * @param imageLoadFunction  (Required) Image load function.
             */
            setImageLoadFunction(imageLoadFunction: ol.ImageLoadFunctionType): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for sources providing a single image.
         */
        class Image extends ol.source.Source {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Single image source options.
             */
            constructor(options: ol.source.ImageOptions);
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A layer source for displaying a single, static image.
         */
        class ImageStatic extends ol.source.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.source.ImageStaticOptions);
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * An image source whose images are canvas elements into which vector features
         * read from a vector source (`ol.source.Vector`) are drawn. An
         * `ol.source.ImageVector` object is to be used as the `source` of an image
         * layer (`ol.layer.Image`). Image layers are rotated, scaled, and translated,
         * as opposed to being re-rendered, during animations and interactions. So, like
         * any other image layer, an image layer configured with an
         * `ol.source.ImageVector` will exhibit this behaviour. This is in contrast to a
         * vector layer, where vector features are re-drawn during animations and
         * interactions.
         */
        class ImageVector extends ol.source.ImageCanvas {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.source.ImageVectorOptions);
            /**
             * Get a reference to the wrapped source.
             */
            getSource(): ol.source.Vector;
            /**
             * Get the style for features.  This returns whatever was passed to the `style`
             * option at construction or to the `setStyle` method.
             */
            getStyle(): ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * Get the style function.
             */
            getStyleFunction(): ol.style.StyleFunction;
            /**
             * Set the style for features.  This can be a single style object, an array
             * of styles, or a function that takes a feature and resolution and returns
             * an array of styles. If it is `undefined` the default style is used. If
             * it is `null` the layer has no style (a `null` style), so only features
             * that have their own styles will be rendered in the layer. See
             * {@link ol.style} for information on the default style.
             * @param style  (Optional) Layer style.
             */
            setStyle(style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Source for WMS servers providing single, untiled images.
         */
        class ImageWMS extends ol.source.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.source.ImageWMSOptions);
            /**
             * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
             * projection. Return `undefined` if the GetFeatureInfo URL cannot be
             * constructed.
             * @param coordinate  (Required) Coordinate.
             * @param resolution  (Required) Resolution.
             * @param projection  (Optional) Projection.
             * @param params  (Optional) GetFeatureInfo params. `INFO_FORMAT` at least should
    be provided. If `QUERY_LAYERS` is not provided then the layers specified
    in the `LAYERS` parameter will be used. `VERSION` should not be
    specified here.
             */
            getGetFeatureInfoUrl(coordinate: ol.Coordinate, resolution: number, projection?: ol.proj.ProjectionLike, params?: any): string;
            /**
             * Get the user-provided params, i.e. those passed to the constructor through
             * the "params" option, and possibly updated using the updateParams method.
             */
            getParams(): any;
            /**
             * Return the image load function of the source.
             */
            getImageLoadFunction(): ol.ImageLoadFunctionType;
            /**
             * Return the URL used for this WMS source.
             */
            getUrl(): string;
            /**
             * Set the image load function of the source.
             * @param imageLoadFunction  (Required) Image load function.
             */
            setImageLoadFunction(imageLoadFunction: ol.ImageLoadFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Optional) URL.
             */
            setUrl(url?: string): void;
            /**
             * Update the user-provided params.
             * @param params  (Required) Params.
             */
            updateParams(params: any): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for the MapQuest tile server.
         */
        class MapQuest extends ol.source.XYZ {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) MapQuest options.
             */
            constructor(opt_options?: olx.source.MapQuestOptions);
            /**
             * Get the layer of the source, either `osm`, `sat`, or `hyb`.
             */
            getLayer(): string;
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for the OpenStreetMap tile server.
         */
        class OSM extends ol.source.XYZ {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Open Street Map options.
             */
            constructor(opt_options?: olx.source.OSMOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A source that transforms data from any number of input sources using an array
         * of {@link ol.raster.Operation} functions to transform input pixel values into
         * output pixel values.
         */
        class Raster extends ol.source.Image {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Options.
             */
            constructor(options: olx.source.RasterOptions);
            /**
             * Set the operation.
             * @param operation  (Required) New operation.
             * @param opt_lib  (Optional) Functions that will be available to operations run
    in a worker.
             */
            setOperation(operation: ol.raster.Operation, opt_lib?: any): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for {@link ol.layer.Layer} sources.
         * 
         * A generic `change` event is triggered when the state of the source changes.
         */
        class Source extends ol.Object {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Source options.
             */
            constructor(options: ol.source.SourceOptions);
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for the Stamen tile server.
         */
        class Stamen extends ol.source.XYZ {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Stamen options.
             */
            constructor(options: olx.source.StamenOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data from ArcGIS Rest services. Map and Image
         * Services are supported.
         * 
         * For cached ArcGIS services, better performance is available using the
         * {@link ol.source.XYZ} data source.
         */
        class TileArcGISRest extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Tile ArcGIS Rest
    options.
             */
            constructor(opt_options?: olx.source.TileArcGISRestOptions);
            /**
             * Get the user-provided params, i.e. those passed to the constructor through
             * the "params" option, and possibly updated using the updateParams method.
             */
            getParams(): any;
            /**
             * Update the user-provided params.
             * @param params  (Required) Params.
             */
            updateParams(params: any): void;
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * A pseudo tile source, which does not fetch tiles from a server, but renders
         * a grid outline for the tile grid/projection along with the coordinates for
         * each tile. See examples/canvas-tiles for an example.
         * 
         * Uses Canvas context2d, so requires Canvas support.
         */
        class TileDebug extends ol.source.Tile {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Debug tile options.
             */
            constructor(options: olx.source.TileDebugOptions);
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Base class for sources providing images divided into a tile grid.
         */
        class TileImage extends ol.source.UrlTile {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Image tile options.
             */
            constructor(options: olx.source.TileImageOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data in TileJSON format.
         */
        class TileJSON extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) TileJSON options.
             */
            constructor(options: olx.source.TileJSONOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Abstract base class; normally only used for creating subclasses and not
         * instantiated in apps.
         * Base class for sources providing images divided into a tile grid.
         */
        class Tile extends ol.source.Source {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Tile source options.
             */
            constructor(options: ol.source.TileOptions);
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for UTFGrid interaction data loaded from TileJSON format.
         */
        class TileUTFGrid extends ol.source.Tile {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Source options.
             */
            constructor(options: olx.source.TileUTFGridOptions);
            /**
             * Return the template from TileJSON.
             */
            getTemplate(): string;
            /**
             * Calls the callback (synchronously by default) with the available data
             * for given coordinate and resolution (or `null` if not yet loaded or
             * in case of an error).
             * @param coordinate  (Required) Coordinate.
             * @param resolution  (Required) Resolution.
             * @param callback  (Required) Callback.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             * @param opt_request  (Optional) If `true` the callback is always async.
                              The tile data is requested if not yet loaded.
             */
            forDataAtCoordinateAndResolution<T>(coordinate: ol.Coordinate, resolution: number, callback: Function, opt_this?: T, opt_request?: boolean): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data from WMS servers.
         */
        class TileWMS extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Tile WMS options.
             */
            constructor(opt_options?: olx.source.TileWMSOptions);
            /**
             * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
             * projection. Return `undefined` if the GetFeatureInfo URL cannot be
             * constructed.
             * @param coordinate  (Required) Coordinate.
             * @param resolution  (Required) Resolution.
             * @param projection  (Optional) Projection.
             * @param params  (Optional) GetFeatureInfo params. `INFO_FORMAT` at least should
    be provided. If `QUERY_LAYERS` is not provided then the layers specified
    in the `LAYERS` parameter will be used. `VERSION` should not be
    specified here.
             */
            getGetFeatureInfoUrl(coordinate: ol.Coordinate, resolution: number, projection?: ol.proj.ProjectionLike, params?: any): string;
            /**
             * Get the user-provided params, i.e. those passed to the constructor through
             * the "params" option, and possibly updated using the updateParams method.
             */
            getParams(): any;
            /**
             * Update the user-provided params.
             * @param params  (Required) Params.
             */
            updateParams(params: any): void;
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Base class for sources providing tiles divided into a tile grid over http.
         */
        class UrlTile extends ol.source.Tile {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Image tile options.
             */
            constructor(options: ol.source.UrlTileOptions);
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Provides a source of features for vector layers. Vector features provided
         * by this source are suitable for editing. See {@link ol.source.VectorTile} for
         * vector data that is optimized for rendering.
         */
        class Vector extends ol.source.Source {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Vector source options.
             */
            constructor(opt_options?: olx.source.VectorOptions);
            /**
             * Add a single feature to the source.  If you want to add a batch of features
             * at once, call {@link ol.source.Vector#addFeatures source.addFeatures()}
             * instead.
             * @param feature  (Required) Feature to add.
             */
            addFeature(feature: ol.Feature): void;
            /**
             * Add a batch of features to the source.
             * @param features  (Required) Features to add.
             */
            addFeatures(features: ol.Feature[]): void;
            /**
             * Remove all features from the source.
             * @param opt_fast  (Optional) Skip dispatching of {@link removefeature} events.
             */
            clear(opt_fast?: boolean): void;
            /**
             * Iterate through all features on the source, calling the provided callback
             * with each one.  If the callback returns any "truthy" value, iteration will
             * stop and the function will return the same value.
             * @param callback  (Required) Called with each feature
    on the source.  Return a truthy value to stop iteration.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeature<T, S>(callback: Function, opt_this?: T): S;
            /**
             * Iterate through all features whose bounding box intersects the provided
             * extent (note that the feature's geometry may not intersect the extent),
             * calling the callback with each feature.  If the callback returns a "truthy"
             * value, iteration will stop and the function will return the same value.
             * 
             * If you are interested in features whose geometry intersects an extent, call
             * the {@link ol.source.Vector#forEachFeatureIntersectingExtent
             * source.forEachFeatureIntersectingExtent()} method instead.
             * 
             * When `useSpatialIndex` is set to false, this method will loop through all
             * features, equivalent to {@link ol.source.Vector#forEachFeature}.
             * @param extent  (Required) Extent.
             * @param callback  (Required) Called with each feature
    whose bounding box intersects the provided extent.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeatureInExtent<T, S>(extent: ol.Extent, callback: Function, opt_this?: T): S;
            /**
             * Iterate through all features whose geometry intersects the provided extent,
             * calling the callback with each feature.  If the callback returns a "truthy"
             * value, iteration will stop and the function will return the same value.
             * 
             * If you only want to test for bounding box intersection, call the
             * {@link ol.source.Vector#forEachFeatureInExtent
             * source.forEachFeatureInExtent()} method instead.
             * @param extent  (Required) Extent.
             * @param callback  (Required) Called with each feature
    whose geometry intersects the provided extent.
             * @param opt_this  (Optional) The object to use as `this` in the callback.
             */
            forEachFeatureIntersectingExtent<T, S>(extent: ol.Extent, callback: Function, opt_this?: T): S;
            /**
             * Get the features collection associated with this source. Will be `null`
             * unless the source was configured with `useSpatialIndex` set to `false`, or
             * with an {@link ol.Collection} as `features`.
             */
            getFeaturesCollection(): ol.Collection<ol.Feature>;
            /**
             * Get all features on the source.
             */
            getFeatures(): ol.Feature[];
            /**
             * Get all features whose geometry intersects the provided coordinate.
             * @param coordinate  (Required) Coordinate.
             */
            getFeaturesAtCoordinate(coordinate: ol.Coordinate): ol.Feature[];
            /**
             * Get all features in the provided extent.  Note that this returns all features
             * whose bounding boxes intersect the given extent (so it may include features
             * whose geometries do not intersect the extent).
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             * @param extent  (Required) Extent.
             */
            getFeaturesInExtent(extent: ol.Extent): ol.Feature[];
            /**
             * Get the closest feature to the provided coordinate.
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             * @param coordinate  (Required) Coordinate.
             */
            getClosestFeatureToCoordinate(coordinate: ol.Coordinate): ol.Feature;
            /**
             * Get the extent of the features currently in the source.
             * 
             * This method is not available when the source is configured with
             * `useSpatialIndex` set to `false`.
             */
            getExtent(): ol.Extent;
            /**
             * Get a feature by its identifier (the value returned by feature.getId()).
             * Note that the index treats string and numeric identifiers as the same.  So
             * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
             * @param id  (Required) Feature identifier.
             */
            getFeatureById(id: string|number): ol.Feature;
            /**
             * Remove a single feature from the source.  If you want to remove all features
             * at once, use the {@link ol.source.Vector#clear source.clear()} method
             * instead.
             * @param feature  (Required) Feature to remove.
             */
            removeFeature(feature: ol.Feature): void;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Class for layer sources providing vector data divided into a tile grid, to be
         * used with {@link ol.layer.VectorTile}. Although this source receives tiles
         * with vector features from the server, it is not meant for feature editing.
         * Features are optimized for rendering, their geometries are clipped at or near
         * tile boundaries and simplified for a view resolution. See
         * {@link ol.source.Vector} for vector sources that are suitable for feature
         * editing.
         */
        class VectorTile extends ol.source.UrlTile {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) Vector tile options.
             */
            constructor(options: olx.source.VectorTileOptions);
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data from WMTS servers.
         */
        class WMTS extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) WMTS options.
             */
            constructor(options: olx.source.WMTSOptions);
            /**
             * Get the dimensions, i.e. those passed to the constructor through the
             * "dimensions" option, and possibly updated using the updateDimensions
             * method.
             */
            getDimensions(): any;
            /**
             * Return the image format of the WMTS source.
             */
            getFormat(): string;
            /**
             * Return the layer of the WMTS source.
             */
            getLayer(): string;
            /**
             * Return the matrix set of the WMTS source.
             */
            getMatrixSet(): string;
            /**
             * Return the request encoding, either "KVP" or "REST".
             */
            getRequestEncoding(): string;
            /**
             * Return the style of the WMTS source.
             */
            getStyle(): string;
            /**
             * Return the version of the WMTS source.
             */
            getVersion(): string;
            /**
             * Update the dimensions.
             * @param dimensions  (Required) Dimensions.
             */
            updateDimensions(dimensions: any): void;
            /**
             * Generate source options from a capabilities object.
             * @param wmtsCap  (Required) An object representing the capabilities document.
             * @param config  (Required) Configuration properties for the layer.  Defaults for
                 the layer will apply if not provided.

Required config properties:
 - layer - {string} The layer identifier.

Optional config properties:
 - matrixSet - {string} The matrix set identifier, required if there is
      more than one matrix set in the layer capabilities.
 - projection - {string} The desired CRS when no matrixSet is specified.
      eg: "EPSG:3857". If the desired projection is not available,
      an error is thrown.
 - requestEncoding - {string} url encoding format for the layer. Default is
      the first tile url format found in the GetCapabilities response.
 - style - {string} The name of the style
 - format - {string} Image format for the layer. Default is the first
      format returned in the GetCapabilities response.
             */
            static optionsFromCapabilities(wmtsCap: any, config: any): olx.source.WMTSOptions;
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data with URLs in a set XYZ format that are
         * defined in a URL template. By default, this follows the widely-used
         * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
         * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
         * using the `{-y}` placeholder in the URL template, so long as the
         * source does not have a custom tile grid. In this case,
         * {@link ol.source.TileImage} can be used with a `tileUrlFunction`
         * such as:
         * 
         *  tileUrlFunction: function(coordinate) {
         *    return 'http://mapserver.com/' + coordinate[0] + '/' +
         *        coordinate[1] + '/' + coordinate[2] + '.png';
         *    }
         */
        class XYZ extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param options  (Required) XYZ options.
             */
            constructor(options: olx.source.XYZOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * Layer source for tile data in Zoomify format.
         */
        class Zoomify extends ol.source.TileImage {
            /**
             * TODO: This method has no documentation. Contact the library author if this method should be documented
             * @param opt_options  (Optional) Options.
             */
            constructor(opt_options?: olx.source.ZoomifyOptions);
            /**
             * Sets whether to render reprojection edges or not (usually for debugging).
             * @param render  (Required) Render the edges.
             */
            setRenderReprojectionEdges(render: boolean): void;
            /**
             * Sets the tile grid to use when reprojecting the tiles to the given
             * projection instead of the default tile grid for the projection.
             * 
             * This can be useful when the default tile grid cannot be created
             * (e.g. projection has no extent defined) or
             * for optimization reasons (custom tile size, resolutions, ...).
             * @param projection  (Optional) Projection.
             * @param tilegrid  (Optional) Tile grid to use for the projection.
             */
            setTileGridForProjection(projection?: ol.proj.ProjectionLike, tilegrid?: ol.tilegrid.TileGrid): void;
            /**
             * Return the tile load function of the source.
             */
            getTileLoadFunction(): ol.TileLoadFunctionType;
            /**
             * Return the tile URL function of the source.
             */
            getTileUrlFunction(): ol.TileUrlFunctionType;
            /**
             * Return the URLs used for this source.
             * When a tileUrlFunction is used instead of url or urls,
             * null will be returned.
             */
            getUrls(): string[];
            /**
             * Set the tile load function of the source.
             * @param tileLoadFunction  (Required) Tile load function.
             */
            setTileLoadFunction(tileLoadFunction: ol.TileLoadFunctionType): void;
            /**
             * Set the tile URL function of the source.
             * @param tileUrlFunction  (Required) Tile URL function.
             */
            setTileUrlFunction(tileUrlFunction: ol.TileUrlFunctionType): void;
            /**
             * Set the URL to use for requests.
             * @param url  (Required) URL.
             */
            setUrl(url: string): void;
            /**
             * Set the URLs to use for requests.
             * @param urls  (Required) URLs.
             */
            setUrls(urls: string[]): void;
            /**
             * Return the tile grid of the tile source.
             */
            getTileGrid(): ol.tilegrid.TileGrid;
            /**
             * Get the attributions of the source.
             */
            getAttributions(): ol.Attribution[];
            /**
             * Get the logo of the source.
             */
            getLogo(): string|olx.LogoOptions;
            /**
             * Get the projection of the source.
             */
            getProjection(): ol.proj.Projection;
            /**
             * Get the state of the source, see {@link ol.source.State} for possible states.
             */
            getState(): string;
            /**
             * Set the attributions of the source.
             * @param attributions  (Required) Attributions.
             */
            setAttributions(attributions: ol.Attribution[]): void;
            /**
             * Gets a value.
             * @param key  (Required) Key name.
             */
            get(key: string): any;
            /**
             * Get a list of object property names.
             */
            getKeys(): string[];
            /**
             * Get an object of all property names and values.
             */
            getProperties(): { [key: string]: any; };
            /**
             * Sets a value.
             * @param key  (Required) Key name.
             * @param value  (Required) Value.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            set(key: string, value: any, opt_silent?: boolean): void;
            /**
             * Sets a collection of key-value pairs.  Note that this changes any existing
             * properties and adds new ones (it does not remove any existing properties).
             * @param values  (Required) Values.
             * @param opt_silent  (Optional) Update without triggering an event.
             */
            setProperties(values: { [key: string]: any; }, opt_silent?: boolean): void;
            /**
             * Unsets a property.
             * @param key  (Required) Key name.
             * @param opt_silent  (Optional) Unset without triggering an event.
             */
            unset(key: string, opt_silent?: boolean): void;
            /**
             * Increases the revision counter and dispatches a 'change' event.
             */
            changed(): void;
            /**
             * Dispatches an event and calls all listeners listening for events
             * of this type. The event parameter can either be a string or an
             * Object with a `type` property.
             * @param event  (Required) Event object.
             */
            dispatchEvent(event: goog.events.EventLike): void;
            /**
             * Get the version number for this object.  Each time the object is modified,
             * its version number will be incremented.
             */
            getRevision(): number;
            /**
             * Listen for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            on(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Listen once for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object to use as `this` in `listener`.
             */
            once(type: string|string[], listener: Function, opt_this?: any): goog.events.Key;
            /**
             * Unlisten for a certain type of event.
             * @param type  (Required) The event type or array of event types.
             * @param listener  (Required) The listener function.
             * @param opt_this  (Optional) The object which was used as `this` by the
`listener`.
             */
            un(type: string|string[], listener: Function, opt_this?: any): void;
            /**
             * Removes an event listener using the key returned by `on()` or `once()`.
             * Note that using the {@link ol.Observable.unByKey} static function is to
             * be preferred.
             * @param key  (Required) The key returned by `on()` or `once()`.
             */
            unByKey(key: goog.events.Key): void;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        type ImageOptions = any;

        /**
         * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
         */
        class State {
            /**
             * "undefined"
             */
            public static UNDEFINED: string;
            /**
             * "loading"
             */
            public static LOADING: string;
            /**
             * "ready"
             */
            public static READY: string;
            /**
             * "error"
             */
            public static ERROR: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        type SourceOptions = any;

        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        type TileOptions = any;

        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        type UrlTileOptions = any;

        /**
         * Request encoding. One of 'KVP', 'REST'.
         */
        class WMTSRequestEncoding {
            /**
             * "KVP"
             */
            public static KVP: string;
            /**
             * "REST"
             */
            public static REST: string;
        }
        module wms {
            /**
             * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,
             *     `'qgis'`. These are servers that have vendor parameters beyond the WMS
             *     specification that OpenLayers can make use of.
             */
            class ServerType {
                /**
                 * "carmentaserver"
                 */
                public static CARMENTA_SERVER: string;
                /**
                 * "geoserver"
                 */
                public static GEOSERVER: string;
                /**
                 * "mapserver"
                 */
                public static MAPSERVER: string;
                /**
                 * "qgis"
                 */
                public static QGIS: string;
            }
        }
    }
}
declare module olx {
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface AttributionOptions {
        /**
         * HTML markup for this attribution.
         */
        html: string;
    }
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface DeviceOrientationOptions {
        /**
         * Start tracking. Default is `false`.
         */
        tracking?: boolean;
    }
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface GeolocationOptions {
        /**
         * Start Tracking. Default is `false`.
         */
        tracking?: boolean;
        /**
         * Tracking options. See
         * {@link http://www.w3.org/TR/geolocation-API/#position_options_interface}.
         */
        trackingOptions?: GeolocationPositionOptions;
        /**
         * The projection the position is reported in.
         */
        projection?: ol.proj.ProjectionLike;
    }
    /**
     * Object literal with config options for the map logo.
     */
    interface LogoOptions {
        /**
         * Link url for the logo. Will be followed when the logo is clicked.
         */
        href: string;
        /**
         * Image src for the logo
         */
        src: string;
    }
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface GraticuleOptions {
        /**
         * Reference to an `ol.Map` object.
         */
        map?: ol.Map;
        /**
         * The maximum number of meridians and parallels from the center of the
         * map. The default value is 100, which means that at most 200 meridians
         * and 200 parallels will be displayed. The default value is appropriate
         * for conformal projections like Spherical Mercator. If you increase
         * the value more lines will be drawn and the drawing performance will
         * decrease.
         */
        maxLines?: number;
        /**
         * The stroke style to use for drawing the graticule. If not provided, the
         * lines will be drawn with `rgba(0,0,0,0.2)`, a not fully opaque black.
         */
        strokeStyle?: ol.style.Stroke;
        /**
         * The target size of the graticule cells, in pixels. Default
         * value is 100 pixels.
         */
        targetSize?: number;
    }
    /**
     * Object literal with config options for the map.
     */
    interface MapOptions {
        /**
         * Controls initially added to the map. If not specified,
         * {@link ol.control.defaults ol.control.defaults()} is used.
         */
        controls?: ol.Collection<ol.control.Control>|ol.control.Control[];
        /**
         * The ratio between physical pixels and device-independent pixels (dips) on the
         * device. If `undefined` then it gets set by using `window.devicePixelRatio`.
         */
        pixelRatio?: number;
        /**
         * Interactions that are initially added to the map. If not specified,
         * {@link ol.interaction.defaults ol.interaction.defaults()} is used.
         */
        interactions?: ol.Collection<ol.interaction.Interaction>|ol.interaction.Interaction[];
        /**
         * The element to listen to keyboard events on. This determines when the
         * `KeyboardPan` and `KeyboardZoom` interactions trigger. For example, if this
         * option is set to `document` the keyboard interactions will always trigger. If
         * this option is not specified, the element the library listens to keyboard
         * events on is the map target (i.e. the user-provided div for the map). If this
         * is not `document` the target element needs to be focused for key events to be
         * emitted, requiring that the target element has a `tabindex` attribute.
         */
        keyboardEventTarget?: Element|Document|string;
        /**
         * Layers. If this is not defined, a map with no layers will be rendered. Note
         * that layers are rendered in the order supplied, so if you want, for example,
         * a vector layer to appear on top of a tile layer, it must come after the tile
         * layer.
         */
        layers?: ol.layer.Base[]|ol.Collection<ol.layer.Base>;
        /**
         * When set to true, tiles will be loaded during animations. This may improve
         * the user experience, but can also make animations stutter on devices with
         * slow memory. Default is `false`.
         */
        loadTilesWhileAnimating?: boolean;
        /**
         * When set to true, tiles will be loaded while interacting with the map. This
         * may improve the user experience, but can also make map panning and zooming
         * choppy on devices with slow memory. Default is `false`.
         */
        loadTilesWhileInteracting?: boolean;
        /**
         * The map logo. A logo to be displayed on the map at all times. If a string is
         * provided, it will be set as the image source of the logo. If an object is
         * provided, the `src` property should be the URL for an image and the `href`
         * property should be a URL for creating a link. To disable the map logo, set
         * the option to `false`. By default, the OpenLayers 3 logo is shown.
         */
        logo?: boolean|string|olx.LogoOptions;
        /**
         * Overlays initially added to the map. By default, no overlays are added.
         */
        overlays?: ol.Collection<ol.Overlay>|ol.Overlay[];
        /**
         * Renderer. By default, Canvas, DOM and WebGL renderers are tested for support
         * in that order, and the first supported used. Specify a
         * {@link ol.RendererType} here to use a specific renderer.
         * Note that at present only the Canvas renderer supports vector data.
         */
        renderer?: string|(ol.RendererType|string)[]|string;
        /**
         * The container for the map, either the element itself or the `id` of the
         * element. If not specified at construction time, {@link ol.Map#setTarget}
         * must be called for the map to be rendered.
         */
        target?: Element|string;
        /**
         * The map's view.  No layer sources will be fetched unless this is specified at
         * construction time or through {@link ol.Map#setView}.
         */
        view?: ol.View;
    }
    /**
     * Object literal with config options for the overlay.
     */
    interface OverlayOptions {
        /**
         * Set the overlay id. The overlay id can be used with the
         * {@link ol.Map#getOverlayById} method.
         */
        id?: number|string;
        /**
         * The overlay element.
         */
        element?: Element;
        /**
         * Offsets in pixels used when positioning the overlay. The first element in the
         * array is the horizontal offset. A positive value shifts the overlay right.
         * The second element in the array is the vertical offset. A positive value
         * shifts the overlay down. Default is `[0, 0]`.
         */
        offset?: number[];
        /**
         * The overlay position in map projection.
         */
        position?: ol.Coordinate;
        /**
         * Defines how the overlay is actually positioned with respect to its `position`
         * property. Possible values are `'bottom-left'`, `'bottom-center'`,
         * `'bottom-right'`, `'center-left'`, `'center-center'`, `'center-right'`,
         * `'top-left'`, `'top-center'`, and `'top-right'`. Default is `'top-left'`.
         */
        positioning?: string|string;
        /**
         * Whether event propagation to the map viewport should be stopped. Default is
         * `true`. If `true` the overlay is placed in the same container as that of the
         * controls (CSS class name `ol-overlaycontainer-stopevent`); if `false` it is
         * placed in the container with CSS class name `ol-overlaycontainer`.
         */
        stopEvent?: boolean;
        /**
         * Whether the overlay is inserted first in the overlay container, or appended.
         * Default is `true`. If the overlay is placed in the same container as that of
         * the controls (see the `stopEvent` option) you will probably set `insertFirst`
         * to `true` so the overlay is displayed below the controls.
         */
        insertFirst?: boolean;
        /**
         * If set to `true` the map is panned when calling `setPosition`, so that the
         * overlay is entirely visible in the current viewport.
         * The default is `false`.
         */
        autoPan?: boolean;
        /**
         * The options used to create a `ol.animation.pan` animation. This animation
         * is only used when `autoPan` is enabled. By default the default options for
         * `ol.animation.pan` are used. If set to `null` the panning is not animated.
         */
        autoPanAnimation?: olx.animation.PanOptions;
        /**
         * The margin (in pixels) between the overlay and the borders of the map when
         * autopanning. The default is `20`.
         */
        autoPanMargin?: number;
    }
    /**
     * Object literal with config options for the projection.
     */
    interface ProjectionOptions {
        /**
         * The SRS identifier code, e.g. `EPSG:4326`.
         */
        code: string;
        /**
         * Units. Required unless a proj4 projection is defined for `code`.
         */
        units?: string|string;
        /**
         * The validity extent for the SRS.
         */
        extent?: ol.Extent;
        /**
         * The axis orientation as specified in Proj4. The default is `enu`.
         */
        axisOrientation?: string;
        /**
         * Whether the projection is valid for the whole globe. Default is `false`.
         */
        global?: boolean;
        /**
         * The meters per unit for the SRS. If not provided, the `units` are used to get
         * the meters per unit from the {@link ol.proj.METERS_PER_UNIT} lookup table.
         */
        metersPerUnit?: number;
        /**
         * The world extent for the SRS.
         */
        worldExtent?: ol.Extent;
        /**
         * Function to determine resolution at a point. The function is called with a
         * `{number}` view resolution and an `{ol.Coordinate}` as arguments, and returns
         * the `{number}` resolution at the passed coordinate.
         */
        getPointResolution?: Function;
    }
    /**
     * Object literal with config options for the view.
     */
    interface ViewOptions {
        /**
         * The initial center for the view. The coordinate system for the center is
         * specified with the `projection` option. Default is `undefined`, and layer
         * sources will not be fetched if this is not set.
         */
        center?: ol.Coordinate;
        /**
         * Rotation constraint. `false` means no constraint. `true` means no constraint,
         * but snap to zero near zero. A number constrains the rotation to that number
         * of values. For example, `4` will constrain the rotation to 0, 90, 180, and
         * 270 degrees. The default is `true`.
         */
        constrainRotation?: boolean|number;
        /**
         * Enable rotation. Default is `true`. If `false` a rotation constraint that
         * always sets the rotation to zero is used. The `constrainRotation` option
         * has no effect if `enableRotation` is `false`.
         */
        enableRotation?: boolean;
        /**
         * The extent that constrains the center, in other words, center cannot be set
         * outside this extent. Default is `undefined`.
         */
        extent?: ol.Extent;
        /**
         * The maximum resolution used to determine the resolution constraint. It is
         * used together with `minResolution` (or `maxZoom`) and `zoomFactor`. If
         * unspecified it is calculated in such a way that the projection's validity
         * extent fits in a 256x256 px tile. If the projection is Spherical Mercator
         * (the default) then `maxResolution` defaults to `40075016.68557849 / 256 =
         * 156543.03392804097`.
         */
        maxResolution?: number;
        /**
         * The minimum resolution used to determine the resolution constraint.  It is
         * used together with `maxResolution` (or `minZoom`) and `zoomFactor`.  If
         * unspecified it is calculated assuming 29 zoom levels (with a factor of 2).
         * If the projection is Spherical Mercator (the default) then `minResolution`
         * defaults to `40075016.68557849 / 256 / Math.pow(2, 28) =
         * 0.0005831682455839253`.
         */
        minResolution?: number;
        /**
         * The maximum zoom level used to determine the resolution constraint. It is
         * used together with `minZoom` (or `maxResolution`) and `zoomFactor`. Default
         * is `28`.  Note that if `minResolution` is also provided, it is given
         * precedence over `maxZoom`.
         */
        maxZoom?: number;
        /**
         * The minimum zoom level used to determine the resolution constraint. It is
         * used together with `maxZoom` (or `minResolution`) and `zoomFactor`. Default
         * is `0`. Note that if `maxResolution` is also provided, it is given
         * precedence over `minZoom`.
         */
        minZoom?: number;
        /**
         * The projection. Default is `EPSG:3857` (Spherical Mercator).
         */
        projection?: ol.proj.ProjectionLike;
        /**
         * The initial resolution for the view. The units are `projection` units per
         * pixel (e.g. meters per pixel). An alternative to setting this is to set
         * `zoom`. Default is `undefined`, and layer sources will not be fetched if
         * neither this nor `zoom` are defined.
         */
        resolution?: number;
        /**
         * Resolutions to determine the resolution constraint. If set the
         * `maxResolution`, `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor`
         * options are ignored.
         */
        resolutions?: number[];
        /**
         * The initial rotation for the view in radians (positive rotation clockwise).
         * Default is `0`.
         */
        rotation?: number;
        /**
         * Only used if `resolution` is not defined. Zoom level used to calculate the
         * initial resolution for the view. The initial resolution is determined using
         * the `ol.View#constrainResolution` method.
         */
        zoom?: number;
        /**
         * The zoom factor used to determine the resolution constraint.  Default is `2`.
         */
        zoomFactor?: number;
    }
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface FrameState {
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        pixelRatio: number;
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        time: number;
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        viewState: olx.ViewState;
    }
    /**
     * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
     */
    interface ViewState {
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        center: ol.Coordinate;
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        projection: ol.proj.Projection;
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        resolution: number;
        /**
         * TODO: This property has no documentation. Contact the library author if this property should be documented
         */
        rotation: number;
    }
    module interaction {
        /**
         * Object literal with config options for interactions.
         */
        interface InteractionOptions {
            /**
             * Method called by the map to notify the interaction that a browser event was
             * dispatched to the map. The function may return `false` to prevent the
             * propagation of the event to other interactions in the map's interactions
             * chain. Required.
             */
            handleEvent: Function;
        }
        /**
         * Interactions for the map. Default is `true` for all options.
         */
        interface DefaultsOptions {
            /**
             * Whether Alt-Shift-drag rotate is desired. Default is `true`.
             */
            altShiftDragRotate?: boolean;
            /**
             * Whether double click zoom is desired. Default is `true`.
             */
            doubleClickZoom?: boolean;
            /**
             * Whether keyboard interaction is desired. Default is `true`.
             */
            keyboard?: boolean;
            /**
             * Whether mousewheel zoom is desired. Default is `true`.
             */
            mouseWheelZoom?: boolean;
            /**
             * Whether Shift-drag zoom is desired. Default is `true`.
             */
            shiftDragZoom?: boolean;
            /**
             * Whether drag pan is desired. Default is `true`.
             */
            dragPan?: boolean;
            /**
             * Whether pinch rotate is desired. Default is `true`.
             */
            pinchRotate?: boolean;
            /**
             * Whether pinch zoom is desired. Default is `true`.
             */
            pinchZoom?: boolean;
            /**
             * Zoom delta.
             */
            zoomDelta?: number;
            /**
             * Zoom duration.
             */
            zoomDuration?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DoubleClickZoomOptions {
            /**
             * Animation duration in milliseconds. Default is `250`.
             */
            duration?: number;
            /**
             * The zoom delta applied on each double click, default is `1`.
             */
            delta?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragAndDropOptions {
            /**
             * Format constructors.
             */
            formatConstructors?: (arg0: ol.format.Feature) => any;
            /**
             * Target projection. By default, the map's view's projection is used.
             */
            projection?: ol.proj.ProjectionLike;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragBoxOptions {
            /**
             * CSS class name for styling the box. The default is `ol-dragbox`.
             */
            className?: string;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.always}.
             */
            condition?: ol.events.ConditionType;
            /**
             * A function that takes a {@link ol.MapBrowserEvent} and two
             * {@link ol.Pixel}s to indicate whether a boxend event should be fired.
             * Default is:
             * ```js
             * function(mapBrowserEvent,
             *     startPixel, endPixel) {
             *   var width = endPixel[0] - startPixel[0];
             *   var height = endPixel[1] - startPixel[1];
             *   return width * width + height * height >=
             *     ol.DRAG_BOX_HYSTERESIS_PIXELS_SQUARED;
             * }
             * ```
             */
            boxEndCondition?: ol.interaction.DragBoxEndConditionType;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragPanOptions {
            /**
             * Kinetic inertia to apply to the pan.
             */
            kinetic?: ol.Kinetic;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragRotateAndZoomOptions {
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.shiftKeyOnly}.
             */
            condition?: ol.events.ConditionType;
            /**
             * Animation duration in milliseconds. Default is `400`.
             */
            duration?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragRotateOptions {
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.altShiftKeysOnly}.
             */
            condition?: ol.events.ConditionType;
            /**
             * Animation duration in milliseconds. Default is `250`.
             */
            duration?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DragZoomOptions {
            /**
             * CSS class name for styling the box. The default is `ol-dragzoom`.
             */
            className?: string;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.shiftKeyOnly}.
             */
            condition?: ol.events.ConditionType;
            /**
             * Animation duration in milliseconds. Default is `200`.
             */
            duration?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DrawOptions {
            /**
             * The maximum distance in pixels between "down" and "up" for a "up" event
             * to be considered a "click" event and actually add a point/vertex to the
             * geometry being drawn.  Default is 6 pixels.  That value was chosen for
             * the draw interaction to behave correctly on mouse as well as on touch
             * devices.
             */
            clickTolerance?: number;
            /**
             * Destination collection for the drawn features.
             */
            features?: ol.Collection<ol.Feature>;
            /**
             * Destination source for the drawn features.
             */
            source?: ol.source.Vector;
            /**
             * Pixel distance for snapping to the drawing finish. Default is `12`.
             */
            snapTolerance?: number;
            /**
             * Drawing type ('Point', 'LineString', 'Polygon', 'MultiPoint',
             * 'MultiLineString', 'MultiPolygon' or 'Circle').
             */
            type: string;
            /**
             * The number of points that can be drawn before a polygon ring or line string
             * is finished. The default is no restriction.
             */
            maxPoints?: number;
            /**
             * The number of points that must be drawn before a polygon ring or line string
             * can be finished. Default is `3` for polygon rings and `2` for line strings.
             */
            minPoints?: number;
            /**
             * Style for sketch features.
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * Function that is called when a geometry's coordinates are updated.
             */
            geometryFunction?: ol.interaction.DrawGeometryFunctionType;
            /**
             * Geometry name to use for features created by the draw interaction.
             */
            geometryName?: string;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * By default {@link ol.events.condition.noModifierKeys}, i.e. a click, adds a
             * vertex or deactivates freehand drawing.
             */
            condition?: ol.events.ConditionType;
            /**
             * Condition that activates freehand drawing for lines and polygons. This
             * function takes an {@link ol.MapBrowserEvent} and returns a boolean to
             * indicate whether that event should be handled. The default is
             * {@link ol.events.condition.shiftKeyOnly}, meaning that the Shift key
             * activates freehand drawing.
             */
            freehandCondition?: ol.events.ConditionType;
            /**
             * Wrap the world horizontally on the sketch overlay. Default is `false`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TranslateOptions {
            /**
             * Only features contained in this collection will be able to be translated. If
             * not specified, all features on the map will be able to be translated.
             */
            features?: ol.Collection<ol.Feature>;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface KeyboardPanOptions {
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.noModifierKeys} and
             * {@link ol.events.condition.targetNotEditable}.
             */
            condition?: ol.events.ConditionType;
            /**
             * Animation duration in milliseconds. Default is `100`.
             */
            duration?: number;
            /**
             * Pixel The amount to pan on each key press. Default is `128` pixels.
             */
            pixelDelta?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface KeyboardZoomOptions {
            /**
             * Animation duration in milliseconds. Default is `100`.
             */
            duration?: number;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * Default is {@link ol.events.condition.targetNotEditable}.
             */
            condition?: ol.events.ConditionType;
            /**
             * The amount to zoom on each key press. Default is `1`.
             */
            delta?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ModifyOptions {
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * By default, {@link ol.events.condition.singleClick} with
             * {@link ol.events.condition.noModifierKeys} results in a vertex deletion.
             */
            deleteCondition?: ol.events.ConditionType;
            /**
             * Pixel tolerance for considering the pointer close enough to a segment or
             * vertex for editing. Default is `10`.
             */
            pixelTolerance?: number;
            /**
             * Style used for the features being modified. By default the default edit
             * style is used (see {@link ol.style}).
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * The features the interaction works on.
             */
            features: ol.Collection<ol.Feature>;
            /**
             * Wrap the world horizontally on the sketch overlay. Default is `false`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface MouseWheelZoomOptions {
            /**
             * Animation duration in milliseconds. Default is `250`.
             */
            duration?: number;
            /**
             * Enable zooming using the mouse's location as the anchor. Default is `true`.
             * When set to false, zooming in and out will zoom to the center of the screen
             * instead of zooming on the mouse's location.
             */
            useAnchor?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface PinchRotateOptions {
            /**
             * The duration of the animation in milliseconds. Default is `250`.
             */
            duration?: number;
            /**
             * Minimal angle in radians to start a rotation. Default is `0.3`.
             */
            threshold?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface PinchZoomOptions {
            /**
             * Animation duration in milliseconds. Default is `400`.
             */
            duration?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface PointerOptions {
            /**
             * Function handling "down" events. If the function returns `true` then a drag
             * sequence is started.
             */
            handleDownEvent?: Function;
            /**
             * Function handling "drag" events. This function is called on "move" events
             * during a drag sequence.
             */
            handleDragEvent?: Function;
            /**
             * Method called by the map to notify the interaction that a browser event was
             * dispatched to the map. The function may return `false` to prevent the
             * propagation of the event to other interactions in the map's interactions
             * chain.
             */
            handleEvent?: Function;
            /**
             * Function handling "move" events. This function is called on "move" events,
             * also during a drag sequence (so during a drag sequence both the
             * `handleDragEvent` function and this function are called).
             */
            handleMoveEvent?: Function;
            /**
             * Function handling "up" events. If the function returns `false` then the
             * current drag sequence is stopped.
             */
            handleUpEvent?: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface SelectOptions {
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * By default, this is {@link ol.events.condition.never}. Use this if you want
             * to use different events for add and remove instead of `toggle`.
             */
            addCondition?: ol.events.ConditionType;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * This is the event for the selected features as a whole. By default, this is
             * {@link ol.events.condition.singleClick}. Clicking on a feature selects that
             * feature and removes any that were in the selection. Clicking outside any
             * feature removes all from the selection.
             * See `toggle`, `add`, `remove` options for adding/removing extra features to/
             * from the selection.
             */
            condition?: ol.events.ConditionType;
            /**
             * A list of layers from which features should be
             * selected. Alternatively, a filter function can be provided. The
             * function will be called for each layer in the map and should return
             * `true` for layers that you want to be selectable. If the option is
             * absent, all visible layers will be considered selectable.
             */
            layers: ol.layer.Layer[]|Function;
            /**
             * Style for the selected features. By default the default edit style is used
             * (see {@link ol.style}).
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * By default, this is {@link ol.events.condition.never}. Use this if you want
             * to use different events for add and remove instead of `toggle`.
             */
            removeCondition?: ol.events.ConditionType;
            /**
             * A function that takes an {@link ol.MapBrowserEvent} and returns a boolean
             * to indicate whether that event should be handled.
             * This is in addition to the `condition` event. By default,
             * {@link ol.events.condition.shiftKeyOnly}, i.e. pressing `shift` as well as
             * the `condition` event, adds that feature to the current selection if it is
             * not currently selected, and removes it if it is.
             * See `add` and `remove` if you want to use different events instead of a
             * toggle.
             */
            toggleCondition?: ol.events.ConditionType;
            /**
             * A boolean that determines if the default behaviour should select only
             * single features or all (overlapping) features at the clicked map
             * position. Default is false i.e single select
             */
            multi?: boolean;
            /**
             * Collection where the interaction will place selected features. Optional. If
             * not set the interaction will create a collection. In any case the collection
             * used by the interaction is returned by
             * {@link ol.interaction.Select#getFeatures}.
             */
            features?: ol.Collection<ol.Feature>;
            /**
             * A function that takes an {@link ol.Feature} and an {@link ol.layer.Layer} and
             * returns `true` if the feature may be selected or `false` otherwise.
             */
            filter?: ol.interaction.SelectFilterFunction;
            /**
             * Wrap the world horizontally on the selection overlay. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * Options for snap
         */
        interface SnapOptions {
            /**
             * Snap to these features. Either this option or source should be provided.
             */
            features?: ol.Collection<ol.Feature>;
            /**
             * Pixel tolerance for considering the pointer close enough to a segment or
             * vertex for snapping. Default is `10` pixels.
             */
            pixelTolerance?: number;
            /**
             * Snap to features from this source. Either this option or features should be provided
             */
            source?: ol.source.Vector;
        }
    }
    module animation {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface BounceOptions {
            /**
             * The resolution to start the bounce from, typically
             * `map.getView().getResolution()`.
             */
            resolution: number;
            /**
             * The start time of the animation. Default is immediately.
             */
            start?: number;
            /**
             * The duration of the animation in milliseconds. Default is `1000`.
             */
            duration?: number;
            /**
             * The easing function to use. Can be an {@link ol.easing} or a custom function.
             * Default is {@link ol.easing.upAndDown}.
             */
            easing: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface PanOptions {
            /**
             * The location to start panning from, typically `map.getView().getCenter()`.
             */
            source: ol.Coordinate;
            /**
             * The start time of the animation. Default is immediately.
             */
            start?: number;
            /**
             * The duration of the animation in milliseconds. Default is `1000`.
             */
            duration?: number;
            /**
             * The easing function to use. Can be an {@link ol.easing} or a custom function.
             * Default is {@link ol.easing.inAndOut}.
             */
            easing: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface RotateOptions {
            /**
             * The rotation value (in radians) to begin rotating from, typically
             * `map.getView().getRotation()`. If `undefined` then `0` is assumed.
             */
            rotation?: number;
            /**
             * The rotation center/anchor. The map rotates around the center of the view
             * if unspecified.
             */
            anchor?: ol.Coordinate;
            /**
             * The start time of the animation. Default is immediately.
             */
            start?: number;
            /**
             * The duration of the animation in milliseconds. Default is `1000`.
             */
            duration?: number;
            /**
             * The easing function to use. Can be an {@link ol.easing} or a custom function.
             * Default is {@link ol.easing.inAndOut}.
             */
            easing: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ZoomOptions {
            /**
             * number The resolution to begin zooming from, typically
             * `map.getView().getResolution()`.
             */
            resolution: number;
            /**
             * The start time of the animation. Default is immediately.
             */
            start?: number;
            /**
             * The duration of the animation in milliseconds. Default is `1000`.
             */
            duration?: number;
            /**
             * The easing function to use. Can be an {@link ol.easing} or a custom function.
             * Default is {@link ol.easing.inAndOut}.
             */
            easing: Function;
        }
    }
    module control {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface AttributionOptions {
            /**
             * CSS class name. Default is `ol-attribution`.
             */
            className?: string;
            /**
             * Target.
             */
            target?: Element;
            /**
             * Specify if attributions can be collapsed. If you use an OSM source,
             * should be set to `false` — see
             * {@link http://www.openstreetmap.org/copyright OSM Copyright} —
             * Default is `true`.
             */
            collapsible?: boolean;
            /**
             * Specify if attributions should be collapsed at startup. Default is `true`.
             */
            collapsed?: boolean;
            /**
             * Text label to use for the button tip. Default is `Attributions`
             */
            tipLabel?: string;
            /**
             * Text label to use for the collapsed attributions button. Default is `i`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            label?: string|Node;
            /**
             * Text label to use for the expanded attributions button. Default is `»`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            collapseLabel?: string|Node;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ControlOptions {
            /**
             * The element is the control's container element. This only needs to be
             * specified if you're developing a custom control.
             */
            element?: Element;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
            /**
             * Specify a target if you want the control to be rendered outside of the map's
             * viewport.
             */
            target?: Element|string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface DefaultsOptions {
            /**
             * Attribution. Default is `true`.
             */
            attribution?: boolean;
            /**
             * Attribution options.
             */
            attributionOptions?: olx.control.AttributionOptions;
            /**
             * Rotate. Default is `true`.
             */
            rotate?: boolean;
            /**
             * Rotate options.
             */
            rotateOptions?: olx.control.RotateOptions;
            /**
             * Zoom. Default is `true`.
             */
            zoom?: boolean;
            /**
             * Zoom options.
             */
            zoomOptions?: olx.control.ZoomOptions;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface FullScreenOptions {
            /**
             * CSS class name. Default is `ol-full-screen`.
             */
            className?: string;
            /**
             * Text label to use for the button. Default is `\u2922` (NORTH EAST AND SOUTH WEST ARROW).
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            label?: string|Node;
            /**
             * Text label to use for the button when full-screen is active.
             * Default is `\u00d7` (a cross).
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            labelActive?: string|Node;
            /**
             * Text label to use for the button tip. Default is `Toggle full-screen`
             */
            tipLabel?: string;
            /**
             * Full keyboard access.
             */
            keys?: boolean;
            /**
             * Target.
             */
            target?: Element;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface MousePositionOptions {
            /**
             * CSS class name. Default is `ol-mouse-position`.
             */
            className?: string;
            /**
             * Coordinate format.
             */
            coordinateFormat?: ol.CoordinateFormatType;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
            /**
             * Target.
             */
            target?: Element;
            /**
             * Markup for undefined coordinates. Default is `` (empty string).
             */
            undefinedHTML?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface OverviewMapOptions {
            /**
             * Whether the control should start collapsed or not (expanded).
             * Default to `true`.
             */
            collapsed?: boolean;
            /**
             * Text label to use for the expanded overviewmap button. Default is `«`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            collapseLabel?: string|Node;
            /**
             * Whether the control can be collapsed or not. Default to `true`.
             */
            collapsible?: boolean;
            /**
             * Text label to use for the collapsed overviewmap button. Default is `»`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            label?: string|Node;
            /**
             * Layers for the overview map. If not set, then all maps layers are used instead
             */
            layers: ol.layer.Layer[]|ol.Collection<ol.layer.Layer>
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
            /**
             * Specify a target if you want the control to be rendered outside of the map's
             * viewport.
             */
            target?: Element;
            /**
             * Text label to use for the button tip. Default is `Overview map`
             */
            tipLabel?: string;
            /**
             * Custom view for the overview map. If not provided, a default view with
             * an EPSG:3857 projection will be used.
             */
            view?: ol.View;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ScaleLineOptions {
            /**
             * CSS Class name. Default is `ol-scale-line`.
             */
            className?: string;
            /**
             * Minimum width in pixels. Default is `64`.
             */
            minWidth?: number;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
            /**
             * Target.
             */
            target?: Element;
            /**
             * Units. Default is `metric`.
             */
            units?: string|string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface RotateOptions {
            /**
             * CSS class name. Default is `ol-rotate`.
             */
            className?: string;
            /**
             * Text label to use for the rotate button. Default is `⇧`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            label?: string|Node;
            /**
             * Text label to use for the rotate tip. Default is `Reset rotation`
             */
            tipLabel?: string;
            /**
             * Animation duration in milliseconds. Default is `250`.
             */
            duration?: number;
            /**
             * Hide the control when rotation is 0. Default is `true`.
             */
            autoHide?: boolean;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
            /**
             * Function called when the control is clicked. This will override the
             * default resetNorth.
             */
            resetNorth?: Function;
            /**
             * Target.
             */
            target?: Element;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ZoomOptions {
            /**
             * Animation duration in milliseconds. Default is `250`.
             */
            duration?: number;
            /**
             * CSS class name. Default is `ol-zoom`.
             */
            className?: string;
            /**
             * Text label to use for the zoom-in button. Default is `+`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            zoomInLabel?: string|Node;
            /**
             * Text label to use for the zoom-out button. Default is `-`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            zoomOutLabel?: string|Node;
            /**
             * Text label to use for the button tip. Default is `Zoom in`
             */
            zoomInTipLabel?: string;
            /**
             * Text label to use for the button tip. Default is `Zoom out`
             */
            zoomOutTipLabel?: string;
            /**
             * The zoom delta applied on each click.
             */
            delta?: number;
            /**
             * Target.
             */
            target?: Element;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ZoomSliderOptions {
            /**
             * CSS class name.
             */
            className?: string;
            /**
             * Animation duration in milliseconds. Default is `200`.
             */
            duration?: number;
            /**
             * Maximum resolution.
             */
            maxResolution?: number;
            /**
             * Minimum resolution.
             */
            minResolution?: number;
            /**
             * Function called when the control should be re-rendered. This is called
             * in a requestAnimationFrame callback.
             */
            render?: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ZoomToExtentOptions {
            /**
             * Class name. Default is `ol-zoom-extent`.
             */
            className?: string;
            /**
             * Target.
             */
            target?: Element;
            /**
             * Text label to use for the button. Default is `E`.
             * Instead of text, also a Node (e.g. a `span` element) can be used.
             */
            label?: string|Node;
            /**
             * Text label to use for the button tip. Default is `Zoom to extent`
             */
            tipLabel?: string;
            /**
             * The extent to zoom to. If undefined the validity extent of the view
             * projection is used.
             */
            extent?: ol.Extent;
        }
    }
    module format {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ReadOptions {
            /**
             * Projection of the data we are reading. If not provided, the projection will
             * be derived from the data (where possible) or the `defaultDataProjection` of
             * the format is assigned (where set). If the projection can not be derived from
             * the data and if no `defaultDataProjection` is set for a format, the features
             * will not be reprojected.
             */
            dataProjection?: ol.proj.ProjectionLike;
            /**
             * Projection of the feature geometries created by the format reader. If not
             * provided, features will be returned in the `dataProjection`.
             */
            featureProjection?: ol.proj.ProjectionLike;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WriteOptions {
            /**
             * Projection of the data we are writing. If not provided, the
             * `defaultDataProjection` of the format is assigned (where set). If no
             * `defaultDataProjection` is set for a format, the features will be returned
             * in the `featureProjection`.
             */
            dataProjection?: ol.proj.ProjectionLike;
            /**
             * Projection of the feature geometries that will be serialized by the format
             * writer.
             */
            featureProjection?: ol.proj.ProjectionLike;
            /**
             * When writing geometries, follow the right-hand rule for linear ring
             * orientation.  This means that polygons will have counter-clockwise exterior
             * rings and clockwise interior rings.  By default, coordinates are serialized
             * as they are provided at construction.  If `true`, the right-hand rule will
             * be applied.  If `false`, the left-hand rule will be applied (clockwise for
             * exterior and counter-clockwise for interior rings).  Note that not all
             * formats support this.  The GeoJSON format does use this property when writing
             * geometries.
             */
            rightHanded?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface GeoJSONOptions {
            /**
             * Default data projection.
             */
            defaultDataProjection?: ol.proj.ProjectionLike;
            /**
             * Geometry name to use when creating features.
             */
            geometryName?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface EsriJSONOptions {
            /**
             * Geometry name to use when creating features.
             */
            geometryName?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface MVTOptions {
            /**
             * Class for features returned by {@link ol.format.MVT#readFeatures}. Set to
             * {@link ol.Feature} to get full editing and geometry support at the cost of
             * decreased rendering performance. The default is {@link ol.render.Feature},
             * which is optimized for rendering and hit detection.
             */
            featureClass?: Function|Function;
            /**
             * Geometry name to use when creating features. Default is 'geometry'.
             */
            geometryName?: string;
            /**
             * Name of the feature attribute that holds the layer name. Default is 'layer'.
             */
            layerName?: string;
            /**
             * Layers to read features from. If not provided, features will be read from all
             * layers.
             */
            layers?: string[];
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface PolylineOptions {
            /**
             * The factor by which the coordinates values will be scaled.
             * Default is `1e5`.
             */
            factor?: number;
            /**
             * Layout of the feature geometries created by the format reader.
             * Default is `ol.geom.GeometryLayout.XY`.
             */
            geometryLayout?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TopoJSONOptions {
            /**
             * Default data projection.
             */
            defaultDataProjection?: ol.proj.ProjectionLike;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface IGCOptions {
            /**
             * Altitude mode. Possible values are `barometric`, `gps`, and `none`. Default
             * is `none`.
             */
            altitudeMode?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface KMLOptions {
            /**
             * Extract styles from the KML. Default is `true`.
             */
            extractStyles?: boolean;
            /**
             * Show names as labels for placemarks which contain points. Default is `true`.
             */
            showPointNames?: boolean;
            /**
             * Default style. The default default style is the same as Google Earth.
             */
            defaultStyle?: ol.style.Style[];
            /**
             * Write styles into KML. Default is `true`.
             */
            writeStyles?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface GMLOptions {
            /**
             * Feature namespace. If not defined will be derived from GML. If multiple
             * feature types have been configured which come from different feature
             * namespaces, this will be an object with the keys being the prefixes used
             * in the entries of featureType array. The values of the object will be the
             * feature namespaces themselves. So for instance there might be a featureType
             * item `topp:states` in the `featureType` array and then there will be a key
             * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
             */
            featureNS?: { [key: string]: string; }|string;
            /**
             * Feature type(s) to parse. If multiple feature types need to be configured
             * which come from different feature namespaces, `featureNS` will be an object
             * with the keys being the prefixes used in the entries of featureType array.
             * The values of the object will be the feature namespaces themselves.
             * So for instance there might be a featureType item `topp:states` and then
             * there will be a key named `topp` in the featureNS object with value
             * `http://www.openplans.org/topp`.
             */
            featureType?: string[]|string;
            /**
             * srsName to use when writing geometries.
             */
            srsName: string;
            /**
             * Write gml:Surface instead of gml:Polygon elements. This also affects the
             * elements in multi-part geometries. Default is `false`.
             */
            surface?: boolean;
            /**
             * Write gml:Curve instead of gml:LineString elements. This also affects the
             * elements in multi-part geometries. Default is `false`.
             */
            curve?: boolean;
            /**
             * Write gml:MultiCurve instead of gml:MultiLineString. Since the latter is
             * deprecated in GML 3, the default is `true`.
             */
            multiCurve?: boolean;
            /**
             * Write gml:multiSurface instead of gml:MultiPolygon. Since the latter is
             * deprecated in GML 3, the default is `true`.
             */
            multiSurface?: boolean;
            /**
             * Optional schemaLocation to use when writing out the GML, this will override
             * the default provided.
             */
            schemaLocation?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface GPXOptions {
            /**
             * Callback function to process `extensions` nodes.
             * To prevent memory leaks, this callback function must
             * not store any references to the node. Note that the `extensions`
             * node is not allowed in GPX 1.0. Moreover, only `extensions`
             * nodes from `wpt`, `rte` and `trk` can be processed, as those are
             * directly mapped to a feature.
             */
            readExtensions?: Function;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WFSOptions {
            /**
             * The namespace URI used for features.
             */
            featureNS?: { [key: string]: string; }|string;
            /**
             * The feature type to parse. Only used for read operations.
             */
            featureType?: string[]|string;
            /**
             * The GML format to use to parse the response. Default is `ol.format.GML3`.
             */
            gmlFormat?: ol.format.GMLBase;
            /**
             * Optional schemaLocation to use for serialization, this will override the
             * default.
             */
            schemaLocation?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WFSWriteGetFeatureOptions {
            /**
             * The namespace URI used for features.
             */
            featureNS: string;
            /**
             * The prefix for the feature namespace.
             */
            featurePrefix: string;
            /**
             * The feature type names.
             */
            featureTypes: string[];
            /**
             * SRS name. No srsName attribute will be set on geometries when this is not
             * provided.
             */
            srsName?: string;
            /**
             * Handle.
             */
            handle?: string;
            /**
             * Output format.
             */
            outputFormat?: string;
            /**
             * Maximum number of features to fetch.
             */
            maxFeatures?: number;
            /**
             * Geometry name to use in a BBOX filter.
             */
            geometryName?: string;
            /**
             * Optional list of property names to serialize.
             */
            propertyNames?: string[];
            /**
             * Start index to use for WFS paging. This is a WFS 2.0 feature backported to
             * WFS 1.1.0 by some Web Feature Services.
             */
            startIndex?: number;
            /**
             * Number of features to retrieve when paging. This is a WFS 2.0 feature
             * backported to WFS 1.1.0 by some Web Feature Services. Please note that some
             * Web Feature Services have repurposed `maxfeatures` instead.
             */
            count?: number;
            /**
             * Extent to use for the BBOX filter.
             */
            bbox?: ol.Extent;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WFSWriteTransactionOptions {
            /**
             * The namespace URI used for features.
             */
            featureNS: string;
            /**
             * The prefix for the feature namespace.
             */
            featurePrefix: string;
            /**
             * The feature type name.
             */
            featureType: string;
            /**
             * SRS name. No srsName attribute will be set on geometries when this is not
             * provided.
             */
            srsName?: string;
            /**
             * Handle.
             */
            handle?: string;
            /**
             * Native elements. Currently not supported.
             */
            nativeElements: any[];
            /**
             * GML options for the WFS transaction writer.
             */
            gmlOptions?: olx.format.GMLOptions;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WKTOptions {
            /**
             * Whether to split GeometryCollections into
             * multiple features on reading. Default is `false`.
             */
            splitCollection?: boolean;
        }
    }
    module layer {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface BaseOptions {
            /**
             * Opacity (0, 1). Default is `1`.
             */
            opacity?: number;
            /**
             * Visibility. Default is `true`.
             */
            visible?: boolean;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The z-index for layer rendering.  At rendering time, the layers will be
             * ordered, first by Z-index and then by position. The default Z-index is 0.
             */
            zIndex?: number;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface LayerOptions {
            /**
             * Opacity (0, 1). Default is `1`.
             */
            opacity?: number;
            /**
             * Source for this layer.  If not provided to the constructor, the source can
             * be set by calling {@link ol.layer.Layer#setSource layer.setSource(source)}
             * after construction.
             */
            source?: ol.source.Source;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The z-index for layer rendering.  At rendering time, the layers will be
             * ordered, first by Z-index and then by position. The default Z-index is 0.
             */
            zIndex?: number;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface GroupOptions {
            /**
             * Opacity (0, 1). Default is `1`.
             */
            opacity?: number;
            /**
             * Visibility. Default is `true`.
             */
            visible?: boolean;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The z-index for layer rendering.  At rendering time, the layers will be
             * ordered, first by Z-index and then by position. The default Z-index is 0.
             */
            zIndex?: number;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
            /**
             * Child layers.
             */
            layers?: ol.layer.Base[]|ol.Collection<ol.layer.Base>;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface HeatmapOptions {
            /**
             * The color gradient of the heatmap, specified as an array of CSS color
             * strings. Default is `['#00f', '#0ff', '#0f0', '#ff0', '#f00']`.
             */
            gradient?: string[];
            /**
             * Radius size in pixels. Default is `8`.
             */
            radius?: number;
            /**
             * Blur size in pixels. Default is `15`.
             */
            blur?: number;
            /**
             * Shadow size in pixels. Default is `250`.
             */
            shadow?: number;
            /**
             * The feature attribute to use for the weight or a function that returns a
             * weight from a feature. Weight values should range from 0 to 1 (and values
             * outside will be clamped to that range). Default is `weight`.
             */
            weight: string|Function;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
            /**
             * Opacity. 0-1. Default is `1`.
             */
            opacity?: number;
            /**
             * Source.
             */
            source: ol.source.Vector;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageOptions {
            /**
             * Opacity (0, 1). Default is `1`.
             */
            opacity?: number;
            /**
             * Source for this layer.
             */
            source: ol.source.Image;
            /**
             * Sets the layer as overlay on a map. The map will not manage this layer in its
             * layers collection, and the layer will be rendered on top. This is useful for
             * temporary layers. The standard way to add a layer to a map and have it
             * managed by the map is to use {@link ol.Map#addLayer}.
             */
            map?: ol.Map;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileOptions {
            /**
             * Opacity (0, 1). Default is `1`.
             */
            opacity?: number;
            /**
             * Preload. Load low-resolution tiles up to `preload` levels. By default
             * `preload` is `0`, which means no preloading.
             */
            preload?: number;
            /**
             * Source for this layer.
             */
            source: ol.source.Tile;
            /**
             * Sets the layer as overlay on a map. The map will not manage this layer in its
             * layers collection, and the layer will be rendered on top. This is useful for
             * temporary layers. The standard way to add a layer to a map and have it
             * managed by the map is to use {@link ol.Map#addLayer}.
             */
            map?: ol.Map;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
            /**
             * Use interim tiles on error. Default is `true`.
             */
            useInterimTilesOnError?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface VectorOptions {
            /**
             * Render order. Function to be used when sorting features before rendering. By
             * default features are drawn in the order that they are created. Use `null` to
             * avoid the sort, but get an undefined draw order.
             */
            renderOrder: Function;
            /**
             * Sets the layer as overlay on a map. The map will not manage this layer in its
             * layers collection, and the layer will be rendered on top. This is useful for
             * temporary layers. The standard way to add a layer to a map and have it
             * managed by the map is to use {@link ol.Map#addLayer}.
             */
            map?: ol.Map;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
            /**
             * Opacity. 0-1. Default is `1`.
             */
            opacity?: number;
            /**
             * The buffer around the viewport extent used by the renderer when getting
             * features from the vector source for the rendering or hit-detection.
             * Recommended value: the size of the largest symbol, line width or label.
             * Default is 100 pixels.
             */
            renderBuffer?: number;
            /**
             * Source.
             */
            source: ol.source.Vector;
            /**
             * Layer style. See {@link ol.style} for default style which will be used if
             * this is not defined.
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * When set to `true`, feature batches will be recreated during animations.
             * This means that no vectors will be shown clipped, but the setting will have a
             * performance impact for large amounts of vector data. When set to `false`,
             * batches will be recreated when no animation is active.  Default is `false`.
             */
            updateWhileAnimating?: boolean;
            /**
             * When set to `true`, feature batches will be recreated during interactions.
             * See also `updateWhileAnimating`. Default is `false`.
             */
            updateWhileInteracting?: boolean;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface VectorTileOptions {
            /**
             * The buffer around the tile extent used by the renderer when getting features
             * from the vector tile for the rendering or hit-detection.
             * Recommended value: Vector tiles are usually generated with a buffer, so this
             * value should match the largest possible buffer of the used tiles. It should
             * be at least the size of the largest point symbol or line width.
             * Default is 100 pixels.
             */
            renderBuffer?: number;
            /**
             * Render order. Function to be used when sorting features before rendering. By
             * default features are drawn in the order that they are created.
             */
            renderOrder: Function;
            /**
             * Sets the layer as overlay on a map. The map will not manage this layer in its
             * layers collection, and the layer will be rendered on top. This is useful for
             * temporary layers. The standard way to add a layer to a map and have it
             * managed by the map is to use {@link ol.Map#addLayer}.
             */
            map?: ol.Map;
            /**
             * The bounding extent for layer rendering.  The layer will not be rendered
             * outside of this extent.
             */
            extent?: ol.Extent;
            /**
             * The minimum resolution (inclusive) at which this layer will be visible.
             */
            minResolution?: number;
            /**
             * The maximum resolution (exclusive) below which this layer will be visible.
             */
            maxResolution?: number;
            /**
             * Opacity. 0-1. Default is `1`.
             */
            opacity?: number;
            /**
             * Source.
             */
            source?: ol.source.VectorTile;
            /**
             * Layer style. See {@link ol.style} for default style which will be used if
             * this is not defined.
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
            /**
             * When set to `true`, feature batches will be recreated during animations.
             * This means that no vectors will be shown clipped, but the setting will have a
             * performance impact for large amounts of vector data. When set to `false`,
             * batches will be recreated when no animation is active.  Default is `false`.
             */
            updateWhileAnimating?: boolean;
            /**
             * When set to `true`, feature batches will be recreated during interactions.
             * See also `updateWhileAnimating`. Default is `false`.
             */
            updateWhileInteracting?: boolean;
            /**
             * Visibility. Default is `true` (visible).
             */
            visible?: boolean;
        }
    }
    module render {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ToContextOptions {
            /**
             * Desired size of the canvas in css pixels. When provided, both canvas and css
             * size will be set according to the `pixelRatio`. If not provided, the current
             * canvas and css sizes will not be altered.
             */
            size?: ol.Size;
            /**
             * Pixel ratio (canvas pixel to css pixel ratio) for the canvas. Default
             * is the detected device pixel ratio.
             */
            pixelRatio?: ol.Size;
        }
    }
    module source {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface BingMapsOptions {
            /**
             * Culture code. Default is `en-us`.
             */
            culture?: string;
            /**
             * Bing Maps API key. Get yours at http://bingmapsportal.com/.
             */
            key: string;
            /**
             * Type of imagery.
             */
            imagerySet: string;
            /**
             * Max zoom. Default is what's advertized by the BingMaps service (`21`
             * currently).
             */
            maxZoom?: number;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ClusterOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * Minimum distance in pixels between clusters. Default is `20`.
             */
            distance?: number;
            /**
             * Extent.
             */
            extent?: ol.Extent;
            /**
             * Format.
             */
            format?: ol.format.Feature;
            /**
             * Logo.
             */
            logo?: string;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Source.
             */
            source: ol.source.Vector;
            /**
             * WrapX. Default is true
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileUTFGridOptions {
            /**
             * If `true` the TileUTFGrid source loads the tiles based on their "visibility".
             * This improves the speed of response, but increases traffic.
             * Note that if set to `false`, you need to pass `true` as `opt_request`
             * to the `forDataAtCoordinateAndResolution` method otherwise no data
             * will ever be loaded.
             * Default is `true`.
             */
            preemptive?: boolean;
            /**
             * TODO: This property has no documentation. Contact the library author if this property should be documented
             */
            url: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileImageOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Whether the layer is opaque.
             */
            opaque?: boolean;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Source state.
             */
            state?: string|string;
            /**
             * Class used to instantiate image tiles. Default is {@link ol.ImageTile}.
             */
            tileClass?: Function;
            /**
             * Tile grid.
             */
            tileGrid?: ol.tilegrid.TileGrid;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * The pixel ratio used by the tile service. For example, if the tile
             * service advertizes 256px by 256px tiles but actually sends 512px
             * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
             * should be set to `2`. Default is `1`.
             */
            tilePixelRatio?: number;
            /**
             * Optional function to get tile URL given a tile coordinate and the projection.
             */
            tileUrlFunction?: ol.TileUrlFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
             * used instead of defining each one separately in the `urls` option.
             */
            url?: string;
            /**
             * An array of URL templates.
             */
            urls?: string[];
            /**
             * Whether to wrap the world horizontally. The default, `undefined`, is to
             * request out-of-bounds tiles from the server. When set to `false`, only one
             * world will be rendered. When set to `true`, tiles will be requested for one
             * world only, but they will be wrapped horizontally to render multiple worlds.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface VectorTileOptions {
            /**
             * /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * Feature format for tiles. Used and required by the default
             * `tileLoadFunction`.
             */
            format?: ol.format.Feature;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Whether the layer is opaque.
             */
            opaque?: boolean;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Source state.
             */
            state?: string|string;
            /**
             * Class used to instantiate image tiles. Default is {@link ol.VectorTile}.
             */
            tileClass?: Function;
            /**
             * Tile grid.
             */
            tileGrid?: ol.tilegrid.TileGrid;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * The pixel ratio used by the tile service. For example, if the tile
             * service advertizes 256px by 256px tiles but actually sends 512px
             * by 512px tiles (for retina/hidpi devices) then `tilePixelRatio`
             * should be set to `2`. Default is `1`.
             */
            tilePixelRatio?: number;
            /**
             * Optional function to get tile URL given a tile coordinate and the projection.
             */
            tileUrlFunction?: ol.TileUrlFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
             * used instead of defining each one separately in the `urls` option.
             */
            url?: string;
            /**
             * An array of URL templates.
             */
            urls?: string[];
            /**
             * Whether to wrap the world horizontally. When set to `false`, only one world
             * will be rendered. When set to `true`, tiles will be wrapped horizontally to
             * render multiple worlds. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageMapGuideOptions {
            /**
             * The mapagent url.
             */
            url?: string;
            /**
             * The display resolution. Default is `96`.
             */
            displayDpi?: number;
            /**
             * The meters-per-unit value. Default is `1`.
             */
            metersPerUnit?: number;
            /**
             * Use the `ol.Map#pixelRatio` value when requesting the image from the remote
             * server. Default is `true`.
             */
            hidpi?: boolean;
            /**
             * If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.
             */
            useOverlay?: boolean;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Ratio. `1` means image requests are the size of the map viewport, `2` means
             * twice the width and height of the map viewport, and so on. Must be `1` or
             * higher. Default is `1`.
             */
            ratio?: number;
            /**
             * Resolutions. If specified, requests will be made for these resolutions only.
             */
            resolutions?: number[];
            /**
             * Optional function to load an image given a URL.
             */
            imageLoadFunction?: ol.ImageLoadFunctionType;
            /**
             * Additional parameters.
             */
            params?: any;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface MapQuestOptions {
            /**
             * Layer. Possible values are `osm`, `sat`, and `hyb`.
             */
            layer: string;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             */
            url?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileDebugOptions {
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Tile grid.
             */
            tileGrid?: ol.tilegrid.TileGrid;
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface OSMOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             * 
             * Default is `anonymous`.
             */
            crossOrigin?: string;
            /**
             * Max zoom. Default is `19`.
             */
            maxZoom?: number;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             * Default is `//{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png`.
             */
            url?: string;
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageCanvasOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * Canvas function. The function returning the canvas element used by the source
             * as an image. The arguments passed to the function are: `{ol.Extent}` the
             * image extent, `{number}` the image resolution, `{number}` the device pixel
             * ratio, `{ol.Size}` the image size, and `{ol.proj.Projection}` the image
             * projection. The canvas returned by this function is cached by the source. If
             * the value returned by the function is later changed then
             * `dispatchChangeEvent` should be called on the source for the source to
             * invalidate the current cached image.
             */
            canvasFunction: ol.CanvasFunctionType;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Ratio. 1 means canvases are the size of the map viewport, 2 means twice the
             * width and height of the map viewport, and so on. Must be `1` or higher.
             * Default is `1.5`.
             */
            ratio?: number;
            /**
             * Resolutions. If specified, new canvases will be created for these resolutions
             * only.
             */
            resolutions?: number[];
            /**
             * Source state.
             */
            state?: string|string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageVectorOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Ratio. 1 means canvases are the size of the map viewport, 2 means twice the
             * width and height of the map viewport, and so on. Must be `1` or higher.
             * Default is `1.5`.
             */
            ratio?: number;
            /**
             * Resolutions. If specified, new canvases will be created for these resolutions
             * only.
             */
            resolutions?: number[];
            /**
             * The vector source from which the vector features drawn in canvas elements are
             * read.
             */
            source: ol.source.Vector;
            /**
             * Style to use when rendering features to the canvas.
             */
            style?: ol.style.Style|ol.style.Style[]|ol.style.StyleFunction;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface RasterOptions {
            /**
             * Input sources.
             */
            sources: ol.source.Source[];
            /**
             * Raster operation.  The operation will be called with data from input sources
             * and the output will be assigned to the raster source.
             */
            operation?: ol.raster.Operation;
            /**
             * Functions that will be made available to operations run in a worker.
             */
            lib?: any;
            /**
             * By default, operations will be run in a single worker thread.  To avoid using
             * workers altogether, set `threads: 0`.  For pixel operations, operations can
             * be run in multiple worker threads.  Note that there is additional overhead in
             * transferring data to multiple workers, and that depending on the user's
             * system, it may not be possible to parallelize the work.
             */
            threads?: number;
            /**
             * Operation type.  Supported values are `'pixel'` and `'image'`.  By default,
             * `'pixel'` operations are assumed, and operations will be called with an
             * array of pixels from input sources.  If set to `'image'`, operations will
             * be called with an array of ImageData objects from input sources.
             */
            operationType?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageWMSOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Use the `ol.Map#pixelRatio` value when requesting the image from the remote
             * server. Default is `true`.
             */
            hidpi?: boolean;
            /**
             * The type of the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only
             * needed if `hidpi` is `true`. Default is `undefined`.
             */
            serverType?: string|string;
            /**
             * Optional function to load an image given a URL.
             */
            imageLoadFunction?: ol.ImageLoadFunctionType;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * WMS request parameters. At least a `LAYERS` param is required. `STYLES` is
             * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
             * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
             */
            params: { [key: string]: any; };
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Ratio. `1` means image requests are the size of the map viewport, `2` means
             * twice the width and height of the map viewport, and so on. Must be `1` or
             * higher. Default is `1.5`.
             */
            ratio?: number;
            /**
             * Resolutions. If specified, requests will be made for these resolutions only.
             */
            resolutions?: number[];
            /**
             * WMS service URL.
             */
            url?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface StamenOptions {
            /**
             * Layer.
             */
            layer: string;
            /**
             * Minimum zoom.
             */
            minZoom?: number;
            /**
             * Maximum zoom.
             */
            maxZoom?: number;
            /**
             * Whether the layer is opaque.
             */
            opaque?: boolean;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             */
            url?: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ImageStaticOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Extent of the image in map coordinates.  This is the [left, bottom, right,
             * top] map coordinates of your image.
             */
            imageExtent: ol.Extent;
            /**
             * Optional function to load an image given a URL.
             */
            imageLoadFunction?: ol.ImageLoadFunctionType;
            /**
             * Optional logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Size of the image in pixels. Usually the image size is auto-detected, so this
             * only needs to be set if auto-detection fails for some reason.
             */
            imageSize?: ol.Size;
            /**
             * Image URL.
             */
            url: string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileArcGISRestOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * ArcGIS Rest parameters. This field is optional. Service defaults will be
             * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by
             * default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`,
             * and `IMAGESR` will be set dynamically. Set `LAYERS` to
             * override the default service layer visibility. See
             * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}
             * for further reference.
             */
            params?: { [key: string]: any; };
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Tile grid. Base this on the resolutions, tilesize and extent supported by the
             * server.
             * If this is not defined, a default grid will be used: if there is a projection
             * extent, the grid will be based on that; if not, a grid based on a global
             * extent with origin at 0,0 will be used.
             */
            tileGrid?: ol.tilegrid.TileGrid;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * ArcGIS Rest service URL for a Map Service or Image Service. The
             * url should include /MapServer or /ImageServer.
             */
            url?: string;
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
            /**
             * ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS Service supports multiple
             * urls for export requests.
             */
            urls?: string[];
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileJSONOptions {
            /**
             * Optional attributions for the source.  If provided, these will be used
             * instead of any attribution data advertised by the server.  If not provided,
             * any attributions advertised by the server will be used.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Use JSONP with callback to load the TileJSON. Useful when the server
             * does not support CORS. Default is `false`.
             */
            jsonp?: boolean;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * URL to the TileJSON file.
             */
            url: string;
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileWMSOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * WMS request parameters. At least a `LAYERS` param is required. `STYLES` is
             * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
             * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
             */
            params: { [key: string]: any; };
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * The size in pixels of the gutter around image tiles to ignore. By setting
             * this property to a non-zero value, images will be requested that are wider
             * and taller than the tile size by a value of `2 x gutter`. Defaults to zero.
             * Using a non-zero value allows artifacts of rendering at tile edges to be
             * ignored. If you control the WMS service it is recommended to address
             * "artifacts at tile edges" issues by properly configuring the WMS service. For
             * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
             * this. See http://mapserver.org/output/tile_mode.html.
             */
            gutter?: number;
            /**
             * Use the `ol.Map#pixelRatio` value when requesting the image from the remote
             * server. Default is `true`.
             */
            hidpi?: boolean;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Tile grid. Base this on the resolutions, tilesize and extent supported by the
             * server.
             * If this is not defined, a default grid will be used: if there is a projection
             * extent, the grid will be based on that; if not, a grid based on a global
             * extent with origin at 0,0 will be used.
             */
            tileGrid?: ol.tilegrid.TileGrid;
            /**
             * Maximum zoom.
             */
            maxZoom?: number;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * The type of the remote WMS server. Currently only used when `hidpi` is
             * `true`. Default is `undefined`.
             */
            serverType?: string|string;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * WMS service URL.
             */
            url?: string;
            /**
             * WMS service urls. Use this instead of `url` when the WMS supports multiple
             * urls for GetMap requests.
             */
            urls?: string[];
            /**
             * Whether to wrap the world horizontally. When set to `false`, only one world
             * will be rendered. When `true`, tiles will be requested for one world only,
             * but they will be wrapped horizontally to render multiple worlds. The default
             * is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface VectorOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * Features. If provided as {@link ol.Collection}, the features in the source
             * and the collection will stay in sync.
             */
            features?: ol.Feature[]|ol.Collection<ol.Feature>;
            /**
             * The feature format used by the XHR feature loader when `url` is set.
             * Required if `url` is set, otherwise ignored. Default is `undefined`.
             */
            format?: ol.format.Feature;
            /**
             * The loader function used to load features, from a remote source for example.
             * Note that the source will create and use an XHR feature loader when `url` is
             * set.
             */
            loader?: ol.FeatureLoader;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * The loading strategy to use. By default an {@link ol.loadingstrategy.all}
             * strategy is used, a one-off strategy which loads all features at once.
             */
            strategy?: ol.LoadingStrategy;
            /**
             * Setting this option instructs the source to use an XHR loader (see
             * {@link ol.featureloader.xhr}). Use a `string` and an
             * {@link ol.loadingstrategy.all} for a one-off download of all features from
             * the given URL. Use a {@link ol.FeatureUrlFunction} to generate the url with
             * other loading strategies.
             * Requires `format` to be set as well.
             * When default XHR feature loader is provided, the features will
             * be transformed from the data projection to the view projection
             * during parsing. If your remote data source does not advertise its projection
             * properly, this transformation will be incorrect. For some formats, the
             * default projection (usually EPSG:4326) can be overridden by setting the
             * defaultDataProjection constructor option on the format.
             */
            url?: string|ol.FeatureUrlFunction;
            /**
             * By default, an RTree is used as spatial index. When features are removed and
             * added frequently, and the total number of features is low, setting this to
             * `false` may improve performance.
             * 
             * Note that
             * {@link ol.source.Vector#getFeaturesInExtent},
             * {@link ol.source.Vector#getClosestFeatureToCoordinate} and
             * {@link ol.source.Vector#getExtent} cannot be used when `useSpatialIndex` is
             * set to `false`, and {@link ol.source.Vector#forEachFeatureInExtent} will loop
             * through all features.
             * 
             * When set to `false`, the features will be maintained in an
             * {@link ol.Collection}, which can be retrieved through
             * {@link ol.source.Vector#getFeaturesCollection}.
             * 
             * The default is `true`.
             */
            useSpatialIndex?: boolean;
            /**
             * Wrap the world horizontally. Default is `true`. For vector editing across the
             * -180° and 180° meridians to work properly, this should be set to `false`. The
             * resulting geometry coordinates will then exceed the world bounds.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WMTSOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Tile grid.
             */
            tileGrid: ol.tilegrid.WMTS;
            /**
             * Projection.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Request encoding. Default is `KVP`.
             */
            requestEncoding?: string|string;
            /**
             * Layer name as advertised in the WMTS capabilities.
             */
            layer: string;
            /**
             * Style name as advertised in the WMTS capabilities.
             */
            style: string;
            /**
             * Class used to instantiate image tiles. Default is {@link ol.ImageTile}.
             */
            tileClass?: Function;
            /**
             * The pixel ratio used by the tile service. For example, if the tile
             * service advertizes 256px by 256px tiles but actually sends 512px
             * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
             * should be set to `2`. Default is `1`.
             */
            tilePixelRatio?: number;
            /**
             * WMTS version. Default is `1.0.0`.
             */
            version?: string;
            /**
             * Image format. Default is `image/jpeg`.
             */
            format?: string;
            /**
             * Matrix set.
             */
            matrixSet: string;
            /**
             * Additional "dimensions" for tile requests.  This is an object with properties
             * named like the advertised WMTS dimensions.
             */
            dimensions?: any;
            /**
             * A URL for the service.  For the RESTful request encoding, this is a URL
             * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
             * for example `subdomain{a-f}.domain.com`, may be used instead of defining
             * each one separately in the `urls` option.
             */
            url?: string;
            /**
             * Maximum zoom.
             */
            maxZoom?: number;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * An array of URLs.  Requests will be distributed among the URLs in this array.
             */
            urls?: string[];
            /**
             * Whether to wrap the world horizontally. Default is `false`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface XYZOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Projection. Default is `EPSG:3857`.
             */
            projection?: ol.proj.ProjectionLike;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Optional max zoom level. Default is `18`.
             */
            maxZoom?: number;
            /**
             * Unsupported (TODO: remove this).
             */
            minZoom?: number;
            /**
             * Tile grid.
             */
            tileGrid: ol.tilegrid.TileGrid;
            /**
             * Optional function to load a tile given a URL.
             */
            tileLoadFunction?: ol.TileLoadFunctionType;
            /**
             * The pixel ratio used by the tile service. For example, if the tile
             * service advertizes 256px by 256px tiles but actually sends 512px
             * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
             * should be set to `2`. Default is `1`.
             */
            tilePixelRatio?: number;
            /**
             * The tile size used by the tile service. Default is `[256, 256]` pixels.
             */
            tileSize?: number|ol.Size;
            /**
             * Optional function to get tile URL given a tile coordinate and the projection.
             * Required if url or urls are not provided.
             */
            tileUrlFunction?: ol.TileUrlFunctionType;
            /**
             * URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
             * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
             * used instead of defining each one separately in the `urls` option.
             */
            url?: string;
            /**
             * An array of URL templates.
             */
            urls?: string[];
            /**
             * Whether to wrap the world horizontally. Default is `true`.
             */
            wrapX?: boolean;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface ZoomifyOptions {
            /**
             * Attributions.
             */
            attributions?: ol.Attribution[];
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Logo.
             */
            logo?: string|olx.LogoOptions;
            /**
             * Maximum allowed reprojection error (in pixels). Default is `0.5`.
             * Higher values can increase reprojection performance, but decrease precision.
             */
            reprojectionErrorThreshold?: number;
            /**
             * Prefix of URL template.
             */
            url: string;
            /**
             * Tier size calculation method: `default` or `truncated`.
             */
            tierSizeCalculation?: string;
            /**
             * Size of the image.
             */
            size: ol.Size;
        }
    }
    module style {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface CircleOptions {
            /**
             * Fill style.
             */
            fill?: ol.style.Fill;
            /**
             * Circle radius.
             */
            radius: number;
            /**
             * If `true` integral numbers of pixels are used as the X and Y pixel
             * coordinate when drawing the circle in the output canvas. If `false`
             * fractional numbers may be used. Using `true` allows for "sharp"
             * rendering (no blur), while using `false` allows for "accurate"
             * rendering. Note that accuracy is important if the circle's
             * position is animated. Without it, the circle may jitter noticeably.
             * Default value is `true`.
             */
            snapToPixel?: boolean;
            /**
             * Stroke style.
             */
            stroke?: ol.style.Stroke;
            /**
             * The atlas manager to use for this circle. When using WebGL it is
             * recommended to use an atlas manager to avoid texture switching.
             * If an atlas manager is given, the circle is added to an atlas.
             * By default no atlas manager is used.
             */
            atlasManager?: ol.style.AtlasManager;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface FillOptions {
            /**
             * Color. See {@link ol.color} for possible formats. Default null; if null,
             * the Canvas/renderer default black will be used.
             */
            color?: ol.Color|string;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface IconOptions {
            /**
             * Anchor. Default value is `[0.5, 0.5]` (icon center).
             */
            anchor?: number[];
            /**
             * Origin of the anchor: `bottom-left`, `bottom-right`, `top-left` or
             * `top-right`. Default is `top-left`.
             */
            anchorOrigin?: string;
            /**
             * Units in which the anchor x value is specified. A value of `'fraction'`
             * indicates the x value is a fraction of the icon. A value of `'pixels'`
             * indicates the x value in pixels. Default is `'fraction'`.
             */
            anchorXUnits?: string;
            /**
             * Units in which the anchor y value is specified. A value of `'fraction'`
             * indicates the y value is a fraction of the icon. A value of `'pixels'`
             * indicates the y value in pixels. Default is `'fraction'`.
             */
            anchorYUnits?: string;
            /**
             * Color to tint the icon. If not specified, the icon will be left as is.
             */
            color?: ol.Color|string;
            /**
             * The `crossOrigin` attribute for loaded images.  Note that you must provide a
             * `crossOrigin` value if you are using the WebGL renderer or if you want to
             * access pixel data with the Canvas renderer.  See
             * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image}
             * for more detail.
             */
            crossOrigin?: string;
            /**
             * Image object for the icon. If the `src` option is not provided then the
             * provided image must already be loaded. And in that case, it is required
             * to provide the size of the image, with the `imgSize` option.
             */
            img?: HTMLImageElement|HTMLCanvasElement;
            /**
             * Offset, which, together with the size and the offset origin,
             * define the sub-rectangle to use from the original icon image. Default value
             * is `[0, 0]`.
             */
            offset?: number[];
            /**
             * Origin of the offset: `bottom-left`, `bottom-right`, `top-left` or
             * `top-right`. Default is `top-left`.
             */
            offsetOrigin?: string;
            /**
             * Opacity of the icon. Default is `1`.
             */
            opacity?: number;
            /**
             * Scale.
             */
            scale?: number;
            /**
             * If `true` integral numbers of pixels are used as the X and Y pixel
             * coordinate when drawing the icon in the output canvas. If `false`
             * fractional numbers may be used. Using `true` allows for "sharp"
             * rendering (no blur), while using `false` allows for "accurate"
             * rendering. Note that accuracy is important if the icon's position
             * is animated. Without it, the icon may jitter noticeably. Default
             * value is `true`.
             */
            snapToPixel?: boolean;
            /**
             * Whether to rotate the icon with the view. Default is `false`.
             */
            rotateWithView?: boolean;
            /**
             * Rotation in radians (positive rotation clockwise). Default is `0`.
             */
            rotation?: number;
            /**
             * Icon size in pixel. Can be used together with `offset` to define the
             * sub-rectangle to use from the origin (sprite) icon image.
             */
            size?: ol.Size;
            /**
             * Image size in pixel. Only required if `img` is set and `src` is not.
             */
            imgSize?: ol.Size;
            /**
             * Image source URI.
             */
            src: string;
        }
        /**
         * Specify radius for regular polygons, or radius1 and radius2 for stars.
         */
        interface RegularShapeOptions {
            /**
             * Fill style.
             */
            fill?: ol.style.Fill;
            /**
             * Number of points for stars and regular polygons. In case of a polygon, the
             * number of points is the number of sides.
             */
            points: number;
            /**
             * Radius of a regular polygon.
             */
            radius?: number;
            /**
             * Inner radius of a star.
             */
            radius1?: number;
            /**
             * Outer radius of a star.
             */
            radius2?: number;
            /**
             * Shape's angle in radians. A value of 0 will have one of the shape's point
             * facing up.
             * Default value is 0.
             */
            angle?: number;
            /**
             * If `true` integral numbers of pixels are used as the X and Y pixel
             * coordinate when drawing the shape in the output canvas. If `false`
             * fractional numbers may be used. Using `true` allows for "sharp"
             * rendering (no blur), while using `false` allows for "accurate"
             * rendering. Note that accuracy is important if the shape's
             * position is animated. Without it, the shape may jitter noticeably.
             * Default value is `true`.
             */
            snapToPixel?: boolean;
            /**
             * Stroke style.
             */
            stroke?: ol.style.Stroke;
            /**
             * Rotation in radians (positive rotation clockwise). Default is `0`.
             */
            rotation?: number;
            /**
             * The atlas manager to use for this symbol. When using WebGL it is
             * recommended to use an atlas manager to avoid texture switching.
             * If an atlas manager is given, the symbol is added to an atlas.
             * By default no atlas manager is used.
             */
            atlasManager?: ol.style.AtlasManager;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface StrokeOptions {
            /**
             * Color. See {@link ol.color} for possible formats. Default null; if null,
             * the Canvas/renderer default black will be used.
             */
            color?: ol.Color|string;
            /**
             * Line cap style: `butt`, `round`, or `square`. Default is `round`.
             */
            lineCap?: string;
            /**
             * Line join style: `bevel`, `round`, or `miter`. Default is `round`.
             */
            lineJoin?: string;
            /**
             * Line dash pattern. Default is `undefined` (no dash).
             */
            lineDash?: number[];
            /**
             * Miter limit. Default is `10`.
             */
            miterLimit?: number;
            /**
             * Width.
             */
            width?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TextOptions {
            /**
             * Font style as CSS 'font' value, see:
             * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font}.
             * Default is '10px sans-serif'
             */
            font?: string;
            /**
             * Horizontal text offset in pixels. A positive will shift the text right.
             * Default is `0`.
             */
            offsetX?: number;
            /**
             * Vertical text offset in pixels. A positive will shift the text down. Default
             * is `0`.
             */
            offsetY?: number;
            /**
             * Scale.
             */
            scale?: number;
            /**
             * Rotation in radians (positive rotation clockwise). Default is `0`.
             */
            rotation?: number;
            /**
             * Text content.
             */
            text?: string;
            /**
             * Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.
             * Default is 'start'.
             */
            textAlign?: string;
            /**
             * Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',
             * 'hanging', 'ideographic'. Default is 'alphabetic'.
             */
            textBaseline?: string;
            /**
             * Fill style. If none is provided, we'll use a dark fill-style (#333).
             */
            fill?: ol.style.Fill;
            /**
             * Stroke style.
             */
            stroke?: ol.style.Stroke;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface StyleOptions {
            /**
             * Feature property or geometry or function returning a geometry to render for
             * this style.
             */
            geometry?: string|ol.geom.Geometry|ol.style.GeometryFunction;
            /**
             * Fill style.
             */
            fill?: ol.style.Fill;
            /**
             * Image style.
             */
            image?: ol.style.Image;
            /**
             * Stroke style.
             */
            stroke?: ol.style.Stroke;
            /**
             * Text style.
             */
            text?: ol.style.Text;
            /**
             * Z index.
             */
            zIndex?: number;
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface AtlasManagerOptions {
            /**
             * The size in pixels of the first atlas image. If no value is given the
             * `ol.INITIAL_ATLAS_SIZE` compile-time constant will be used.
             */
            initialSize?: number;
            /**
             * The maximum size in pixels of atlas images. If no value is given then
             * the `ol.MAX_ATLAS_SIZE` compile-time constant will be used. And if
             * `ol.MAX_ATLAS_SIZE` is set to `-1` (the default) then
             * `ol.WEBGL_MAX_TEXTURE_SIZE` will used if WebGL is supported. Otherwise
             * 2048 is used.
             */
            maxSize?: number;
            /**
             * The space in pixels between images (default: 1).
             */
            space?: number;
        }
    }
    module tilegrid {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface TileGridOptions {
            /**
             * Extent for the tile grid. No tiles outside this extent will be requested by
             * {@link ol.source.Tile} sources. When no `origin` or `origins` are
             * configured, the `origin` will be set to the top-left corner of the extent.
             */
            extent?: ol.Extent;
            /**
             * Minimum zoom. Default is 0.
             */
            minZoom?: number;
            /**
             * The tile grid origin, i.e. where the `x` and `y` axes meet (`[z, 0, 0]`).
             * Tile coordinates increase left to right and upwards. If not specified,
             * `extent` or `origins` must be provided.
             */
            origin?: ol.Coordinate;
            /**
             * Tile grid origins, i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for
             * each zoom level. If given, the array length should match the length of the
             * `resolutions` array, i.e. each resolution can have a different origin. Tile
             * coordinates increase left to right and upwards. If not specified, `extent`
             * or `origin` must be provided.
             */
            origins?: ol.Coordinate[];
            /**
             * Resolutions. The array index of each resolution needs to match the zoom
             * level. This means that even if a `minZoom` is configured, the resolutions
             * array will have a length of `maxZoom + 1`.
             */
            resolutions: number[];
            /**
             * Tile size. Default is `[256, 256]`.
             */
            tileSize?: number|ol.Size;
            /**
             * Tile sizes. If given, the array length should match the length of the
             * `resolutions` array, i.e. each resolution can have a different tile size.
             */
            tileSizes?: (number|ol.Size)[];
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface WMTSOptions {
            /**
             * Extent for the tile grid. No tiles outside this extent will be requested by
             * {@link ol.source.Tile} sources. When no `origin` or `origins` are
             * configured, the `origin` will be set to the top-left corner of the extent.
             */
            extent?: ol.Extent;
            /**
             * The tile grid origin, i.e. where the `x` and `y` axes meet (`[z, 0, 0]`).
             * Tile coordinates increase left to right and upwards. If not specified,
             * `extent` or `origins` must be provided.
             */
            origin?: ol.Coordinate;
            /**
             * Tile grid origins, i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for
             * each zoom level. If given, the array length should match the length of the
             * `resolutions` array, i.e. each resolution can have a different origin. Tile
             * coordinates increase left to right and upwards. If not specified, `extent` or
             * `origin` must be provided.
             */
            origins?: ol.Coordinate[];
            /**
             * Resolutions. The array index of each resolution needs to match the zoom
             * level. This means that even if a `minZoom` is configured, the resolutions
             * array will have a length of `maxZoom + 1`
             */
            resolutions: number[];
            /**
             * matrix IDs. The length of this array needs to match the length of the
             * `resolutions` array.
             */
            matrixIds: string[];
            /**
             * Number of tile rows and columns of the grid for each zoom level. The values
             * here are the `TileMatrixWidth` and `TileMatrixHeight` advertised in the
             * GetCapabilities response of the WMTS, and define the grid's extent together
             * with the `origin`. An `extent` can be configured in addition, and will
             * further limit the extent for which tile requests are made by sources. Note
             * that when the top-left corner of the `extent` is used as `origin` or
             * `origins`, then the `y` value must be negative because OpenLayers tile
             * coordinates increase upwards.
             */
            sizes?: ol.Size[];
            /**
             * Tile size.
             */
            tileSize?: number|ol.Size;
            /**
             * Tile sizes. The length of this array needs to match the length of the
             * `resolutions` array.
             */
            tileSizes?: (number|ol.Size)[];
            /**
             * Number of tile columns that cover the grid's extent for each zoom level. Only
             * required when used with a source that has `wrapX` set to `true`, and only
             * when the grid's origin differs from the one of the projection's extent. The
             * array length has to match the length of the `resolutions` array, i.e. each
             * resolution will have a matching entry here.
             */
            widths?: number[];
        }
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface XYZOptions {
            /**
             * Extent for the tile grid.  The origin for an XYZ tile grid is the top-left
             * corner of the extent.  The zero level of the grid is defined by the
             * resolution at which one tile fits in the provided extent.  If not provided,
             * the extent of the EPSG:3857 projection is used.
             */
            extent?: ol.Extent;
            /**
             * Maximum zoom.  The default is `ol.DEFAULT_MAX_ZOOM`.  This determines the
             * number of levels in the grid set.  For example, a `maxZoom` of 21 means there
             * are 22 levels in the grid set.
             */
            maxZoom?: number;
            /**
             * Minimum zoom. Default is 0.
             */
            minZoom?: number;
            /**
             * Tile size in pixels. Default is `[256, 256]`.
             */
            tileSize?: number|ol.Size;
        }
    }
    module view {
        /**
         * TODO: This typedef has no documentation. Contact the library author if this typedef should be documented
         */
        interface FitOptions {
            /**
             * Padding (in pixels) to be cleared inside the view. Values in the array are
             * top, right, bottom and left padding. Default is `[0, 0, 0, 0]`.
             */
            padding: number[];
            /**
             * Constrain the resolution. Default is `true`.
             */
            constrainResolution?: boolean;
            /**
             * Get the nearest extent. Default is `false`.
             */
            nearest?: boolean;
            /**
             * Minimum resolution that we zoom to. Default is `0`.
             */
            minResolution?: number;
            /**
             * Maximum zoom level that we zoom to. If `minResolution` is given,
             * this property is ignored.
             */
            maxZoom?: number;
        }
    }
}
declare module "openlayers" {
    export = ol;
}
