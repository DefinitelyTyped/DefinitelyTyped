declare module goog {
    function require(name: 'goog.html.SafeStyle'): typeof goog.html.SafeStyle;
}

declare module goog.html {

    /**
     * A string-like object which represents a sequence of CSS declarations
     * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})
     * and that carries the security type contract that its value, as a string,
     * will not cause untrusted script execution (XSS) when evaluated as CSS in a
     * browser.
     *
     * Instances of this type must be created via the factory methods
     * ({@code goog.html.SafeStyle.create} or
     * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its
     * constructor. The constructor intentionally takes no parameters and the type
     * is immutable; hence only a default instance corresponding to the empty string
     * can be obtained via constructor invocation.
     *
     * A SafeStyle's string representation ({@link #getSafeStyleString()}) can
     * safely:
     * <ul>
     *   <li>Be interpolated as the entire content of a *quoted* HTML style
     *       attribute, or before already existing properties. The SafeStyle string
     *       *must be HTML-attribute-escaped* (where " and ' are escaped) before
     *       interpolation.
     *   <li>Be interpolated as the entire content of a {}-wrapped block within a
     *       stylesheet, or before already existing properties. The SafeStyle string
     *       should not be escaped before interpolation. SafeStyle's contract also
     *       guarantees that the string will not be able to introduce new properties
     *       or elide existing ones.
     *   <li>Be assigned to the style property of a DOM node. The SafeStyle string
     *       should not be escaped before being assigned to the property.
     * </ul>
     *
     * A SafeStyle may never contain literal angle brackets. Otherwise, it could
     * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't
     * be HTML escaped). For example, if the SafeStyle containing
     * "{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}" were
     * interpolated within a &lt;style&gt; tag, this would then break out of the
     * style context into HTML.
     *
     * A SafeStyle may contain literal single or double quotes, and as such the
     * entire style string must be escaped when used in a style attribute (if
     * this were not the case, the string could contain a matching quote that
     * would escape from the style attribute).
     *
     * Values of this type must be composable, i.e. for any two values
     * {@code style1} and {@code style2} of this type,
     * {@code goog.html.SafeStyle.unwrap(style1) +
     * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies
     * the SafeStyle type constraint. This requirement implies that for any value
     * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)} must
     * not end in a "property value" or "property name" context. For example,
     * a value of {@code background:url("} or {@code font-} would not satisfy the
     * SafeStyle contract. This is because concatenating such strings with a
     * second value that itself does not contain unsafe CSS can result in an
     * overall string that does. For example, if {@code javascript:evil())"} is
     * appended to {@code background:url("}, the resulting string may result in
     * the execution of a malicious script.
     *
     * TODO(user): Consider whether we should implement UTF-8 interchange
     * validity checks and blacklisting of newlines (including Unicode ones) and
     * other whitespace characters (\t, \f). Document here if so and also update
     * SafeStyle.fromConstant().
     *
     * The following example values comply with this type's contract:
     * <ul>
     *   <li><pre>width: 1em;</pre>
     *   <li><pre>height:1em;</pre>
     *   <li><pre>width: 1em;height: 1em;</pre>
     *   <li><pre>background:url('http://url');</pre>
     * </ul>
     * In addition, the empty string is safe for use in a CSS attribute.
     *
     * The following example values do NOT comply with this type's contract:
     * <ul>
     *   <li><pre>background: red</pre> (missing a trailing semi-colon)
     *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)
     *   <li><pre>1em</pre> (missing an attribute name, which provides context for
     *       the value)
     * </ul>
     *
     * @see goog.html.SafeStyle#create
     * @see goog.html.SafeStyle#fromConstant
     * @see http://www.w3.org/TR/css3-syntax/
     * @constructor
     * @final
     * @struct
     * @implements {goog.string.TypedString}
     */
    class SafeStyle {
        constructor();
        
        /**
         * A SafeStyle instance corresponding to the empty string.
         * @const {!goog.html.SafeStyle}
         */
        static EMPTY: any;
        
        /**
         * The innocuous string generated by goog.html.SafeUrl.create when passed
         * an unsafe value.
         * @const {string}
         */
        static INNOCUOUS_STRING: any;
        
        /**
         * Creates a SafeStyle object from a compile-time constant string.
         *
         * {@code style} should be in the format
         * {@code name: value; [name: value; ...]} and must not have any < or >
         * characters in it. This is so that SafeStyle's contract is preserved,
         * allowing the SafeStyle to correctly be interpreted as a sequence of CSS
         * declarations and without affecting the syntactic structure of any
         * surrounding CSS and HTML.
         *
         * This method performs basic sanity checks on the format of {@code style}
         * but does not constrain the format of {@code name} and {@code value}, except
         * for disallowing tag characters.
         *
         * @param {!goog.string.Const} style A compile-time-constant string from which
         *     to create a SafeStyle.
         * @return {!goog.html.SafeStyle} A SafeStyle object initialized to
         *     {@code style}.
         */
        static fromConstant(style: goog.string$.Const): goog.html.SafeStyle;
        
        /**
         * Performs a runtime check that the provided object is indeed a
         * SafeStyle object, and returns its value.
         *
         * @param {!goog.html.SafeStyle} safeStyle The object to extract from.
         * @return {string} The safeStyle object's contained string, unless
         *     the run-time type check fails. In that case, {@code unwrap} returns an
         *     innocuous string, or, if assertions are enabled, throws
         *     {@code goog.asserts.AssertionError}.
         */
        static unwrap(safeStyle: goog.html.SafeStyle): string;
        
        /**
         * Package-internal utility method to create SafeStyle instances.
         *
         * @param {string} style The string to initialize the SafeStyle object with.
         * @return {!goog.html.SafeStyle} The initialized SafeStyle object.
         * @package
         */
        static createSafeStyleSecurityPrivateDoNotAccessOrElse(style: string): goog.html.SafeStyle;
        
        /**
         * Creates a new SafeStyle object from the properties specified in the map.
         * @param {goog.html.SafeStyle.PropertyMap} map Mapping of property names to
         *     their values, for example {'margin': '1px'}. Names must consist of
         *     [-_a-zA-Z0-9]. Values might be strings consisting of
         *     [-,.'"%_!# a-zA-Z0-9], where " and ' must be properly balanced.
         *     Other values must be wrapped in goog.string.Const. Null value causes
         *     skipping the property.
         * @return {!goog.html.SafeStyle}
         * @throws {Error} If invalid name is provided.
         * @throws {goog.asserts.AssertionError} If invalid value is provided. With
         *     disabled assertions, invalid value is replaced by
         *     goog.html.SafeStyle.INNOCUOUS_STRING.
         */
        static create(map: goog.html.SafeStyle.PropertyMap): goog.html.SafeStyle;
        
        /**
         * Creates a new SafeStyle object by concatenating the values.
         * @param {...(!goog.html.SafeStyle|!Array<!goog.html.SafeStyle>)} var_args
         *     SafeStyles to concatenate.
         * @return {!goog.html.SafeStyle}
         */
        static concat(...var_args: (goog.html.SafeStyle|Array<goog.html.SafeStyle>)[]): goog.html.SafeStyle;
    }
}

declare module goog.html.SafeStyle {

    /**
     * Mapping of property names to their values.
     * @typedef {!Object<string, goog.string.Const|string>}
     */
    type PropertyMap = {[index: string]: goog.string$.Const|string};
}
