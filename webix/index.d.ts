// Type definitions for Webix UI 3.3.0
// Project: http://webix.com
// Definitions by: Maksim Kozhukh <http://github.com/mkozhukh>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace webix {

type WebixTemplate = (...args: any[])=>string;
type WebixCallback = (...args: any[])=>any;
interface PromisedData {
    then(handler:(data:any)=>any):PromisedData;
    fail(handler:(error:any)=>any):PromisedData;
}

function ajax():webix._ajax;
function $$(id: string|Event|HTMLElement):webix.ui.baseview;


interface _ajax{
	bind(master:any):webix._ajax;
	del(url:string, params?:any, callback?:WebixCallback):PromisedData;
	get(url:string, params?:any, callback?:WebixCallback):PromisedData;
	getXHR():any;
	headers(values:any):webix._ajax;
	post(url:string, params?:any, callback?:WebixCallback):PromisedData;
	put(url:string, params?:any, callback?:WebixCallback):PromisedData;
	response(type:string):void;
	stringify(data:any):string;
	sync():webix._ajax;
	master: any;
}
interface clipbuffer{
	destructor():void;
	focus():void;
	init():void;
	set(text:string):void;
}
interface color{
	hexToDec(hex:string):number;
	hsvToRgb(h:number, s:number, v:number):any[];
	rgbToHsv(r:number, g:number, b:number):any[];
	toHex(number:number, length?:number):string;
	toRgb(rgb:string):any[];
}
interface csv{
	parse(text:string, delimiter?:any):any[];
	stringify(data:any[], delimiter?:any):string;
	delimiter: any;
	escape: boolean;
}
interface editors{
	$popup: any;
	checkbox: string;
	color: string;
	combo: string;
	date: string;
	"inline-checkbox": string;
	"inline-text": string;
	multiselect: string;
	password: string;
	popup: string;
	richselect: string;
	select: string;
	text: string;
}
interface env{
	cssPrefix: string;
	isFF: boolean;
	isIE: boolean;
	isSafari: boolean;
	isWebKit: boolean;
	jsPrefix: string;
	mouse: any;
	strict: boolean;
	svg: boolean;
	transform: boolean;
	transition: boolean;
	transitionDuration: string;
	transitionEnd: string;
	translate: string;
}
interface history{
	push(view:string, url:string, value:any):void;
	track(view:string, url:string):void;
}
interface html{
	addCss(node:HTMLElement, name:string):void;
	addMeta(name:string, value:string):void;
	addStyle(css:string):void;
	allowSelect():void;
	create(name:string, attrs:any, html?:string):HTMLElement;
	createCss(data:any):string;
	denySelect():void;
	getValue(node:HTMLElement):string;
	index(node:HTMLElement):number;
	insertBefore(node:HTMLElement, before:HTMLElement, rescue?:HTMLElement):void;
	locate(ev:Event|HTMLElement, name:string):string;
	offset(node:HTMLElement):any;
	pos(ev:Event):any;
	posRelative(ev:Event):any;
	preventEvent(ev:Event):boolean;
	remove(node:HTMLElement|HTMLElement[]):void;
	removeCss(node:HTMLElement, name:string):void;
	stopEvent(ev:Event):boolean;
}
interface i18n{
	dateFormatDate(date:string):any;
	dateFormatStr(date:any):string;
	fullDateFormatDate(date:string):any;
	fullDateFormatStr(date:Date):string;
	intFormat(num:number):string;
	longDateFormatDate(date:string):any;
	longDateFormatStr(date:any):string;
	numberFormat(number:number):string;
	parseFormatDate(date:string):any;
	parseFormatStr(date:any):string;
	parseTimeFormatDate(date:string):any;
	parseTimeFormatStr(date:any):string;
	priceFormat(number:number):string;
	setLocale(name:string):void;
	timeFormatDate(time:string):any;
	timeFormatStr(date:any):string;
	calendar: any;
	controls: any;
	dateFormat: string;
	decimalDelimiter: string;
	decimalSize: number;
	fileSize: any[];
	fullDateFormat: string;
	groupDelimiter: string;
	groupSize: number;
	locales: any;
	longDateFormat: string;
	parseFormat: string;
	parseTimeFormat: string;
	price: string;
	priceSettings: any;
	timeFormat: string;
}
interface locale{
	pager: any;
}
interface markup{
	init(node:string, target:string):webix.ui.baseview;
	parse(data:any, datatype:string):void;
	attribute: any;
	dataTag: any;
	namespace: any;
}
interface promise{
	all(promise:PromisedData, morepromises?:PromisedData):void;
	defer():PromisedData;
	fcall():PromisedData;
	nfcall():PromisedData;
}
interface rules{
	isChecked():boolean;
	isEmail():boolean;
	isNotEmpty():boolean;
	isNumber():boolean;
}
interface cookie{
	clear():void;
	get(name:string):any;
	put(name:string, value:any):void;
	remove(name:string):void;
}
interface local{
	clear():void;
	get(name:string):any;
	put(name:string, value:any):void;
	remove(name:string):void;
}
interface session{
	clear():void;
	get(name:string):any;
	put(name:string, value:any):void;
	remove(name:string):void;
}
interface storage{
	cookie:webix.cookie;
	local:webix.local;
	session:webix.session;
}

function alert(text:string, callback:WebixCallback):HTMLElement;
function animate(html_element:HTMLElement, animation:any):void;
function attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
function bind(code:WebixCallback, master:any):WebixCallback;
function blockEvent():void;
function callEvent(name:string, params:any[]):boolean;
function clone(source:any):any;
function confirm(text:string, callback:WebixCallback):HTMLElement;
function copy(source:any):any;
function delay(code:WebixCallback, owner?:any, params?:any[], delay?:number):number;
function detachEvent(id:string):void;
function dp(name:string):any;
function editStop():void;
function event(node:HTMLElement|string, event:string, handler:WebixCallback, context?:any):string|number;
function eventRemove(id:string|number):void;
function exec(code:string):void;
function extend(target:any, source:any, overwrite:boolean):any;
function hasEvent(name:string):boolean;
function isArray(check:any):boolean;
function isDate(check:any):boolean;
function isUndefined(check:any):boolean;
function jsonp(url:string, params?:any, callback?:WebixCallback, master?:any):void;
function mapEvent(map:any):void;
function message(text:string):void;
function modalbox(text:string, callback:WebixCallback):HTMLElement;
function once(code:WebixCallback):void;
function proto(target:any, mixin1?:any, mixinN?:any):any;
function protoUI(target:any, view:any, mixin1:any, mixinN:any):any;
function proxy(type:string, source:string):any;
function ready(code:WebixCallback):void;
function remote():void;
function require(url:string):void;
function send(url:string, values:any, method:string, target:string):void;
function single(source:WebixCallback):WebixCallback;
function template(template:string):WebixCallback;
function toArray(array:any[]):any[];
function toExcel(id:any, options:any):void;
function toFunctor(name:string):WebixCallback;
function toNode(id:string):HTMLElement;
function toPDF(id:string, name:string):void;
function toPNG(id:string, name:string):void;
function type(config:any):void;
function ui(config:any, parent?:any, replacement?:any):webix.ui.baseview;
function uid():number;
function unblockEvent():void;
function wrap(target:WebixCallback, source:WebixCallback):WebixCallback;

var codebase: string;
var name: string;
var version: string;
var clipbuffer:webix.clipbuffer;
var color:webix.color;
var csv:webix.csv;
var editors:webix.editors;
var env:webix.env;
var history:webix.history;
var html:webix.html;
var i18n:webix.i18n;
var locale:webix.locale;
var markup:webix.markup;
var promise:webix.promise;
var rules:webix.rules;
var storage:webix.storage;

interface ActiveContent{
}
var ActiveContent:ActiveContent;
interface AtomDataLoader{
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	parse(data:any, type:string):void;
}
var AtomDataLoader:AtomDataLoader;
interface AtomRender{
	render(id:string|number, data:any, type:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
}
var AtomRender:AtomRender;
interface AutoTooltip{
}
var AutoTooltip:AutoTooltip;
interface BaseBind{
	bind(target:any, rule?:WebixCallback, format?:string):void;
	unbind():void;
}
var BaseBind:BaseBind;
interface BindSource{
	addBind(source:any, rule:string, format:string):void;
	getBindData(key:string|number, update:boolean):void;
	removeBind(source:any):void;
	saveBatch(func:WebixCallback):void;
	setBindData(data:any, key:string|number):void;
}
var BindSource:BindSource;
interface Canvas{
	clearCanvas():void;
	getCanvas(context:string):any;
	hideCanvas():void;
	renderText(x:number, y:number, text:string, css:string, w:number):void;
	renderTextAt(valign:string, align:string, x:number, y:number, t:string, c:string, w:number):void;
	showCanvas():void;
	toggleCanvas():void;
}
var Canvas:Canvas;
interface CodeParser{
	collapseNames(obj:any):{ [key: string]: any; };
	expandNames(obj:{ [key: string]: any; }):any;
}
var CodeParser:CodeParser;
interface CollectionBind{
	getCursor():number;
	refreshCursor():void;
	setCursor(cursor:string|number):void;
}
var CollectionBind:CollectionBind;
interface ContextHelper{
	attachTo(view:any):void;
	getContext():any;
	setContext(context:any):void;
}
var ContextHelper:ContextHelper;
interface CopyPaste{
}
var CopyPaste:CopyPaste;
interface CustomScroll{
	enable(html_node:HTMLElement|webix.ui.baseview):void;
	init():void;
	resize():void;
	scrollStep: number;
}
var CustomScroll:CustomScroll;
interface DataCollection{
	add(obj:any, index?:number):string|number;
	addBind(source:any, rule:string, format:string):void;
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBindData(key:string|number, update:boolean):void;
	getCursor():number;
	getFirstId():string|number;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getPrevId(id:string|number, step:number):string|number;
	hasEvent(name:string):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	refreshCursor():void;
	remove(id:string|number):void;
	removeBind(source:any):void;
	saveBatch(func:WebixCallback):void;
	serialize():any;
	setBindData(data:any, key:string|number):void;
	setCursor(cursor:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	config: { [key: string]: any; };
	name: string;
}

interface DataDriver{
	csv: any;
	excel: string;
	html: any;
	htmltable: any;
	jsarray: any;
	json: any;
	xml: any;
}
var DataDriver:DataDriver;
interface DataLoader{
	add(obj:any, index?:number):string|number;
	clearAll():void;
	count():number;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getFirstId():string|number;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getPrevId(id:string|number, step:number):string|number;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	serialize():any;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	updateItem(id:string|number, data:any):void;
}
var DataLoader:DataLoader;
interface DataMarks{
	addCss(id:string|number, css:string, silent?:boolean):void;
	clearCss(css:string, silent?:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	removeCss(id:string|number, css:string, silent?:boolean):void;
}
var DataMarks:DataMarks;
interface DataMove{
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
}
var DataMove:DataMove;
interface DataProcessor{
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	attachProgress(start:WebixCallback, end:WebixCallback, error:WebixCallback):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearValidation():void;
	define(property:string, value:any):void;
	detachEvent(id:string):void;
	escape(value:string):string;
	getItemState(itemId:string|number):any;
	getState():string|boolean;
	hasEvent(name:string):boolean;
	ignore(code:WebixCallback, master:any):void;
	mapEvent(map:any):void;
	off():void;
	on():void;
	processResult(data:any):void;
	reset():void;
	save(id:string|number, operation:string):void;
	send():void;
	setItemState(itemId:string|number, state:boolean):void;
	unblockEvent():void;
	validate(mode?:any):boolean;
	config: { [key: string]: any; };
	name: string;
}
var DataProcessor:DataProcessor;
interface DataRecord{
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	detachEvent(id:string):void;
	getValues():any;
	hasEvent(name:string):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	setValues(values:any, update?:boolean):void;
	unbind():void;
	unblockEvent():void;
	config: { [key: string]: any; };
	name: string;
}
var DataRecord:DataRecord;
interface DataState{
	getState():any;
	setState(state:any):void;
}
var DataState:DataState;
interface DataStore{
	add(obj:any, index?:number):string|number;
	addMark(id:string, name:string, css?:boolean, value?:any):any;
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	changeId(old:string|number, newid:string|number):void;
	clearAll():void;
	clearMark(name:string):void;
	count():number;
	destructor():void;
	detachEvent(id:string):void;
	each(method:WebixCallback, master?:any, all?:boolean):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getFirstId():string|number;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getIndexRange(from:string|number, to:string|number):any[];
	getItem(id:string|number):any;
	getLastId():string|number;
	getMark(id:string, mark_name:string):any;
	getNextId(id:string|number, step:number):string|number;
	getPrevId(id:string|number, step:number):string|number;
	getRange(from:string|number, to:string|number):any[];
	hasEvent(name:string):boolean;
	id(item:any):string|number;
	importData(source:webix.ui.baseview):void;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	provideApi(target:any, eventable:boolean):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeMark(id:string, name:string, css:boolean):void;
	scheme(config:any):void;
	serialize():any;
	setDriver(type:string):void;
	silent(code:WebixCallback):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unblockEvent():void;
	unsync():void;
	updateItem(id:string|number, data:any):void;
	driver: any;
	name: string;
	order: any[];
	pull: any;
}
var DataStore:DataStore;
interface DataValue{
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	detachEvent(id:string):void;
	getValue():string;
	hasEvent(name:string):boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	setValue(value:string):void;
	unbind():void;
	unblockEvent():void;
	name: string;
}
var DataValue:DataValue;
interface Date{
	add(date:any, inc:number, mode:string):any;
	copy(date:any):any;
	datePart(date:any):any;
	dateToStr(format:string, utc:boolean):WebixCallback;
	dayStart(date:any):any;
	equal(datea:any, dateb:any):boolean;
	getISOWeek(date:any):number;
	getUTCISOWeek(data:any):number;
	isHoliday(date:any):boolean;
	monthStart(date:any):any;
	strToDate(format:string, utc:boolean):WebixCallback;
	timePart(date:any):number;
	toFixed(num:number):number;
	weekStart(date:any):any;
	yearStart(date:any):any;
	startOnMonday: boolean;
}
var Date:Date;
interface Destruction{
	destructor():void;
}
var Destruction:Destruction;
interface DragControl{
	addDrag(node:string|number|HTMLElement, ctrl:any):void;
	addDrop(node:string|number|HTMLElement, ctrl:any, master_mode:boolean):void;
	createDrag(event:Event):void;
	destroyDrag():void;
	getContext():any;
	getMaster(target:any):any;
	getNode():HTMLElement;
	sendSignal(signal:string):void;
	$drag(s:any, e:Event):HTMLElement;
	$dragIn(s:any, t:any, e:Event):void;
	$dragOut(s:any, t:any, n:any, e:Event):void;
	$dragPos: WebixCallback;
	$drop(s:any, t:any, d:any, e:Event):void;
	left: number;
	top: number;
}
var DragControl:DragControl;
interface DragItem{
	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
}
var DragItem:DragItem;
interface DragOrder{
	$drag(source:HTMLElement, ev:Event):string;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragPos: WebixCallback;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
}
var DragOrder:DragOrder;
interface EditAbility{
	edit(id:any):void;
	editCancel():void;
	editNext():boolean;
	editStop():void;
	focusEditor():void;
	getEditState():any;
	getEditor(id?:string):any;
	getEditorValue():string;
	validateEditor(id?:string|number):boolean;
}
var EditAbility:EditAbility;
interface EventSystem{
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	detachEvent(id:string):void;
	hasEvent(name:string):boolean;
	mapEvent(map:any):void;
	unblockEvent():void;
}
var EventSystem:EventSystem;
interface Group{
	group(config:any, mode:boolean):void;
	ungroup(mode:boolean):void;
}
var Group:Group;
interface GroupMethods{
	any(property:string, data:any):void;
	count(property:string, data:any):void;
	max(property:string, data:any):void;
	min(property:string, data:any):void;
	string(property:string, data:any):void;
	sum(property:string, data:any):void;
}
var GroupMethods:GroupMethods;
interface GroupStore{
	group(stats:any):void;
	ungroup():void;
}
var GroupStore:GroupStore;
interface HtmlMap{
	addPoly(id:string|number, points:any[]):void;
	addRect(id:string|number, points:any[], userdata?:string):void;
	addSector(id:string|number, aplha0:number, aplha1:number, x:number, y:number, R:number, ky:number):void;
	render(html:HTMLElement):void;
}
var HtmlMap:HtmlMap;
interface IdSpace{
	innerId(id:string|number):string|number;
	ui(view:any):webix.ui.baseview;
	$$: any;
}
var IdSpace:IdSpace;
interface KeysNavigation{
	moveSelection(direction:string):void;
}
var KeysNavigation:KeysNavigation;
interface MapCollection{
}
var MapCollection:MapCollection;
interface Modality{
}
var Modality:Modality;
interface MouseEvents{
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
}
var MouseEvents:MouseEvents;
interface Movable{
}
var Movable:Movable;
interface NavigationButtons{
}
var NavigationButtons:NavigationButtons;
interface Number{
	format(value:number, config:any):string;
	numToStr(config:any):WebixCallback;
}
var Number:Number;
interface OverlayBox{
	hideOverlay():void;
	showOverlay():void;
}
var OverlayBox:OverlayBox;
interface PagingAbility{
	getPage():number;
	getPager():any;
	setPage(page:number):void;
}
var PagingAbility:PagingAbility;
interface PowerArray{
	each(functor:WebixCallback, master:any):void;
	filter(functor:WebixCallback, master:any):any[];
	find(data:any):number;
	insertAt(data:any, pos:number):void;
	map(functor:WebixCallback, master:any):any[];
	remove(value:any):void;
	removeAt(pos:number, len:number):void;
}
var PowerArray:PowerArray;
interface ProgressBar{
	hideProgress():void;
	showProgress(config?:any):void;
}
var ProgressBar:ProgressBar;
interface RecordBind{
}
var RecordBind:RecordBind;
interface RenderStack{
	customize(obj:any):void;
	getItemNode(id:string|number):void;
	locate(e:Event):string|number;
	render(id:string|number, data:any, type:string):void;
	showItem(id:string|number):void;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
var RenderStack:RenderStack;
interface Scrollable{
	getScrollState():any;
	scrollTo(x:number, y:number):void;
}
var Scrollable:Scrollable;
interface SelectionModel{
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	isSelected(id:string|number):boolean;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	unselect(id?:string):void;
	unselectAll():void;
}
var SelectionModel:SelectionModel;
interface Settings{
	define(property:string, value:any):void;
	config: { [key: string]: any; };
	name: string;
}
var Settings:Settings;
interface SingleRender{
	customize(obj:any):void;
	render(id:string|number, data:any, type:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	type: { [key: string]: any; };
}
var SingleRender:SingleRender;
interface Sparklines{
	template(item:any, common:string, data:any[], column:any, index:number):string;
	paddingX: number;
	paddingY: number;
	radius: number;
}
var Sparklines:Sparklines;
interface TablePaste{
}
var TablePaste:TablePaste;
interface Touch{
	disable():void;
	enable():void;
	limit(mode:boolean):void;
	scrollTo(node:HTMLElement, x:number, y:number, speed:string):void;
	config: any;
}
var Touch:Touch;
interface TreeAPI{
	close(id:string|number):void;
	closeAll():void;
	getOpenItems():any[];
	getState():any;
	isBranchOpen(id:string|number):boolean;
	open(id:string|number, show?:boolean):void;
	openAll():void;
	setState(state:any):void;
}
var TreeAPI:TreeAPI;
interface TreeClick{
	webix_tree_checkbox(obj:any, common:{ [key: string]: any; }):string;
	webix_tree_close(obj:any, common:{ [key: string]: any; }):string;
	webix_tree_open(obj:any, common:{ [key: string]: any; }):string;
}
var TreeClick:TreeClick;
interface TreeCollection{
	add(obj:any, index?:number, parentId?:string):string;
	addBind(source:any, rule:string, format:string):void;
	attachEvent(type:string, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBindData(key:string|number, update:boolean):void;
	getBranchIndex(id:string|number, parent?:string|number):number;
	getCursor():number;
	getFirstChildId(id:string|number):string;
	getFirstId():string|number;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNextSiblingId(id:string|number):string|number;
	getParentId(id:string|number):string|number;
	getPrevId(id:string|number, step:number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	hasEvent(name:string):boolean;
	isBranch(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	refreshCursor():void;
	remove(id:string|number):void;
	removeBind(source:any):void;
	saveBatch(func:WebixCallback):void;
	serialize():any;
	setBindData(data:any, key:string|number):void;
	setCursor(cursor:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	config: { [key: string]: any; };
	name: string;
}
var TreeCollection:TreeCollection;
interface TreeDataLoader{
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
}
var TreeDataLoader:TreeDataLoader;
interface TreeDataMove{
	copy(sid:string|number, tindex:number, tobj?:webix.ui.baseview, details?:any):string|number;
	move(sid:string|number, tindex:number, tobj?:webix.ui.baseview, details?:any):string|number;
	$dropAllow: WebixCallback;
}
var TreeDataMove:TreeDataMove;
interface TreeRenderStack{
	getItemNode(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
}
var TreeRenderStack:TreeRenderStack;
interface TreeStateCheckbox{
	checkAll(id?:string|number):void;
	checkItem(id:string):void;
	getChecked():any[];
	isChecked(id:string|number):boolean;
	uncheckAll(id?:string|number):void;
	uncheckItem(id:string):void;
}
var TreeStateCheckbox:TreeStateCheckbox;
interface TreeStore{
	add(obj:any, index?:number, parentId?:string):string;
	changeId(old:string|number, newid:string|number):void;
	clearAll():void;
	count():number;
	each(code:WebixCallback, master:any, all:boolean, pid:string):void;
	eachChild(pid:string, code:WebixCallback, master?:any, all?:boolean):void;
	eachLeaf(pid:string, code:WebixCallback):void;
	eachOpen(code:WebixCallback, master?:any, pid?:string):void;
	eachSubItem(pid:string, code:WebixCallback):void;
	getBranch(id:string):any[];
	getBranchIndex(id:string|number, parent?:string|number):number;
	getFirstChildId(id:string|number):string;
	getNextSiblingId(id:string|number):string|number;
	getParentId(id:string|number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	getTopRange():any[];
	isBranch(id:string|number):boolean;
	provideApi(target:any, eventable:boolean):void;
	remove(id:string|number):void;
	serialize():any;
	name: string;
}
var TreeStore:TreeStore;
interface TreeTableClick{
}
var TreeTableClick:TreeTableClick;
interface TreeTablePaste{
	insert(data:any[]):void;
}
var TreeTablePaste:TreeTablePaste;
interface TreeType{
	checkbox(obj:any, common:any):string;
	folder(obj:any, common:any):string;
	icon(obj:any, common:any):string;
	space(obj:any, common:any):string;
}
var TreeType:TreeType;
interface UIExtension{
}
var UIExtension:UIExtension;
interface UIManager{
	addHotKey(key:string, handler:WebixCallback, obj?:any):void;
	applyChanges():void;
	canFocus(id:string|number):boolean;
	destructor():void;
	getFocus():webix.ui.baseview;
	getNext(view:any):any;
	getPrev(view:any):any;
	getState(id:string, childs:boolean):any;
	getTop(id:string|number):any;
	hasFocus(id:string|number):boolean;
	removeHotKey(key:string, handler?:WebixCallback, obj?:any):void;
	setFocus(id:string|number):void;
	setState(state:any):void;
}
var UIManager:UIManager;
interface Undo{
	ignoreUndo(functor:WebixCallback):void;
	removeUndo(id:string):void;
	undo(id:string):void;
}
var Undo:Undo;
interface UploadDriver{
	flash: any;
	html5: any;
}
var UploadDriver:UploadDriver;
interface ValidateCollection{
	clearValidation():void;
	validate(id?:string):boolean;
}
var ValidateCollection:ValidateCollection;
interface ValidateData{
	clearValidation():void;
	validate(mode?:any):boolean;
}
var ValidateData:ValidateData;
interface ValueBind{
}
var ValueBind:ValueBind;
interface Values{
	clear():void;
	focus(item:string):void;
	getCleanValues():any;
	getDirtyValues():any;
	getValues(details?:any):{ [key: string]: any; };
	isDirty():boolean;
	markInvalid(name:string, state?:boolean|string):void;
	setDirty(mark?:boolean):void;
	setValues(values:any, update?:boolean):void;
}
var Values:Values;
interface VirtualRenderStack{
	getItemNode(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
	showItem(id:string|number):void;
}
var VirtualRenderStack:VirtualRenderStack;


interface DataCollectionFactory {
	new (): DataCollection;
}
var DataCollection: DataCollectionFactory;


namespace ui {

function delay(config:any):void;
function fullScreen():void;
function hasMethod(name:string, method_name:string):boolean;
function resize():void;
function zIndex():number;
var scrollSize: number;
var zIndexBase: number;

interface baselayoutConfig{
	animate?: any;
	borderless?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	responsive?: string;
	rows?: any[];
	visibleBatch?: string;
	width?: number;
}
type baselayoutEventName ='onBindRequest'|'onDestruct';
interface baselayout extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:baselayoutEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: baselayoutConfig;
	name: string;
}
interface baseviewConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	width?: number;
}
type baseviewEventName ='onBindRequest'|'onDestruct';
interface baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: baseviewConfig;
	name: string;
}
interface checksuggestConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	button?: boolean;
	buttonText?: string;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	filter?: WebixCallback;
	fitMaster?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	input?: HTMLElement|string;
	keyPressTimeout?: number;
	left?: number;
	master?: webix.ui.baseview;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	separator?: string;
	template?: string|WebixTemplate;
	textValue?: string;
	toFront?: boolean;
	top?: number;
	type?: string;
	value?: string|number;
	width?: number;
	zIndex?: number;
}
type checksuggestEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValueSuggest'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface checksuggest extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:checksuggestEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getButton():webix.ui.baseview;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getItemText(id:string|number):string;
	getList():webix.ui.baseview;
	getMasterValue():any;
	getNode():any;
	getParentView():any;
	getSuggestion():string;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	linkInput(input:HTMLElement):void;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setMasterValue(value:any):void;
	setPosition(x:number, y:number):void;
	setValue(value:string|number):void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: checksuggestConfig;
	name: string;
}
interface protoConfig{
	animate?: any;
	borderless?: boolean;
	click?: string|WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	template?: string|WebixCallback;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
}
type protoEventName ='onAfterAdd'|'onAfterDelete'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSort'|'onBeforeAdd'|'onBeforeDelete'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onFocus'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface proto extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:protoEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getTopParentView():webix.ui.baseview;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: protoConfig;
	name: string;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface resizeareaConfig{
	border?: boolean;
	container?: string|HTMLElement;
	cursor?: string;
	dir?: string;
	eventPos?: number;
	height?: number;
	id?: string|number;
	on?: any;
	start?: number;
	width?: number;
}
type resizeareaEventName ='onResize'|'onResizeEnd';
interface resizearea extends webix.ui.baseview{
	attachEvent(type:resizeareaEventName, functor:WebixCallback, id?:string):string|number;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	detachEvent(id:string):void;
	hasEvent(name:string):boolean;
	mapEvent(map:any):void;
	unblockEvent():void;

	config: resizeareaConfig;
	name: string;
}
interface viewConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	width?: number;
}
type viewEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface view extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: viewConfig;
	name: string;
}
interface vscrollConfig{
	container?: string|HTMLElement;
	id?: string|number;
	on?: any;
	scroll?: string;
	scrollHeight?: number;
	scrollPos?: number;
	scrollSize?: number;
	scrollStep?: number;
	scrollVisible?: boolean;
	scrollWidth?: number;
	zoom?: number;
}
type vscrollEventName ='onScroll';
interface vscroll extends webix.ui.baseview{
	activeArea(node:HTMLElement):void;
	attachEvent(type:vscrollEventName, functor:WebixCallback, id?:string):string|number;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	detachEvent(id:string):void;
	getScroll():number;
	getSize():number;
	hasEvent(name:string):boolean;
	mapEvent(map:any):void;
	scrollTo(pos:number):void;
	sizeTo(size:number):void;
	unblockEvent():void;

	config: vscrollConfig;
	name: string;
}
interface accordionConfig{
	animate?: any;
	borderless?: boolean;
	collapsed?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	multi?: boolean|string;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	panelClass?: string;
	responsive?: string;
	rows?: any[];
	type?: string;
	visibleBatch?: string;
	width?: number;
}
type accordionEventName ='onAfterCollapse'|'onAfterExpand'|'onBindRequest'|'onDestruct';
interface accordion extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:accordionEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: accordionConfig;
	name: string;
}
interface accordionitemConfig{
	animate?: any;
	body?: any;
	borderless?: boolean;
	collapsed?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	header?: boolean|string|WebixCallback;
	headerAlt?: string|WebixCallback;
	headerAltHeight?: number;
	headerHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	width?: number;
}
type accordionitemEventName ='onAfterContextMenu'|'onAfterScroll'|'onBeforeContextMenu'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface accordionitem extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:accordionitemEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	collapse():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	expand():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: accordionitemConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
}
interface barcodeConfig{
	animate?: any;
	borderless?: boolean;
	color?: string;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	paddingX?: number;
	paddingY?: number;
	textHeight?: number;
	type?: string;
	value?: string;
	width?: number;
}
type barcodeEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface barcode extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	render():void;
	resize():void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: barcodeConfig;
	name: string;
	types: any[];
}
interface buttonConfig{
	align?: string;
	animate?: any;
	autowidth?: boolean;
	borderless?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputWidth?: number;
	label?: string;
	labelPosition?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	tabFocus?: boolean;
	tooltip?: string;
	type?: string;
	value?: string|number;
	width?: number;
}
type buttonEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface button extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:buttonEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$renderInput(config:any):HTMLElement;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: buttonConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface calendarConfig{
	animate?: any;
	blockDates?: WebixCallback;
	borderless?: boolean;
	calendarHeader?: string;
	calendarTime?: string;
	calendarWeekHeader?: string;
	cellHeight?: number|string;
	container?: string|HTMLElement;
	css?: string;
	date?: Date|string;
	dayTemplate?: WebixCallback;
	disabled?: boolean;
	events?: WebixCallback;
	gravity?: number;
	headerHeight?: number;
	height?: number;
	hidden?: boolean;
	icons?: any;
	id?: string|number;
	maxDate?: Date|string;
	maxHeight?: number;
	maxTime?: string;
	maxWidth?: number;
	minDate?: Date|string;
	minHeight?: number;
	minTime?: string;
	minWidth?: number;
	minuteStep?: number;
	monthSelect?: boolean;
	mouseEventDelay?: number;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	select?: boolean;
	skipEmptyWeeks?: boolean;
	timepicker?: boolean;
	timepickerHeight?: number;
	type?: string;
	weekHeader?: boolean;
	weekNumber?: boolean;
	width?: number;
}
type calendarEventName ='onAfterContextMenu'|'onAfterDateSelect'|'onAfterMonthChange'|'onAfterRender'|'onAfterScroll'|'onAfterZoom'|'onBeforeContextMenu'|'onBeforeDateSelect'|'onBeforeMonthChange'|'onBeforeRender'|'onBeforeZoom'|'onBindRequest'|'onBlur'|'onChange'|'onDateClear'|'onDateSelect'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTodaySet'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface calendar extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:calendarEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getSelectedDate():any;
	getTopParentView():webix.ui.baseview;
	getValue():any;
	getVisibleDate():any;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	selectDate(date:any, mode:boolean):void;
	setValue(date:any):void;
	show(force?:boolean, animation?:boolean):void;
	showCalendar(date:any):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: calendarConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
}
interface carouselConfig{
	animate?: any;
	borderless?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	navigation?: any;
	on?: any;
	rows?: any[];
	scrollSpeed?: string;
	type?: string;
	width?: number;
}
type carouselEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface carousel extends webix.ui.baseview{
	adjust():void;
	adjustScroll():void;
	attachEvent(type:carouselEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getActiveId():string;
	getActiveIndex():number;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getLayout():any;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	setActive(id:string):void;
	setActiveIndex(index:number):void;
	show(force?:boolean, animation?:boolean):void;
	showNext():void;
	showPrev():void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: carouselConfig;
	name: string;
}
interface chartConfig{
	alpha?: number;
	animate?: any;
	barWidth?: number;
	border?: boolean;
	borderColor?: string;
	borderless?: boolean;
	cant?: number;
	color?: string|WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datathrottle?: number;
	datatype?: string;
	disableLines?: boolean;
	disabled?: boolean;
	eventRadius?: number;
	fill?: string;
	fixOverflow?: boolean;
	gradient?: boolean|string|WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	item?: any;
	label?: string|WebixCallback;
	labelOffset?: number;
	legend?: any;
	line?: any;
	lineColor?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	offset?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	origin?: number;
	padding?: any;
	pieHeight?: number;
	pieInnerText?: string|WebixCallback;
	preset?: string;
	radius?: number;
	ready?: WebixCallback;
	removeMissed?: boolean;
	save?: string;
	scale?: string;
	scheme?: any;
	series?: any;
	shadow?: boolean;
	tooltip?: any;
	type?: string;
	url?: string;
	value?: string|WebixTemplate;
	width?: number;
	x?: number;
	xAxis?: any;
	xValue?: string;
	y?: number;
	yAxis?: any;
	yValue?: string;
}
type chartEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface chart extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addSeries(obj:any):void;
	adjust():void;
	attachEvent(type:chartEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCanvas():void;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getTopParentView():webix.ui.baseview;
	group(config:any, mode:boolean):void;
	hasEvent(name:string):boolean;
	hide():void;
	hideSeries(series:string):void;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeAllSeries():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	serialize():any;
	show(force?:boolean, animation?:boolean):void;
	showSeries(series:string):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	updateItem(id:string|number, data:any):void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	colormap: { [key: string]: any; };
	config: chartConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	presets: { [key: string]: any; };
}
interface checkboxConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	checkValue?: string;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	customCheckbox?: boolean;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelRight?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	popup?: string;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	uncheckValue?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type checkboxEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface checkbox extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:checkboxEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	toggle():void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: checkboxConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface colorboardConfig{
	animate?: any;
	borderless?: boolean;
	cols?: number;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxLightness?: number;
	maxWidth?: number;
	minHeight?: number;
	minLightness?: number;
	minWidth?: number;
	on?: any;
	palette?: any[];
	rows?: number;
	template?: WebixCallback;
	value?: string;
	width?: number;
}
type colorboardEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface colorboard extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:colorboardEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setValue(value:string):string;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: colorboardConfig;
	name: string;
}
interface colorpickerConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	editable?: boolean;
	format?: string;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icons?: boolean;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	stringResult?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	timeIcon?: string;
	timepicker?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type colorpickerEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface colorpicker extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:colorpickerEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: colorpickerConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface comboConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	options?: any;
	placeholder?: string;
	popup?: string;
	popupWidth?: number;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	text?: string;
	tooltip?: string;
	type?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type comboEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface combo extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:comboEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getList():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: comboConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface contextConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	left?: number;
	master?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	toFront?: boolean;
	top?: number;
	width?: number;
	zIndex?: number;
}
type contextEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface context extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:contextEventName, functor:WebixCallback, id?:string):string|number;
	attachTo(view:any):void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getContext():any;
	getFormView():webix.ui.baseview;
	getHead():any;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setContext(context:any):void;
	setPosition(x:number, y:number):void;
	show(node?:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: contextConfig;
	name: string;
}
interface contextmenuConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	autoheight?: boolean;
	autowidth?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	left?: number;
	master?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	mouseEventDelay?: number;
	move?: boolean;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	openAction?: string;
	padding?: any;
	pager?: any;
	position?: string|WebixCallback;
	ready?: WebixCallback;
	relative?: string;
	removeMissed?: boolean;
	resize?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	subMenuPos?: string;
	submenuConfig?: any;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	toFront?: boolean;
	tooltip?: any;
	top?: number;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
	zIndex?: number;
}
type contextmenuEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeShow'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onHide'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMenuItemClick'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface contextmenu extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:contextmenuEventName, functor:WebixCallback, id?:string):string|number;
	attachTo(view:any):void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	close():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	disableItem(id:string|number):void;
	enable():void;
	enableItem(id:string|number):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBody():any;
	getChildViews():any[];
	getContext():any;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getHead():any;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getMenu(id:string|number):any;
	getMenuItem(id:string|number):any;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getSubMenu(id:string|number):any;
	getTopMenu():any;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	hideItem(id:string|number):void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	resizeChildren():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setContext(context:any):void;
	setPage(page:number):void;
	setPosition(x:number, y:number):void;
	show(node?:HTMLElement, position?:any, point?:string):void;
	showItem(id:string|number):void;
	sizeToContent():void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	show(force:boolean,animation:boolean):void;
	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: contextmenuConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface counterConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	max?: number;
	maxHeight?: number;
	maxWidth?: number;
	min?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	popup?: string;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	step?: number;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type counterEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface counter extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:counterEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	next(step?:number):void;
	prev(step?:number):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:number):void;
	shift(value?:number):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: counterConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface datasuggestConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	filter?: WebixCallback;
	fitMaster?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	input?: HTMLElement|string;
	keyPressTimeout?: number;
	left?: number;
	master?: webix.ui.baseview;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	template?: string|WebixTemplate;
	textValue?: string;
	toFront?: boolean;
	top?: number;
	type?: string;
	width?: number;
	zIndex?: number;
}
type datasuggestEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValueSuggest'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface datasuggest extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:datasuggestEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getItemText(id:string|number):string;
	getList():webix.ui.baseview;
	getMasterValue():any;
	getNode():any;
	getParentView():any;
	getSuggestion():string;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	linkInput(input:HTMLElement):void;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setMasterValue(value:any):void;
	setPosition(x:number, y:number):void;
	setValue(value:string|number):void;
	show(node:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: datasuggestConfig;
	name: string;
}
interface datatableConfig{
	animate?: any;
	areaselect?: boolean;
	autoConfig?: boolean;
	autoheight?: boolean;
	autowidth?: boolean;
	blockselect?: boolean|string;
	borderless?: boolean;
	checkboxRefresh?: boolean;
	clipboard?: boolean|string;
	columnWidth?: number;
	columns?: any[];
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datafetch?: number;
	datathrottle?: number;
	datatype?: string;
	delimiter?: any;
	disabled?: boolean;
	drag?: boolean|string;
	dragColumn?: boolean|string;
	dragscroll?: boolean|string;
	editMath?: boolean;
	editValue?: string;
	editable?: boolean;
	editaction?: string;
	externalData?: WebixCallback;
	filterMode?: any;
	fixedRowHeight?: boolean;
	footer?: boolean;
	form?: string;
	gravity?: number;
	header?: boolean;
	headerRowHeight?: number;
	headermenu?: any;
	height?: number;
	hidden?: boolean;
	hover?: string;
	id?: string|number;
	leftSplit?: number;
	liveValidation?: boolean;
	loadahead?: number;
	map?: any;
	math?: boolean;
	maxHeight?: number;
	maxWidth?: number;
	minColumnHeight?: number;
	minColumnWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	prerender?: boolean;
	ready?: WebixCallback;
	removeMissed?: boolean;
	resizeColumn?: boolean;
	resizeRow?: boolean;
	rightSplit?: number;
	rowHeight?: number;
	rowLineHeight?: number;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollAlignY?: boolean;
	scrollX?: boolean;
	scrollY?: boolean;
	select?: boolean|string;
	spans?: any[];
	subRowHeight?: string;
	subrow?: string;
	subview?: webix.ui.baseview;
	tooltip?: boolean;
	type?: any;
	url?: string;
	width?: number;
	yCount?: number;
}
type datatableEventName ='onAfterAdd'|'onAfterAreaAdd'|'onAfterAreaRemove'|'onAfterBlockSelect'|'onAfterColumnDrop'|'onAfterColumnDropOrder'|'onAfterColumnHide'|'onAfterColumnShow'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterEditStart'|'onAfterEditStop'|'onAfterFilter'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onAfterUnSelect'|'onAreaDrag'|'onBeforeAdd'|'onBeforeAreaAdd'|'onBeforeAreaRemove'|'onBeforeBlockSelect'|'onBeforeColumnDrag'|'onBeforeColumnDrop'|'onBeforeColumnDropOrder'|'onBeforeColumnHide'|'onBeforeColumnShow'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeEditStart'|'onBeforeEditStop'|'onBeforeFilter'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBeforeUnSelect'|'onBindRequest'|'onBlur'|'onCheck'|'onCollectValues'|'onColumnResize'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onHeaderClick'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLiveEdit'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onResize'|'onRowResize'|'onScrollX'|'onScrollY'|'onSelectChange'|'onStructureLoad'|'onStructureUpdate'|'onSubViewClose'|'onSubViewCreate'|'onSubViewOpen'|'onSubViewRender'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface datatable extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCellCss(id:string, name:string, css:string):void;
	addCss(id:string|number, css:string, silent?:boolean):void;
	addRowCss(id:string, css:string):void;
	addSelectArea(start:any, end:any, preserve:boolean, area_name?:string, css?:string, handle?:boolean):void;
	addSpan(id:any, column:string, width:number, height:number, value?:string, css?:string):void;
	adjust():void;
	adjustColumn(id:string|number, header?:string):void;
	adjustRowHeight(columnId:string, silent:boolean):void;
	attachEvent(type:datatableEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearSelection():void;
	clearValidation():void;
	closeSub(id:string|number):void;
	collectValues(id:string|number):any[];
	columnId(index:number):string|number;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	eachColumn(handler:WebixCallback, all?:boolean):void;
	eachRow(handler:WebixCallback, all?:boolean):void;
	edit(id:any):void;
	editCancel():void;
	editCell(row:string, col:string, preserve?:boolean, show?:boolean):void;
	editColumn(id:string):void;
	editNext():boolean;
	editRow(id:string):void;
	editStop():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	filterByAll():void;
	find(criterion:WebixCallback, first?:boolean):any;
	focusEditor():void;
	getAllSelectAreas():any;
	getChildViews():any[];
	getColumnConfig(id:string):any;
	getColumnIndex(id:string|number):number;
	getEditState():any;
	getEditor(row?:any, column?:string|number):any;
	getEditorValue():string;
	getFilter(columnID:string|number):any;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getHeaderContent(id:string|number):{ [key: string]: any; };
	getHeaderNode(columnId:string, rowIndex?:number):HTMLElement;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectArea(area_name:string):any;
	getSelectedId(asArray:boolean, asString:boolean):any;
	getSelectedItem(as_array?:boolean):any;
	getSpan():any[];
	getState():any;
	getSubView(id:string|number):any;
	getText(rowid:string|number, colid:string|number):string;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	hideColumn(id:string|number):void;
	hideOverlay():void;
	isColumnVisible(id:string|number):boolean;
	isEnabled():boolean;
	isSelected(id:string|number):void;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(node:HTMLElement|Event):any;
	mapCells(startrow:number, startcol:string, numrows:number, numcols:number, callback:WebixCallback):void;
	mapEvent(map:any):void;
	mapSelection(callback:WebixCallback):void;
	markSorting(column_id:string, direction:string):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveColumn(id:string, index:number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	openSub(id:string|number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	refreshColumns(config?:any[], reset?:boolean):void;
	refreshFilter(id:string|number):void;
	refreshHeaderContent():void;
	registerFilter(node:HTMLElement, config:any, obj:any):void;
	remove(id:string|number):void;
	removeCellCss(id:string, name:string, css_name:string):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	removeRowCss(id:string, css_name:string):void;
	removeSelectArea(area_name:string):void;
	removeSpan(id:string|number, column:string):void;
	render(id:string|number, data:any, operation:string):void;
	resize():void;
	resizeSubView(id:string|number):void;
	scrollTo(x:number, y:number):void;
	select(row_id:string|number, preserve:boolean):void;
	selectAll():void;
	selectRange(row_id:string|number, end_row_id:string|number, preserve?:boolean):void;
	serialize():any;
	setColumnWidth(id:string|number, width:number):void;
	setPage(page:number):void;
	setRowHeight(id:string|number, height:number):void;
	setState(state:any):void;
	show(force?:boolean, animation?:boolean):void;
	showCell(row:string, column:string):void;
	showColumn(id:string|number):void;
	showColumnBatch(batch:string|number, preserve:boolean):void;
	showItem(id:string|number):void;
	showItemByIndex(index:number):void;
	showOverlay(message:string):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	unselect(row_id:string|number):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	validateEditor(id?:string|number):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: datatableConfig;
	headerContent: any;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	waitData: webix.promise;
}
interface dataviewConfig{
	animate?: any;
	autoheight?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datafetch?: number;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	loadahead?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	template?: string|WebixCallback;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
}
type dataviewEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface dataview extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:dataviewEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getTopParentView():webix.ui.baseview;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: dataviewConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
	waitData: webix.promise;
}
interface datepickerConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	editable?: boolean;
	format?: string;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	icons?: boolean;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	stringResult?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	text?: string;
	timeIcon?: string;
	timepicker?: boolean;
	tooltip?: string;
	type?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: Date|string;
	width?: number;
}
type datepickerEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface datepicker extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:datepickerEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: datepickerConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface fieldsetConfig{
	animate?: any;
	body?: webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	label?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	width?: number;
}
type fieldsetEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface fieldset extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: fieldsetConfig;
	name: string;
}
interface formConfig{
	animate?: any;
	autoheight?: boolean;
	borderless?: boolean;
	cols?: any[];
	complexData?: boolean;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datatype?: string;
	disabled?: boolean;
	elements?: any[];
	elementsConfig?: { [key: string]: any; };
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	responsive?: string;
	rows?: any[];
	rules?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	type?: string;
	url?: string;
	visibleBatch?: string;
	width?: number;
}
type formEventName ='onAfterLoad'|'onAfterScroll'|'onAfterValidation'|'onBeforeLoad'|'onBeforeValidate'|'onBindRequest'|'onChange'|'onDestruct'|'onLoadError'|'onSubmit'|'onValidationError'|'onValidationSuccess'|'onValues';
interface form extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:formEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clear():void;
	clearValidation():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus(item:string):void;
	getChildViews():any[];
	getCleanValues():any;
	getDirtyValues():any;
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	getValues(details?:any):{ [key: string]: any; };
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isDirty():boolean;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	markInvalid(name:string, state?:boolean|string):void;
	parse(data:any, type:string):void;
	reconstruct():void;
	refresh():void;
	removeView(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	resizeChildren():void;
	scrollTo(x:number, y:number):void;
	setDirty(mark?:boolean):void;
	setValues(values:any, update?:boolean):void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;
	validate(mode?:any):boolean;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: formConfig;
	name: string;
}
interface gridsuggestConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	filter?: WebixCallback;
	fitMaster?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	input?: HTMLElement|string;
	keyPressTimeout?: number;
	left?: number;
	master?: webix.ui.baseview;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	template?: string|WebixTemplate;
	textValue?: string;
	toFront?: boolean;
	top?: number;
	type?: string;
	width?: number;
	zIndex?: number;
}
type gridsuggestEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValueSuggest'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface gridsuggest extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:gridsuggestEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getItemText(id:string|number):string;
	getList():webix.ui.baseview;
	getMasterValue():any;
	getNode():any;
	getParentView():any;
	getSuggestion():string;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	linkInput(input:HTMLElement):void;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setMasterValue(value:any):void;
	setPosition(x:number, y:number):void;
	setValue(value:string|number):void;
	show(node:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: gridsuggestConfig;
	name: string;
}
interface grouplistConfig{
	animate?: any;
	autoheight?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	template?: string|WebixCallback;
	templateBack?: string|string|WebixTemplate;
	templateCopy?: WebixCallback;
	templateGroup?: string|WebixCallback;
	templateItem?: string|WebixCallback;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
}
type grouplistEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface grouplist extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:grouplistEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getOpenState():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: grouplistConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface headerlayoutConfig{
	animate?: any;
	borderless?: boolean;
	collapsed?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	multi?: boolean|string;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	panelClass?: string;
	responsive?: string;
	rows?: any[];
	type?: string;
	visibleBatch?: string;
	width?: number;
}
type headerlayoutEventName ='onAfterCollapse'|'onAfterExpand'|'onBindRequest'|'onDestruct';
interface headerlayout extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:headerlayoutEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: headerlayoutConfig;
	name: string;
}
interface htmlformConfig{
	animate?: any;
	autoheight?: boolean;
	borderless?: boolean;
	complexData?: boolean;
	container?: string|HTMLElement;
	content?: string|number|HTMLElement;
	css?: string;
	data?: string|any[];
	datatype?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	onClick?: { [key: string]: any; };
	scroll?: boolean|string;
	scrollSpeed?: string;
	src?: string;
	template?: string|WebixCallback;
	url?: string;
	width?: number;
}
type htmlformEventName ='onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onBeforeLoad'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValues'|'onViewResize';
interface htmlform extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:htmlformEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	clear(all?:boolean):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus(item:string):void;
	getChildViews():any[];
	getCleanValues():any;
	getDirtyValues():any;
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	getValues(details?:any):{ [key: string]: any; };
	hasEvent(name:string):boolean;
	hide():void;
	isDirty():boolean;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	markInvalid(name:string, state?:boolean|string):void;
	parse(data:any, type:string):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	setContent(node:any):void;
	setDirty(mark?:boolean):void;
	setHTML(html:string):void;
	setValues(values:any, update?:boolean):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: htmlformConfig;
	name: string;
}
interface iconConfig{
	align?: string;
	animate?: any;
	autowidth?: boolean;
	borderless?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	popup?: string;
	tabFocus?: boolean;
	tooltip?: string;
	value?: string|number;
	width?: number;
}
type iconEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface icon extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:iconEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$renderInput(config:any):HTMLElement;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: iconConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface iframeConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	src?: string;
	width?: number;
}
type iframeEventName ='onAfterLoad'|'onAfterScroll'|'onBeforeLoad'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface iframe extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:iframeEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getIframe():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getWindow():HTMLElement;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	load(value:string):void;
	mapEvent(map:any):void;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: iframeConfig;
	name: string;
}
interface labelConfig{
	align?: string;
	animate?: any;
	autowidth?: boolean;
	borderless?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputWidth?: number;
	label?: string;
	labelPosition?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	popup?: string;
	tabFocus?: boolean;
	tooltip?: string;
	value?: string|number;
	width?: number;
}
type labelEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface label extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:labelEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setHTML(html:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$renderInput(config:any):HTMLElement;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: labelConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface layoutConfig{
	animate?: any;
	borderless?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	responsive?: string;
	rows?: any[];
	type?: string;
	visibleBatch?: string;
	width?: number;
}
type layoutEventName ='onBindRequest'|'onDestruct';
interface layout extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:layoutEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: layoutConfig;
	name: string;
}
interface listConfig{
	animate?: any;
	autoheight?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
}
type listEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface list extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:listEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: listConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface menuConfig{
	animate?: any;
	autoheight?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	openAction?: string;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	subMenuPos?: string;
	submenuConfig?: any;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
}
type menuEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMenuItemClick'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface menu extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:menuEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	disableItem(id:string|number):void;
	enable():void;
	enableItem(id:string|number):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getMenu(id:string|number):any;
	getMenuItem(id:string|number):any;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getSubMenu(id:string|number):any;
	getTopMenu():any;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	hideItem(id:string|number):void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sizeToContent():void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: menuConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface multicomboConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	button?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	keepText?: boolean;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	newValues?: boolean;
	on?: any;
	optionWidth?: number;
	options?: any;
	placeholder?: string;
	popup?: string;
	popupWidth?: number;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	separator?: string;
	suggest?: any;
	tabFocus?: boolean;
	tagMode?: boolean;
	tagTemplate?: WebixCallback;
	text?: string;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type multicomboEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface multicombo extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:multicomboEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getList():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$cssName: string;
	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: multicomboConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface multiselectConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	optionWidth?: number;
	options?: any;
	placeholder?: string;
	popup?: string;
	popupWidth?: number;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	separator?: string;
	suggest?: any;
	tabFocus?: boolean;
	text?: string;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type multiselectEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface multiselect extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:multiselectEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getList():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$cssName: string;
	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: multiselectConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface multisuggestConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	button?: boolean;
	buttonText?: string;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	filter?: WebixCallback;
	fitMaster?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	input?: HTMLElement|string;
	keyPressTimeout?: number;
	left?: number;
	master?: webix.ui.baseview;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	separator?: string;
	template?: string|WebixTemplate;
	textValue?: string;
	toFront?: boolean;
	top?: number;
	type?: string;
	value?: string|number;
	width?: number;
	zIndex?: number;
}
type multisuggestEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValueSuggest'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface multisuggest extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:multisuggestEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getButton():webix.ui.baseview;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getItemText(id:string|number):string;
	getList():webix.ui.baseview;
	getMasterValue():any;
	getNode():any;
	getParentView():any;
	getSuggestion():string;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	linkInput(input:HTMLElement):void;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setMasterValue(value:any):void;
	setPosition(x:number, y:number):void;
	setValue(value:string|number):void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: multisuggestConfig;
	name: string;
}
interface multitextConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	iconWidth?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	separator?: string;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type multitextEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface multitext extends webix.ui.baseview{
	addSection():string|number;
	adjust():void;
	attachEvent(type:multitextEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	getValueHere():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	removeSection(id?:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	setValueHere(value:string|number):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$cssName: string;
	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: multitextConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface multiviewConfig{
	animate?: any;
	borderless?: boolean;
	cells?: any;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	fitBiggest?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	keepViews?: boolean;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	responsive?: string;
	rows?: any[];
	visibleBatch?: string;
	width?: number;
}
type multiviewEventName ='onBeforeBack'|'onBindRequest'|'onDestruct'|'onViewChange';
interface multiview extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:multiviewEventName, functor:WebixCallback, id?:string):string|number;
	back(step:number):void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getActiveId():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	setValue(toshow:string|number):void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: multiviewConfig;
	name: string;
}
interface organogramConfig{
	animate?: any;
	autoheight?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	filterMode?: any;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	ready?: WebixCallback;
	removeMissed?: boolean;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	template?: string|WebixCallback;
	threeState?: boolean;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
}
type organogramEventName ='onAfterAdd'|'onAfterClose'|'onAfterContextMenu'|'onAfterDelete'|'onAfterLoad'|'onAfterOpen'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeClose'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeLoad'|'onBeforeOpen'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onFocus'|'onItemCheck'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface organogram extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:organogramEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	close(id:string|number):void;
	closeAll():void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBranchIndex(id:string|number, parent?:string|number):number;
	getChildViews():any[];
	getFirstChildId(id:string|number):string;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNextSiblingId(id:string|number):string|number;
	getNode():any;
	getOpenItems():any[];
	getParentId(id:string|number):string|number;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getState():any;
	getTopParentView():webix.ui.baseview;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isBranch(id:string|number):boolean;
	isBranchOpen(id:string|number):boolean;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	open(id:string|number, show?:boolean):void;
	openAll():void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setState(state:any):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: organogramConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface pagerConfig{
	animate?: any;
	apiOnly?: boolean;
	borderless?: boolean;
	container?: string|HTMLElement;
	count?: number;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	group?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	limit?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	page?: number;
	size?: number;
	template?: string|WebixCallback;
	width?: number;
}
type pagerEventName ='onAfterContextMenu'|'onAfterRender'|'onAfterScroll'|'onBeforeContextMenu'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface pager extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:pagerEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clone(config:any):any;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh(id?:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	select(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: pagerConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
}
interface popupConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	left?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	toFront?: boolean;
	top?: number;
	width?: number;
	zIndex?: number;
}
type popupEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface popup extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:popupEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setPosition(x:number, y:number):void;
	show(node?:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: popupConfig;
	name: string;
}
interface portletConfig{
	animate?: any;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	layoutType?: string;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	responsive?: string;
	rows?: any[];
	type?: string;
	visibleBatch?: string;
	width?: number;
}
type portletEventName ='onBindRequest'|'onDestruct';
interface portlet extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:portletEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	markDropArea(target:string, mode:string):void;
	movePortlet(target:string, mode:string):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$drag(source:HTMLElement, ev:Event):string;
	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: portletConfig;
	name: string;
}
interface propertyConfig{
	animate?: any;
	autoheight?: boolean;
	borderless?: boolean;
	complexData?: boolean;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datatype?: string;
	disabled?: boolean;
	editValue?: string;
	editable?: boolean;
	editaction?: string;
	elements?: any;
	form?: string;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	map?: any;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	nameWidth?: number;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	scroll?: boolean|string;
	scrollSpeed?: string;
	template?: string|WebixCallback;
	tooltip?: any;
	url?: string;
	width?: number;
}
type propertyEventName ='onAfterContextMenu'|'onAfterEditStart'|'onAfterEditStop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onBeforeContextMenu'|'onBeforeEditStart'|'onBeforeEditStop'|'onBeforeLoad'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLiveEdit'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface property extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:propertyEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	edit(id:any):void;
	editCancel():void;
	editNext():boolean;
	editStop():void;
	enable():void;
	focusEditor():void;
	getChildViews():any[];
	getEditState():any;
	getEditor(id?:string):any;
	getEditorValue():string;
	getFormView():webix.ui.baseview;
	getItem(id:string):any;
	getItemNode(id:string|number):void;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	getValues():{ [key: string]: any; };
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	registerType(name:string, data:any):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	setValues(values:any, update?:boolean):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	updateItem():void;
	validateEditor(id?:string|number):boolean;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: propertyConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_edit: { [key: string]: any; };
	on_mouse_move: WebixCallback;
	on_render: { [key: string]: any; };
	type: { [key: string]: any; };
}
interface radioConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	customRadio?: boolean;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	optionHeight?: number;
	options?: any[];
	popup?: string;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	vertical?: boolean;
	width?: number;
}
type radioEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface radio extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:radioEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: radioConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface rangechartConfig{
	alpha?: number;
	animate?: any;
	barWidth?: number;
	border?: boolean;
	borderColor?: string;
	borderless?: boolean;
	cant?: number;
	color?: string|WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datathrottle?: number;
	datatype?: string;
	disableLines?: boolean;
	disabled?: boolean;
	eventRadius?: number;
	fill?: string;
	fixOverflow?: boolean;
	frameId?: string;
	gradient?: boolean|string|WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	item?: any;
	label?: string|WebixCallback;
	labelOffset?: number;
	legend?: any;
	line?: any;
	lineColor?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	offset?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	origin?: number;
	padding?: any;
	pieHeight?: number;
	pieInnerText?: string|WebixCallback;
	preset?: string;
	radius?: number;
	range?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	save?: string;
	scale?: string;
	scheme?: any;
	series?: any;
	shadow?: boolean;
	tooltip?: any;
	type?: string;
	url?: string;
	value?: string|WebixTemplate;
	width?: number;
	x?: number;
	xAxis?: any;
	xValue?: string;
	y?: number;
	yAxis?: any;
	yValue?: string;
}
type rangechartEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterLoad'|'onAfterRangeChange'|'onAfterRender'|'onAfterScroll'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface rangechart extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addSeries(obj:any):void;
	adjust():void;
	attachEvent(type:rangechartEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCanvas():void;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getFrameData():any[];
	getFrameRange():any;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getTopParentView():webix.ui.baseview;
	group(config:any, mode:boolean):void;
	hasEvent(name:string):boolean;
	hide():void;
	hideSeries(series:string):void;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeAllSeries():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	serialize():any;
	setFrameRange(range:any):void;
	show(force?:boolean, animation?:boolean):void;
	showSeries(series:string):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	updateItem(id:string|number, data:any):void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	colormap: { [key: string]: any; };
	config: rangechartConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	presets: { [key: string]: any; };
}
interface rangesliderConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	max?: number;
	maxHeight?: number;
	maxWidth?: number;
	min?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	popup?: string;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	separator?: string;
	step?: number;
	stringResult?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	title?: string|WebixCallback;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type rangesliderEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSliderDrag'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface rangeslider extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:rangesliderEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$cssName: string;
	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$touchCapture: boolean;
	$view: HTMLElement;
	$width: number;
	config: rangesliderConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface resizerConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	width?: number;
}
type resizerEventName ='onAfterContextMenu'|'onAfterScroll'|'onBeforeContextMenu'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface resizer extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: resizerConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
}
interface richselectConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	options?: any;
	placeholder?: string;
	popup?: string;
	popupWidth?: number;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	text?: string;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type richselectEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface richselect extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:richselectEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getList():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getText():string;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: richselectConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface scrollviewConfig{
	animate?: any;
	body?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	width?: number;
}
type scrollviewEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface scrollview extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:scrollviewEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	scrollTo(x:number, y:number):void;
	show(force?:boolean, animation?:boolean):void;
	showView(id:string|number):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: scrollviewConfig;
	name: string;
}
interface searchConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	type?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type searchEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSearchIconClick'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface search extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:searchEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: searchConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface segmentedConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	multiview?: boolean;
	name?: string;
	on?: any;
	optionWidth?: number;
	options?: any;
	popup?: string;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type segmentedEventName ='onAfterRender'|'onAfterScroll'|'onAfterTabClick'|'onBeforeRender'|'onBeforeTabClick'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onOptionRemove'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface segmented extends webix.ui.baseview{
	addOption(id:string|number, value:any, show?:boolean, index?:number):void;
	adjust():void;
	attachEvent(type:segmentedEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	optionIndex(ID:string|number):number;
	refresh():void;
	removeOption(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: segmentedConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface selectConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	options?: any[]|string;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type selectEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface select extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:selectEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: selectConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface sidemenuConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	left?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	state?: WebixCallback;
	toFront?: boolean;
	top?: number;
	width?: number;
	zIndex?: number;
}
type sidemenuEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface sidemenu extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:sidemenuEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setPosition(x:number, y:number):void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: sidemenuConfig;
	name: string;
}
interface sliderConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	max?: number;
	maxHeight?: number;
	maxWidth?: number;
	min?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	step?: number;
	suggest?: any;
	tabFocus?: boolean;
	title?: string|WebixCallback;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type sliderEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSliderDrag'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface slider extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:sliderEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$touchCapture: boolean;
	$view: HTMLElement;
	$width: number;
	config: sliderConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface spacerConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	width?: number;
}
type spacerEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface spacer extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: spacerConfig;
	name: string;
}
interface spreadsheetConfig{
	animate?: any;
	borderless?: boolean;
	buttons?: any;
	cols?: any[];
	columnCount?: number;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datatype?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	liveEditor?: boolean;
	margin?: number;
	math?: boolean;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	readonly?: boolean;
	resizeCell?: boolean;
	responsive?: string;
	rowCount?: number;
	rows?: any[];
	subbar?: any;
	type?: string;
	url?: string;
	visibleBatch?: string;
	width?: number;
}
type spreadsheetEventName ='onAfterLoad'|'onAfterSelect'|'onBeforeLoad'|'onBeforeSpan'|'onBeforeSplit'|'onBindRequest'|'onCellChange'|'onComponentInit'|'onDataParse'|'onDataSerialize'|'onDestruct'|'onLoadError'|'onReset';
interface spreadsheet extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:spreadsheetEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	combineCells(range:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	eachSelectedCell(handler:WebixCallback):void;
	enable():void;
	getCellValue(row:number, column:number):string;
	getChildViews():any[];
	getColumn(id:string):any;
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getRow(id:string):any;
	getSelectedId():any[];
	getStyle(row:number, column:number):string;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	innerId(id:string|number):string|number;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	reconstruct():void;
	redo():void;
	refresh():void;
	removeView(id:string|number):void;
	reset():void;
	resize():void;
	resizeChildren():void;
	saveCell(row:number, column:number):void;
	serialize():any;
	setCellValue(row:number, column:any, value:string):void;
	setStyle(row:number, column:number, style:string):void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	splitCell(row:number, column:number):void;
	ui(view:any):webix.ui.baseview;
	unbind():void;
	unblockEvent():void;
	undo(id:string):void;

	$$: any;
	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: spreadsheetConfig;
	name: string;
}
interface submenuConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	autoheight?: boolean;
	autowidth?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	left?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	mouseEventDelay?: number;
	move?: boolean;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	openAction?: string;
	padding?: any;
	pager?: any;
	position?: string|WebixCallback;
	ready?: WebixCallback;
	relative?: string;
	removeMissed?: boolean;
	resize?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	subMenuPos?: string;
	submenuConfig?: any;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	toFront?: boolean;
	tooltip?: any;
	top?: number;
	type?: any;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
	zIndex?: number;
}
type submenuEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeShow'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onHide'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMenuItemClick'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface submenu extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:submenuEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	close():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	disableItem(id:string|number):void;
	enable():void;
	enableItem(id:string|number):void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBody():any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getHead():any;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getMenu(id:string|number):any;
	getMenuItem(id:string|number):any;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getSubMenu(id:string|number):any;
	getTopMenu():any;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	hideItem(id:string|number):void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	resizeChildren():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	setPosition(x:number, y:number):void;
	show(node?:HTMLElement, position?:any, point?:string):void;
	showItem(id:string|number):void;
	sizeToContent():void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	show(force:boolean,animation:boolean):void;
	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: submenuConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface suggestConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	filter?: WebixCallback;
	fitMaster?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	input?: HTMLElement|string;
	keyPressTimeout?: number;
	left?: number;
	master?: webix.ui.baseview;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	template?: string|WebixTemplate;
	textValue?: string;
	toFront?: boolean;
	top?: number;
	type?: string;
	width?: number;
	zIndex?: number;
}
type suggestEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValueSuggest'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface suggest extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:suggestEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getItemText(id:string|number):string;
	getList():webix.ui.baseview;
	getMasterValue():any;
	getNode():any;
	getParentView():any;
	getSuggestion():string;
	getTopParentView():webix.ui.baseview;
	getValue():string|number;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	linkInput(input:HTMLElement):void;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setMasterValue(value:any):void;
	setPosition(x:number, y:number):void;
	setValue(value:string|number):void;
	show(node:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: suggestConfig;
	name: string;
}
interface tabbarConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomOffset?: number;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	moreTemplate?: WebixCallback;
	multiview?: boolean;
	name?: string;
	on?: any;
	optionWidth?: number;
	options?: any;
	placeholder?: string;
	popup?: string;
	popupTemplate?: WebixCallback;
	popupWidth?: number;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tabMargin?: number;
	tabMinWidth?: number;
	tabMoreWidth?: number;
	tabOffset?: number;
	tabbarPopup?: webix.ui.baseview;
	tooltip?: string;
	topOffset?: number;
	type?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
	yCount?: number;
}
type tabbarEventName ='onAfterRender'|'onAfterScroll'|'onAfterTabClick'|'onBeforeRender'|'onBeforeTabClick'|'onBeforeTabClose'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onOptionRemove'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface tabbar extends webix.ui.baseview{
	addOption(id:string|number, value:any, show?:boolean, index?:number):void;
	adjust():void;
	attachEvent(type:tabbarEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getPopup():webix.ui.baseview;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	optionIndex(ID:string|number):number;
	refresh():void;
	removeOption(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: tabbarConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface tabviewConfig{
	animate?: any;
	borderless?: boolean;
	cells?: any[];
	cols?: any[];
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	multiview?: any;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	responsive?: string;
	rows?: any[];
	tabbar?: any;
	type?: string;
	visibleBatch?: string;
	width?: number;
}
type tabviewEventName ='onBindRequest'|'onDestruct';
interface tabview extends webix.ui.baseview{
	addView(view:any):webix.ui.baseview;
	adjust():void;
	attachEvent(type:tabviewEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getMultiview():any;
	getNode():any;
	getParentView():any;
	getTabbar():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	reconstruct():void;
	removeView(id:string|number):void;
	resize():void;
	resizeChildren():void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: tabviewConfig;
	name: string;
}
interface templateConfig{
	animate?: any;
	autoheight?: boolean;
	borderless?: boolean;
	container?: string|HTMLElement;
	content?: string|number|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datatype?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	onClick?: { [key: string]: any; };
	scroll?: boolean|string;
	scrollSpeed?: string;
	src?: string;
	template?: string|WebixCallback;
	type?: string;
	url?: string;
	width?: number;
}
type templateEventName ='onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onBeforeLoad'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface template extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:templateEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	getValues():void;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	parse(data:any, type:string):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	setContent(node:any):void;
	setHTML(html:string):void;
	setValues(obj:any, update?:boolean):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: templateConfig;
	name: string;
}
interface textConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	type?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type textEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface text extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:textEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(config:any):HTMLElement;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: textConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface textareaConfig{
	align?: string;
	animate?: any;
	attributes?: any;
	autowidth?: boolean;
	borderless?: boolean;
	bottomLabel?: string;
	bottomPadding?: number;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputPadding?: number;
	inputWidth?: number;
	invalidMessage?: string;
	label?: string;
	labelPosition?: string;
	labelWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	on?: any;
	placeholder?: string;
	popup?: string;
	readonly?: boolean;
	relatedAction?: string;
	relatedView?: string;
	required?: boolean;
	suggest?: any;
	tabFocus?: boolean;
	tooltip?: string;
	validate?: WebixCallback;
	validateEvent?: string;
	value?: string|number;
	width?: number;
}
type textareaEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface textarea extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:textareaEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setBottomText(text:string):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	validate():boolean;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$render: WebixCallback;
	$renderIcon: WebixCallback;
	$renderInput(obj:any, html:string, id:string|number):string;
	$renderLabel(config:any, id:string|number):string;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: textareaConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface toggleConfig{
	align?: string;
	animate?: any;
	autowidth?: boolean;
	borderless?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	icon?: string;
	id?: string|number;
	inputHeight?: number;
	inputWidth?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	name?: string;
	offIcon?: string;
	offLabel?: string;
	on?: any;
	onIcon?: string;
	onLabel?: string;
	popup?: string;
	tabFocus?: boolean;
	tooltip?: string;
	type?: string;
	value?: string|number;
	width?: number;
}
type toggleEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onChange'|'onDestruct'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface toggle extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:toggleEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	toggle():void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$getValue: string;
	$height: number;
	$renderInput(config:any):HTMLElement;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: toggleConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface toolbarConfig{
	animate?: any;
	borderless?: boolean;
	cols?: any[];
	complexData?: boolean;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datatype?: string;
	disabled?: boolean;
	elements?: any[];
	elementsConfig?: { [key: string]: any; };
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	isolate?: boolean;
	margin?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	padding?: number;
	paddingX?: number;
	paddingY?: number;
	responsive?: string;
	rows?: any[];
	rules?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	type?: string;
	url?: string;
	visibleBatch?: string;
	width?: number;
}
type toolbarEventName ='onAfterLoad'|'onAfterScroll'|'onAfterValidation'|'onBeforeLoad'|'onBeforeValidate'|'onBindRequest'|'onChange'|'onDestruct'|'onLoadError'|'onValidationError'|'onValidationSuccess'|'onValues';
interface toolbar extends webix.ui.baseview{
	addView(view:any, index?:number):webix.ui.baseview;
	adjust():void;
	attachEvent(type:toolbarEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clear():void;
	clearValidation():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	focus(item:string):void;
	getChildViews():any[];
	getCleanValues():any;
	getDirtyValues():any;
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getScrollState():any;
	getTopParentView():webix.ui.baseview;
	getValues(details?:any):{ [key: string]: any; };
	hasEvent(name:string):boolean;
	hide():void;
	index(obj:any):number;
	isDirty():boolean;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	mapEvent(map:any):void;
	markInvalid(name:string, state?:boolean|string):void;
	parse(data:any, type:string):void;
	reconstruct():void;
	refresh():void;
	removeView(id:string|number):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	resizeChildren():void;
	scrollTo(x:number, y:number):void;
	setDirty(mark?:boolean):void;
	setValues(values:any, update?:boolean):void;
	show(force?:boolean, animation?:boolean):void;
	showBatch(name:string):void;
	unbind():void;
	unblockEvent():void;
	validate(mode?:any):boolean;

	$getSize: any[];
	$height: number;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: toolbarConfig;
	name: string;
}
interface tooltipConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	dx?: number;
	dy?: number;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	on?: any;
	template?: string|WebixCallback;
	width?: number;
}
type tooltipEventName ='onAfterRender'|'onAfterScroll'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface tooltip extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:tooltipEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: tooltipConfig;
	name: string;
	type: { [key: string]: any; };
}
interface treeConfig{
	animate?: any;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean;
	dragscroll?: boolean|string;
	filterMode?: any;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean|string;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	threeState?: boolean;
	tooltip?: any;
	type?: any;
	url?: string;
	width?: number;
}
type treeEventName ='onAfterAdd'|'onAfterClose'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterOpen'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeClose'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeOpen'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemCheck'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPartialRender'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface tree extends webix.ui.baseview{
	add(obj:any, index?:number, parentId?:string):string;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:treeEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	checkAll(id?:string|number):void;
	checkItem(id:string):void;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	close(id:string|number):void;
	closeAll():void;
	copy(sid:string|number, tindex:number, tobj?:webix.ui.baseview, details?:any):string|number;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBranchIndex(id:string|number, parent?:string|number):number;
	getChecked():any[];
	getChildViews():any[];
	getFirstChildId(id:string|number):string;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNextSiblingId(id:string|number):string|number;
	getNode():any;
	getOpenItems():any[];
	getParentId(id:string|number):string|number;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getState():any;
	getTopParentView():webix.ui.baseview;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isBranch(id:string|number):boolean;
	isBranchOpen(id:string|number):boolean;
	isChecked(id:string|number):boolean;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveSelection(direction:string):void;
	open(id:string|number, show?:boolean):void;
	openAll():void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setState(state:any):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	uncheckAll(id?:string|number):void;
	uncheckItem(id:string):void;
	ungroup(mode:boolean):void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: treeConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface treemapConfig{
	activeItem?: boolean;
	animate?: any;
	borderless?: boolean;
	branch?: string;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	filterMode?: any;
	gravity?: number;
	header?: boolean;
	headerHeight?: number;
	headerTemplate?: string;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	subRender?: boolean;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	threeState?: boolean;
	tooltip?: any;
	type?: any;
	url?: string;
	value?: string|WebixCallback;
	width?: number;
}
type treemapEventName ='onAfterAdd'|'onAfterClose'|'onAfterContextMenu'|'onAfterDelete'|'onAfterLoad'|'onAfterOpen'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeClose'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeLoad'|'onBeforeOpen'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onFocus'|'onItemCheck'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPartialRender'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface treemap extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:treemapEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	close(id:string|number):void;
	closeAll():void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getBranchIndex(id:string|number, parent?:string|number):number;
	getChildViews():any[];
	getFirstChildId(id:string|number):string;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNextSiblingId(id:string|number):string|number;
	getNode():any;
	getOpenItems():any[];
	getPage():number;
	getPager():any;
	getParentId(id:string|number):string|number;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getState():any;
	getTopParentView():webix.ui.baseview;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isBranch(id:string|number):boolean;
	isBranchOpen(id:string|number):boolean;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	moveSelection(direction:string):void;
	open(id:string|number, show?:boolean):void;
	openAll():void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	setState(state:any):void;
	show(force?:boolean, animation?:boolean):void;
	showBranch(branchId:string|number):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	ungroup(mode:boolean):void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: treemapConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface treetableConfig{
	animate?: any;
	areaselect?: boolean;
	autoConfig?: boolean;
	autoheight?: boolean;
	autowidth?: boolean;
	blockselect?: boolean|string;
	borderless?: boolean;
	checkboxRefresh?: boolean;
	clipboard?: boolean|string;
	columnWidth?: number;
	columns?: any[];
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	datafetch?: number;
	datathrottle?: number;
	datatype?: string;
	delimiter?: any;
	disabled?: boolean;
	drag?: boolean|string;
	dragColumn?: boolean|string;
	dragscroll?: boolean|string;
	editMath?: boolean;
	editValue?: string;
	editable?: boolean;
	editaction?: string;
	externalData?: WebixCallback;
	filterMode?: any;
	fixedRowHeight?: boolean;
	footer?: boolean;
	form?: string;
	gravity?: number;
	header?: boolean;
	headerRowHeight?: number;
	headermenu?: any;
	height?: number;
	hidden?: boolean;
	hover?: string;
	id?: string|number;
	leftSplit?: number;
	liveValidation?: boolean;
	loadahead?: number;
	map?: any;
	math?: boolean;
	maxHeight?: number;
	maxWidth?: number;
	minColumnHeight?: number;
	minColumnWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	prerender?: boolean;
	ready?: WebixCallback;
	removeMissed?: boolean;
	resizeColumn?: boolean;
	resizeRow?: boolean;
	rightSplit?: number;
	rowHeight?: number;
	rowLineHeight?: number;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollAlignY?: boolean;
	scrollX?: boolean;
	scrollY?: boolean;
	select?: boolean|string;
	spans?: any[];
	subRowHeight?: string;
	subrow?: string;
	subview?: webix.ui.baseview;
	threeState?: boolean;
	tooltip?: boolean;
	type?: any;
	url?: string;
	width?: number;
	yCount?: number;
}
type treetableEventName ='onAfterAdd'|'onAfterAreaAdd'|'onAfterAreaRemove'|'onAfterBlockSelect'|'onAfterClose'|'onAfterColumnDrop'|'onAfterColumnDropOrder'|'onAfterColumnHide'|'onAfterColumnShow'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterEditStart'|'onAfterEditStop'|'onAfterFilter'|'onAfterLoad'|'onAfterOpen'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onAfterUnSelect'|'onAreaDrag'|'onBeforeAdd'|'onBeforeAreaAdd'|'onBeforeAreaRemove'|'onBeforeBlockSelect'|'onBeforeClose'|'onBeforeColumnDrag'|'onBeforeColumnDrop'|'onBeforeColumnDropOrder'|'onBeforeColumnHide'|'onBeforeColumnShow'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeEditStart'|'onBeforeEditStop'|'onBeforeFilter'|'onBeforeLoad'|'onBeforeOpen'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBeforeUnSelect'|'onBindRequest'|'onBlur'|'onCheck'|'onCollectValues'|'onColumnResize'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onHeaderClick'|'onItemCheck'|'onItemClick'|'onItemDblClick'|'onKeyPress'|'onLiveEdit'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onResize'|'onRowResize'|'onScrollX'|'onScrollY'|'onSelectChange'|'onStructureLoad'|'onStructureUpdate'|'onSubViewClose'|'onSubViewCreate'|'onSubViewOpen'|'onSubViewRender'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface treetable extends webix.ui.baseview{
	add(obj:any, index?:number, parentId?:string):string;
	addCellCss(id:string, name:string, css:string):void;
	addCss(id:string|number, css:string, silent?:boolean):void;
	addRowCss(id:string, css:string):void;
	adjust():void;
	adjustColumn(id:string|number, header?:string):void;
	adjustRowHeight(columnId:string, silent:boolean):void;
	attachEvent(type:treetableEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	checkAll(id?:string|number):void;
	checkItem(id:string):void;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	close(id:string|number):void;
	closeAll():void;
	collectValues(id:string|number):any[];
	columnId(index:number):string|number;
	copy(sid:string|number, tindex:number, tobj?:webix.ui.baseview, details?:any):string|number;
	count():number;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	eachColumn(handler:WebixCallback, all?:boolean):void;
	eachRow(handler:WebixCallback, all?:boolean):void;
	edit(id:any):void;
	editCancel():void;
	editCell(row:string, col:string, preserve?:boolean, show?:boolean):void;
	editColumn(id:string):void;
	editNext():boolean;
	editRow(id:string):void;
	editStop():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	filterByAll():void;
	find(criterion:WebixCallback, first?:boolean):any;
	focusEditor():void;
	getBranchIndex(id:string|number, parent?:string|number):number;
	getChecked():any[];
	getChildViews():any[];
	getColumnConfig(id:string):any;
	getColumnIndex(id:string|number):number;
	getEditState():any;
	getEditor(row?:any, column?:string|number):any;
	getEditorValue():string;
	getFilter(columnID:string|number):any;
	getFirstChildId(id:string|number):string;
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getHeaderContent(id:string|number):{ [key: string]: any; };
	getHeaderNode(columnId:string, rowIndex?:number):HTMLElement;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNextSiblingId(id:string|number):string|number;
	getNode():any;
	getOpenItems():any[];
	getPage():number;
	getPager():any;
	getParentId(id:string|number):string|number;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getPrevSiblingId(id:string|number):string|number;
	getScrollState():any;
	getSelectedId(asArray:boolean, asString:boolean):any;
	getSelectedItem(as_array?:boolean):any;
	getState():any;
	getText(rowid:string|number, colid:string|number):string;
	getTopParentView():webix.ui.baseview;
	getVisibleCount():number;
	group(config:any, mode:boolean):void;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	hideColumn(id:string|number):void;
	hideOverlay():void;
	isBranch(id:string|number):boolean;
	isBranchOpen(id:string|number):boolean;
	isChecked(id:string|number):boolean;
	isColumnVisible(id:string|number):boolean;
	isEnabled():boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadBranch(id:string|number, callback:WebixCallback, url:string):void;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(node:HTMLElement|Event):any;
	mapCells(startrow:number, startcol:string, numrows:number, numcols:number, callback:WebixCallback):void;
	mapEvent(map:any):void;
	markSorting(column_id:string, direction:string):void;
	move(sid:string|number, tindex:number, tobj?:webix.ui.baseview, details?:any):string|number;
	moveBottom(id:string|number):void;
	moveColumn(id:string, index:number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	open(id:string|number, show?:boolean):void;
	openAll():void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	refreshColumns(config?:any[], reset?:boolean):void;
	refreshFilter(id:string|number):void;
	refreshHeaderContent():void;
	registerFilter(node:HTMLElement, config:any, obj:any):void;
	remove(id:string|number):void;
	removeCellCss(id:string, name:string, css_name:string):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	removeRowCss(id:string, css_name:string):void;
	render(id:string|number, data:any, operation:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	serialize():any;
	setColumnWidth(id:string|number, width:number):void;
	setPage(page:number):void;
	setRowHeight(id:string|number, height:number):void;
	setState(state:any):void;
	show(force?:boolean, animation?:boolean):void;
	showCell(row:string, column:string):void;
	showColumn(id:string|number):void;
	showColumnBatch(batch:string|number, preserve:boolean):void;
	showItem(id:string|number):void;
	showItemByIndex(index:number):void;
	showOverlay(message:string):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	uncheckAll(id?:string|number):void;
	uncheckItem(id:string):void;
	ungroup(mode:boolean):void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;
	validateEditor(id?:string|number):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: treetableConfig;
	headerContent: any;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	waitData: webix.promise;
}
interface unitlistConfig{
	animate?: any;
	autoheight?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: string|WebixCallback;
	clipboard?: boolean|string;
	container?: string|HTMLElement;
	css?: string;
	data?: string|any[];
	dataFeed?: string|WebixCallback;
	datathrottle?: number;
	datatype?: string;
	disabled?: boolean;
	drag?: boolean|string;
	dragscroll?: boolean|string;
	externalData?: WebixCallback;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	layout?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	mouseEventDelay?: number;
	multiselect?: boolean;
	navigation?: boolean;
	on?: any;
	onClick?: { [key: string]: any; };
	onContext?: { [key: string]: any; };
	onDblClick?: WebixCallback;
	onMouseMove?: WebixCallback;
	pager?: any;
	ready?: WebixCallback;
	removeMissed?: boolean;
	rules?: any;
	save?: string;
	scheme?: any;
	scroll?: boolean|string;
	scrollSpeed?: string;
	select?: boolean|string;
	sort?: WebixCallback;
	template?: string|WebixCallback;
	templateCopy?: WebixCallback;
	tooltip?: any;
	type?: any;
	uniteBy?: WebixCallback;
	url?: string;
	width?: number;
	xCount?: number;
	yCount?: number;
}
type unitlistEventName ='onAfterAdd'|'onAfterContextMenu'|'onAfterDelete'|'onAfterDrop'|'onAfterLoad'|'onAfterRender'|'onAfterScroll'|'onAfterSelect'|'onAfterSort'|'onBeforeAdd'|'onBeforeContextMenu'|'onBeforeDelete'|'onBeforeDrag'|'onBeforeDragIn'|'onBeforeDrop'|'onBeforeDropOut'|'onBeforeLoad'|'onBeforeRender'|'onBeforeSelect'|'onBeforeSort'|'onBindRequest'|'onBlur'|'onDataRequest'|'onDataUpdate'|'onDestruct'|'onDragOut'|'onFocus'|'onItemClick'|'onItemDblClick'|'onItemRender'|'onKeyPress'|'onLoadError'|'onLongTouch'|'onMouseMove'|'onMouseMoving'|'onMouseOut'|'onPaste'|'onSelectChange'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onValidationError'|'onValidationSuccess'|'onViewResize';
interface unitlist extends webix.ui.baseview{
	add(obj:any, index?:number):string|number;
	addCss(id:string|number, css:string, silent?:boolean):void;
	adjust():void;
	attachEvent(type:unitlistEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	clearAll():void;
	clearCss(css:string, silent?:boolean):void;
	clearValidation():void;
	copy(sid:string|number, tindex:number, tobj?:any, details?:any):void;
	count():number;
	customize(obj:any):void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	exists(id:string|number):boolean;
	filter(text:string|WebixTemplate|WebixCallback, value:string, preserve:boolean):void;
	find(criterion:WebixCallback, first?:boolean):any;
	getChildViews():any[];
	getFirstId():string|number;
	getFormView():webix.ui.baseview;
	getIdByIndex(index:number):string|number;
	getIndexById(id:string|number):number;
	getItem(id:string|number):any;
	getItemNode(id:string|number):void;
	getLastId():string|number;
	getNextId(id:string|number, step:number):string|number;
	getNode():any;
	getPage():number;
	getPager():any;
	getParentView():any;
	getPrevId(id:string|number, step:number):string|number;
	getScrollState():any;
	getSelectedId(as_array:boolean):string|any[];
	getSelectedItem(as_array:boolean):any;
	getTopParentView():webix.ui.baseview;
	getUnitList(name:string):any[];
	getUnits():any[];
	getVisibleCount():number;
	hasCss(id:string|number, css:string):boolean;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isSelected(id:string|number):boolean;
	isVisible():boolean;
	load(url:string, type?:string, callback?:WebixCallback):webix.promise;
	loadNext(count:number, start:number, callback:WebixCallback, url:string, now:boolean):void;
	locate(e:Event):string|number;
	mapEvent(map:any):void;
	move(sid:string, tindex:number, tobj?:any, details?:any):string;
	moveBottom(id:string|number):void;
	moveDown(id:string|number, step:number):void;
	moveSelection(direction:string):void;
	moveTop(id:string|number):void;
	moveUp(id:string|number, step:number):void;
	parse(data:any, type:string):void;
	refresh(id?:string|number):void;
	remove(id:string|number):void;
	removeCss(id:string|number, css:string, silent?:boolean):void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	scrollTo(x:number, y:number):void;
	select(id:string|any[], preserve:boolean):void;
	selectAll(from?:string, to?:string):void;
	serialize():any;
	setPage(page:number):void;
	show(force?:boolean, animation?:boolean):void;
	showItem(id:string|number):void;
	sort(by:string, dir?:string, as?:string):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;
	unselect(id?:string):void;
	unselectAll():void;
	updateItem(id:string|number, data:any):void;
	validate(id?:string):boolean;

	$drag(source:HTMLElement, ev:Event):string;
	$dragHTML: WebixCallback;
	$dragIn(source:HTMLElement, target:HTMLElement, ev:Event):HTMLElement;
	$dragMark(context:any, ev:Event):boolean;
	$dragOut(source:HTMLElement, old_target:HTMLElement, new_target:HTMLElement, ev:Event):void;
	$drop(source:HTMLElement, target:HTMLElement, ev:Event):void;
	$dropAllow: WebixCallback;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: unitlistConfig;
	name: string;
	on_click: WebixCallback;
	on_context: { [key: string]: any; };
	on_dblclick: WebixCallback;
	on_mouse_move: WebixCallback;
	type: { [key: string]: any; };
	types: { [key: string]: any; };
}
interface uploaderConfig{
	align?: string;
	animate?: any;
	apiOnly?: boolean;
	autosend?: boolean;
	autowidth?: boolean;
	borderless?: boolean;
	click?: WebixCallback;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	formData?: { [key: string]: any; };
	gravity?: number;
	height?: number;
	hidden?: boolean;
	hotkey?: string;
	id?: string|number;
	inputHeight?: number;
	inputName?: string;
	inputWidth?: number;
	label?: string;
	link?: string;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	multiple?: boolean;
	name?: string;
	on?: any;
	popup?: string;
	tabFocus?: boolean;
	tooltip?: string;
	type?: string;
	value?: string|number;
	width?: number;
}
type uploaderEventName ='onAfterFileAdd'|'onAfterRender'|'onAfterScroll'|'onBeforeFileAdd'|'onBeforeRender'|'onBindRequest'|'onBlur'|'onDestruct'|'onFileUpload'|'onFileUploadError'|'onFocus'|'onItemClick'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onUploadComplete'|'onViewResize';
interface uploader extends webix.ui.baseview{
	addDropZone(element:HTMLElement):void;
	addFile(name:string, size:number, type?:string):void;
	adjust():void;
	attachEvent(type:uploaderEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	blur():void;
	callEvent(name:string, params:any[]):boolean;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	fileDialog(content?:any):void;
	focus():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getInputNode():HTMLElement;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getValue():string;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isUploaded():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	refresh():void;
	render(id:string|number, data:any, type:string):void;
	resize():void;
	send(id:number|string|WebixCallback, details:any):void;
	setValue(value:string):void;
	show(force?:boolean, animation?:boolean):void;
	stopUpload(id:string|number):void;
	sync(source:any, filter:WebixCallback, silent:boolean):void;
	unbind():void;
	unblockEvent():void;

	$cssName: string;
	$getSize: any[];
	$getValue: string;
	$height: number;
	$onUploadComplete: WebixCallback;
	$renderInput(config:any):HTMLElement;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$setValue(value:string):void;
	$skin: any;
	$updateProgress: WebixCallback;
	$view: HTMLElement;
	$width: number;
	config: uploaderConfig;
	name: string;
	on_click: WebixCallback;
	touchable: boolean;
}
interface videoConfig{
	animate?: any;
	borderless?: boolean;
	container?: string|HTMLElement;
	controls?: boolean;
	css?: string;
	disabled?: boolean;
	gravity?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	src?: string;
	width?: number;
}
type videoEventName ='onAfterScroll'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onKeyPress'|'onLongTouch'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewResize';
interface video extends webix.ui.baseview{
	adjust():void;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	define(property:string, value:any):void;
	destructor():void;
	disable():void;
	enable():void;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	getVideo():void;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	resize():void;
	show(force?:boolean, animation?:boolean):void;
	unbind():void;

	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: videoConfig;
	name: string;
}
interface windowConfig{
	animate?: any;
	autofit?: boolean;
	autofocus?: boolean;
	body?: string|webix.ui.baseview;
	borderless?: boolean;
	container?: string|HTMLElement;
	css?: string;
	disabled?: boolean;
	fullscreen?: boolean;
	gravity?: number;
	head?: any;
	headHeight?: number;
	height?: number;
	hidden?: boolean;
	id?: string|number;
	left?: number;
	maxHeight?: number;
	maxWidth?: number;
	minHeight?: number;
	minWidth?: number;
	modal?: boolean;
	move?: boolean;
	on?: any;
	padding?: any;
	position?: string|WebixCallback;
	relative?: string;
	resize?: boolean;
	toFront?: boolean;
	top?: number;
	width?: number;
	zIndex?: number;
}
type windowEventName ='onAfterScroll'|'onBeforeShow'|'onBindRequest'|'onBlur'|'onDestruct'|'onFocus'|'onHide'|'onKeyPress'|'onLongTouch'|'onShow'|'onSwipeX'|'onSwipeY'|'onTimedKeyPress'|'onTouchEnd'|'onTouchMove'|'onTouchStart'|'onViewMove'|'onViewMoveEnd'|'onViewResize';
interface window extends webix.ui.baseview{
	adjust():void;
	attachEvent(type:windowEventName, functor:WebixCallback, id?:string):string|number;
	bind(target:any, rule?:WebixCallback, format?:string):void;
	blockEvent():void;
	callEvent(name:string, params:any[]):boolean;
	close():void;
	define(property:string, value:any):void;
	destructor():void;
	detachEvent(id:string):void;
	disable():void;
	enable():void;
	getBody():any;
	getChildViews():any[];
	getFormView():webix.ui.baseview;
	getHead():any;
	getNode():any;
	getParentView():any;
	getTopParentView():webix.ui.baseview;
	hasEvent(name:string):boolean;
	hide():void;
	isEnabled():boolean;
	isVisible():boolean;
	mapEvent(map:any):void;
	resize():void;
	resizeChildren():void;
	setPosition(x:number, y:number):void;
	show(node?:HTMLElement, position?:any, point?:string):void;
	unbind():void;
	unblockEvent():void;
	show(force:boolean,animation:boolean):void;
	$getSize: any[];
	$height: number;
	$scope: any;
	$setSize(x:number, y:number):boolean;
	$skin: any;
	$view: HTMLElement;
	$width: number;
	config: windowConfig;
	name: string;
}

}}

declare function $$(id: string | Event | HTMLElement): webix.ui.baseview;
