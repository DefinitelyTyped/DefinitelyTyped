// Type definitions for DevExpress ASP.NET 16.1
// Project: http://devexpress.com/
// Definitions by: DevExpress Inc. <http://devexpress.com/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/**
 * A client-side counterpart of the DashboardViewer extension.
 */
interface MVCxClientDashboardViewer extends ASPxClientDashboardViewer {
}
/**
 * Represents a list of records from the dashboard data source.
 */
interface ASPxClientDashboardItemUnderlyingData {
    /**
     * Gets the number of rows in the underlying data set.
     */
    GetRowCount(): number;
    /**
     * Returns the value of the specified cell within the underlying data set.
     * @param rowIndex An integer value that specifies the zero-based index of the required row.
     * @param dataMember A String that specifies the required data member.
     */
    GetRowValue(rowIndex: number, dataMember: string): Object;
    /**
     * Returns an array of data members available in a data source.
     */
    GetDataMembers(): string[];
    /**
     * Returns whether or not a request for underlying data was successful.
     */
    IsDataReceived(): boolean;
    /**
     * Returns a callstack containing the error caused by an unsuccessful request for underlying data.
     */
    GetRequestDataError(): string;
}
/**
 * Contains parameters used to obtain the underlying data for the dashboard item.
 */
interface ASPxClientDashboardItemRequestUnderlyingDataParameters {
    /**
     * Gets or sets an array of data member identifiers used to obtain underlying data.
     * Value: An array of String objects that specify data member identifiers.
     */
    DataMembers: string[];
    /**
     * Gets or sets axis points used to obtain the underlying data.
     * Value: An array of ASPxClientDashboardItemDataAxisPoint objects that represent axis points.
     */
    AxisPoints: ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Gets or sets the dimension value used to obtain the underlying data.
     * Value: The dimension value.
     */
    ValuesByAxisName: Object;
    /**
     * Gets or sets the unique dimension value used to obtain the underlying data.
     * Value: The unique dimension value.
     */
    UniqueValuesByAxisName: Object;
}
/**
 * References a method executed after an asynchronous request is complete.
 */
interface ASPxClientDashboardItemRequestUnderlyingDataCompleted {
    /**
     * References a method executed after an asynchronous request is completed.
     * @param data An ASPxClientDashboardItemUnderlyingData object that represents a list of records from the dashboard data source.
     */
    (data: ASPxClientDashboardItemUnderlyingData): void;
}
/**
 * References a method that will handle the ItemClick event.
 */
interface ASPxClientDashboardItemClickEventHandler<S> {
    /**
     * References a method that will handle the ItemClick event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemClickEventArgs): void;
}
/**
 * Provides data for the ItemClick event.
 */
interface ASPxClientDashboardItemClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item for which the event has been raised.
     * Value: A String that is the dashboard item name.
     */
    ItemName: string;
    /**
     * Gets the dashboard item's client data.
     */
    GetData(): ASPxClientDashboardItemData;
    /**
     * Returns the axis point corresponding to the clicked visual element.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetAxisPoint(axisName: string): ASPxClientDashboardItemDataAxisPoint;
    /**
     * Gets measures corresponding to the clicked visual element.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
    /**
     * Gets deltas corresponding to the clicked visual element.
     */
    GetDeltas(): ASPxClientDashboardItemDataDelta[];
    /**
     * Gets the dimensions used to create a hierarchy of axis points for the specified axis.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetDimensions(axisName: string): ASPxClientDashboardItemDataDimension[];
    /**
     * Requests underlying data corresponding to the clicked visual element.
     * @param onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
     * @param dataMembers An array of String values that specify data members used to obtain underlying data.
     */
    RequestUnderlyingData(onCompleted: ASPxClientDashboardItemRequestUnderlyingDataCompleted, dataMembers: string[]): void;
}
/**
 * References a method that will handle the ItemVisualInteractivity event.
 */
interface ASPxClientDashboardItemVisualInteractivityEventHandler<S> {
    /**
     * References a method that will handle the ItemVisualInteractivity event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemVisualInteractivityEventArgs object containing event data.
     */
    (source: S, e: ASPxClientDashboardItemVisualInteractivityEventArgs): void;
}
/**
 * Provides data for the ItemVisualInteractivity event.
 */
interface ASPxClientDashboardItemVisualInteractivityEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     * Value: A String that is the component name of the dashboard item.
     */
    ItemName: string;
    /**
     * Gets the selection mode for dashboard item elements.
     */
    GetSelectionMode(): string;
    /**
     * Sets the selection mode for dashboard item elements.
     * @param selectionMode A String that specifies the selection mode.
     */
    SetSelectionMode(selectionMode: string): void;
    /**
     * Returns whether or not highlighting is enabled for the current dashboard item.
     */
    IsHighlightingEnabled(): boolean;
    /**
     * Enables highlighting for the current dashboard item.
     * @param enableHighlighting true, to enable highlighting; otherwise, false.
     */
    EnableHighlighting(enableHighlighting: boolean): void;
    /**
     * Gets data axes used to perform custom interactivity actions.
     */
    GetTargetAxes(): string[];
    /**
     * Sets data axes used to perform custom interactivity actions.
     * @param targetAxes An array of String objects that specify names of data axes.
     */
    SetTargetAxes(targetAxes: string[]): void;
    /**
     * Gets the default selection for the current dashboard item.
     */
    GetDefaultSelection(): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Sets the default selection for the current dashboard item.
     * @param values An array of ASPxClientDashboardItemDataAxisPointTuple objects specifying axis point tuples used to select default elements.
     */
    SetDefaultSelection(values: ASPxClientDashboardItemDataAxisPointTuple[]): void;
}
/**
 * References a method that will handle the ItemSelectionChanged event.
 */
interface ASPxClientDashboardItemSelectionChangedEventHandler<S> {
    /**
     * References a method that will handle the ItemSelectionChanged event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemSelectionChangedEventArgs object containing event data.
     */
    (source: S, e: ASPxClientDashboardItemSelectionChangedEventArgs): void;
}
/**
 * Provides data for the ItemSelectionChanged event.
 */
interface ASPxClientDashboardItemSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     * Value: A String that is the component name of the dashboard item.
     */
    ItemName: string;
    /**
     * Gets currently selected elements.
     */
    GetCurrentSelection(): ASPxClientDashboardItemDataAxisPointTuple[];
}
/**
 * References a method that will handle the ItemElementCustomColor event.
 */
interface ASPxClientDashboardItemElementCustomColorEventHandler<S> {
    /**
     * References a method that will handle the ItemElementCustomColor event.
     * @param source The event source.
     * @param e An ASPxClientDashboardItemElementCustomColorEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemElementCustomColorEventArgs): void;
}
/**
 * Provides data for the ItemElementCustomColor event.
 */
interface ASPxClientDashboardItemElementCustomColorEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     * Value: A String that is the component name of the dashboard item for which the event was raised.
     */
    ItemName: string;
    /**
     * Gets the axis point tuple that corresponds to the current dashboard item element.
     */
    GetTargetElement(): ASPxClientDashboardItemDataAxisPointTuple;
    /**
     * Gets the color of the current dashboard item element.
     */
    GetColor(): string;
    /**
     * Sets the color of the current dashboard item element.
     * @param color A String that specifies the color of the current dashboard item element.
     */
    SetColor(color: string): void;
    /**
     * Gets measures corresponding to the current dashboard item element.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
}
/**
 * References a method that will handle the ItemWidgetCreated event.
 */
interface ASPxClientDashboardItemWidgetCreatedEventHandler<S> {
    /**
     * References a method that will handle the ItemWidgetCreated event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemWidgetEventArgs): void;
}
/**
 * References a method that will handle the ItemWidgetUpdating event.
 */
interface ASPxClientDashboardItemWidgetUpdatingEventHandler<S> {
    /**
     * References a method that will handle the ItemWidgetUpdating event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemWidgetEventArgs): void;
}
/**
 * References a method that will handle the ItemWidgetUpdated event.
 */
interface ASPxClientDashboardItemWidgetUpdatedEventHandler<S> {
    /**
     * References a method that will handle the ItemWidgetUpdated event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemWidgetEventArgs): void;
}
/**
 * References a method that will handle the ItemBeforeWidgetDisposed event.
 */
interface ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<S> {
    /**
     * References a method that will handle the ItemBeforeWidgetDisposed event.
     * @param source The event source.
     * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardItemWidgetEventArgs): void;
}
/**
 * Provides data for events related to client widgets used to visualize data in dashboard items.
 */
interface ASPxClientDashboardItemWidgetEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     * Value: A String that is the component name of the dashboard item.
     */
    ItemName: string;
    /**
     * Returns an underlying widget corresponding to the current dashboard item.
     */
    GetWidget(): Object;
}
/**
 * Represents multidimensional data visualized in the dashboard item.
 */
interface ASPxClientDashboardItemData {
    /**
     * Gets the names of the axes that constitute the current ASPxClientDashboardItemData.
     */
    GetAxisNames(): string[];
    /**
     * Returns the specified data axis.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetAxis(axisName: string): ASPxClientDashboardItemDataAxis;
    /**
     * Gets the dimensions used to create a hierarchy of axis points for the specified axis.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetDimensions(axisName: string): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the measures for the current ASPxClientDashboardItemData object.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
    /**
     * Gets the deltas for the current ASPxClientDashboardItemData object.
     */
    GetDeltas(): ASPxClientDashboardItemDataDelta[];
    /**
     * Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point tuple.
     * @param tuple A ASPxClientDashboardItemDataAxisPointTuple object that is a tuple of axis points.
     */
    GetSlice(tuple: ASPxClientDashboardItemDataAxisPointTuple): ASPxClientDashboardItemData;
    /**
     * Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point.
     * @param axisPoint An ASPxClientDashboardItemDataAxisPoint object that is the data point in a multidimensional space.
     */
    GetSlice(axisPoint: ASPxClientDashboardItemDataAxisPoint): ASPxClientDashboardItemData;
    /**
     * Returns a total summary value for the specified measure.
     * @param measureId A String that is the measure identifier.
     */
    GetMeasureValue(measureId: string): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the summary value for the specified delta.
     * @param deltaId A String that is the data item identifier.
     */
    GetDeltaValue(deltaId: string): ASPxClientDashboardItemDataDeltaValue;
    /**
     * Returns an array of data members available in a data source.
     */
    GetDataMembers(): string[];
    /**
     * Creates a tuple based on the specified axes names and corresponding values.
     * @param values An array of name-value pairs containing the axis name and corresponding values.
     */
    CreateTuple(values: Object[]): ASPxClientDashboardItemDataAxisPointTuple;
    /**
     * Creates a tuple based on the specified axis points.
     * @param axisPoints An array of ASPxClientDashboardItemDataAxisPoint objects that specify axis points belonging to different data axes.
     */
    CreateTuple(axisPoints: ASPxClientDashboardItemDataAxisPoint[]): ASPxClientDashboardItemDataAxisPointTuple;
}
/**
 * An axis that contains data points corresponding to the specified value hierarchy.
 */
interface ASPxClientDashboardItemDataAxis {
    /**
     * Gets the dimensions used to create a hierarchy of axis points belonging to the current axis.
     */
    GetDimensions(): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the root axis point belonging to the current ASPxClientDashboardItemDataAxis.
     */
    GetRootPoint(): ASPxClientDashboardItemDataAxisPoint;
    /**
     * Returns axis points corresponding to values of the last-level dimension.
     */
    GetPoints(): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Returns axis points corresponding to the specified dimension.
     * @param dimensionId A String that is the dimension identifier.
     */
    GetPointsByDimension(dimensionId: string): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Returns the data point for the specified axis by unique values.
     * @param uniqueValues A hierarchy of unique values identifying the required data point.
     */
    GetPointByUniqueValues(uniqueValues: Object[]): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * Contains the dimension metadata.
 */
interface ASPxClientDashboardItemDataDimension {
    /**
     * Gets the dimension identifier.
     * Value: A String that is the dimension identifier.
     */
    Id: string;
    /**
     * Gets or sets the name of the dimension.
     * Value: A String that is the name of the dimension.
     */
    Name: string;
    /**
     * Gets the data member identifier for the current dimension.
     * Value: A String value that identifies a data member.
     */
    DataMember: string;
    /**
     * Gets the group interval for date-time values for the current dimension.
     * Value: A String value that represents how date-time values are grouped.
     */
    DateTimeGroupInterval: string;
    /**
     * Gets the group interval for string values.
     * Value: A String value that specifies the group interval for string values.
     */
    TextGroupInterval: string;
    /**
     * Formats the specified value using format settings of the current dimension.
     * @param value A value to be formatted.
     */
    Format(value: Object): string;
}
/**
 * Contains the measure metadata.
 */
interface ASPxClientDashboardItemDataMeasure {
    /**
     * Gets the measure identifier.
     * Value: A String that is the measure identifier.
     */
    Id: string;
    /**
     * Gets the name of the measure.
     * Value: A String that is the name of the measure.
     */
    Name: string;
    /**
     * Gets the data member that identifies the data source list used to provide data for the current measure.
     * Value: A String value that identifies the data source list used to provide data for the current measure.
     */
    DataMember: string;
    /**
     * Gets the type of summary function calculated against the current measure.
     * Value: A String value that identifies the type of summary function calculated against the current measure.
     */
    SummaryType: string;
    /**
     * Formats the specified value using format settings of the current measure.
     * @param value A value to be formatted.
     */
    Format(value: Object): string;
}
/**
 * Contains the delta metadata.
 */
interface ASPxClientDashboardItemDataDelta {
    /**
     * Gets the data item identifier.
     * Value: A String that is the data item identifier.
     */
    Id: string;
    /**
     * Gets the name of the data item container.
     * Value: A String value that is the name of the data item container.
     */
    Name: string;
    /**
     * Gets the identifier for the measure that provides actual values.
     * Value: A String value that is the measure identifier.
     */
    ActualMeasureId: string;
    /**
     * Gets the identifier for the measure that provides target values.
     * Value: A String value that is the measure identifier.
     */
    TargetMeasureId: string;
}
/**
 * Provides dimension values at the specified axis point.
 */
interface ASPxClientDashboardItemDataDimensionValue {
    /**
     * Gets the current dimension value.
     */
    GetValue(): Object;
    /**
     * Gets the unique value for the current dimension value.
     */
    GetUniqueValue(): Object;
    /**
     * Gets the display text for the current dimension value.
     */
    GetDisplayText(): string;
}
/**
 * Provides the measure value and display text.
 */
interface ASPxClientDashboardItemDataMeasureValue {
    /**
     * Gets the measure value.
     */
    GetValue(): Object;
    /**
     * Gets the measure display text.
     */
    GetDisplayText(): string;
}
/**
 * Provides delta element values.
 */
interface ASPxClientDashboardItemDataDeltaValue {
    /**
     * Provides access to the actual value displayed within the delta element.
     */
    GetActualValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the target value.
     */
    GetTargetValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the absolute difference between the actual and target values.
     */
    GetAbsoluteVariation(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the percent of variation between the actual and target values.
     */
    GetPercentVariation(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the percentage of the actual value in the target value.
     */
    GetPercentOfTarget(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the main delta value.
     */
    GetDisplayValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the first additional delta value.
     */
    GetDisplaySubValue1(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the second additional delta value.
     */
    GetDisplaySubValue2(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the value specifying the condition for displaying the delta indication.
     */
    GetIsGood(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the type of delta indicator.
     */
    GetIndicatorType(): ASPxClientDashboardItemDataMeasureValue;
}
/**
 * A point on the data axis.
 */
interface ASPxClientDashboardItemDataAxisPoint {
    /**
     * Gets the name of the axis to which the current axis point belongs.
     */
    GetAxisName(): string;
    /**
     * Gets the last level dimension corresponding to the current axis point.
     */
    GetDimension(): ASPxClientDashboardItemDataDimension;
    /**
     * Gets the collection of dimensions used to create a hierarchy of axis points from the root point to the current axis point.
     */
    GetDimensions(): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the value corresponding to the current axis point.
     */
    GetValue(): Object;
    /**
     * Gets the display text corresponding to the current axis point.
     */
    GetDisplayText(): string;
    /**
     * Gets the unique value corresponding to the current axis point.
     */
    GetUniqueValue(): Object;
    /**
     * Gets the dimension values at the specified axis point.
     */
    GetDimensionValue(): ASPxClientDashboardItemDataDimensionValue;
    /**
     * Gets the dimension value at the current axis point.
     * @param dimensionId A String value that specifies the dimension identifier.
     */
    GetDimensionValue(dimensionId: string): ASPxClientDashboardItemDataDimensionValue;
    /**
     * Gets the child axis points for the current axis point.
     */
    GetChildren(): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Gets the parent axis point for the current axis point.
     */
    GetParent(): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * Represents a tuple of axis points.
 */
interface ASPxClientDashboardItemDataAxisPointTuple {
    /**
     * Returns the axis point belonging to the default data axis.
     */
    GetAxisPoint(): ASPxClientDashboardItemDataAxisPoint;
    /**
     * Returns the axis point belonging to the specified data axis.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetAxisPoint(axisName: string): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * A client-side equivalent of the ASPxDashboardDesigner control.
 */
interface ASPxClientDashboardDesigner extends ASPxClientControl {
    /**
     * Occurs after the state of the dashboard displayed in the ASPxClientDashboardDesigner is changed.
     */
    DashboardStateChanged: ASPxClientEvent<ASPxClientDashboardStateChangedEventHandler<ASPxClientDashboardDesigner>>;
    /**
     * Occurs after another dashboard is loaded to the ASPxClientDashboardDesigner.
     */
    DashboardChanged: ASPxClientEvent<ASPxClientDashboardChangedEventHandler<ASPxClientDashboardDesigner>>;
    /**
     * For internal use.
     */
    CustomizeMenuItems: ASPxClientEvent<ASPxClientDashboardDesignerCustomizeMenuItemsEventHandler<ASPxClientDashboardDesigner>>;
    BeforeRender: ASPxClientEvent<ASPxClientDashboardDesignerBeforeRenderEventHandler<ASPxClientDashboardDesigner>>;
    /**
     * Switches the ASPxClientDashboardDesigner to the viewer mode.
     */
    SwitchToViewer(): void;
    /**
     * Switches the ASPxClientDashboardDesigner to the designer mode.
     */
    SwitchToDesigner(): void;
    /**
     * Gets the current working mode of the Web Designer.
     */
    GetWorkingMode(): string;
    /**
     * Gets the identifier of the dashboard that is displayed in the ASPxClientDashboardDesigner.
     */
    GetDashboardId(): string;
    /**
     * Gets the name of the dashboard that is displayed in the ASPxClientDashboardDesigner.
     */
    GetDashboardName(): string;
    /**
     * Gets the state of the dashboard (for instance, the master filtering state) displayed in the ASPxClientDashboardDesigner.
     */
    GetDashboardState(): string;
    /**
     * Loads a dashboard with the specified identifier.
     * @param dashboardId A String value that specifies the dashboard identifier.
     */
    LoadDashboard(dashboardId: string): void;
    /**
     * Saves a dashboard to the dashboard storage.
     */
    SaveDashboard(): void;
}
/**
 * References a method that will handle the DashboardStateChanged event.
 */
interface ASPxClientDashboardStateChangedEventHandler<S> {
    /**
     * References a method that will handle the DashboardStateChanged event.
     * @param source The event source.
     * @param e A ASPxClientDashboardStateChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardStateChangedEventArgs): void;
}
/**
 * Provides data for the DashboardStateChanged event.
 */
interface ASPxClientDashboardStateChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the current state of the dashboard.
     * Value: A String that is the current state of the dashboard.
     */
    DashboardState: string;
}
/**
 * References a method that will handle the DashboardChanged event.
 */
interface ASPxClientDashboardChangedEventHandler<S> {
    /**
     * References a method that will handle the DashboardChanged event.
     * @param source The event source.
     * @param e A ASPxClientDashboardChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardChangedEventArgs): void;
}
/**
 * Provides data for the DashboardChanged event.
 */
interface ASPxClientDashboardChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the identifier of a newly opened dashboard.
     * Value: A String values that is an identifier of newly opened dashboard.
     */
    DashboardId: string;
    /**
     * Gets the name of a newly opened dashboard.
     * Value: A String values that is the name of newly opened dashboard.
     */
    DashboardName: string;
}
interface ASPxClientDashboardDesignerCustomizeMenuItemsEventHandler<S> {
    (source: S, e: ASPxClientDashboardDesignerCustomizeMenuItemsEventArgs): void;
}
interface ASPxClientDashboardDesignerMenuItem {
    id: string;
    title: string;
    template: string;
    selected: boolean;
    disabled: boolean;
    hasSeparator: boolean;
    click: Function;
    hotKey: number;
}
interface ASPxClientDashboardDesignerCustomizeMenuItemsEventArgs extends ASPxClientEventArgs {
    Items: ASPxClientDashboardDesignerMenuItem[];
    FindById(itemId: string): ASPxClientDashboardDesignerMenuItem;
}
interface ASPxClientDashboardDesignerBeforeRenderEventHandler<S> {
    (source: S, e: ASPxClientEventArgs): void;
}
/**
 * A client-side equivalent of the ASPxDashboardViewer control.
 */
interface ASPxClientDashboardViewer extends ASPxClientControl {
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs after the available interactivity actions have changed.
     */
    ActionAvailabilityChanged: ASPxClientEvent<ASPxClientDashboardActionAvailabilityChangedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs when an end-user changes the state of the master filter.
     */
    MasterFilterSet: ASPxClientEvent<ASPxClientDashboardMasterFilterSetEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs when an end-user clears the selection in the master filter item.
     */
    MasterFilterCleared: ASPxClientEvent<ASPxClientDashboardMasterFilterClearedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Provides the capability to handle data loading errors in the ASPxClientDashboardViewer.
     */
    DataLoadingError: ASPxClientEvent<ASPxClientDashboardDataLoadingErrorEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs after a drill-down is performed.
     */
    DrillDownPerformed: ASPxClientEvent<ASPxClientDashboardDrillDownPerformedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs after a drill-up is performed.
     */
    DrillUpPerformed: ASPxClientEvent<ASPxClientDashboardDrillUpPerformedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs after the ASPxClientDashboardViewer is loaded.
     */
    Loaded: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs when an end-user clicks a dashboard item.
     */
    ItemClick: ASPxClientEvent<ASPxClientDashboardItemClickEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to provide custom visual interactivity for data-bound dashboard items that support element selection and highlighting
     */
    ItemVisualInteractivity: ASPxClientEvent<ASPxClientDashboardItemVisualInteractivityEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetCreated: ASPxClientEvent<ASPxClientDashboardItemWidgetCreatedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetUpdating: ASPxClientEvent<ASPxClientDashboardItemWidgetUpdatingEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetUpdated: ASPxClientEvent<ASPxClientDashboardItemWidgetUpdatedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemBeforeWidgetDisposed: ASPxClientEvent<ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Occurs after the selection within the dashboard item is changed.
     */
    ItemSelectionChanged: ASPxClientEvent<ASPxClientDashboardItemSelectionChangedEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Allows you to color the required dashboard item elements using the specified colors.
     */
    ItemElementCustomColor: ASPxClientEvent<ASPxClientDashboardItemElementCustomColorEventHandler<ASPxClientDashboardViewer>>;
    /**
     * Reloads data in the data sources.
     */
    ReloadData(): void;
    /**
     * Reloads data in the data sources.
     * @param parameters An array of ASPxClientDashboardParameter objects that specify dashboard parameters on the client side.
     */
    ReloadData(parameters: ASPxClientDashboardParameter[]): void;
    /**
     * Returns dashboard parameter settings and metadata.
     */
    GetParameters(): ASPxClientDashboardParameters;
    /**
     * Locks the EndUpdateParameters method call.
     */
    BeginUpdateParameters(): void;
    /**
     * Unlocks the BeginUpdateParameters method and applies changes made to the parameter settings.
     */
    EndUpdateParameters(): void;
    /**
     * Returns the currently selected range in the specified Range Filter dashboard item.
     * @param itemName A String value that specifies the component name of the Range Filter dashboard item.
     */
    GetCurrentRange(itemName: string): ASPxClientDashboardRangeFilterSelection;
    /**
     * Returns the visible range for the specified Range Filter dashboard item.
     * @param itemName A String value that specifies the component name of the Range Filter dashboard item.
     */
    GetEntireRange(itemName: string): ASPxClientDashboardRangeFilterSelection;
    /**
     * Selects the required range in the specified Range Filter dashboard item.
     * @param itemName A String that specifies the component name of the Range Filter dashboard item.
     * @param range A String value that specifies the component name of the Range Filter dashboard item.
     */
    SetRange(itemName: string, range: ASPxClientDashboardRangeFilterSelection): void;
    /**
     * Selects the specified range in the specified Range Filter dashboard item.
     * @param itemName A String that specifies the component name of the Range Filter dashboard item.
     * @param dateTimePeriodName A String that specifies the name of the predefined range used to perform a selection.
     */
    SetRange(itemName: string, dateTimePeriodName: string): void;
    /**
     * Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
     * @param itemName A String that is the component name of the dashboard item.
     */
    GetAvailableDrillDownValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns the axis point tuple identifying the current drill-down state.
     * @param itemName A String that is the component name of the dashboard item.
     */
    GetCurrentDrillDownValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple;
    /**
     * Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
     * @param itemName A String that is the component name of the master filter item.
     */
    GetAvailableFilterValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns axis point tuples identifying currently selected elements in the master filter item.
     * @param itemName A String that is the component name of the master filter item.
     */
    GetCurrentFilterValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns currently selected elements in the master filter item.
     * @param itemName A String that specifies a component name of the master filter item.
     */
    GetCurrentSelection(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Requests underlying data for the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     * @param args A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
     * @param onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
     */
    RequestUnderlyingData(itemName: string, args: ASPxClientDashboardItemRequestUnderlyingDataParameters, onCompleted: ASPxClientDashboardItemRequestUnderlyingDataCompleted): void;
    /**
     * Invokes the Dashboard Parameters dialog.
     */
    ShowParametersDialog(): void;
    /**
     * Closes the Dashboard Parameters dialog.
     */
    HideParametersDialog(): void;
    /**
     * Returns settings that specify parameters affecting how the dashboard is exported.
     */
    GetExportOptions(): ASPxClientDashboardExportOptions;
    /**
     * Specifies settings that specify parameters affecting how the dashboard is exported.
     * @param options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
     */
    SetExportOptions(options: ASPxClientDashboardExportOptions): void;
    /**
     * Exports a dashboard to a PDF file and writes it to the Response.
     */
    ExportToPdf(): void;
    /**
     * Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
     * @param options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
     */
    ExportToPdf(options: ASPxClientDashboardExportOptions): void;
    /**
     * Exports a dashboard to an Image file and writes it to the Response.
     */
    ExportToImage(): void;
    /**
     * Exports a dashboard to an Image file with the specified export options and writes it to the Response.
     * @param options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
     */
    ExportToImage(options: ASPxClientDashboardExportOptions): void;
    /**
     * Exports a dashboard item to a PDF file and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToPdf(itemName: string): void;
    /**
     * Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     * @param options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
     */
    ExportDashboardItemToPdf(itemName: string, options: ASPxClientDashboardExportOptions): void;
    /**
     * Exports a dashboard item to an Image file and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToImage(itemName: string): void;
    /**
     * Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     * @param options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
     */
    ExportDashboardItemToImage(itemName: string, options: ASPxClientDashboardExportOptions): void;
    /**
     * Exports a dashboard item to an Excel file and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToExcel(itemName: string): void;
    /**
     * Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
     * @param itemName A String that is the component name of the dashboard item to be exported.
     * @param options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
     */
    ExportDashboardItemToExcel(itemName: string, options: ASPxClientDashboardExportOptions): void;
    /**
     * Returns the dashboard width.
     */
    GetWidth(): number;
    /**
     * Returns the dashboard height.
     */
    GetHeight(): number;
    /**
     * Specifies the dashboard width.
     * @param width An integer value that specifies the dashboard width.
     */
    SetWidth(width: number): void;
    /**
     * Specifies the dashboard height.
     * @param height An integer value that specifies the dashboard height.
     */
    SetHeight(height: number): void;
    /**
     * Specifies the dashboard size.
     * @param width An integer value that specifies the dashboard width.
     * @param height An integer value that specifies the dashboard height.
     */
    SetSize(width: number, height: number): void;
    /**
     * Selects required elements by their values in the specified master filter item.
     * @param itemName A String that species the component name of the master filter item.
     * @param values Values that will be used to select elements in the master filter item.
     */
    SetMasterFilter(itemName: string, values: Object[][]): void;
    /**
     * Selects the required elements in the specified master filter item.
     * @param itemName A String that specifies the component name of the master filter item.
     * @param axisPointTuples An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
     */
    SetMasterFilter(itemName: string, axisPointTuples: ASPxClientDashboardItemDataAxisPointTuple[]): void;
    /**
     * Performs a drill-down for the required element by its value.
     * @param itemName A String that species the component name of the dashboard item.
     * @param value A value that will be used to perform a drill-down for the required element.
     */
    PerformDrillDown(itemName: string, value: Object): void;
    /**
     * Performs a drill-down for the required element.
     * @param itemName A String that specifies the component name of the dashboard item.
     * @param axisPointTuple A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
     */
    PerformDrillDown(itemName: string, axisPointTuple: ASPxClientDashboardItemDataAxisPointTuple): void;
    /**
     * Clears the specified master filter item.
     * @param itemName A String that specifies the component name of the master filter item.
     */
    ClearMasterFilter(itemName: string): void;
    /**
     * Performs a drill-up for the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     */
    PerformDrillUp(itemName: string): void;
    /**
     * Returns whether or not the specified master filter item allows selecting one or more elements.
     * @param itemName A String that specifies the component name of the master filter item.
     */
    CanSetMasterFilter(itemName: string): boolean;
    /**
     * Returns whether or not the specified master filter can be cleared in the current state.
     * @param itemName A String that specifies the component name of the master filter item.
     */
    CanClearMasterFilter(itemName: string): boolean;
    /**
     * Returns whether or not drill down is possible in the current state of the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     */
    CanPerformDrillDown(itemName: string): boolean;
    /**
     * Returns whether or not drill up is possible in the current state of the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     */
    CanPerformDrillUp(itemName: string): boolean;
    /**
     * Returns the client data for the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     */
    GetItemData(itemName: string): ASPxClientDashboardItemData;
}
/**
 * A range in the Range Filter dashboard item.
 */
interface ASPxClientDashboardRangeFilterSelection {
    /**
     * Gets or sets a maximum value in the range of the Range Filter dashboard item.
     * Value: A maximum value in the range of the Range Filter dashboard item.
     */
    Maximum: Object;
    /**
     * Gets or sets a minimum value in the range of the Range Filter dashboard item.
     * Value: A minimum value in the range of the Range Filter dashboard item.
     */
    Minimum: Object;
}
/**
 * A collection of ASPxClientDashboardParameter objects.
 */
interface ASPxClientDashboardParameters {
    /**
     * Returns an array of dashboard parameters from the ASPxClientDashboardParameters collection.
     */
    GetParameterList(): ASPxClientDashboardParameter[];
    /**
     * Returns a dashboard parameter by its name.
     * @param name A String object that specifies the parameter name.
     */
    GetParameterByName(name: string): ASPxClientDashboardParameter;
    /**
     * Returns a dashboard parameter by its index in the ASPxClientDashboardParameters collection.
     * @param index An integer value that specifies the parameter index.
     */
    GetParameterByIndex(index: number): ASPxClientDashboardParameter;
}
/**
 * A client-side dashboard parameter.
 */
interface ASPxClientDashboardParameter {
    /**
     * Gets the dashboard parameter name on the client side.
     * Value: A String that is the dashboard parameter name on the client side.
     */
    Name: string;
    /**
     * Gets the dashboard parameter value on the client side.
     * Value: A String that specifies the dashboard parameter value on the client side.
     */
    Value: Object;
    /**
     * Returns a parameter name.
     */
    GetName(): string;
    /**
     * Returns a current parameter value.
     */
    GetValue(): Object;
    /**
     * Specifies the current parameter value.
     * @param value The current parameter value.
     */
    SetValue(value: Object): void;
    /**
     * Returns a default parameter value.
     */
    GetDefaultValue(): Object;
    /**
     * Returns the parameter's description displayed to an end-user.
     */
    GetDescription(): string;
    /**
     * Returns a parameter type.
     */
    GetType(): string;
    /**
     * Returns possible parameter values.
     */
    GetValues(): ASPxClientDashboardParameterValue[];
}
/**
 * Provides access to the parameter value and display text.
 */
interface ASPxClientDashboardParameterValue {
    /**
     * Returns the parameter display text.
     */
    GetDisplayText(): string;
    /**
     * Returns a parameter value.
     */
    GetValue(): Object;
}
/**
 * Contains settings that specify parameters affecting how the dashboard or dashboard item is exported in Image format.
 */
interface ImageFormatOptions {
    /**
     * Gets or sets an image format in which the dashboard (dashboard item) is exported.
     * Value: A value returned by the DashboardExportImageFormat class that specifies an image format in which the dashboard (dashboard item) is exported.
     */
    Format: string;
    /**
     * Gets or sets the resolution (in dpi) used to export a dashboard (dashboard item) in Image format.
     * Value: An integer value that specifies the resolution (in dpi) used to export a dashboard (dashboard item) in Image format.
     */
    Resolution: number;
}
/**
 * Contains options which define how the dashboard item is exported to Excel format.
 */
interface ExcelFormatOptions {
    /**
     * Gets or sets the Excel format in which the dashboard item is exported.
     * Value: A value returned by the DashboardExportExcelFormat class that specifies the Excel format in which the dashboard item is exported.
     */
    Format: string;
    /**
     * Gets or sets a character used to separate values in a CSV document.
     * Value: A String value that specifies the character used to separate values in a CSV document.
     */
    CsvValueSeparator: string;
}
/**
 * Contains settings that specify parameters affecting how the Grid dashboard item is exported.
 */
interface GridExportOptions {
    /**
     * Gets or sets whether the size of the Grid dashboard item is changed according to the width of the exported page.
     * Value: true, to change the size of the Grid dashboard item according to the width of the exported page; otherwise, false.
     */
    FitToPageWidth: boolean;
    /**
     * Gets or sets whether to print column headers of the Grid dashboard item on every page.
     * Value: true, to print column headers on every page; otherwise, false.
     */
    PrintHeadersOnEveryPage: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Pivot dashboard item is exported.
 */
interface PivotExportOptions {
    /**
     * Gets or sets whether to print the column headers of the pivot dashboard item on every page.
     * Value: true, to print column headers on every page; otherwise, false.
     */
    PrintHeadersOnEveryPage: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Pie dashboard item is exported.
 */
interface PieExportOptions {
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     * Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Gauge dashboard item is exported.
 */
interface GaugeExportOptions {
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     * Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Card dashboard item is exported.
 */
interface CardExportOptions {
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     * Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Range Filter dashboard item is exported.
 */
interface RangeFilterExportOptions {
    /**
     * Gets or sets whether the page orientation used to export a Range Filter dashboard item is selected automatically.
     * Value: true, to automatically select the page orientation used to export a Range Filter dashboard item; otherwise, false.
     */
    AutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Range Filter dashboard item.
     * Value: A value returned by the RangeFilterExportSizeMode class that specifies the export size mode for the Range Filter dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how Chart dashboard items are exported.
 */
interface ChartExportOptions {
    /**
     * Gets or sets whether the page orientation used to export a Chart dashboard item is selected automatically.
     * Value: true, to automatically select the page orientation used to export a Chart dashboard item; otherwise, false.
     */
    AutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Chart dashboard item.
     * Value: A value returned by the ChartExportSizeMode class that specifies the export size mode for the Chart dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how map dashboard items are exported.
 */
interface MapExportOptions {
    /**
     * Gets or sets whether the page orientation used to export a map dashboard item is selected automatically.
     * Value: true, to automatically select the page orientation used to export a map dashboard item; otherwise, false.
     */
    AutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the map dashboard item.
     * Value: A value returned by the MapExportSizeMode class that specifies specifies the export size mode for the map dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how the dashboard (dashboard item) is exported.
 */
interface ASPxClientDashboardExportOptions {
    /**
     * Gets or sets the standard paper size.
     * Value: A string value returned by the DashboardExportPaperKind class that specifies the standard paper size.
     */
    PaperKind: string;
    /**
     * Gets or sets the page orientation used to export a dashboard (dashboard item).
     * Value: A string value returned by the DashboardExportPageLayout class that specifies the page orientation used to export a dashboard (dashboard item).
     */
    PageLayout: string;
    /**
     * Gets or sets the mode for scaling when exporting a dashboard (dashboard item).
     * Value: A string value returned by the DashboardExportScaleMode class that specifies the mode for scaling when exporting a dashboard (dashboard item).
     */
    ScaleMode: string;
    /**
     * Gets or sets the scale factor (in fractions of 1) by which a dashboard (dashboard item) is scaled.
     * Value: A Single value that specifies the scale factor by which a dashboard (dashboard item) is scaled.
     */
    ScaleFactor: number;
    /**
     * Gets or sets the number of horizontal/vertical pages spanning the total width/height of a dashboard (dashboard item).
     * Value: An integer value that specifies the number of horizontal/vertical pages spanning the total width/height of a dashboard (dashboard item).
     */
    AutoFitPageCount: number;
    /**
     * Gets or sets the title of the exported document.
     * Value: A String value that specifies the title of the exported document.
     */
    Title: string;
    /**
     * Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title.
     * Value: A DefaultBoolean value that specifies whether a dashboard title (or dashboard item's caption) is included as the exported document title.
     */
    ShowTitle: boolean;
    /**
     * Gets or sets the filter state's location on the exported document.
     * Value: A string value returned by the DashboardExportFilterState class that specifies the filter state's location on the exported document.
     */
    FilterState: string;
    /**
     * Provides access to options for exporting a dashboard or individual items in Image format.
     * Value: An ImageFormatOptions object containing settings that specify parameters affecting how the dashboard or dashboard item is exported in Image format.
     */
    ImageOptions: ImageFormatOptions;
    /**
     * Provides access to options for exporting individual dashboard items in Excel format.
     * Value: An ExcelFormatOptions object containing settings that specify parameters affecting how the dashboard item is exported in Excel format.
     */
    ExcelOptions: ExcelFormatOptions;
    /**
     * Provides access to options for exporting a Grid dashboard item.
     * Value: A GridExportOptions object containing settings that specify parameters that affect how Grid dashboard items are exported.
     */
    GridOptions: GridExportOptions;
    /**
     * Provides access to options for exporting a Pivot dashboard item.
     * Value: A PivotExportOptions object containing settings that specify parameters that affect how Pivot dashboard items are exported.
     */
    PivotOptions: PivotExportOptions;
    /**
     * Provides access to options for exporting a Pie dashboard item.
     * Value: A PieExportOptions object containing settings that specify parameters that affect how Pie dashboard items are exported.
     */
    PieOptions: PieExportOptions;
    /**
     * Provides access to options for exporting a Gauge dashboard item.
     * Value: A GaugeExportOptions object containing settings that specify parameters that affect how Gauge dashboard items are exported.
     */
    GaugeOptions: GaugeExportOptions;
    /**
     * Provides access to options for exporting a Card dashboard item.
     * Value: A CardExportOptions object containing settings that specify parameters that affect how Card dashboard items are exported.
     */
    CardOptions: CardExportOptions;
    /**
     * Provides access to options for exporting a Range Filter dashboard item.
     * Value: A RangeFilterExportOptions object containing settings that specify parameters affecting how the Range Filter dashboard item is exported.
     */
    RangeFilterOptions: RangeFilterExportOptions;
    /**
     * Provides access to options for exporting a Chart dashboard item.
     * Value: A ChartExportOptions object containing settings that specify parameters that affect how Chart dashboard items are exported.
     */
    ChartOptions: ChartExportOptions;
    /**
     * Provides access to options for exporting map dashboard items.
     * Value: A MapExportOptions object containing settings that specify parameters that affect how map dashboard items are exported.
     */
    MapOptions: MapExportOptions;
}
/**
 * References a method that will handle the ActionAvailabilityChanged event.
 */
interface ASPxClientDashboardActionAvailabilityChangedEventHandler<S> {
    /**
     * References a method that will handle the ActionAvailabilityChanged event.
     * @param source The event source.
     * @param e A ASPxClientDashboardActionAvailabilityChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardActionAvailabilityChangedEventArgs): void;
}
/**
 * Provides data for the ActionAvailabilityChanged event.
 */
interface ASPxClientDashboardActionAvailabilityChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets whether or not data reloading is available in the current state of dashboard item.
     * Value: true, if data reloading is available in the current state of dashboard item; otherwise, false.
     */
    IsReloadDataAvailable: boolean;
    /**
     * Gets interactivity actions currently available for the dashboard item.
     * Value: An array of ASPxClientDashboardItemAction objects that represent interactivity actions currently available for the dashboard item.
     */
    ItemActions: ASPxClientDashboardItemAction[];
}
/**
 * References a method that will handle the DataLoadingError event.
 */
interface ASPxClientDashboardDataLoadingErrorEventHandler<S> {
    /**
     * References a method that will handle the DataLoadingError event.
     * @param source The event source.
     * @param e A ASPxClientDashboardDataLoadingErrorEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardDataLoadingErrorEventArgs): void;
}
/**
 * Provides data for the DataLoadingError event.
 */
interface ASPxClientDashboardDataLoadingErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Allows you to determine whether or not the error message will be shown.
     */
    IsErrorMessageShown(): boolean;
    /**
     * Allows you to specify whether to show the error message.
     * @param value true, to show the error message; otherwise, false.
     */
    ShowErrorMessage(value: boolean): void;
    /**
     * Allows you to obtain the displayed error message.
     */
    GetError(): string;
    /**
     * Allows you to specify the displayed error message.
     * @param value A string value that specifies the displayed error message.
     */
    SetError(value: string): void;
}
/**
 * Represents an interactivity action in the dashboard item.
 */
interface ASPxClientDashboardItemAction {
    /**
     * Gets the name of the dashboard item.
     * Value: A String that specifies the name of the dashboard item.
     */
    ItemName: string;
    /**
     * Gets interactivity actions performed on a dashboard item.
     * Value: An array of ASPxClientDashboardAction values that specify interactivity actions performed on a dashboard item.
     */
    Actions: any[];
}
declare enum ASPxClientDashboardAction {
    SetMasterFilter=0,
    ClearMasterFilter=1,
    DrillDown=2,
    DrillUp=3
}
/**
 * References a method that will handle the MasterFilterSet event.
 */
interface ASPxClientDashboardMasterFilterSetEventHandler<S> {
    /**
     * References a method that will handle the MasterFilterSet event.
     * @param source The event source.
     * @param e A ASPxClientDashboardMasterFilterSetEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardMasterFilterSetEventArgs): void;
}
/**
 * Provides data for the MasterFilterSet event.
 */
interface ASPxClientDashboardMasterFilterSetEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item.
     * Value: A String that specifies the name of the dashboard item.
     */
    ItemName: string;
    /**
     * Gets values of currently selected elements in the master filter item.
     * Value: Values of currently selected elements in the master filter item.
     */
    Values: Object[][];
    /**
     * Returns whether or not the specified value is NullValue.
     * @param value The specified value.
     */
    IsNullValue(value: Object): boolean;
    /**
     * Returns whether or not the specified value is OthersValue.
     * @param value The specified value.
     */
    IsOthersValue(value: Object): boolean;
}
/**
 * References a method that will handle the MasterFilterCleared event.
 */
interface ASPxClientDashboardMasterFilterClearedEventHandler<S> {
    /**
     * References a method that will handle the MasterFilterCleared event.
     * @param source The event source.
     * @param e A ASPxClientDashboardMasterFilterClearedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardMasterFilterClearedEventArgs): void;
}
/**
 * Provides data for the MasterFilterCleared event.
 */
interface ASPxClientDashboardMasterFilterClearedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item.
     * Value: A String that is the name of the dashboard item.
     */
    ItemName: string;
}
/**
 * References a method that will handle the DrillDownPerformed event.
 */
interface ASPxClientDashboardDrillDownPerformedEventHandler<S> {
    /**
     * References a method that will handle the DrillDownPerformed event.
     * @param source The event source.
     * @param e A ASPxClientDashboardDrillDownPerformedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardDrillDownPerformedEventArgs): void;
}
/**
 * Provides data for the DrillDownPerformed event.
 */
interface ASPxClientDashboardDrillDownPerformedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item.
     * Value: A String that specifies the name of the dashboard item.
     */
    ItemName: string;
    /**
     * Gets the bottommost value from the current drill-down hierarchy.
     * Value: The bottommost value from the current drill-down hierarchy.
     */
    Value: Object[];
    /**
     * Returns whether or not the specified value is NullValue.
     * @param value The specified value.
     */
    IsNullValue(value: Object): boolean;
    /**
     * Returns whether or not the specified value is OthersValue.
     * @param value The specified value.
     */
    IsOthersValue(value: Object): boolean;
}
/**
 * References a method that will handle the DrillUpPerformed event.
 */
interface ASPxClientDashboardDrillUpPerformedEventHandler<S> {
    /**
     * References a method that will handle the DrillUpPerformed event.
     * @param source The event source.
     * @param e A ASPxClientDashboardDrillUpPerformedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDashboardDrillUpPerformedEventArgs): void;
}
/**
 * Provides data for the DrillUpPerformed event.
 */
interface ASPxClientDashboardDrillUpPerformedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item.
     * Value: A String that is the name of the dashboard item.
     */
    ItemName: string;
}
/**
 * Serves as the base object for all the editors included in the client-side object model.
 */
interface ASPxClientEditBase extends ASPxClientControl {
    /**
     * Returns the editor's value.
     */
    GetValue(): Object;
    /**
     * Changes the editor's value.
     * @param value An object representing the data to be assigned to the editor's edit value.
     */
    SetValue(value: Object): void;
    /**
     * Returns a value indicating whether an editor is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether an editor is enabled.
     * @param value true to enable the editor; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the text displayed in the editor caption.
     */
    GetCaption(): string;
    /**
     * Specifies the text displayed in the editor caption.
     * @param caption A string value specifying the editor caption.
     */
    SetCaption(caption: string): void;
}
/**
 * Serves as the base object for all the editors that support validation.
 */
interface ASPxClientEdit extends ASPxClientEditBase {
    /**
     * Fires on the client side when the editor receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientEdit>>;
    /**
     * Fires on the client side when the editor loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientEdit>>;
    /**
     * Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
     */
    Validation: ASPxClientEvent<ASPxClientEditValidationEventHandler<ASPxClientEdit>>;
    /**
     * Fires after the editor's value has been changed by end-user interactions.
     */
    ValueChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientEdit>>;
    /**
     * Returns an HTML element that represents the control's input element.
     */
    GetInputElement(): Object;
    /**
     * Sets input focus to the editor.
     */
    Focus(): void;
    /**
     * Gets a value that indicates whether the editor's value passes validation.
     */
    GetIsValid(): boolean;
    /**
     * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
     */
    GetErrorText(): string;
    /**
     * Sets a value that specifies whether the editor's value is valid.
     * @param isValid True if the editor's value is valid; otherwise, False.
     */
    SetIsValid(isValid: boolean): void;
    /**
     * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     * @param errorText A string value representing the error text.
     */
    SetErrorText(errorText: string): void;
    /**
     * Performs the editor's validation.
     */
    Validate(): void;
}
/**
 * Represents the client-side equivalent of the ASPxBinaryImage control.
 */
interface ASPxClientBinaryImage extends ASPxClientEdit {
    /**
     * Occurs on the client side after an image is clicked.
     */
    Click: ASPxClientEvent<ASPxClientEditEventHandler<ASPxClientBinaryImage>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientBinaryImage>>;
    /**
     * Occurs after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientBinaryImage>>;
    /**
     * Fires on the client side if any server error occurs during server-side processing of a callback sent by the ASPxClientBinaryImage.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientBinaryImage>>;
    /**
     * Sets the size of the image editor.
     * @param width An integer value that specifies the control's width.
     * @param height An integer value that specifies the control's height.
     */
    SetSize(width: number, height: number): void;
    /**
     * For internal use only.
     */
    GetValue(): Object;
    /**
     * For internal use only.
     * @param value 
     */
    SetValue(value: Object): void;
    /**
     * Removes an image from the editor content.
     */
    Clear(): void;
    /**
     * Returns a name of the last uploaded file.
     */
    GetUploadedFileName(): string;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * Represents the client-side equivalent of the ASPxButton control.
 */
interface ASPxClientButton extends ASPxClientControl {
    /**
     * Occurs on the client side when the button's checked state is changed.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientButton>>;
    /**
     * Fires on the client side when the button receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientButton>>;
    /**
     * Fires on the client side when the button loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientButton>>;
    /**
     * Occurs on the client side after a button is clicked.
     */
    Click: ASPxClientEvent<ASPxClientButtonClickEventHandler<ASPxClientButton>>;
    /**
     * Simulates a mouse click action on the button control.
     */
    DoClick(): void;
    /**
     * Returns a value indicating whether the button is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value that specifies the button's checked status.
     * @param value true if the button is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns the text displayed within the button.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the button.
     * @param value A string value specifying the text to be displayed within the button.
     */
    SetText(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the button.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL pointing to the image displayed within the button.
     * @param value A string value that is the URL to the image displayed within the button.
     */
    SetImageUrl(value: string): void;
    /**
     * Sets a value specifying whether the button is enabled.
     * @param value true to enable the button; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns a value indicating whether the button is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets input focus to the button.
     */
    Focus(): void;
}
/**
 * A method that will handle the client Click event.
 */
interface ASPxClientButtonClickEventHandler<S> {
    /**
     * A method that will handle the client Click event.
     * @param source An object that is the event's source.
     * @param e An ASPxClientButtonClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientButtonClickEventArgs): void;
}
/**
 * Provides data for the Click event.
 */
interface ASPxClientButtonClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Specifies whether both the event's default action and the event's bubbling upon the hierarchy of event handlers should be canceled.
     * Value: true to cancel the event's default action and the event's bubbling upon the hierarchy of event handlers; otherwise, false.
     */
    cancelEventAndBubble: boolean;
}
/**
 * Represents the client-side equivalent of the ASPxCalendar control.
 */
interface ASPxClientCalendar extends ASPxClientEdit {
    /**
     * Fires on the client side after the selected date has been changed within the calendar.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client side when the month displayed within the calendar is changed.
     */
    VisibleMonthChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCalendar>>;
    /**
     * Allows you to disable the calendar's days.
     */
    CustomDisabledDate: ASPxClientEvent<ASPxClientCalendarCustomDisabledDateEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client side after the callback server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCalendar>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCalendar.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCalendar>>;
    /**
     * Tests whether the specified date is selected.
     * @param date A date-time value that specifies the date to test.
     */
    IsDateSelected(date: Date): boolean;
    /**
     * Sets the date that specifies the month and year to be displayed in the calendar.
     * @param date The date that specifies calendar's visible month and year.
     */
    SetVisibleDate(date: Date): void;
    /**
     * Sets the calendar's selected date.
     * @param date A date object that specifies the calendar's selected date.
     */
    SetSelectedDate(date: Date): void;
    /**
     * Returns the calendar's selected date.
     */
    GetSelectedDate(): Date;
    /**
     * Gets the date that determines the month and year that are currently displayed in the calendar.
     */
    GetVisibleDate(): Date;
    /**
     * Selects the specified date within the calendar.
     * @param date A date-time value that specifies the selected date.
     */
    SelectDate(date: Date): void;
    /**
     * Selects the specified range of dates within the calendar.
     * @param start A date-time value that specifies the range's first date.
     * @param end A date-time value that specifies the range's last date.
     */
    SelectRange(start: Date, end: Date): void;
    /**
     * Deselects the specified date within the calendar.
     * @param date A date-time value that specifies the date to deselect.
     */
    DeselectDate(date: Date): void;
    /**
     * Deselects the specified range of dates within the calendar.
     * @param start A date-time value that specifies the range's first date.
     * @param end A date-time value that specifies the range's last date.
     */
    DeselectRange(start: Date, end: Date): void;
    /**
     * Deselects all the selected dates within the calendar.
     */
    ClearSelection(): void;
    /**
     * Returns a list of dates which are selected within the calendar.
     */
    GetSelectedDates(): Date[];
    /**
     * Gets the minimum date on the calendar.
     */
    GetMinDate(): Date;
    /**
     * Sets the minimum date of the calendar.
     * @param date A DateTime object representing the minimum date.
     */
    SetMinDate(date: Date): void;
    /**
     * Gets the maximum date on the calendar.
     */
    GetMaxDate(): Date;
    /**
     * Sets the maximum date of the calendar.
     * @param date A DateTime object representing the maximum date.
     */
    SetMaxDate(date: Date): void;
}
/**
 * Provides data for the CustomDisabledDate event.
 */
interface ASPxClientCalendarCustomDisabledDateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the date processed in the calendar.
     * Value: A DateTime value containing processed data.
     */
    date: Date;
    /**
     * Gets or sets a value specifying whether selection of the processed calendar date is disabled.
     * Value: true, if the date is disabled; otherwise, false.
     */
    isDisabled: boolean;
}
/**
 * A method that will handle the client CustomDisabledDate event.
 */
interface ASPxClientCalendarCustomDisabledDateEventHandler<S> {
    /**
     * A method that will handle the client CustomDisabledDate event.
     * @param source The event source.
     * @param e An ASPxClientCalendarCustomDisabledDateEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCalendarCustomDisabledDateEventArgs): void;
}
/**
 * Represents the client-side equivalent of the ASPxCaptcha control.
 */
interface ASPxClientCaptcha extends ASPxClientControl {
    /**
     * Sets input focus to the control's text box.
     */
    Focus(): void;
    /**
     * Refreshes the code displayed within the editor's challenge image.
     */
    Refresh(): void;
}
/**
 * Represents the client-side equivalent of the ASPxCheckBox control.
 */
interface ASPxClientCheckBox extends ASPxClientEdit {
    /**
     * Occurs on the client side when the editor's checked state is changed.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCheckBox>>;
    /**
     * Returns a value indicating whether the check box editor is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value which specifies the checked status of the check box editor.
     * @param isChecked true if the check box editor is checked; otherwise, false.
     */
    SetChecked(isChecked: boolean): void;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Returns a value which specifies a check box checked state.
     */
    GetCheckState(): string;
    /**
     * Sets a value specifying the state of a check box.
     * @param checkState A string value matches one of the CheckState enumeration values.
     */
    SetCheckState(checkState: string): void;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
}
/**
 * Represents the client-side equivalent of the ASPxRadioButton control.
 */
interface ASPxClientRadioButton extends ASPxClientCheckBox {
    /**
     * Returns a value indicating whether the radio button is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value which specifies the radio button's checked status.
     * @param isChecked true if the radio button is checked; otherwise, false.
     */
    SetChecked(isChecked: boolean): void;
}
/**
 * Represents a base for client-side objects which allow single-line text input.
 */
interface ASPxClientTextEdit extends ASPxClientEdit {
    /**
     * Occurs on the client-side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTextEdit>>;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
    /**
     * Selects all text in the text editor.
     */
    SelectAll(): void;
    /**
     * Sets the caret position within the edited text.
     * @param position An integer value that specifies the zero-based index of a text character that shall precede the caret.
     */
    SetCaretPosition(position: number): void;
    /**
     * Selects the specified portion of the editor's text.
     * @param startPos A zero-based integer value specifying the selection's starting position.
     * @param endPos A zero-based integer value specifying the selection's ending position.
     * @param scrollToSelection true to scroll the editor's contents to make the selection visible; otherwise, false.
     */
    SetSelection(startPos: number, endPos: number, scrollToSelection: boolean): void;
}
/**
 * Represents a base for client-side editors which are capable of displaying and editing text data in their edit regions.
 */
interface ASPxClientTextBoxBase extends ASPxClientTextEdit {
}
/**
 * Represents a base for client button editor objects.
 */
interface ASPxClientButtonEditBase extends ASPxClientTextBoxBase {
    /**
     * Occurs on the client side after an editor button is clicked.
     */
    ButtonClick: ASPxClientEvent<ASPxClientButtonEditClickEventHandler<ASPxClientButtonEditBase>>;
    /**
     * Specifies whether the button is visible.
     * @param number An integer value specifying the button's index within the Buttons collection.
     * @param value true, to make the button visible; otherwise, false.
     */
    SetButtonVisible(number: number, value: boolean): void;
    /**
     * Returns a value specifying whether a button is displayed.
     * @param number An integer value specifying the button's index within the Buttons collection.
     */
    GetButtonVisible(number: number): boolean;
}
/**
 * Represents a base class for the editors that contain a drop down window.
 */
interface ASPxClientDropDownEditBase extends ASPxClientButtonEditBase {
    /**
     * Occurs on the client-side when the drop down window is opened.
     */
    DropDown: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Occurs on the client side when the drop down window is closed.
     */
    CloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
     */
    QueryCloseUp: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Modifies the size of the drop down window in accordance with its content.
     */
    AdjustDropDownWindow(): void;
    /**
     * Invokes the editor's drop down window.
     */
    ShowDropDown(): void;
    /**
     * Closes the opened drop down window of the editor.
     */
    HideDropDown(): void;
}
/**
 * Represents the client-side equivalent of the ASPxColorEdit control.
 */
interface ASPxClientColorEdit extends ASPxClientDropDownEditBase {
    /**
     * Fires after the selected color has been changed within the color editor via end-user interaction.
     */
    ColorChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientColorEdit>>;
    /**
     * This event is not in effect for the ASPxClientColorEdit. Use the ColorChanged event instead.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientColorEdit>>;
    /**
     * Returns the color editor's value.
     */
    GetColor(): string;
    /**
     * Specifies the color value for the color editor.
     * @param value A string value specifying the editor color.
     */
    SetColor(value: string): void;
    /**
     * Indicates whether the automatic color item is selected.
     */
    IsAutomaticColorSelected(): boolean;
}
/**
 * Represent the client-side equivalent of the ASPxComboBox control.
 */
interface ASPxClientComboBox extends ASPxClientDropDownEditBase {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientComboBox>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientComboBox>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientComboBox>>;
    /**
     * Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientComboBox>>;
    /**
     * Specifies the text displayed within the editor's edit box.
     * @param text A string value specifying the editor's text.
     */
    SetText(text: string): void;
    /**
     * Adds a new item to the editor specifying the item's display text and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     */
    AddItem(text: string): number;
    /**
     * Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     */
    AddItem(text: string, value: Object): number;
    /**
     * Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    AddItem(text: string, value: Object, imageUrl: string): number;
    /**
     * Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, text: string, value: Object, imageUrl: string): void;
    /**
     * Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     */
    InsertItem(index: number, text: string, value: Object): void;
    /**
     * Inserts a new item specified by its display text into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     */
    InsertItem(index: number, text: string): void;
    /**
     * Removes an item specified by its index from the client list editor.
     * @param index An integer value representing the index of the list item to be removed.
     */
    RemoveItem(index: number): void;
    /**
     * Removes all items from the client combo box editor.
     */
    ClearItems(): void;
    /**
     * Prevents the client combobox editor from being rendered until the EndUpdate method is called.
     */
    BeginUpdate(): void;
    /**
     * Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
     */
    EndUpdate(): void;
    /**
     * Scrolls the editor's item list, so that the specified item becomes visible.
     * @param index An integer value that specifies the item's index within the editor's client item list.
     */
    MakeItemVisible(index: number): void;
    /**
     * Returns an item specified by its index within the combo box editor's item collection.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): ASPxClientListEditItem;
    /**
     * Returns a combo box item by its text.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): ASPxClientListEditItem;
    /**
     * Returns a combo box item by its value.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: Object): ASPxClientListEditItem;
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns the index of the selected item within the combo box editor.
     */
    GetSelectedIndex(): number;
    /**
     * Sets the combobox editor's selected item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to select.
     */
    SetSelectedIndex(index: number): void;
    /**
     * Returns the combo box editor's selected item.
     */
    GetSelectedItem(): ASPxClientListEditItem;
    /**
     * Sets the list editor's selected item.
     * @param item An ASPxClientListEditItem object that specifies the item to select.
     */
    SetSelectedItem(item: ASPxClientListEditItem): void;
    /**
     * Gets the text displayed in the editor's edit box.
     */
    GetText(): string;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     */
    AddItem(texts: string[]): number;
    /**
     * Adds a new item to the end of the control's items collection.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     */
    AddItem(texts: string[], value: Object): number;
    /**
     * Adds a new item to the end of the control's items collection.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    AddItem(texts: string[], value: Object, imageUrl: string): number;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A String value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, texts: string[], value: Object, imageUrl: string): void;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     */
    InsertItem(index: number, texts: string[], value: Object): void;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     */
    InsertItem(index: number, texts: string[]): void;
    /**
     * Determines whether the drop-down content is loaded; if not - loads the content.
     * @param callbackFunction An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
     */
    EnsureDropDownLoaded(callbackFunction: Object): void;
}
/**
 * Represents the client-side equivalent of the ASPxDateEdit control.
 */
interface ASPxClientDateEdit extends ASPxClientDropDownEditBase {
    /**
     * Fires after the selected date has been changed within the date editor.
     */
    DateChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDateEdit>>;
    /**
     * Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
     */
    ParseDate: ASPxClientEvent<ASPxClientParseDateEventHandler<ASPxClientDateEdit>>;
    /**
     * Allows you to disable the calendar's days.
     */
    CalendarCustomDisabledDate: ASPxClientEvent<ASPxClientCalendarCustomDisabledDateEventHandler<ASPxClientDateEdit>>;
    /**
     * This event is not in effect for the ASPxClientDateEdit. Use the DateChanged event instead.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDateEdit>>;
    /**
     * Returns the calendar of the date editor.
     */
    GetCalendar(): ASPxClientCalendar;
    /**
     * Returns the built-in time edit control.
     */
    GetTimeEdit(): ASPxClientTimeEdit;
    /**
     * Sets the date editor's value.
     * @param date A date object specifying the value to assign to the date editor.
     */
    SetDate(date: Object): void;
    /**
     * Returns a date that is the date editor's value.
     */
    GetDate(): Object;
    /**
     * Returns the number of days in a range selected within a date edit.
     */
    GetRangeDayCount(): number;
    /**
     * Gets the minimum date of the editor.
     */
    GetMinDate(): Date;
    /**
     * Sets the minimum date of the editor.
     * @param date A DateTime object representing the minimum date.
     */
    SetMinDate(date: Date): void;
    /**
     * Gets the maximum date of the editor.
     */
    GetMaxDate(): Date;
    /**
     * Sets the maximum date of the editor.
     * @param date A DateTime object representing the maximum date.
     */
    SetMaxDate(date: Date): void;
}
/**
 * Provides data for the ParseDate client-side event that parses a string entered into a date editor.
 */
interface ASPxClientParseDateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the value entered into the date editor by an end user.
     * Value: The string value entered into the date editor by an end user.
     */
    value: string;
    /**
     * Gets or sets the edit value of the date editor.
     * Value: A date/time value representing the edit value of the date editor.
     */
    date: Date;
    /**
     * Gets or sets a value specifying whether the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the client ParseDate event, that parses a date editor's value when entered.
 */
interface ASPxClientParseDateEventHandler<S> {
    /**
     * A method that will handle the ParseDate event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientParseDateEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientParseDateEventArgs): void;
}
/**
 * Represents a base for client editor objects realizing the dropdown editor functionality.
 */
interface ASPxClientDropDownEdit extends ASPxClientDropDownEditBase {
    /**
     * Obtains the key value associated with the text displayed within the editor's edit box.
     */
    GetKeyValue(): string;
    /**
     * Specifies the key value associated with the text displayed within the editor's edit box.
     * @param keyValue A string specifying the key value associated with the editor's value (displayed text).
     */
    SetKeyValue(keyValue: string): void;
}
/**
 * A method that will handle the client events involving a keyboard key being pressed or released.
 */
interface ASPxClientEditKeyEventHandler<S> {
    /**
     * A method that will handle the client events concerning a keyboard key being pressed.
     * @param source The event source. This parameter identifies the editor which raised the event.
     * @param e An ASPxClientEditKeyEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientEditKeyEventArgs): void;
}
/**
 * Provides data for the client events involved with a key being pressed or released.
 */
interface ASPxClientEditKeyEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle client validation events.
 */
interface ASPxClientEditValidationEventHandler<S> {
    /**
     * A method that will handle client validation events.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientEditValidationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientEditValidationEventArgs): void;
}
/**
 * Provides data for the client events that are related to data validation (see Validate).
 */
interface ASPxClientEditValidationEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets the error description.
     * Value: A string representing the error description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether the validated value is valid.
     * Value: true if the value is valid; otherwise, false.
     */
    isValid: boolean;
    /**
     * Gets or sets the editor's value being validated.
     * Value: An object that represents the validated value.
     */
    value: string;
}
/**
 * Represents the client ASPxFilterControl.
 */
interface ASPxClientFilterControl extends ASPxClientControl {
    /**
     * Occurs after a new filter expression has been applied.
     */
    Applied: ASPxClientEvent<ASPxClientFilterAppliedEventHandler<ASPxClientFilterControl>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientFilterControl>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientFilterControl>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFilterControl.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientFilterControl>>;
    /**
     * Returns the filter expression.
     */
    GetFilterExpression(): string;
    /**
     * Returns the applied filter expression.
     */
    GetAppliedFilterExpression(): string;
    /**
     * Returns the editor used to edit operand values for the specified filter column.
     * @param editorIndex An integer value that identifies the filter column by its index within the collection.
     */
    GetEditor(editorIndex: number): ASPxClientEditBase;
    /**
     * Returns a value indicating whether the filter expression being currently composed on the client side is valid - all expression conditions are filled.
     */
    IsFilterExpressionValid(): boolean;
    /**
     * Applies a filter constructed by an end-user.
     */
    Apply(): void;
    /**
     * Resets the current filter expression to a previously applied filter expression.
     */
    Reset(): void;
}
/**
 * A method that will handle the Applied event.
 */
interface ASPxClientFilterAppliedEventHandler<S> {
    /**
     * A method that will handle the Applied event.
     * @param source The event source.
     * @param e An ASPxClientFilterAppliedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFilterAppliedEventArgs): void;
}
/**
 * Provides data for the Applied event.
 */
interface ASPxClientFilterAppliedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the filter expression currently being applied.
     * Value: A string value that specifies the filter expression currently being applied.
     */
    filterExpression: string;
}
/**
 * Represents a base for client editor objects that display a list of items.
 */
interface ASPxClientListEdit extends ASPxClientEdit {
    /**
     * Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientListEdit>>;
    /**
     * Returns the list editor's selected item.
     */
    GetSelectedItem(): ASPxClientListEditItem;
    /**
     * Returns the index of the selected item within the list editor.
     */
    GetSelectedIndex(): number;
    /**
     * Sets the list editor's selected item.
     * @param item An ASPxClientListEditItem object that specifies the item to select.
     */
    SetSelectedItem(item: ASPxClientListEditItem): void;
    /**
     * Sets the list editor's selected item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to select.
     */
    SetSelectedIndex(index: number): void;
}
/**
 * Represents the client-side equivalent of the ListEditItem object.
 */
interface ASPxClientListEditItem {
    /**
     * Gets a value that indicates whether a list edit item is selected.
     * Value: true if a list edit item is selected; otherwise, false.
     */
    selected: boolean;
    /**
     * Gets an editor to which the current item belongs.
     * Value: An ASPxClientListEdit object that represents the item's owner editor.
     */
    listEditBase: ASPxClientListEdit;
    /**
     * Gets the item's index.
     * Value: An integer value that represents the item's index within the corresponding editor's item collection.
     */
    index: number;
    /**
     * Gets the item's associated image.
     * Value: A string value that represents the path to the image displayed by the item.
     */
    imageUrl: string;
    /**
     * Gets the item's display text.
     * Value: A string value that represents the item's display text.
     */
    text: string;
    /**
     * Gets the item's associated value.
     * Value: An object that represents the value associated with the item.
     */
    value: Object;
    /**
     * Returns the list item's value that corresponds to a column specified by its index.
     * @param columnIndex An integer value that specifies the column's index within the editor's Columns collection.
     */
    GetColumnText(columnIndex: number): string;
    /**
     * Returns the list item's value that corresponds to a column specified by its field name.
     * @param columnName A string value that specifies the column's field name defined via the FieldName property.
     */
    GetColumnText(columnName: string): string;
}
/**
 * Represents the client-side equivalent of the ASPxListBox control.
 */
interface ASPxClientListBox extends ASPxClientListEdit {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientListBox>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientListEditItemSelectedChangedEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client when the editor's item is double clicked.
     */
    ItemDoubleClick: ASPxClientEvent<ASPxClientEventHandler<ASPxClientListBox>>;
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns an item specified by its index within the list box editor's item collection.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): ASPxClientListEditItem;
    /**
     * Returns an array of the list editor's selected items indices.
     */
    GetSelectedIndices(): number[];
    /**
     * Returns an array of the list editor's selected items values.
     */
    GetSelectedValues(): Object[];
    /**
     * Returns an array of the list editor's selected items.
     */
    GetSelectedItems(): ASPxClientListEditItem[];
    /**
     * Selects all list box items.
     */
    SelectAll(): void;
    /**
     * Unselects all list box items.
     */
    UnselectAll(): void;
    /**
     * Selects the items with the specified indices within a list box.
     * @param indices An array of integer values that represent the items indices.
     */
    SelectIndices(indices: number[]): void;
    /**
     * Unselects an array of the list box items with the specified indices.
     * @param indices An array of integer values that represent the indices.
     */
    UnselectIndices(indices: number[]): void;
    /**
     * Selects the specified items within a list box.
     * @param items An array of ASPxClientListEditItem objects that represent the items.
     */
    SelectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Unselects an array of the specified list box items.
     * @param items An array of ASPxClientListEditItem objects that represent the items.
     */
    UnselectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Select the items with the specified values within a list box.
     * @param values An array of Object[] objects that represent the item's values.
     */
    SelectValues(values: Object[]): void;
    /**
     * Unselects an array of the list box items with the specified values.
     * @param values An array of Object[] objects that represent the values.
     */
    UnselectValues(values: Object[]): void;
    /**
     * Scrolls the editor's item list, so that the specified item becomes visible.
     * @param index An integer value that specifies the item's index within the editor's client item list.
     */
    MakeItemVisible(index: number): void;
    /**
     * Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
     */
    InitOnContainerMadeVisible(): void;
    /**
     * Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     */
    AddItem(text: string): number;
    /**
     * Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     */
    AddItem(text: string, value: Object): number;
    /**
     * Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    AddItem(text: string, value: Object, imageUrl: string): number;
    /**
     * Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, text: string, value: Object, imageUrl: string): void;
    /**
     * Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     */
    InsertItem(index: number, text: string, value: Object): void;
    /**
     * Inserts a new item specified by its display text into the editor's item collection, at the position specified.
     * @param index An integer value representing the zero-based index of the position where the item should be inserted.
     * @param text A string value specifying the item's display text.
     */
    InsertItem(index: number, text: string): void;
    /**
     * Prevents the client list box editor from being rendered until the EndUpdate method is called.
     */
    BeginUpdate(): void;
    /**
     * Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
     */
    EndUpdate(): void;
    /**
     * Removes all items from the client list box editor.
     */
    ClearItems(): void;
    /**
     * Removes an item specified by its index from the client list editor.
     * @param index An integer value representing the index of the list item to be removed.
     */
    RemoveItem(index: number): void;
    /**
     * Returns a list box item by its text.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): ASPxClientListEditItem;
    /**
     * Returns a list box item by its value.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: Object): ASPxClientListEditItem;
    /**
     * Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     */
    AddItem(texts: string[]): number;
    /**
     * Adds a new item to the end of the control's items collection.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     */
    AddItem(texts: string[], value: Object): number;
    /**
     * Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A String value specifying the path to the image displayed by the item.
     */
    AddItem(texts: string[], value: Object, imageUrl: string): number;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A String value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, texts: string[], value: Object, imageUrl: string): void;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     * @param value An object that represents the item's associated value.
     */
    InsertItem(index: number, texts: string[], value: Object): void;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
     */
    InsertItem(index: number, texts: string[]): void;
}
/**
 * Serves as the base type for the ASPxClientRadioButtonList objects.
 */
interface ASPxClientCheckListBase extends ASPxClientListEdit {
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns the editor's item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): ASPxClientListEditItem;
}
/**
 * Represents the client-side equivalent of the ASPxRadioButtonList control.
 */
interface ASPxClientRadioButtonList extends ASPxClientCheckListBase {
}
/**
 * A client-side equivalent of the ASPxCheckBoxList object.
 */
interface ASPxClientCheckBoxList extends ASPxClientCheckListBase {
    /**
     * Occurs on the client side after a different item in the check box list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientListEditItemSelectedChangedEventHandler<ASPxClientCheckBoxList>>;
    /**
     * Returns an array of the check box list editor's selected items indices.
     */
    GetSelectedIndices(): number[];
    /**
     * Returns an array of the check box list editor's selected items values.
     */
    GetSelectedValues(): Object[];
    /**
     * Returns an array of the check box list editor's selected items.
     */
    GetSelectedItems(): ASPxClientListEditItem[];
    /**
     * Selects all check box list items.
     */
    SelectAll(): void;
    /**
     * Unselects all check box list items.
     */
    UnselectAll(): void;
    /**
     * Selects items with the specified indices within a check box list.
     * @param indices An array of integer values that are the item indices.
     */
    SelectIndices(indices: number[]): void;
    /**
     * Selects the specified items within a check box list.
     * @param items An array of ASPxClientListEditItem objects that are the items.
     */
    SelectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Selects items with the specified values within a check box list.
     * @param values An array of Object[] objects that are the item values.
     */
    SelectValues(values: Object[]): void;
    /**
     * Unselects items with the specified indices within a check box list.
     * @param indices An array of integer values that are the item indices.
     */
    UnselectIndices(indices: number[]): void;
    /**
     * Unselects the specified items within a check box list.
     * @param items An array of ASPxClientListEditItem objects that are the items.
     */
    UnselectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Unselects items with the specified values within a check box list.
     * @param values An array of Object[] objects that are the item values.
     */
    UnselectValues(values: Object[]): void;
}
/**
 * A method that will handle the SelectedIndexChanged event.
 */
interface ASPxClientListEditItemSelectedChangedEventHandler<S> {
    /**
     * A method that will handle the SelectedIndexChanged event.
     * @param source The event source.
     * @param e An ASPxClientListEditItemSelectedChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientListEditItemSelectedChangedEventArgs): void;
}
/**
 * Provides data for the SelectedIndexChanged event.
 */
interface ASPxClientListEditItemSelectedChangedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the index of the item related to the event.
     * Value: An integer value that represents the item's index within the corresponding editor's item collection.
     */
    index: number;
    /**
     * Gets whether the item has been selected.
     * Value: true if the item is selected; otherwise, false.
     */
    isSelected: boolean;
}
/**
 * Represents a client-side equivalent of the ASPxProgressBar control.
 */
interface ASPxClientProgressBar extends ASPxClientEditBase {
    /**
     * Sets the position of the operation's progress.
     * @param position An integer value specifying the progress position.
     */
    SetPosition(position: number): void;
    /**
     * Gets the position of the operation's progress.
     */
    GetPosition(): number;
    /**
     * Sets the pattern used to format the displayed text for the progress bar.
     * @param text A  value that is the format pattern.
     */
    SetCustomDisplayFormat(text: string): void;
    /**
     * Returns the text displayed within the progress bar.
     */
    GetDisplayText(): string;
    /**
     * Sets the percentage representation of the progress position.
     */
    GetPercent(): number;
    /**
     * Sets the minimum range value of the progress bar.
     * @param min An integer value specifying the minimum value of the progress bar range.
     */
    SetMinimum(min: number): void;
    /**
     * Sets the maximum range value of the progress bar.
     * @param max An integer value specifying the maximum value of the progress bar range.
     */
    SetMaximum(max: number): void;
    /**
     * Gets the minimum range value of the progress bar.
     */
    GetMinimum(): number;
    /**
     * Gets the maximum range value of the progress bar.
     */
    GetMaximum(): number;
    /**
     * Sets the minimum and maximum range values of the progress bar.
     * @param minValue An integer value specifying the minimum value of the progress bar range.
     * @param maxValue An integer value specifying the maximum value of the progress bar range.
     */
    SetMinMaxValues(minValue: number, maxValue: number): void;
}
/**
 * Represents a base class for the ASPxClientSpinEdit object.
 */
interface ASPxClientSpinEditBase extends ASPxClientButtonEditBase {
    /**
     * This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientTimeEdit.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientSpinEditBase>>;
}
/**
 * Represents the client-side equivalent of the ASPxSpinEdit control.
 */
interface ASPxClientSpinEdit extends ASPxClientSpinEditBase {
    /**
     * Occurs on the client side when the editor's value is altered in any way.
     */
    NumberChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientSpinEdit>>;
    /**
     * Specifies the value of the spin edit control on the client side.
     * @param number A Decimal value specifying the control value.
     */
    SetValue(number: number): void;
    /**
     * Sets the spin editor's value.
     * @param number A decimal number specifying the value to assign to the spin editor.
     */
    SetNumber(number: number): void;
    /**
     * Gets a number which represents the spin editor's value.
     */
    GetNumber(): number;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the minimum value of the editor.
     * @param value A decimal value specifying the minimum value of the editor.
     */
    SetMinValue(value: number): void;
    /**
     * Gets the minimum value of the editor.
     */
    GetMinValue(): number;
    /**
     * Sets the maximum value of the editor.
     * @param value A decimal value specifying the maximum value of the editor.
     */
    SetMaxValue(value: number): void;
    /**
     * Gets the maximum value of the editor.
     */
    GetMaxValue(): number;
    /**
     * Changes the editor's value.
     * @param value An object representing the data to be assigned to the editor's edit value.
     */
    SetValue(value: Object): void;
}
/**
 * Represents the client-side equivalent of the ASPxTimeEdit control.
 */
interface ASPxClientTimeEdit extends ASPxClientSpinEditBase {
    /**
     * Fires after the selected date has been changed within the time editor.
     */
    DateChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTimeEdit>>;
    /**
     * Sets the time editor's value.
     * @param date A date-time object specifying the value to assign to the time editor.
     */
    SetDate(date: Object): void;
    /**
     * Returns a date that is the time editor's value.
     */
    GetDate(): Object;
}
/**
 * Represents a base for client-side static editors whose values cannot be visually changed by end users.
 */
interface ASPxClientStaticEdit extends ASPxClientEditBase {
    /**
     * Occurs on the client side after an end-user clicks within a static editor.
     */
    Click: ASPxClientEvent<ASPxClientEditEventHandler<ASPxClientStaticEdit>>;
}
/**
 * A method that will handle client-side events which concern clicking within editors.
 */
interface ASPxClientEditEventHandler<S> {
    /**
     * A method that will handle client-side events which concern clicking within editors.
     * @param source An object representing the event source. Identifies the editor that raised the event.
     * @param e An ASPxClientEditClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientEditClickEventArgs): void;
}
/**
 * Provides data for the client-side events which concern clicking within editors.
 */
interface ASPxClientEditClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the HTML element related to the event.
     * Value: An object that represents the clicked HTML element.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Represents the client-side equivalent of the ASPxHyperLink control.
 */
interface ASPxClientHyperLink extends ASPxClientStaticEdit {
    /**
     * Gets an URL which defines the navigation location for the editor's hyperlink.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies an URL which defines the navigation location for the editor's hyperlink.
     * @param url A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
     */
    SetNavigateUrl(url: string): void;
    /**
     * Gets the text caption displayed for the hyperlink in the hyperlink editor.
     */
    GetText(): string;
    /**
     * Specifies the text caption displayed for the hyperlink in the hyperlink editor.
     * @param text A string value specifying the text caption for the hyperlink in the editor.
     */
    SetText(text: string): void;
}
/**
 * Represents a base for client-side editors which are capable of displaying images.
 */
interface ASPxClientImageBase extends ASPxClientStaticEdit {
    /**
     * Sets the size of the image displayed within the image editor.
     * @param width An integer value that specifies the image's width.
     * @param height An integer value that specifies the image's height.
     */
    SetSize(width: number, height: number): void;
}
/**
 * Represents the client-side equivalent of the ASPxImage control.
 */
interface ASPxClientImage extends ASPxClientImageBase {
    /**
     * Returns the URL pointing to the image displayed within the image editor.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the image editor.
     * @param url A string value specifying the URL to the image displayed within the editor.
     */
    SetImageUrl(url: string): void;
}
/**
 * Represents the client-side equivalent of the ASPxLabel control.
 */
interface ASPxClientLabel extends ASPxClientStaticEdit {
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
}
/**
 * Represents the client-side equivalent of the ASPxTextBox control.
 */
interface ASPxClientTextBox extends ASPxClientTextBoxBase {
}
/**
 * Represents the client-side equivalent of the ASPxMemo control.
 */
interface ASPxClientMemo extends ASPxClientTextEdit {
}
/**
 * Represents the client-side equivalent of the ASPxButtonEdit control.
 */
interface ASPxClientButtonEdit extends ASPxClientButtonEditBase {
}
/**
 * A method that will handle the ButtonClick event.
 */
interface ASPxClientButtonEditClickEventHandler<S> {
    /**
     * A method that will handle the ButtonClick event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientButtonEditClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientButtonEditClickEventArgs): void;
}
/**
 * Provides data for the ButtonClick event.
 */
interface ASPxClientButtonEditClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the index of the clicked button.
     * Value: An integer value representing the index of the clicked button within the editor's Buttons collection.
     */
    buttonIndex: number;
}
/**
 * A client-side equivalent of the ASPxTokenBox object.
 */
interface ASPxClientTokenBox extends ASPxClientComboBox {
    /**
     * Fires on the client side after the token collection has been changed.
     */
    TokensChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientTokenBox>>;
    /**
     * Adds a new token with the specified text to the end of the control's token collection.
     * @param text A string value specifying the token's text.
     */
    AddToken(text: string): void;
    /**
     * Removes a token specified by its text from the client token box.
     * @param text A string value that is the text of the token to be removed.
     */
    RemoveTokenByText(text: string): void;
    /**
     * Removes a token specified by its index from the client token box.
     * @param index An integer value that is the index of the token to be removed.
     */
    RemoveToken(index: number): void;
    /**
     * Returns an HTML span element that corresponds to the specified token.
     * @param index An integer value that is the token index.
     */
    GetTokenHtmlElement(index: number): Object;
    /**
     * Returns an HTML span element that corresponds to the specified token's text.
     * @param index An integer value that is the token index.
     */
    GetTokenTextHtmlElement(index: number): Object;
    /**
     * Returns an HTML span element that corresponds to the specified token's remove button.
     * @param index An integer value that is the token index.
     */
    GetTokenRemoveButtonHtmlElement(index: number): Object;
    /**
     * Returns a collection of tokens.
     */
    GetTokenCollection(): string[];
    /**
     * Sets a collection of tokens.
     * @param collection A  object that is the collection of tokens.
     */
    SetTokenCollection(collection: string[]): void;
    /**
     * Removes all tokens contained in the token box.
     */
    ClearTokenCollection(): void;
    /**
     * Returns the index of a token specified by its text.
     * @param text A string value that specifies the text of the token.
     */
    GetTokenIndexByText(text: string): number;
    /**
     * Gets the token texts, separated with a sign, specified by the TextSeparator property.
     */
    GetText(): string;
    /**
     * Sets the token texts, separated with a sign, specified by the TextSeparator property.
     * @param text A string value that is the token texts separated with a text separator.
     */
    SetText(text: string): void;
    /**
     * Gets the editor value.
     */
    GetValue(): string;
    /**
     * Sets the editor value.
     * @param value A string that is the editor value.
     */
    SetValue(value: string): void;
    /**
     * Returns a value that indicates if the specified token (string) is a custom token.
     * @param text A string value that is a token.
     * @param caseSensitive true, if tokens are case sensitive; otherwise, false.
     */
    IsCustomToken(text: string, caseSensitive: boolean): boolean;
    /**
     * Changes the editor's value.
     * @param value An object representing the data to be assigned to the editor's edit value.
     */
    SetValue(value: Object): void;
}
/**
 * The client-side equivalent of the ASPxTrackBar control.
 */
interface ASPxClientTrackBar extends ASPxClientEdit {
    /**
     * Fires on the client side before a track bar position is changed and allows you to cancel the action.
     */
    PositionChanging: ASPxClientEvent<ASPxClientTrackBarPositionChangingEventHandler<ASPxClientTrackBar>>;
    /**
     * Fires after the editor's position has been changed.
     */
    PositionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user moves a cursor while the drag handle is held down.
     */
    Track: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user presses a drag handle and moves it.
     */
    TrackStart: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user releases a drag handle after moving it.
     */
    TrackEnd: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Returns a track bar item index by the item's value.
     * @param value An object that specifies the item's value.
     */
    GetItemIndexByValue(value: Object): number;
    /**
     * Returns a track bar item's associated value.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemValue(index: number): Object;
    /**
     * Returns a track bar item text.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemText(index: number): string;
    /**
     * Returns a track bar item's tooltip text.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemToolTip(index: number): string;
    /**
     * Returns the number of the track bar items that are maintained by the item collection.
     */
    GetItemCount(): number;
    /**
     * Specifies the secondary drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPositionEnd(position: number): void;
    /**
     * Specifies the main drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPositionStart(position: number): void;
    /**
     * Returns the secondary drag handle position.
     */
    GetPositionEnd(): number;
    /**
     * Returns the main drag handle position.
     */
    GetPositionStart(): number;
    /**
     * Gets a drag handle position.
     */
    GetPosition(): number;
    /**
     * Specifies a drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPosition(position: number): void;
}
/**
 * A method that will handle the client PositionChanging event.
 */
interface ASPxClientTrackBarPositionChangingEventHandler<S> {
    /**
     * A method that will handle the PositionChanging event.
     * @param source The event source. Identifies the ASPxTrackBar control that raised the event.
     * @param e A ASPxClientTrackBarPositionChangingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTrackBarPositionChangingEventArgs): void;
}
/**
 * Provides data for the PositionChanging event.
 */
interface ASPxClientTrackBarPositionChangingEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
    /**
     * Gets the current drag handle position.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    currentPosition: number;
    /**
     * Gets the current secondary drag handle position.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    currentPositionEnd: number;
    /**
     * Gets the current main drag handle position.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    currentPositionStart: number;
    /**
     * Gets a position where the drag handle is being moved.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    newPosition: number;
    /**
     * Gets a position where the secondary drag handle is being moved.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    newPositionEnd: number;
    /**
     * Gets a position where the main drag handle is being moved.
     * Value: A <see cref="Decimal" /> value that is the drag handle position.
     */
    newPositionStart: number;
}
/**
 * Represents the client-side equivalent of the ASPxValidationSummary control.
 */
interface ASPxClientValidationSummary extends ASPxClientControl {
    /**
     * Occurs on the client side when the validation summary's visibility is changed.
     */
    VisibilityChanged: ASPxClientEvent<ASPxClientValidationSummaryVisibilityChangedEventHandler<ASPxClientValidationSummary>>;
}
/**
 * A method that will handle the VisibilityChanged event.
 */
interface ASPxClientValidationSummaryVisibilityChangedEventHandler<S> {
    /**
     * A method that will handle the VisibilityChanged client event.
     * @param source An object representing the event source.
     * @param e A ASPxClientValidationSummaryVisibilityChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientValidationSummaryVisibilityChangedEventArgs): void;
}
/**
 * Provides data for the VisibilityChanged event.
 */
interface ASPxClientValidationSummaryVisibilityChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the editor is visible on the client.
     * Value: true if the editor is visible; otherwise, false.
     */
    visible: boolean;
}
/**
 * Represents the client ASPxGaugeControl.
 */
interface ASPxClientGaugeControl extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGaugeControl>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGaugeControl>>;
    /**
     * Fires when errors have occurred during callback processing.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientGaugeControl>>;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * Represents the client ASPxGridView.
 */
interface ASPxClientGridBase extends ASPxClientControl {
}
/**
 * Serves as a base object implementing the client column functionality.
 */
interface ASPxClientGridColumnBase {
}
/**
 * The client-side equivalent of the ASPxGridLookup control.
 */
interface ASPxClientGridLookup extends ASPxClientDropDownEditBase {
    /**
     * Fires on the client when a data row is clicked within the built-in dropdown grid.
     */
    RowClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridLookup>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGridLookup>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGridLookup>>;
    /**
     * Returns a client object representing the built-in dropdown grid.
     */
    GetGridView(): ASPxClientGridView;
    /**
     * Confirms the current selection made by an end-user within the editor's dropdown grid.
     */
    ConfirmCurrentSelection(): void;
    /**
     * Cancels the current selection made by an end-user within the editor's dropdown grid and rolls back to the last confirmed selection. The selection can be confirmed by either pressing the Enter key or calling the ConfirmCurrentSelection method.
     */
    RollbackToLastConfirmedSelection(): void;
}
/**
 * Represents the client ASPxCardView.
 */
interface ASPxClientCardView extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     * Value: A <see cref="ASPxClientCardViewBatchEditApi" /> object that exposes the batch editing client API methods.
     */
    batchEditApi: ASPxClientCardViewBatchEditApi;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientCardViewCustomButtonEventHandler<ASPxClientCardView>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientCardViewSelectionEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to prevent columns from being sorted.
     */
    ColumnSorting: ASPxClientEvent<ASPxClientCardViewColumnCancelEventHandler<ASPxClientCardView>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientCardViewBatchEditStartEditingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs when a grid leaves batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientCardViewBatchEditEndEditingEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientCardViewBatchEditConfirmShowingEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to specify whether card data is valid and provide an error text.
     */
    BatchEditCardValidating: ASPxClientEvent<ASPxClientCardViewBatchEditCardValidatingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientCardViewBatchEditChangesSavingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientCardViewBatchEditChangesCancelingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before a card is inserted in batch edit mode.
     */
    BatchEditCardInserting: ASPxClientEvent<ASPxClientCardViewBatchEditCardInsertingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before a card is deleted in batch edit mode.
     */
    BatchEditCardDeleting: ASPxClientEvent<ASPxClientCardViewBatchEditCardDeletingEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client when a card is clicked.
     */
    CardClick: ASPxClientEvent<ASPxClientCardViewCardClickEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client when a card is double clicked.
     */
    CardDblClick: ASPxClientEvent<ASPxClientCardViewCardClickEventHandler<ASPxClientCardView>>;
    /**
     * Fires in response to changing card focus.
     */
    FocusedCardChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCardView>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientCardView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCardView>>;
    /**
     * Fires after the customization window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientCardView>>;
    /**
     * Moves focus to the specified edit cell within the edited card.
     * @param column An ASPxClientCardViewColumn object that represents the data column within the client grid.
     */
    FocusEditor(column: ASPxClientCardViewColumn): void;
    /**
     * Moves focus to the specified edit cell within the edited card.
     * @param columnIndex An integer value that specifies the column's position within the columns collection.
     */
    FocusEditor(columnIndex: number): void;
    /**
     * Moves focus to the specified edit cell within the edited card.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    FocusEditor(columnFieldNameOrId: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param column An ASPxClientCardViewColumn object that represents the data column within the client grid.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientCardViewColumn, value: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column within the grid's column collection.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(columnIndex: number, value: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(columnFieldNameOrId: string, value: string): void;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Gets information about a focused cell.
     */
    GetFocusedCell(): ASPxClientCardViewCellInfo;
    /**
     * Focuses the specified cell.
     * @param cardVisibleIndex An  value that specifies the visible index of the card.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's Index property value).
     */
    SetFocusedCell(cardVisibleIndex: number, columnIndex: number): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientCardViewColumn object that represents the data column.
     */
    SortBy(column: ASPxClientCardViewColumn): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    SortBy(columnIndex: number): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    SortBy(columnFieldNameOrId: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientCardViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(column: ASPxClientCardViewColumn, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(columnIndex: number, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientCardViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(column: ASPxClientCardViewColumn, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnIndex: number, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param column An ASPxClientCardViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex 
     */
    SortBy(column: ASPxClientCardViewColumn, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
     */
    SortBy(columnIndex: number, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Hides the specified column.
     * @param column An ASPxClientCardViewColumn object that represents the column to hide.
     */
    MoveColumn(column: ASPxClientCardViewColumn): void;
    /**
     * Hides the specified column.
     * @param columnIndex An integer value that specifies the absolute index of the column to hide.
     */
    MoveColumn(columnIndex: number): void;
    /**
     * Hides the specified column.
     * @param columnFieldNameOrId A string value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
     */
    MoveColumn(columnFieldNameOrId: string): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param column An ASPxClientCardViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the ASPxCardView.
     */
    MoveColumn(column: ASPxClientCardViewColumn, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the grid.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param columnFieldNameOrId A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the ASPxCardView.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param column An ASPxClientCardViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the CardView.
     * @param moveBefore true, to move the column before the target column; otherwise, false.
     */
    MoveColumn(column: ASPxClientCardViewColumn, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param columnFieldNameOrId A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Returns the key value of the specified card.
     * @param visibleIndex An integer value that specifies the card's visible index.
     */
    GetCardKey(visibleIndex: number): string;
    /**
     * Switches the CardView to edit mode.
     * @param visibleIndex A zero-based integer that identifies a card to be edited.
     */
    StartEditCard(visibleIndex: number): void;
    /**
     * Switches the ASPxCardView to edit mode.
     * @param key An object that uniquely identifies a card to be edited.
     */
    StartEditCardByKey(key: Object): void;
    /**
     * Indicates whether or not a new card is being edited.
     */
    IsNewCardEditing(): boolean;
    /**
     * Adds a new record.
     */
    AddNewCard(): void;
    /**
     * Deletes the specified card.
     * @param visibleIndex An integer value that identifies the card.
     */
    DeleteCard(visibleIndex: number): void;
    /**
     * Deletes a card with the specified key value.
     * @param key An object that uniquely identifies the card.
     */
    DeleteCardByKey(key: Object): void;
    /**
     * Returns the focused card's index.
     */
    GetFocusedCardIndex(): number;
    /**
     * Moves focus to the specified card.
     * @param visibleIndex An integer value that specifies the focused card's index.
     */
    SetFocusedCardIndex(visibleIndex: number): void;
    /**
     * Selects all the unselected cards within the CardView.
     */
    SelectCards(): void;
    /**
     * Selects the specified card displayed within the CardView.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     */
    SelectCards(visibleIndex: number): void;
    /**
     * Selects the specified cards within the CardView.
     * @param visibleIndices An array of zero-based indices that identify data cards within the grid.
     */
    SelectCards(visibleIndices: number[]): void;
    /**
     * Selects or deselects the specified cards within the CardView.
     * @param visibleIndices An array of zero-based indices that identify data cards within the grid.
     * @param selected true to select the specified cards; false to deselect the cards.
     */
    SelectCards(visibleIndices: number[], selected: boolean): void;
    /**
     * Selects or deselects the specified card within the GridView.
     * @param visibleIndex An integer zero-based index that identifies the data card within the grid.
     * @param selected true to select the specified card; false to deselect the card.
     */
    SelectCards(visibleIndex: number, selected?: boolean): void;
    /**
     * Selects or deselects the specified cards displayed within the CardView.
     * @param keys An array of objects that uniquely identify the cards.
     * @param selected true to select the specified cards; false to deselect the cards.
     */
    SelectCardsByKey(keys: Object[], selected?: boolean): void;
    /**
     * Selects or deselects the specified card displayed within the CardView.
     * @param key An object that uniquely identifies the card.
     * @param selected true to select the specified card; false to deselect the card.
     */
    SelectCardsByKey(key: Object, selected?: boolean): void;
    /**
     * Selects the specified cards displayed within the CardView.
     * @param keys An array of objects that uniquely identify the cards.
     */
    SelectCardsByKey(keys: Object[]): void;
    /**
     * Selects a card displayed within the CardView by its key.
     * @param key An object that uniquely identifies the card.
     */
    SelectCardsByKey(key: Object): void;
    /**
     * Deselects the specified cards displayed within the ASPxCardView.
     * @param keys An array of objects that uniquely identify the cards.
     */
    UnselectCardsByKey(keys: Object[]): void;
    /**
     * Deselects the specified card displayed within the ASPxCardView.
     * @param key An object that uniquely identifies the card.
     */
    UnselectCardsByKey(key: Object): void;
    /**
     * Deselects all the selected cards within the ASPxCardView.
     */
    UnselectCards(): void;
    /**
     * Deselects the specified cards (if selected) within the ASPxCardView.
     * @param visibleIndices An array of zero-based indices that identify data cards within the grid.
     */
    UnselectCards(visibleIndices: number[]): void;
    /**
     * Deselects the specified cards (if selected) within the ASPxCardView.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     */
    UnselectCards(visibleIndex: number): void;
    /**
     * Deselects all grid cards that match the filter criteria currently applied to the CardView.
     */
    UnselectFilteredCards(): void;
    /**
     * Selects the specified card displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     */
    SelectCardOnPage(visibleIndex: number): void;
    /**
     * Selects or deselects the specified card displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     * @param selected true to select the specified card; false to deselect the card.
     */
    SelectCardOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified cards (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     */
    UnselectCardOnPage(visibleIndex: number): void;
    /**
     * Selects all unselected cards displayed on the current page.
     */
    SelectAllCardsOnPage(): void;
    /**
     * Allows you to select or deselect all cards displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected cards displayed on the current page; false to deselect all selected cards on the page.
     */
    SelectAllCardsOnPage(selected: boolean): void;
    /**
     * Deselects all selected cards displayed on the current page.
     */
    UnselectAllCardsOnPage(): void;
    /**
     * Returns the number of selected cards.
     */
    GetSelectedCardCount(): number;
    /**
     * Indicates whether or not the specified card is selected within the current page.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsCardSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the grid.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client CardView.
     */
    ClearFilter(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first card displayed within the grid's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Indicates whether the grid is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the CardView to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Indicates whether the customization window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the customization window.
     */
    ShowCustomizationWindow(): void;
    /**
     * Invokes the customization window and displays it over the specified HTML element.
     * @param showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(showAtElement?: Object): void;
    /**
     * Closes the customization window.
     */
    HideCustomizationWindow(): void;
    /**
     * Returns the number of columns within the client grid.
     */
    GetColumnCount(): number;
    /**
     * Returns the card values displayed within all selected cards.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the selected cards are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns key values of selected cards displayed within the current page.
     */
    GetSelectedKeysOnPage(): Object[];
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the values of the specified data source fields within the specified card.
     * @param visibleIndex An integer value that identifies the data card.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the specified card are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetCardValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the card values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetPageCardValues(fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the number of cards actually displayed within the active page.
     */
    GetVisibleCardsOnPage(): number;
    /**
     * Returns the client column that resides at the specified position within the column collection.
     * @param columnIndex A zero-based index that identifies the column within the column collection (the column's Index property value).
     */
    GetColumn(columnIndex: number): ASPxClientCardViewColumn;
    /**
     * Returns the column with the specified unique identifier.
     * @param columnId A string value that specifies the column's unique identifier (the column's Name property value).
     */
    GetColumnById(columnId: string): ASPxClientCardViewColumn;
    /**
     * Returns the client column which is bound to the specified data source field.
     * @param columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
     */
    GetColumnByField(columnFieldName: string): ASPxClientCardViewColumn;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param column An ASPxClientCardViewColumn object that specifies the required column within the client grid.
     */
    GetEditor(column: ASPxClientCardViewColumn): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    GetEditor(columnIndex: number): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    GetEditor(columnFieldNameOrId: string): ASPxClientEdit;
    /**
     * Returns the value of the specified edit cell.
     * @param column An ASPxClientCardViewColumn object that represents the data column within the client grid.
     */
    GetEditValue(column: ASPxClientCardViewColumn): string;
    /**
     * Returns the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column within the grid's column collection.
     */
    GetEditValue(columnIndex: number): string;
    /**
     * Returns the value of the specified edit cell.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    GetEditValue(columnFieldNameOrId: string): string;
}
/**
 * Represents a client column.
 */
interface ASPxClientCardViewColumn extends ASPxClientGridColumnBase {
    /**
     * Gets the name that uniquely identifies the column.
     * Value: A string value assigned to the column's Name property.
     */
    name: string;
    /**
     * Gets the column's position within the collection.
     * Value: An integer zero-bazed index that specifies the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current column.
     * Value: A string value that specifies the name of a data field.
     */
    fieldName: string;
    /**
     * Gets whether the column is visible.
     * Value: true to display the column; otherwise, false.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of card values when the client GetSelectedFieldValues method is called.
 */
interface ASPxClientCardViewValuesCallback {
    /**
     * Represents a JavaScript function which receives the list of card values when the client GetSelectedFieldValues method is called.
     * @param result An object that represents the list of card values received from the server.
     */
    (result: Object): void;
}
/**
 * A method that will handle the cancelable events of a client ASPxCardView column.
 */
interface ASPxClientCardViewColumnCancelEventHandler<S> {
    /**
     * A method that will handle the cancelable events of a client ASPxCardView column.
     * @param source The event source. This parameter identifies the ASPxClientCardView object that raised the event.
     * @param e An ASPxClientCardViewColumnCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewColumnCancelEventArgs): void;
}
/**
 * Provides data for the cancelable events of a client ASPxCardView column.
 */
interface ASPxClientCardViewColumnCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed client column.
     * Value: An ASPxClientCardViewColumn object that represents the processed column.
     */
    column: ASPxClientCardViewColumn;
}
/**
 * A method that will handle the CardClick event.
 */
interface ASPxClientCardViewCardClickEventHandler<S> {
    /**
     * A method that will handle the CardClick event.
     * @param source The event source. This parameter identifies the ASPxClientCardView object that raised the event.
     * @param e An ASPxClientCardViewCardClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewCardClickEventArgs): void;
}
/**
 * Provides data for the CardClick event.
 */
interface ASPxClientCardViewCardClickEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed card's visible index.
     * Value: An integer zero-based index that identifies the processed record.
     */
    visibleIndex: number;
    /**
     * Provides access to the parameters associated with the CardClick event.
     * Value: An object that contains parameters associated with the event.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the CustomButtonClick event.
 */
interface ASPxClientCardViewCustomButtonEventHandler<S> {
    /**
     * A method that will handle the CustomButtonClick event.
     * @param source The event source.  This parameter identifies the ASPxClientCardView object that raised the event.
     * @param e An ASPxClientCardViewCustomButtonEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewCustomButtonEventArgs): void;
}
/**
 * Provides data for the CustomButtonClick event.
 */
interface ASPxClientCardViewCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the value which identifies the card whose custom button has been clicked.
     * Value: An integer value that identifies the card whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value which identifies the custom button.
     * Value: A string value that identifies the clicked custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the SelectionChanged event.
 */
interface ASPxClientCardViewSelectionEventHandler<S> {
    /**
     * A method that will handle the SelectionChanged event.
     * @param source The event source.
     * @param e An ASPxClientCardViewSelectionEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewSelectionEventArgs): void;
}
/**
 * Provides data for the SelectionChanged event.
 */
interface ASPxClientCardViewSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the visible index of the card whose selected state has been changed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the card.
     */
    visibleIndex: number;
    /**
     * Gets whether the card has been selected.
     * Value: true if the card has been selected; otherwise, false.
     */
    isSelected: boolean;
    /**
     * Gets whether all cards displayed within a page have been selected or unselected.
     * Value: true if all cards displayed within a page have been selected or unselected; otherwise, false.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     * Value: true  if a selection has been changed on the server; otherwise, false.
     */
    isChangedOnServer: boolean;
}
/**
 * A method that will handle the client BatchEditStartEditing event.
 */
interface ASPxClientCardViewBatchEditStartEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditStartEditing event.
     * @param source The event source.
     * @param e An ASPxClientCardViewBatchEditStartEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditStartEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditStartEditing event.
 */
interface ASPxClientCardViewBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the card whose cells are about to be edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the card.
     */
    visibleIndex: number;
    /**
     * Gets the CardView column that owns a cell that is about to be edited.
     * Value: An <see cref="ASPxClientCardViewColumn" /> object that is the focused CardView column.
     */
    focusedColumn: ASPxClientCardViewColumn;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: A hashtable that stores information about editable cells.
     */
    cardValues: Object;
}
/**
 * A method that will handle the client BatchEditEndEditing event.
 */
interface ASPxClientCardViewBatchEditEndEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditEndEditing event.
     * @param source The event source.
     * @param e An ASPxClientCardViewBatchEditEndEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditEndEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditEndEditing event.
 */
interface ASPxClientCardViewBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the card whose cells have been edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the card.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: A hashtable that stores information about editable cells.
     */
    cardValues: Object;
}
/**
 * A method that will handle the client BatchEditCardValidating event.
 */
interface ASPxClientCardViewBatchEditCardValidatingEventHandler<S> {
    /**
     * A method that will handle the BatchEditCardValidating event.
     * @param source The event source.
     * @param e An ASPxClientCardViewBatchEditCardValidatingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditCardValidatingEventArgs): void;
}
/**
 * Provides data for the BatchEditCardValidating event.
 */
interface ASPxClientCardViewBatchEditCardValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the processed card's visible index.
     * Value: An integer value that specifies the processed card's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information of a card currently being validated.
     * Value: An object that is a hashtable containing validation information.
     */
    validationInfo: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditConfirmShowing event.
 */
interface ASPxClientCardViewBatchEditConfirmShowingEventHandler<S> {
    /**
     * A method that will handle the BatchEditConfirmShowing client event.
     * @param source The event source.
     * @param e An ASPxClientCardViewBatchEditConfirmShowingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditConfirmShowingEventArgs): void;
}
/**
 * Provides data for the BatchEditConfirmShowing event.
 */
interface ASPxClientCardViewBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the client identifier of an object that initiates a send request.
     * Value: A string value that specifies the object client identifier.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the client BatchEditTemplateCellFocused event.
 */
interface ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler<S> {
    /**
     * A method that will handle the BatchEditTemplateCellFocused event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs): void;
}
/**
 * Provides data for the BatchEditTemplateCellFocused event.
 */
interface ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the currently processed column.
     * Value: An <see cref="ASPxClientCardViewColumn" /> object that is the client-side column object.
     */
    column: ASPxClientCardViewColumn;
    /**
     * Gets or sets a value specifying whether the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the BatchEditChangesSaving event.
 */
interface ASPxClientCardViewBatchEditChangesSavingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesSaving event.
     * @param source The event source. This parameter identifies the card view object which raised the event.
     * @param e An ASPxClientCardViewBatchEditChangesSavingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditChangesSavingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesSaving event.
 */
interface ASPxClientCardViewBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * A method that will handle the BatchEditChangesCanceling event.
 */
interface ASPxClientCardViewBatchEditChangesCancelingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesCanceling event.
     * @param source The event source. This parameter identifies the card view object which raised the event.
     * @param e An ASPxClientCardViewBatchEditChangesCancelingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditChangesCancelingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesCanceling event.
 */
interface ASPxClientCardViewBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * A method that will handle the BatchEditCardInserting event.
 */
interface ASPxClientCardViewBatchEditCardInsertingEventHandler<S> {
    /**
     * A method that will handle the BatchEditCardInserting event.
     * @param source The event source. This parameter identifies the card view object which raised the event.
     * @param e An ASPxClientCardViewBatchEditCardInsertingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditCardInsertingEventArgs): void;
}
/**
 * Provides data for the BatchEditCardInserting event.
 */
interface ASPxClientCardViewBatchEditCardInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed card visible index.
     * Value: An integer value that specifies the processed card visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the BatchEditCardDeleting event.
 */
interface ASPxClientCardViewBatchEditCardDeletingEventHandler<S> {
    /**
     * A method that will handle the BatchEditCardDeleting event.
     * @param source The event source. This parameter identifies the card view object which raised the event.
     * @param e An ASPxClientCardViewBatchEditCardDeletingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCardViewBatchEditCardDeletingEventArgs): void;
}
/**
 * Provides data for the BatchEditCardDeleting event.
 */
interface ASPxClientCardViewBatchEditCardDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed card visible index.
     * Value: An integer value that specifies the processed card visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    cardValues: Object;
}
/**
 * Provides members related to Batch Edit Mode
 */
interface ASPxClientCardViewBatchEditApi {
    /**
     * Performs validation of CardView data when the CardView operates in Batch Edit mode.
     */
    ValidateCards(): boolean;
    /**
     * Performs validation of CardView data contained in the specified card when the CardView operates in Batch Edit mode.
     * @param visibleIndex An integer value specifying the visible index of the validated card.
     */
    ValidateCard(visibleIndex: number): boolean;
    /**
     * Returns an array of card visible indices.
     * @param includeDeleted true, to include visible indices of deleted cards to the returned array; otherwise, false.
     */
    GetCardVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted card visible indices.
     */
    GetDeletedCardIndices(): number[];
    /**
     * Returns an array of the inserted card visible indices.
     */
    GetInsertedCardIndices(): number[];
    /**
     * Indicates if the card with the specified visible index is deleted.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsDeletedCard(visibleIndex: number): boolean;
    /**
     * Indicates if the card with the specified visible index is newly created.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsNewCard(visibleIndex: number): boolean;
    /**
     * Programmatically moves the focus to the previous cell in the card
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the card.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the card containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: Object): void;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the card containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: Object, displayText: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, columnFieldNameOrId: string, initial?: boolean): Object;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientCardViewCellInfo;
    /**
     * Returns a value that indicates whether the card view has changed data.
     */
    HasChanges(): boolean;
    /**
     * Returns a value that indicates whether the specified card has changed data.
     * @param visibleIndex An integer value that specifies the visible index of a card.
     */
    HasChanges(visibleIndex: number): boolean;
    /**
     * Returns a value that indicates whether the specified cell's data has been changed.
     * @param visibleIndex An integer value that specifies the visible index of a card.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    HasChanges(visibleIndex: number, columnFieldNameOrId: string): boolean;
    /**
     * Resets changes in the specified card.
     * @param visibleIndex An integer value that specifies the visible index of a card.
     */
    ResetChanges(visibleIndex: number): void;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a card containing the processed cell.
     * @param columnIndex A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     */
    ResetChanges(visibleIndex: number, columnIndex: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
     * @param columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
     */
    StartEdit(visibleIndex: number, columnIndex: number): void;
    /**
     * Ends cell or card editing.
     */
    EndEdit(): void;
}
/**
 * Contains information on a grid cell.
 */
interface ASPxClientCardViewCellInfo {
    /**
     * Gets the visible index of the card that contains the cell currently being processed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the card.
     */
    cardVisibleIndex: number;
    /**
     * Gets the data column that contains the cell currently being processed.
     * Value: An <see cref="ASPxClientCardViewColumn" /> object that is the data column which contains the processed cell.
     */
    column: ASPxClientCardViewColumn;
}
/**
 * A client-side equivalent of the ASPxGridView object.
 */
interface ASPxClientGridView extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     * Value: A <see cref="ASPxClientGridViewBatchEditApi" /> object that exposes the batch editing client API methods.
     */
    batchEditApi: ASPxClientGridViewBatchEditApi;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientGridViewCustomButtonEventHandler<ASPxClientGridView>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientGridViewSelectionEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent columns from being sorted.
     */
    ColumnSorting: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires in response to changing row focus.
     */
    FocusedRowChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to cancel data grouping.
     */
    ColumnGrouping: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
     */
    ColumnStartDragging: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent columns from being resized.
     */
    ColumnResizing: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Occurs after a column's width has been changed by an end-user.
     */
    ColumnResized: ASPxClientEvent<ASPxClientGridViewColumnProcessingModeEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to control column movement.
     */
    ColumnMoving: ASPxClientEvent<ASPxClientGridViewColumnMovingEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a group row is expanded.
     */
    RowExpanding: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a group row is collapsed.
     */
    RowCollapsing: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a detail row is expanded.
     */
    DetailRowExpanding: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a detail row is collapsed.
     */
    DetailRowCollapsing: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client when a data row is clicked.
     */
    RowClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client when a data row is double clicked.
     */
    RowDblClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridView>>;
    /**
     * Occurs after an end-user right clicks in the GridView, and enables you to provide a custom context menu.
     */
    ContextMenu: ASPxClientEvent<ASPxClientGridViewContextMenuEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client side when a context menu item has been clicked.
     */
    ContextMenuItemClick: ASPxClientEvent<ASPxClientGridViewContextMenuItemClickEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to specify whether row data is valid and provide an error text.
     */
    BatchEditRowValidating: ASPxClientEvent<ASPxClientGridViewBatchEditRowValidatingEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientGridViewBatchEditConfirmShowingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientGridViewBatchEditStartEditingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs when a grid leaves the batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientGridViewBatchEditEndEditingEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientGridViewBatchEditChangesSavingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientGridViewBatchEditChangesCancelingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before a data row is inserted in batch edit mode.
     */
    BatchEditRowInserting: ASPxClientEvent<ASPxClientGridViewBatchEditRowInsertingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before a data row is deleted in batch edit mode.
     */
    BatchEditRowDeleting: ASPxClientEvent<ASPxClientGridViewBatchEditRowDeletingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientGridView>>;
    /**
     * Fires after the Customization Window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientGridView>>;
    /**
     * Selects or deselects the specified row displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     * @param selected true to select the specified row; false to deselect the row.
     */
    SelectRowOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified row (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     */
    UnselectRowOnPage(visibleIndex: number): void;
    /**
     * Selects all unselected rows displayed on the current page.
     */
    SelectAllRowsOnPage(): void;
    /**
     * Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
     */
    SelectAllRowsOnPage(selected: boolean): void;
    /**
     * Deselects all selected rows displayed on the current page.
     */
    UnselectAllRowsOnPage(): void;
    /**
     * Returns the number of selected rows.
     */
    GetSelectedRowCount(): number;
    /**
     * Indicates whether or not the specified row is selected within the current page.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsRowSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified row is a group row.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsGroupRow(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified row is a data row.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsDataRow(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified group row is expanded.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     */
    IsGroupRowExpanded(visibleIndex: number): boolean;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVertScrollPos(): number;
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorzScrollPos(): number;
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorizontalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVertScrollPos(position: number): void;
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorzScrollPos(position: number): void;
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
    /**
     * Applies a filter specified in the filter row to the GridView.
     */
    ApplyOnClickRowFilter(): void;
    /**
     * Returns the editor used to edit the value in the auto filter row for the specified data column.
     * @param column An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
     */
    GetAutoFilterEditor(column: ASPxClientGridViewColumn): Object;
    /**
     * Returns the editor used to edit the value in the auto filter row for the specified data column.
     * @param columnIndex An integer value that identifies the data column by its index.
     */
    GetAutoFilterEditor(columnIndex: number): Object;
    /**
     * Returns the editor used to edit the value in the auto filter row for the specified data column.
     * @param columnFieldNameOrId A string value that specifies the column's name or its data base field name.
     */
    GetAutoFilterEditor(columnFieldNameOrId: string): Object;
    /**
     * Applies a filter to the specified data column.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client GridView.
     * @param val A string value that specifies the filter expression.
     */
    AutoFilterByColumn(column: ASPxClientGridViewColumn, val: string): void;
    /**
     * Applies a filter to the specified data column.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param val A string value that specifies the filter expression.
     */
    AutoFilterByColumn(columnIndex: number, val: string): void;
    /**
     * Applies a filter to the specified data column.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param val A string value that specifies the filter expression.
     */
    AutoFilterByColumn(columnFieldNameOrId: string, val: string): void;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the GridView.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client GridView.
     */
    ClearFilter(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first data row displayed within the GridView's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Indicates whether the grid is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the GridView to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Indicates whether the Customization Window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the Customization Window.
     */
    ShowCustomizationWindow(): void;
    /**
     * Invokes the Customization Window and displays it over the specified HTML element.
     * @param showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(showAtElement?: Object): void;
    /**
     * Closes the Customization Window.
     */
    HideCustomizationWindow(): void;
    /**
     * Returns the number of columns within the client GridView.
     */
    GetColumnsCount(): number;
    /**
     * Returns the number of columns within the client GridView.
     */
    GetColumnCount(): number;
    /**
     * Returns the row values displayed within all selected rows.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns key values of selected rows displayed within the current page.
     */
    GetSelectedKeysOnPage(): Object[];
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the values of the specified data source fields within the specified row.
     * @param visibleIndex An integer value that identifies the data row.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the specified row are returned.
     * @param onCallback An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetRowValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the row values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetPageRowValues(fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the number of rows actually displayed within the active page.
     */
    GetVisibleRowsOnPage(): number;
    /**
     * Returns the client column that resides at the specified position within the column collection.
     * @param columnIndex A zero-based index that identifies the column within the column collection (the column's Index property value).
     */
    GetColumn(columnIndex: number): ASPxClientGridViewColumn;
    /**
     * Returns the column with the specified unique identifier.
     * @param columnId A string value that specifies the column's unique identifier (the column's Name property value).
     */
    GetColumnById(columnId: string): ASPxClientGridViewColumn;
    /**
     * Returns the client column which is bound to the specified data source field.
     * @param columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
     */
    GetColumnByField(columnFieldName: string): ASPxClientGridViewColumn;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param column An ASPxClientGridViewColumn object that specifies the required column within the client grid.
     */
    GetEditor(column: ASPxClientGridViewColumn): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    GetEditor(columnIndex: number): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    GetEditor(columnFieldNameOrId: string): ASPxClientEdit;
    /**
     * Returns the value of the specified edit cell.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client grid.
     */
    GetEditValue(column: ASPxClientGridViewColumn): string;
    /**
     * Returns the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column within the grid's column collection.
     */
    GetEditValue(columnIndex: number): string;
    /**
     * Returns the value of the specified edit cell.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    GetEditValue(columnFieldNameOrId: string): string;
    /**
     * Moves focus to the specified edit cell within the edited row.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client grid.
     */
    FocusEditor(column: ASPxClientGridViewColumn): void;
    /**
     * Moves focus to the specified edit cell within the edited row.
     * @param columnIndex An integer value that specifies the column's position within the columns collection.
     */
    FocusEditor(columnIndex: number): void;
    /**
     * Moves focus to the specified edit cell within the edited row.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    FocusEditor(columnFieldNameOrId: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client grid.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientGridViewColumn, value: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column within the grid's column collection.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(columnIndex: number, value: string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(columnFieldNameOrId: string, value: string): void;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Gets information about a focused cell.
     */
    GetFocusedCell(): ASPxClientGridViewCellInfo;
    /**
     * Focuses the specified cell.
     * @param rowVisibleIndex An integer value that specifies the visible index of the row.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's Index property value).
     */
    SetFocusedCell(rowVisibleIndex: number, columnIndex: number): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientGridViewColumn object that represents the data column.
     */
    SortBy(column: ASPxClientGridViewColumn): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    SortBy(columnIndex: number): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    SortBy(columnFieldNameOrId: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientGridViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(column: ASPxClientGridViewColumn, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(columnIndex: number, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientGridViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(column: ASPxClientGridViewColumn, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnIndex: number, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param column An ASPxClientGridViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
     */
    SortBy(column: ASPxClientGridViewColumn, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
     */
    SortBy(columnIndex: number, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
     */
    SortBy(columnFieldNameOrId: string, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Hides the specified column.
     * @param column An ASPxClientGridViewColumn object that represents the column to hide.
     */
    MoveColumn(column: ASPxClientGridViewColumn): void;
    /**
     * Hides the specified column.
     * @param columnIndex An integer value that specifies the absolute index of the column to hide.
     */
    MoveColumn(columnIndex: number): void;
    /**
     * Hides the specified column.
     * @param columnFieldNameOrId A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
     */
    MoveColumn(columnFieldNameOrId: string): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param column An ASPxClientGridViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the grid.
     */
    MoveColumn(column: ASPxClientGridViewColumn, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the grid.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param columnFieldNameOrId A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the grid.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param column An ASPxClientGridViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(column: ASPxClientGridViewColumn, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid.
     * @param columnFieldNameOrId A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number, moveBefore: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
     * @param column An ASPxClientGridViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     */
    MoveColumn(column: ASPxClientGridViewColumn, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the ASPxGridView's data by the column; otherwise, false.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
     * @param columnFieldNameOrId A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
     * @param column An ASPxClientGridViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     * @param moveFromGroup true to ungroup the grid's data by the column; otherwise, false.
     */
    MoveColumn(column: ASPxClientGridViewColumn, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean, moveFromGroup: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
     * @param columnIndex An integer value that specifies the absolute index of the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     * @param moveFromGroup true to ungroup the grid's data by the column; otherwise, false.
     */
    MoveColumn(columnIndex: number, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean, moveFromGroup: boolean): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
     * @param columnFieldNameOrId A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     * @param moveFromGroup true to ungroup the grid's data by the column; otherwise, false.
     */
    MoveColumn(columnFieldNameOrId: string, moveToColumnVisibleIndex: number, moveBefore: boolean, moveToGroup: boolean, moveFromGroup: boolean): void;
    /**
     * Groups data by the values of the specified column.
     * @param column An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
     */
    GroupBy(column: ASPxClientGridViewColumn): void;
    /**
     * Groups data by the values of the specified column.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    GroupBy(columnIndex: number): void;
    /**
     * Groups data by the values of the specified column.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    GroupBy(columnFieldNameOrId: string): void;
    /**
     * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param column An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     */
    GroupBy(column: ASPxClientGridViewColumn, groupIndex: number): void;
    /**
     * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     */
    GroupBy(columnIndex: number, groupIndex: number): void;
    /**
     * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     */
    GroupBy(columnFieldNameOrId: string, groupIndex: number): void;
    /**
     * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param column An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     * @param sortOrder A string value that specifies the column's sort order.
     */
    GroupBy(column: ASPxClientGridViewColumn, groupIndex: number, sortOrder: string): void;
    /**
     * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     * @param sortOrder A string value that specifies the column's sort order.
     */
    GroupBy(columnIndex: number, groupIndex: number, sortOrder: string): void;
    /**
     * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
     * @param sortOrder A string value that specifies the column's sort order.
     */
    GroupBy(columnFieldNameOrId: string, groupIndex: number, sortOrder: string): void;
    /**
     * Ungroups data by the values of the specified column.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
     */
    UnGroup(column: ASPxClientGridViewColumn): void;
    /**
     * Ungroups data by the values of the specified column.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    UnGroup(columnIndex: number): void;
    /**
     * Ungroups data by the values of the specified column.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     */
    UnGroup(columnFieldNameOrId: string): void;
    /**
     * Expands all group rows.
     */
    ExpandAll(): void;
    /**
     * Collapses all group rows.
     */
    CollapseAll(): void;
    /**
     * Expands all detail rows.
     */
    ExpandAllDetailRows(): void;
    /**
     * Collapses all detail rows.
     */
    CollapseAllDetailRows(): void;
    /**
     * Expands the specified group row preserving the collapsed state of any child group row.
     * @param visibleIndex An integer value that identifies the group row.
     */
    ExpandRow(visibleIndex: number): void;
    /**
     * Expands the specified group row and optionally child group rows at all nesting levels.
     * @param visibleIndex An integer value that identifies the group row.
     * @param recursive true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
     */
    ExpandRow(visibleIndex: number, recursive?: boolean): void;
    /**
     * Collapses the specified group row preserving the expanded state of child group rows.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     */
    CollapseRow(visibleIndex: number): void;
    /**
     * Collapses the specified group row and optionally child group rows at all nesting levels.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     * @param recursive true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
     */
    CollapseRow(visibleIndex: number, recursive?: boolean): void;
    /**
     * Scrolls the view to the specified row.
     * @param visibleIndex An integer value that identifies a row by its visible index.
     */
    MakeRowVisible(visibleIndex: number): void;
    /**
     * Expands the specified detail row.
     * @param visibleIndex A zero-based integer index that identifies the detail row.
     */
    ExpandDetailRow(visibleIndex: number): void;
    /**
     * Collapses the specified detail row.
     * @param visibleIndex A zero-based integer index that identifies the detail row.
     */
    CollapseDetailRow(visibleIndex: number): void;
    /**
     * Returns the key value of the specified data row.
     * @param visibleIndex An integer value that specifies the row's visible index.
     */
    GetRowKey(visibleIndex: number): string;
    /**
     * Switches the grid to edit mode.
     * @param visibleIndex A zero-based integer that identifies a data row to be edited.
     */
    StartEditRow(visibleIndex: number): void;
    /**
     * Switches the grid to edit mode.
     * @param key An object that uniquely identifies a data row to be edited.
     */
    StartEditRowByKey(key: Object): void;
    /**
     * Indicates whether or not a new row is being edited.
     */
    IsNewRowEditing(): boolean;
    /**
     * Adds a new record.
     */
    AddNewRow(): void;
    /**
     * Deletes the specified row.
     * @param visibleIndex An integer value that identifies the row.
     */
    DeleteRow(visibleIndex: number): void;
    /**
     * Deletes a row with the specified key value.
     * @param key An object that uniquely identifies the row.
     */
    DeleteRowByKey(key: Object): void;
    /**
     * Returns the focused row's index.
     */
    GetFocusedRowIndex(): number;
    /**
     * Moves focus to the specified row.
     * @param visibleIndex An integer value that specifies the focused row's index.
     */
    SetFocusedRowIndex(visibleIndex: number): void;
    /**
     * Selects all the unselected rows within the grid.
     */
    SelectRows(): void;
    /**
     * Selects the specified row displayed within the grid.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     */
    SelectRows(visibleIndex: number): void;
    /**
     * Selects the specified rows within the grid.
     * @param visibleIndices An array of zero-based indices that identify data rows within the grid.
     */
    SelectRows(visibleIndices: number[]): void;
    /**
     * Selects or deselects the specified rows within the grid.
     * @param visibleIndices An array of zero-based indices that identify data rows within the grid.
     * @param selected true to select the specified rows; false to deselect the rows.
     */
    SelectRows(visibleIndices: number[], selected: boolean): void;
    /**
     * Selects or deselects the specified row within the grid.
     * @param visibleIndex An integer zero-based index that identifies the data row within the grid.
     * @param selected true to select the specified row; false to deselect the row.
     */
    SelectRows(visibleIndex: number, selected?: boolean): void;
    /**
     * Selects or deselects the specified rows displayed within the grid.
     * @param keys An array of objects that uniquely identify the rows.
     * @param selected true to select the specified rows; false to deselect the rows.
     */
    SelectRowsByKey(keys: Object[], selected?: boolean): void;
    /**
     * Selects or deselects the specified row displayed within the grid.
     * @param key An object that uniquely identifies the row.
     * @param selected true to select the specified row; false to deselect the row.
     */
    SelectRowsByKey(key: Object, selected?: boolean): void;
    /**
     * Selects the specified rows displayed within the grid.
     * @param keys An array of objects that uniquely identify the rows.
     */
    SelectRowsByKey(keys: Object[]): void;
    /**
     * Selects a grid row by its key.
     * @param key An object that uniquely identifies the row.
     */
    SelectRowsByKey(key: Object): void;
    /**
     * Deselects the specified rows displayed within the grid.
     * @param keys An array of objects that uniquely identify the rows.
     */
    UnselectRowsByKey(keys: Object[]): void;
    /**
     * Deselects the specified row displayed within the grid.
     * @param key An object that uniquely identifies the row.
     */
    UnselectRowsByKey(key: Object): void;
    /**
     * Deselects all the selected rows within the grid.
     */
    UnselectRows(): void;
    /**
     * Deselects the specified rows (if selected) within the grid.
     * @param visibleIndices An array of zero-based indices that identify data rows within the grid.
     */
    UnselectRows(visibleIndices: number[]): void;
    /**
     * Deselects the specified row (if selected) within the grid.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     */
    UnselectRows(visibleIndex: number): void;
    /**
     * Deselects all grid rows that match the filter criteria currently applied to the grid.
     */
    UnselectFilteredRows(): void;
    /**
     * Selects the specified row displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     */
    SelectRowOnPage(visibleIndex: number): void;
}
/**
 * A client grid column.
 */
interface ASPxClientGridViewColumn extends ASPxClientGridColumnBase {
    /**
     * Gets the column's unique identifier.
     * Value: A string value that specifies the column's unique identifier.
     */
    id: string;
    /**
     * Gets the name that uniquely identifies the column.
     * Value: A string value assigned to the column's Name property.
     */
    name: string;
    /**
     * Gets the column's position within the collection.
     * Value: An integer zero-bazed index that specifies the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current column.
     * Value: A string value that specifies the name of a data field.
     */
    fieldName: string;
    /**
     * Gets whether the column is visible.
     * Value: true to display the column; otherwise, false.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of row values when the client GetSelectedFieldValues method is called.
 */
interface ASPxClientGridViewValuesCallback {
    /**
     * Represents a JavaScript function which receives the list of row values when the client GetSelectedFieldValues method is called.
     * @param result An object that represents the list of row values received from the server.
     */
    (result: Object): void;
}
/**
 * A method that will handle the cancelable events of a client ASPxGridView column.
 */
interface ASPxClientGridViewColumnCancelEventHandler<S> {
    /**
     * A method that will handle the cancelable events of a client ASPxGridView column.
     * @param source The event source.
     * @param e An ASPxClientGridViewColumnCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewColumnCancelEventArgs): void;
}
/**
 * Provides data for the cancelable events of a client ASPxGridView column.
 */
interface ASPxClientGridViewColumnCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed client column.
     * Value: An ASPxClientGridViewColumn object that represents the processed column.
     */
    column: ASPxClientGridViewColumn;
}
/**
 * A method that will handle the client events concerned with column processing.
 */
interface ASPxClientGridViewColumnProcessingModeEventHandler<S> {
    /**
     * A method that will handle the client events concerned with column processing.
     * @param source The event source.
     * @param e A ASPxClientGridViewColumnProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewColumnProcessingModeEventArgs): void;
}
/**
 * Provides data for the client events  concerned with column processing, and that allow the event's processing to be passed to the server side.
 */
interface ASPxClientGridViewColumnProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets a grid column related to the event.
     * Value: An ASPxClientGridViewColumn object representing the column related to the event.
     */
    column: ASPxClientGridViewColumn;
}
/**
 * A method that will handle the RowExpanding events.
 */
interface ASPxClientGridViewRowCancelEventHandler<S> {
    /**
     * A method that will handle the RowExpanding events.
     * @param source The event source.
     * @param e An ASPxClientGridViewRowCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewRowCancelEventArgs): void;
}
/**
 * Provides data for the RowExpanding events.
 */
interface ASPxClientGridViewRowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed row's visible index.
     * Value: An integer zero-based index that identifies the processed row.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the SelectionChanged event.
 */
interface ASPxClientGridViewSelectionEventHandler<S> {
    /**
     * A method that will handle the SelectionChanged event.
     * @param source The event source.
     * @param e An ASPxClientGridViewSelectionEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewSelectionEventArgs): void;
}
/**
 * Provides data for the SelectionChanged event.
 */
interface ASPxClientGridViewSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the visible index of the row whose selected state has been changed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the row.
     */
    visibleIndex: number;
    /**
     * Gets whether the row has been selected.
     * Value: true if the row has been selected; otherwise, false.
     */
    isSelected: boolean;
    /**
     * Gets whether all rows displayed within a page have been selected or unselected.
     * Value: true if all rows displayed within a page have been selected or unselected; otherwise, false.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     * Value: true  if a selection has been changed on the server; otherwise, false.
     */
    isChangedOnServer: boolean;
}
/**
 * A method that will handle the RowClick events.
 */
interface ASPxClientGridViewRowClickEventHandler<S> {
    /**
     * A method that will handle the RowClick event.
     * @param source The event source. This parameter identifies the ASPxClientGridView object that raised the event.
     * @param e An ASPxClientGridViewRowClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewRowClickEventArgs): void;
}
/**
 * Provides data for the RowClick event.
 */
interface ASPxClientGridViewRowClickEventArgs extends ASPxClientGridViewRowCancelEventArgs {
    /**
     * Provides access to the parameters associated with the RowClick event.
     * Value: An object that contains parameters associated with the event.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the ContextMenu event.
 */
interface ASPxClientGridViewContextMenuEventHandler<S> {
    /**
     * A method that will handle the ContextMenu event.
     * @param source The event source.
     * @param e An ASPxClientGridViewContextMenuEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewContextMenuEventArgs): void;
}
/**
 * Provides data for the ContextMenu event.
 */
interface ASPxClientGridViewContextMenuEventArgs extends ASPxClientEventArgs {
    /**
     * Gets which grid element has been right clicked by the user.
     * Value: A String value that specifies grid element.
     */
    objectType: string;
    /**
     * Identifies the grid element being right clicked by the user.
     * Value: A zero-based integer index that identifies the grid element being clicked by the user.
     */
    index: number;
    /**
     * Provides access to the parameters associated with the ContextMenu event.
     * Value: An object that contains parameters associated with the event.
     */
    htmlEvent: Object;
    /**
     * Gets the currently processed menu object.
     * Value: An object that is the currently processed menu.
     */
    menu: Object;
    /**
     * Specifies whether a browser context menu should be displayed.
     * Value: true, to display a browser context menu; otherwise, false.    The default is false.
     */
    showBrowserMenu: boolean;
}
/**
 * A method that will handle the client ContextMenuItemClick event.
 */
interface ASPxClientGridViewContextMenuItemClickEventHandler<S> {
    /**
     * A method that will handle the ContextMenuItemClick event.
     * @param source The event source.
     * @param e An ASPxClientGridViewContextMenuItemClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewContextMenuItemClickEventArgs): void;
}
/**
 * Provides data for the ContextMenuItemClick event.
 */
interface ASPxClientGridViewContextMenuItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the clicked context menu item.
     * Value: An <see cref="ASPxClientMenuItem" /> object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientMenuItem;
    /**
     * Gets which grid element has been right clicked by the user.
     * Value: A String value that specifies the grid element.
     */
    objectType: string;
    /**
     * Returns the processed element index.
     * Value: An integer value that specifies the processed element index.
     */
    elementIndex: number;
    /**
     * Specifies whether a postback or a callback is used to finally process the event on the server side.
     * Value: true to perform the round trip to the server side via postback; false to perform the round trip to the server side via callback.
     */
    usePostBack: boolean;
    /**
     * Specifies whether default context menu item click is handled manually, so no default processing is required.
     * Value: true if no default processing is required; otherwise false.
     */
    handled: boolean;
}
/**
 * A method that will handle the CustomButtonClick event.
 */
interface ASPxClientGridViewCustomButtonEventHandler<S> {
    /**
     * A method that will handle the CustomButtonClick event.
     * @param source The event source.  This parameter identifies the ASPxClientGridView object that raised the event.
     * @param e An ASPxClientGridViewCustomButtonEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewCustomButtonEventArgs): void;
}
/**
 * Provides data for the CustomButtonClick event.
 */
interface ASPxClientGridViewCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the value which identifies the row whose custom button has been clicked.
     * Value: An integer value that identifies the row whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value which identifies the custom button.
     * Value: A string value that identifies the clicked custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the ColumnMoving event.
 */
interface ASPxClientGridViewColumnMovingEventHandler<S> {
    /**
     * A method that will handle the ColumnMoving event.
     * @param source The event source.
     * @param e An ASPxClientGridViewColumnMovingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewColumnMovingEventArgs): void;
}
/**
 * Provides data for the ColumnMoving event.
 */
interface ASPxClientGridViewColumnMovingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether a column is allowed to be moved.
     * Value: true to allow column moving; otherwise, false.
     */
    allow: boolean;
    /**
     * Gets the column currently being dragged by an end-user.
     * Value: An ASPxClientGridViewColumn object that represents the column currently being dragged by an end-user.
     */
    sourceColumn: ASPxClientGridViewColumn;
    /**
     * Gets the target column, before or after which the source column will be inserted (if dropped).
     * Value: An ASPxClientGridViewColumn object that represents the target column. null (Nothing in Visual Basic) if the source column isn't over the column header panel.
     */
    destinationColumn: ASPxClientGridViewColumn;
    /**
     * Gets whether the source column will be inserted before the target column (if dropped).
     * Value: true if the source column will be inserted before the target column (if dropped); otherwise, false.
     */
    isDropBefore: boolean;
    /**
     * Gets whether the source column is currently over the Group Panel.
     * Value: true if the source column is currently over the Group Panel; otherwise, false.
     */
    isGroupPanel: boolean;
}
/**
 * Represents an object that will handle the client-side BatchEditConfirmShowing event.
 */
interface ASPxClientGridViewBatchEditConfirmShowingEventHandler<S> {
    /**
     * A method that will handle the BatchEditConfirmShowing client event.
     * @param source The event source.
     * @param e An ASPxClientGridViewBatchEditConfirmShowingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditConfirmShowingEventArgs): void;
}
/**
 * Provides data for the BatchEditConfirmShowing event.
 */
interface ASPxClientGridViewBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the client identifier of an object that initiates a send request.
     * Value: A string value that specifies the object client identifier.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the client BatchEditStartEditing event.
 */
interface ASPxClientGridViewBatchEditStartEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditStartEditing event.
     * @param source The event source.
     * @param e An ASPxClientGridViewBatchEditStartEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditStartEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditStartEditing event.
 */
interface ASPxClientGridViewBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the row whose cells are about to be edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the row.
     */
    visibleIndex: number;
    /**
     * Gets the grid column that owns a cell that is about to be edited.
     * Value: An <see cref="ASPxClientGridViewColumn" /> object that is the focused grid column.
     */
    focusedColumn: ASPxClientGridViewColumn;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: A hashtable that stores information about editable cells.
     */
    rowValues: Object;
}
/**
 * A method that will handle the client BatchEditEndEditing event.
 */
interface ASPxClientGridViewBatchEditEndEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditEndEditing event.
     * @param source The event source.
     * @param e An ASPxClientGridViewBatchEditEndEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditEndEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditEndEditing event.
 */
interface ASPxClientGridViewBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the row whose cells has been edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the row.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: A hashtable that stores information about editable cells.
     */
    rowValues: Object;
}
/**
 * A method that will handle the client BatchEditRowValidating event.
 */
interface ASPxClientGridViewBatchEditRowValidatingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRowValidating event.
     * @param source The event source.
     * @param e An ASPxClientGridViewBatchEditRowValidatingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditRowValidatingEventArgs): void;
}
/**
 * Provides data for the BatchEditRowValidating event.
 */
interface ASPxClientGridViewBatchEditRowValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the processed row's visible index.
     * Value: An integer value that specifies the processed row's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information of a row currently being validated.
     * Value: An object that is a hashtable containing validation information.
     */
    validationInfo: Object;
}
/**
 * A method that will handle the client BatchEditTemplateCellFocused event.
 */
interface ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler<S> {
    /**
     * A method that will handle the BatchEditTemplateCellFocused event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs): void;
}
/**
 * Provides data for the BatchEditTemplateCellFocused event.
 */
interface ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the currently processed column.
     * Value: A <see cref="ASPxClientGridViewColumn" /> object that is the client-side column object.
     */
    column: ASPxClientGridViewColumn;
    /**
     * Gets or sets a value specifying whether the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the BatchEditChangesSaving event.
 */
interface ASPxClientGridViewBatchEditChangesSavingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesSaving event.
     * @param source The event source. This parameter identifies the grid view object which raised the event.
     * @param e An ASPxClientGridViewBatchEditChangesSavingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditChangesSavingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesSaving event.
 */
interface ASPxClientGridViewBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * A method that will handle the BatchEditChangesCanceling event.
 */
interface ASPxClientGridViewBatchEditChangesCancelingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesCanceling event.
     * @param source The event source. This parameter identifies the grid view object which raised the event.
     * @param e An ASPxClientGridViewBatchEditChangesCancelingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditChangesCancelingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesCanceling event.
 */
interface ASPxClientGridViewBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * A method that will handle the BatchEditRowInserting event.
 */
interface ASPxClientGridViewBatchEditRowInsertingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRowInserting event.
     * @param source The event source. This parameter identifies the card view object which raised the event.
     * @param e An ASPxClientGridViewBatchEditRowInsertingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditRowInsertingEventArgs): void;
}
/**
 * Provides data for the BatchEditRowInserting event.
 */
interface ASPxClientGridViewBatchEditRowInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed row's visible index.
     * Value: An integer value that specifies the processed row's visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the BatchEditRowDeleting event.
 */
interface ASPxClientGridViewBatchEditRowDeletingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRowDeleting event.
     * @param source The event source. This parameter identifies the grid view object which raised the event.
     * @param e An ASPxClientGridViewBatchEditRowDeletingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGridViewBatchEditRowDeletingEventArgs): void;
}
/**
 * Provides data for the BatchEditRowDeleting event.
 */
interface ASPxClientGridViewBatchEditRowDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed row's visible index.
     * Value: An integer value that specifies the processed row's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    rowValues: Object;
}
/**
 * Contains information on a grid cell.
 */
interface ASPxClientGridViewCellInfo {
    /**
     * Gets the visible index of the row that contains the cell currently being processed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the row.
     */
    rowVisibleIndex: number;
    /**
     * Gets the data column that contains the cell currently being processed.
     * Value: An <see cref="ASPxClientGridViewColumn" /> object that is the data column which contains the processed cell.
     */
    column: ASPxClientGridViewColumn;
}
/**
 * Provides members related to Batch Edit Mode
 */
interface ASPxClientGridViewBatchEditApi {
    /**
     * Performs validation of grid data when the grid operates in Batch Edit mode.
     */
    ValidateRows(): boolean;
    /**
     * Performs validation of grid data contained in the specified row when the grid operates in Batch Edit mode.
     * @param visibleIndex An integer value specifying the visible index of the validated row.
     */
    ValidateRow(visibleIndex: number): boolean;
    /**
     * Returns an array of row visible indices.
     * @param includeDeleted true, to include visible indices of deleted rows to the returned array; otherwise, false.
     */
    GetRowVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted row visible indices.
     */
    GetDeletedRowIndices(): number[];
    /**
     * Returns an array of the inserted row visible indices.
     */
    GetInsertedRowIndices(): number[];
    /**
     * Indicates if the row with specified visible index is deleted.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsDeletedRow(visibleIndex: number): boolean;
    /**
     * Indicates if the row with specified visible index is newly created.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsNewRow(visibleIndex: number): boolean;
    /**
     * Programmatically moves the focus to the previous cell in the row.
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the row.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets a value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the row containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: Object): void;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the row containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: Object, displayText: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell.
     * @param visibleIndex A zero-based integer value that specifies a visible index of a row containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, columnFieldNameOrId: string, initial?: boolean): Object;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientGridViewCellInfo;
    /**
     * Returns a value that indicates whether the grid has changed data.
     */
    HasChanges(): boolean;
    /**
     * Returns a value that indicates whether the specified row has changed data.
     * @param visibleIndex An integer value that specifies the visible index of a row.
     */
    HasChanges(visibleIndex: number): boolean;
    /**
     * Returns a value that indicates whether the specified data cell's data has been changed.
     * @param visibleIndex An integer value that specifies the visible index of a row.
     * @param columnFieldNameOrId A string value that identifies the column by the name of the data source field to which the column is bound, or by the column's name.
     */
    HasChanges(visibleIndex: number, columnFieldNameOrId: string): boolean;
    /**
     * Resets changes in the specified row.
     * @param visibleIndex An integer value that specifies the visible index of a row.
     */
    ResetChanges(visibleIndex: number): void;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a row containing the processed cell.
     * @param columnIndex A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     */
    ResetChanges(visibleIndex: number, columnIndex: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a row containing the processed cell.
     * @param columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
     */
    StartEdit(visibleIndex: number, columnIndex: number): void;
    /**
     * Ends cell or row editing.
     */
    EndEdit(): void;
}
/**
 * A client-side equivalent of the ASPxVerticalGrid object.
 */
interface ASPxClientVerticalGrid extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     * Value: A <see cref="ASPxClientVerticalGridBatchEditApi" /> object that exposes the batch editing client API methods.
     */
    batchEditApi: ASPxClientVerticalGridBatchEditApi;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientVerticalGridCustomButtonEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientVerticalGridSelectionEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientVerticalGridBatchEditStartEditingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs when a grid leaves the batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientVerticalGridBatchEditEndEditingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientVerticalGridBatchEditConfirmShowingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientVerticalGridBatchEditChangesSavingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientVerticalGridBatchEditChangesCancelingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before a record is inserted in batch edit mode.
     */
    BatchEditRecordInserting: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordInsertingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before a record is deleted in batch edit mode.
     */
    BatchEditRecordDeleting: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordDeletingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to specify whether record data is valid and provide an error text.
     */
    BatchEditRecordValidating: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordValidatingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to prevent rows from being sorted.
     */
    RowSorting: ASPxClientEvent<ASPxClientVerticalGridRowCancelEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client side before the expansion state of a row is changed by end-user interaction.
     */
    RowExpandedChanging: ASPxClientEvent<ASPxClientVerticalGridRowExpandingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client side after a row's expansion state has been changed by end-user interaction.
     */
    RowExpandedChanged: ASPxClientEvent<ASPxClientVerticalGridRowExpandedEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client when a record is clicked.
     */
    RecordClick: ASPxClientEvent<ASPxClientVerticalGridRecordClickEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client when a record is double clicked.
     */
    RecordDblClick: ASPxClientEvent<ASPxClientVerticalGridRecordClickEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientVerticalGrid.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Sorts data by the specified data row's values.
     * @param row An ASPxClientVerticalGridRow object that represents the data row.
     */
    SortBy(row: ASPxClientVerticalGridRow): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowIndex An integer value that specifies the row's position within the row collection.
     */
    SortBy(rowIndex: number): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowFieldNameOrId A string value that specifies the row's field name or unique identifier (the row's Name property value).
     */
    SortBy(rowFieldNameOrId: string): void;
    /**
     * Sorts data by the specified data row's values.
     * @param row An ASPxClientVerticalGridRow object that represents the data row.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(row: ASPxClientVerticalGridRow, sortOrder: string): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowIndex An integer value that specifies the row's position within the row collection.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(rowIndex: number, sortOrder: string): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowFieldNameOrId A string value that specifies the row's field name or unique identifier (the row's Name property value).
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     */
    SortBy(rowFieldNameOrId: string, sortOrder: string): void;
    /**
     * Sorts data by the specified data row's values.
     * @param row An ASPxClientVerticalGridRow object that represents the data row.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(row: ASPxClientVerticalGridRow, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowIndex An integer value that specifies the row's position within the row collection.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true, to clear any previous sorting; otherwise, false.
     */
    SortBy(rowIndex: number, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data row's values.
     * @param rowFieldNameOrId A string value that specifies the row's field name or unique identifier (the row's Name property value).
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(rowFieldNameOrId: string, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
     * @param row An ASPxClientGridViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
     */
    SortBy(row: ASPxClientVerticalGridRow, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
     * @param rowIndex An integer value that specifies the row's position within the row collection.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex 
     */
    SortBy(rowIndex: number, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
     * @param rowFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
     */
    SortBy(rowFieldNameOrId: string, sortOrder: string, reset: boolean, sortIndex: number): void;
    /**
     * Returns the key value of the specified data row (record in the vertical grid).
     * @param visibleIndex An integer value that specifies the record's visible index.
     */
    GetRecordKey(visibleIndex: number): string;
    /**
     * Adds a new record.
     */
    AddNewRecord(): void;
    /**
     * Deletes the specified record.
     * @param visibleIndex An integer value that identifies the record.
     */
    DeleteRecord(visibleIndex: number): void;
    /**
     * Deletes a record with the specified key value.
     * @param key An object that uniquely identifies the record.
     */
    DeleteRecordByKey(key: Object): void;
    /**
     * Selects all the unselected records within the grid.
     */
    SelectRecords(): void;
    /**
     * Selects the specified record displayed within the grid.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     */
    SelectRecords(visibleIndex: number): void;
    /**
     * Selects the specified rercords within the grid.
     * @param visibleIndices An array of zero-based indices that identify records within the grid.
     */
    SelectRecords(visibleIndices: number[]): void;
    /**
     * Selects or deselects the specified records within the grid.
     * @param visibleIndices An array of zero-based indices that identify records within the grid.
     * @param selected true to select the specified records; false to deselect the records.
     */
    SelectRecords(visibleIndices: number[], selected: boolean): void;
    /**
     * Selects or deselects the specified record within the grid.
     * @param visibleIndex An integer zero-based index that identifies the record within the grid.
     * @param selected true to select the specified record; false to deselect the record.
     */
    SelectRecords(visibleIndex: number, selected?: boolean): void;
    /**
     * Selects or deselects the specified records displayed within the grid.
     * @param keys An array of objects that uniquely identify the records.
     * @param selected true to select the specified records; false to deselect the records.
     */
    SelectRecordsByKey(keys: Object[], selected?: boolean): void;
    /**
     * Selects or deselects the specified record displayed within the grid.
     * @param key An object that uniquely identifies the record.
     * @param selected true to select the specified record; false to deselect the record.
     */
    SelectRecordsByKey(key: Object, selected?: boolean): void;
    /**
     * Selects the specified records displayed within the grid.
     * @param keys An array of objects that uniquely identify the records.
     */
    SelectRecordsByKey(keys: Object[]): void;
    /**
     * Selects a grid record by its key.
     * @param key An object that uniquely identifies the record.
     */
    SelectRecordsByKey(key: Object): void;
    /**
     * Deselects all the selected records within the grid.
     */
    UnselectRecords(): void;
    /**
     * Deselects the specified records (if selected) within the grid.
     * @param visibleIndices An array of zero-based indices that identify records within the grid.
     */
    UnselectRecords(visibleIndices: number[]): void;
    /**
     * Deselects the specified record (if selected) within the grid.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     */
    UnselectRecords(visibleIndex: number): void;
    /**
     * Deselects the specified records displayed within the grid.
     * @param keys An array of objects that uniquely identify the records.
     */
    UnselectRecordsByKey(keys: Object[]): void;
    /**
     * Deselects the specified record displayed within the grid.
     * @param key An object that uniquely identifies the record.
     */
    UnselectRecordsByKey(key: Object): void;
    /**
     * Deselects all grid records that match the filter criteria currently applied to the grid.
     */
    UnselectFilteredRecords(): void;
    /**
     * Selects the specified record displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     */
    SelectRecordOnPage(visibleIndex: number): void;
    /**
     * Selects or deselects the specified record displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     * @param selected true to select the specified record; false to deselect the record.
     */
    SelectRecordOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified record (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     */
    UnselectRecordOnPage(visibleIndex: number): void;
    /**
     * Selects all unselected records displayed on the current page.
     */
    SelectAllRecordsOnPage(): void;
    /**
     * Allows you to select or deselect all records displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected records displayed on the current page; false to deselect all selected records on the page.
     */
    SelectAllRecordsOnPage(selected: boolean): void;
    /**
     * Deselects all selected records displayed on the current page.
     */
    UnselectAllRecordsOnPage(): void;
    /**
     * Returns the number of selected records.
     */
    GetSelectedRecordCount(): number;
    /**
     * Indicates whether or not the specified record is selected within the current page.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsRecordSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Returns the values of the specified data source fields within the specified record.
     * @param visibleIndex An integer value that identifies the record.
     * @param fieldNames The names of data source fields separated using a semicolon, whose values within the specified record are returned.
     * @param onCallback An ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetRecordValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the record values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetPageRecordValues(fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the number of records actually displayed within the active page.
     */
    GetVisibleRecordsOnPage(): number;
    /**
     * Returns the number of rows within the client vertical grid.
     */
    GetRowCount(): number;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the ASPxVerticalGrid.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client vertical grid.
     */
    ClearFilter(): void;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first record displayed within the vertical grid's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the ASPxVerticalGrid to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Returns the record values displayed within all selected records.
     * @param fieldNames The names of data source fields separated by a semicolon, whose values within the selected records are returned.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns key values of selected records displayed within the current page.
     */
    GetSelectedKeysOnPage(): Object[];
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the editor used to edit the specified row's values.
     * @param row An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
     */
    GetEditor(row: ASPxClientVerticalGridRow): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified row's values.
     * @param rowIndex An integer value that specifies the row's position within the rows collection.
     */
    GetEditor(rowIndex: number): ASPxClientEdit;
    /**
     * Returns the editor used to edit the specified row's values.
     * @param rowFieldNameOrId A string value that specifies the row's field name or unique identifier (the row's Name property value).
     */
    GetEditor(rowFieldNameOrId: string): ASPxClientEdit;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Returns the client row that resides at the specified position within the row collection.
     * @param rowIndex A zero-based index that identifies the row within the row collection (the row's Index property value).
     */
    GetRow(rowIndex: number): ASPxClientVerticalGridRow;
    /**
     * Returns the row with the specified unique identifier.
     * @param rowId A string value that specifies the row's unique identifier (the row's Name property value).
     */
    GetRowById(rowId: string): ASPxClientVerticalGridRow;
    /**
     * Returns the client row which is bound to the specified data source field.
     * @param rowFieldName A string value that specifies the name of the data source field to which the row is bound (the row's fieldName property value).
     */
    GetRowByField(rowFieldName: string): ASPxClientVerticalGridRow;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorizontalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
    /**
     * Gets the value that specifies whether the required row is expanded.
     * @param row An ASPxClientVerticalGridRowobject that specifies the row.
     */
    GetRowExpanded(row: ASPxClientVerticalGridRow): boolean;
    /**
     * Gets the value that specifies whether the row with the specified index is expanded.
     * @param rowIndex An integer value specifying the row's index.
     */
    GetRowExpanded(rowIndex: number): boolean;
    /**
     * Gets the value that specifies whether the row with the specified field name or ID is expanded.
     * @param rowFieldNameOrId A string value specifying the row's field name or ID.
     */
    GetRowExpanded(rowFieldNameOrId: string): boolean;
    /**
     * Sets a value indicating whether the row is expanded.
     * @param row An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
     * @param value true, to expand the row; otherwise, false.
     */
    SetRowExpanded(row: ASPxClientVerticalGridRow, value: boolean): void;
    /**
     * Sets a value indicating whether the row is expanded.
     * @param rowIndex An integer value specifying the index of the row.
     * @param value true, to expand the row; otherwise, false.
     */
    SetRowExpanded(rowIndex: number, value: boolean): void;
    /**
     * Sets a value indicating whether the row is expanded.
     * @param rowFieldNameOrId A string value that specifies the row's field name or unique identifier (the row's Name property value).
     * @param value true, to expand the row; otherwise, false.
     */
    SetRowExpanded(rowFieldNameOrId: string, value: boolean): void;
}
/**
 * A client grid row.
 */
interface ASPxClientVerticalGridRow extends ASPxClientGridColumnBase {
    /**
     * Gets the name that uniquely identifies the row.
     * Value: A string value assigned to the row's Name property.
     */
    name: string;
    /**
     * Gets the row's position within the collection.
     * Value: An integer zero-bazed index that specifies the row's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current row.
     * Value: A string value that specifies the name of a data field.
     */
    fieldName: string;
    /**
     * Gets whether the row is visible.
     * Value: true, to display the row; otherwise, false.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of record values when the client GetSelectedFieldValues method is called.
 */
interface ASPxClientVerticalGridValuesCallback {
    /**
     * Represents a JavaScript function which receives the list of record values when the client GetSelectedFieldValues method is called.
     * @param result An object that represents the list of record values received from the server.
     */
    (result: Object): void;
}
/**
 * A method that will handle the CustomButtonClick event.
 */
interface ASPxClientVerticalGridRowCancelEventHandler<S> {
    /**
     * A method that will handle the cancelable events of a client ASPxVerticalGrid row.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridRowCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridRowCancelEventArgs): void;
}
/**
 * Provides data for the cancelable events of a client ASPxVerticalGrid row.
 */
interface ASPxClientVerticalGridRowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed client row.
     * Value: An ASPxClientVerticalGridRow object that represents the processed row.
     */
    row: ASPxClientVerticalGridRow;
}
/**
 * A method that will handle the RecordClick event.
 */
interface ASPxClientVerticalGridRecordClickEventHandler<S> {
    /**
     * A method that will handle the RecordClick event.
     * @param source The event source. This parameter identifies the ASPxClientVerticalGrid object that raised the event.
     * @param e An ASPxClientVerticalGridRecordClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridRecordClickEventArgs): void;
}
/**
 * Provides data for the RecordClick event.
 */
interface ASPxClientVerticalGridRecordClickEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed record's visible index.
     * Value: An integer zero-based index that identifies the processed record.
     */
    visibleIndex: number;
    /**
     * Provides access to the parameters associated with the RecordClick event.
     * Value: An object that contains parameters associated with the event.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the CustomButtonClick event.
 */
interface ASPxClientVerticalGridCustomButtonEventHandler<S> {
    /**
     * A method that will handle the CustomButtonClick event.
     * @param source The event source.  This parameter identifies the ASPxClientVerticalGrid object that raised the event.
     * @param e An ASPxClientVerticalGridCustomButtonEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridCustomButtonEventArgs): void;
}
/**
 * Provides data for the CustomButtonClick event.
 */
interface ASPxClientVerticalGridCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the value which identifies the record whose custom button has been clicked.
     * Value: An integer value that identifies the record whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value which identifies the custom button.
     * Value: A string value that identifies the clicked custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the SelectionChanged event.
 */
interface ASPxClientVerticalGridSelectionEventHandler<S> {
    /**
     * A method that will handle the SelectionChanged event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridSelectionEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridSelectionEventArgs): void;
}
/**
 * Provides data for the SelectionChanged event.
 */
interface ASPxClientVerticalGridSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the visible index of the record whose selected state has been changed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the record.
     */
    visibleIndex: number;
    /**
     * Gets whether the record has been selected.
     * Value: true, if the record has been selected; otherwise, false.
     */
    isSelected: boolean;
    /**
     * Gets whether all records displayed within a page have been selected or unselected.
     * Value: true if all records displayed within a page have been selected or unselected; otherwise, false.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     * Value: true  if a selection has been changed on the server; otherwise, false.
     */
    isChangedOnServer: boolean;
}
/**
 * A method that will handle the RowExpandedChanged event.
 */
interface ASPxClientVerticalGridRowExpandedEventHandler<S> {
    /**
     * A method that will handle the RowExpandedChanged event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridRowExpandedEventArgs): void;
}
/**
 * Provides data for the RowExpandedChanged event.
 */
interface ASPxClientVerticalGridRowExpandedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the expanded row.
     * Value: An ASPxClientVerticalGridRow object that represents the expanded row.
     */
    row: ASPxClientVerticalGridRow;
}
/**
 * A method that will handle the RowExpandedChanging event.
 */
interface ASPxClientVerticalGridRowExpandingEventHandler<S> {
    /**
     * A method that will handle the RowExpandedChanging event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridRowExpandingEventArgs): void;
}
/**
 * Provides data for the RowExpandedChanging event.
 */
interface ASPxClientVerticalGridRowExpandingEventArgs extends ASPxClientVerticalGridRowExpandedEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true, if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * Represents an object that will handle the client-side BatchEditStartEditing event.
 */
interface ASPxClientVerticalGridBatchEditStartEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditStartEditing event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridBatchEditStartEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditStartEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditStartEditing event.
 */
interface ASPxClientVerticalGridBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the record whose cells are about to be edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the record.
     */
    visibleIndex: number;
    /**
     * Gets the grid row that owns a cell that is about to be edited.
     * Value: An <see cref="ASPxClientVerticalGridRow" /> object that is the focused grid row.
     */
    focusedRow: ASPxClientVerticalGridRow;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: A hashtable that stores information about editable cells.
     */
    recordValues: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditEndEditing event.
 */
interface ASPxClientVerticalGridBatchEditEndEditingEventHandler<S> {
    /**
     * A method that will handle the BatchEditEndEditing event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridBatchEditEndEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditEndEditingEventArgs): void;
}
/**
 * Provides data for the BatchEditEndEditing event.
 */
interface ASPxClientVerticalGridBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the visible index of the record whose cells have been edited.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the record.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     * Value: Gets a hashtable that maintains information about editable cells.
     */
    recordValues: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditRecordValidating event.
 */
interface ASPxClientVerticalGridBatchEditRecordValidatingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRecordValidating event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridBatchEditRecordValidatingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditRecordValidatingEventArgs): void;
}
/**
 * Provides data for the BatchEditRecordValidating event.
 */
interface ASPxClientVerticalGridBatchEditRecordValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the processed record's visible index.
     * Value: An integer value that specifies the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information on the record currently being validated.
     * Value: An object that is a hashtable containing validation information.
     */
    validationInfo: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditConfirmShowing event.
 */
interface ASPxClientVerticalGridBatchEditConfirmShowingEventHandler<S> {
    /**
     * A method that will handle the BatchEditConfirmShowing client event.
     * @param source The event source.
     * @param e An ASPxClientVerticalGridBatchEditConfirmShowingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditConfirmShowingEventArgs): void;
}
/**
 * Provides data for the BatchEditConfirmShowing event.
 */
interface ASPxClientVerticalGridBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the client identifier of an object that initiates a send request.
     * Value: A string value that specifies the object client identifier.
     */
    requestTriggerID: string;
}
/**
 * Represents an object that will handle the client-side BatchEditTemplateCellFocused event.
 */
interface ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler<S> {
    /**
     * A method that will handle the BatchEditTemplateCellFocused event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs): void;
}
/**
 * Provides data for the BatchEditTemplateCellFocused event.
 */
interface ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the currently processed row.
     * Value: A <see cref="ASPxClientVerticalGridRow" /> object that is the client-side row object.
     */
    row: ASPxClientVerticalGridRow;
    /**
     * Gets or sets a value specifying whether the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * Represents an object that will handle the client-side BatchEditChangesSaving event.
 */
interface ASPxClientVerticalGridBatchEditChangesSavingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesSaving event.
     * @param source The event source. This parameter identifies the vertical grid object which raised the event.
     * @param e An ASPxClientVerticalGridBatchEditChangesSavingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditChangesSavingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesSaving event.
 */
interface ASPxClientVerticalGridBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditChangesCanceling event.
 */
interface ASPxClientVerticalGridBatchEditChangesCancelingEventHandler<S> {
    /**
     * A method that will handle the BatchEditChangesCanceling event.
     * @param source The event source. This parameter identifies the vertical grid object which raised the event.
     * @param e An ASPxClientVerticalGridBatchEditChangesCancelingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditChangesCancelingEventArgs): void;
}
/**
 * Provides data for the BatchEditChangesCanceling event.
 */
interface ASPxClientVerticalGridBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets a hashtable that maintains information about inserted cells.
     * Value: A hashtable that stores information about inserted cells.
     */
    insertedValues: Object;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    deletedValues: Object;
    /**
     * Gets a hashtable that maintains information about updated cells.
     * Value: A hashtable that stores information about updated cells.
     */
    updatedValues: Object;
}
/**
 * Represents an object that will handle the client-side BatchEditRecordInserting event.
 */
interface ASPxClientVerticalGridBatchEditRecordInsertingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRecordInserting event.
     * @param source The event source. This parameter identifies the vertical grid object which raised the event.
     * @param e An ASPxClientVerticalGridBatchEditRecordInsertingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditRecordInsertingEventArgs): void;
}
/**
 * Provides data for the BatchEditRecordInserting event.
 */
interface ASPxClientVerticalGridBatchEditRecordInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed record's visible index.
     * Value: An integer value that specifies the processed record's visible index.
     */
    visibleIndex: number;
}
/**
 * Represents an object that will handle the client-side BatchEditRecordDeleting event.
 */
interface ASPxClientVerticalGridBatchEditRecordDeletingEventHandler<S> {
    /**
     * A method that will handle the BatchEditRecordDeleting event.
     * @param source The event source. This parameter identifies the vertical grid object which raised the event.
     * @param e An ASPxClientVerticalGridBatchEditRecordDeletingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientVerticalGridBatchEditRecordDeletingEventArgs): void;
}
/**
 * Provides data for the BatchEditRecordDeleting event.
 */
interface ASPxClientVerticalGridBatchEditRecordDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed record's visible index.
     * Value: An integer value that specifies the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     * Value: A hashtable that stores information about deleted cells.
     */
    recordValues: Object;
}
/**
 * Contains information on a cell that is being edited.
 */
interface ASPxClientVerticalGridCellInfo {
    /**
     * Gets the row that contains the cell currently being processed.
     * Value: An <see cref="ASPxClientVerticalGridRow" /> object that is the row which contains the processed cell.
     */
    row: ASPxClientVerticalGridRow;
    /**
     * Gets the visible index of the record that contains the cell currently being processed.
     * Value: An <see cref="Int32" /> value that specifies the visible index of the record.
     */
    recordVisibleIndex: number;
}
/**
 * Provides members related to Batch Edit Mode
 */
interface ASPxClientVerticalGridBatchEditApi {
    /**
     * Performs validation of grid data when the grid operates in Batch Edit mode.
     */
    ValidateRecords(): boolean;
    /**
     * Performs validation of grid data contained in the specified record when the grid operates in batch edit mode.
     * @param visibleIndex An integer value specifying the visible index of the validated record.
     */
    ValidateRecord(visibleIndex: number): boolean;
    /**
     * Returns an array of record visible indices.
     * @param includeDeleted true, to include visible indices of deleted records to the returned array; otherwise, false.
     */
    GetRecordVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted record visible indices.
     */
    GetDeletedRecordIndices(): number[];
    /**
     * Returns an array of the inserted record visible indices.
     */
    GetInsertedRecordIndices(): number[];
    /**
     * Indicates if the record with the specified visible index is deleted.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsDeletedRecord(visibleIndex: number): boolean;
    /**
     * Indicates if the record with specified visible index is newly created.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsNewRecord(visibleIndex: number): boolean;
    /**
     * Programmatically moves the focus to the previous cell in the record.
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the record.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets a value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the record containing the processed cell.
     * @param rowFieldNameOrId A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
     * @param value An object that contains the new cell value.
     */
    SetCellValue(visibleIndex: number, rowFieldNameOrId: string, value: Object): void;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the row containing the processed cell.
     * @param rowFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, rowFieldNameOrId: string, value: Object, displayText: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell.
     * @param visibleIndex A zero-based integer value that specifies a visible index of a record containing the processed cell.
     * @param rowFieldNameOrId A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, rowFieldNameOrId: string, initial?: boolean): Object;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientVerticalGridCellInfo;
    /**
     * Returns a value that indicates whether the vertical grid has changed data.
     */
    HasChanges(): boolean;
    /**
     * Returns a value that indicates whether the specified record has changed data.
     * @param visibleIndex An integer value that specifies the visible index of a record.
     */
    HasChanges(visibleIndex: number): boolean;
    /**
     * Returns a value that indicates whether the specified data cell's data has been changed.
     * @param visibleIndex An integer value that specifies the visible index of a record.
     * @param rowFieldNameOrId A string value that identifies the row by the name of the data source field to which the row is bound, or by the row's name.
     */
    HasChanges(visibleIndex: number, rowFieldNameOrId: string): boolean;
    /**
     * Resets changes in the specified record.
     * @param visibleIndex An integer value that specifies the visible index of a record.
     */
    ResetChanges(visibleIndex: number): void;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a record containing the processed cell.
     * @param rowIndex A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
     */
    ResetChanges(visibleIndex: number, rowIndex: number): void;
    /**
     * Switches the specified cell to batch edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a record containing the processed cell.
     * @param rowIndex A zero-based integer value that identifies the row which contains the processed cell in the rows collection.
     */
    StartEdit(visibleIndex: number, rowIndex: number): void;
    /**
     * Ends the cell(s) editing.
     */
    EndEdit(): void;
}
/**
 * Contains style settings related to media elements in ASPxHtmlEditor.
 */
interface ASPxClientHtmlEditorCommandStyleSettings {
    /**
     * Gets or sets a media element's CSS class name.
     * Value: A string that specifies a class name.
     */
    className: string;
    /**
     * Gets or sets an element's width.
     * Value: A string that specifies an element's width <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">in any correct format</a>.
     */
    width: string;
    /**
     * Gets or sets an element's height.
     * Value: A string that specifies an element's height <a href="http://www.w3schools.com/cssref/pr_dim_height.asp">in any correct format</a>.
     */
    height: string;
    /**
     * Gets or sets a media element's border width.
     * Value: A string that specifies a border width <a href="http://www.w3schools.com/cssref/pr_border-width.asp">in any correct format</a>.
     */
    borderWidth: string;
    /**
     * Gets or sets a media element's border color.
     * Value: A string that specifies a border color <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">in any correct format</a>.
     */
    borderColor: string;
    /**
     * Gets or sets a media element's border style.
     * Value: A string that specifies a border style <a href="http://www.w3schools.com/cssref/pr_border-style.asp">in any correct format</a>.
     */
    borderStyle: string;
    /**
     * Gets or sets an element's top margin.
     * Value: A string that specifies an element's top margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
     */
    marginTop: string;
    /**
     * Gets or sets an element's right margin.
     * Value: A string that specifies an element's right margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
     */
    marginRight: string;
    /**
     * Gets or sets an element's bottom margin.
     * Value: A string that specifies an element's bottom margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
     */
    marginBottom: string;
    /**
     * Gets or sets an element's left margin.
     * Value: A string that specifies an element's left margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
     */
    marginLeft: string;
}
/**
 * The base class for parameters used in the ASPxHtmlEditor's client-side commands.
 */
interface ASPxClientHtmlEditorCommandArguments {
    /**
     * Gets the currently selected element in the ASPxHtmlEditor.
     * Value: An HTML object which is the currently selected element.
     */
    selectedElement: Object;
}
/**
 * Contains settings related to the INSERTIMAGE_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertImageCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Specifies the source of the target image.
     * Value: A string specifying the source of the target image.
     */
    src: string;
    /**
     * Creates an alternate text for the target image.
     * Value: A string that specifies an alternate text for the target image.
     */
    alt: string;
    /**
     * Determines if the target image is wrapped with text.
     * Value: true, if the target image is wrapped with text; otherwise, false.
     */
    useFloat: boolean;
    /**
     * Determines the position of the target image.
     * Value: A string value defining the position of the target image.
     */
    align: string;
    /**
     * Contains the style settings specifying the appearance of the target image.
     * Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings specifying the appearance of the target image.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
}
/**
 * Contains settings related to the CHANGEIMAGE_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorChangeImageCommandArguments extends ASPxClientHtmlEditorInsertImageCommandArguments {
}
/**
 * Contains settings related to the INSERTLINK_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertLinkCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Specifies the url of the page the target link goes to.
     * Value: A string value specifying the target link url.
     */
    url: string;
    /**
     * Specifiies the text of the target link.
     * Value: A string value specifying the text of the target link.
     */
    text: string;
    /**
     * Determines where to open the target link.
     * Value: A string that specifies where to open the target link <a href="http://www.w3schools.com/tags/att_a_target.asp">in any correct format</a>.
     */
    target: string;
    /**
     * Defines the title of the target link.
     * Value: A string value defining the title of the target link.
     */
    title: string;
}
/**
 * The base class for parameters related to inserting or changing media elements in the ASPxHtmlEditor.
 */
interface ASPxClientHtmlEditorChangeMediaElementCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element.
     * Value: A string value which is a unique identifier for the element.
     */
    id: string;
    /**
     * Defines the source of the target media element.
     * Value: A string defining the source of the target media element.
     */
    src: string;
    /**
     * Determines the position of the target media element.
     * Value: A string value indicating the position of the target media element.
     */
    align: string;
    /**
     * Contains the style settings defining the appearance of the target media element.
     * Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
    /**
     * Returns the name of the client-side command corresponding to the parameter.
     */
    GetCommandName(): string;
}
/**
 * The base class for parameters related to inserting or changing HTML5 media elements (Audio and Video) in the ASPxHtmlEditor.
 */
interface ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    /**
     * Determines if a media file will start playing automatically.
     * Value: true, if autoplay is enabled; otherwise, false.
     */
    autoPlay: boolean;
    /**
     * Determines if a media file repeats indefinitely, or stops when it reaches the last frame.
     * Value: true, to loop playback; otherwise, false.
     */
    loop: boolean;
    /**
     * Determines if the media player controls should be displayed.
     * Value: true, if media player controls are displayed; otherwise, false.
     */
    showPlayerControls: boolean;
    /**
     * Determines how a media file should be loaded when the page loads.
     * Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
     */
    preloadMode: string;
}
/**
 * Contains settings related to the INSERTAUDIO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertAudioCommandArguments extends ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments {
}
/**
 * Contains settings related to the CHANGEAUDIO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorChangeAudioCommandArguments extends ASPxClientHtmlEditorInsertAudioCommandArguments {
}
/**
 * Contains settings related to the INSERTVIDEO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertVideoCommandArguments extends ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments {
    /**
     * Defines the URL of an image that is shown while the video file is downloading, or until an end-user clicks the play button.
     * Value: A string value that specifies the poster image URL.
     */
    posterUrl: string;
}
/**
 * Contains settings related to the CHANGEVIDEO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorChangeVideoCommandArguments extends ASPxClientHtmlEditorInsertVideoCommandArguments {
}
/**
 * Contains settings related to the INSERTFLASH_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertFlashCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    /**
     * Determines if the target flash element will start playing automatically.
     * Value: true, if autoplay is enabled; otherwise, false.
     */
    autoPlay: boolean;
    /**
     * Defines if the target flash element repeats indefinitely, or stops when it reaches the last frame.
     * Value: true, to loop playback; otherwise, false.
     */
    loop: boolean;
    /**
     * Determines if the flash related items are displayed in the context menu of the target flash element.
     * Value: true, if the specific context menu items are displayed; otherwise, false
     */
    enableFlashMenu: boolean;
    /**
     * Determines if the target flash element can be displayed in the fullscreen mode.
     * Value: true, if the fullscreen mode is allowed; otherwise, false.
     */
    allowFullscreen: boolean;
    /**
     * Defines the rendering quality level used for the target flash element.
     * Value: A string value that specifies the target flash element rendering quality.
     */
    quality: string;
}
/**
 * Contains settings related to the CHANGEFLASH_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorChangeFlashCommandArguments extends ASPxClientHtmlEditorInsertFlashCommandArguments {
}
/**
 * Contains settings related to the INSERTYOUTUBEVIDEO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    /**
     * Determines if suggested videos are shown after the target YouTube video finishes.
     * Value: true, to show suggested videos; otherwise, false
     */
    showRelatedVideos: boolean;
    /**
     * Determines if the target YouTube video title and player actions (Watch later, Share) are shown.
     * Value: true, to display the title and player actions; otherwise, false.
     */
    showVideoInfo: boolean;
    /**
     * Determines if the privacy-enhanced mode is enabled for the target YouTube video.
     * Value: true, if the privace-enhanced mode is enabled; otherwise, false
     */
    enablePrivacyEnhancedMode: boolean;
    /**
     * Determines if the player controls are displayed for the target YouTube video.
     * Value: true, if the player controls are displayed; otherwise, false.
     */
    showPlayerControls: boolean;
}
/**
 * Contains settings related to the CHANGEYOUTUBEVIDEO_COMMAND command parameter.
 */
interface ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments extends ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments {
}
/**
 * A method that will handle the DialogInitialized client event.
 */
interface ASPxClientHtmlEditorDialogInitializedEventHandler<S> {
    /**
     * A method that will handle the client DialogInitialized event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientHtmlEditorDialogInitializedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorDialogInitializedEventArgs): void;
}
/**
 * Provides data for the DialogInitialized client event.
 */
interface ASPxClientHtmlEditorDialogInitializedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dialog that has been initialized.
     * Value: A string value that is the name of the initialized dialog.
     */
    dialogName: string;
}
/**
 * A method that will handle the CommandExecuting event.
 */
interface ASPxClientHtmlEditorCommandExecutingEventHandler<S> {
    /**
     * A method that will handle the client CommandExecuted event.
     * @param source The event's source.
     * @param e An ASPxClientHtmlEditorCommandExecutingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorCommandExecutingEventArgs): void;
}
/**
 * Provides data for the CommandExecuting event.
 */
interface ASPxClientHtmlEditorCommandExecutingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value specifying the processed command's name.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     * Value: An object containing additional information about the processed command.
     */
    parameter: Object;
}
/**
 * A method that will handle the client events related to command processing.
 */
interface ASPxClientHtmlEditorCommandEventHandler<S> {
    /**
     * A method that will handle the corresponding client event.
     * @param source The event source. This parameter identifies the editor which raised the event.
     * @param e An ASPxClientHtmlEditorCommandEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorCommandEventArgs): void;
}
/**
 * Provides data for client events that relate to command processing (CustomCommand).
 */
interface ASPxClientHtmlEditorCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value representing the processed command's name.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     * Value: A string value containing additional information about the processed command.
     */
    parameter: Object;
}
/**
 * A method that will handle the client events that relate to custom dialog operations.
 */
interface ASPxClientHtmlEditorCustomDialogEventHandler<S> {
    /**
     * A method that will handle the client CustomDialogOpened event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientHtmlEditorCustomDialogEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorCustomDialogEventArgs): void;
}
/**
 * Provides data for client events that relate to custom dialog operations.
 */
interface ASPxClientHtmlEditorCustomDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name that uniquely identifies the processed custom dialog.
     * Value: A string value that represents the value assigned to the processed custom dialog's Name property.
     */
    name: string;
}
/**
 * Provides data for client events that relate to closing a custom dialog.
 */
interface ASPxClientHtmlEditorCustomDialogCloseEventArgsBase extends ASPxClientHtmlEditorCustomDialogEventArgs {
    /**
     * Gets the status of the closed custom dialog.
     * Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
     */
    status: Object;
}
/**
 * A method that will handle the CustomDialogClosing client event.
 */
interface ASPxClientHtmlEditorCustomDialogClosingEventHandler<S> {
    /**
     * A method that will handle the client CustomDialogClosing event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientHtmlEditorCustomDialogClosingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorCustomDialogClosingEventArgs): void;
}
/**
 * Provides data for the CustomDialogClosing client event.
 */
interface ASPxClientHtmlEditorCustomDialogClosingEventArgs extends ASPxClientHtmlEditorCustomDialogCloseEventArgsBase {
    /**
     * Gets or sets a value specifying whether the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the CustomDialogClosed client event.
 */
interface ASPxClientHtmlEditorCustomDialogClosedEventHandler<S> {
    /**
     * A method that will handle the client CustomDialogClosed event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientHtmlEditorCustomDialogClosedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorCustomDialogClosedEventArgs): void;
}
/**
 * Provides data for the CustomDialogClosed client event.
 */
interface ASPxClientHtmlEditorCustomDialogClosedEventArgs extends ASPxClientHtmlEditorCustomDialogCloseEventArgsBase {
    /**
     * Gets an object associated with the closed dialog.
     * Value: An object containing custom data associated with dialog closing.
     */
    data: Object;
}
/**
 * A method that will handle the Validation client event.
 */
interface ASPxClientHtmlEditorValidationEventHandler<S> {
    /**
     * A method that will handle the client Validation event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientHtmlEditorValidationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorValidationEventArgs): void;
}
/**
 * Provides data for the Validation client event.
 */
interface ASPxClientHtmlEditorValidationEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets the HTML markup that is the ASPxHtmlEditor's content.
     * Value: A string value that specifies the HTML content to validate.
     */
    html: string;
    /**
     * Gets or sets a value specifying whether the validated value is valid.
     * Value: true if the validation has been completed successfully; otherwise, false.
     */
    isValid: boolean;
    /**
     * Gets or sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     * Value: A string value specifying the error description.
     */
    errorText: string;
}
/**
 * A method that will handle the ActiveTabChanged event.
 */
interface ASPxClientHtmlEditorTabEventHandler<S> {
    /**
     * A method that will handle the client ActiveTabChanged event.
     * @param source The event's source.
     * @param e An ASPxClientHtmlEditorTabEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorTabEventArgs): void;
}
/**
 * Provides data for the ActiveTabChanged event that concerns manipulations on tabs.
 */
interface ASPxClientHtmlEditorTabEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name that uniquely identifies an editor tab.
     * Value: A string value that is the tab name.
     */
    name: string;
}
/**
 * A method that will handle the ActiveTabChanging event.
 */
interface ASPxClientHtmlEditorTabCancelEventHandler<S> {
    /**
     * A method that will handle the client ActiveTabChanging event.
     * @param source The event's source.
     * @param e An ASPxClientHtmlEditorTabCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorTabCancelEventArgs): void;
}
/**
 * Provides data for the cancellable ActiveTabChanging event that concerns manipulations on tabs.
 */
interface ASPxClientHtmlEditorTabCancelEventArgs extends ASPxClientHtmlEditorTabEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event, should be canceled.
     * Value: true, if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the BeforePaste event.
 */
interface ASPxClientHtmlEditorBeforePasteEventHandler<S> {
    /**
     * A method that will handle the BeforePaste event.
     * @param source The event source. This parameter identifies the HTML editor object that raised the event.
     * @param e An ASPxClientHtmlEditorBeforePasteEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientHtmlEditorBeforePasteEventArgs): void;
}
/**
 * Provides data for the BeforePaste event.
 */
interface ASPxClientHtmlEditorBeforePasteEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value identifying the command's name.
     */
    commandName: string;
    /**
     * Gets or sets the HTML markup that is about to be pasted to the ASPxHtmlEditor's content.
     * Value: A string value that specifies the HTML content to paste.
     */
    html: string;
}
/**
 * Represents a client-side equivalent of the ASPxHtmlEditor control.
 */
interface ASPxClientHtmlEditor extends ASPxClientControl {
    /**
     * Occurs on the client side after a dialog has been initialized.
     */
    DialogInitialized: ASPxClientEvent<ASPxClientHtmlEditorDialogInitializedEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs before a default or custom command has been executed and allows you to cancel the action.
     */
    CommandExecuting: ASPxClientEvent<ASPxClientHtmlEditorCommandExecutingEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Enables you to implement a custom command's logic.
     */
    CustomCommand: ASPxClientEvent<ASPxClientHtmlEditorCommandEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs after a default or custom command has been executed on the client side.
     */
    CommandExecuted: ASPxClientEvent<ASPxClientHtmlEditorCommandEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side when the editor's Design View Area receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side when the editor's Design View Area loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client when a selection is changed within the ASPxHtmlEditor.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side when the content of the editor changes.
     */
    HtmlChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a custom dialog is opened.
     */
    CustomDialogOpened: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side before a custom dialog is closed.
     */
    CustomDialogClosing: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogClosingEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a custom dialog is closed.
     */
    CustomDialogClosed: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogClosedEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
     */
    Validation: ASPxClientEvent<ASPxClientHtmlEditorValidationEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side before a context menu is shown.
     */
    ContextMenuShowing: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires after a callback, sent by the CustomDataCallback event handler.
     */
    CustomDataCallback: ASPxClientEvent<ASPxClientCustomDataCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after the editor content is spell checked.
     */
    SpellingChecked: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side after the active tab has been changed within a control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientHtmlEditorTabEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side before the active tab is changed within a control.
     */
    ActiveTabChanging: ASPxClientEvent<ASPxClientHtmlEditorTabCancelEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs before an HTML code is pasted to editor content, and allows you to modify it.
     */
    BeforePaste: ASPxClientEvent<ASPxClientHtmlEditorBeforePasteEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Returns the document object generated by an iframe element within a design view area.
     */
    GetDesignViewDocument(): Object;
    /**
     * Returns the document object generated by an iframe element within a preview area.
     */
    GetPreviewDocument(): Object;
    /**
     * Returns a collection of client context menu objects.
     */
    GetContextMenu(): ASPxClientPopupMenu;
    /**
     * Returns a value indicating whether an editor is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether an editor is enabled.
     * @param value true to enable the editor; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Sets input focus to the ASPxHtmlEditor's edit region.
     */
    Focus(): void;
    /**
     * Gets the HTML markup that represents the editor's content.
     */
    GetHtml(): string;
    /**
     * Specifies the HTML markup that represents the editor's content.
     * @param html A string value that specifies the HTML markup.
     */
    SetHtml(html: string): void;
    /**
     * Sets the HTML markup that represents the editor's content.
     * @param html A string value that specifies the HTML markup.
     * @param clearUndoHistory true to clear the undo stack; otherwise, false.
     */
    SetHtml(html: string, clearUndoHistory: boolean): void;
    /**
     * Replaces placeholders with the specified values.
     * @param html A string value that specifies the HTML code to process.
     * @param placeholders An array of objects that specify the placeholders and values to replace them.
     */
    ReplacePlaceholders(html: string, placeholders: Object[]): string;
    /**
     * Creates a parameter for ASPxHtmlEditor's client-side commands related to changing media elements.
     * @param element An element that is being changed.
     */
    CreateChangeMediaElementCommandArguments(element: Object): ASPxClientHtmlEditorChangeMediaElementCommandArguments;
    /**
     * Executes the specified command.
     * @param commandName A string value that specifies the command to perform.
     * @param parameter A string value specifying additional information about the command to perform.
     * @param addToUndoHistory true, to add the specified command to the undo stack; otherwise, false.
     */
    ExecuteCommand(commandName: string, parameter: Object, addToUndoHistory: boolean): boolean;
    /**
     * Adds the current editor state to the undo/redo history.
     */
    SaveToUndoHistory(): void;
    /**
     * Returns the selection in the ASPxHtmlEditor.
     */
    GetSelection(): ASPxClientHtmlEditorSelection;
    /**
     * Restores the selection within the ASPxHtmlEditor.
     */
    RestoreSelection(): boolean;
    /**
     * Sets the value of the combo box within the HtmlEditor on the client side.
     * @param commandName A string value that identifies the combo box's command name within the HtmlEditor's control collection.
     * @param value A string value that specifies the combo box's new value.
     */
    SetToolbarComboBoxValue(commandName: string, value: string): void;
    /**
     * Sets the value of the dropdown item picker in the HtmlEditor on the client side.
     * @param commandName A string value that identifies the dropdown item picker by its command name. This value is contained in the CommandName property.
     * @param value A string value that specifies the dropdown item picker's new value, i.e., the ToolbarItemPickerItem object.
     */
    SetToolbarDropDownItemPickerValue(commandName: string, value: string): void;
    /**
     * Specifies the visibility of a ribbon context tab category specified by its name.
     * @param categoryName A Name property value of the required category.
     * @param active true to make a category visible; false to make it hidden.
     */
    SetRibbonContextTabCategoryVisible(categoryName: string, active: string): void;
    /**
     * Provides access to an object implementing the HtmlEditor's ribbon UI.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Gets a value that indicates whether the editor's value passes validation.
     */
    GetIsValid(): boolean;
    /**
     * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
     */
    GetErrorText(): string;
    /**
     * Sets a value that specifies whether the editor's value passes validation.
     * @param isValid true if the editor's value passes validation; otherwise, false.
     */
    SetIsValid(isValid: boolean): void;
    /**
     * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     * @param errorText A string value representing the error text.
     */
    SetErrorText(errorText: string): void;
    /**
     * Performs validation of the editor's content.
     */
    Validate(): void;
    /**
     * Set an active tab specified by its name.
     * @param name A string value that is the name of the tab.
     */
    SetActiveTabByName(name: string): void;
    /**
     * Returns the name of the active HTML editor tab.
     */
    GetActiveTabName(): string;
    /**
     * Reconnect the control to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(parameter: string, onCallback: ASPxClientDataCallback): void;
}
/**
 * A selection in the ASPxHtmlEditor.
 */
interface ASPxClientHtmlEditorSelection {
    /**
     * Returns a DOM element that relates to the current selection.
     */
    GetSelectedElement(): Object;
    /**
     * Returns the HTML markup specifying the currently selected ASPxHtmlEditor content.
     */
    GetHtml(): string;
    /**
     * Returns the text within the currently selected ASPxHtmlEditor content.
     */
    GetText(): string;
    /**
     * Returns an array of the currently selected elements.
     */
    GetElements(): Object[];
    /**
     * Sets the new HTML markup in place of the currently selected within ASPxHtmlEditor content.
     * @param html A string value specifying the new HTML markup.
     * @param addToHistory true to add this operation to the history; otherwise, false.
     */
    SetHtml(html: string, addToHistory: boolean): void;
}
/**
 * A client-side equivalent of the ASPxPivotGrid control.
 */
interface ASPxClientPivotGrid extends ASPxClientControl {
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientPivotGrid>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientPivotGrid.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientPivotGrid>>;
    /**
     * Fires after a callback that has been processed on the server returns back to the client.
     */
    AfterCallback: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientPivotGrid>>;
    /**
     * Fires before a callback is sent to the server for server-side processing.
     */
    BeforeCallback: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Fires on the client side after the customization form's visible state has been changed.
     */
    CustomizationFieldsVisibleChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a cell is clicked.
     */
    CellClick: ASPxClientEvent<ASPxClientClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a cell is double clicked.
     */
    CellDblClick: ASPxClientEvent<ASPxClientClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a custom menu item has been clicked.
     */
    PopupMenuItemClick: ASPxClientEvent<ASPxClientPivotMenuItemClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Indicates whether the Defer Layout Update check box is enabled.
     */
    IsDeferUpdatesChecked(): boolean;
    /**
     * Indicates whether the Filter Editor (Prefilter) is visible.
     */
    IsPrefilterVisible(): boolean;
    /**
     * Shows the Filter Editor.
     */
    ShowPrefilter(): void;
    /**
     * Hides the Filter Editor.
     */
    HidePrefilter(): void;
    /**
     * Clears the filter expression applied using the Prefilter (Filter Editor).
     */
    ClearPrefilter(): void;
    /**
     * Enables or disables the current filter applied by the Filter Editor (Prefilter).
     */
    ChangePrefilterEnabled(): void;
    /**
     * Returns a value that specifies whether the customization form is visible.
     */
    GetCustomizationFieldsVisibility(): boolean;
    /**
     * Specifies the visibility of the customization form.
     * @param value true to display the customization form; false to hide the customization form.
     */
    SetCustomizationFieldsVisibility(value: boolean): void;
    /**
     * Switches the customization form's visible state.
     */
    ChangeCustomizationFieldsVisibility(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A method that will handle the CellDblClick event.
 */
interface ASPxClientClickEventHandler<S> {
    /**
     * A method that will handle the CellDblClick event.
     * @param source The event source.
     * @param e An ASPxClientClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientClickEventArgs): void;
}
/**
 * Provides data for the CellDblClick client events.
 */
interface ASPxClientClickEventArgs extends ASPxClientEventArgs {
    /**
     * Provides access to the parameters associated with the CellDblClick events.
     * Value: An object that contains parameters associated with the CellDblClick events.
     */
    HtmlEvent: Object;
    /**
     * Gets the processed cell's value.
     * Value: An object that represents the processed cell's value.
     */
    Value: Object;
    /**
     * Gets the index of a column that owns the processed cell.
     * Value: An integer value that identifies a column.
     */
    ColumnIndex: number;
    /**
     * Gets the index of a row that owns the processed cell.
     * Value: An integer value that identifies a row.
     */
    RowIndex: number;
    /**
     * Gets a column field value.
     * Value: An object that represents a column field value.
     */
    ColumnValue: Object;
    /**
     * Gets a row field value.
     * Value: An object that represents a row field value.
     */
    RowValue: Object;
    /**
     * Gets a column field name.
     * Value: A String value that represents a column field name.
     */
    ColumnFieldName: string;
    /**
     * Gets a row field name.
     * Value: A String value that represents a row field name.
     */
    RowFieldName: string;
    /**
     * Gets a column value type.
     * Value: A String value that represents a column value type.
     */
    ColumnValueType: string;
    /**
     * Gets a row value type.
     * Value: A String value that represents a row value type.
     */
    RowValueType: string;
    /**
     * Gets the index of the data field which corresponds to the clicked summary value.
     * Value: An integer value that identifies the data field.
     */
    DataIndex: number;
}
/**
 * A method that will handle the PopupMenuItemClick event.
 */
interface ASPxClientPivotMenuItemClickEventHandler<S> {
    /**
     * A method that will handle the PopupMenuItemClick event.
     * @param source The event source.
     * @param e An ASPxClientPivotMenuItemClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPivotMenuItemClickEventArgs): void;
}
/**
 * Provides data for the PopupMenuItemClick event.
 */
interface ASPxClientPivotMenuItemClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the context menu's type.
     * Value: A PivotGridPopupMenuType enumeration value that identifies the context menu.
     */
    MenuType: string;
    /**
     * Gets the name of the menu item currently being clicked.
     * Value: A String value that identifies the clicked item by its name.
     */
    MenuItemName: string;
    /**
     * Gets the field's unique indentifier.
     * Value: A string which specifies the field's unique indentifier.
     */
    FieldID: string;
    /**
     * Gets the index of the field value for which the popup menu has been invoked.
     * Value: An integer value that identifies the field value.
     */
    FieldValueIndex: number;
}
/**
 * A client-side equivalent of the ASPxPivotCustomizationControl control.
 */
interface ASPxClientPivotCustomization extends ASPxClientControl {
    /**
     * Returns an HTML element that represents the root of the control's hierarchy.
     */
    GetMainContainer(): Object;
    /**
     * Returns a client-side equivalent of the owner Pivot Grid Control.
     */
    GetPivotGrid(): ASPxClientPivotGrid;
    /**
     * Specifies the Customization Control's height.
     * @param value An integer value that specifies the Customization Control's height.
     */
    SetHeight(value: number): void;
    /**
     * Specifies the Customization Control's width.
     * @param value An integer value that specifies the Customization Control's width.
     */
    SetWidth(value: number): void;
    /**
     * Recalculates the Customization Control height.
     */
    UpdateHeight(): void;
    /**
     * Specifies the Customization Control's layout.
     * @param layout A string that specifies the Customization Control's layout.
     */
    SetLayout(layout: string): void;
}
/**
 * A method that will handle the CustomCommandExecuted event.
 */
interface ASPxClientRichEditCustomCommandExecutedEventHandler<S> {
    /**
     * A method that will handle the CustomCommandExecuted event.
     * @param source An object representing the event source. Identifies the RichEdit that raised the event.
     * @param e A ASPxClientRichEditCustomCommandExecutedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRichEditCustomCommandExecutedEventArgs): void;
}
/**
 * Provides data for the CustomCommandExecuted event.
 */
interface ASPxClientRichEditCustomCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value representing the processed command's name.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     * Value: A string value containing additional information about the processed command.
     */
    parameter: Object;
}
/**
 * A method that will handle the HyperlinkClick event.
 */
interface ASPxClientRichEditHyperlinkClickEventHandler<S> {
    /**
     * A method that will handle the HyperlinkClick event.
     * @param source The event source.
     * @param e An ASPxClientRichEditHyperlinkClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRichEditHyperlinkClickEventArgs): void;
}
/**
 * Provides data for the HyperlinkClick event.
 */
interface ASPxClientRichEditHyperlinkClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the event is handled manually, so no default processing is required.
     * Value: true if the event is handled and no default processing is required; otherwise false.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
    /**
     * Gets a value identifying the clicked hyperlink type.
     * Value: One of the <see cref="ASPxClientOfficeDocumentLinkType" /> values.
     */
    hyperlinkType: ASPxClientOfficeDocumentLinkType;
    /**
     * Gets the clicked link's URI.
     * Value: A sting value specifying the link's URI.
     */
    targetUri: string;
}
/**
 * A client-side equivalent of the ASPxRichEdit object.
 */
interface ASPxClientRichEdit extends ASPxClientControl {
    /**
     * Provides access to document structural elements.
     * Value: A <see cref="RichEditDocument" /> object that lists RichEdit's document structural elements.
     */
    document: RichEditDocument;
    /**
     * Provides access to RichEdit's client-side commands.
     * Value: A <see cref="RichEditCommands" /> object that lists RichEdit's client-side commands.
     */
    commands: RichEditCommands;
    /**
     * Provides access to the client methods that changes the selection.
     * Value: A <see cref="RichEditSelection" /> object that lists methods to work with the selection.
     */
    selection: RichEditSelection;
    /**
     * Occurs after a custom command has been executed on the client side.
     */
    CustomCommandExecuted: ASPxClientEvent<ASPxClientRichEditCustomCommandExecutedEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
     */
    BeginSynchronization: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires after a document change has been applied to the server and server and client document models have been synchronized.
     */
    EndSynchronization: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the RichEdit.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires if any change is made to the RichEdit's document on the client.
     */
    DocumentChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when a hyperlink is clicked within the document.
     */
    HyperlinkClick: ASPxClientEvent<ASPxClientRichEditHyperlinkClickEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when the selection is changed within the document.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Enables you to switch the full-screen mode of the Rich Text Editor.
     * @param fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
     */
    SetFullscreenMode(fullscreen: boolean): void;
    /**
     * Provides access to an object implementing the RichEdit's ribbon UI.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Sets input focus to the RichEdit.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Indicates whether any unsaved changes are contained in the current document.
     */
    HasUnsavedChanges(): boolean;
    /**
     * Reconnects the RichEdit to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
}
/**
 * Contains a set of the available client commands.
 */
interface RichEditCommands {
    /**
     * Gets a command to create a new empty document.
     * Value: A <see cref="FileNewCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileNew: FileNewCommand;
    /**
     * Gets a command to open the file, specifying its path.
     * Value: A <see cref="FileOpenCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileOpen: FileOpenCommand;
    /**
     * Gets a command to invoke the File Open dialog allowing one to select and load a document file into RichEdit.
     * Value: A <see cref="FileOpenDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileOpenDialog: FileOpenDialogCommand;
    /**
     * Gets a command to save the document to a file.
     * Value: A <see cref="FileSaveCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileSave: FileSaveCommand;
    /**
     * Gets a command to download the document file, specifying its extension.
     * Value: A <see cref="FileDownloadCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileDownload: FileDownloadCommand;
    /**
     * Gets a command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path.
     * Value: A <see cref="FileSaveAsCommand" /> object that provides methods for executing the command and checking its state.
     */
    fileSaveAs: FileSaveAsCommand;
    /**
     * Gets a command to invoke a browser-specific Print dialog allowing one to print the current document.
     * Value: A <see cref="FilePrintCommand" /> object that provides methods for executing the command and checking its state.
     */
    filePrint: FilePrintCommand;
    /**
     * Gets a command to cancel changes caused by the previous command.
     * Value: A <see cref="UndoCommand" /> object that provides methods for executing the command and checking its state.
     */
    undo: UndoCommand;
    /**
     * Gets a command to reverse actions of the previous undo command.
     * Value: A <see cref="RedoCommand" /> object that provides methods for executing the command and checking its state.
     */
    redo: RedoCommand;
    /**
     * Gets a command to copy the selected text and place it to the clipboard.
     * Value: A <see cref="CopyCommand" /> object that provides methods for executing the command and checking its state.
     */
    copy: CopyCommand;
    /**
     * Gets a command to paste the text from the clipboard over the selection.
     * Value: A <see cref="PasteCommand" /> object that provides methods for executing the command and checking its state.
     */
    paste: PasteCommand;
    /**
     * Gets a command to cut the selected text and place it to the clipboard.
     * Value: A <see cref="CutCommand" /> object that provides methods for executing the command and checking its state.
     */
    cut: CutCommand;
    /**
     * Gets a command to change the font name of characters in a selected range.
     * Value: A <see cref="ChangeFontNameCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontName: ChangeFontNameCommand;
    /**
     * Gets a command to change the font size of characters in a selected range.
     * Value: A <see cref="ChangeFontSizeCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontSize: ChangeFontSizeCommand;
    /**
     * Gets a command to increase the font size of characters in a selected range to the closest larger predefined value.
     * Value: A <see cref="IncreaseFontSizeCommand" /> object that provides methods for executing the command and checking its state.
     */
    increaseFontSize: IncreaseFontSizeCommand;
    /**
     * Gets a command to decrease the selected range's font size to the closest smaller predefined value.
     * Value: A <see cref="DecreaseFontSizeCommand" /> object that provides methods for executing the command and checking its state.
     */
    decreaseFontSize: DecreaseFontSizeCommand;
    /**
     * Gets a command to convert selected text to upper case.
     * Value: A <see cref="MakeTextUpperCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    makeTextUpperCase: MakeTextUpperCaseCommand;
    /**
     * Gets a command to convert selected text to lower case.
     * Value: A <see cref="MakeTextLowerCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    makeTextLowerCase: MakeTextLowerCaseCommand;
    /**
     * Gets a command to capitalize each word in the selected sentence.
     * Value: A <see cref="CapitalizeEachWordTextCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    capitalizeEachWordTextCase: CapitalizeEachWordTextCaseCommand;
    /**
     * Gets a command to toggle case for each character - upper case becomes lower, lower case becomes upper.
     * Value: A <see cref="ToggleTextCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTextCase: ToggleTextCaseCommand;
    /**
     * Gets a command to change the bold formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontBoldCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontBold: ChangeFontBoldCommand;
    /**
     * Gets a command to change the italic formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontItalicCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontItalic: ChangeFontItalicCommand;
    /**
     * Gets a command to change the underline formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontUnderlineCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontUnderline: ChangeFontUnderlineCommand;
    /**
     * Gets a command to change the strikeout formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontStrikeoutCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontStrikeout: ChangeFontStrikeoutCommand;
    /**
     * Gets a command to change the superscript formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontSuperscriptCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontSuperscript: ChangeFontSuperscriptCommand;
    /**
     * Gets a command to change the subscript formatting of characters in the selected range.
     * Value: A <see cref="ChangeFontSubscriptCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontSubscript: ChangeFontSubscriptCommand;
    /**
     * Gets a command to change the font color of characters in a selected range.
     * Value: A <see cref="ChangeFontForeColorCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontForeColor: ChangeFontForeColorCommand;
    /**
     * Gets a command to change the background color of characters in a selected range.
     * Value: A <see cref="ChangeFontBackColorCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontBackColor: ChangeFontBackColorCommand;
    /**
     * Gets a command to reset the selected text's formatting to default.
     * Value: A <see cref="ClearFormattingCommand" /> object that provides methods for executing the command and checking its state.
     */
    clearFormatting: ClearFormattingCommand;
    /**
     * Gets a command to change the selected range's style.
     * Value: A <see cref="ChangeStyleCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeStyle: ChangeStyleCommand;
    /**
     * Gets a command to toggle between the bulleted paragraph and normal text.
     * Value: A <see cref="ToggleBulletedListCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleBulletedList: ToggleBulletedListCommand;
    /**
     * Gets a command to toggle between the numbered paragraph and normal text.
     * Value: A <see cref="ToggleNumberingListCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleNumberingList: ToggleNumberingListCommand;
    /**
     * Gets a command to toggle between the multilevel list style and normal text.
     * Value: A <see cref="ToggleMultilevelListCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleMultilevelList: ToggleMultilevelListCommand;
    /**
     * Gets a command to increment the indent level of paragraphs in a selected range.
     * Value: A <see cref="IncreaseIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    increaseIndent: IncreaseIndentCommand;
    /**
     * Gets a command to decrement the indent level of paragraphs in a selected range.
     * Value: A <see cref="DecreaseIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    decreaseIndent: DecreaseIndentCommand;
    /**
     * Gets a command to toggle hidden symbol visibility.
     * Value: A <see cref="ShowHiddenSymbolsCommand" /> object that provides methods for executing the command and checking its state.
     */
    showHiddenSymbols: ShowHiddenSymbolsCommand;
    /**
     * Gets a command to toggle left paragraph alignment on and off.
     * Value: A <see cref="ToggleParagraphAlignmentLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleParagraphAlignmentLeft: ToggleParagraphAlignmentLeftCommand;
    /**
     * Gets a command to toggle centered paragraph alignment on and off.
     * Value: A <see cref="ToggleParagraphAlignmentCenterCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleParagraphAlignmentCenter: ToggleParagraphAlignmentCenterCommand;
    /**
     * Gets a command to toggle right paragraph alignment on and off.
     * Value: A <see cref="ToggleParagraphAlignmentRightCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleParagraphAlignmentRight: ToggleParagraphAlignmentRightCommand;
    /**
     * Gets a command to toggle justified paragraph alignment on and off.
     * Value: A <see cref="ToggleParagraphAlignmentJustifyCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleParagraphAlignmentJustify: ToggleParagraphAlignmentJustifyCommand;
    /**
     * Gets a command to format a current paragraph with single line spacing.
     * Value: A <see cref="SetSingleParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
     */
    setSingleParagraphSpacing: SetSingleParagraphSpacingCommand;
    /**
     * Gets a command to format a current paragraph with one and a half line spacing.
     * Value: A <see cref="SetSesquialteralParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
     */
    setSesquialteralParagraphSpacing: SetSesquialteralParagraphSpacingCommand;
    /**
     * Gets a command to format a selected paragraph with double line spacing.
     * Value: A <see cref="SetDoubleParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
     */
    setDoubleParagraphSpacing: SetDoubleParagraphSpacingCommand;
    /**
     * Gets a command to add spacing before a paragraph.
     * Value: A <see cref="AddSpacingBeforeParagraphCommand" /> object that provides methods for executing the command and checking its state.
     */
    addSpacingBeforeParagraph: AddSpacingBeforeParagraphCommand;
    /**
     * Gets a command to add spacing after a paragraph.
     * Value: A <see cref="AddSpacingAfterParagraphCommand" /> object that provides methods for executing the command and checking its state.
     */
    addSpacingAfterParagraph: AddSpacingAfterParagraphCommand;
    /**
     * Gets a command to remove spacing before the selected paragraph.
     * Value: A <see cref="RemoveSpacingBeforeParagraphCommand" /> object that provides methods for executing the command and checking its state.
     */
    removeSpacingBeforeParagraph: RemoveSpacingBeforeParagraphCommand;
    /**
     * Gets a command to remove spacing after the selected paragraph.
     * Value: A <see cref="RemoveSpacingAfterParagraphCommand" /> object that provides methods for executing the command and checking its state.
     */
    removeSpacingAfterParagraph: RemoveSpacingAfterParagraphCommand;
    /**
     * Gets a command to change the background color of paragraphs in a selected range.
     * Value: A <see cref="ChangeParagraphBackColorCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeParagraphBackColor: ChangeParagraphBackColorCommand;
    /**
     * Gets a command to invoke the Font dialog window.
     * Value: A <see cref="OpenFontFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openFontFormattingDialog: OpenFontFormattingDialogCommand;
    /**
     * Gets a command to change the font formatting of characters in a selected range.
     * Value: A <see cref="ChangeFontFormattingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeFontFormatting: ChangeFontFormattingCommand;
    /**
     * Gets a command to invoke the Indents And Spacing tab of the Paragraph dialog window.
     * Value: A <see cref="OpenParagraphFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openParagraphFormattingDialog: OpenParagraphFormattingDialogCommand;
    /**
     * Gets a command to change the formatting of paragraphs in a selected range.
     * Value: A <see cref="ChangeParagraphFormattingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeParagraphFormatting: ChangeParagraphFormattingCommand;
    /**
     * Gets a command to insert a page break at the current position in the document.
     * Value: A <see cref="InsertPageBreakCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertPageBreak: InsertPageBreakCommand;
    /**
     * Gets a command to invoke the Insert Table dialog window.
     * Value: A <see cref="OpenInsertTableDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openInsertTableDialog: OpenInsertTableDialogCommand;
    /**
     * Gets a command to invoke the Insert Table dialog window.
     * Value: A <see cref="InsertTableCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTable: InsertTableCommand;
    /**
     * Gets a command to invoke the Insert Image dialog window.
     * Value: A <see cref="OpenInsertPictureDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openInsertPictureDialog: OpenInsertPictureDialogCommand;
    /**
     * Gets a command to insert a picture from a file.
     * Value: A <see cref="InsertPictureCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertPicture: InsertPictureCommand;
    /**
     * Gets a command to invoke the Bookmark dialog window.
     * Value: A <see cref="OpenInsertBookmarkDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openInsertBookmarkDialog: OpenInsertBookmarkDialogCommand;
    /**
     * Gets a command to insert a new bookmark that references the current selection.
     * Value: A <see cref="InsertBookmarkCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertBookmark: InsertBookmarkCommand;
    /**
     * A command to delete a specific bookmark.
     * Value: A <see cref="DeleteBookmarkCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteBookmark: DeleteBookmarkCommand;
    /**
     * Gets a command to invoke the Hyperlink dialog window.
     * Value: A <see cref="OpenInsertHyperlinkDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openInsertHyperlinkDialog: OpenInsertHyperlinkDialogCommand;
    /**
     * Gets a command to insert a hyperlink at the current position in the document.
     * Value: A <see cref="InsertHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertHyperlink: InsertHyperlinkCommand;
    /**
     * Gets a command to delete the selected hyperlink.
     * Value: A <see cref="DeleteHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteHyperlink: DeleteHyperlinkCommand;
    /**
     * Gets a command to delete all hyperlinks in the selected range.
     * Value: A <see cref="DeleteHyperlinksCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteHyperlinks: DeleteHyperlinksCommand;
    /**
     * Gets a command to navigate to the document bookmark or URI (uniform resource identifier) specified for the hyperlink.
     * Value: A <see cref="OpenHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
     */
    openHyperlink: OpenHyperlinkCommand;
    /**
     * Gets a command to invoke the Symbols dialog window.
     * Value: A <see cref="OpenInsertSymbolDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openInsertSymbolDialog: OpenInsertSymbolDialogCommand;
    /**
     * Gets a command to insert a character into a document.
     * Value: A <see cref="InsertSymbolCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertSymbol: InsertSymbolCommand;
    /**
     * Gets a command to change page margin settings.
     * Value: A <see cref="ChangePageMarginsCommand" /> object that provides methods for executing the command and checking its state.
     */
    changePageMargins: ChangePageMarginsCommand;
    /**
     * Gets a command to invoke the Margins tab of the Page Setup dialog window.
     * Value: A <see cref="OpenPageMarginsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openPageMarginsDialog: OpenPageMarginsDialogCommand;
    /**
     * Gets a command to change the page orientation.
     * Value: A <see cref="ChangePageOrientationCommand" /> object that provides methods for executing the command and checking its state.
     */
    changePageOrientation: ChangePageOrientationCommand;
    /**
     * Gets a command to invoke the Paper tab of the Page Setup dialog window.
     * Value: A <see cref="OpenPagePaperSizeDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openPagePaperSizeDialog: OpenPagePaperSizeDialogCommand;
    /**
     * Gets a command to change the page size.
     * Value: A <see cref="ChangePageSizeCommand" /> object that provides methods for executing the command and checking its state.
     */
    changePageSize: ChangePageSizeCommand;
    /**
     * Gets a command to change the number of section columns having the same width.
     * Value: A <see cref="ChangeSectionEqualColumnCountCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeSectionEqualColumnCount: ChangeSectionEqualColumnCountCommand;
    /**
     * Gets a command to invoke the Columns dialog window.
     * Value: A <see cref="OpenSectionColumnsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openSectionColumnsDialog: OpenSectionColumnsDialogCommand;
    /**
     * Gets a command to change the settings of individual section columns.
     * Value: A <see cref="ChangeSectionColumnsCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeSectionColumns: ChangeSectionColumnsCommand;
    /**
     * Gets a command to insert a column break at the current position in the document.
     * Value: A <see cref="InsertColumnBreakCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertColumnBreak: InsertColumnBreakCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next page.
     * Value: A <see cref="InsertSectionBreakNextPageCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertSectionBreakNextPage: InsertSectionBreakNextPageCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next even-numbered page.
     * Value: A <see cref="InsertSectionBreakEvenPageCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertSectionBreakEvenPage: InsertSectionBreakEvenPageCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next odd-numbered page.
     * Value: A <see cref="InsertSectionBreakOddPageCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertSectionBreakOddPage: InsertSectionBreakOddPageCommand;
    /**
     * Gets a command to set the background color of the page.
     * Value: A <see cref="ChangePageColorCommand" /> object that provides methods for executing the command and checking its state.
     */
    changePageColor: ChangePageColorCommand;
    /**
     * Gets a command to toggle the horizontal ruler's visibility.
     * Value: A <see cref="ShowHorizontalRulerCommand" /> object that provides methods for executing the command and checking its state.
     */
    showHorizontalRuler: ShowHorizontalRulerCommand;
    /**
     * Gets a command to toggle the fullscreen mode.
     * Value: A <see cref="SetFullscreenCommand" /> object that provides methods for executing the command and checking its state.
     */
    setFullscreen: SetFullscreenCommand;
    /**
     * Gets a command to invoke the Bulleted and Numbering dialog window.
     * Value: A <see cref="OpenNumberingListDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openNumberingListDialog: OpenNumberingListDialogCommand;
    /**
     * Gets a command to insert a paragraph break at the current position in the document.
     * Value: A <see cref="InsertParagraphCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertParagraph: InsertParagraphCommand;
    /**
     * Gets a command to insert text at the current position in a document.
     * Value: A <see cref="InsertTextCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertText: InsertTextCommand;
    /**
     * Gets a command to delete the text in a selected range.
     * Value: A <see cref="DeleteCommand" /> object that provides methods for executing the command and checking its state.
     */
    delete: DeleteCommand;
    /**
     * Gets a command to move the cursor backwards and erase the character in that space.
     * Value: A <see cref="BackspaceCommand" /> object that provides methods for executing the command and checking its state.
     */
    backspace: BackspaceCommand;
    /**
     * Gets a command to insert the line break at the current position in the document.
     * Value: A <see cref="InsertLineBreakCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertLineBreak: InsertLineBreakCommand;
    /**
     * Gets a command to scale pictures in a selected range.
     * Value: A <see cref="ChangePictureScaleCommand" /> object that provides methods for executing the command and checking its state.
     */
    changePictureScale: ChangePictureScaleCommand;
    /**
     * Gets a command to increment the left indentation of paragraphs in a selected range.
     * Value: A <see cref="IncrementParagraphLeftIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    incrementParagraphLeftIndent: IncrementParagraphLeftIndentCommand;
    /**
     * Gets a command to decrement the paragraph's left indent position.
     * Value: A <see cref="DecrementParagraphLeftIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    decrementParagraphLeftIndent: DecrementParagraphLeftIndentCommand;
    /**
     * Gets a command to move the selected range.
     * Value: A <see cref="MoveContentCommand" /> object that provides methods for executing the command and checking its state.
     */
    moveContent: MoveContentCommand;
    /**
     * Gets a command to copy the selected text and place it to the specified position.
     * Value: A <see cref="CopyContentCommand" /> object that provides methods for executing the command and checking its state.
     */
    copyContent: CopyContentCommand;
    /**
     * Gets a command to insert a tab character at the current position in the document.
     * Value: A <see cref="InsertTabCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTab: InsertTabCommand;
    /**
     * Gets a command to invoke the Tabs dialog window.
     * Value: A <see cref="OpenTabsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openTabsDialog: OpenTabsDialogCommand;
    /**
     * Gets a command to change paragraph tab stops.
     * Value: A <see cref="ChangeTabsCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTabs: ChangeTabsCommand;
    /**
     * Gets a command to invoke the Customize Numbered List dialog window.
     * Value: A <see cref="OpenCustomNumberingListDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openCustomNumberingListDialog: OpenCustomNumberingListDialogCommand;
    /**
     * Gets a command to customize the numbered list parameters.
     * Value: A <see cref="ChangeCustomNumberingListCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeCustomNumberingList: ChangeCustomNumberingListCommand;
    /**
     * Gets a command to restart the numbering list.
     * Value: A <see cref="RestartNumberingListCommand" /> object that provides methods for executing the command and checking its state.
     */
    restartNumberingList: RestartNumberingListCommand;
    /**
     * Gets a command to increment the indent level of paragraphs in a selected numbered list.
     * Value: A <see cref="IncrementNumberingIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    incrementNumberingIndent: IncrementNumberingIndentCommand;
    /**
     * Gets a command to decrement the indent level of paragraphs in a selected numbered list.
     * Value: A <see cref="DecrementNumberingIndentCommand" /> object that provides methods for executing the command and checking its state.
     */
    decrementNumberingIndent: DecrementNumberingIndentCommand;
    /**
     * Gets a command to create an empty field in the document.
     * Value: A <see cref="CreateFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createField: CreateFieldCommand;
    /**
     * Gets a command to update the field's result.
     * Value: A <see cref="UpdateFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    updateField: UpdateFieldCommand;
    /**
     * Gets a command to display the selected field's codes.
     * Value: A <see cref="ShowFieldCodesCommand" /> object that provides methods for executing the command and checking its state.
     */
    showFieldCodes: ShowFieldCodesCommand;
    /**
     * Get a command to display all field codes in place of the fields in the document.
     * Value: A <see cref="ShowAllFieldCodesCommand" /> object that provides methods for executing the command and checking its state.
     */
    showAllFieldCodes: ShowAllFieldCodesCommand;
    /**
     * Gets a command to continue the list's numbering.
     * Value: A <see cref="ContinueNumberingListCommand" /> object that provides methods for executing the command and checking its state.
     */
    continueNumberingList: ContinueNumberingListCommand;
    /**
     * Gets a command to insert numeration to a paragraph making it a numbering list item.
     * Value: A <see cref="InsertNumerationCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertNumeration: InsertNumerationCommand;
    /**
     * Gets a command to remove the selected numeration.
     * Value: A <see cref="RemoveNumerationCommand" /> object that provides methods for executing the command and checking its state.
     */
    removeNumeration: RemoveNumerationCommand;
    /**
     * Gets a command to update all fields in the selected range.
     * Value: A <see cref="UpdateAllFieldsCommand" /> object that provides methods for executing the command and checking its state.
     */
    updateAllFields: UpdateAllFieldsCommand;
    /**
     * Gets a command to insert a DATE field displaying the current date.
     * Value: A <see cref="CreateDateFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createDateField: CreateDateFieldCommand;
    /**
     * Gets a command to insert a TIME field displaying the current time.
     * Value: A <see cref="CreateTimeFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createTimeField: CreateTimeFieldCommand;
    /**
     * A command to insert a PAGE field displaying the current page number.
     * Value: A <see cref="CreatePageFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createPageField: CreatePageFieldCommand;
    /**
     * Gets a command to convert the text of all selected sentences to sentence case.
     * Value: A <see cref="MakeTextSentenceCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    makeTextSentenceCase: MakeTextSentenceCaseCommand;
    /**
     * Gets a command to switch the text case at the current position in the document.
     * Value: A <see cref="SwitchTextCaseCommand" /> object that provides methods for executing the command and checking its state.
     */
    switchTextCase: SwitchTextCaseCommand;
    /**
     * Gets a command to navigate to the first data record.
     * Value: A <see cref="GoToFirstDataRecordCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToFirstDataRecord: GoToFirstDataRecordCommand;
    /**
     * Gets a command to navigate to the previous data record of the bound data source.
     * Value: A <see cref="GoToPreviousDataRecordCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToPreviousDataRecord: GoToPreviousDataRecordCommand;
    /**
     * Gets a command to navigate to the next data record of the bound data source.
     * Value: A <see cref="GoToNextDataRecordCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToNextDataRecord: GoToNextDataRecordCommand;
    /**
     * Gets a command to navigate to the next data record.
     * Value: A <see cref="GoToDataRecordCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToDataRecord: GoToDataRecordCommand;
    /**
     * Gets a command to navigate to the last data record of the bound data source.
     * Value: A <see cref="GoToLastDataRecordCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToLastDataRecord: GoToLastDataRecordCommand;
    /**
     * Gets a command to display or hide actual data in MERGEFIELD fields.
     * Value: A <see cref="ShowMergedDataCommand" /> object that provides methods for executing the command and checking its state.
     */
    showMergedData: ShowMergedDataCommand;
    /**
     * Gets a command to invoke the Insert Merge Field dialog window.
     * Value: A <see cref="MergeFieldDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    mergeFieldDialog: MergeFieldDialogCommand;
    /**
     * Gets a command to insert a MERGEFIELD field (with a data source column name) at the current position in the document.
     * Value: A <see cref="CreateMergeFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createMergeField: CreateMergeFieldCommand;
    /**
     * Gets a command to invoke the Export Range dialog window to start a mail merge.
     * Value: A <see cref="MailMergeDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    mailMergeDialog: MailMergeDialogCommand;
    /**
     * Gets a command to perform a mail merge and download the merged document.
     * Value: A <see cref="MailMergeAndDownloadCommand" /> object that provides methods for executing the command and checking its state.
     */
    mailMergeAndDownload: MailMergeAndDownloadCommand;
    /**
     * Gets a command to perform a mail merge and save the merged document to the server.
     * Value: A <see cref="MailMergeAndSaveAsCommand" /> object that provides methods for executing the command and checking its state.
     */
    mailMergeAndSaveAs: MailMergeAndSaveAsCommand;
    /**
     * Gets a command to activate the page header and begin editing.
     * Value: A <see cref="InsertHeaderCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertHeader: InsertHeaderCommand;
    /**
     * Gets a command to activate the page footer and begin editing.
     * Value: A <see cref="InsertFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertFooter: InsertFooterCommand;
    /**
     * Gets a command to link a header/footer to the previous section, so it has the same content.
     * Value: A <see cref="LinkHeaderFooterToPreviousCommand" /> object that provides methods for executing the command and checking its state.
     */
    linkHeaderFooterToPrevious: LinkHeaderFooterToPreviousCommand;
    /**
     * Gets a command to navigate to the page footer from the page header in the header/footer editing mode.
     * Value: A <see cref="GoToFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToFooter: GoToFooterCommand;
    /**
     * Gets a command to navigate to the page header from the page footer in the header/footer editing mode.
     * Value: A <see cref="GoToHeaderCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToHeader: GoToHeaderCommand;
    /**
     * Gets a command to navigate to the next page header or footer in the header/footer editing mode.
     * Value: A <see cref="GoToNextHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToNextHeaderFooter: GoToNextHeaderFooterCommand;
    /**
     * Gets a command to navigate to the previous page header or footer in the header/footer editing mode.
     * Value: A <see cref="GoToPreviousHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    goToPreviousHeaderFooter: GoToPreviousHeaderFooterCommand;
    /**
     * Gets a command to change the header/footer edit mode, so it allows creation of a different header or footer for the first page of a document or section.
     * Value: A <see cref="SetDifferentFirstPageHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    setDifferentFirstPageHeaderFooter: SetDifferentFirstPageHeaderFooterCommand;
    /**
     * Gets a command to change the header/footer edit mode so it allows creation of a different header or footer for odd and even pages of a document or section.
     * Value: A <see cref="SetDifferentOddAndEvenPagesHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    setDifferentOddAndEvenPagesHeaderFooter: SetDifferentOddAndEvenPagesHeaderFooterCommand;
    /**
     * Gets a command to finish header/footer editing.
     * Value: A <see cref="CloseHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
     */
    closeHeaderFooter: CloseHeaderFooterCommand;
    /**
     * Gets a command to insert a NUMPAGES field displaying the total number of pages.
     * Value: A <see cref="CreatePageCountFieldCommand" /> object that provides methods for executing the command and checking its state.
     */
    createPageCountField: CreatePageCountFieldCommand;
    /**
     * Gets a command to invoke the Table tab of the Table Properties dialog window.
     * Value: A <see cref="OpenTableFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openTableFormattingDialog: OpenTableFormattingDialogCommand;
    /**
     * Gets a command to change the selected table's formatting.
     * Value: A <see cref="ChangeTableFormattingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableFormatting: ChangeTableFormattingCommand;
    /**
     * Gets a command to change the selected table rows' preferred height.
     * Value: A <see cref="ChangeTableRowPreferredHeightCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableRowPreferredHeight: ChangeTableRowPreferredHeightCommand;
    /**
     * Gets a command to change the preferred cell width of the selected table rows.
     * Value: A <see cref="ChangeTableCellPreferredWidthCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableCellPreferredWidth: ChangeTableCellPreferredWidthCommand;
    /**
     * Gets a command to change the selected table columns' preferred width.
     * Value: A <see cref="ChangeTableColumnPreferredWidthCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableColumnPreferredWidth: ChangeTableColumnPreferredWidthCommand;
    /**
     * Gets a command to change the cell formatting of the selected table elements.
     * Value: A <see cref="ChangeTableCellFormattingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableCellFormatting: ChangeTableCellFormattingCommand;
    /**
     * Gets a command to insert a table column to the left of the current position in the table.
     * Value: A <see cref="InsertTableColumnToTheLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableColumnToTheLeft: InsertTableColumnToTheLeftCommand;
    /**
     * Gets a command to insert a table column to the right of the current position in the table.
     * Value: A <see cref="InsertTableColumnToTheRightCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableColumnToTheRight: InsertTableColumnToTheRightCommand;
    /**
     * Gets a command to insert a row in the table below the selected row.
     * Value: A <see cref="InsertTableRowBelowCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableRowBelow: InsertTableRowBelowCommand;
    /**
     * Gets a command to insert a row in the table above the selected row.
     * Value: A <see cref="InsertTableRowAboveCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableRowAbove: InsertTableRowAboveCommand;
    /**
     * Gets a command to delete the selected rows in the table.
     * Value: A <see cref="DeleteTableRowsCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTableRows: DeleteTableRowsCommand;
    /**
     * Gets a command to delete the selected columns in the table.
     * Value: A <see cref="DeleteTableColumnsCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTableColumns: DeleteTableColumnsCommand;
    /**
     * Gets a command to insert table cells with a horizontal shift into the selected table.
     * Value: A <see cref="InsertTableCellWithShiftToTheLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableCellWithShiftToTheLeft: InsertTableCellWithShiftToTheLeftCommand;
    /**
     * Gets a command to delete the selected table cells with a horizontal shift.
     * Value: A <see cref="DeleteTableCellsWithShiftHorizontallyCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTableCellsWithShiftHorizontally: DeleteTableCellsWithShiftHorizontallyCommand;
    /**
     * Gets a command to delete the selected table cells with a vertical shift.
     * Value: A <see cref="DeleteTableCellsWithShiftVerticallyCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTableCellsWithShiftVertically: DeleteTableCellsWithShiftVerticallyCommand;
    /**
     * Gets a command to delete the selected table.
     * Value: A <see cref="DeleteTableCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTable: DeleteTableCommand;
    /**
     * Gets a command to invoke the Insert Cells dialog window.
     * Value: A <see cref="InsertTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableCellsDialog: InsertTableCellsDialogCommand;
    /**
     * Gets a command to invoke the Delete Cells dialog window.
     * Value: A <see cref="DeleteTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    deleteTableCellsDialog: DeleteTableCellsDialogCommand;
    /**
     * Gets a command to merge the selected cells.
     * Value: A <see cref="MergeTableCellsCommand" /> object that provides methods for executing the command and checking its state.
     */
    mergeTableCells: MergeTableCellsCommand;
    /**
     * Gets a command to invoke the Split Cells dialog window.
     * Value: A <see cref="SplitTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    splitTableCellsDialog: SplitTableCellsDialogCommand;
    /**
     * Gets a command to split the selected table cells.
     * Value: A <see cref="SplitTableCellsCommand" /> object that provides methods for executing the command and checking its state.
     */
    splitTableCells: SplitTableCellsCommand;
    /**
     * Gets a command to insert table cells with a vertical shift into the selected table.
     * Value: A <see cref="InsertTableCellsWithShiftToTheVerticallyCommand" /> object that provides methods for executing the command and checking its state.
     */
    insertTableCellsWithShiftToTheVertically: InsertTableCellsWithShiftToTheVerticallyCommand;
    /**
     * Gets a command to invoke the Borders tab of the Borders and Shading dialog window.
     * Value: A <see cref="OpenTableBordersAndShadingDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openTableBordersAndShadingDialog: OpenTableBordersAndShadingDialogCommand;
    /**
     * Gets a command to change the selected table's borders and shading.
     * Value: A <see cref="ChangeTableBordersAndShadingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableBordersAndShading: ChangeTableBordersAndShadingCommand;
    /**
     * Gets a command to apply top-left alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignTopLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignTopLeft: ToggleTableCellAlignTopLeftCommand;
    /**
     * Gets a command to apply top-center alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignTopCenterCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignTopCenter: ToggleTableCellAlignTopCenterCommand;
    /**
     * Gets a command to apply top-right alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignTopRightCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignTopRight: ToggleTableCellAlignTopRightCommand;
    /**
     * Gets a command to apply middle-left alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignMiddleLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignMiddleLeft: ToggleTableCellAlignMiddleLeftCommand;
    /**
     * Gets a command to apply middle-center alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignMiddleCenterCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignMiddleCenter: ToggleTableCellAlignMiddleCenterCommand;
    /**
     * Gets a command to apply middle-right alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignMiddleRightCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignMiddleRight: ToggleTableCellAlignMiddleRightCommand;
    /**
     * Gets a command to apply bottom-left alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignBottomLeftCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignBottomLeft: ToggleTableCellAlignBottomLeftCommand;
    /**
     * Gets a command to apply bottom-center alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignBottomCenterCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignBottomCenter: ToggleTableCellAlignBottomCenterCommand;
    /**
     * Gets a command to apply bottom-right alignment for the selected cells.
     * Value: A <see cref="ToggleTableCellAlignBottomRightCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAlignBottomRight: ToggleTableCellAlignBottomRightCommand;
    /**
     * Gets a command to change the selected table's style.
     * Value: A <see cref="ChangeTableStyleCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableStyle: ChangeTableStyleCommand;
    /**
     * Gets a command to toggle top borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellTopBorderCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellTopBorder: ToggleTableCellTopBorderCommand;
    /**
     * Gets a command to toggle right borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellRightBorderCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellRightBorder: ToggleTableCellRightBorderCommand;
    /**
     * Gets a command to toggle bottom borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellBottomBorderCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellBottomBorder: ToggleTableCellBottomBorderCommand;
    toggleTableCellLeftBorder: ToggleTableCellLeftBorderCommand;
    /**
     * Gets a command to remove the borders of the selected table cells.
     * Value: A <see cref="RemoveTableCellBordersCommand" /> object that provides methods for executing the command and checking its state.
     */
    removeTableCellBorders: RemoveTableCellBordersCommand;
    /**
     * Gets a command to toggle all borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellAllBordersCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellAllBorders: ToggleTableCellAllBordersCommand;
    /**
     * Gets a command to toggle inner horizontal borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellInsideHorizontalBordersCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellInsideHorizontalBorders: ToggleTableCellInsideHorizontalBordersCommand;
    /**
     * Gets a command to toggle inner vertical borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellInsideVerticalBordersCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellInsideVerticalBorders: ToggleTableCellInsideVerticalBordersCommand;
    /**
     * Gets a command to toggle outer borders for selected cells on/off.
     * Value: A <see cref="ToggleTableCellOutsideBordersCommand" /> object that provides methods for executing the command and checking its state.
     */
    toggleTableCellOutsideBorders: ToggleTableCellOutsideBordersCommand;
    /**
     * Gets a command to change the selected table's style options.
     * Value: A <see cref="ChangeTableLookCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableLook: ChangeTableLookCommand;
    /**
     * Gets a command to change the repository item's table border style.
     * Value: A <see cref="ChangeTableBorderRepositoryItemCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableBorderRepositoryItem: ChangeTableBorderRepositoryItemCommand;
    /**
     * Gets a command to change cell shading in the selected table elements.
     * Value: A <see cref="ChangeTableCellShadingCommand" /> object that provides methods for executing the command and checking its state.
     */
    changeTableCellShading: ChangeTableCellShadingCommand;
    /**
     * Gets a command to toggle the display of grid lines for a table with no borders applied - on/off.
     * Value: A <see cref="ShowTableGridLinesCommand" /> object that provides methods for executing the command and checking its state.
     */
    showTableGridLines: ShowTableGridLinesCommand;
    /**
     * Gets a command to invoke the Search Panel allowing end-users to search text and navigate through search results.
     * Value: A <see cref="OpenFindPanelCommand" /> object that provides methods for executing the command and checking its state.
     */
    openFindPanel: OpenFindPanelCommand;
    /**
     * Gets a command to invoke the Find and Replace dialog window.
     * Value: A <see cref="OpenFindAndReplaceDialogCommand" /> object that provides methods for executing the command and checking its state.
     */
    openFindAndReplaceDialog: OpenFindAndReplaceDialogCommand;
    /**
     * Gets a command to find all matches of the specified text in the document.
     * Value: A <see cref="FindAllCommand" /> object that provides methods for executing the command and checking its state.
     */
    findAll: FindAllCommand;
    /**
     * Gets a command to hide the results of the search.
     * Value: A <see cref="HideFindResultsCommand" /> object that provides methods for executing the command and checking its state.
     */
    hideFindResults: HideFindResultsCommand;
    /**
     * Gets a command to search for a specific text and replace all matches in the document with the specified string.
     * Value: A <see cref="ReplaceAllCommand" /> object that provides methods for executing the command and checking its state.
     */
    replaceAll: ReplaceAllCommand;
    /**
     * Gets a command to search for a specific text and replace the next match in the document with the specified string.
     * Value: A <see cref="ReplaceNextCommand" /> object that provides methods for executing the command and checking its state.
     */
    replaceNext: ReplaceNextCommand;
    openSpellingDialog: OpenSpellingDialogCommand;
}
/**
 * Serves as a base for objects that implement different client command functionalities.
 */
interface CommandBase {
}
/**
 * Serves as a base for commands with a simple common command state.
 */
interface CommandWithSimpleStateBase extends CommandBase {
    /**
     * Gets information about the command state.
     */
    getState(): SimpleCommandState;
}
/**
 * Serves as a base for commands with the Boolean state.
 */
interface CommandWithBooleanStateBase extends CommandBase {
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * Defines a simple state common to most of the client commands.
 */
interface SimpleCommandState {
    /**
     * Gets a value indicating whether the command's UI element is enabled.
     * Value: true, if the command's related UI element is enabled; otherwise, false.
     */
    enabled: boolean;
    /**
     * Gets a value indicating whether the command's UI element is visible.
     * Value: true, if the command's related UI element is visible; otherwise, false.
     */
    visible: boolean;
}
/**
 * Defines the state of a command.
 */
interface CommandState<T> extends SimpleCommandState {
    /**
     * Gets the command state value.
     * Value: A T object specifying the command state value.
     */
    value: T;
}
/**
 * Contains a set properties providing the current information about certain document structural elements.
 */
interface RichEditDocument {
    /**
     * Provides the information about the active sub-document.
     * Value: A <see cref="SubDocument" /> object storing information about the essential document functionality.
     */
    activeSubDocument: SubDocument;
    /**
     * Provides information about sections in the current document.
     * Value: An array of Section objects storing information about sections.
     */
    sectionsInfo: Section[];
    /**
     * Provides information about paragraph styles in the current document.
     * Value: An array of ParagraphStyle objects storing information about paragraph styles.
     */
    paragraphStylesInfo: ParagraphStyle[];
    /**
     * Provides information about character styles in the current document.
     * Value: An array of CharacterStyle objects storing information about character styles.
     */
    characterStylesInfo: CharacterStyle[];
    /**
     * Provides information about numbered paragraphs in the document.
     * Value: An array of AbstractNumberingList objects storing the information about numbered paragraphs.
     */
    abstractNumberingListsInfo: AbstractNumberingList[];
    /**
     * Provides information about table styles in the current document.
     * Value: An array of TableStyle objects storing information about table styles.
     */
    tableStylesInfo: TableStyle[];
}
/**
 * An abstract numbering list definition that defines the appearance and behavior of numbered paragraphs in a document.
 */
interface AbstractNumberingList {
    deleted: boolean;
}
/**
 * Exposes the settings providing the information about the essential document functionality.
 */
interface SubDocument {
    id: number;
    type: any;
    /**
     * Provides information about paragraphs contained in the document.
     * Value: An array of Paragraph objects storing information about document paragraphs.
     */
    paragraphsInfo: Paragraph[];
    /**
     * Provides information about fields in the current document.
     * Value: An array of Field objects storing information about document fields.
     */
    fieldsInfo: Field[];
    /**
     * Provides information about tables contained in the document.
     * Value: An array of Table objects storing information about document tables.
     */
    tablesInfo: Table[];
    /**
     * Provides information about document bookmarks.
     * Value: An array of Bookmark objects storing information about document bookmarks.
     */
    bookmarksInfo: Bookmark[];
    /**
     * Gets the document's textual representation.
     * Value: A string value specifying the document's text.
     */
    text: string;
    /**
     * Gets the character length of the document.
     * Value: An integer that is the number of character positions in the document.
     */
    length: number;
}
/**
 * Defines a paragraph in the document.
 */
interface Paragraph {
    /**
     * Gets the paragraph's character length.
     * Value: An integer value specifying the element length in characters.
     */
    length: number;
    /**
     * Gets the paragraph's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the name of the paragraph style applied to the current paragraph (see name).
     * Value: A string value specifying the style name.
     */
    styleName: string;
    /**
     * Gets the index of a list applied to the paragraph.
     * Value: An integer that is the index of a list to which the paragraph belongs.
     */
    listIndex: number;
    /**
     * Gets or sets the index of the list level applied to the current paragraph in the numbering list.
     * Value: An integer that is the index of the list level of the current paragraph.
     */
    listLevelIndex: number;
}
/**
 * Defines a field in the document.
 */
interface Field {
    /**
     * Gets the field's start position in a document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the field length in a document.
     * Value: An integer value specifying the field length.
     */
    length: number;
    /**
     * Gets or sets a URI to navigate to when the hyperlink (represented by the current field) is activated.
     * Value: A string representing an URI.
     */
    hyperlinkUri: string;
    /**
     * Gets or sets the text for the tooltip displayed when the mouse hovers over a hyperlink field.
     * Value: A string containing the tooltip text.
     */
    hyperlinkTip: string;
    /**
     * Gets or sets the name of a bookmark (or a hyperlink) in the current document which shall be the target of the hyperlink field.
     * Value: A string representing the bookmark's name.
     */
    hyperlinkAnchor: string;
}
/**
 * Defines a table in the document.
 */
interface Table {
    /**
     * Gets the table's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the table length in characters.
     * Value: A integer value specifying the character length of the table.
     */
    length: number;
    /**
     * Provides access to a collection of table rows.
     * Value: An array of TableRow objects storing information about individual table rows.
     */
    rows: TableRow[];
    /**
     * Gets the name of the style applied to the table (see name).
     * Value: A string value specifying the style name.
     */
    styleName: string;
}
/**
 * Defines a table row in the document.
 */
interface TableRow {
    /**
     * Gets the table row's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the table row's character length.
     * Value: An integer value specifying the element length in characters.
     */
    length: number;
    /**
     * Provides information about the table row's cells.
     * Value: An array of TableCell objects storing information about cells.
     */
    cells: TableCell[];
}
/**
 * Defines a table cell in the document.
 */
interface TableCell {
    /**
     * Gets the table cell's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the table cell's character length.
     * Value: An integer value specifying the element length in characters.
     */
    length: number;
}
/**
 * Defines a bookmark in the document.
 */
interface Bookmark {
    /**
     * Gets the bookmark's start position in a document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the bookmark's length.
     * Value: An integer value specifying the length of the bookmark.
     */
    length: number;
    /**
     * Gets the name of a bookmark in the document.
     * Value: A string that is the unique bookmark's name.
     */
    name: string;
}
/**
 * Defines a section in the document.
 */
interface Section {
    /**
     * Gets the section's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the section's character length.
     * Value: An integer value specifying the element length in characters.
     */
    length: number;
    /**
     * Provides access to the section's headers.
     * Value: An array of HeaderFooter objects storing information about the section's headers.
     */
    headers: HeaderFooter[];
    /**
     * Provides access to the section's footers.
     * Value: An array of HeaderFooter objects storing information about the section's footers.
     */
    footers: HeaderFooter[];
}
/**
 * Contains settings defining a header or footer in a document.
 */
interface HeaderFooter {
    /**
     * Gets the type of the header (footer).
     * Value: One of the <see cref="HeaderFooterType" /> values.
     */
    type: any;
    /**
     * Provides access to an object implementing the basic document functionality that is common to the header, footer and the main document body.
     * Value: A <see cref="SubDocument" /> object exposing the basic document functionality.
     */
    subDocument: SubDocument;
}
/**
 * Serves as a base for objects implementing different element styles.
 */
interface StyleBase {
    /**
     * Gets or sets the name of the style.
     * Value: A string specifying the style name.
     */
    name: string;
    /**
     * Gets whether the specified style is marked as deleted.
     * Value: true, if the style is deleted; otherwise, false.
     */
    isDeleted: boolean;
}
/**
 * Defines the paragraph style settings.
 */
interface ParagraphStyle extends StyleBase {
    /**
     * Gets or sets the linked style for the current style.
     * Value: A <see cref="CharacterStyle" /> object representing a character style linked to a current style.
     */
    linkedStyle: CharacterStyle;
    /**
     * Gets or sets the default style for a paragraph that immediately follows the current paragraph.
     * Value: A <see cref="ParagraphStyle" /> object specifying the style for the next paragraph.
     */
    nextStyle: ParagraphStyle;
    /**
     * Gets the index of the list item associated with the paragraph formatted with the current style.
     * Value: An integer value specifying the list item index.
     */
    listIndex: number;
    /**
     * Gets the index of the list level applied to the paragraph formatted with the current style.
     * Value: An integer that is the list level index.
     */
    listLevelIndex: number;
    /**
     * Gets or sets the style from which the current style inherits.
     * Value: A <see cref="ParagraphStyle" /> object representing the parent style.
     */
    parent: ParagraphStyle;
}
/**
 * Contains characteristics of a character style in a document.
 */
interface CharacterStyle extends StyleBase {
    /**
     * Gets or sets the linked style for the current style.
     * Value: A <see cref="ParagraphStyle" /> object representing a paragraph style linked to a current style.
     */
    linkedStyle: ParagraphStyle;
    /**
     * Gets the style form which the current style inherits.
     * Value: A <see cref="CharacterStyle" /> object representing the parent style.
     */
    parent: CharacterStyle;
}
/**
 * Defines the table style settings.
 */
interface TableStyle extends StyleBase {
    /**
     * Gets or sets the style from which the current style inherits.
     * Value: A <see cref="TableStyle" /> object that is the parent style.
     */
    parent: TableStyle;
}
declare enum HeaderFooterType {
    First=0,
    Odd=1,
    Primary=1,
    Even=2
}
declare enum SubDocumentType {
    Main=0,
    Header=1,
    Footer=2,
    TextBox=3
}
/**
 * Contains a set of methods and properties to work with the document selection.
 */
interface RichEditSelection {
    /**
     * Gets or sets an array of document interval in the selection.
     * Value: An array of Interval objects.
     */
    intervals: Interval[];
    collapsed: boolean;
    /**
     * Moves the cursor to the next line.
     */
    goToNextLine(): void;
    /**
     * Moves the cursor to the next line and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextLine(extendSelection: boolean): void;
    /**
     * Moves the cursor to the end of the line in which the cursor is located.
     */
    goToLineEnd(): void;
    /**
     * Moves the cursor to the end of the line in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToLineEnd(extendSelection: boolean): void;
    /**
     * Moves the cursor to the start of the line in which the cursor is located.
     */
    goToLineStart(): void;
    /**
     * Moves the cursor to the start of the line in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToLineStart(extendSelection: boolean): void;
    /**
     * Moves the cursor to the previous line.
     */
    goToPreviousLine(): void;
    /**
     * Moves the cursor to the previous line and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousLine(extendSelection: boolean): void;
    /**
     * Moves the cursor to the next character.
     */
    goToNextCharacter(): void;
    /**
     * Moves the cursor to the next character and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextCharacter(extendSelection: boolean): void;
    /**
     * Moves the cursor to the previous character.
     */
    goToPreviousCharacter(): void;
    /**
     * Moves the cursor to the previous character and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousCharacter(extendSelection: boolean): void;
    /**
     * Selects the line in which the cursor is located.
     */
    selectLine(): void;
    /**
     * Selects the line in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectLine(extendSelection: boolean): void;
    /**
     * Moves the cursor to the beginning of the next page.
     */
    goToNextPage(): void;
    /**
     * Moves the cursor to the beginning of the next page and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextPage(extendSelection: boolean): void;
    /**
     * Moves the cursor to the beginning of the previous page.
     */
    goToPreviousPage(): void;
    /**
     * Moves the cursor to the beginning of the previous page and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousPage(extendSelection: boolean): void;
    /**
     * Moves the cursor to the start of the document.
     */
    goToDocumentStart(): void;
    /**
     * Moves the cursor to the start of the document and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToDocumentStart(extendSelection: boolean): void;
    /**
     * Moves the cursor to the end of the document.
     */
    goToDocumentEnd(): void;
    /**
     * Moves the cursor to the end of the document and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToDocumentEnd(extendSelection: boolean): void;
    /**
     * Moves the cursor to the next word.
     */
    goToNextWord(): void;
    /**
     * Moves the cursor to the next word and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextWord(extendSelection: boolean): void;
    /**
     * Moves the cursor to the previous word.
     */
    goToPrevWord(): void;
    /**
     * Moves the cursor to the previous word and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPrevWord(extendSelection: boolean): void;
    /**
     * Moves the cursor to the start of the paragraph in which the cursor is located.
     */
    goToParagraphStart(): void;
    /**
     * Moves the cursor to the start of the paragraph in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToParagraphStart(extendSelection: boolean): void;
    /**
     * Moves the cursor to the end of the paragraph in which the cursor is located.
     */
    goToParagraphEnd(): void;
    /**
     * Moves the cursor to the end of the paragraph in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToParagraphEnd(extendSelection: boolean): void;
    /**
     * Selects the paragraph in which the cursor is located.
     */
    selectParagraph(): void;
    /**
     * Selects the table cell in which the cursor is located.
     */
    selectTableCell(): void;
    /**
     * Selects the table cell in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTableCell(extendSelection: boolean): void;
    /**
     * Selects the table row in which the cursor is located.
     */
    selectTableRow(): void;
    /**
     * Selects the table row in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTableRow(extendSelection: boolean): void;
    /**
     * Selects the entire table in which the cursor is located.
     */
    selectTable(): void;
    /**
     * Selects the entire table in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTable(extendSelection: boolean): void;
    /**
     * Selects the editor's entire content.
     */
    selectAll(): void;
    setMainSubDocumentAsActive(): void;
    setFooterSubDocumentAsActiveByPageIndex(pageIndex: number): void;
    setHeaderSubDocumentAsActiveByPageIndex(pageIndex: number): void;
}
/**
 * Defines a document's interval.
 */
interface Interval {
    /**
     * Gets the interval's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets the interval's character length.
     * Value: An integer value specifying the element length in characters.
     */
    length: number;
}
/**
 * A command to invoke the Bookmark dialog.
 */
interface OpenInsertBookmarkDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertBookmarkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a new bookmark that references the current selection.
 */
interface InsertBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertBookmarkCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param name A string value specifying name of creating bookmark.
     * @param start An integer value specifying the start position of bookmark's range.
     * @param length An integer value specifying the length of bookmark's range.
     */
    execute(name: string, start: number, length: number): boolean;
}
/**
 * A command to delete a specific bookmark.
 */
interface DeleteBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param name A string value specifying name of the deleted bookmark.
     */
    execute(name: string): boolean;
}
/**
 * Gets a command to navigate to the specified bookmark in the document.
 */
interface GoToBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param name 
     */
    execute(name: string): boolean;
}
/**
 * A command to paste the text from the clipboard over the selection.
 */
interface PasteCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the PasteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to copy the selected text and place it to the clipboard.
 */
interface CopyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CopyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to cut the selected text and place it to the clipboard.
 */
interface CutCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert an empty document field at the current position in the document.
 */
interface CreateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to update the field's result.
 */
interface UpdateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UpdateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to display the selected field's field codes.
 */
interface ShowFieldCodesCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ShowFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param showFieldCodes true to display field codes, false to hide field codes.
     */
    execute(showFieldCodes: boolean): boolean;
    /**
     * Executes the ShowFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to display all field codes in place of the fields in the document.
 */
interface ShowAllFieldCodesCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ShowAllFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param showFieldCodes true to display field codes, false to hide field codes.
     */
    execute(showFieldCodes: boolean): boolean;
    /**
     * Executes the ShowAllFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to update all fields in the selected range.
 */
interface UpdateAllFieldsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UpdateAllFieldsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a DATE field displaying the current date.
 */
interface CreateDateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateDateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a TIME field displaying the current time.
 */
interface CreateTimeFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateTimeFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a PAGE field displaying the current page number.
 */
interface CreatePageFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreatePageFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the next data record of the bound data source.
 */
interface GoToDataRecordCommand extends CommandBase {
    /**
     * Executes the GoToDataRecordCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param activeRecordIndex An integer value specifying index of the next data record.
     */
    execute(activeRecordIndex: number): boolean;
}
/**
 * A command to navigate to the first data record of the bound data source.
 */
interface GoToFirstDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToFirstDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the previous data record of the bound data source.
 */
interface GoToPreviousDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToPreviousDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the next data record of the bound data source.
 */
interface GoToNextDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToNextDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the last data record of the bound data source.
 */
interface GoToLastDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToLastDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to display or hide actual data in MERGEFIELD fields.
 */
interface ShowMergedDataCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowMergedDataCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ShowMergedDataCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param showMergedData true to display merged data, false to hide merged data.
     */
    execute(showMergedData: boolean): boolean;
}
/**
 * A command to invoke the Insert Merge Field dialog.
 */
interface MergeFieldDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MergeFieldDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a MERGEFIELD field (with a data source column name) at the current position in the document.
 */
interface CreateMergeFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateMergeFieldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fieldName A string value specifying the name of the merge field.
     */
    execute(fieldName: string): boolean;
}
/**
 * Gets a command to invoke the Export Range dialog to start a mail merge.
 */
interface MailMergeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MailMergeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to start the mail merge process and download the resulting document containing the merged information.
 */
interface MailMergeAndDownloadCommand extends CommandBase {
    /**
     * Executes the MailMergeAndDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fileExtension A string value specifying the file extension of the resulting document.
     */
    execute(fileExtension: string): boolean;
    /**
     * Executes the MailMergeAndDownloadCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fileExtension A string value specifying the file extension of the resulting document.
     * @param settings A MailMergeSettings object containing settings to set up mail merge operations.
     */
    execute(fileExtension: string, settings: MailMergeSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to start the mail merge process and save the resulting merged document to the server.
 */
interface MailMergeAndSaveAsCommand extends CommandBase {
    /**
     * Executes the MailMergeAndSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param filePath A string value specifying path to the saving file on the server.
     */
    execute(filePath: string): boolean;
    /**
     * Executes the MailMergeAndSaveAsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param filePath A string value specifying path to the saving file.
     * @param settings A MailMergeSettings object specifying hyperlink settings.
     */
    execute(filePath: string, settings: MailMergeSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to insert a NUMPAGES field displaying the total number of pages.
 */
interface CreatePageCountFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreatePageCountFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * Contains settings to set up mail merge operations.
 */
interface MailMergeSettings {
    /**
     * Gets or sets a value specifying which data rows should be exported into a merged document.
     * Value: One of the <see cref="MailMergeExportRange" /> values.
     */
    range: any;
    /**
     * Gets or sets the index of the row from which the exported range starts.
     * Value: An integer value specifying the row index.
     */
    exportFrom: number;
    /**
     * Gets or sets the number of data rows in the exported mail-merge range.
     * Value: An integer value specifying the row count.
     */
    exportRecordsCount: number;
    /**
     * Gets or sets the merge mode.
     * Value: One of the <see cref="MergeMode" /> values.
     */
    mergeMode: any;
}
declare enum MergeMode {
    NewParagraph=0,
    NewSection=1,
    JoinTables=2
}
declare enum MailMergeExportRange {
    AllRecords=0,
    CurrentRecord=1,
    Range=2
}
/**
 * A command to create a new empty document.
 */
interface FileNewCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileNewCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to open the file, specifying its path.
 */
interface FileOpenCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileOpenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param path A string value specifying path to the opening file.
     */
    execute(path: string): boolean;
}
/**
 * A command to invoke the File Open dialog allowing one to select and load a document file into RichEdit.
 */
interface FileOpenDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileOpenDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to save the document to a file.
 */
interface FileSaveCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileSaveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path.
 */
interface FileSaveAsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param path A string value specifying path to the saving file.
     */
    execute(path: string): boolean;
}
/**
 * A command to download the document file, specifying its extension.
 */
interface FileDownloadCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fileExtension A string value specifying the extension of the downloading file.
     */
    execute(fileExtension: string): boolean;
}
/**
 * A command to invoke a browser-specific Print dialog allowing one to print the current document.
 */
interface FilePrintCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FilePrintCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Search Panel allowing end-users to search text and navigate through search results.
 */
interface OpenFindPanelCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFindPanelCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Find and Replace dialog.
 */
interface OpenFindAndReplaceDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFindAndReplaceDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to find all matches of the specified text in the document.
 */
interface FindAllCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param text A string value specifying finding text.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     * @param highlightResults true, to highlight result of search; otherwise, false.
     */
    execute(text: string, matchCase: boolean, highlightResults: boolean): boolean;
    /**
     * Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param text A string value specifying text to find.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     * @param highlightResults true, to highlight result of search; otherwise, false.
     * @param results An array of Interval objects containing the results of search.
     */
    execute(text: string, matchCase: boolean, highlightResults: boolean, results: Interval[]): boolean;
}
/**
 * A command to hide the search results.
 */
interface HideFindResultsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the HideFindResultsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to search for a specific text and replace all matches in the document with the specified string.
 */
interface ReplaceAllCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ReplaceAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param text A string value specifying text to replace.
     * @param replaceText A string value specifying replacing text.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     */
    execute(text: string, replaceText: string, matchCase: boolean): boolean;
}
/**
 * A command to search for a specific text and replace the next match in the document with the specified string.
 */
interface ReplaceNextCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ReplaceNextCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param text A string value specifying text to replace.
     * @param replaceText A string value specifying replacing text.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     */
    execute(text: string, replaceText: string, matchCase: boolean): boolean;
}
/**
 * A command to cancel changes caused by the previous command.
 */
interface UndoCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UndoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to reverse actions of the previous undo command.
 */
interface RedoCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RedoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Hyperlink dialog.
 */
interface OpenInsertHyperlinkDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertHyperlinkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a hyperlink at the current position in the document.
 */
interface InsertHyperlinkCommand extends CommandBase {
    /**
     * Executes the InsertHyperlinkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A HyperLinkSettings object specifying hyperlink settings.
     */
    execute(settings: HyperlinkSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to delete the selected hyperlink.
 */
interface DeleteHyperlinkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete all hyperlinks in a selected range.
 */
interface DeleteHyperlinksCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteHyperlinksCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the document bookmark or URI (uniform resource identifier) specified for the hyperlink.
 */
interface OpenHyperlinkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * Contains settings to define hyperlinks.
 */
interface HyperlinkSettings {
    /**
     * Gets or sets a text displayed for a hyperlink.
     * Value: A string value specifying the hyperlink display text.
     */
    text: string;
    /**
     * Gets or sets a text for the tooltip displayed when the mouse hovers over a hyperlink.
     * Value: A string containing the tooltip text.
     */
    tooltip: string;
    /**
     * Gets or sets the hyperlink destination.
     * Value: A string value that specifies the destination to which a hyperlink refers.
     */
    url: string;
    /**
     * Gets or sets the associated bookmak.
     * Value: A string value specifying the bookmark name.
     */
    bookmark: string;
}
/**
 * A command to insert a page break at the current position in the document.
 */
interface InsertPageBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertPageBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a column break at the current position in the document.
 */
interface InsertColumnBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertColumnBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a section break and start a new section on the next page.
 */
interface InsertSectionBreakNextPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakNextPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a section break and start a new section on the next even-numbered page.
 */
interface InsertSectionBreakEvenPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakEvenPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a section break and start a new section on the next odd-numbered page.
 */
interface InsertSectionBreakOddPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakOddPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert the line break at the current position in the document.
 */
interface InsertLineBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertLineBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle between the bulleted paragraph and normal text.
 */
interface ToggleBulletedListCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleBulletedListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle between the numbered paragraph and normal text.
 */
interface ToggleNumberingListCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle between the multilevel list style and normal text.
 */
interface ToggleMultilevelListCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleMultilevelListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Bulleted and Numbering dialog.
 */
interface OpenNumberingListDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenNumberingListDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Customize Numbered List dialog.
 */
interface OpenCustomNumberingListDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenCustomNumberingListDialogCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param abstractNumberingListIndex An integer value specifying index of abstract numbering list.
     */
    execute(abstractNumberingListIndex: number): boolean;
}
/**
 * A command to customize the numbered list parameters.
 */
interface ChangeCustomNumberingListCommand extends CommandBase {
    /**
     * Executes the ChangeCustomNumberingListCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param abstractNumberingListIndex An integer value specifying the numbering list index.
     * @param listLevelSettings An array of ListLevelSettings objects defining settings for list levels.
     */
    execute(abstractNumberingListIndex: number, listLevelSettings: ListLevelSettings[]): boolean;
    /**
     * Gets information about the command state.
     * @param abstractNumberingListIndex An integer value specifying the index of the abstract numbering list item whose state to return.
     */
    getState(abstractNumberingListIndex: number): any;
}
/**
 * A command to restart the numbering list.
 */
interface RestartNumberingListCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RestartNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to increment the indent level of paragraphs in a selected numbered list.
 */
interface IncrementNumberingIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to decrement the indent level of paragraphs in a selected numbered list.
 */
interface DecrementNumberingIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to continue the list's numbering.
 */
interface ContinueNumberingListCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ContinueNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert numeration to a paragraph making it a numbering list item.
 */
interface InsertNumerationCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertNumerationCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param abstractNumberingListIndex An integer value specifying index of abstract numbering list.
     */
    execute(abstractNumberingListIndex: number): boolean;
    /**
     * Executes the InsertNumerationCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param numberingListIndex An integer value specifying index of numbering list.
     * @param isAbstractNumberingList true, to insert an abstract numbering list; otherwise, false.
     */
    execute(numberingListIndex: number, isAbstractNumberingList: boolean): boolean;
}
/**
 * A command to remove the selected numeration.
 */
interface RemoveNumerationCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveNumerationCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * Contains settings to define individual bulleted or numbered list levels.
 */
interface ListLevelSettings {
    /**
     * Gets or sets the pattern used to format the list level for display purposes.
     * Value: A string value specifying the format pattern.
     */
    displayFormatString: string;
    /**
     * Gets or sets the numbering format used for the current list level's paragraph.
     * Value: One of the <see cref="ListLevelFormat" /> values.
     */
    format: any;
    /**
     * Gets the list level item's start position in the document.
     * Value: An integer value specifying the start position.
     */
    start: number;
    /**
     * Gets or sets the paragraph text alignment within numbered list levels.
     * Value: One of the <see cref="ListLevelNumberAlignment" /> values.
     */
    alignment: any;
    separator: string;
    /**
     * Gets or sets the left indent for text within the current list level's paragraph.
     * Value: An integer value specifying the left indent.
     */
    leftIndent: number;
    /**
     * Gets or sets a value specifying the indent of the first line of the current list level's paragraph.
     * Value: An integer value specifying the indent.
     */
    firstLineIndent: number;
    /**
     * Gets or sets a value specifying whether and how the first line of the current list level's paragraph is indented.
     * Value: One of the <see cref="ParagraphFirstLineIndent" /> values.
     */
    firstLineIndentType: any;
    /**
     * Gets or sets the font name of the current list level's paragraph.
     * Value: A string value specifying the font name.
     */
    fontName: string;
    /**
     * Gets or sets the font color of the current list level's paragraph.
     * Value: A string value specifying the font color.
     */
    fontColor: string;
    /**
     * Gets or sets the font size of the current list level's paragraph.
     * Value: An integer value specifying the font size.
     */
    fontSize: number;
    /**
     * Gets or sets whether the font formatting of the current list level's paragraph is bold.
     * Value: true, if the font formatting is bold; otherwise, false.
     */
    fontBold: boolean;
    /**
     * Gets or sets whether the font formatting of the current list level's paragraph is italic.
     * Value: true, if the font formatting is italic; otherwise, false.
     */
    fontItalic: boolean;
}
declare enum ListLevelFormat {
    Decimal=0,
    AIUEOHiragana=1,
    AIUEOFullWidthHiragana=2,
    ArabicAbjad=3,
    ArabicAlpha=4,
    Bullet=5,
    CardinalText=6,
    Chicago=7,
    ChineseCounting=8,
    ChineseCountingThousand=9,
    ChineseLegalSimplified=10,
    Chosung=11,
    DecimalEnclosedCircle=12,
    DecimalEnclosedCircleChinese=13,
    DecimalEnclosedFullstop=14,
    DecimalEnclosedParentheses=15,
    DecimalFullWidth=16,
    DecimalFullWidth2=17,
    DecimalHalfWidth=18,
    DecimalZero=19,
    Ganada=20,
    Hebrew1=21,
    Hebrew2=22,
    Hex=23,
    HindiConsonants=24,
    HindiDescriptive=25,
    HindiNumbers=26,
    HindiVowels=27,
    IdeographDigital=28,
    IdeographEnclosedCircle=29,
    IdeographLegalTraditional=30,
    IdeographTraditional=31,
    IdeographZodiac=32,
    IdeographZodiacTraditional=33,
    Iroha=34,
    IrohaFullWidth=35,
    JapaneseCounting=36,
    JapaneseDigitalTenThousand=37,
    JapaneseLegal=38,
    KoreanCounting=39,
    KoreanDigital=40,
    KoreanDigital2=41,
    KoreanLegal=42,
    LowerLetter=43,
    LowerRoman=44,
    None=45,
    NumberInDash=46,
    Ordinal=47,
    OrdinalText=48,
    RussianLower=49,
    RussianUpper=50,
    TaiwaneseCounting=51,
    TaiwaneseCountingThousand=52,
    TaiwaneseDigital=53,
    ThaiDescriptive=54,
    ThaiLetters=55,
    ThaiNumbers=56,
    UpperLetter=57,
    UpperRoman=58,
    VietnameseDescriptive=59
}
declare enum ListLevelNumberAlignment {
    Left=0,
    Center=1,
    Right=2
}
/**
 * A command to invoke the Insert Image dialog.
 */
interface OpenInsertPictureDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertPictureDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a picture from a file.
 */
interface InsertPictureCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertPictureCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param imageUrl A string value specifying picture's Url.
     */
    execute(imageUrl: string): boolean;
}
/**
 * A command to invoke the Symbols dialog.
 */
interface OpenInsertSymbolDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertSymbolDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a character into the document.
 */
interface InsertSymbolCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSymbolCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param symbol A string value specifying symbols to insert.
     * @param fontName A string value specifying font of symbols to insert.
     */
    execute(symbol: string, fontName: string): boolean;
}
/**
 * A command to insert a paragraph break at the current position in the document.
 */
interface InsertParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert text at the current position in the document.
 */
interface InsertTextCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTextCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param text A string value specifying text to insert.
     */
    execute(text: string): boolean;
}
/**
 * A command to delete the text in a selected range.
 */
interface DeleteCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to move the cursor backwards and erase the character in that space.
 */
interface BackspaceCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the BackspaceCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to scale pictures in a selected range.
 */
interface ChangePictureScaleCommand extends CommandBase {
    /**
     * Executes the ChangePictureScaleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param scale A Scale object specifying scaling of the picture.
     */
    execute(scale: Scale): boolean;
    /**
     * Executes the ChangePictureScaleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param x An interger number specifying width of the picture
     * @param y An interger number specifying height of the picture
     */
    execute(x: number, y: number): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to move the selected range to a specific position in the document.
 */
interface MoveContentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MoveContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param position An integer value specifying position to insert selected text.
     */
    execute(position: number): boolean;
}
/**
 * A command to copy the selected text and place it to the specified position.
 */
interface CopyContentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CopyContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param position An integer number value specifying position for pasting selected text.
     */
    execute(position: number): boolean;
}
/**
 * A command to insert a tab character at the current position in the document.
 */
interface InsertTabCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTabCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * Defines the scaling settings.
 */
interface Scale {
    x: number;
    y: number;
}
/**
 * A command to change page margin settings.
 */
interface ChangePageMarginsCommand extends CommandBase {
    /**
     * Executes the ChangePageMarginsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param left An integer number specifying left margin of the page.
     * @param top An integer number specifying top margin of the page.
     * @param right An integer number specifying right margin of the page.
     * @param bottom An integer number specifying bottom margin of the page.
     */
    execute(left: number, top: number, right: number, bottom: number): boolean;
    /**
     * Executes the ChangePageMarginsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param margins A Margins object specifying page margin settings.
     */
    execute(margins: Margins): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to invoke the Margins tab of the Page Setup dialog.
 */
interface OpenPageMarginsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenPageMarginsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the page orientation.
 */
interface ChangePageOrientationCommand extends CommandBase {
    /**
     * 
     * @param isPortrait 
     */
    execute(isPortrait: any): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to invoke the Paper tab of the Page Setup dialog.
 */
interface OpenPagePaperSizeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenPagePaperSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to set the page size.
 */
interface SetPageSizeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SetPageSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the page size.
 */
interface ChangePageSizeCommand extends CommandBase {
    /**
     * Executes the ChangePageSizeCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param width An integer number specifying width of the page.
     * @param height An integer number specifying height of the page.
     */
    execute(width: number, height: number): boolean;
    /**
     * Executes the ChangePageSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param size A Size object specifying the page size settings.
     */
    execute(size: Size): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the number of section columns having the same width.
 */
interface ChangeSectionEqualColumnCountCommand extends CommandBase {
    /**
     * Executes the ChangeSectionEqualColumnCountCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param columnCount An interger number specifying the number of section columns having the same width.
     */
    execute(columnCount: number): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to invoke the Columns dialog.
 */
interface OpenSectionColumnsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenSectionColumnsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the settings of individual section columns.
 */
interface ChangeSectionColumnsCommand extends CommandBase {
    /**
     * Executes the ChangeSectionColumnsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the background color of the page.
 */
interface ChangePageColorCommand extends CommandBase {
    /**
     * Executes the ChangePageColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param color A string specifying background color of the page. May be specified as color name or hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to activate the page header and begin editing.
 */
interface InsertHeaderCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to activate the page footer and begin editing.
 */
interface InsertFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to link a header/footer to the previous section, so it has the same content.
 */
interface LinkHeaderFooterToPreviousCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the LinkHeaderFooterToPreviousCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the page footer from the page header in the header/footer editing mode.
 */
interface GoToFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the page header from the page footer in the header/footer editing mode.
 */
interface GoToHeaderCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the next page header or footer in the header/footer editing mode.
 */
interface GoToNextHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToNextHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to navigate to the previous page header or footer in the header/footer editing mode.
 */
interface GoToPreviousHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToPreviousHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the header/footer edit mode, so it allows creation of a different header or footer for the first page of a document or section.
 */
interface SetDifferentFirstPageHeaderFooterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDifferentFirstPageHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the SetDifferentFirstPageHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param differentFirstPage true to apply different text for first page's header and footer, false to remove difference.
     */
    execute(differentFirstPage: boolean): boolean;
}
/**
 * A command to change the header/footer edit mode so it allows creation of a different header or footer for odd and even pages of a document or section.
 */
interface SetDifferentOddAndEvenPagesHeaderFooterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param differentOddAndEvenPages true to apply different text for odd and even pages' header and footer, false to remove difference.
     */
    execute(differentOddAndEvenPages: boolean): boolean;
}
/**
 * A command to finish header/footer editing.
 */
interface CloseHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CloseHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * Defines a section column in the document.
 */
interface SectionColumn {
    /**
     * Gets or sets the width of the section column.
     * Value: An integer value specifying the section column width.
     */
    width: number;
    /**
     * Gets or sets the amount of space between adjacent section columns.
     * Value: An integer value specifying the spacing between section columns.
     */
    spacing: number;
}
/**
 * Defines the size settings.
 */
interface Size {
    /**
     * Gets or sets the width value.
     * Value: An integer value specifying the width.
     */
    width: number;
    /**
     * Gets or sets the height value.
     * Value: An integer value specifying the height.
     */
    height: number;
}
/**
 * Defines the margin settings.
 */
interface Margins {
    /**
     * Gets or sets the left margin.
     * Value: An integer value specifying the left margin.
     */
    left: number;
    /**
     * Gets or sets the top margin.
     * Value: An integer value specifying the top margin.
     */
    top: number;
    /**
     * Gets or sets the right margin.
     * Value: An integer value specifying the right margin.
     */
    right: number;
    /**
     * Gets or sets the bottom margin.
     * Value: An integer value specifying the bottom margin.
     */
    bottom: number;
}
declare enum Orientation {
    Landscape=0,
    Portrait=1
}
/**
 * A command to increment the indent level of paragraphs in a selected range.
 */
interface IncreaseIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to decrement the indent level of paragraphs in a selected range.
 */
interface DecreaseIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle the visibility of hidden symbols.
 */
interface ShowHiddenSymbolsCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowHiddenSymbolsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ShowHiddenSymbolsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param show true to display hidden symbols; otherwise, false.
     */
    execute(show: boolean): boolean;
}
/**
 * A command to toggle left paragraph alignment on and off.
 */
interface ToggleParagraphAlignmentLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle centered paragraph alignment on and off.
 */
interface ToggleParagraphAlignmentCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle right paragraph alignment on and off.
 */
interface ToggleParagraphAlignmentRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle justified paragraph alignment on and off.
 */
interface ToggleParagraphAlignmentJustifyCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentJustifyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to format a current paragraph with single line spacing.
 */
interface SetSingleParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetSingleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to format a current paragraph with one and a half line spacing.
 */
interface SetSesquialteralParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetSesquialteralParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to format a current paragraph with double line spacing.
 */
interface SetDoubleParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDoubleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to add spacing before a paragraph.
 */
interface AddSpacingBeforeParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the AddSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to add spacing after a paragraph.
 */
interface AddSpacingAfterParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the AddSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to remove spacing before the selected paragraph.
 */
interface RemoveSpacingBeforeParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to remove spacing after the selected paragraph.
 */
interface RemoveSpacingAfterParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the background color of paragraphs in a selected range.
 */
interface ChangeParagraphBackColorCommand extends CommandBase {
    /**
     * Executes the ChangeParagraphBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param color A string specifying highlighting color of the paragraphs in a selected range. May be specified as color name or hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to invoke the Paragraph dialog allowing end-users to set paragraph formatting.
 */
interface OpenParagraphFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenParagraphFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the formatting of paragraphs in a selected range.
 */
interface ChangeParagraphFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeParagraphFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A ParagraphFormattingSettings object specifying paragraph formatting settings.
     */
    execute(settings: ParagraphFormattingSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to increment the left indentation of paragraphs in a selected range.
 */
interface IncrementParagraphLeftIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to decrement the left indentation of paragraphs in a selected range.
 */
interface DecrementParagraphLeftIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Tabs paragraph dialog.
 */
interface OpenTabsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTabsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change paragraph tab stops.
 */
interface ChangeTabsCommand extends CommandBase {
    /**
     * Executes the ChangeTabsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TabsSettings object maintaining the information about tab stops.
     */
    execute(settings: TabsSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * Contains the information about tab stops.
 */
interface TabsSettings {
    /**
     * Gets or sets the default tab stop value.
     * Value: An integer value specifying the default tab stop.
     */
    defaultTabStop: number;
    /**
     * Gets or sets a list of tab stops.
     * Value: An array of TabSettings objects containing individual tab stop settings.
     */
    tabs: TabSettings[];
}
/**
 * Contains settings of a tab stop.
 */
interface TabSettings {
    /**
     * Gets or sets the alignment type, specifying how any text after the tab will be lined up.
     * Value: One of the <see cref="TabAlign" /> values.
     */
    alignment: any;
    /**
     * Gets or sets the tab leader style, i.e., the symbol used as a tab leader.
     * Value: One of the <see cref="TabLeaderType" /> values.
     */
    leader: any;
    /**
     * Gets or sets the position of the tab stop.
     * Value: A number representing the distance from the left edge of the text area.
     */
    position: number;
    /**
     * Gets or sets whether the individual tab stop is in effect.
     * Value: true to switch off this tab stop; otherwise, false.
     */
    deleted: boolean;
}
declare enum TabAlign {
    Left=0,
    Center=1,
    Right=2,
    Decimal=3
}
declare enum TabLeaderType {
    None=0,
    Dots=1,
    MiddleDots=2,
    Hyphens=3,
    Underline=4,
    ThickLine=5,
    EqualSign=6
}
/**
 * Contains settings to define the paragraph formatting.
 */
interface ParagraphFormattingSettings {
    /**
     * Gets or sets the paragraph alignment.
     * Value: One of the <see cref="ParagraphAlignment" /> values.
     */
    alignment: any;
    /**
     * Gets or sets the outline level of a paragraph.
     * Value: An integer specifying the level number.
     */
    outlineLevel: number;
    /**
     * Gets or sets the right indent value for the specified paragraph.
     * Value: An integer value specifying the right indent.
     */
    rightIndent: number;
    /**
     * Gets or sets the spacing before the current paragraph.
     * Value: An integer value specifying the spacing before the paragraph.
     */
    spacingBefore: number;
    /**
     * Gets or sets the spacing after the current paragraph.
     * Value: An integer value specifying the spacing after the paragraph.
     */
    spacingAfter: number;
    /**
     * Gets or sets a value which determines the spacing between lines in a paragraph.
     * Value: One of the <see cref="ParagraphLineSpacingType" /> values.
     */
    lineSpacingType: any;
    /**
     * Gets or sets a value specifying whether and how the first line of a paragraph is indented.
     * Value: One of the <see cref="ParagraphFirstLineIndent" /> values.
     */
    firstLineIndentType: any;
    /**
     * Gets or sets a value specifying the indent of the first line of a paragraph.
     * Value: An integer value specifying the indent of the first line.
     */
    firstLineIndent: number;
    /**
     * Gets or sets whether to suppress addition of additional space (contextual spacing) between paragraphs of the same style.
     * Value: true to remove extra spacing between paragraphs, false to add extra space.
     */
    contextualSpacing: boolean;
    /**
     * Gets or sets whether to prevent all page breaks that interrupt a paragraph.
     * Value: true, to keep paragraph lines together; otherwise, false.
     */
    keepLinesTogether: boolean;
    /**
     * Gets or sets whether a page break is inserted automatically before a specified paragraph(s).
     * Value: true, if a page break is inserted automatically before a paragraph(s); otherwise, false.
     */
    pageBreakBefore: boolean;
    /**
     * Gets or sets the left indent for text within a paragraph.
     * Value: An integer value specifying the left indent.
     */
    leftIndent: number;
    /**
     * Gets or sets a line spacing value.
     * Value: An integer value specifying the line spacing.
     */
    lineSpacing: number;
    /**
     * Gets or sets the paragraph background color.
     * Value: A string value specifying the background color.
     */
    backColor: string;
}
declare enum ParagraphAlignment {
    Left=0,
    Right=1,
    Center=2,
    Justify=3
}
declare enum ParagraphLineSpacingType {
    Single=0,
    Sesquialteral=1,
    Double=2,
    Multiple=3,
    Exactly=4,
    AtLeast=5
}
declare enum ParagraphFirstLineIndent {
    None=0,
    Indented=1,
    Hanging=2
}
interface OpenSpellingDialogCommand extends CommandWithSimpleStateBase {
    execute(): boolean;
}
/**
 * A command to invoke the Insert Table dialog.
 */
interface OpenInsertTableDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertTableDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Insert Table dialog.
 */
interface InsertTableCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param columnCount An integer value specifying number of columns in a generated table.
     * @param rowCount An integer value specifying number of rows in a generated table.
     */
    execute(columnCount: number, rowCount: number): boolean;
}
/**
 * A command to invoke the Table Properties dialog.
 */
interface OpenTableFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTableFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the selected table's formatting.
 */
interface ChangeTableFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeTableFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TableFormattingSettings object containing the settings to format a table.
     */
    execute(settings: TableFormattingSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the selected table's preferred row height.
 */
interface ChangeTableRowPreferredHeightCommand extends CommandBase {
    /**
     * Executes the ChangeTableRowPreferredHeightCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param preferredHeight A TableHeightUnit object specifying preferred height of the selected table rows.
     */
    execute(preferredHeight: TableHeightUnit): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the preferred cell width of the selected table rows.
 */
interface ChangeTableCellPreferredWidthCommand extends CommandBase {
    /**
     * Executes the ChangeTableCellPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param preferredWidth A TableWidthUnit object specifying preferred width of the selected table rows.
     */
    execute(preferredWidth: TableWidthUnit): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the selected table's preferred column width.
 */
interface ChangeTableColumnPreferredWidthCommand extends CommandBase {
    /**
     * Executes the ChangeTableColumnPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param preferredWidth A TableWidthUnit object specifying preferred width of the selected table columns.
     */
    execute(preferredWidth: TableWidthUnit): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the cell formatting of the selected table elements.
 */
interface ChangeTableCellFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeTableCellFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TableFormattingSettings object specifying cell formatting of the selected table elements.
     */
    execute(settings: TableCellFormattingSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to insert a table column to the left of the current position in the table.
 */
interface InsertTableColumnToTheLeftCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableColumnToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a table column to the right of the current position in the table.
 */
interface InsertTableColumnToTheRightCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableColumnToTheRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a row in a table below the selected row.
 */
interface InsertTableRowBelowCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableRowBelowCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert a row in a table above the selected row.
 */
interface InsertTableRowAboveCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableRowAboveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete the selected table rows.
 */
interface DeleteTableRowsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableRowsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete the selected table columns.
 */
interface DeleteTableColumnsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableColumnsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to insert table cells with a horizontal shift into the selected table.
 */
interface InsertTableCellWithShiftToTheLeftCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellWithShiftToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete the selected table cells with a horizontal shift.
 */
interface DeleteTableCellsWithShiftHorizontallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsWithShiftHorizontallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete the selected table cells with a vertical shift.
 */
interface DeleteTableCellsWithShiftVerticallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsWithShiftVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to delete the selected table.
 */
interface DeleteTableCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Insert Cells dialog.
 */
interface InsertTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Delete Cells dialog.
 */
interface DeleteTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to merge the selected table cells.
 */
interface MergeTableCellsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MergeTableCellsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Split Cells dialog.
 */
interface SplitTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SplitTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to split the selected table cells based on the specified options.
 */
interface SplitTableCellsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SplitTableCellsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param rowCount An integer value specifying number of rows in the splitted table cells.
     * @param columnCount An integer value specifying number of columns in the splitted table cells.
     * @param mergeBeforeSplit true to merge the selected cells before splitting; otherwise, false.
     */
    execute(rowCount: number, columnCount: number, mergeBeforeSplit: boolean): boolean;
}
/**
 * A command to insert table cells with a vertical shift into the selected table.
 */
interface InsertTableCellsWithShiftToTheVerticallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellsWithShiftToTheVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to invoke the Borders and Shading table dialog.
 */
interface OpenTableBordersAndShadingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTableBordersAndShadingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change borders and shading of the selected table elements.
 */
interface ChangeTableBordersAndShadingCommand extends CommandBase {
    /**
     * Executes the ChangeTableBordersAndShadingCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TableBorderSettings object with settings specifying table borders.
     * @param applyToWholeTable true to apply the border settings to the whole table, false to apply the border settings to the selected cells.
     */
    execute(settings: TableBordersSettings, applyToWholeTable: boolean): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to apply top-left alignment for the selected table cells.
 */
interface ToggleTableCellAlignTopLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply top-center alignment for the selected table cells.
 */
interface ToggleTableCellAlignTopCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply top-right alignment for the selected table cells.
 */
interface ToggleTableCellAlignTopRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply middle-left alignment for the selected table cells.
 */
interface ToggleTableCellAlignMiddleLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply middle-center alignment for the selected table cells.
 */
interface ToggleTableCellAlignMiddleCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply middle-right alignment for the selected table cells.
 */
interface ToggleTableCellAlignMiddleRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply bottom-left alignment for the selected table cells.
 */
interface ToggleTableCellAlignBottomLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply bottom-center alignment for the selected table cells.
 */
interface ToggleTableCellAlignBottomCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to apply bottom-right alignment for the selected table cells.
 */
interface ToggleTableCellAlignBottomRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the selected table's style.
 */
interface ChangeTableStyleCommand extends CommandBase {
    /**
     * Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param style A TableStyle object specifying the style applying to the table.
     */
    execute(style: TableStyle): boolean;
    /**
     * Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param styleName A string specifying the name of style applying to the table.
     */
    execute(styleName: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to toggle top borders for selected cells on/off.
 */
interface ToggleTableCellTopBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellTopBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle right borders for selected cells on/off.
 */
interface ToggleTableCellRightBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellRightBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle bottom borders for selected cells on/off.
 */
interface ToggleTableCellBottomBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellBottomBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
interface ToggleTableCellLeftBorderCommand extends CommandWithBooleanStateBase {
    execute(): boolean;
}
/**
 * A command to remove the borders of the selected table cells.
 */
interface RemoveTableCellBordersCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveTableCellBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle all borders for selected cells on/off.
 */
interface ToggleTableCellAllBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAllBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle inner borders for selected cells on/off.
 */
interface ToggleTableCellInsideBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle inner horizontal borders for selected cells on/off.
 */
interface ToggleTableCellInsideHorizontalBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideHorizontalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle inner vertical borders for selected cells on/off.
 */
interface ToggleTableCellInsideVerticalBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideVerticalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle outer borders for selected cells on/off.
 */
interface ToggleTableCellOutsideBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellOutsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the selected table's style options.
 */
interface ChangeTableLookCommand extends CommandBase {
    /**
     * Executes the ChangeTableLookCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TableLookSettings object containing the settings that modify the table appearance.
     */
    execute(settings: TableLookSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the repository item's table border style.
 */
interface ChangeTableBorderRepositoryItemCommand extends CommandBase {
    /**
     * Executes the ChangeTableBorderRepositoryItemCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A TableBorderSettings object specifying the repository item's table border style.
     */
    execute(settings: TableBorderSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change cell shading in the selected table elements.
 */
interface ChangeTableCellShadingCommand extends CommandBase {
    /**
     * Executes the ChangeTableCellShadingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param color A string specifying color of the selected cells' shading. May be specified as color name or hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to toggle the display of grid lines for a table with no borders applied - on/off.
 */
interface ShowTableGridLinesCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowTableGridLinesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ShowTableGridLinesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param showTableGridLines true to display grid lines of the table, false to hide grid lines of the table.
     */
    execute(showTableGridLines: boolean): boolean;
}
/**
 * Contains the table style settings that modify the table appearance.
 */
interface TableLookSettings {
    /**
     * Gets or sets a value specifying whether special formatting is applied to the first row of the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    applyFirstRow: boolean;
    /**
     * Gets or sets a value specifying whether special formatting is applied to the last row of the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    applyLastRow: boolean;
    /**
     * Gets or sets a value specifying whether special formatting is applied to the first column of the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    applyFirstColumn: boolean;
    /**
     * Gets or sets a value specifying whether special formatting is applied to the last column of the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    applyLastColumn: boolean;
    /**
     * Gets or sets a value specifying whether row banding formatting is not applied to the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    doNotApplyRowBanding: boolean;
    /**
     * Gets or sets a value specifying whether column banding formatting is not applied to the table.
     * Value: true, to apply the formatting; otherwise, false.
     */
    doNotApplyColumnBanding: boolean;
}
/**
 * Contains settings to define table borders.
 */
interface TableBordersSettings {
    /**
     * Gets or sets the top border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    top: TableBorderSettings;
    /**
     * Gets or sets the right border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    right: TableBorderSettings;
    /**
     * Gets or sets the bottom border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    bottom: TableBorderSettings;
    /**
     * Gets or sets the left border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    left: TableBorderSettings;
    /**
     * Gets or sets the inside horizontal border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    insideHorizontal: TableBorderSettings;
    /**
     * Gets or sets the inside vertical border's settings.
     * Value: A TableBorderSettings object containing the table border settings.
     */
    insideVertical: TableBorderSettings;
    /**
     * Gets or sets the background color of table borders.
     * Value: A string value specifying the background color.
     */
    backgroundColor: string;
}
/**
 * Contains settings to define a table border.
 */
interface TableBorderSettings {
    /**
     * Gets or sets the border color.
     * Value: A string value specifying the border color.
     */
    color: string;
    /**
     * Gets or sets the border line width.
     * Value: An integer value defining the border line width.
     */
    width: number;
    /**
     * Gets or sets the border line style.
     * Value: A <see cref="BorderLineStyle" /> object defining the border line style.
     */
    style: any;
}
declare enum BorderLineStyle {
    None=0,
    Single=1,
    Thick=2,
    Double=3,
    Dotted=4,
    Dashed=5,
    DotDash=6,
    DotDotDash=7,
    Triple=8,
    ThinThickSmallGap=9,
    ThickThinSmallGap=10,
    ThinThickThinSmallGap=11,
    ThinThickMediumGap=12,
    ThickThinMediumGap=13,
    ThinThickThinMediumGap=14,
    ThinThickLargeGap=15,
    ThickThinLargeGap=16,
    ThinThickThinLargeGap=17,
    Wave=18,
    DoubleWave=19,
    DashSmallGap=20,
    DashDotStroked=21,
    ThreeDEmboss=22,
    ThreeDEngrave=23,
    Outset=24,
    Inset=25,
    Apples=26,
    ArchedScallops=27,
    BabyPacifier=28,
    BabyRattle=29,
    Balloons3Colors=30,
    BalloonsHotAir=31,
    BasicBlackDashes=32,
    BasicBlackDots=33,
    BasicBlackSquares=34,
    BasicThinLines=35,
    BasicWhiteDashes=36,
    BasicWhiteDots=37,
    BasicWhiteSquares=38,
    BasicWideInline=39,
    BasicWideMidline=40,
    BasicWideOutline=41,
    Bats=42,
    Birds=43,
    BirdsFlight=44,
    Cabins=45,
    CakeSlice=46,
    CandyCorn=47,
    CelticKnotwork=48,
    CertificateBanner=49,
    ChainLink=50,
    ChampagneBottle=51,
    CheckedBarBlack=52,
    CheckedBarColor=53,
    Checkered=54,
    ChristmasTree=55,
    CirclesLines=56,
    CirclesRectangles=57,
    ClassicalWave=58,
    Clocks=59,
    Compass=60,
    Confetti=61,
    ConfettiGrays=62,
    ConfettiOutline=63,
    ConfettiStreamers=64,
    ConfettiWhite=65,
    CornerTriangles=66,
    CouponCutoutDashes=67,
    CouponCutoutDots=68,
    CrazyMaze=69,
    CreaturesButterfly=70,
    CreaturesFish=71,
    CreaturesInsects=72,
    CreaturesLadyBug=73,
    CrossStitch=74,
    Cup=75,
    DecoArch=76,
    DecoArchColor=77,
    DecoBlocks=78,
    DiamondsGray=79,
    DoubleD=80,
    DoubleDiamonds=81,
    Earth1=82,
    Earth2=83,
    EclipsingSquares1=84,
    EclipsingSquares2=85,
    EggsBlack=86,
    Fans=87,
    Film=88,
    Firecrackers=89,
    FlowersBlockPrint=90,
    FlowersDaisies=91,
    FlowersModern1=92,
    FlowersModern2=93,
    FlowersPansy=94,
    FlowersRedRose=95,
    FlowersRoses=96,
    FlowersTeacup=97,
    FlowersTiny=98,
    Gems=99,
    GingerbreadMan=100,
    Gradient=101,
    Handmade1=102,
    Handmade2=103,
    HeartBalloon=104,
    HeartGray=105,
    Hearts=106,
    HeebieJeebies=107,
    Holly=108,
    HouseFunky=109,
    Hypnotic=110,
    IceCreamCones=111,
    LightBulb=112,
    Lightning1=113,
    Lightning2=114,
    MapleLeaf=115,
    MapleMuffins=116,
    MapPins=117,
    Marquee=118,
    MarqueeToothed=119,
    Moons=120,
    Mosaic=121,
    MusicNotes=122,
    Northwest=123,
    Ovals=124,
    Packages=125,
    PalmsBlack=126,
    PalmsColor=127,
    PaperClips=128,
    Papyrus=129,
    PartyFavor=130,
    PartyGlass=131,
    Pencils=132,
    People=133,
    PeopleHats=134,
    PeopleWaving=135,
    Poinsettias=136,
    PostageStamp=137,
    Pumpkin1=138,
    PushPinNote1=139,
    PushPinNote2=140,
    Pyramids=141,
    PyramidsAbove=142,
    Quadrants=143,
    Rings=144,
    Safari=145,
    Sawtooth=146,
    SawtoothGray=147,
    ScaredCat=148,
    Seattle=149,
    ShadowedSquares=150,
    SharksTeeth=151,
    ShorebirdTracks=152,
    Skyrocket=153,
    SnowflakeFancy=154,
    Snowflakes=155,
    Sombrero=156,
    Southwest=157,
    Stars=158,
    Stars3d=159,
    StarsBlack=160,
    StarsShadowed=161,
    StarsTop=162,
    Sun=163,
    Swirligig=164,
    TornPaper=165,
    TornPaperBlack=166,
    Trees=167,
    TriangleParty=168,
    Triangles=169,
    Tribal1=170,
    Tribal2=171,
    Tribal3=172,
    Tribal4=173,
    Tribal5=174,
    Tribal6=175,
    TwistedLines1=176,
    TwistedLines2=177,
    Vine=178,
    Waveline=179,
    WeavingAngles=180,
    WeavingBraid=181,
    WeavingRibbon=182,
    WeavingStrips=183,
    WhiteFlowers=184,
    Woodwork=185,
    XIllusions=186,
    ZanyTriangles=187,
    ZigZag=188,
    ZigZagStitch=189,
    Nil=-1
}
/**
 * Contains the settings to define the table cell formatting.
 */
interface TableCellFormattingSettings {
    /**
     * Gets or sets a table cell's preferred width.
     * Value: A <see cref="TableWidthUnit" /> object specifying the preferred cell width.
     */
    preferredWidth: TableWidthUnit;
    /**
     * Gets or sets the vertical alignment of a table cell's content.
     * Value: One the <see cref="TableCellVerticalAlignment" /> values.
     */
    verticalAlignment: any;
    /**
     * Gets or sets a value specifying whether text is wrapped in a table cell.
     * Value: true if text is wrapped; false if text is not wrapped.
     */
    noWrap: boolean;
    /**
     * Gets or sets a table cell's left margin.
     * Value: An integer value specifying the left margin.
     */
    marginLeft: number;
    /**
     * Gets or sets a table cell's right margin.
     * Value: An integer value specifying the right margin.
     */
    marginRight: number;
    /**
     * Gets or sets a table cell's top margin.
     * Value: An integer value specifying the top margin.
     */
    marginTop: number;
    /**
     * Gets or sets a table cell's bottom margin.
     * Value: An integer value specifying the bottom margin.
     */
    marginBottom: number;
    /**
     * Gets or sets a value specifying whether a table cell's margins are inherited from the table level settings.
     * Value: true to inherit table level margins; false to use a table cell's own margin settings.
     */
    marginsSameAsTable: boolean;
}
declare enum TableCellVerticalAlignment {
    Top=0,
    Both=1,
    Center=2,
    Bottom=3
}
/**
 * Contains the settings to format a table.
 */
interface TableFormattingSettings {
    /**
     * Gets or sets the preferred width of cells in the table.
     * Value: A <see cref="TableWidthUnit" /> object specifying the width.
     */
    preferredWidth: TableWidthUnit;
    /**
     * Gets or sets the alignment of table rows.
     * Value: One of the <see cref="TableRowAlignment" /> values.
     */
    alignment: any;
    /**
     * Gets or sets the table's left indent.
     * Value: An integer value specifying the indent.
     */
    indent: number;
    /**
     * Gets or sets the spacing between table cells.
     * Value: An integer value specifying the spacing.
     */
    spacingBetweenCells: number;
    /**
     * Gets or sets a value specifying whether spacing is allowed between table cells.
     * Value: true, to allow spacing; otherwise, false.
     */
    allowSpacingBetweenCells: boolean;
    /**
     * Gets or sets a value that specifying whether to allow automatic resizing of table cells to fit their contents.
     * Value: true, to allow automatic resizing; otherwise, false.
     */
    resizeToFitContent: boolean;
    /**
     * Gets or sets the default left margin for cells in the table.
     * Value: An integer value specifying the margin value.
     */
    defaultCellMarginLeft: number;
    /**
     * Gets or sets the default right margin for cells in the table.
     * Value: An integer value specifying the margin value.
     */
    defaultCellMarginRight: number;
    /**
     * Gets or sets the default top margin for cells in the table.
     * Value: An integer value specifying the margin value.
     */
    defaultCellMarginTop: number;
    /**
     * Gets or sets the default bottom margin for cells in the table.
     * Value: An integer value specifying the margin value.
     */
    defaultCellMarginBottom: number;
}
/**
 * Contains settings defining the table width's measurement units and value.
 */
interface TableWidthUnit {
    /**
     * Gets or sets the table width value.
     * Value: An integer value specifying the table width.
     */
    value: number;
    /**
     * Gets or sets the unit type for the table width.
     * Value: One of the <see cref="TableWidthUnitType" /> values.
     */
    type: any;
}
/**
 * Contains settings defining the table height's measurement units and value.
 */
interface TableHeightUnit {
    /**
     * Gets or sets the table height value.
     * Value: An integer value specifying the table height.
     */
    value: number;
    type: any;
}
declare enum TableHeightUnitType {
    Minimum=0,
    Auto=1,
    Exact=2
}
declare enum TableRowAlignment {
    Both=0,
    Center=1,
    Distribute=2,
    Left=3,
    NumTab=4,
    Right=5
}
declare enum TableWidthUnitType {
    Nil=0,
    Auto=1,
    FiftiethsOfPercent=2,
    ModelUnits=3
}
/**
 * A command to change the font name of characters in a selected range.
 */
interface ChangeFontNameCommand extends CommandBase {
    /**
     * Executes the ChangeFontNameCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontName A string specifying font name.
     */
    execute(fontName: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the font size of characters in a selected range.
 */
interface ChangeFontSizeCommand extends CommandBase {
    /**
     * Executes the ChangeFontSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontSize An integer number specifying font size.
     */
    execute(fontSize: number): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to increase the font size of characters in a selected range to the closest larger predefined value.
 */
interface IncreaseFontSizeCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to decrease the font size of characters in a selected range to the closest smaller predefined value.
 */
interface DecreaseFontSizeCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to convert the selected text to upper case.
 */
interface MakeTextUpperCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextUpperCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to convert the selected text to lower case.
 */
interface MakeTextLowerCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextLowerCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to capitalize each word in the selected sentence.
 */
interface CapitalizeEachWordTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CapitalizeEachWordTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to toggle the case for each character - upper case becomes lower, lower case becomes upper.
 */
interface ToggleTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ToggleTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the bold formatting of characters in a selected range.
 */
interface ChangeFontBoldCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontBoldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontBoldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontBold true to apply bold formatting to the text, false to remove bold formatting.
     */
    execute(fontBold: boolean): boolean;
}
/**
 * A command to change the italic formatting of characters in a selected range.
 */
interface ChangeFontItalicCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontItalicCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontItalicCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontItalic true to apply italic formatting to the text, false to remove italic formatting.
     */
    execute(fontItalic: boolean): boolean;
}
/**
 * A command to change the underline formatting of characters in a selected range.
 */
interface ChangeFontUnderlineCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontUnderlineCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontUnderlineCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontUnderline true to apply underline formatting to the text, false to remove underline formatting.
     */
    execute(fontUnderline: boolean): boolean;
}
/**
 * A command to change the strikeout formatting of characters in a selected range.
 */
interface ChangeFontStrikeoutCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontStrikeoutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontStrikeoutCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontStrikeout true to apply strikeout formatting to the text, false to remove strikeout formatting.
     */
    execute(fontStrikeout: boolean): boolean;
}
/**
 * A command to change the superscript formatting of characters in a selected range.
 */
interface ChangeFontSuperscriptCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontSuperscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontSuperscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontSuperscript true to apply superscript formatting to the text, false to remove superscript formatting.
     */
    execute(fontSuperscript: boolean): boolean;
}
/**
 * A command to change the subscript formatting of characters in the selected range.
 */
interface ChangeFontSubscriptCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontSubscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ChangeFontSubscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fontSubscript true to apply subscript formatting to the text, false to remove subscript formatting.
     */
    execute(fontSubscript: boolean): boolean;
}
/**
 * A command to change the font color of characters in a selected range.
 */
interface ChangeFontForeColorCommand extends CommandBase {
    /**
     * Executes the ChangeFontForeColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param color A string specifying font color. May be specified as color name or hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to change the background color of characters in a selected range.
 */
interface ChangeFontBackColorCommand extends CommandBase {
    /**
     * Executes the ChangeFontBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param color A string specifying highlighting color. May be specified as color name or hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to reset the selected text's formatting to default.
 */
interface ClearFormattingCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ClearFormattingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the selected range's style.
 */
interface ChangeStyleCommand extends CommandBase {
    /**
     * Executes the ChangeStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param style A StyleBase object specifying the selected range's style.
     */
    execute(style: StyleBase): boolean;
    /**
     * Executes the ChangeStyleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param styleName A string specifying the name of applying style.
     * @param isParagraphStyle true to apply style to paragraph, false to apply style to character.
     */
    execute(styleName: string, isParagraphStyle: boolean): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * A command to invoke the Font dialog allowing end-users to change the font, size and style of the selected text.
 */
interface OpenFontFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFontFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to convert the text of all selected sentences to sentence case.
 */
interface MakeTextSentenceCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextSentenceCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to switch the text case at the current position in the document.
 */
interface SwitchTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SwitchTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
}
/**
 * A command to change the font formatting of characters in a selected range.
 */
interface ChangeFontFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeFontFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param settings A  FontFormattingSettings object specifying font formatting settings.
     */
    execute(settings: FontFormattingSettings): boolean;
    /**
     * Gets information about the command state.
     */
    getState(): any;
}
/**
 * Contains settings to define the font formatting.
 */
interface FontFormattingSettings {
    /**
     * Gets or sets the character(s) font name.
     * Value: A string value specifying the font name.
     */
    fontName: string;
    /**
     * Gets or sets the character(s) font size.
     * Value: An integer value specifying the font size.
     */
    size: number;
    /**
     * Gets or sets the foreground color of characters.
     * Value: A string value specifying the foreground color.
     */
    foreColor: string;
    /**
     * Gets or sets the character background color.
     * Value: A string value specifying the background color.
     */
    backColor: string;
    /**
     * Gets or sets the type of underline applied to the character(s).
     * Value: true, if characters are underlined; otherwise, false.
     */
    underline: boolean;
    /**
     * Gets or sets the color of the underline for the specified characters.
     * Value: A string value specifying the underline color.
     */
    underlineColor: string;
    /**
     * Gets or sets whether the character formatting is bold.
     * Value: true, if characters are bold; otherwise, false.
     */
    bold: boolean;
    /**
     * Gets or sets a value indicating whether a character(s) is italicized.
     * Value: true, if characters are italicized; otherwise, false.
     */
    italic: boolean;
    boolean: boolean;
    /**
     * Gets or sets whether only word characters are underlined.
     * Value: true to underline only characters in words; false to underline all characters.
     */
    underlineWordsOnly: boolean;
    /**
     * Gets or sets a value specifying character script formatting.
     * Value: One of the <see cref="CharacterFormattingScript" /> values.
     */
    script: any;
    /**
     * Gets or sets a value indicating whether all characters are capital letters.
     * Value: true, if all characters are capitalized; otherwise, false.
     */
    allCaps: boolean;
    /**
     * Gets or sets a value indicating whether a character(s) is hidden.
     * Value: true, if characters are hidden; otherwise, false.
     */
    hidden: boolean;
}
declare enum CharacterFormattingScript {
    Normal=0,
    Subscript=1,
    Superscript=2
}
/**
 * A command to toggle the horizontal ruler's visibility.
 */
interface ShowHorizontalRulerCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowHorizontalRulerCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the ShowHorizontalRulerCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param show true to display the horizontal ruler, false to hide the horizontal ruler.
     */
    execute(show: boolean): boolean;
}
/**
 * A command to toggle the fullscreen mode.
 */
interface SetFullscreenCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetFullscreenCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     */
    execute(): boolean;
    /**
     * Executes the SetFullscreenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
     * @param fullscreen true to apply fullscreen mode, false to remove fullscreen mode.
     */
    execute(fullscreen: boolean): boolean;
}
/**
 * Holds the information that determines what action types can be performed for appointments.
 */
interface ASPxClientAppointmentFlags {
    /**
     * Gets a value that specifies whether an end-user is allowed to delete appointments.
     * Value: true if an end-user can delete appointments; otherwise, false. Default is true.
     */
    allowDelete: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to edit appointments.
     * Value: true if the end-user can edit appointments; otherwise, false.
     */
    allowEdit: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to change the time boundaries of appointments.
     * Value: true if appointment resizing is allowed; otherwise, false. Default is true.
     */
    allowResize: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to copy appointments.
     * Value: true if a user can copy appointments; otherwise, false. Default is true.
     */
    allowCopy: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to drag and drop appointments to another time slot or date.
     * Value: true if the user can drag and drop appointments; otherwise, false.
     */
    allowDrag: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to drag and drop appointments between resources.
     * Value: true if the end-user can drag appointment from one resource to another; otherwise, false.
     */
    allowDragBetweenResources: boolean;
    /**
     * Gets a value that specifies whether an inplace editor can be activated for an appointment.
     * Value: true if an inplace editor is activated; otherwise, false. Default is true.
     */
    allowInplaceEditor: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to share the schedule time between two or more appointments.
     * Value: true if appointments with the same schedule time are allowed; otherwise, false. Default is true.
     */
    allowConflicts: boolean;
}
/**
 * Represents a client-side equivalent of the Appointment class.
 */
interface ASPxClientAppointment {
    /**
     * Gets the time interval of the appointment for client-side scripting.
     * Value: An ASPxClientTimeInterval object, representing the interval assigned to an appointment.
     */
    interval: ASPxClientTimeInterval;
    /**
     * Gets the identifiers of resources associated with the appointment for client-side scripting.
     * Value: An array of string representations for resource identifiers.
     */
    resources: string[];
    /**
     * Gets the ID of an appointment for use in client-side scripts.
     * Value: A string representation of the appointment ID.
     */
    appointmentId: string;
    /**
     * Gets the type of appointment for use in client-side scripts.
     * Value: An ASPxAppointmentType enumeration member, representing the appointment's type.
     */
    appointmentType: ASPxAppointmentType;
    /**
     * Gets the index of the availability status object associated with the appointment.
     * Value: An integer value that specifies the index of the corresponding Statuses collection.
     */
    statusIndex: number;
    /**
     * Gets  the index of the label object associated with the appointment for client-side scripting.
     * Value: An integer value that specifies the index of the corresponding Labels collection.
     */
    labelIndex: number;
    /**
     * Gets the client appointment value that is equivalent in meaning to the Subject property.
     * Value: A string representing the appointment subject.
     */
    subject: string;
    /**
     * Gets the client appointment value that is equivalent in meaning to the Description property.
     * Value: A string, representing the description for an appointment.
     */
    description: string;
    /**
     * Gets the client appointment value that is equivalent in meaning to the Location property.
     * Value: A string representing the appointment location.
     */
    location: string;
    /**
     * Gets the client appointment value that is equivalent in meaning to the AllDay property.
     * Value: true indicates the all-day appointment; otherwise, false.
     */
    allDay: boolean;
    /**
     * Adds a resource to the collection of resources associated with the client appointment.
     * @param resourceId An object, representing the resource id.
     */
    AddResource(resourceId: Object): void;
    /**
     * Gets the resource associated with the client-side appointment by its index.
     * @param index An integer, representing an index of a resource in a resource collection associated with the current appointment.
     */
    GetResource(index: number): Object;
    /**
     * Sets the property value of the client appointment, corresponding to the Start appointment property.
     * @param start A JavaScript Date object representing the appointment start.
     */
    SetStart(start: Date): void;
    /**
     * Gets the property value of the client appointment corresponding to the Start appointment property.
     */
    GetStart(): Date;
    /**
     * Sets the property value of the client appointment, corresponding to the End appointment property.
     * @param end A JavaScript Date object representing the end of the appointment.
     */
    SetEnd(end: Date): void;
    /**
     * Gets the property value of the client appointment corresponding to the End appointment property.
     */
    GetEnd(): Date;
    /**
     * Sets the property value of the client appointment, corresponding to the Duration appointment property.
     * @param duration A TimeSpan object representing the appointment duration.
     */
    SetDuration(duration: any): void;
    /**
     * Gets the property value of the client appointment corresponding to the Duration appointment property.
     */
    GetDuration(): number;
    /**
     * Sets the ID of the client appointment.
     * @param id An object representing the appointment identifier.
     */
    SetId(id: Object): void;
    /**
     * Gets the ID of the client appointment.
     */
    GetId(): Object;
    /**
     * Specifies the type of the current client appointment.
     * @param type An ASPxAppointmentType enumeration value indicating the appointment type.
     */
    SetAppointmentType(type: ASPxAppointmentType): void;
    /**
     * Gets the type of the client appointment.
     */
    GetAppointmentType(): ASPxAppointmentType;
    /**
     * Sets the property value of the client appointment, corresponding to the StatusId appointment property.
     * @param statusId An integer representing the index in the AppointmentStatusCollection.
     */
    SetStatusId(statusId: number): void;
    /**
     * Gets the property value of the client appointment corresponding to the StatusId appointment property.
     */
    GetStatusId(): number;
    /**
     * Sets the property value of the client appointment, corresponding to the LabelId appointment property.
     * @param statusId An integer representing the index of the label in the Labels label collection.
     */
    SetLabelId(statusId: number): void;
    /**
     * Gets the property value of the client appointment corresponding to the LabelId appointment property.
     */
    GetLabelId(): number;
    /**
     * Sets the property value of the client appointment, corresponding to the Subject appointment property.
     * @param subject A string containing the appointment subject.
     */
    SetSubject(subject: string): void;
    /**
     * Gets the property value of the client appointment corresponding to the Subject appointment property.
     */
    GetSubject(): string;
    /**
     * Sets the property value of the client appointment, corresponding to the Description appointment property.
     * @param description A string representing the appointment description.
     */
    SetDescription(description: string): void;
    /**
     * Gets the property value of the client appointment corresponding to the Description appointment property.
     */
    GetDescription(): string;
    /**
     * Sets the property value of the client appointment, corresponding to the Location appointment property.
     * @param location A string representing the appointment location.
     */
    SetLocation(location: string): void;
    /**
     * Gets the property value of the client appointment corresponding to the Location appointment property.
     */
    GetLocation(): string;
    /**
     * Specifies the property value of the client appointment corresponding to the AllDay appointment property.
     * @param allDay true to indicate the all-day appointment; otherwise, false.
     */
    SetAllDay(allDay: boolean): void;
    /**
     * Gets the property value of the client appointment corresponding to the AllDay appointment property.
     */
    GetAllDay(): boolean;
    /**
     * Gets the appointment that is the RecurrencePattern for the current appointment.
     */
    GetRecurrencePattern(): ASPxClientAppointment;
    /**
     * Sets the property value of the client appointment, corresponding to the RecurrenceInfo appointment property.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object representing the recurrence information.
     */
    SetRecurrenceInfo(recurrenceInfo: ASPxClientRecurrenceInfo): void;
    /**
     * Gets the property value of the client appointment corresponding to the RecurrenceInfo appointment property.
     */
    GetRecurrenceInfo(): ASPxClientRecurrenceInfo;
}
/**
 * A client point object.
 */
interface ASPxClientPoint {
    /**
     * Gets the point's X-coordinate.
     */
    GetX(): number;
    /**
     * Gets the point's Y-coordinate.
     */
    GetY(): number;
}
/**
 * A client rectangle object.
 */
interface ASPxClientRect {
    /**
     * Gets the X-coordinate of the rectangle's left edge.
     */
    GetLeft(): number;
    /**
     * Gets the X-coordinate of the rectangle's right edge.
     */
    GetRight(): number;
    /**
     * Gets the Y-coordinate of the rectangle's top edge.
     */
    GetTop(): number;
    /**
     * Gets the Y-coordinate of the rectangle's bottom edge.
     */
    GetBottom(): number;
    /**
     * Gets the rectangle's width.
     */
    GetWidth(): number;
    /**
     * Gets the rectangle's height.
     */
    GetHeight(): number;
}
/**
 * Contains information defining the occurrences of a recurring client appointment.
 */
interface ASPxClientRecurrenceInfo {
    /**
     * Sets the recurrence start date.
     * @param start A JavaScript date object value that specifies the start date for the recurrence.
     */
    SetStart(start: Date): void;
    /**
     * Gets the recurrence start date.
     */
    GetStart(): Date;
    /**
     * Sets the recurrence end date.
     * @param end A JavaScript Date object that specifies the end date for the recurrence.
     */
    SetEnd(end: Date): void;
    /**
     * Gets the recurrence end date.
     */
    GetEnd(): Date;
    /**
     * Sets the duration of the recurrence.
     * @param duration A TimeSpan object representing the duration.
     */
    SetDuration(duration: any): void;
    /**
     * Gets the duration of the recurrence.
     */
    GetDuration(): number;
    /**
     * Sets the time base for the frequency of the corresponding appointment occurrences.
     * @param type An ASPxClientRecurrenceType enumeration value that specifies the recurrence's frequency type.
     */
    SetRecurrenceType(type: ASPxClientRecurrenceType): void;
    /**
     * Gets the time base for the frequency of the corresponding appointment reoccurrence.
     */
    GetRecurrenceType(): ASPxClientRecurrenceType;
    /**
     * Sets the day/days in a week that the corresponding appointment recurs on.
     * @param weekDays The ASPxClientWeekDays enumeration value specifying the day/days in a week.
     */
    SetWeekDays(weekDays: ASPxClientWeekDays): void;
    /**
     * Gets the day/days in a week on which the corresponding appointment occurs.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Sets how many times the appointment occurs.
     * @param occurrenceCount An integer value that specifies how many times the appointment occurs.
     */
    SetOccurrenceCount(occurrenceCount: number): void;
    /**
     * Gets how many times the appointment occurs.
     */
    GetOccurrenceCount(): number;
    /**
     * Sets the frequency with which the corresponding appointment occurs (dependent on the recurrence Type).
     * @param periodicity An integer value that specifies the frequency with which the corresponding appointment occurs.
     */
    SetPeriodicity(periodicity: number): void;
    /**
     * Gets the frequency with which the corresponding appointment reoccurs (dependent on the recurrence Type).
     */
    GetPeriodicity(): number;
    /**
     * Sets the ordinal number of a day within a defined month.
     * @param dayNubmer A positive integer value that specifies the day number within a month.
     */
    SetDayNumber(dayNubmer: number): void;
    /**
     * Gets the ordinal number of a day within a defined month.
     */
    GetDayNumber(): number;
    /**
     * Sets the occurrence number of the week in a month for the recurrence pattern.
     * @param weekOfMonth A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
     */
    SetWeekOfMonth(weekOfMonth: ASPxClientWeekOfMonth): void;
    /**
     * Gets the occurrence number of the week in a month for the recurrence pattern.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
    /**
     * Sets the month (as a number) on which the corresponding appointment occurs.
     * @param month A positive integer value that specifies the month's number.
     */
    SetMonth(month: number): void;
    /**
     * Gets the month (as a number) on which the corresponding appointment recurs.
     */
    GetMonth(): number;
    /**
     * Gets the type of the recurrence range.
     */
    GetRange(): ASPxClientRecurrenceRange;
    /**
     * Sets the type of the recurrence range.
     * @param range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
     */
    SetRange(range: ASPxClientRecurrenceRange): void;
}
/**
 * Contains types of the recurrence range.
 */
interface ASPxClientRecurrenceRange {
    /**
     * A recurring appointment will not have an end date, i.e. infinite recurrence
     * Value: The "NoEndDate" string.
     */
    NoEndDate: string;
    /**
     * A recurring appointment will end after its recurrence count exceeds the value specified by the SetOccurrenceCount method.
     * Value: The "OccurrenceCount" string.
     */
    OccurrenceCount: string;
    /**
     * A recurring appointment will end after the date specified by the SetEnd method.
     * Value: The "EndByDate" string.
     */
    EndByDate: string;
}
/**
 * Contains recurrence types.
 */
interface ASPxClientRecurrenceType {
    /**
     * The recurring appointment occurs on a daily basis.
     * Value: The "Daily" string.
     */
    Daily: string;
    /**
     * The recurring appointment reoccurs on a weekly basis.
     * Value: The "Weekly" string.
     */
    Weekly: string;
    /**
     * The recurring appointment reoccurs on a monthly basis.
     * Value: The "Monthly" string.
     */
    Monthly: string;
    /**
     * The recurring appointment reoccurs on an yearly basis.
     * Value: The "Yearly" string.
     */
    Yearly: string;
    /**
     * The recurring appointment occurs on an hourly base.
     * Value: The "Hourly" string.
     */
    Hourly: string;
}
/**
 * Contains days and groups of days for use in recurrence patterns.
 */
interface ASPxClientWeekDays {
    /**
     * Specifies Sunday.
     * Value: The integer 1 value.
     */
    Sunday: number;
    /**
     * Specifies Monday.
     * Value: The integer 2 value.
     */
    Monday: number;
    /**
     * Specifies Tuesday.
     * Value: The integer 4 value.
     */
    Tuesday: number;
    /**
     * Specifies Wednesday.
     * Value: The integer 8 value.
     */
    Wednesday: number;
    /**
     * Specifies Thursday.
     * Value: The integer 16 value.
     */
    Thursday: number;
    /**
     * Specifies Friday.
     * Value: The integer 32 value.
     */
    Friday: number;
    /**
     * Specifies Saturday.
     * Value: The integer 64 value.
     */
    Saturday: number;
    /**
     * Specifies Saturday and Sunday.
     * Value: The integer 65 value.
     */
    WeekendDays: number;
    /**
     * Specifies work days (Monday, Tuesday, Wednesday, Thursday and Friday).
     * Value: The integer 62 value.
     */
    WorkDays: number;
    /**
     * Specifies every day of the week.
     * Value: The integer 127 value.
     */
    EveryDay: number;
}
/**
 * Contains number of weeks in a month in which the event occurs.
 */
interface ASPxClientWeekOfMonth {
    /**
     * There isn't any recurrence rule based on the weeks in a month.
     * Value: The integer 0 value.
     */
    None: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the first week in the month.
     * Value: The integer 1 value.
     */
    First: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the second week in the month.
     * Value: The integer 2 value.
     */
    Second: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the third week in the month.
     * Value: The integer 3 value.
     */
    Third: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the fourth week in the month.
     * Value: The integer 4 value;
     */
    Fourth: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the last week in the month.
     * Value: The integer 5 value;
     */
    Last: number;
}
/**
 * Represents a client-side equivalent of the WeekDaysCheckEdit control.
 */
interface ASPxClientWeekDaysCheckEdit extends ASPxClientControl {
    /**
     * Gets the selection state of the week day check boxes.
     */
    GetValue(): ASPxClientWeekDays;
    /**
     * Gets the selection state of the week day check boxes.
     * @param value An ASPxClientWeekDays object specifying the selection state of the week day check boxes.
     */
    SetValue(value: ASPxClientWeekDays): void;
}
/**
 * Represents a client-side equivalent of the RecurrenceRangeControl.
 */
interface ASPxClientRecurrenceRangeControl extends ASPxClientControl {
    /**
     * Gets the type of the recurrence range.
     */
    GetRange(): ASPxClientRecurrenceRange;
    /**
     * Gets how many times the appointment occurs.
     */
    GetOccurrenceCount(): number;
    /**
     * Gets the recurrence end date.
     */
    GetEndDate(): Date;
    /**
     * Sets the type of the recurrence range.
     * @param range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
     */
    SetRange(range: ASPxClientRecurrenceRange): void;
    /**
     * Sets how many times the appointment occurs.
     * @param occurrenceCount An integer value that specifies how many times the appointment occurs.
     */
    SetOccurrenceCount(occurrenceCount: number): void;
    /**
     * Sets the recurrence end date.
     * @param date A JavaScript Date object that specifies the end date for the recurrence.
     */
    SetEndDate(date: Date): void;
}
/**
 * A base for client equivalents of recurrence controls available in the XtraScheduler library.
 */
interface ASPxClientRecurrenceControlBase extends ASPxClientControl {
    /**
     * Returns an object providing access to the ASPxClientRecurrenceControlBase control's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientRecurrenceControlBase control.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the DailyRecurrenceControl - a control for specifying the daily recurrence.
 */
interface ASPxClientDailyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientDailyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientDailyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the WeeklyRecurrenceControl.
 */
interface ASPxClientWeeklyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientWeeklyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientWeeklyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the MonthlyRecurrenceControl.
 */
interface ASPxClientMonthlyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientMonthlyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientMonthlyRecurrenceControll.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the YearlyRecurrenceControl.
 */
interface ASPxClientYearlyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientYearlyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientYearlyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * An object providing access to an ASPxClientRecurrenceControlBase control's editor values.
 */
interface DefaultRecurrenceRuleValuesAccessor {
    /**
     * Get the frequency with which the appointment occurs with respect to the appointment's recurrence type.
     */
    GetPeriodicity(): number;
    /**
     * Gets the number of the month's day in which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets or sets the month's number.
     */
    GetMonth(): number;
    /**
     * Gets the days of the week to which a weekly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets the number of the week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * An object providing access to an ASPxClientDailyRecurrenceControl's editor values.
 */
interface DailyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Gets the number of days between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week to which a daily recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
}
/**
 * An object providing access to an ASPxClientWeeklyRecurrenceControl's editor values.
 */
interface WeeklyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Gets the number of weeks between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week to which a weekly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
}
/**
 * An object providing access to an ASPxClientMonthlyRecurrenceControl's editor values.
 */
interface MonthlyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Gets the number of the month's day in which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets the number of months between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week to which a monthly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets the number of the week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * An object providing access to an ASPxClientYearlyRecurrenceControl's editor values.
 */
interface YearlyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Gets the number of the month's day in which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets or sets the month's number.
     */
    GetMonth(): number;
    /**
     * Gets the days of the week to which a yearly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets or sets the number of a week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * Provides base functionality for ASPxClientScheduler's forms.
 */
interface ASPxClientFormBase {
    /**
     * Occurs when the form has been closed.
     */
    FormClosed: ASPxClientEvent<ASPxClientEventHandler<ASPxClientFormBase>>;
    /**
     * Closes the form.
     */
    Close(): void;
    /**
     * Sets the visibility state of the specified form element.
     * @param element An object specifying the element whose visibility state should be changed.
     * @param isVisible true to display the element; false to hide the element.
     */
    SetVisibleCore(element: Object, isVisible: boolean): void;
}
/**
 * Represents a client-side equivalent of the RecurrenceTypeEdit.
 */
interface ASPxClientRecurrenceTypeEdit extends ASPxClientRadioButtonList {
    /**
     * Gets the selected recurrence type.
     */
    GetRecurrenceType(): ASPxClientRecurrenceType;
    /**
     * Sets the selected recurrence type.
     * @param recurrenceType An ASPxClientRecurrenceType enumeration value.
     */
    SetRecurrenceType(recurrenceType: ASPxClientRecurrenceType): void;
}
/**
 * Contains lists of property names for different appointment types.
 */
interface AppointmentPropertyNames {
    /**
     * Gets the list of properties characteristic for appointments of the Normal type.
     * Value: A string array which is composed of the appointment property names.
     */
    Normal: string;
    /**
     * Gets the list of properties characteristic for appointments of the Pattern type.
     * Value: A string array which is composed of the appointment property names.
     */
    Pattern: string;
}
/**
 * Represents the client-side equivalent of the TimeInterval class.
 */
interface ASPxClientTimeInterval {
    /**
     * Gets a value indicating if the time interval is All-Day.
     */
    GetAllDay(): boolean;
    /**
     * Sets a value specifying if the time interval is All-Day.
     * @param allDayValue true, if this is an all-day time interval; otherwise, false.
     */
    SetAllDay(allDayValue: boolean): void;
    /**
     * Client-side function that returns the start time of the interval.
     */
    GetStart(): Date;
    /**
     * Client-side function that returns the duration of the specified time interval.
     */
    GetDuration(): number;
    /**
     * Client-side function that returns the end time of the interval.
     */
    GetEnd(): Date;
    /**
     * Client-side function that sets the start time of the interval.
     * @param value A DateTime value, representing the beginning of the interval.
     */
    SetStart(value: Date): void;
    /**
     * Client-side function that returns the duration of the specified time interval.
     * @param value A TimeSpan  object, representing the duration of the time period.
     */
    SetDuration(value: any): void;
    /**
     * Client-side function that sets the end time of the interval.
     * @param value A DateTime value, representing the end of the interval.
     */
    SetEnd(value: Date): void;
    /**
     * Determines whether the specified object is equal to the current ASPxClientTimeInterval instance.
     * @param interval The object to compare with the current object.
     */
    Equals(interval: ASPxClientTimeInterval): boolean;
    /**
     * Checks if the current time interval intersects with the specified time interval.
     * @param interval A ASPxClientTimeInterval object which represents the time interval to be checked.
     */
    IntersectsWith(interval: ASPxClientTimeInterval): boolean;
    /**
     * Checks if the current time interval intersects with the specified time interval. The boundaries of the time intervals are excluded from the check.
     * @param interval A ASPxClientTimeInterval object which represents the time interval to be checked.
     */
    IntersectsWithExcludingBounds(interval: ASPxClientTimeInterval): boolean;
    /**
     * Client-side function that determines whether the specified interval is contained within the current one.
     * @param interval An ASPxClientTimeInterval object, representing the time interval to check.
     */
    Contains(interval: ASPxClientTimeInterval): boolean;
}
/**
 * Holds action types for the client-side Refresh method.
 */
interface ASPxClientSchedulerRefreshAction {
    /**
     * Gets the value of the action parameter which initiates a simple reload of the control.
     * Value: An integer representing the action parameter value.
     */
    None: number;
    /**
     * Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its data-dependent satellites.
     * Value: An integer representing the action parameter value.
     */
    VisibleIntervalChanged: number;
    /**
     * Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its satellite View controls.
     * Value: An integer representing the action parameter value.
     */
    ActiveViewTypeChanged: number;
}
/**
 * Contains methods allowing you to perform or cancel an operation.
 */
interface ASPxClientAppointmentOperation {
    /**
     * Passes parameters to the corresponding callback function to accomplish the operation.
     */
    Apply(): void;
    /**
     * Cancels the operation.
     */
    Cancel(): void;
}
/**
 * Represents the client-side equivalent of the ASPxScheduler control.
 */
interface ASPxClientScheduler extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientScheduler.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side when the Scheduler control is about to change its active view.
     */
    ActiveViewChanging: ASPxClientEvent<ActiveViewChangingEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event. Occurs after the active view of the ASPxScheduler has been changed.
     */
    ActiveViewChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when the end-user clicks an appointment.
     */
    AppointmentClick: ASPxClientEvent<AppointmentClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when the end-user double clicks on an appointment.
     */
    AppointmentDoubleClick: ASPxClientEvent<AppointmentClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side when the user selects an appointment.
     */
    AppointmentsSelectionChanged: ASPxClientEvent<AppointmentsSelectionEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client side when the time cell selection is changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side when the time cell selection is about to change.
     */
    SelectionChanging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client side when the  time interval of the scheduling area is changed.
     */
    VisibleIntervalChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when one of  More Buttons is clicked.
     */
    MoreButtonClicked: ASPxClientEvent<MoreButtonClickedEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs when a popup menu item is clicked.
     */
    MenuItemClicked: ASPxClientEvent<MenuItemClickedEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs after an appointment has been dragged and dropped.
     */
    AppointmentDrop: ASPxClientEvent<AppointmentDropEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs when an appointment is resized.
     */
    AppointmentResize: ASPxClientEvent<AppointmentResizeEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that fires before an appointment is deleted.
     */
    AppointmentDeleting: ASPxClientEvent<ASPxClientAppointmentDeletingEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side scripting  method that gets the active View.
     */
    GetActiveViewType(): ASPxSchedulerViewType;
    /**
     * Client-side scripting  method to change the ASPxScheduler's active View.
     * @param value A ASPxSchedulerViewType enumeration value, representing a view type to set.
     */
    SetActiveViewType(value: ASPxSchedulerViewType): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Client-side scripting method which initiates a round trip to the server so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
     * @param refreshAction An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
     */
    Refresh(refreshAction: ASPxClientSchedulerRefreshAction): void;
    /**
     * Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
     */
    GetGroupType(): ASPxSchedulerGroupType;
    /**
     * Client-side scripting method which raises the callback command to set the GroupType.
     * @param value An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
     */
    SetGroupType(value: ASPxSchedulerGroupType): void;
    /**
     * Client-side method that navigates the scheduler to the current system date.
     */
    GotoToday(): void;
    /**
     * Client-side scripting method which raises the GotoDate callback command.
     * @param date A DateTime value specifying the destination time.
     */
    GotoDate(date: Date): void;
    /**
     * Client-side function which slides the visible interval one time span back.
     */
    NavigateBackward(): void;
    /**
     * Client-side function which slides the visible interval one time span forward.
     */
    NavigateForward(): void;
    /**
     * Client-side method which raises the callback command to change the ClientTimeZoneId of the scheduler.
     * @param timeZoneId A string, a time zone identifier which is valid for the System.TimeZoneInfo.Id property.
     */
    ChangeTimeZoneId(timeZoneId: string): void;
    /**
     * Displays a Selection ToolTip on a position given by the specified coordinates.
     * @param x An integer representing the X-coordinate.
     * @param y An integer representing the Y-coordinate.
     */
    ShowSelectionToolTip(x: number, y: number): void;
    /**
     * Client-side function that returns the time interval, selected in the scheduler.
     */
    GetSelectedInterval(): ASPxClientTimeInterval;
    /**
     * Client-side function that returns the ResourceId of selected time cell's resource.
     */
    GetSelectedResource(): string;
    /**
     * Client-side function that returns an appointment with the specified ID.
     * @param id An appointment's identifier.
     */
    GetAppointmentById(id: Object): ASPxClientAppointment;
    /**
     * Client-side function that returns the id's of selected appointments.
     */
    GetSelectedAppointmentIds(): string[];
    /**
     * Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
     * @param aptId An appointment's identifier.
     */
    DeselectAppointmentById(aptId: Object): void;
    /**
     * Client-side function that selects an appointment with the specified ID.
     * @param aptId An appointment's identifier.
     */
    SelectAppointmentById(aptId: Object): void;
    /**
     * Enables obtaining appointment property values in a client-side script. Executes the callback command with the AppointmentData identifier.
     * @param aptId An integer, representing the appointment ID.
     * @param propertyNames An array of strings, representing the appointment properties to query.
     * @param onCallBack A handler of a function which will receive and process the properties' values.
     */
    GetAppointmentProperties(aptId: number, propertyNames: string[], onCallBack: Object): string[];
    /**
     * Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
     * @param clientAppointment An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
     * @param propertyNames An array of strings, that are the names of appointment properties to query.
     * @param onCallBack A handler of a function executed after a callback.
     */
    RefreshClientAppointmentProperties(clientAppointment: ASPxClientAppointment, propertyNames: string[], onCallBack: Object): void;
    /**
     * Client-side function that invokes the editing form for the appointment specified by its client ID.
     * @param aptClientId A string, representing the appointment client identifier.
     */
    ShowAppointmentFormByClientId(aptClientId: string): void;
    /**
     * Client-side function that invokes the editing form for the appointment specified by its storage identifier.
     * @param aptServerId A string, representing the appointment identifier.
     */
    ShowAppointmentFormByServerId(aptServerId: string): void;
    /**
     * Sets the time of the day corresponding to the start of the topmost displayed time cell row.
     * @param duration An integer, representing the number of milliseconds passed since the start of the day.
     * @param viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
     */
    SetTopRowTime(duration: number, viewType: ASPxSchedulerViewType): void;
    /**
     * Sets the time of the day corresponding to the start of the topmost displayed time cell row.
     * @param duration An integer, representing the number of milliseconds passed since the start of the day.
     */
    SetTopRowTime(duration: number): void;
    /**
     * Gets the time of the day corresponding to the start of the topmost displayed time cell row.
     * @param viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
     */
    GetTopRowTime(viewType: ASPxSchedulerViewType): number;
    /**
     * Gets the time of day corresponding to the start of the topmost displayed time cell row.
     */
    GetTopRowTime(): number;
    /**
     * Client-side scripting method which displays the Loading Panel.
     */
    ShowLoadingPanel(): void;
    /**
     * Client-side scripting method which hides the Loading Panel from view.
     */
    HideLoadingPanel(): void;
    /**
     * Client-side method that invokes the inplace editor form to create a new appointment.
     * @param start A date object, representing the start of the new appointment.
     * @param end A date object, representing the end of the new appointment.
     */
    ShowInplaceEditor(start: Date, end: Date): void;
    /**
     * Client-side method that invokes the inplace editor form to create a new appointment.
     * @param start A date object, representing the start of the new appointment.
     * @param end A date object, representing the end of the new appointment.
     * @param resourceId An object representing the identifier of a resource associated with the new appointment.
     */
    ShowInplaceEditor(start: Date, end: Date, resourceId: string): void;
    /**
     * Client-side scripting  method to insert the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    InsertAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side scripting  method to update the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    UpdateAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side scripting  method to delete the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    DeleteAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
     */
    GetVisibleIntervals(): ASPxClientTimeInterval[];
    /**
     * Changes the container that the ASPxScheduler tooltip belongs to.
     * @param container An object that serves as the new container for the pop-up menu.
     */
    ChangeToolTipContainer(container: Object): void;
    /**
     * Changes the container that the ASPxScheduler pop-up menu belongs to.
     * @param container An object that serves as the new container for the pop-up menu.
     */
    ChangePopupMenuContainer(container: Object): void;
    /**
     * Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
     * @param container A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
     */
    ChangeFormContainer(container: Object): void;
    /**
     * Client-side scripting method that saves appointment modifications and closes the form.
     */
    AppointmentFormSave(): void;
    /**
     * Client-side scripting method that deletes the appointment being edited.
     */
    AppointmentFormDelete(): void;
    /**
     * Client-side scripting method that cancels changes and closes the appointment editing form.
     */
    AppointmentFormCancel(): void;
    /**
     * Client-side scripting method that navigates the scheduler to the date selected in the GotoDate form and closes the form.
     */
    GoToDateFormApply(): void;
    /**
     * Client-side scripting method that cancels changes and closes the GotoDate form.
     */
    GoToDateFormCancel(): void;
    /**
     * Client-side scripting method that cancels changes and closes the form.
     */
    InplaceEditFormSave(): void;
    /**
     * Client-side scripting method that cancels changes and closes the form.
     */
    InplaceEditFormCancel(): void;
    /**
     * Client-side scripting method that invokes the appointment editing form for the appointment being edited in the inplace editor.
     */
    InplaceEditFormShowMore(): void;
    /**
     * Client-side scripting method that closes the Reminder form.
     */
    ReminderFormCancel(): void;
    /**
     * Client-side scripting method that calls the Dismiss method for the selected reminder.
     */
    ReminderFormDismiss(): void;
    /**
     * Client-side scripting method that dismisses all reminders shown in the Reminder form.
     */
    ReminderFormDismissAll(): void;
    /**
     * Client-side scripting method that changes the alert time for the selected reminder to the specified interval.
     */
    ReminderFormSnooze(): void;
}
/**
 * Represents a client-side equivalent of the SchedulerViewType object.
 */
interface ASPxSchedulerViewType {
    /**
     * Gets a string representation equivalent of Day enumeration for use in client scripts.
     * Value: A string "Day", indicating the DayView.
     */
    Day: string;
    /**
     * Gets a string representation equivalent of WorkWeek enumeration for use in client scripts.
     * Value: A string "WorkWeek", indicating the WorkWeekView.
     */
    WorkWeek: string;
    /**
     * Gets a string representation equivalent of Week enumeration for use in client scripts.
     * Value: A string "Week", indicating the WeekView.
     */
    Week: string;
    /**
     * Gets a string representation equivalent of Month enumeration for use in client scripts.
     * Value: A string "Month", indicating the MonthView.
     */
    Month: string;
    /**
     * Gets a string representation equivalent of Timeline enumeration for use in client scripts.
     * Value: A string "Timeline", indicating the TimelineView.
     */
    Timeline: string;
    /**
     * Gets a string representation equivalent of FullWeek enumeration for use in client scripts.
     * Value: A string "FullWeek", indicating the FullWeekView.
     */
    FullWeek: string;
}
/**
 * Represents a client-side equivalent of the SchedulerGroupType enumeration.
 */
interface ASPxSchedulerGroupType {
    /**
     * Gets a string representation equivalent of None enumeration for use in client scripts.
     * Value: A "None" string value.
     */
    None: string;
    /**
     * Gets a string representation equivalent of Date enumeration for use in client scripts.
     * Value: A "Date" string value.
     */
    Date: string;
    /**
     * Gets a string representation equivalent of Resource enumeration for use in client scripts.
     * Value: A "Resource" string value.
     */
    Resource: string;
}
/**
 * Represents a client-side equivalent of the AppointmentType enumeration.
 */
interface ASPxAppointmentType {
    /**
     * Gets a string representation equivalent of Normal enumeration for use in client scripts.
     * Value: A "Normal" string value.
     */
    Normal: string;
    /**
     * Gets a string representation equivalent of Pattern enumeration for use in client scripts.
     * Value: A "Pattern" string value.
     */
    Pattern: string;
    /**
     * Gets a string representation equivalent of Occurrence enumeration for use in client scripts.
     * Value: An "Occurrence" string value.
     */
    Occurrence: string;
    /**
     * Gets a string representation equivalent of ChangedOccurrence enumeration for use in client scripts.
     * Value: A "ChangedOccurrence" string value.
     */
    ChangedOccurrence: string;
    /**
     * Gets a string representation equivalent of DeletedOccurrence enumeration for use in client scripts.
     * Value: A "DeletedOccurrence" string value.
     */
    DeletedOccurrence: string;
}
interface ASPxClientAppointmentDeletingEventHandler<S> {
    /**
     * A method that will handle the AppointmentDeleting event.
     * @param source The event sender (typically an ASPxClientScheduler control).
     * @param e A ASPxClientAppointmentDeletingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientAppointmentDeletingEventArgs): void;
}
/**
 * Provides data for the AppointmentDeleting event.
 */
interface ASPxClientAppointmentDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets client IDs of the appointments that are intended to be removed.
     * Value: An array of client appointment identifiers, representing appointments passed for deletion.
     */
    appointmentIds: Object[];
}
interface AppointmentClickEventHandler<S> {
    /**
     * A method that will handle the AppointmentClick event.
     * @param source The event sender (typically an ASPxClientScheduler control).
     * @param e A AppointmentClickEventArgs object that contains event data.
     */
    (source: S, e: AppointmentClickEventArgs): void;
}
/**
 * Provides data for the AppointmentDoubleClick events.
 */
interface AppointmentClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the client appointment ID for the appointment being clicked.
     * Value: A string, representing the client ID of the appointment.
     */
    appointmentId: string;
    /**
     * Gets the HTML element that the event was triggered on.
     * Value: An object containing event data.
     */
    htmlElement: Object;
    /**
     * Gets or sets whether an event is handled, and that default actions are not required.
     * Value: true if no default processing is required; otherwise, false.
     */
    handled: boolean;
}
/**
 * A method that will handle the AppointmentsSelectionChanged event.
 */
interface AppointmentsSelectionEventHandler<S> {
    /**
     * A method that will handle the AppointmentsSelectionChanged event.
     * @param source The ASPxScheduler control which fires the event.
     * @param e A AppointmentsSelectionEventArgs object that contains event data.
     */
    (source: S, e: AppointmentsSelectionEventArgs): void;
}
/**
 * Provides data for the AppointmentsSelectionChanged event.
 */
interface AppointmentsSelectionEventArgs extends ASPxClientEventArgs {
    /**
     * Gets identifiers of the selected appointments.
     * Value: A comma separated list of string values, representing appointment IDs.
     */
    appointmentIds: string[];
}
/**
 * A method that will handle the ActiveViewChanging event.
 */
interface ActiveViewChangingEventHandler<S> {
    /**
     * A method that will handle the ActiveViewChanging event.
     * @param source The ASPxClientScheduler control which fires the event.
     * @param e An ActiveViewChangingEventArgs object that contains event data
     */
    (source: S, e: ActiveViewChangingEventArgs): void;
}
/**
 * Provides data for the client-side ActiveViewChanging event.
 */
interface ActiveViewChangingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the value of the ActiveView property before modification.
     * Value: A SchedulerViewType enumeration.
     */
    oldView: ASPxSchedulerViewType;
    /**
     * Gets the new value of the ActiveView property.
     * Value: A string, which is the SchedulerViewType enumeration value.
     */
    newView: ASPxSchedulerViewType;
    /**
     * Gets or sets whether the change of active view should be canceled.
     * Value: true to cancel the operation; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the MoreButtonClicked event.
 */
interface MoreButtonClickedEventHandler<S> {
    /**
     * A method that will handle MoreButtonClicked event.
     * @param source The ASPxClientScheduler control which fires the event.
     * @param e A MoreButtonClickedEventArgs object that contains event data.
     */
    (source: S, e: MoreButtonClickedEventArgs): void;
}
/**
 * Provides data for the MoreButtonClicked client-side event.
 */
interface MoreButtonClickedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the Start or End values of the target appointment.
     * Value: A DateTime value representing the target appointment's boundary.
     */
    targetDateTime: Date;
    /**
     * Gets the time interval of the cell where the button is located.
     * Value: An ASPxClientTimeInterval object representing the time interval of the cell which holds the button.
     */
    interval: ASPxClientTimeInterval;
    /**
     * Gets the resource identifier associated with the cell where the button is located.
     * Value: A string, corresponding to ResourceId.
     */
    resource: string;
    /**
     * Gets or sets whether an event is handled. If it is handled, default actions are not required.
     * Value: true if no default processing is required; otherwise, false.
     */
    handled: boolean;
}
/**
 * A method that will handle the MenuItemClicked event.
 */
interface MenuItemClickedEventHandler<S> {
    /**
     * A method that will handle the MenuItemClicked event.
     * @param source The ASPxClientScheduler control which fires the event.
     * @param e A MenuItemClickedEventArgs object that contains event data.
     */
    (source: S, e: MenuItemClickedEventArgs): void;
}
/**
 * Provides data for the MenuItemClicked event.
 */
interface MenuItemClickedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the menu item which is clicked.
     * Value: A string, containing the menu item name.
     */
    itemName: string;
    /**
     * Gets or sets whether an event is handled, and that default actions are not required.
     * Value: true if no default processing is required; otherwise, false.
     */
    handled: boolean;
}
interface AppointmentDropEventHandler<S> {
    /**
     * A method that will handle the AppointmentDrop event.
     * @param source The event sender (typically an ASPxClientScheduler control).
     * @param e A ASPxClientAppointmentDragEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientAppointmentDragEventArgs): void;
}
/**
 * Provides data for the AppointmentDrop event.
 */
interface ASPxClientAppointmentDragEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether default event processing is required.
     * Value: true to process an event using only custom code; otherwise, false.
     */
    handled: boolean;
    /**
     * Provides access to an object that enables you to choose an operation to perform.
     * Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
     */
    operation: ASPxClientAppointmentOperation;
    /**
     * Provides information about dragged appointments.
     * Value: An array of ASPxClientAppointmentDragInfo objects storing information about dragged appointments.
     */
    dragInformation: ASPxClientAppointmentDragInfo[];
}
interface AppointmentResizeEventHandler<S> {
    /**
     * A method that will handle the AppointmentResize event.
     * @param source The event sender (typically an ASPxClientScheduler control).
     * @param e A ASPxClientAppointmentResizeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientAppointmentResizeEventArgs): void;
}
/**
 * Provides data for the AppointmentResize event.
 */
interface ASPxClientAppointmentResizeEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether default event processing is required.
     * Value: true to process an event using only custom code; otherwise, false.
     */
    handled: boolean;
    /**
     * Provides access to an object that enables you to choose an operation to perform.
     * Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
     */
    operation: ASPxClientAppointmentOperation;
    /**
     * Gets the resized appointment's identifier.
     * Value: A string containing an appointment identifier.
     */
    appointmentId: string;
    /**
     * Gets the appointment's interval before resizing.
     * Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
     */
    oldInterval: ASPxClientTimeInterval;
    /**
     * Gets the appointment's interval after resizing.
     * Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
     */
    newInterval: ASPxClientTimeInterval;
}
/**
 * Stores information about an appointment drag operation.
 */
interface ASPxClientAppointmentDragInfo {
    /**
     * Gets the dragged appointment's identifier.
     * Value: A string containing an appointment identifier.
     */
    appointmentId: string;
    /**
     * Gets the appointment's interval before the drag operation.
     * Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
     */
    oldInterval: ASPxClientTimeInterval;
    /**
     * Gets resources that were associated with the appointment before the drag operation.
     * Value: A array of strings containing resource identifiers.
     */
    oldResources: string[];
    /**
     * Gets the appointment's interval after the drag operation.
     * Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
     */
    newInterval: ASPxClientTimeInterval;
    /**
     * Gets resources associated with the appointment after the drag operation.
     * Value: An array of strings containing resource identifiers.
     */
    newResources: string[];
}
/**
 * Contains information about a client tooltip.
 */
interface ASPxClientSchedulerToolTipData {
    /**
     * Returns the client appointment for which the tooltip is displayed.
     */
    GetAppointment(): ASPxClientAppointment;
    /**
     * Returns the client time interval for which the tooltip is displayed.
     */
    GetInterval(): ASPxClientTimeInterval;
    /**
     * Returns the resources associated with the appointment for which the tooltip is displayed.
     */
    GetResources(): Object[];
}
/**
 * A client-side equivalent of the ASPxSchedulerToolTipBase control.
 */
interface ASPxClientToolTipBase {
    /**
     * Returns the value that indicates whether or not the tooltip can be displayed.
     */
    CanShowToolTip(): boolean;
    /**
     * Ends updating the tooltip content.
     * @param toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
     */
    FinalizeUpdate(toolTipData: ASPxClientSchedulerToolTipData): void;
    /**
     * Updates the tooltip content.
     * @param toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
     */
    Update(toolTipData: ASPxClientSchedulerToolTipData): void;
    /**
     * Closes the tooltip.
     */
    Close(): void;
    /**
     * 
     * @param bounds 
     */
    CalculatePosition(bounds: Object): ASPxClientPoint;
    /**
     * Displays the Appointment Menu in the position of the tooltip.
     * @param eventObject An object containing information about the event on which the menu is displayed.
     */
    ShowAppointmentMenu(eventObject: Object): void;
    /**
     * Displays the View Menu in the position of the tooltip.
     * @param eventObject An object containing information about the event on which the menu is displayed.
     */
    ShowViewMenu(eventObject: Object): void;
    /**
     * Returns the string representation of the specified interval.
     * @param interval An ASPxClientTimeInterval object to convert.
     */
    ConvertIntervalToString(interval: ASPxClientTimeInterval): string;
}
/**
 * Represents the client-side equivalent of the ASPxSpellChecker class.
 */
interface ASPxClientSpellChecker extends ASPxClientControl {
    /**
     * Client-side event that occurs before the spell check starts.
     */
    BeforeCheck: ASPxClientEvent<ASPxClientBeforeCheckEventHandler<ASPxClientSpellChecker>>;
    /**
     * Client-side event that occurs before a message box informing about process completion is shown.
     */
    CheckCompleteFormShowing: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientSpellChecker>>;
    /**
     * Client-side event that occurs when a spell check is finished.
     */
    AfterCheck: ASPxClientEvent<ASPxClientAfterCheckEventHandler<ASPxClientSpellChecker>>;
    /**
     * Occurs after a word is changed in a checked text.
     */
    WordChanged: ASPxClientEvent<ASPxClientWordChangedEventHandler<ASPxClientSpellChecker>>;
    /**
     * Starts the spelling check of the text contained within the element specified by the CheckedElementID value.
     */
    Check(): void;
    /**
     * Starts checking contents of the specified element.
     * @param element An object representing the element being checked.
     */
    CheckElement(element: Object): void;
    /**
     * Starts checking contents of the specified element.
     * @param id A string representing the identifier of the element being checked.
     */
    CheckElementById(id: string): void;
    /**
     * Starts checking the contents of controls in the specified container.
     * @param containerElement An object representing a control which contains elements being checked.
     */
    CheckElementsInContainer(containerElement: Object): void;
    /**
     * Starts checking the contents of controls in the specified container.
     * @param containerId A string, specifying the control's identifier.
     */
    CheckElementsInContainerById(containerId: string): void;
}
/**
 * Represents an object that will handle the client-side BeforeCheck event.
 */
interface ASPxClientBeforeCheckEventHandler<S> {
    /**
     * A method that will handle the BeforeCheck event.
     * @param source The ASPxClientSpellChecker control which fires the event.
     * @param e A ASPxClientSpellCheckerBeforeCheckEventArgs object that contains event data
     */
    (source: S, e: ASPxClientSpellCheckerBeforeCheckEventArgs): void;
}
/**
 * Provides data for an event that occurs before a spelling check is started. Represents the client-side equivalent of the BeforeCheckEventArgs class.
 */
interface ASPxClientSpellCheckerBeforeCheckEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the programmatic identifier assigned to the control which is going to be checked.
     * Value: A string, containing the control's identifier.
     */
    controlId: string;
}
/**
 * Represents an object that will handle the client-side AfterCheck event.
 */
interface ASPxClientAfterCheckEventHandler<S> {
    /**
     * A method that will handle the AfterCheck event.
     * @param source The ASPxClientSpellChecker control which fires the event.
     * @param e A ASPxClientSpellCheckerAfterCheckEventArgs object that contains event data
     */
    (source: S, e: ASPxClientSpellCheckerAfterCheckEventArgs): void;
}
/**
 * Provides data for the client event that occurs after a spelling check is complete.
 */
interface ASPxClientSpellCheckerAfterCheckEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the programmatic identifier assigned to the control which has been checked.
     * Value: A string, containing the control's identifier.
     */
    controlId: string;
    /**
     * Gets the text that has been checked.
     * Value: A string, containing checked text.
     */
    checkedText: string;
}
/**
 * Represents an object that will handle the client-side WordChanged event.
 */
interface ASPxClientWordChangedEventHandler<S> {
    /**
     * A method that will handle the AfterCheck event.
     * @param source The event source.
     * @param e An ASPxClientSpellCheckerAfterCheckEventArgs object which contains event data.
     */
    (source: S, e: ASPxClientSpellCheckerAfterCheckEventArgs): void;
}
/**
 * A method that will handle the CustomCommandExecuted event.
 */
interface ASPxClientSpreadsheetCustomCommandExecutedEventHandler<S> {
    /**
     * A method that will handle the CustomCommandExecuted event.
     * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
     * @param e A ASPxClientSpreadsheetCustomCommandExecutedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSpreadsheetCustomCommandExecutedEventArgs): void;
}
/**
 * Provides data for the CustomCommandExecuted event.
 */
interface ASPxClientSpreadsheetCustomCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value representing the processed command's name.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     * Value: A string value containing additional information about the processed command.
     */
    parameter: string;
    item: ASPxClientRibbonItem;
}
/**
 * A method that will handle the DocumentChanged event.
 */
interface ASPxClientSpreadsheetDocumentChangedEventHandler<S> {
    /**
     * A method that will handle the DocumentChanged event.
     * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
     * @param e A ASPxClientSpreadsheetDocumentChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSpreadsheetDocumentChangedEventArgs): void;
}
/**
 * Provides data for the DocumentChanged event.
 */
interface ASPxClientSpreadsheetDocumentChangedEventArgs extends ASPxClientEventArgs {
}
/**
 * A method that will handle the EndSynchronization events.
 */
interface ASPxClientSpreadsheetSynchronizationEventHandler<S> {
    /**
     * A method that will handle the EndSynchronization events.
     * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
     * @param e A ASPxClientSpreadsheetSynchronizationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSpreadsheetSynchronizationEventArgs): void;
}
/**
 * Provides data for the EndSynchronization events.
 */
interface ASPxClientSpreadsheetSynchronizationEventArgs extends ASPxClientEventArgs {
}
/**
 * A method that will handle the HyperlinkClick event.
 */
interface ASPxClientSpreadsheetHyperlinkClickEventHandler<S> {
    /**
     * A method that will handle the HyperlinkClick event.
     * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
     * @param e An ASPxClientSpreadsheetHyperlinkClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSpreadsheetHyperlinkClickEventArgs): void;
}
/**
 * Provides data for the HyperlinkClick event.
 */
interface ASPxClientSpreadsheetHyperlinkClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets a value that specifies whether the event is handled, and the default processing is not required.
     * Value: true, if if the event is completely handled by custom code and no default processing is required; otherwise, false.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
    /**
     * Gets a value identifying the clicked hyperlink type.
     * Value: One of the <see cref="ASPxClientOfficeDocumentLinkType" /> values.
     */
    hyperlinkType: ASPxClientOfficeDocumentLinkType;
    /**
     * Gets the clicked link's URI.
     * Value: A sting value specifying the link's URI.
     */
    targetUri: string;
}
/**
 * A client-side equivalent of the ASPxSpreadsheet object.
 */
interface ASPxClientSpreadsheet extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientSpreadsheet.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client when a selection is changed in the ASPxSpreadsheet.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientSpreadsheetSelectionChangedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs after a custom command has been executed on the client side.
     */
    CustomCommandExecuted: ASPxClientEvent<ASPxClientSpreadsheetCustomCommandExecutedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires if any change is made to the Spreadsheet's document on the client.
     */
    DocumentChanged: ASPxClientEvent<ASPxClientSpreadsheetDocumentChangedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
     */
    BeginSynchronization: ASPxClientEvent<ASPxClientSpreadsheetSynchronizationEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires after a document change has been applied to the server and server and client document models have been synchronized.
     */
    EndSynchronization: ASPxClientEvent<ASPxClientSpreadsheetSynchronizationEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client side after a hyperlink is clicked within the Spreadsheet's document.
     */
    HyperlinkClick: ASPxClientEvent<ASPxClientSpreadsheetHyperlinkClickEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Sets input focus to the Spreadsheet.
     */
    Focus(): void;
    /**
     * Gets access to the client ribbon object.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Enables you to switch the full-screen mode of the Spreadsheet.
     * @param fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
     */
    SetFullscreenMode(fullscreen: boolean): void;
    /**
     * Returns the current selection made in a Spreadsheet.
     */
    GetSelection(): ASPxClientSpreadsheetSelection;
    /**
     * Indicates whether any unsaved changes are contained in the current document.
     */
    HasUnsavedChanges(): boolean;
    /**
     * Gets the value of the specified cell.
     * @param colModelIndex An integer value specifying the cell's column index.
     * @param rowModelIndex An integer value specifying the cell's row index.
     */
    GetCellValue(colModelIndex: number, rowModelIndex: number): Object;
    /**
     * Gets the value of the currently active cell.
     */
    GetActiveCellValue(): Object;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side DocumentCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side DocumentCallback event.
     */
    PerformDocumentCallback(parameter: string): void;
    /**
     * Reconnects the Spreadsheet to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
}
/**
 * A method that will handle the client SelectionChanged event.
 */
interface ASPxClientSpreadsheetSelectionChangedEventHandler<S> {
    /**
     * A method that will handle the SelectionChanged event.
     * @param source An object representing the event source. Identifies the button editor that raised the event.
     * @param e An ASPxClientSpreadsheetSelectionChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSpreadsheetSelectionChangedEventArgs): void;
}
/**
 * Provides data for the SelectionChanged event.
 */
interface ASPxClientSpreadsheetSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an object that determines the currently selected region within the Spreadsheet.
     * Value: A <see cref="ASPxClientSpreadsheetSelection" /> object defining the current selection.
     */
    selection: ASPxClientSpreadsheetSelection;
}
/**
 * Represents the selection in the Spreadsheet.
 */
interface ASPxClientSpreadsheetSelection {
    /**
     * Gets the column index of the active cell.
     * Value: An integer value specifying the active cell column index.
     */
    activeCellColumnIndex: number;
    /**
     * Gets the row index of the active cell.
     * Value: An integer value specifying the active cell row index.
     */
    activeCellRowIndex: number;
    /**
     * Gets the index of the selection's left column.
     * Value: An integer value specifying the index of the left column within the selection.
     */
    leftColumnIndex: number;
    /**
     * Gets the index of the selection's top row.
     * Value: An integer value specifying the index of the top row within the selection.
     */
    topRowIndex: number;
    /**
     * Gets the index of the selection's right column.
     * Value: An integer value specifying the index of the right column within the selection.
     */
    rightColumnIndex: number;
    /**
     * Gets the index of the selection's bottom row.
     * Value: An integer value specifying the index of the bottom row within the selection.
     */
    bottomRowIndex: number;
}
/**
 * Represents the client ASPxTreeList.
 */
interface ASPxClientTreeList extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientTreeList.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to display a context menu.
     */
    ContextMenu: ASPxClientEvent<ASPxClientTreeListContextMenuEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientTreeListCustomButtonEventHandler<ASPxClientTreeList>>;
    /**
     * Fires before the focused node has been changed.
     */
    NodeFocusing: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires in response to changing node focus.
     */
    FocusedNodeChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires after the selection has been changed via end-user interaction.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires after the Customization Window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientTreeList>>;
    /**
     * Fires after the callback has been processed in the CustomDataCallback event handler.
     */
    CustomDataCallback: ASPxClientEvent<ASPxClientTreeListCustomDataCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Fires on the client when a node is clicked.
     */
    NodeClick: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires on the client when a node is double clicked.
     */
    NodeDblClick: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires before a node is expanded.
     */
    NodeExpanding: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires before a node is collapsed.
     */
    NodeCollapsing: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs before a node is dragged by an end-user.
     */
    StartDragNode: ASPxClientEvent<ASPxClientTreeListStartDragNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs after a node drag and drop operation is completed.
     */
    EndDragNode: ASPxClientEvent<ASPxClientTreeListEndDragNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to prevent columns from being resized.
     */
    ColumnResizing: ASPxClientEvent<ASPxClientTreeListColumnResizingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs after a column's width has been changed by an end-user.
     */
    ColumnResized: ASPxClientEvent<ASPxClientTreeListColumnResizedEventHandler<ASPxClientTreeList>>;
    /**
     * Sets input focus to the ASPxTreeList.
     */
    Focus(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Returns the focused node's key value.
     */
    GetFocusedNodeKey(): string;
    /**
     * Moves focus to the specified node.
     * @param key A String value that uniquely identifies the node.
     */
    SetFocusedNodeKey(key: string): void;
    /**
     * Indicates whether the specified node is selected.
     * @param nodeKey A String value that identifies the node by its key value.
     */
    IsNodeSelected(nodeKey: string): any;
    /**
     * Selects the specified node.
     * @param nodeKey A string value that identifies the node.
     */
    SelectNode(nodeKey: string): void;
    /**
     * Selects or deselects the specified node.
     * @param nodeKey A string value that identifies the node.
     * @param state true to select the node; otherwise, false.
     */
    SelectNode(nodeKey: string, state: boolean): void;
    /**
     * Obtains key values of selected nodes that are displayed within the current page.
     */
    GetVisibleSelectedNodeKeys(): string[];
    /**
     * Indicates whether the Customization Window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the Customization Window.
     */
    ShowCustomizationWindow(): void;
    /**
     * Invokes the Customization Window and displays it over the specified HTML element.
     * @param htmlElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(htmlElement: Object): void;
    /**
     * Closes the Customization Window.
     */
    HideCustomizationWindow(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCustomCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
     */
    PerformCustomDataCallback(arg: string): void;
    /**
     * Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
     * @param nodeKey A string value that identifies the node.
     * @param fieldNames A string value that contains the names of data source fields whose values within the specified node are returned. The field names should be separated by ';'.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetNodeValues(nodeKey: string, fieldNames: string, onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
     * @param nodeKey A string value that identifies the node.
     * @param fieldNames The names of data source fields whose values within the specified node are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetNodeValues(nodeKey: string, fieldNames: string[], onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
     * @param fieldNames A string value that contains the names of data source fields whose values within visible nodes are returned. The field names should be separated by ';'.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetVisibleNodeValues(fieldNames: string, onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
     * @param fieldNames The names of data source fields whose values within visible nodes are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetVisibleNodeValues(fieldNames: string[], onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
     * @param fieldNames A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetSelectedNodeValues(fieldNames: string, onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
     * @param fieldNames The names of data source fields whose values within selected nodes are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetSelectedNodeValues(fieldNames: string[], onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
     * @param fieldNames A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     * @param visibleOnly true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
     */
    GetSelectedNodeValues(fieldNames: string, onCallback: ASPxClientTreeListValuesCallback, visibleOnly: boolean): void;
    /**
     * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
     * @param fieldNames The names of data source fields whose values within selected nodes are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     * @param visibleOnly true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
     */
    GetSelectedNodeValues(fieldNames: string[], onCallback: ASPxClientTreeListValuesCallback, visibleOnly: boolean): void;
    /**
     * Selects the specified page.
     * @param index An integer value that specifies the active page's index.
     */
    GoToPage(index: number): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the ASPxTreeList's data is divided.
     */
    GetPageCount(): number;
    /**
     * Returns the specified node's state.
     * @param nodeKey A String value that identifies the node.
     */
    GetNodeState(nodeKey: string): string;
    /**
     * Expands all nodes.
     */
    ExpandAll(): void;
    /**
     * Collapses all Node.
     */
    CollapseAll(): void;
    /**
     * Expands the specified node preserving the collapsed state of child nodes.
     * @param key A String value that uniquely identifies the node.
     */
    ExpandNode(key: string): void;
    /**
     * Collapses the specified node preserving the expanded state of child nodes.
     * @param key A String value that uniquely identifies the node.
     */
    CollapseNode(key: string): void;
    /**
     * Obtains key values of nodes that are displayed within the current page.
     */
    GetVisibleNodeKeys(): string[];
    /**
     * Returns an HTML table row that represents the specified node.
     * @param nodeKey A string value that identifies the node.
     */
    GetNodeHtmlElement(nodeKey: string): Object;
    /**
     * Returns the number of visible columns within the client ASPxTreeList.
     */
    GetVisibleColumnCount(): number;
    /**
     * Returns the number of columns within the client ASPxTreeList.
     */
    GetColumnCount(): number;
    /**
     * Returns the column located at the specified position within the Columns collection.
     * @param index An integer value that identifies the column within the collection (the column's Index property value).
     */
    GetColumnByIndex(index: number): ASPxClientTreeListColumn;
    /**
     * Returns the column with the specified name.
     * @param name A string value that specifies the column's name (the column's Name property value).
     */
    GetColumnByName(name: string): ASPxClientTreeListColumn;
    /**
     * Returns the client column which is bound to the specified data source field.
     * @param fieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
     */
    GetColumnByFieldName(fieldName: string): ASPxClientTreeListColumn;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     */
    SortBy(columnIndex: number): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     */
    SortBy(columnIndex: number, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param columnIndex An integer value that specifies the column's position within the column collection.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnIndex: number, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param nameOrFieldName A String value that specifies the column's name or field name.
     */
    SortBy(nameOrFieldName: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param nameOrFieldName A String value that specifies the column's name or field name.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     */
    SortBy(nameOrFieldName: string, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param nameOrFieldName A String value that specifies the column's name or field name.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(nameOrFieldName: string, sortOrder: string, reset: boolean): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientTreeListColumn object that represents the data column.
     */
    SortBy(column: ASPxClientTreeListColumn): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientTreeListColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     */
    SortBy(column: ASPxClientTreeListColumn, sortOrder: string): void;
    /**
     * Sorts data by the specified data column's values.
     * @param column An ASPxClientTreeListColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(column: ASPxClientTreeListColumn, sortOrder: string, reset: boolean): void;
    /**
     * Switches the ASPxTreeList to edit mode.
     * @param nodeKey A string value that identifies the node by its key value.
     */
    StartEdit(nodeKey: string): void;
    /**
     * Saves all the changes made and switches the ASPxTreeList to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the ASPxTreeList to browse mode.
     */
    CancelEdit(): void;
    /**
     * Indicates whether the ASPxTreeList is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Gets the key value of the node currently being edited.
     */
    GetEditingNodeKey(): string;
    /**
     * Moves the specified node to a new position.
     * @param nodeKey A string value that identifies the target node by its key value.
     * @param parentNodeKey A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
     */
    MoveNode(nodeKey: string, parentNodeKey: string): void;
    /**
     * Deletes the specified node.
     * @param nodeKey A string value that identifies the node.
     */
    DeleteNode(nodeKey: string): void;
    /**
     * Switches the ASPxTreeList to edit mode and allows new root node values to be edited.
     */
    StartEditNewNode(): void;
    /**
     * Switches the ASPxTreeList to edit mode and allows new node values to be edited.
     * @param parentNodeKey A String value that identifies the parent node, which owns a new node.
     */
    StartEditNewNode(parentNodeKey: string): void;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     */
    GetEditor(column: ASPxClientTreeListColumn): Object;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnIndex An integer value that identifies the column by its position within the column collection.
     */
    GetEditor(columnIndex: number): Object;
    /**
     * Returns the editor used to edit the specified column's values.
     * @param columnNameOrFieldName A String value that identifies the column by its name or field name.
     */
    GetEditor(columnNameOrFieldName: string): Object;
    /**
     * Returns the value of the specified edit cell.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     */
    GetEditValue(column: ASPxClientTreeListColumn): Object;
    /**
     * Returns the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
     */
    GetEditValue(columnIndex: number): Object;
    /**
     * Returns the value of the specified edit cell.
     * @param columnNameOrFieldName A String value that identifies the column by its name or field name.
     */
    GetEditValue(columnNameOrFieldName: string): Object;
    /**
     * Sets the value of the specified edit cell.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     * @param value An object that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientTreeListColumn, value: Object): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnIndex An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
     * @param value An object that specifies the edit cell's new value.
     */
    SetEditValue(columnIndex: number, value: Object): void;
    /**
     * Sets the value of the specified edit cell.
     * @param columnNameOrFieldName A String value that identifies the column by its name or field name.
     * @param value An object that specifies the edit cell's new value.
     */
    SetEditValue(columnNameOrFieldName: string, value: Object): void;
    /**
     * Moves focus to the specified editor within the edited node.
     * @param column A ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     */
    FocusEditor(column: ASPxClientTreeListColumn): void;
    /**
     * Moves focus to the specified editor within the edited node.
     * @param columnIndex An integer value that identifies the data column.
     */
    FocusEditor(columnIndex: number): void;
    /**
     * Moves focus to the specified editor within the edited node.
     * @param columnNameOrFieldName A String value that specifies the column's name or field name.
     */
    FocusEditor(columnNameOrFieldName: string): void;
    /**
     * Scrolls the tree list so that the specified node becomes visible.
     * @param nodeKey An integer value that specifies the node index within the tree list's client item list.
     */
    MakeNodeVisible(nodeKey: string): void;
    /**
     * Returns the current vertical scroll position of the tree list's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Returns the current horizontal scroll position of the tree list's content.
     */
    GetHorizontalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the tree list's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Specifies the horizontal scroll position for the tree list's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
}
/**
 * Represents a client column.
 */
interface ASPxClientTreeListColumn {
    /**
     * Gets the column's position within the collection.
     * Value: An integer zero-bazed index that specifies the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the column.
     * Value: A string value assigned to the column's Name property.
     */
    name: string;
    /**
     * Gets the name of the database field assigned to the current column.
     * Value: A String value that specifies the name of a data field.
     */
    fieldName: string;
}
/**
 * Provides data for the CustomDataCallback event.
 */
interface ASPxClientTreeListCustomDataCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the information that has been collected on the client-side and sent to the  server-side CustomDataCallback event.
     * Value: A string value that represents the information that has been collected on the client-side and sent to the server-side CustomDataCallback event.
     */
    arg: string;
    /**
     * Gets the information passed from the server-side CustomDataCallback event.
     * Value: An object that represents the information passed from the server-side CustomDataCallback event.
     */
    result: Object;
}
/**
 * A method that will handle the CustomDataCallback event.
 */
interface ASPxClientTreeListCustomDataCallbackEventHandler<S> {
    /**
     * A method that will handle the CustomDataCallback event.
     * @param source The event source.
     * @param e An ASPxClientTreeListCustomDataCallbackEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListCustomDataCallbackEventArgs): void;
}
/**
 * Provides data for the NodeDblClick events.
 */
interface ASPxClientTreeListNodeEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the processed node's key value.
     * Value: A String value that identifies the processed node.
     */
    nodeKey: string;
    /**
     * Provides access to the parameters associated with the NodeDblClick events.
     * Value: An object that contains parameters associated with the event.
     */
    htmlEvent: Object;
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the NodeDblClick event.
 */
interface ASPxClientTreeListNodeEventHandler<S> {
    /**
     * A method that will handle the NodeDblClick event.
     * @param source The event source.
     * @param e An ASPxClientTreeListNodeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListNodeEventArgs): void;
}
/**
 * Provides data for the ContextMenu event.
 */
interface ASPxClientTreeListContextMenuEventArgs extends ASPxClientEventArgs {
    /**
     * Identifies which tree list element has been right-clicked.
     * Value: A string value that identifies which tree list element ('Header' or 'Node') has been right-clicked.
     */
    objectType: string;
    /**
     * Gets a value that identifies the right-clicked object.
     * Value: The right-clicked object's identifier.
     */
    objectKey: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that relates to the processed event.
     */
    htmlEvent: Object;
    /**
     * Gets or sets whether to invoke the browser's context menu.
     * Value: true to hide the browser's context menu; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ContextMenu event.
 */
interface ASPxClientTreeListContextMenuEventHandler<S> {
    /**
     * A method that will handle the ContextMenu event.
     * @param source The event sender.
     * @param e An ASPxClientTreeListContextMenuEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListContextMenuEventArgs): void;
}
/**
 * Provides data for the StartDragNode event.
 */
interface ASPxClientTreeListStartDragNodeEventArgs extends ASPxClientTreeListNodeEventArgs {
    /**
     * Gets an array of targets where a node can be dragged.
     * Value: An array of objects that represent targets for the dragged node.
     */
    targets: Object[];
}
/**
 * A method that will handle the StartDragNode event.
 */
interface ASPxClientTreeListStartDragNodeEventHandler<S> {
    /**
     * A method that will handle the StartDragNode event.
     * @param source The event source.
     * @param e An ASPxClientTreeListStartDragNodeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListStartDragNodeEventArgs): void;
}
/**
 * Provides data for the EndDragNode event.
 */
interface ASPxClientTreeListEndDragNodeEventArgs extends ASPxClientTreeListNodeEventArgs {
    /**
     * Gets the target element.
     * Value: An object that represents the target element to which the dragged node has been dropped.
     */
    targetElement: Object;
}
/**
 * A method that will handle the EndDragNode event.
 */
interface ASPxClientTreeListEndDragNodeEventHandler<S> {
    /**
     * A method that will handle the EndDragNode event.
     * @param source The event source.
     * @param e An ASPxClientTreeListEndDragNodeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListEndDragNodeEventArgs): void;
}
/**
 * Provides data for the CustomButtonClick event.
 */
interface ASPxClientTreeListCustomButtonEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the key value of the node whose custom button has been clicked.
     * Value: A string value that uniquely identifies the node whose custom button has been clicked.
     */
    nodeKey: string;
    /**
     * Gets the button's index.
     * Value: An integer value that specifies the button's position within the CustomButtons collection.
     */
    buttonIndex: number;
    /**
     * Gets the value which identifies the custom button.
     * Value: A String value that identifies the clicked custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the CustomButtonClick event.
 */
interface ASPxClientTreeListCustomButtonEventHandler<S> {
    /**
     * A method that will handle the CustomButtonClick event.
     * @param source The event source.
     * @param e An ASPxClientTreeListCustomButtonEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListCustomButtonEventArgs): void;
}
/**
 * Represents a JavaScript function which receives the list of row values when a specific client method (such as the GetSelectedNodeValues) is called.
 */
interface ASPxClientTreeListValuesCallback {
    /**
     * A JavaScript function which receives the list of row values when a specific client method (such as the GetSelectedNodeValues) is called.
     * @param result An object that represents the list of row values received from the server.
     */
    (result: Object): void;
}
/**
 * Provides data for the ColumnResizing event.
 */
interface ASPxClientTreeListColumnResizingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed client column.
     * Value: An <see cref="ASPxClientTreeListColumn" /> object that is the processed column.
     */
    column: ASPxClientTreeListColumn;
}
/**
 * A method that will handle the client ColumnResizing event.
 */
interface ASPxClientTreeListColumnResizingEventHandler<S> {
    /**
     * A method that will handle the ColumnResizing event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientTreeListColumnResizingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListColumnResizingEventArgs): void;
}
/**
 * Provides data for the ColumnResized event.
 */
interface ASPxClientTreeListColumnResizedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the processed client column.
     * Value: An <see cref="ASPxClientTreeListColumn" /> object that is the processed column.
     */
    column: ASPxClientTreeListColumn;
}
/**
 * A method that will handle the client ColumnResized event.
 */
interface ASPxClientTreeListColumnResizedEventHandler<S> {
    /**
     * A method that will handle the ColumnResized event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientTreeListColumnResizedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeListColumnResizedEventArgs): void;
}
/**
 * A client-side counterpart of the Calendar and CalendarFor extensions.
 */
interface MVCxClientCalendar extends ASPxClientCalendar {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCalendar>>;
}
/**
 * A client-side counterpart of the CallbackPanel extension.
 */
interface MVCxClientCallbackPanel extends ASPxClientCallbackPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCallbackPanel>>;
    /**
     * Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the CardView extension.
 */
interface MVCxClientCardView extends ASPxClientCardView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCardView>>;
    /**
     * Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CardView's CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CardView's CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the CardView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the CardView.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: Object, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientCardViewValuesCallback): void;
}
/**
 * A client-side counterpart of the Chart extension.
 */
interface MVCxClientChart extends ASPxClientWebChartControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientChart>>;
    /**
     * Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the ComboBox and ComboBoxFor extensions.
 */
interface MVCxClientComboBox extends ASPxClientComboBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientComboBox>>;
    /**
     * Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A client-side counterpart of the DataView extension.
 */
interface MVCxClientDataView extends ASPxClientDataView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDataView>>;
    /**
     * Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the DateEdit extension.
 */
interface MVCxClientDateEdit extends ASPxClientDateEdit {
}
/**
 * A client-side counterpart of the DockManager extension.
 */
interface MVCxClientDockManager extends ASPxClientDockManager {
    /**
     * Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the DockPanel extension.
 */
interface MVCxClientDockPanel extends ASPxClientDockPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDockPanel>>;
    /**
     * Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
     * @param parameter A string value that is any information that needs to be sent to the server-side WindowCallback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A client-side counterpart of the FileManager extension.
 */
interface MVCxClientFileManager extends ASPxClientFileManager {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientFileManager>>;
    /**
     * Sends a callback with a parameter to update the FileManager by processing the passed information on the server, in an Action specified via the extension's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the file manager's CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param data A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the GridView extension.
 */
interface MVCxClientGridView extends ASPxClientGridView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientGridView>>;
    /**
     * Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the GridView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the GridView.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: Object, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientGridViewValuesCallback): void;
}
/**
 * A client-side counterpart of the HtmlEditor extension.
 */
interface MVCxClientHtmlEditor extends ASPxClientHtmlEditor {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientHtmlEditor>>;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     */
    PerformDataCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     * @param onCallback An ASPxClientDataCallback object that is the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(data: Object, onCallback: ASPxClientDataCallback): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(parameter: string, onCallback: ASPxClientDataCallback): void;
}
/**
 * A client-side counterpart of the ImageGallery extension.
 */
interface MVCxClientImageGallery extends ASPxClientImageGallery {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientImageGallery>>;
    /**
     * Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the ListBox and ListBoxFor extensions.
 */
interface MVCxClientListBox extends ASPxClientListBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientListBox>>;
    /**
     * Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A client-side counterpart of the NavBar extension.
 */
interface MVCxClientNavBar extends ASPxClientNavBar {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientNavBar>>;
}
/**
 * A client-side counterpart of the PivotGrid extension.
 */
interface MVCxClientPivotGrid extends ASPxClientPivotGrid {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPivotGrid>>;
    /**
     * Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Passes PivotGrid callback parameters to the specified object.
     * @param obj An object that receives PivotGrid callback parameters.
     */
    FillStateObject(obj: Object): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the PopupControl extension.
 */
interface MVCxClientPopupControl extends ASPxClientPopupControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPopupControl>>;
    /**
     * Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback with a parameters to update the popup window by processing the related popup window and the passed information on the server, in an Action specified by the PopupControl's CallbackRouteValues property.
     * @param window A ASPxClientPopupWindow object identifying the processed popup window.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, data: Object): void;
    /**
     * 
     * @param window 
     * @param parameter 
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, parameter: string): void;
    /**
     * Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
     * @param window A ASPxClientPopupWindow object identifying the processed popup window.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
     * @param parameter A string value that is any information that needs to be sent to the server-side WindowCallback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A client-side equivalent of the MVCxDocumentViewer class.
 */
interface MVCxClientDocumentViewer extends ASPxClientDocumentViewer {
    /**
     * Occurs before performing a document export request.
     */
    BeforeExportRequest: ASPxClientEvent<MVCxClientBeforeExportRequestEventHandler<MVCxClientDocumentViewer>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDocumentViewer>>;
}
/**
 * Obsolete. Use the MVCxClientDocumentViewer class instead.
 */
interface MVCxClientReportViewer extends ASPxClientReportViewer {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientReportViewer>>;
    /**
     * Occurs before performing a document export request.
     */
    BeforeExportRequest: ASPxClientEvent<MVCxClientBeforeExportRequestEventHandler<MVCxClientReportViewer>>;
}
/**
 * A method that will handle the BeforeExportRequest event.
 */
interface MVCxClientBeforeExportRequestEventHandler<S> {
    /**
     * A method that will handle the BeforeExportRequest event.
     * @param source An object which is the event source. Identifies the client object that raised the event.
     * @param e A MVCxClientBeforeExportRequestEventArgs object that contains event data.
     */
    (source: S, e: MVCxClientBeforeExportRequestEventArgs): void;
}
/**
 * Provides data for client BeforeExportRequest events.
 */
interface MVCxClientBeforeExportRequestEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     * Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
     */
    customArgs: Object;
}
/**
 * A client-side equivalent of the MVCxReportDesigner class.
 */
interface MVCxClientReportDesigner extends ASPxClientReportDesigner {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientReportDesigner>>;
    /**
     * Occurs after executing the Save command on the client.
     */
    SaveCommandExecuted: ASPxClientEvent<MVCxClientReportDesignerSaveCommandExecutedEventHandler<MVCxClientReportDesigner>>;
    /**
     * Sends a callback to the server with the specified argument.
     * @param arg A Object value, specifying the callback argument.
     */
    PerformCallback(arg: Object): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server with the specified argument.
     * @param arg A String value, specifying the callback argument.
     */
    PerformCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A method that will handle the SaveCommandExecuted event.
 */
interface MVCxClientReportDesignerSaveCommandExecutedEventHandler<S> {
    /**
     * A method that will handle the SaveCommandExecuted event.
     * @param source An object which is the event source. Identifies the client object that raised the event.
     * @param e A MVCxClientBeforeExportRequestEventArgs object that contains event data.
     */
    (source: S, e: MVCxClientReportDesignerSaveCommandExecutedEventArgs): void;
}
/**
 * Provides data for the SaveCommandExecuted event.
 */
interface MVCxClientReportDesignerSaveCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the operation result.
     * Value: A String value, specifying the operation result.
     */
    Result: string;
}
/**
 * A client-side counterpart of the RichEdit extension.
 */
interface MVCxClientRichEdit extends ASPxClientRichEdit {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientRichEdit>>;
    /**
     * Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the RoundPanel extension.
 */
interface MVCxClientRoundPanel extends ASPxClientRoundPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientRoundPanel>>;
    /**
     * Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
     * @param parameter A string value that is any information that needs to be sent to the server-side ContentCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
     * @param parameter A string value that is any information that needs to be sent to the server-side ContentCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the Scheduler extension.
 */
interface MVCxClientScheduler extends ASPxClientScheduler {
    ToolTipDisplaying: ASPxClientEvent<MVCxClientSchedulerToolTipDisplayingEventHandler<MVCxClientScheduler>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientScheduler>>;
    /**
     * Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A template that is rendered to display a tooltip.
 */
interface MVCxClientSchedulerTemplateToolTip extends ASPxClientToolTipBase {
    type: MVCxSchedulerToolTipType;
}
/**
 * A delegate method that enables you to adjust the tooltip content before displaying.
 */
interface MVCxClientSchedulerToolTipDisplayingEventHandler<S> {
    /**
     * 
     * @param source 
     * @param e 
     */
    (source: S, e: MVCxClientSchedulerToolTipDisplayingEventArgs): void;
}
/**
 * Provides data for the ToolTipDisplaying event.
 */
interface MVCxClientSchedulerToolTipDisplayingEventArgs extends ASPxClientEventArgs {
    toolTip: MVCxClientSchedulerTemplateToolTip;
    data: ASPxClientSchedulerToolTipData;
}
/**
 * Lists available tooltip types.
 */
interface MVCxSchedulerToolTipType {
}
/**
 * A client-side counterpart of the Spreadsheet extension.
 */
interface MVCxClientSpreadsheet extends ASPxClientSpreadsheet {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientSpreadsheet>>;
    /**
     * Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the PageControl extension.
 */
interface MVCxClientPageControl extends ASPxClientPageControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPageControl>>;
    /**
     * Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A client-side counterpart of the TokenBox and TokenBoxFor extensions.
 */
interface MVCxClientTokenBox extends ASPxClientTokenBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTokenBox>>;
    /**
     * Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
}
/**
 * A client-side counterpart of the TreeList extension.
 */
interface MVCxClientTreeList extends ASPxClientTreeList {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTreeList>>;
    /**
     * Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the TreeList's CustomDataCallback event. This method does not update the TreeList.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     */
    PerformCustomDataCallback(data: Object): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
     */
    PerformCustomDataCallback(arg: string): void;
}
/**
 * A client-side counterpart of the TreeView extension.
 */
interface MVCxClientTreeView extends ASPxClientTreeView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTreeView>>;
}
/**
 * A client-side counterpart of the UploadControl extension.
 */
interface MVCxClientUploadControl extends ASPxClientUploadControl {
}
/**
 * A method that will handle client BeginCallback events.
 */
interface MVCxClientBeginCallbackEventHandler<S> {
    /**
     * A method that will handle client BeginCallback events.
     * @param source An object which is the event source. Identifies the client object that raised the event.
     * @param e A MVCxClientBeginCallbackEventArgs object that contains event data.
     */
    (source: S, e: MVCxClientBeginCallbackEventArgs): void;
}
/**
 * Provides data for client BeginCallback events.
 */
interface MVCxClientBeginCallbackEventArgs extends ASPxClientBeginCallbackEventArgs {
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     * Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
     */
    customArgs: Object;
}
/**
 * A method that will handle the BeginCallback event.
 */
interface MVCxClientGlobalBeginCallbackEventHandler<S> {
    /**
     * A method that will handle the BeginCallback event.
     * @param source An object which is the event source. Identifies the client object that raised the event.
     * @param e A MVCxClientGlobalBeginCallbackEventArgs object that contains event data.
     */
    (source: S, e: MVCxClientGlobalBeginCallbackEventArgs): void;
}
/**
 * Provides data for the BeginCallback event.
 */
interface MVCxClientGlobalBeginCallbackEventArgs extends ASPxClientGlobalBeginCallbackEventArgs {
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     * Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
     */
    customArgs: Object;
}
/**
 * An ASP.NET MVC equivalent of the client ASPxClientGlobalEvents component.
 */
interface MVCxClientGlobalEvents {
    /**
     * Occurs on the client side after client object models of all DevExpress MVC extensions contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Occurs on the client when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientGlobalBeginCallbackEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by a DevExpress MVC extension.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<MVCxClientGlobalEvents>>;
}
/**
 * A client-side counterpart of the VerticalGrid extension.
 */
interface MVCxClientVerticalGrid extends ASPxClientVerticalGrid {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientVerticalGrid>>;
    /**
     * Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     */
    PerformCallback(data: Object): void;
    /**
     * Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: Object, onSuccess: (arg1: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the VerticalGrid's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the VerticalGrid.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: Object, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
}
/**
 * A client-side equivalent of the MVCxWebDocumentViewer class.
 */
interface MVCxClientWebDocumentViewer extends ASPxClientWebDocumentViewer {
}
/**
 * Serves as the base type for all the objects included in the client-side object model.
 */
interface ASPxClientControlBase {
    /**
     * Gets the unique, hierarchically-qualified identifier for the control.
     * Value: The fully-qualified identifier for the control.
     */
    name: string;
    /**
     * Occurs on the client side after the control has been initialized.
     */
    Init: ASPxClientEvent<ASPxClientEventHandler<ASPxClientControlBase>>;
    /**
     * Returns an HTML element that is the root of the control's hierarchy.
     */
    GetMainElement(): Object;
    /**
     * Returns a value specifying whether a control is displayed.
     */
    GetClientVisible(): boolean;
    /**
     * Specifies whether a control is displayed.
     * @param visible 
     */
    SetClientVisible(visible: boolean): void;
    /**
     * Returns a value specifying whether a control is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether a control is displayed.
     * @param visible true to make a control visible; false to make it hidden.
     */
    SetVisible(visible: boolean): void;
    /**
     * Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
     */
    InCallback(): boolean;
}
/**
 * Serves as the base type for all the objects included in the client-side object model.
 */
interface ASPxClientControl extends ASPxClientControlBase {
    /**
     * Returns the control's width.
     */
    GetWidth(): number;
    /**
     * Returns the control's height.
     */
    GetHeight(): number;
    /**
     * Specifies the control's width.
     * @param width An integer value that specifies the control's width.
     */
    SetWidth(width: number): void;
    /**
     * Specifies the control's height.   Note that this method is not in effect for some controls.
     * @param height An integer value that specifies the control's height.
     */
    SetHeight(height: number): void;
    /**
     * Modifies the control's size against the control's container.
     */
    AdjustControl(): void;
}
/**
 * Represents a client-side equivalent of the ASPxCallback control.
 */
interface ASPxClientCallback extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCallback>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCallback>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallback.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCallback>>;
    /**
     * Fires on the client side when a callback initiated by the client Callback event's handler returns back to the client.
     */
    CallbackComplete: ASPxClientEvent<ASPxClientCallbackCompleteEventHandler<ASPxClientCallback>>;
    /**
     * Sends a callback to the server and generates the server-side Callback event passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    SendCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A method that will handle the client events related to completion of callback server-side processing.
 */
interface ASPxClientCallbackCompleteEventHandler<S> {
    /**
     * A method that will handle the client events related to completion of callback server-side processing.
     * @param source An object representing the event source. Identifies the web control that raised the event.
     * @param e An ASPxClientCallbackCompleteEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCallbackCompleteEventArgs): void;
}
/**
 * Serves as the base class for arguments of the web controls' client-side events.
 */
interface ASPxClientEventArgs {
}
/**
 * Provides data for events concerning the final processing of a callback.
 */
interface ASPxClientCallbackCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a string that contains specific information (if any) passed from the client side for server-side processing.
     * Value: A string value representing specific information passed from the client to the server side.
     */
    parameter: string;
    /**
     * Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing.
     * Value: A string value representing specific information passed from the server back to the client side.
     */
    result: string;
}
/**
 * Represents a client-side equivalent of the ASPxCallbackPanel control.
 */
interface ASPxClientCallbackPanel extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Returns the text displayed within the control's loading panel.
     */
    GetLoadingPanelText(): string;
    /**
     * Sets the text to be displayed within the control's loading panel.
     * @param loadingPanelText A string value specifying the text to be displayed within the loading panel.
     */
    SetLoadingPanelText(loadingPanelText: string): void;
    /**
     * Sets a value specifying whether the callback panel is enabled.
     * @param enabled true, to enable the callback panel; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value specifying whether a callback panel is enabled.
     */
    GetEnabled(): boolean;
}
/**
 * Represents the event object used for client-side events.
 */
interface ASPxClientEvent<T> {
    /**
     * Dynamically connects the event with an appropriate event handler function.
     * @param handler An object representing the event handling function's content.
     */
    AddHandler(handler: T): void;
    /**
     * Dynamically disconnects the event from the associated event handler function.
     * @param handler An object representing the event handling function's content.
     */
    RemoveHandler(handler: T): void;
    /**
     * Dynamically disconnects the event from all the associated event handler functions.
     */
    ClearHandlers(): void;
    /**
     * For internal use only.
     * @param source 
     * @param e 
     */
    FireEvent(source: Object, e: ASPxClientEventArgs): void;
}
/**
 * A method that will handle the client-side events of a web control's client-side equivalent.
 */
interface ASPxClientEventHandler<S> {
    /**
     * A method that will handle the client-side events of a web control's client-side equivalent.
     * @param source An object representing the event source. Identifies the control that raised the event.
     * @param e An ASPxClientEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientEventArgs): void;
}
/**
 * A method that will handle the cancelable events of a web control's client-side equivalent.
 */
interface ASPxClientCancelEventHandler<S> {
    /**
     * A method that will handle the cancelable events of a web control's client-side equivalent.
     * @param source An object representing the event source. Identifies the web control that raised the event.
     * @param e An ASPxClientCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCancelEventArgs): void;
}
/**
 * Provides data for cancelable client events.
 */
interface ASPxClientCancelEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
 */
interface ASPxClientProcessingModeEventHandler<S> {
    /**
     * A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
     * @param source An object representing the event source. Identifies the web control that raised the event.
     * @param e An ASPxClientProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientProcessingModeEventArgs): void;
}
/**
 * Provides data for the client events which can't be cancelled and allow the event's processing to be passed to the server side.
 */
interface ASPxClientProcessingModeEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets a value that specifies whether the event should be finally processed on the server side.
     * Value: true to process the event on the server side; false to completely handle it on the client side.
     */
    processOnServer: boolean;
}
/**
 * A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
 */
interface ASPxClientProcessingModeCancelEventHandler<S> {
    /**
     * A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
     * @param source An object representing the event source. Identifies the web control that raised the event.
     * @param e An ASPxClientProcessingModeCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientProcessingModeCancelEventArgs): void;
}
/**
 * Provides data for the cancelable client-side events which allow the event's processing to be passed to the server side.
 */
interface ASPxClientProcessingModeCancelEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * Represents a JavaScript function which receives callback data obtained via a call to a specific client method (such as the PerformDataCallback).
 */
interface ASPxClientDataCallback {
    /**
     * A JavaScript function which receives a callback data obtained via a call to a specific client method (such as the PerformDataCallback).
     * @param sender An object whose client method generated a callback.
     * @param result A string value that represents the result of server-side callback processing.
     */
    (sender: Object, result: string): void;
}
/**
 * Represents a client-side equivalent of the ASPxCloudControl control.
 */
interface ASPxClientCloudControl extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientCloudControlItemEventHandler<ASPxClientCloudControl>>;
}
/**
 * A method that will handle client events involving manipulations with the control's items.
 */
interface ASPxClientCloudControlItemEventHandler<S> {
    /**
     * A method that will handle client events concerning manipulations with items.
     * @param source The event source. This parameter identifies the cloud control object which raised the event.
     * @param e An ASPxClientCloudControlItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCloudControlItemEventArgs): void;
}
/**
 * Provides data for events which involve clicking on the control's items.
 */
interface ASPxClientCloudControlItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the name that uniquely identifies the processed item.
     * Value: A string value that represents the value assigned to the item's Name property.
     */
    name: Object;
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An object representing a container for the item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the client events related to the begining of a callback processing round trip.
 */
interface ASPxClientBeginCallbackEventHandler<S> {
    /**
     * A method that will handle client BeginCallback events.
     * @param source An object representing the event source. Identifies the web control that raised the event.
     * @param e An ASPxClientBeginCallbackEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientBeginCallbackEventArgs): void;
}
/**
 * Provides data for client events related to the beginning of a callback processing round trip.
 */
interface ASPxClientBeginCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a command name that identifies which client action forced a callback to be occurred.
     * Value: A string value that represents the name of the command which initiated a callback.
     */
    command: string;
}
/**
 * A method that will handle the BeginCallback event.
 */
interface ASPxClientGlobalBeginCallbackEventHandler<S> {
    /**
     * A method that will handle the BeginCallback event.
     * @param source The event source.
     * @param e An ASPxDataValidationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGlobalBeginCallbackEventArgs): void;
}
/**
 * Provides data for the BeginCallback event.
 */
interface ASPxClientGlobalBeginCallbackEventArgs extends ASPxClientBeginCallbackEventArgs {
    /**
     * Gets an object that initiated a callback.
     * Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle the client events related to the completion of a callback processing round trip.
 */
interface ASPxClientEndCallbackEventHandler<S> {
    /**
     * A method that will handle client EndCallback events.
     * @param source An object representing the event source.
     * @param e A MenuItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientEndCallbackEventArgs): void;
}
/**
 * Provides data for client events related to the completion of a callback processing round trip.
 */
interface ASPxClientEndCallbackEventArgs extends ASPxClientEventArgs {
}
/**
 * A method that will handle the EndCallback event.
 */
interface ASPxClientGlobalEndCallbackEventHandler<S> {
    /**
     * A method that will handle the EndCallback event.
     * @param source The event source.
     * @param e An ASPxDataValidationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGlobalEndCallbackEventArgs): void;
}
/**
 * Provides data for the EndCallback event.
 */
interface ASPxClientGlobalEndCallbackEventArgs extends ASPxClientEndCallbackEventArgs {
    /**
     * Gets an object that initiated a callback.
     * Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle a CustomCallback client event exposed by some DevExpress web controls.
 */
interface ASPxClientCustomDataCallbackEventHandler<S> {
    /**
     * A method that will handle the client CustomCallback event of some controls.
     * @param source An object representing the event source.
     * @param e An ASPxClientCustomDataCallbackEventHandler object that contains event data.
     */
    (source: S, e: ASPxClientCustomDataCallbackEventArgs): void;
}
/**
 * Provides data for the CustomCallback event.
 */
interface ASPxClientCustomDataCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing, related to the CustomCallback event.
     * Value: A string value representing specific information passed from the server back to the client side.
     */
    result: string;
}
/**
 * A method that will handle client events related to server-side errors that occured during callback processing.
 */
interface ASPxClientCallbackErrorEventHandler<S> {
    /**
     * A method that will handle client CallbackError events.
     * @param source An object representing the event source.
     * @param e A ASPxClientCallbackErrorEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientCallbackErrorEventArgs): void;
}
/**
 * Provides data for client events related to server-side errors that occured during callback processing.
 */
interface ASPxClientCallbackErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the error message that describes the server error that occurred.
     * Value: A string value that represents the error message.
     */
    message: string;
    /**
     * Gets or sets whether the event is handled and the default error handling actions are not required.
     * Value: true if the error is handled and no default processing is required; otherwise false.
     */
    handled: boolean;
}
/**
 * A method that will handle the CallbackError event.
 */
interface ASPxClientGlobalCallbackErrorEventHandler<S> {
    /**
     * A method that will handle the CallbackError event.
     * @param source The event source.
     * @param e An ASPxDataValidationEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientGlobalCallbackErrorEventArgs): void;
}
/**
 * Provides data for the CallbackError event.
 */
interface ASPxClientGlobalCallbackErrorEventArgs extends ASPxClientCallbackErrorEventArgs {
    /**
     * Gets an object that initiated a callback.
     * Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle the ValidationCompleted client event.
 */
interface ASPxClientValidationCompletedEventHandler<S> {
    /**
     * A method that will handle the ValidationCompleted event.
     * @param source An object representing the event source. Identifies the ASPxClientGlobalEvents object that raised the event.
     * @param e An ASPxClientValidationCompletedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientValidationCompletedEventArgs): void;
}
/**
 * Provides data for the ValidationCompleted client event that allows you to centrally validate user input within all DevExpress web controls to which validation is applied.
 */
interface ASPxClientValidationCompletedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a container object that holds the validated control(s).
     * Value: An object that represents a container of the validated control(s).
     */
    container: Object;
    /**
     * Gets the name of the validation group name to which validation has been applied.
     * Value: A string value that represents the name of the validation group that has been validated.
     */
    validationGroup: string;
    /**
     * Gets a value that indicates whether validation has been applied to both visible and invisible controls.
     * Value: true if validation has been applied to both visible and invisible controls; false if only visible controls have been validated.
     */
    invisibleControlsValidated: boolean;
    /**
     * Gets a value specifying whether the validation has been completed successfully.
     * Value: true if the validation has been completed successfully; otherwise, false.
     */
    isValid: boolean;
    /**
     * Gets the first control (either visible or invisible) that hasn't passed the validation applied.
     * Value: An ASPxClientControl object that represents the first invalid control.
     */
    firstInvalidControl: ASPxClientControl;
    /**
     * Gets the first visible control that hasn't passed the validation applied.
     * Value: An ASPxClientControl object that represents the first visible invalid control.
     */
    firstVisibleInvalidControl: ASPxClientControl;
}
/**
 * A method that will handle the client ControlsInitialized event.
 */
interface ASPxClientControlsInitializedEventHandler<S> {
    /**
     * A method that will handle the client ControlsInitialized event.
     * @param source An object representing the event source.
     * @param e An ASPxClientControlsInitializedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientControlsInitializedEventArgs): void;
}
/**
 * Provides data for the client ControlsInitialized event.
 */
interface ASPxClientControlsInitializedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a value that specifies whether a callback is sent during a controls initialization.
     * Value: true if a callback is sent; otherwise, false.
     */
    isCallback: boolean;
}
interface ASPxClientControlPredicate {
    (control: Object): boolean;
}
interface ASPxClientControlAction {
    (control: Object): void;
}
/**
 * A collection object used on the client side to maintain particular client control objects
 */
interface ASPxClientControlCollection {
    /**
     * Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs when the browser window is being resized.
     */
    BrowserWindowResized: ASPxClientEvent<ASPxClientEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs when a callback for server-side processing is initiated by any DevExpress control.
     */
    BeginCallback: ASPxClientEvent<ASPxClientGlobalBeginCallbackEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<ASPxClientControlCollection>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by any DevExpress web control.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
     */
    ValidationCompleted: ASPxClientEvent<ASPxClientValidationCompletedEventHandler<ASPxClientControlCollection>>;
    /**
     * Returns a collection item identified by its unique hierarchically-qualified identifier.
     * @param name A string value representing the hierarchically-qualified identifier of the required control.
     */
    Get(name: Object): Object;
    /**
     * Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
     * @param name A string value that is the hierarchically-qualified identifier of the required DevExpress control.
     */
    GetByName(name: string): Object;
    /**
     * 
     * @param predicate 
     */
    GetControlsByPredicate(predicate: ASPxClientControlPredicate): Object[];
    /**
     * 
     * @param type 
     */
    GetControlsByType(type: Object): Object[];
    /**
     * 
     * @param action 
     */
    ForEachControl(action: ASPxClientControlAction): void;
}
/**
 * Represents a client-side equivalent of the ASPxDataView object.
 */
interface ASPxClientDataView extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDataView>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDataView>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientDataView>>;
    /**
     * Activates the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page that is currently active.
     */
    GetPageIndex(): number;
    /**
     * Gets the size of a single ASPxDataView's page.
     */
    GetPageSize(): number;
    /**
     * Sets the size of a single ASPxDataView's page.
     * @param pageSize An integer value that specifies the page size.
     */
    SetPageSize(pageSize: number): void;
    /**
     * Gets the number of pages into which the ASPxDataView's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Activates the first page.
     */
    FirstPage(): void;
    /**
     * Activates the last page.
     */
    LastPage(): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
 */
interface ASPxClientDockingFilterPredicate {
    /**
     * A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
     * @param item An object to compare against the criteria defined within the method.
     */
    (item: Object): boolean;
}
/**
 * A client-side equivalent of the ASPxDockManager   object.
 */
interface ASPxClientDockManager extends ASPxClientControl {
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockManagerProcessingModeCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientDockManagerProcessingModeEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
     */
    BeforeFloat: ASPxClientEvent<ASPxClientDockManagerProcessingModeCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side after a panel is undocked from a zone.
     */
    AfterFloat: ASPxClientEvent<ASPxClientDockManagerProcessingModeEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs when a panel dragging operation is started.
     */
    StartPanelDragging: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs after a panel dragging operation is complete.
     */
    EndPanelDragging: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side before a panel is closed, and allows you to cancel the action.
     */
    PanelClosing: ASPxClientEvent<ASPxClientDockManagerCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side when a panel is closed.
     */
    PanelCloseUp: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side when a panel pops up.
     */
    PanelPopUp: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side after a panel has been invoked.
     */
    PanelShown: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side after a panel has been resized.
     */
    PanelResize: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Returns a zone specified by its unique identifier (zoneUID).
     * @param zoneUID A string value specifying the unique identifier of the zone.
     */
    GetZoneByUID(zoneUID: string): ASPxClientDockZone;
    /**
     * Returns a panel specified by its unique identifier (panelUID).
     * @param panelUID A string value specifying the unique identifier of the panel.
     */
    GetPanelByUID(panelUID: string): ASPxClientDockPanel;
    /**
     * Returns an array of panels contained in a page.
     */
    GetPanels(): ASPxClientDockPanel[];
    /**
     * Returns an array of panels that are contained in a page and meet a specified criteria.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
     */
    GetPanels(filterPredicate: ASPxClientDockingFilterPredicate): ASPxClientDockPanel[];
    /**
     * Returns an array of zones contained in a page.
     */
    GetZones(): ASPxClientDockZone[];
    /**
     * Returns an array of zones that are contained in a page and meet a specified criteria.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
     */
    GetZones(filterPredicate: ASPxClientDockingFilterPredicate): ASPxClientDockZone[];
}
/**
 * A method that will handle the client BeforeDock event.
 */
interface ASPxClientDockManagerProcessingModeCancelEventHandler<S> {
    /**
     * A method that will handle the BeforeDock event.
     * @param source The event source. This parameter identifies the dock manager object which raised the event.
     * @param e An ASPxClientDockManagerProcessingModeCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockManagerProcessingModeCancelEventArgs): void;
}
/**
 * Provides data for the BeforeDock event.
 */
interface ASPxClientDockManagerProcessingModeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
    /**
     * Gets the zone currently being processed.
     * Value: An ASPxClientDockZone object that is the processed zone.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle the client AfterDock event.
 */
interface ASPxClientDockManagerProcessingModeEventHandler<S> {
    /**
     * A method that will handle the AfterDock event.
     * @param source The event source. This parameter identifies the dock manager object which raised the event.
     * @param e An ASPxClientDockManagerProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockManagerProcessingModeEventArgs): void;
}
/**
 * Provides data for the AfterDock event.
 */
interface ASPxClientDockManagerProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
    /**
     * Gets the zone currently being processed.
     * Value: An ASPxClientDockZone object that is the processed zone.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle client-side events concerning manipulations with panels.
 */
interface ASPxClientDockManagerEventHandler<S> {
    /**
     * A method that will handle client-side events concerning manipulations with panels.
     * @param source The event source. This parameter identifies the dock manager object which raised the event.
     * @param e An ASPxClientDockManagerEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockManagerEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on panels.
 */
interface ASPxClientDockManagerEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
}
/**
 * A method that will handle the client BeforeDock event.
 */
interface ASPxClientDockManagerCancelEventHandler<S> {
    /**
     * A method that will handle the PanelClosing event.
     * @param source The event source. This parameter identifies the dock manager object which raised the event.
     * @param e An ASPxClientDockManagerCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockManagerCancelEventArgs): void;
}
/**
 * Provides data for the BeforeDock event.
 */
interface ASPxClientDockManagerCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
}
/**
 * Serves as a base class for the ASPxClientPopupControl classes.
 */
interface ASPxClientPopupControlBase extends ASPxClientControl {
    /**
     * Occurs on the client side when window resizing initiates.
     */
    BeforeResizing: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when window resizing completes.
     */
    AfterResizing: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when a control's window closes or hides.
     */
    CloseUp: ASPxClientEvent<ASPxClientPopupWindowCloseUpEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Enables you to cancel window closing on the client side.
     */
    Closing: ASPxClientEvent<ASPxClientPopupWindowCancelEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when a control's window is invoked.
     */
    PopUp: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a window has been resized.
     */
    Resize: ASPxClientEvent<ASPxClientPopupWindowResizeEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a control's window has been invoked.
     */
    Shown: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when the window pin state is changed.
     */
    PinnedChanged: ASPxClientEvent<ASPxClientPopupWindowPinnedChangedEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Modifies a control's window size in accordance with the content.
     */
    AdjustSize(): void;
    /**
     * Brings the window to the front of the z-order.
     */
    BringToFront(): void;
    /**
     * Returns a value indicating whether the window is collapsed.
     */
    GetCollapsed(): boolean;
    /**
     * Returns the HTML code that specifies the contents of the control's window.
     */
    GetContentHtml(): string;
    /**
     * Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
     */
    GetContentIFrame(): Object;
    /**
     * Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
     */
    GetContentIFrameWindow(): Object;
    /**
     * Returns the URL pointing to the web page displayed within the control's window.
     */
    GetContentUrl(): string;
    /**
     * Returns the URL pointing to the image displayed within the window footer by default.
     */
    GetFooterImageUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
     */
    GetFooterNavigateUrl(): string;
    /**
     * Returns the text displayed within a window's footer.
     */
    GetFooterText(): string;
    /**
     * Returns the URL pointing to the image displayed within the window header.
     */
    GetHeaderImageUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
     */
    GetHeaderNavigateUrl(): string;
    /**
     * Returns the text displayed within a window's header.
     */
    GetHeaderText(): string;
    /**
     * Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
     */
    GetContentWidth(): number;
    /**
     * Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
     */
    GetContentHeight(): number;
    /**
     * Returns a value indicating whether the window is maximized.
     */
    GetMaximized(): boolean;
    /**
     * Returns a value indicating whether the window is pinned.
     */
    GetPinned(): boolean;
    /**
     * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
     * @param parameter A string value that is any information that needs to be sent to the server-side WindowCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Refreshes the content of the web page displayed within the control's window.
     */
    RefreshContentUrl(): void;
    /**
     * Sets a value indicating whether the window is collapsed.
     * @param value true, to collapse the window; otherwise, false.
     */
    SetCollapsed(value: boolean): void;
    /**
     * Sets the HTML markup specifying the contents of the control's window.
     * @param html A string value that specifies the HTML markup.
     */
    SetContentHtml(html: string): void;
    /**
     * Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
     * @param url A string value specifying the URL to the web page displayed within the control's window.
     */
    SetContentUrl(url: string): void;
    /**
     * Specifies the URL which points to the image displayed within the window footer by default.
     * @param value A string value that is the URL for the image displayed within the window footer.
     */
    SetFooterImageUrl(value: string): void;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
     * @param value A string value which specifies the required navigation location.
     */
    SetFooterNavigateUrl(value: string): void;
    /**
     * Specifies the text displayed within a window's footer.
     * @param value A string value that specifies a window's footer text.
     */
    SetFooterText(value: string): void;
    /**
     * Specifies the URL which points to the image displayed within the window header.
     * @param value A string value that is the URL to the image displayed within the header.
     */
    SetHeaderImageUrl(value: string): void;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
     * @param value A string value which specifies the required navigation location.
     */
    SetHeaderNavigateUrl(value: string): void;
    /**
     * Specifies the text displayed within a window's header.
     * @param value A string value that specifies a window's header text.
     */
    SetHeaderText(value: string): void;
    /**
     * Sets a value indicating whether the window is maximized.
     * @param value true. to maximize the window; otherwise, false.
     */
    SetMaximized(value: boolean): void;
    /**
     * Sets a value indicating whether the window is pinned.
     * @param value true, to pin the window; otherwise, false.
     */
    SetPinned(value: boolean): void;
    /**
     * Invokes the control's window.
     */
    Show(): void;
    /**
     * Invokes the control's window at the popup element with the specified index.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element.
     */
    Show(popupElementIndex: number): void;
    /**
     * Invokes the control's window and displays it over the specified HTML element.
     * @param htmlElement An object specifying the HTML element relative to whose position the window is invoked.
     */
    ShowAtElement(htmlElement: Object): void;
    /**
     * Invokes the control's window and displays it over an HTML element specified by its unique identifier.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
     */
    ShowAtElementByID(id: string): void;
    /**
     * Invokes the control's window at the specified position.
     * @param x A integer value specifying the x-coordinate of the window's display position.
     * @param y A integer value specifying the y-coordinate of the window's display position.
     */
    ShowAtPos(x: number, y: number): void;
    /**
     * Closes the control's window.
     */
    Hide(): void;
    /**
     * Returns a value that specifies whether the control's window is displayed.
     */
    IsVisible(): boolean;
}
/**
 * A client-side equivalent of the ASPxDockPanel object.
 */
interface ASPxClientDockPanel extends ASPxClientPopupControlBase {
    /**
     * Gets or sets the unique identifier of a panel on a page.
     * Value: A string that is the unique identifier of a panel.
     */
    panelUID: string;
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockPanelProcessingModeCancelEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
     */
    BeforeFloat: ASPxClientEvent<ASPxClientDockPanelProcessingModeCancelEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side after a panel is undocked from a zone.
     */
    AfterFloat: ASPxClientEvent<ASPxClientDockPanelProcessingModeEventHandler<ASPxClientDockPanel>>;
    /**
     * Occurs when a panel dragging operation is started.
     */
    StartDragging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDockPanel>>;
    /**
     * Occurs after a panel dragging operation is complete.
     */
    EndDragging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDockPanel>>;
    /**
     * Retrieves a zone that owns the current panel.
     */
    GetOwnerZone(): ASPxClientDockZone;
    /**
     * Docks the current panel in the specified zone.
     * @param zone An ASPxClientDockZone object specifying the zone.
     */
    Dock(zone: ASPxClientDockZone): void;
    /**
     * Docks the current panel in a zone at the specified position.
     * @param zone An ASPxClientDockZone object specifying the zone, where the panel is docked
     * @param visibleIndex An integer value specifying the visible index position.
     */
    Dock(zone: ASPxClientDockZone, visibleIndex: number): void;
    /**
     * Undocks the current panel.
     */
    MakeFloat(): void;
    /**
     * Undocks the current panel and place it at the specified position.
     * @param x An integer value that specifies the X-coordinate of the panel's display position.
     * @param y An integer value that specifies the Y-coordinate of the panel's display position.
     */
    MakeFloat(x: number, y: number): void;
    /**
     * Gets or sets a value specifying the position of the current panel, amongst the visible panels within a zone.
     */
    GetVisibleIndex(): number;
    /**
     * Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
     * @param visibleIndex An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
     */
    SetVisibleIndex(visibleIndex: number): void;
    /**
     * Returns a value indicating whether the panel is docked.
     */
    IsDocked(): boolean;
}
/**
 * A method that will handle the client BeforeDock event.
 */
interface ASPxClientDockPanelProcessingModeCancelEventHandler<S> {
    /**
     * A method that will handle the BeforeDock event.
     * @param source A ASPxClientDockPanel object that raised the event.
     * @param e A ASPxClientDockPanelProcessingModeCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockPanelProcessingModeCancelEventArgs): void;
}
/**
 * Provides data for the BeforeDock event.
 */
interface ASPxClientDockPanelProcessingModeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets the zone currently being processed.
     * Value: An ASPxClientDockZone object that is the processed zone.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle the client BeforeDock event.
 */
interface ASPxClientDockPanelProcessingModeEventHandler<S> {
    /**
     * A method that will handle the AfterFloat event.
     * @param source A ASPxClientDockPanel object that raised the event.
     * @param e A ASPxClientDockPanelProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockPanelProcessingModeEventArgs): void;
}
/**
 * Provides data for the AfterFloat event.
 */
interface ASPxClientDockPanelProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the zone currently being processed.
     * Value: An ASPxClientDockZone object that is the processed zone.
     */
    zone: ASPxClientDockZone;
}
/**
 * A client-side equivalent of the ASPxDockZone object.
 */
interface ASPxClientDockZone extends ASPxClientControl {
    /**
     * Gets or sets the unique identifier of a zone on a page.
     * Value: A string that is the unique identifier of a zone.
     */
    zoneUID: string;
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockZoneCancelEventHandler<ASPxClientDockZone>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientDockZoneProcessingModeEventHandler<ASPxClientDockZone>>;
    /**
     * Returns a value that indicates the orientation in which panels are stacked in the current zone.
     */
    IsVertical(): boolean;
    /**
     * Gets a value that indicates whether the zone can enlarge its size.
     */
    GetAllowGrowing(): boolean;
    /**
     * Gets the number of panels contained in the zone.
     */
    GetPanelCount(): number;
    /**
     * Returns a panel specified by its unique identifier (panelUID).
     * @param panelUID A string value specifying the unique identifier of the panel.
     */
    GetPanelByUID(panelUID: string): ASPxClientDockPanel;
    /**
     * Returns a panel specified by its visible index.
     * @param visibleIndex An integer value specifying the panel's position among the visible panels within the current zone.
     */
    GetPanelByVisibleIndex(visibleIndex: number): ASPxClientDockPanel;
    /**
     * Returns an array of panels docked in the current zone.
     */
    GetPanels(): ASPxClientDockPanel[];
    /**
     * Returns an array of panels that are docked in the current zone and meet a specified criteria.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
     */
    GetPanels(filterPredicate: ASPxClientDockingFilterPredicate): ASPxClientDockPanel[];
}
/**
 * A method that will handle the client BeforeDock event.
 */
interface ASPxClientDockZoneCancelEventHandler<S> {
    /**
     * A method that will handle the BeforeDock event.
     * @param source The event source. This parameter identifies the zone object which raised the event.
     * @param e A ASPxClientDockZoneCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockZoneCancelEventArgs): void;
}
/**
 * Provides data for the BeforeDock event.
 */
interface ASPxClientDockZoneCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
}
/**
 * A method that will handle the client AfterDock event.
 */
interface ASPxClientDockZoneProcessingModeEventHandler<S> {
    /**
     * A method that will handle the AfterDock event.
     * @param source The event source. This parameter identifies the zone object which raised the event.
     * @param e An  ASPxClientDockZoneProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientDockZoneProcessingModeEventArgs): void;
}
/**
 * Provides data for the AfterDock event.
 */
interface ASPxClientDockZoneProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the panel currently being processed.
     * Value: An ASPxClientDockPanel object that is the processed panel.
     */
    panel: ASPxClientDockPanel;
}
/**
 * Represents the client-side equivalent of the ASPxFileManager control.
 */
interface ASPxClientFileManager extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFileManager.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side after the selected file has been changed.
     */
    SelectedFileChanged: ASPxClientEvent<ASPxClientFileManagerFileEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side when an end-user opens a file by double-clicking it or pressing the Enter key.
     */
    SelectedFileOpened: ASPxClientEvent<ASPxClientFileManagerFileOpenedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires after the focused item has been changed.
     */
    FocusedItemChanged: ASPxClientEvent<ASPxClientFileManagerFocusedItemChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientFileManagerSelectionChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side after the current folder has been changed within a file manager.
     */
    CurrentFolderChanged: ASPxClientEvent<ASPxClientFileManagerCurrentFolderChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before the folder is created, and allows you to cancel the action.
     */
    FolderCreating: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a folder has been created.
     */
    FolderCreated: ASPxClientEvent<ASPxClientFileManagerItemCreatedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is renamed and allows you to cancel the action.
     */
    ItemRenaming: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been renamed.
     */
    ItemRenamed: ASPxClientEvent<ASPxClientFileManagerItemRenamedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is deleted and allows you to cancel the action.
     */
    ItemDeleting: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been deleted.
     */
    ItemDeleted: ASPxClientEvent<ASPxClientFileManagerItemDeletedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been deleted.
     */
    ItemsDeleted: ASPxClientEvent<ASPxClientFileManagerItemsDeletedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is moved and allows you to cancel the action.
     */
    ItemMoving: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been moved.
     */
    ItemMoved: ASPxClientEvent<ASPxClientFileManagerItemMovedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been moved .
     */
    ItemsMoved: ASPxClientEvent<ASPxClientFileManagerItemsMovedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is copied and allows you to cancel the action.
     */
    ItemCopying: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager item has been copied.
     */
    ItemCopied: ASPxClientEvent<ASPxClientFileManagerItemCopiedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been copied.
     */
    ItemsCopied: ASPxClientEvent<ASPxClientFileManagerItemsCopiedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client if any error occurs while editing an item.
     */
    ErrorOccurred: ASPxClientEvent<ASPxClientFileManagerErrorEventHandler<ASPxClientFileManager>>;
    /**
     * Enables you to display the alert with the result error description.
     */
    ErrorAlertDisplaying: ASPxClientEvent<ASPxClientFileManagerErrorAlertDisplayingEventHandler<ASPxClientFileManager>>;
    /**
     * Fires when a custom item is clicked, allowing you to perform custom actions.
     */
    CustomCommand: ASPxClientEvent<ASPxClientFileManagerCustomCommandEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side when the file manager updates the state of toolbar or context menu items.
     */
    ToolbarUpdating: ASPxClientEvent<ASPxClientFileManagerToolbarUpdatingEventHandler<ASPxClientFileManager>>;
    /**
     * Enables you to highlight the search text, which is specified using the filter box, in templates.
     */
    HighlightItemTemplate: ASPxClientEvent<ASPxClientFileManagerHighlightItemTemplateEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before a file upload starts, and allows you to cancel the action.
     */
    FileUploading: ASPxClientEvent<ASPxClientFileManagerFileUploadingEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before the selected items are uploaded and allows you to cancel the action.
     */
    FilesUploading: ASPxClientEvent<ASPxClientFileManagerFilesUploadingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file has been uploaded.
     */
    FileUploaded: ASPxClientEvent<ASPxClientFileManagerFileUploadedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after upload of all selected files has been completed.
     */
    FilesUploaded: ASPxClientEvent<ASPxClientFileManagerFilesUploadedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before a file download starts, and allows you to cancel the action.
     */
    FileDownloading: ASPxClientEvent<ASPxClientFileManagerFileDownloadingEventHandler<ASPxClientFileManager>>;
    /**
     * Gets the name of the currently active file manager area.
     */
    GetActiveAreaName(): string;
    /**
     * Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Executes the specified command.
     * @param commandName A string value that specifies the command to perform.
     */
    ExecuteCommand(commandName: string): boolean;
    /**
     * Returns the selected file within the ASPxFileManager control's file container.
     */
    GetSelectedFile(): ASPxClientFileManagerFile;
    /**
     * Returns an array of the file manager's selected items.
     */
    GetSelectedItems(): ASPxClientFileManagerFile[];
    /**
     * Returns a list of files that are loaded on the current page.
     */
    GetItems(): ASPxClientFileManagerFile[];
    /**
     * Sends a callback to the server and returns a list of files that are contained within the current folder.
     * @param onCallback A  object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetAllItems(onCallback: ASPxClientFileManagerAllItemsCallback): void;
    /**
     * Returns a toolbar item specified by its command name.
     * @param commandName A string value specifying the command name of the item.
     */
    GetToolbarItemByCommandName(commandName: string): ASPxClientFileManagerToolbarItem;
    /**
     * Returns a context menu item specified by its command name.
     * @param commandName A string value specifying the command name of the item.
     */
    GetContextMenuItemByCommandName(commandName: string): ASPxClientFileManagerToolbarItem;
    /**
     * Gets the current folder's path.
     */
    GetCurrentFolderPath(): string;
    /**
     * Gets the current folder's path with the specified separator.
     * @param separator A string value that specifies the separator between the folder's name within a path.
     */
    GetCurrentFolderPath(separator: string): string;
    /**
     * Gets the current folder's path with the specified settings.
     * @param separator A string value that specifies the separator between the folder's name within the path.
     * @param skipRootFolder true to skip the root folder; otherwise, false.
     */
    GetCurrentFolderPath(separator: string, skipRootFolder: boolean): string;
    /**
     * Sets the current folder's path.
     * @param path A String value that is the relative path to the folder (without the root folder).
     * @param onCallback A ASPxClientFileManagerCallback object that is the JavaScript function that receives the callback data as a parameter.
     */
    SetCurrentFolderPath(path: string, onCallback: ASPxClientFileManagerCallback): void;
    /**
     * Gets the current folder's ID.
     */
    GetCurrentFolderId(): string;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param args A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
}
/**
 * A JavaScript function which receives callback data obtained via a call to the client SetCurrentFolderPath method.
 */
interface ASPxClientFileManagerCallback {
    /**
     * A JavaScript function that receives callback data obtained via a call to the SetCurrentFolderPath method.
     * @param result An object that contains a callback data.
     */
    (result: Object): void;
}
/**
 * A client-side equivalent of the file manager's FileManagerItem object and serves as a base class for client file and folder objects.
 */
interface ASPxClientFileManagerItem {
    /**
     * Gets the name of the current item.
     * Value: A string value that is the item's name.
     */
    name: string;
    /**
     * Gets the item's unique identifier.
     * Value: A String value that specifies the item's unique identifier.
     */
    id: string;
    /**
     * Gets a value that indicates if the current file manager item is a folder.
     * Value: true if the current item is a folder or parent folder; false if the current item is a file.
     */
    isFolder: boolean;
    /**
     * Specifies whether the file manager item is selected.
     * @param selected true, to select the item; otherwise, false.
     */
    SetSelected(selected: boolean): void;
    /**
     * Gets a value indicating whether the item is selected in the file manager.
     */
    IsSelected(): boolean;
    /**
     * Gets the current item's full name.
     */
    GetFullName(): string;
    /**
     * Gets the current item's full name with the specified separator.
     * @param separator A string value that specifies the separator between the folder name inside the item's full name.
     */
    GetFullName(separator: string): string;
    /**
     * Gets the current item's full name with the specified settings.
     * @param separator A string value that specifies the separator between the folder name inside the item's full name.
     * @param skipRootFolder true, to skip the root folder; otherwise, false.
     */
    GetFullName(separator: string, skipRootFolder: boolean): string;
}
/**
 * Represents the client-side equivalent of the FileManagerFile object.
 */
interface ASPxClientFileManagerFile extends ASPxClientFileManagerItem {
    /**
     * Downloads a file from a file manager.
     */
    Download(): void;
}
/**
 * A client-side equivalent of the FileManagerFolder object.
 */
interface ASPxClientFileManagerFolder extends ASPxClientFileManagerItem {
    isParentFolder: boolean;
}
/**
 * A JavaScript function which receives callback data obtained by a call to the client GetAllItems method.
 */
interface ASPxClientFileManagerAllItemsCallback {
    /**
     * A JavaScript function which receives callback data obtained by a call to the client GetAllItems method.
     * @param items An array of ASPxClientFileManagerItem objects that are items contained in the current folder.
     */
    (items: ASPxClientFileManagerItem[]): void;
}
/**
 * A method that will handle the client SelectedFileOpened events.
 */
interface ASPxClientFileManagerFileEventHandler<S> {
    /**
     * A method that will handle the SelectedFileOpened events.
     * @param source An object representing the event's source.
     * @param e An ASPxClientFileManagerFileEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFileEventArgs): void;
}
/**
 * Provides data for the SelectedFileOpened events.
 */
interface ASPxClientFileManagerFileEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a file related to the event.
     * Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
     */
    file: ASPxClientFileManagerFile;
}
/**
 * A method that will handle the client SelectedFileOpened event.
 */
interface ASPxClientFileManagerFileOpenedEventHandler<S> {
    /**
     * A method that will handle the SelectedFileOpened event.
     * @param source The event source. This parameter identifies the file manager object which raised the event.
     * @param e An ASPxClientFileManagerFileOpenedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFileOpenedEventArgs): void;
}
/**
 * Provides data for the SelectedFileOpened event.
 */
interface ASPxClientFileManagerFileOpenedEventArgs extends ASPxClientFileManagerFileEventArgs {
    /**
     * Gets or sets a value that specifies whether the event should be finally processed on the server side.
     * Value: true to process the event on the server side; false to completely handle it on the client side.
     */
    processOnServer: boolean;
}
/**
 * Serves as a base for classes that are used as arguments for events generated on the client side.
 */
interface ASPxClientFileManagerActionEventArgsBase extends ASPxClientEventArgs {
    /**
     * Gets the full name of the item currently being processed.
     * Value: A string value that is the item's full name.
     */
    fullName: string;
    /**
     * Gets the name of the currently processed item.
     * Value: A string value that specifies the item's name.
     */
    name: string;
    /**
     * Gets a value specifying whether the current processed item is a folder.
     * Value: true if the processed  item is a folder; false if the processed item is a file.
     */
    isFolder: boolean;
}
/**
 * A method that will handle the client ItemRenaming events.
 */
interface ASPxClientFileManagerItemEditingEventHandler<S> {
    /**
     * A method that will handle the ItemRenaming events.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemEditingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemEditingEventArgs): void;
}
/**
 * Provides data for the item editing event.
 */
interface ASPxClientFileManagerItemEditingEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client ItemRenamed event.
 */
interface ASPxClientFileManagerItemRenamedEventHandler<S> {
    /**
     * A method that will handle the ItemRenamed event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemRenamedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemRenamedEventArgs): void;
}
/**
 * Provides data for the ItemRenamed event.
 */
interface ASPxClientFileManagerItemRenamedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Gets the previous name of the renamed item.
     * Value: A  string value that specifies the item name.
     */
    oldName: string;
}
/**
 * A method that will handle the client ItemDeleted event.
 */
interface ASPxClientFileManagerItemDeletedEventHandler<S> {
    /**
     * A method that will handle the ItemDeleted event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemDeletedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemDeletedEventArgs): void;
}
/**
 * Provides data for the ItemDeleted event.
 */
interface ASPxClientFileManagerItemDeletedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
}
/**
 * A method that will handle the client ItemsDeleted event.
 */
interface ASPxClientFileManagerItemsDeletedEventHandler<S> {
    /**
     * A method that will handle the ItemsDeleted event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemsDeletedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemsDeletedEventArgs): void;
}
/**
 * Provides data for the ItemsDeleted event.
 */
interface ASPxClientFileManagerItemsDeletedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an array of the currently processed items.
     * Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
     */
    items: ASPxClientFileManagerItem[];
}
/**
 * A method that will handle the client ItemMoved event.
 */
interface ASPxClientFileManagerItemMovedEventHandler<S> {
    /**
     * A method that will handle the ItemMoved event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemMovedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemMovedEventArgs): void;
}
/**
 * Provides data for the ItemMoved event.
 */
interface ASPxClientFileManagerItemMovedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Gets the full name of the folder from which an item is moved.
     * Value: A string value that specifies the folder's full name.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the client ItemsMoved event.
 */
interface ASPxClientFileManagerItemsMovedEventHandler<S> {
    /**
     * A method that will handle the ItemsMoved event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemsMovedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemsMovedEventArgs): void;
}
/**
 * Provides data for the ItemsMoved event.
 */
interface ASPxClientFileManagerItemsMovedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an array of the currently processed items.
     * Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
     */
    items: ASPxClientFileManagerItem[];
    /**
     * Gets the full name of the folder from which items are moved.
     * Value: A string value that specifies the folder's full name.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the client ItemCopied event.
 */
interface ASPxClientFileManagerItemCopiedEventHandler<S> {
    /**
     * A method that will handle the ItemCopied event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemCopiedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemCopiedEventArgs): void;
}
/**
 * Provides data for the ItemCopied event.
 */
interface ASPxClientFileManagerItemCopiedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Gets the full name of the folder from which an item is copied.
     * Value: A string value that specifies the folder's full name.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the client ItemsCopied event.
 */
interface ASPxClientFileManagerItemsCopiedEventHandler<S> {
    /**
     * A method that will handle the ItemsCopied event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemsCopiedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemsCopiedEventArgs): void;
}
/**
 * Provides data for the ItemsCopied event.
 */
interface ASPxClientFileManagerItemsCopiedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an array of the currently processed items.
     * Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
     */
    items: ASPxClientFileManagerItem[];
    /**
     * Gets the full name of the folder from which items are copied.
     * Value: A string value that specifies the folder's full name.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the client FolderCreated event.
 */
interface ASPxClientFileManagerItemCreatedEventHandler<S> {
    /**
     * A method that will handle the FolderCreated event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerItemCreatedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerItemCreatedEventArgs): void;
}
/**
 * Provides data for the FolderCreated event.
 */
interface ASPxClientFileManagerItemCreatedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
}
/**
 * A method that will handle the client ErrorOccurred event.
 */
interface ASPxClientFileManagerErrorEventHandler<S> {
    /**
     * A method that will handle the client ErrorOccurred event.
     * @param source An object representing the event's source.
     * @param e An ASPxClientFileManagerErrorEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerErrorEventArgs): void;
}
/**
 * Provides data for the ErrorOccurred event.
 */
interface ASPxClientFileManagerErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value representing the processed command's name.
     */
    commandName: string;
    /**
     * Gets or sets the error description.
     * Value: A string value specifying the error description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether an event error message is sent to the ErrorAlertDisplaying event.
     * Value: true to sent an error message; otherwise, false.
     */
    showAlert: boolean;
    /**
     * Gets a specifically generated code that uniquely identifies an error, which occurs while editing an item.
     * Value: An integer value that specifies the code uniquely identifying an error.
     */
    errorCode: number;
}
/**
 * A method that will handle the client ErrorAlertDisplaying event.
 */
interface ASPxClientFileManagerErrorAlertDisplayingEventHandler<S> {
    /**
     * A method that will handle the ErrorAlertDisplaying event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerErrorAlertDisplayingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerErrorAlertDisplayingEventArgs): void;
}
/**
 * Provides data for the ErrorAlertDisplaying event.
 */
interface ASPxClientFileManagerErrorAlertDisplayingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value that is the processed command's name.
     */
    commandName: string;
    /**
     * Gets or sets the errors description.
     * Value: A string that is the errors description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether an alert message is displayed when the event fires.
     * Value: true to display an alert message; otherwise, false.
     */
    showAlert: boolean;
}
/**
 * A method that will handle the client FileUploading event.
 */
interface ASPxClientFileManagerFileUploadingEventHandler<S> {
    /**
     * A method that will handle the FileUploading event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFileUploadingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFileUploadingEventArgs): void;
}
/**
 * Provides data for the FileUploading event.
 */
interface ASPxClientFileManagerFileUploadingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the path to the folder where a file is being uploaded.
     * Value: A string value specifying the path where a file is being uploaded.
     */
    folder: string;
    /**
     * Gets the name of a file selected for upload.
     * Value: A string value that specifies the file name.
     */
    fileName: string;
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client FilesUploading event.
 */
interface ASPxClientFileManagerFilesUploadingEventHandler<S> {
    /**
     * A method that will handle the FilesUploading event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFilesUploadingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFilesUploadingEventArgs): void;
}
/**
 * Provides data for the FilesUploading event.
 */
interface ASPxClientFileManagerFilesUploadingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the path to the folder where files are being uploaded.
     * Value: A string value specifying the folder path.
     */
    folder: string;
    /**
     * Gets the names of files selected for upload.
     * Value: An array of string values that are the file names.
     */
    fileNames: string[];
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client FileUploaded event.
 */
interface ASPxClientFileManagerFileUploadedEventHandler<S> {
    /**
     * A method that will handle the FileUploaded event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFileUploadedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFileUploadedEventArgs): void;
}
/**
 * Provides data for the FileUploaded event.
 */
interface ASPxClientFileManagerFileUploadedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the path to the folder where a file is uploaded.
     * Value: A string value specifying the uploaded file path.
     */
    folder: string;
    /**
     * Gets the name of the uploaded file.
     * Value: A string value that specifies the file name.
     */
    fileName: string;
}
/**
 * A method that will handle the client FilesUploaded event.
 */
interface ASPxClientFileManagerFilesUploadedEventHandler<S> {
    /**
     * A method that will handle the FilesUploaded event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFilesUploadedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFilesUploadedEventArgs): void;
}
/**
 * Provides data for the FilesUploaded event.
 */
interface ASPxClientFileManagerFilesUploadedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the path to the folder where files are uploaded.
     * Value: A string value specifying the uploaded files path.
     */
    folder: string;
    /**
     * Gets an array of uploaded file names.
     * Value: An array of string values that are the file names.
     */
    fileNames: string[];
}
/**
 * A method that will handle the client FileDownloading event.
 */
interface ASPxClientFileManagerFileDownloadingEventHandler<S> {
    /**
     * A method that will handle the FileDownloading event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFileDownloadingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFileDownloadingEventArgs): void;
}
/**
 * Provides data for the FileDownloading event.
 */
interface ASPxClientFileManagerFileDownloadingEventArgs extends ASPxClientFileManagerFileEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event, should be canceled.
     * Value: true, if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client FocusedItemChanged event.
 */
interface ASPxClientFileManagerFocusedItemChangedEventHandler<S> {
    /**
     * A method that will handle the FocusedItemChanged event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerFocusedItemChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerFocusedItemChangedEventArgs): void;
}
/**
 * Provides data for the FocusedItemChanged event.
 */
interface ASPxClientFileManagerFocusedItemChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the file manager item object related to the event.
     * Value: An <see cref="ASPxClientFileManagerItem" /> object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientFileManagerItem;
    /**
     * Gets the name of the focused item.
     * Value: A string value that specifies the item's name.
     */
    name: string;
    /**
     * Gets the full name of the item currently being processed.
     * Value: A string value that is the item's full name.
     */
    fullName: string;
}
/**
 * A method that will handle the client CurrentFolderChanged event.
 */
interface ASPxClientFileManagerCurrentFolderChangedEventHandler<S> {
    /**
     * A method that will handle the CurrentFolderChanged event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerCurrentFolderChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerCurrentFolderChangedEventArgs): void;
}
/**
 * Provides data for the CurrentFolderChanged event.
 */
interface ASPxClientFileManagerCurrentFolderChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the currently processed folder.
     * Value: A string value that specifies the folder's name.
     */
    name: string;
    /**
     * Gets the full name of the folder currently being processed.
     * Value: A string value that is the folder's full name.
     */
    fullName: string;
}
/**
 * A method that will handle the client SelectionChanged event.
 */
interface ASPxClientFileManagerSelectionChangedEventHandler<S> {
    /**
     * A method that will handle the SelectionChanged event.
     * @param source The event source. Identifies the ASPxFileManager control that raised the event.
     * @param e A ASPxClientFileManagerSelectionChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerSelectionChangedEventArgs): void;
}
/**
 * Provides data for the SelectionChanged event.
 */
interface ASPxClientFileManagerSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the file manager item object related to the event.
     * Value: An <see cref="ASPxClientFileManagerItem" /> object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientFileManagerItem;
    /**
     * Gets the name of the currently processed file.
     * Value: A string value that specifies the file's name.
     */
    name: string;
    /**
     * Gets the full name of the file currently being processed.
     * Value: A string value that is the file's full name.
     */
    fullName: string;
    /**
     * Gets whether the item has been selected.
     * Value: true if the file has been selected; otherwise, false.
     */
    isSelected: boolean;
}
/**
 * A method that will handle the CustomCommand event.
 */
interface ASPxClientFileManagerCustomCommandEventHandler<S> {
    /**
     * A method that will handle the CustomCommand event.
     * @param source The event source.
     * @param e An ASPxClientFileManagerCustomCommandEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerCustomCommandEventArgs): void;
}
/**
 * Provides data for the CustomCommand event.
 */
interface ASPxClientFileManagerCustomCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     * Value: A string value that is the processed command's name.
     */
    commandName: string;
}
/**
 * A method that will handle the ToolbarUpdating event.
 */
interface ASPxClientFileManagerToolbarUpdatingEventHandler<S> {
    /**
     * A method that will handle the ToolbarUpdating event.
     * @param source The event source.
     * @param e An ASPxClientFileManagerToolbarUpdatingEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerToolbarUpdatingEventArgs): void;
}
/**
 * Provides data for the ToolbarUpdating event.
 */
interface ASPxClientFileManagerToolbarUpdatingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the currently active file manager area.
     * Value: A string value that identifies the active area.
     */
    activeAreaName: string;
}
/**
 * A method that will handle the client HighlightItemTemplate event.
 */
interface ASPxClientFileManagerHighlightItemTemplateEventHandler<S> {
    /**
     * A method that will handle the HighlightItemTemplate event.
     * @param source The event source. This parameter identifies the file manager object that raised the event.
     * @param e An ASPxClientFileManagerHighlightItemTemplateEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFileManagerHighlightItemTemplateEventArgs): void;
}
/**
 * Provides data for the HighlightItemTemplate event.
 */
interface ASPxClientFileManagerHighlightItemTemplateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a string that is a filter value specified by the filter box.
     * Value: A string that is a filter value.
     */
    filterValue: string;
    /**
     * Gets the name of the item currently being processed.
     * Value: A string that is the item name.
     */
    itemName: string;
    /**
     * Gets an element containing the item template.
     * Value: An object that is an element containing the item template.
     */
    templateElement: string;
    /**
     * Get the name of the cascading style sheet (CSS) class associated with an item in the highlighted state.
     * Value: A string that is the name of a CSS class.
     */
    highlightCssClassName: string;
}
/**
 * Represents a client-side equivalent of the menu's MenuItem object.
 */
interface ASPxClientMenuItem {
    /**
     * Gets the menu object to which the current item belongs.
     * Value: An ASPxClientMenuBase object representing the menu to which the item belongs.
     */
    menu: ASPxClientMenuBase;
    /**
     * Gets the immediate parent item to which the current item belongs.
     * Value: An ASPxClientMenuItem object representing the item's immediate parent.
     */
    parent: ASPxClientMenuItem;
    /**
     * Gets the item's index within the parent's collection of items.
     * Value: An integer value representing the item's zero-based index within the Items collection of the parent object (a menu or item) to which the item belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the menu item.
     * Value: A string value that represents the value assigned to the item's Name property.
     */
    name: string;
    /**
     * For internal use only.
     */
    indexPath: string;
    /**
     * Returns the number of the current menu item's immediate child items.
     */
    GetItemCount(): number;
    /**
     * Returns the current menu item's immediate subitem specified by its index.
     * @param index An integer value specifying the zero-based index of the submenu item to be retrieved.
     */
    GetItem(index: number): ASPxClientMenuItem;
    /**
     * Returns the current menu item's subitem specified by its name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): ASPxClientMenuItem;
    /**
     * Indicates whether the menu item is checked.
     */
    GetChecked(): boolean;
    /**
     * Specifies whether the menu item is checked.
     * @param value true if the menu item is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns a value specifying whether a menu item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the menu item is enabled.
     * @param value true to enable the menu item; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the menu item.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the menu item.
     * @param value A string value specifying the URL to the image displayed within the menu item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets a URL which defines the navigation location for the menu item.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the navigation location for the menu item.
     * @param value A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the menu item.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the menu item.
     * @param value A string value specifying the text to be displayed within the menu item.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a menu item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies the menu item's visibility.
     * @param value true if the menu item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A client-side equivalent of the file manager's FileManagerToolbarItemBase object.
 */
interface ASPxClientFileManagerToolbarItem extends ASPxClientMenuItem {
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    menu: ASPxClientMenuBase;
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    parent: ASPxClientMenuItem;
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    index: number;
}
/**
 * A client-side equivalent of the ASPxFormLayout's LayoutItem object.
 */
interface ASPxClientLayoutItem {
    /**
     * Gets the form layout object to which the current item belongs.
     * Value: An <see cref="ASPxClientFormLayout" /> object representing the form layout to which the item belongs.
     */
    formLayout: ASPxClientFormLayout;
    /**
     * Gets the name that uniquely identifies the layout item.
     * Value: A string value that represents the value assigned to the layout item's Name property.
     */
    name: string;
    /**
     * Gets the immediate parent layout item to which the current layout item belongs.
     * Value: An <see cref="ASPxClientLayoutItem" /> object representing the item's immediate parent.
     */
    parent: ASPxClientLayoutItem;
    /**
     * Returns the current layout item's subitem specified by its name.
     * @param name A string value specifying the name of the layout item.
     */
    GetItemByName(name: string): ASPxClientLayoutItem;
    /**
     * Returns a value specifying whether a layout item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies the layout item's visibility.
     * @param value true, if the layout item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Specifies the text displayed in the layout item caption.
     * @param caption A string value specifying the item caption.
     */
    SetCaption(caption: string): void;
    /**
     * Returns the text displayed in the layout item caption.
     */
    GetCaption(): string;
}
/**
 * Represents a client-side equivalent of the ASPxFormLayout object.
 */
interface ASPxClientFormLayout extends ASPxClientControl {
    /**
     * Returns an item specified by its name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientLayoutItem;
}
/**
 * Represents a client-side equivalent of the ASPxGlobalEvents component.
 */
interface ASPxClientGlobalEvents {
    /**
     * Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs when the browser window is being resized.
     */
    BrowserWindowResized: ASPxClientEvent<ASPxClientEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs when a callback for server-side processing is initiated by any DevExpress control.
     */
    BeginCallback: ASPxClientEvent<ASPxClientGlobalBeginCallbackEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by any of DevExpress web controls.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs on the client side after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
     */
    ValidationCompleted: ASPxClientEvent<ASPxClientValidationCompletedEventHandler<ASPxClientGlobalEvents>>;
}
/**
 * Represents a client-side equivalent of the ASPxHiddenField control.
 */
interface ASPxClientHiddenField extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientHiddenField>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientHiddenField>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHiddenField.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientHiddenField>>;
    /**
     * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Adds a new value to the control's collection of property name/value pairs, on the client side.
     * @param propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
     * @param propertyValue An object that represents the value of the specified property.
     */
    Add(propertyName: string, propertyValue: Object): void;
    /**
     * Returns the value with the specified property name.
     * @param propertyName A string value that specifies the property name.
     */
    Get(propertyName: string): Object;
    /**
     * Adds a new value to the control's collection of property name/value pairs, on the client side.
     * @param propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
     * @param propertyValue An object that represents the property value.
     */
    Set(propertyName: string, propertyValue: Object): void;
    /**
     * Removes the specified value from the ASPxHiddenField collection.
     * @param propertyName A string value representing the property name.
     */
    Remove(propertyName: string): void;
    /**
     * Clears the ASPxHiddenField's value collection.
     */
    Clear(): void;
    /**
     * Returns a value indicating whether the value with the specified property name is contained within the ASPxHiddenField control's value collection.
     * @param propertyName A string value that specifies the property name.
     */
    Contains(propertyName: string): boolean;
}
/**
 * The client-side equivalent of the ASPxImageGallery control.
 */
interface ASPxClientImageGallery extends ASPxClientDataView {
    /**
     * Fires on the client side before the fullscreen viewer is shown and allows you to cancel the action.
     */
    FullscreenViewerShowing: ASPxClientEvent<ASPxClientImageGalleryCancelEventHandler<ASPxClientImageGallery>>;
    /**
     * Occurs on the client side after an active item has been changed within the fullscreen viewer.
     */
    FullscreenViewerActiveItemIndexChanged: ASPxClientEvent<ASPxClientImageGalleryFullscreenViewerEventHandler<ASPxClientImageGallery>>;
    /**
     * Shows the fullscreen viewer with the specified active item.
     * @param index An Int32 value that is an index of the active item.
     */
    ShowFullscreenViewer(index: number): void;
    /**
     * Hides the fullscreen viewer.
     */
    HideFullscreenViewer(): void;
    /**
     * Makes the specified item active within the fullscreen viewer on the client side.
     * @param index An integer value specifying the index of the item to select.
     * @param preventAnimation true to prevent the animation effect; false to change images using animation.
     */
    SetFullscreenViewerActiveItemIndex(index: number, preventAnimation: boolean): void;
    /**
     * Gets the number of items contained in the control's item collection.
     */
    GetFullscreenViewerItemCount(): number;
    /**
     * Returns the index of the active item within the fullscreen viewer.
     */
    GetFullscreenViewerActiveItemIndex(): number;
    /**
     * Plays a slide show within a fullscreen viewer.
     */
    PlaySlideShow(): void;
    /**
     * Pauses a slide show within a fullscreen viewer.
     */
    PauseSlideShow(): void;
}
/**
 * A method that will handle the client FullscreenViewerShowing event.
 */
interface ASPxClientImageGalleryCancelEventHandler<S> {
    /**
     * A method that will handle the FullscreenViewerShowing event.
     * @param source The event source. Identifies the ASPxImageGallery control that raised the event.
     * @param e An ASPxClientImageGalleryCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientImageGalleryCancelEventArgs): void;
}
/**
 * Provides data for the FullscreenViewerShowing event.
 */
interface ASPxClientImageGalleryCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the index of the item related to the event.
     * Value: An <see cref="Int32" /> value that is the related item's index.
     */
    index: number;
    /**
     * Gets the unique identifier name of the item related to the event.
     * Value: A string value that specifies the item's unique identifier name.
     */
    name: string;
}
/**
 * A method that will handle the client FullscreenViewerActiveItemIndexChanged event.
 */
interface ASPxClientImageGalleryFullscreenViewerEventHandler<S> {
    /**
     * A method that will handle the FullscreenViewerActiveItemIndexChanged event.
     * @param source The event source. Identifies the ASPxImageGallery control that raised the event.
     * @param e An ASPxClientImageGalleryFullscreenViewerEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientImageGalleryFullscreenViewerEventArgs): void;
}
/**
 * Provides data for the FullscreenViewerActiveItemIndexChanged event.
 */
interface ASPxClientImageGalleryFullscreenViewerEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the index of the item related to the event.
     * Value: An <see cref="Int32" /> value that is the related item's index.
     */
    index: number;
    /**
     * Gets the unique identifier name of the item related to the event.
     * Value: A string value that specifies the item's unique identifier name.
     */
    name: string;
}
/**
 * A client-side equivalent of the ASPxImageSlider object.
 */
interface ASPxClientImageSlider extends ASPxClientControl {
    /**
     * Occurs after the active image, displayed within the image area, is changed.
     */
    ActiveItemChanged: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Fires after an image item has been clicked within the image area.
     */
    ItemClick: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Occurs on the client side when a thumbnail is clicked.
     */
    ThumbnailItemClick: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Returns an item specified by its index within the image slider's item collection.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): ASPxClientImageSliderItem;
    /**
     * Returns an item specified by its name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientImageSliderItem;
    /**
     * Returns the index of the active item within the image slider control.
     */
    GetActiveItemIndex(): number;
    /**
     * Makes the specified item active within the image slider control on the client side.
     * @param index An integer value specifying the index of the item to select.
     * @param preventAnimation true to prevent the animation effect; false to change images using animation.
     */
    SetActiveItemIndex(index: number, preventAnimation: boolean): void;
    /**
     * Returns the active item within the ASPxImageSlider control.
     */
    GetActiveItem(): ASPxClientImageSliderItem;
    /**
     * Makes the specified item active within the image slider control on the client side.
     * @param item An ASPxClientImageSliderItem object specifying the item to select.
     * @param preventAnimation true to prevent animation effect; false to enable animation.
     */
    SetActiveItem(item: ASPxClientImageSliderItem, preventAnimation: boolean): void;
    /**
     * Gets the number of items contained in the control's item collection.
     */
    GetItemCount(): number;
    /**
     * Sets input focus to the ASPxImageSlider control.
     */
    Focus(): void;
    /**
     * Plays a slide show within an image slider.
     */
    Play(): void;
    /**
     * Pauses a slide show within image slider.
     */
    Pause(): void;
    /**
     * Gets a value indicating whether the slide show is playing.
     */
    IsSlideShowPlaying(): boolean;
}
/**
 * A method that will handle the ItemClick events.
 */
interface ASPxClientImageSliderItemEventHandler<S> {
    /**
     * A method that will handle the ItemClick events.
     * @param source The event source. Identifies the ASPxImageSlider control that raised the event.
     * @param e An ASPxClientImageSliderItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientImageSliderItemEventArgs): void;
}
/**
 * Provides data for the ItemClick events.
 */
interface ASPxClientImageSliderItemEventArgs extends ASPxClientEventArgs {
    /**
     * Gets an item object related to the event.
     * Value: An <see cref="ASPxClientImageSliderItem" /> object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientImageSliderItem;
}
/**
 * A client-side equivalent of the image slider's ImageSliderItem object.
 */
interface ASPxClientImageSliderItem {
    /**
     * Gets an image slider to which the current item belongs.
     * Value: An <see cref="ASPxClientImageSlider" /> object that is the item's owner.
     */
    imageSlider: ASPxClientImageSlider;
    /**
     * Gets the item's index within an items collection.
     * Value: An integer value is the item's zero-based index within the Items collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the image slider item.
     * Value: A string value that is the value assigned to the item's Name property.
     */
    name: string;
    /**
     * Gets or sets the path to the image displayed within the ASPxClientImageSliderItem.
     * Value: A <see cref="String" /> value specifying the path to the image.
     */
    imageUrl: string;
    /**
     * Gets the item's display text.
     * Value: A string value that is the item's display text.
     */
    text: string;
}
/**
 * The client-side equivalent of the ASPxImageZoomNavigator object.
 */
interface ASPxClientImageZoomNavigator extends ASPxClientImageSlider {
}
/**
 * A client-side equivalent of the ASPxImageZoom object.
 */
interface ASPxClientImageZoom extends ASPxClientControl {
    /**
     * Sets the properties on an image displayed in the image zoom control.
     * @param imageUrl A string value specifying the path to the preview image displayed in the preview image.
     * @param largeImageUrl A string value specifying the path to the preview image displayed in the zoom window and the expand window.
     * @param zoomWindowText A string value specifying the text displayed in the zoom window.
     * @param expandWindowText A string value specifying the text displayed in the expand window.
     * @param alternateText A string value that specifies the alternate text displayed instead of the image.
     */
    SetImageProperties(imageUrl: string, largeImageUrl: string, zoomWindowText: string, expandWindowText: string, alternateText: string): void;
}
/**
 * Represents a client-side equivalent of the ASPxLoadingPanel control.
 */
interface ASPxClientLoadingPanel extends ASPxClientControl {
    /**
     * Invokes the loading panel.
     */
    Show(): void;
    /**
     * Invokes the loading panel, displaying it over the specified HTML element.
     * @param htmlElement An object that specifies the required HTML element.
     */
    ShowInElement(htmlElement: Object): void;
    /**
     * Invokes the loading panel, displaying it over the specified element.
     * @param id A string that specifies the required element's identifier.
     */
    ShowInElementByID(id: string): void;
    /**
     * Invokes the loading panel at the specified position.
     * @param x An integer value specifying the x-coordinate of the loading panel's display position.
     * @param y An integer value specifying the y-coordinate of the loaidng panel's display position.
     */
    ShowAtPos(x: number, y: number): void;
    /**
     * Sets the text to be displayed within the ASPxLoadingPanel.
     * @param text A string value specifying the text to be displayed within the ASPxLoadingPanel.
     */
    SetText(text: string): void;
    /**
     * Gets the text displayed within the ASPxLoadingPanel.
     */
    GetText(): string;
    /**
     * Hides the loading panel.
     */
    Hide(): void;
}
/**
 * Serves as the base type for the ASPxClientPopupMenu objects.
 */
interface ASPxClientMenuBase extends ASPxClientControl {
    /**
     * Fires after a menu item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientMenuItemClickEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when the mouse cursor is moved into a menu item.
     */
    ItemMouseOver: ASPxClientEvent<ASPxClientMenuItemMouseEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when the mouse cursor moves outside a menu item.
     */
    ItemMouseOut: ASPxClientEvent<ASPxClientMenuItemMouseEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when a submenu pops up.
     */
    PopUp: ASPxClientEvent<ASPxClientMenuItemEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when a submenu closes.
     */
    CloseUp: ASPxClientEvent<ASPxClientMenuItemEventHandler<ASPxClientMenuBase>>;
    /**
     * Returns the number of menu items at the root menu level.
     */
    GetItemCount(): number;
    /**
     * Returns the menu's root menu item specified by its index.
     * @param index An integer value specifying the zero-based index of the root menu item to be retrieved.
     */
    GetItem(index: number): ASPxClientMenuItem;
    /**
     * Returns a menu item specified by its name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): ASPxClientMenuItem;
    /**
     * Returns the selected item within the menu control.
     */
    GetSelectedItem(): ASPxClientMenuItem;
    /**
     * Selects the specified menu item within a menu control on the client side.
     * @param item An ASPxClientMenuItem object specifying the menu item to select.
     */
    SetSelectedItem(item: ASPxClientMenuItem): void;
    /**
     * Returns a root menu item.
     */
    GetRootItem(): ASPxClientMenuItem;
}
/**
 * Represents a client collection that maintains client menu objects.
 */
interface ASPxClientMenuCollection extends ASPxClientControlCollection {
    /**
     * Recalculates the position of visible sub menus.
     */
    RecalculateAll(): void;
    /**
     * Hides all menus maitained by the collection.
     */
    HideAll(): void;
}
/**
 * Represents a client-side equivalent of the ASPxMenu object.
 */
interface ASPxClientMenu extends ASPxClientMenuBase {
    /**
     * Gets a value specifying the menu orientation.
     */
    GetOrientation(): string;
    /**
     * Sets the menu orientation.
     * @param orientation 'Vertical' to orient the menu vertically; 'Horizontal' to orient the menu horizontally.
     */
    SetOrientation(orientation: string): void;
}
/**
 * A method that will handle the menu's client events concerning manipulations with an item.
 */
interface ASPxClientMenuItemEventHandler<S> {
    /**
     * A method that will handle the menu's client events concerning manipulations with an item.
     * @param source The event source. This parameter identifies the menu object which raised the event.
     * @param e An ASPxClientMenuItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientMenuItemEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on menu items.
 */
interface ASPxClientMenuItemEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the menu item object related to the event.
     * Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientMenuItem;
}
/**
 * A method that will handle client events which relate to mouse hovering (such as entering or leaving) over menu items.
 */
interface ASPxClientMenuItemMouseEventHandler<S> {
    /**
     * A method that will handle the ItemMouseOver events.
     * @param source An object representing the event source.
     * @param e A MenuItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientMenuItemMouseEventArgs): void;
}
/**
 * Provides data for client events which relate to mouse hovering (such as entering or leaving) over menu items.
 */
interface ASPxClientMenuItemMouseEventArgs extends ASPxClientMenuItemEventArgs {
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An HTML object representing a container for the item related to the event.
     */
    htmlElement: Object;
}
/**
 * A method that will handle client events concerning clicks on the control's items.
 */
interface ASPxClientMenuItemClickEventHandler<S> {
    /**
     * A method that will handle client ItemClick events.
     * @param source An object representing the event source.
     * @param e A MenuItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientMenuItemClickEventArgs): void;
}
/**
 * Provides data for events which concern clicking on the control's items.
 */
interface ASPxClientMenuItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the menu item object related to the event.
     * Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientMenuItem;
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An object representing a container for the item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Contains options affecting the touch scrolling functionality.
 */
interface ASPxClientTouchUIOptions {
    /**
     * Gets or sets a value that specifies whether or not the horizontal scroll bar should be displayed.
     * Value: true to display the horizontal scroll bar; otherwise, false. The default value is true.
     */
    showHorizontalScrollbar: boolean;
    /**
     * Gets or sets a value that specifies whether or not the vertical scroll bar should be displayed.
     * Value: true to display the vertical scroll bar; otherwise, false. The default value is true.
     */
    showVerticalScrollbar: boolean;
    /**
     * Gets or sets the name of the CSS class defining the vertical scroll bar's appearance.
     * Value: A string value specifying the class name.
     */
    vScrollClassName: string;
    /**
     * Gets or sets the name of the CSS class defining the horizontal scroll bar's appearance.
     * Value: A string value specifying the class name.
     */
    hScrollClassName: string;
}
/**
 * Contains a method allowing you to apply the current scroll extender to a specific element.
 */
interface ScrollExtender {
    /**
     * Applies the current scroll extender to the element specified by the ID.
     * @param id A string value specifying the element's ID.
     */
    ChangeElement(id: string): void;
    /**
     * Applies the current scroll extender to the specified DOM element.
     * @param element An object specifying the required DOM element.
     */
    ChangeElement(element: Object): void;
}
/**
 * Represents a client-side equivalent of the ASPxNavBar control.
 */
interface ASPxClientNavBar extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientNavBarItemEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client side after a group's expansion state has been changed.
     */
    ExpandedChanged: ASPxClientEvent<ASPxClientNavBarGroupEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client side before the expansion state of a group is changed.
     */
    ExpandedChanging: ASPxClientEvent<ASPxClientNavBarGroupCancelEventHandler<ASPxClientNavBar>>;
    /**
     * Fires when a group header is clicked.
     */
    HeaderClick: ASPxClientEvent<ASPxClientNavBarGroupClickEventHandler<ASPxClientNavBar>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientNavBar>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientNavBar>>;
    /**
     * Returns the number of groups in the navbar.
     */
    GetGroupCount(): number;
    /**
     * Returns a group specified by its index.
     * @param index An integer value specifying the zero-based index of the group object to retrieve.
     */
    GetGroup(index: number): ASPxClientNavBarGroup;
    /**
     * Returns a group specified by its name.
     * @param name A string value specifying the name of the group.
     */
    GetGroupByName(name: string): ASPxClientNavBarGroup;
    /**
     * Returns the navbar's active group.
     */
    GetActiveGroup(): ASPxClientNavBarGroup;
    /**
     * Makes the specified group active.
     * @param group A ASPxClientNavBarGroup object that specifies the active group.
     */
    SetActiveGroup(group: ASPxClientNavBarGroup): void;
    /**
     * Returns an item specified by its name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientNavBarItem;
    /**
     * Returns the selected item within the navbar control.
     */
    GetSelectedItem(): ASPxClientNavBarItem;
    /**
     * Selects the specified item within the navbar control on the client side.
     * @param item An ASPxClientNavBarItem object specifying the item to select.
     */
    SetSelectedItem(item: ASPxClientNavBarItem): void;
    /**
     * Collapses all groups of the navbar.
     */
    CollapseAll(): void;
    /**
     * Expands all groups of the navbar.
     */
    ExpandAll(): void;
}
/**
 * Represents a client-side equivalent of the navbar's NavBarGroup object.
 */
interface ASPxClientNavBarGroup {
    /**
     * Gets the navbar to which the current group belongs.
     * Value: An ASPxClientNavBar object representing the navbar to which the group belongs.
     */
    navBar: ASPxClientNavBar;
    /**
     * Gets the group's index within a collection of a navbar's groups.
     * Value: An integer value representing the group's zero-based index within the Groups collection of the navbar to which the group belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the group.
     * Value: A string value that represents the value assigned to the group's Name property.
     */
    name: string;
    /**
     * Returns a value specifying whether a group is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a value specifying whether the group is expanded.
     */
    GetExpanded(): boolean;
    /**
     * Sets the group's expansion state.
     * @param value true to expand the group; false to collapse the group.
     */
    SetExpanded(value: boolean): void;
    /**
     * Returns a value specifying whether a group is displayed.
     */
    GetVisible(): boolean;
    /**
     * Returns text displayed within a group.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within a group.
     * @param text A string value that is the text displayed within the navbar group.
     */
    SetText(text: string): void;
    /**
     * Specifies whether the group is visible.
     * @param value true if the group is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Returns the number of items in the group.
     */
    GetItemCount(): number;
    /**
     * Returns the group's item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): ASPxClientNavBarItem;
    /**
     * Returns a group item specified by its name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientNavBarItem;
}
/**
 * Represents a client-side equivalent of the navbar's NavBarItem object.
 */
interface ASPxClientNavBarItem {
    /**
     * Gets the navbar to which the current item belongs.
     * Value: An ASPxClientNavBar object representing the navbar to which the item belongs.
     */
    navBar: ASPxClientNavBar;
    /**
     * Gets the group to which the current item belongs.
     * Value: An ASPxClientNavBarGroup object representing the group to which the item belongs.
     */
    group: ASPxClientNavBarGroup;
    /**
     * Gets the item's index within a collection of a group's items.
     * Value: An integer value representing the item's zero-based index within the Items collection of the group to which the item belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the item.
     * Value: A string value that represents the value assigned to the item's Name property.
     */
    name: string;
    /**
     * Returns a value indicating whether an item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the item is enabled.
     * @param value true if the item is enabled; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL which points to the image displayed within the item.
     */
    GetImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the item.
     * @param value A string value that specifies the URL to the image displayed within the item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets an URL which defines the item's navigation location.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the item's navigation location.
     * @param value A string value which represents the URL to where the client web browser will navigate when the item is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the item.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within the item.
     * @param value A string value that represents the text displayed within the item.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether an item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the item is visible.
     * @param value true is the item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A method that will handle the navbar's client events concerning manipulations with an item.
 */
interface ASPxClientNavBarItemEventHandler<S> {
    /**
     * A method that will handle the navbar's client events concerning manipulations with an item.
     * @param source An object representing the event's source. Identifies the navbar object that raised the event.
     * @param e An ASPxClientNavBarItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientNavBarItemEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on items.
 */
interface ASPxClientNavBarItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the item object related to the event.
     * Value: An ASPxClientNavBarItem object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientNavBarItem;
    /**
     * Gets the HTML object that contains the processed navbar item.
     * Value: An object representing a container for the navbar item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the navbar's client events concerning manipulations with a group.
 */
interface ASPxClientNavBarGroupEventHandler<S> {
    /**
     * A method that will handle the navbar's client events concerning manipulations with a group.
     * @param source An object representing the event's source. Identifies the navbar object that raised the event.
     * @param e An ASPxClientNavBarGroupEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientNavBarGroupEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on groups.
 */
interface ASPxClientNavBarGroupEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the group object related to the event.
     * Value: An ASPxClientNavBarGroup object, manipulations on which forced the event to be raised.
     */
    group: ASPxClientNavBarGroup;
}
/**
 * A method that will handle the navbar's cancelable client events concerning manipulations with a group.
 */
interface ASPxClientNavBarGroupCancelEventHandler<S> {
    /**
     * A method that will handle the navbar's cancelable client events concerning manipulations with a group.
     * @param source An object representing the event's source. Identifies the navbar object that raised the event.
     * @param e An ASPxClientNavBarGroupCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientNavBarGroupCancelEventArgs): void;
}
/**
 * Provides data for cancellable events which concern manipulations on groups.
 */
interface ASPxClientNavBarGroupCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets the group object related to the event.
     * Value: An ASPxClientNavBarGroup object representing the group manipulations on which forced the navbar to raise the event.
     */
    group: ASPxClientNavBarGroup;
}
/**
 * A method that will handle client events concerning clicks on the control's group headers.
 */
interface ASPxClientNavBarGroupClickEventHandler<S> {
    /**
     * A method that will handle the navbar's client events concerning clicks on groups.
     * @param source The event source. This parameter identifies the navbar object which raised the event.
     * @param e An ASPxClientNavBarGroupClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientNavBarGroupClickEventArgs): void;
}
/**
 * Provides data for events which concern clicking on the control's group headers.
 */
interface ASPxClientNavBarGroupClickEventArgs extends ASPxClientNavBarGroupCancelEventArgs {
    /**
     * Gets the HTML object that contains the processed group.
     * Value: An object representing a container for the group related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Represents a client-side equivalent of the ASPxNewsControl object.
 */
interface ASPxClientNewsControl extends ASPxClientDataView {
    /**
     * Fires after an item's tail has been clicked.
     */
    TailClick: ASPxClientEvent<ASPxClientNewsControlItemEventHandler<ASPxClientNewsControl>>;
}
/**
 * A method that will handle client events concerning manipulations with an item.
 */
interface ASPxClientNewsControlItemEventHandler<S> {
    /**
     * A method that will handle the news control's client events concerning manipulations with an item.
     * @param source An object representing the event's source. Identifies the news control object that raised the event.
     * @param e An ASPxClientNewsControlItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientNewsControlItemEventArgs): void;
}
/**
 * Provides data for events which concern tail clicking within the control's items.
 */
interface ASPxClientNewsControlItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the name that uniquely identifies the processed item.
     * Value: A string value that represents the value assigned to the processed item's Name property.
     */
    name: Object;
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An object representing a container for the item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Represents a client-side equivalent of the ASPxObjectContainer control.
 */
interface ASPxClientObjectContainer extends ASPxClientControl {
    /**
     * Occurs on the client side when the FSCommand action is called within the associated flash object's action script.
     */
    FlashScriptCommand: ASPxClientEvent<ASPxClientFlashScriptCommandEventHandler<ASPxClientObjectContainer>>;
    /**
     * Play the Flash movie backwards.
     */
    Back(): void;
    /**
     * Returns the value of the Flash variable specified.
     * @param name A string value that specifies the Flash variable.
     */
    GetVariable(name: string): string;
    /**
     * Play the Flash movie forwards.
     */
    Forward(): void;
    /**
     * Activates the specified frame in the Flash movie.
     * @param frameNumber An integer value that specifies the requested frame.
     */
    GotoFrame(frameNumber: number): void;
    /**
     * Indicates whether the Flash movie is currently playing.
     */
    IsPlaying(): boolean;
    /**
     * Loads the Flash movie to the specified layer.
     * @param layerNumber An integer value that identifies a layer in which to load the movie.
     * @param url A string value that specifies the movie's URL.
     */
    LoadMovie(layerNumber: number, url: string): void;
    /**
     * Pans a zoomed-in Flash movie to the specified coordinates.
     * @param x An integer value that specifies the X-coordinate.
     * @param y An integer value that specifies the Y-coordinate.
     * @param mode 0 the coordinates are pixels; 1 the coordinates are a percentage of the window.
     */
    Pan(x: number, y: number, mode: number): void;
    /**
     * Returns the percent of the Flash Player movie that has streamed into the browser so far.
     */
    PercentLoaded(): string;
    /**
     * Starts playing the Flash movie.
     */
    Play(): void;
    /**
     * Rewinds the Flash movie to the first frame.
     */
    Rewind(): void;
    /**
     * Sets the value of the specified Flash variable.
     * @param name A string value that specifies the Flash variable.
     * @param value A string value that represents a new value.
     */
    SetVariable(name: string, value: string): void;
    /**
     * Zooms in on the specified rectangular area of the Flash movie.
     * @param left An integer value that specifies the x-coordinate of the rectangle's left side, in twips.
     * @param top An integer value that specifies the y-coordinate of the rectangle's top side, in twips.
     * @param right An integer value that specifies the x-coordinate of the rectangle's right side, in twips.
     * @param bottom An integer value that specifies the y-coordinate of the rectangle's bottom side, in twips.
     */
    SetZoomRect(left: number, top: number, right: number, bottom: number): void;
    /**
     * Stops playing the Flash movie.
     */
    StopPlay(): void;
    /**
     * Returns the total number of frames in the Flash movie.
     */
    TotalFrames(): number;
    /**
     * Zooms the Flash view by a relative scale factor.
     * @param percent An integer value that specifies the relative scale factor, as a  percentage.
     */
    Zoom(percent: number): void;
    /**
     * Starts playing a Quick Time movie.
     */
    QTPlay(): void;
    /**
     * Stops playing a Quick Time movie.
     */
    QTStopPlay(): void;
    /**
     * Rewinds a Quick Time movie to the first frame.
     */
    QTRewind(): void;
    /**
     * Steps through a Quick Time video stream by a specified number of frames.
     * @param count An integer value that specifies the number of frames to step.
     */
    QTStep(count: number): void;
}
/**
 * A method that will handle the FlashScriptCommand event.
 */
interface ASPxClientFlashScriptCommandEventHandler<S> {
    /**
     * A method that will handle the FlashScriptCommand event.
     * @param source The event source.
     * @param e A ASPxClientFlashScriptCommandEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientFlashScriptCommandEventArgs): void;
}
/**
 * Provides data for the FlashScriptCommand client event.
 */
interface ASPxClientFlashScriptCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a command passed via the FSCommand action of the flash object.
     * Value: A string that represents the value of the FSCommand action's command parameter.
     */
    command: string;
    /**
     * Gets arguments passed via the FSCommand action of the flash object.
     * Value: A string that represents the value of the FSCommand action's args parameter.
     */
    args: string;
}
/**
 * Lists the available link types within office documents.
 */
interface ASPxClientOfficeDocumentLinkType {
}
/**
 * Serves as the base class for controls that implement panel functionality.
 */
interface ASPxClientPanelBase extends ASPxClientControl {
    /**
     * Returns the HTML code that is the content of the panel.
     */
    GetContentHtml(): string;
    /**
     * Sets the HTML content for the panel.
     * @param html A string value that is the HTML code defining the content of the panel.
     */
    SetContentHtml(html: string): void;
    /**
     * Sets a value specifying whether the panel is enabled.
     * @param enabled true to enable the panel; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value specifying whether a panel is enabled.
     */
    GetEnabled(): boolean;
}
/**
 * Represents a client-side equivalent of the ASPxPanel control.
 */
interface ASPxClientPanel extends ASPxClientPanelBase {
    /**
     * Occurs when the expanded panel is closed.
     */
    Collapsed: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPanel>>;
    /**
     * Occurs when an end-user opens the expand panel.
     */
    Expanded: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPanel>>;
    /**
     * Expands or collapses the client panel.
     */
    Toggle(): void;
    /**
     * Returns a value specifying whether the panel can be expanded.
     */
    IsExpandable(): boolean;
    /**
     * Returns a value specifying whether the panel is expanded.
     */
    IsExpanded(): boolean;
    /**
     * Expands the collapsed panel.
     */
    Expand(): void;
    /**
     * Collapses the expanded panel.
     */
    Collapse(): void;
}
/**
 * Represents a client-side equivalent of the ASPxPopupControl control.
 */
interface ASPxClientPopupControl extends ASPxClientPopupControlBase {
    /**
     * Occurs when a popup window's close button is clicked.
     */
    CloseButtonClick: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControl>>;
    /**
     * This method is not in effect for a ASPxClientPopupControl object.
     */
    GetMainElement(): Object;
    /**
     * Returns an object containing the information about a mouse event that invoked a default popup window.
     */
    GetPopUpReasonMouseEvent(): Object;
    /**
     * Returns an object containing the information about a mouse event that invoked the specified popup window.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowPopUpReasonMouseEvent(window: ASPxClientPopupWindow): Object;
    /**
     * 
     * @param window 
     * @param parameter 
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, parameter: string): void;
    /**
     * Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
     * @param window A ASPxClientPopupWindow object identifying the processed popup window.
     * @param parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Specifies the default popup window's size.
     * @param width An integer value that specifies the default popup window's width.
     * @param height An integer value that specifies the default popup window's height.
     */
    SetSize(width: number, height: number): void;
    /**
     * Gets the width of the specified popup window's content region.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentWidth(window: ASPxClientPopupWindow): number;
    /**
     * Gets the height of the specified popup window's content region.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentHeight(window: ASPxClientPopupWindow): number;
    /**
     * Returns the height of a specific popup window.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowHeight(window: ASPxClientPopupWindow): number;
    /**
     * Returns the width of a specific popup window.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowWidth(window: ASPxClientPopupWindow): number;
    /**
     * Specifies the size of a specific popup window.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     * @param width An integer value that specifies the required popup window's width.
     * @param height An integer value that specifies the required popup window's height.
     */
    SetWindowSize(window: ASPxClientPopupWindow, width: number, height: number): void;
    /**
     * Returns the HTML code that is the content of the popup control's default popup window.
     */
    GetContentHTML(): string;
    /**
     * Defines the HTML content for the popup control's default popup window.
     * @param html A string value that is the HTML code defining the content of the popup window.
     */
    SetContentHTML(html: string): void;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
     * @param window An ASPxClientPopupWindow object representing a popup control's window.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
     */
    SetWindowPopupElementID(window: ASPxClientPopupWindow, popupElementId: string): void;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
     */
    SetPopupElementID(popupElementId: string): void;
    /**
     * Returns an index of the object that invoked the default window within the PopupElementID list.
     */
    GetCurrentPopupElementIndex(): number;
    /**
     * Returns an index of the object that invoked the specified popup window, within the window's PopupElementID list.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowCurrentPopupElementIndex(window: ASPxClientPopupWindow): number;
    /**
     * Returns an object that invoked the default window.
     */
    GetCurrentPopupElement(): Object;
    /**
     * Returns an object that invoked the specified popup window.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowCurrentPopupElement(window: ASPxClientPopupWindow): Object;
    /**
     * Returns a value that specifies whether the popup control's specific window is displayed.
     * @param window A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
     */
    IsWindowVisible(window: ASPxClientPopupWindow): boolean;
    /**
     * Returns a popup window specified by its index.
     * @param index An integer value specifying the zero-based index of the popup window object to be retrieved.
     */
    GetWindow(index: number): ASPxClientPopupWindow;
    /**
     * Returns a popup window specified by its name.
     * @param name A string value specifying the name of the popup window.
     */
    GetWindowByName(name: string): ASPxClientPopupWindow;
    /**
     * Returns the number of popup windows in the popup control.
     */
    GetWindowCount(): number;
    /**
     * Invokes the popup control's specific window.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     */
    ShowWindow(window: ASPxClientPopupWindow): void;
    /**
     * Invokes the specified popup window at the popup element with the specified index.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
     */
    ShowWindow(window: ASPxClientPopupWindow, popupElementIndex: number): void;
    /**
     * Invokes the popup control's specific window and displays it over the specified HTML element.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param htmlElement An object specifying the HTML element relative to whose position the default popup window is invoked.
     */
    ShowWindowAtElement(window: ASPxClientPopupWindow, htmlElement: Object): void;
    /**
     * Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
     */
    ShowWindowAtElementByID(window: ASPxClientPopupWindow, id: string): void;
    /**
     * Invokes the popup control's specific popup window at the specified position.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param x A integer value specifying the x-coordinate of the popup window's display position.
     * @param y A integer value specifying the y-coordinate of the popup window's display position.
     */
    ShowWindowAtPos(window: ASPxClientPopupWindow, x: number, y: number): void;
    /**
     * Brings the specified popup window to the front of the z-order.
     * @param window A ASPxClientPopupWindow object representing the popup window.
     */
    BringWindowToFront(window: ASPxClientPopupWindow): void;
    /**
     * Closes the popup control's specified window.
     * @param window A ASPxClientPopupWindow object representing the popup window to close.
     */
    HideWindow(window: ASPxClientPopupWindow): void;
    /**
     * Returns the HTML code that represents the contents of the specified popup window.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentHtml(window: ASPxClientPopupWindow): string;
    /**
     * Defines the HTML content for a specific popup window within the popup control.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     * @param html A string value that represents the HTML code defining the content of the specified popup window.
     */
    SetWindowContentHtml(window: ASPxClientPopupWindow, html: string): void;
    /**
     * Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    GetWindowContentIFrame(window: ASPxClientPopupWindow): Object;
    /**
     * Returns the URL pointing to the web page displayed within the control's specific popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    GetWindowContentUrl(window: ASPxClientPopupWindow): string;
    /**
     * Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param url A string value specifying the URL to the web page to be displayed within the specified popup window.
     */
    SetWindowContentUrl(window: ASPxClientPopupWindow, url: string): void;
    /**
     * Returns a value indicating whether the specified window is pinned.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowPinned(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is pinned.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to pin the window; otherwise, false.
     */
    SetWindowPinned(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Returns a value indicating whether the specified window is maximized.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowMaximized(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is maximized.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to maximize the window; otherwise, false.
     */
    SetWindowMaximized(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Returns a value indicating whether the specified window is collapsed.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowCollapsed(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is collapsed.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to collapse the window; otherwise, false.
     */
    SetWindowCollapsed(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Refreshes the content of the web page displayed within the control's specific popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    RefreshWindowContentUrl(window: ASPxClientPopupWindow): void;
    /**
     * Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
     */
    UpdatePosition(): void;
    /**
     * Updates the default popup window's position, to correctly align it at the specified HTML element.
     * @param htmlElement An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
     */
    UpdatePositionAtElement(htmlElement: Object): void;
    /**
     * Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    UpdateWindowPosition(window: ASPxClientPopupWindow): void;
    /**
     * Updates the specified popup window's position, to correctly align it at the specified HTML element.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     * @param htmlElement An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
     */
    UpdateWindowPositionAtElement(window: ASPxClientPopupWindow, htmlElement: Object): void;
    /**
     * Refreshes the connection between the ASPxPopupControl and the popup element.
     */
    RefreshPopupElementConnection(): void;
}
/**
 * Represents a client-side equivalent of a popup control's PopupWindow object.
 */
interface ASPxClientPopupWindow {
    /**
     * Gets the popup control to which the current popup window belongs.
     * Value: An ASPxClientPopupControl object representing the popup control to which the window belongs.
     */
    popupControl: ASPxClientPopupControl;
    /**
     * Gets the index of the current popup window within the popup control's Windows collection.
     * Value: An integer value representing the zero-based index of the current popup window within the Windows collection of the popup control to which the window belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current popup window.
     * Value: A string value that represents a value assigned to the popup window's Name property.
     */
    name: string;
    /**
     * Returns the URL pointing to the image displayed within the window header.
     */
    GetHeaderImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the window header.
     * @param value A string value that is the URL to the image displayed within the header.
     */
    SetHeaderImageUrl(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the window footer.
     */
    GetFooterImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the window footer.
     * @param value A string value that is the URL to the image displayed within the window footer.
     */
    SetFooterImageUrl(value: string): void;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
     */
    GetHeaderNavigateUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
     * @param value A string value which specifies the required navigation location.
     */
    SetHeaderNavigateUrl(value: string): void;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
     */
    GetFooterNavigateUrl(): string;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
     * @param value A string value which specifies the required navigation location.
     */
    SetFooterNavigateUrl(value: string): void;
    /**
     * Returns the text displayed within the window's header.
     */
    GetHeaderText(): string;
    /**
     * Specifies the text displayed within the window's header.
     * @param value A string value that specifies the window's header text.
     */
    SetHeaderText(value: string): void;
    /**
     * Returns the text displayed within the popup window's footer.
     */
    GetFooterText(): string;
    /**
     * Specifies the text displayed within the window's footer.
     * @param value A string value that specifies the window's footer text.
     */
    SetFooterText(value: string): void;
}
/**
 * A method that will handle the popup control's client events invoked in response to manipulating a popup window.
 */
interface ASPxClientPopupWindowEventHandler<S> {
    /**
     * A method that will handle the popup control's client events when a popup window is manipulated.
     * @param source An object representing the event's source. Identifies the popup control object (ASPxClientPopupControl) that raised the event.
     * @param e An ASPxClientPopupWindowEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPopupWindowEventArgs): void;
}
/**
 * Provides data for events concerning client manipulations on popup windows.
 */
interface ASPxClientPopupWindowEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the popup window object related to the event.
     * Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
     */
    window: ASPxClientPopupWindow;
}
/**
 * A method that will handle the popup window's cancellable client events, such as the Closing.
 */
interface ASPxClientPopupWindowCancelEventHandler<S> {
    /**
     * A method that will handle the popup window's cancelable client events.
     * @param source An object representing the event's source. Identifies the popup window object that raised the event.
     * @param e An ASPxClientPopupWindowCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPopupWindowCancelEventArgs): void;
}
/**
 * Provides data for the popup control's cancellable client events, such as the Closing.
 */
interface ASPxClientPopupWindowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the popup window object related to the event.
     * Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
     */
    window: ASPxClientPopupWindow;
    /**
     * Gets the value that identifies the reason the popup window is about to close.
     * Value: One of the ASPxClientPopupControlCloseReason enumeration values.
     */
    closeReason: ASPxClientPopupControlCloseReason;
}
/**
 * A method that will handle the CloseUp event.
 */
interface ASPxClientPopupWindowCloseUpEventHandler<S> {
    /**
     * A method that will handle the CloseUp event.
     * @param source The event source.
     * @param e An ASPxClientPopupWindowCloseUpEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPopupWindowCloseUpEventArgs): void;
}
/**
 * Provides data for the CloseUp event.
 */
interface ASPxClientPopupWindowCloseUpEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Gets the value that identifies the reason the popup window closes.
     * Value: One of the ASPxClientPopupControlCloseReason enumeration values.
     */
    closeReason: ASPxClientPopupControlCloseReason;
}
/**
 * A method that will handle the Resize event.
 */
interface ASPxClientPopupWindowResizeEventHandler<S> {
    /**
     * A method that will handle the Resize event.
     * @param source The event source.
     * @param e A ASPxClientPopupWindowResizeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPopupWindowResizeEventArgs): void;
}
/**
 * Provides data for the Resize event.
 */
interface ASPxClientPopupWindowResizeEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Returns the value indicating the window state after resizing.
     * Value: The integer value indicating the window resize state.
     */
    resizeState: number;
}
/**
 * A method that will handle the PinnedChanged event.
 */
interface ASPxClientPopupWindowPinnedChangedEventHandler<S> {
    /**
     * A method that will handle the PinnedChanged event.
     * @param source The event source.
     * @param e A ASPxClientPopupWindowPinnedChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientPopupWindowPinnedChangedEventArgs): void;
}
/**
 * Provides data for the PinnedChanged event.
 */
interface ASPxClientPopupWindowPinnedChangedEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Gets a value indicating whether the processed popup window has been pinned.
     * Value: true, if the window has been pinned; otherwise, false.
     */
    pinned: boolean;
}
/**
 * Represents a client collection that maintains client popup control objects.
 */
interface ASPxClientPopupControlCollection extends ASPxClientControlCollection {
    /**
     * Hides all popup windows maintained by the collection.
     */
    HideAllWindows(): void;
}
/**
 * Declares client constants that identify the reason the popup window closes.
 */
interface ASPxClientPopupControlCloseReason {
}
/**
 * Represents a client-side equivalent of the ASPxPopupMenu object.
 */
interface ASPxClientPopupMenu extends ASPxClientMenuBase {
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup menu is associated.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup menu is associated.
     */
    SetPopupElementID(popupElementId: string): void;
    /**
     * Returns an index of the object that invoked the popup menu within the PopupElementID list.
     */
    GetCurrentPopupElementIndex(): number;
    /**
     * Returns an object that invoked the popup menu.
     */
    GetCurrentPopupElement(): Object;
    /**
     * Refreshes the connection between the ASPxPopupMenu and the popup element.
     */
    RefreshPopupElementConnection(): void;
    /**
     * Hides the popup menu.
     */
    Hide(): void;
    /**
     * Invokes the popup menu.
     */
    Show(): void;
    /**
     * Invokes the popup menu at the popup element with the specified index.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element.
     */
    Show(popupElementIndex: number): void;
    /**
     * Invokes the popup menu and displays it over the specified HTML element.
     * @param htmlElement An object specifying the HTML element relative to which position the popup menu is invoked.
     */
    ShowAtElement(htmlElement: Object): void;
    /**
     * Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
     */
    ShowAtElementByID(id: string): void;
    /**
     * Invokes the popup menu at the specified position.
     * @param x An integer value specifying the x-coordinate of the popup menu's display position.
     * @param y An integer value specifying the y-coordinate of the popup menu's display position.
     */
    ShowAtPos(x: number, y: number): void;
}
/**
 * Represents the client-side equivalent of the ASPxRatingControl control.
 */
interface ASPxClientRatingControl extends ASPxClientControl {
    /**
     * Fires on the server after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientRatingControlItemClickEventHandler<ASPxClientRatingControl>>;
    /**
     * Occurs on the client side when the mouse cursor is moved into a rating control item.
     */
    ItemMouseOver: ASPxClientEvent<ASPxClientRatingControlItemMouseEventHandler<ASPxClientRatingControl>>;
    /**
     * Occurs on the client side when the mouse cursor moves outside a rating control item.
     */
    ItemMouseOut: ASPxClientEvent<ASPxClientRatingControlItemMouseEventHandler<ASPxClientRatingControl>>;
    /**
     * Gets the item tooltip title specified by the item index.
     * @param index An integer value specifying the item index.
     */
    GetTitle(index: number): string;
    /**
     * Returns a value indicating whether the control's status is read-only.
     */
    GetReadOnly(): boolean;
    /**
     * Specifies whether the control's status is read-only.
     * @param value true to make the control read-only; otherwise, false.
     */
    SetReadOnly(value: boolean): void;
    /**
     * Returns the value of the ASPxRatingControl.
     */
    GetValue(): number;
    /**
     * Modifies the value of the ASPxRatingControl on the client side.
     * @param value A decimal value representing the value of the control.
     */
    SetValue(value: number): void;
}
/**
 * A method that will handle the client ItemClick event.
 */
interface ASPxClientRatingControlItemClickEventHandler<S> {
    /**
     * A method that will handle the client ItemClick event.
     * @param source An object representing the event source.
     * @param e A ASPxClientRatingControlItemClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRatingControlItemClickEventArgs): void;
}
/**
 * Provides data for the ItemClick event.
 */
interface ASPxClientRatingControlItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the index of the item related to the event.
     * Value: An integer value that represents the clicked item's index.
     */
    index: number;
}
/**
 * A method that will handle the rating control's ItemMouseOver and ItemMouseOut client events (such as ItemMouseOut).
 */
interface ASPxClientRatingControlItemMouseEventHandler<S> {
    /**
     * A method that will handle the ItemMouseOver events.
     * @param source The event source.
     * @param e An ASPxClientRatingControlItemMouseEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRatingControlItemMouseEventArgs): void;
}
/**
 * Provides data for the rating control's ItemMouseOver and ItemMouseOut client events (such as ItemMouseOut).
 */
interface ASPxClientRatingControlItemMouseEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the index of the item related to the event.
     * Value: An integer value that represents the related item's index.
     */
    index: number;
}
/**
 * Represents the client-side equivalent of the ASPxRibbon control.
 */
interface ASPxClientRibbon extends ASPxClientControl {
    /**
     * Occurs after an end-user executes an action on a ribbon item.
     */
    CommandExecuted: ASPxClientEvent<ASPxClientRibbonCommandExecutedEventHandler<ASPxClientRibbon>>;
    /**
     * Fires on the client side after the active tab has been changed within a ribbon control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientRibbonTabEventHandler<ASPxClientRibbon>>;
    /**
     * Occurs on the client side when the ribbon minimization state is changed by end-user actions.
     */
    MinimizationStateChanged: ASPxClientEvent<ASPxClientRibbonMinimizationStateEventHandler<ASPxClientRibbon>>;
    /**
     * Occurs when the file tab is clicked.
     */
    FileTabClicked: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRibbon>>;
    /**
     * Fires on the client side after a dialog box launcher has been clicked.
     */
    DialogBoxLauncherClicked: ASPxClientEvent<ASPxClientRibbonDialogBoxLauncherClickedEventHandler<ASPxClientRibbon>>;
    /**
     * Fires after key tips are closed by pressing Esc.
     */
    KeyTipsClosedOnEscape: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRibbon>>;
    /**
     * Specifies whether the ribbon control is enabled.
     * @param enabled true to enable the ribbon; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether the ribbon is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a tab specified by its index.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): ASPxClientRibbonTab;
    /**
     * Returns a tab specified by its name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): ASPxClientRibbonTab;
    /**
     * Returns the number of tabs in the ribbon Tabs collection.
     */
    GetTabCount(): number;
    /**
     * Returns the active tab within the ribbon control.
     */
    GetActiveTab(): ASPxClientRibbonTab;
    /**
     * Makes the specified tab active in the ribbon control on the client side.
     * @param tab A ASPxClientRibbonTab object specifying the tab selection.
     */
    SetActiveTab(tab: ASPxClientRibbonTab): void;
    /**
     * Makes a tab active within the ribbon control, specifying the tab's index.
     * @param index An integer value specifying the index of the tab to select.
     */
    SetActiveTabIndex(index: number): void;
    /**
     * Returns a ribbon item specified by its name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientRibbonItem;
    /**
     * Returns a value of item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemValueByName(name: string): Object;
    /**
     * Sets the value of the item with the specified name.
     * @param name A string value specifying the name of the item.
     * @param value An object that is the new item value.
     */
    SetItemValueByName(name: string, value: Object): void;
    /**
     * Specifies whether the ribbon is minimized.
     * @param minimized true to set the ribbon state to minimized; false to set the ribbon state to normal.
     */
    SetMinimized(minimized: boolean): void;
    /**
     * Gets a value specifying whether the ribbon is minimized.
     */
    GetMinimized(): boolean;
    /**
     * Specifies the visibility of a context tab category specified by its name.
     * @param categoryName A Name property value of the required category.
     * @param visible true to make a category visible; false to make it hidden.
     */
    SetContextTabCategoryVisible(categoryName: string, visible: boolean): void;
    /**
     * Shows ribbon key tips.
     */
    ShowKeyTips(): void;
}
/**
 * A client-side equivalent of the ribbon's RibbonTab object.
 */
interface ASPxClientRibbonTab {
    /**
     * Gets the client ribbon object to which the current tab belongs.
     * Value: An <see cref="ASPxClientRibbon" /> object to which the tab belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Gets or sets the tab's index within the collection.
     * Value: An integer value that is the zero-based index of the tab within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon tab.
     * Value: A string value that is the tab's name.
     */
    name: string;
    /**
     * Returns the text displayed in the tab.
     */
    GetText(): string;
    /**
     * Sets a value specifying whether the tab is enabled.
     * @param enabled true to enable the tab; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether a ribbon tab is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a value specifying whether a ribbon tab is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A client-side equivalent of the ribbon's RibbonGroup object.
 */
interface ASPxClientRibbonGroup {
    /**
     * Gets the client ribbon object to which the current group belongs.
     * Value: An <see cref="ASPxClientRibbon" /> object to which the group belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Gets the client tab object to which the current group belongs.
     * Value: An <see cref="ASPxClientRibbonTab" /> object to which the group belongs.
     */
    tab: ASPxClientRibbonTab;
    /**
     * Gets or sets the group's index within the collection.
     * Value: An integer value that is the zero-based index of the group within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon group.
     * Value: A string value that is the group's name.
     */
    name: string;
    /**
     * Returns a value specifying whether a ribbon group is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A client-side equivalent of the ribbon's RibbonItemBase object.
 */
interface ASPxClientRibbonItem {
    /**
     * Gets the client group object to which the current item belongs.
     * Value: An <see cref="ASPxClientRibbonGroup" /> object to which the item belongs.
     */
    group: ASPxClientRibbonGroup;
    /**
     * Gets or sets the item's index within the collection.
     * Value: An integer value that is the zero-based index of the item within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon item.
     * Value: A string value that is the item's name.
     */
    name: string;
    /**
     * Gets the client ribbon object to which the current item belongs.
     * Value: An <see cref="ASPxClientRibbon" /> object to which the item belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Returns a value indicating whether a ribbon item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets a value specifying whether the item is enabled.
     * @param enabled true to enable the item; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns the item value.
     */
    GetValue(): Object;
    /**
     * Sets the item value.
     * @param value An  that specifies the item value.
     */
    SetValue(value: Object): void;
    /**
     * Returns a value specifying whether a ribbon item is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A method that will handle the CommandExecuted event.
 */
interface ASPxClientRibbonCommandExecutedEventHandler<S> {
    /**
     * A method that will handle the CommandExecuted event.
     * @param source The event source. Identifies the ASPxRibbon control that raised the event.
     * @param e An ASPxClientRibbonCommandExecutedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRibbonCommandExecutedEventArgs): void;
}
/**
 * Provides data for the CommandExecuted event.
 */
interface ASPxClientRibbonCommandExecutedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets an item object related to the event.
     * Value: An <see cref="ASPxClientRibbonItem" /> object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientRibbonItem;
    /**
     * Gets an optional parameter that complements the processed command.
     * Value: A string value containing additional information about the processed command.
     */
    parameter: string;
}
/**
 * A method that will handle the ActiveTabChanged event.
 */
interface ASPxClientRibbonTabEventHandler<S> {
    /**
     * A method that will handle the ActiveTabChanged event.
     * @param source The event source. Identifies the ASPxRibbon control that raised the event.
     * @param e A ASPxClientRibbonTabEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRibbonTabEventArgs): void;
}
/**
 * Provides data for the ActiveTabChanged event.
 */
interface ASPxClientRibbonTabEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the tab object related to the event.
     * Value: An <see cref="ASPxClientRibbonTab" /> object that is the tab, manipulations on which forced the ribbon control to raise the event.
     */
    tab: ASPxClientRibbonTab;
}
/**
 * A method that will handle the MinimizationStateChanged event.
 */
interface ASPxClientRibbonMinimizationStateEventHandler<S> {
    /**
     * A method that will handle the MinimizationStateChanged event.
     * @param source The event source. Identifies the ASPxRibbon control that raised the event.
     * @param e An ASPxClientRibbonMinimizationStateEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRibbonMinimizationStateEventArgs): void;
}
/**
 * Provides data for the MinimizationStateChanged event.
 */
interface ASPxClientRibbonMinimizationStateEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the value indicating the new ribbon state.
     * Value: The integer value indicating the ribbon minimization state.
     */
    ribbonState: number;
}
/**
 * A method that will handle the DialogBoxLauncherClicked event.
 */
interface ASPxClientRibbonDialogBoxLauncherClickedEventHandler<S> {
    /**
     * A method that will handle the DialogBoxLauncherClicked event.
     * @param source The event source. This parameter identifies the ribbon object which raised the event.
     * @param e An ASPxClientRibbonDialogBoxLauncherClickedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientRibbonDialogBoxLauncherClickedEventArgs): void;
}
/**
 * Provides data for the DialogBoxLauncherClicked event.
 */
interface ASPxClientRibbonDialogBoxLauncherClickedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the client group object to which the clicked dialog box launcher belongs.
     * Value: An <see cref="ASPxClientRibbonGroup" /> object to which the dialog box launcher belongs.
     */
    group: ASPxClientRibbonGroup;
}
/**
 * Represents a client-side equivalent of the ASPxRoundPanel control.
 */
interface ASPxClientRoundPanel extends ASPxClientPanelBase {
    /**
     * Fires on the client side after a panel has been expanded or collapsed via end-user interactions, i.e., by clicking a panel header or collapse button.
     */
    CollapsedChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRoundPanel>>;
    /**
     * Fires on the client side before a panel is expanded or collapsed by end-user interactions, i.e., by clicking a panel header or collapse button.
     */
    CollapsedChanging: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientRoundPanel>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientRoundPanel>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientRoundPanel>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientRoundPanel.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientRoundPanel>>;
    /**
     * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
     * @param parameter A string value that is any information that needs to be sent to the server-side ContentCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
     * @param parameter A string value that is any information that needs to be sent to the server-side ContentCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
    /**
     * Returns the text displayed within the panel's header.
     */
    GetHeaderText(): string;
    /**
     * Specifies the text displayed in the panel's header.
     * @param text A string value that specifies the panel header's text.
     */
    SetHeaderText(text: string): void;
    /**
     * Returns a value indicating whether the panel is collapsed.
     */
    GetCollapsed(): boolean;
    /**
     * Sets a value indicating whether the panel is collapsed.
     * @param collapsed true, to collapse the panel; otherwise, false.
     */
    SetCollapsed(collapsed: boolean): void;
}
/**
 * Represents a client-side equivalent of the ASPxSplitter object.
 */
interface ASPxClientSplitter extends ASPxClientControl {
    /**
     * Fires before a pane is resized.
     */
    PaneResizing: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been resized.
     */
    PaneResized: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires before a pane is collapsed.
     */
    PaneCollapsing: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been collapsed.
     */
    PaneCollapsed: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires before a pane is expanded.
     */
    PaneExpanding: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been expanded.
     */
    PaneExpanded: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Occurs when a pane resize operation has been completed.
     */
    PaneResizeCompleted: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a specific web page has been loaded into a pane.
     */
    PaneContentUrlLoaded: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Returns the number of panes at the root level of a splitter.
     */
    GetPaneCount(): number;
    /**
     * Returns the splitter's root pane specified by its index within the Panes collection.
     * @param index An integer value specifying the zero-based index of the root pane to be retrieved.
     */
    GetPane(index: number): ASPxClientSplitterPane;
    /**
     * Returns a pane specified by its name.
     * @param name A string value specifying the name of the pane.
     */
    GetPaneByName(name: string): ASPxClientSplitterPane;
    /**
     * Specifies whether the control's panes can be resized by end-users on the client side.
     * @param allowResize true if pane resizing is allowed; otherwise, false.
     */
    SetAllowResize(allowResize: boolean): void;
    /**
     * Returns a string value that represents the client state of splitter panes.
     */
    GetLayoutData(): string;
}
/**
 * Represents a client-side equivalent of the splitter's SplitterPane object.
 */
interface ASPxClientSplitterPane {
    /**
     * Gets the index of the current pane within the pane collection to which it belongs.
     * Value: An integer value representing the zero-based index of the current pane within the SplitterPaneCollection collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current splitter pane.
     * Value: A string value that represents the value assigned to the pane's Name property.
     */
    name: string;
    /**
     * Returns a client splitter object that contains the current pane.
     */
    GetSplitter(): ASPxClientSplitter;
    /**
     * Returns the immediate parent of the current pane.
     */
    GetParentPane(): ASPxClientSplitterPane;
    /**
     * Returns the previous sibling pane of the current pane.
     */
    GetPrevPane(): ASPxClientSplitterPane;
    /**
     * Returns the next sibling pane of the current pane.
     */
    GetNextPane(): ASPxClientSplitterPane;
    /**
     * Determines whether the current pane is the first pane within the SplitterPaneCollection.
     */
    IsFirstPane(): boolean;
    /**
     * Determines whether the current pane is the last pane within the SplitterPaneCollection.
     */
    IsLastPane(): boolean;
    /**
     * Returns a value that indicates the orientation in which the current pane and its sibling panes are stacked.
     */
    IsVertical(): boolean;
    /**
     * Returns the number of the current pane's immediate child panes.
     */
    GetPaneCount(): number;
    /**
     * Returns the current pane's immediate child pane specified by its index.
     * @param index An integer value specifying the zero-based index of the child pane to be retrieved.
     */
    GetPane(index: number): ASPxClientSplitterPane;
    /**
     * Returns the current pane's child pane specified by its name.
     * @param name A string value specifying the name of the pane.
     */
    GetPaneByName(name: string): ASPxClientSplitterPane;
    /**
     * Gets the width of the pane's content area.
     */
    GetClientWidth(): number;
    /**
     * Gets the height of the pane's content area.
     */
    GetClientHeight(): number;
    /**
     * Collapses the current pane and occupies its space by maximizing the specified pane.
     * @param maximizedPane A ASPxClientSplitterPane object specifying the pane to be maximized to occupy the freed space.
     */
    Collapse(maximizedPane: ASPxClientSplitterPane): boolean;
    /**
     * Collapses the current pane in a forward direction and occupies its space by maximizing the previous adjacent pane.
     */
    CollapseForward(): boolean;
    /**
     * Collapses the current pane in a backward direction, and occupies its space by maximizing the next adjacent pane.
     */
    CollapseBackward(): boolean;
    /**
     * Expands the current pane object on the client side.
     */
    Expand(): boolean;
    /**
     * Returns whether the pane is collapsed.
     */
    IsCollapsed(): boolean;
    /**
     * Returns whether the pane's content is loaded from an external web page.
     */
    IsContentUrlPane(): boolean;
    /**
     * Gets the URL of a web page displayed as a pane's content.
     */
    GetContentUrl(): string;
    /**
     * Sets the URL to point to a web page that should be loaded into, and displayed within the current pane.
     * @param url A string value specifying the URL to a web page displayed within the pane.
     */
    SetContentUrl(url: string): void;
    /**
     * Sets the URL to point to a web page that should be loaded into, and displayed within the current pane, but should not be cached by a client browser.
     * @param url A string value specifying the URL to a web page displayed within the pane.
     * @param preventBrowserCaching true to prevent the browser to cache the loaded content; false to allow browser caching.
     */
    SetContentUrl(url: string, preventBrowserCaching: boolean): void;
    /**
     * Refreshes the content of the web page displayed within the current pane.
     */
    RefreshContentUrl(): void;
    /**
     * Returns an iframe object containing a web page specified via the pane's SetContentUrl client method).
     */
    GetContentIFrame(): Object;
    /**
     * Specifies whether the current pane can be resized by end-users on the client side.
     * @param allowResize true if pane resizing is allowed; otherwise, false.
     */
    SetAllowResize(allowResize: boolean): void;
    /**
     * Forces the client PaneResized event to be generated.
     */
    RaiseResizedEvent(): void;
    /**
     * Returns an HTML element representing a splitter pane object.
     */
    GetElement(): Object;
    /**
     * Specifies the splitter pane's size in pixels.
     * @param size An integer value that specifies the splitter pane's size.
     */
    SetSize(size: number): void;
    /**
     * Specifies the splitter pane's size, in pixels or percents.
     * @param size A string value that specifies the splitter pane's size, in pixels or percents.
     */
    SetSize(size: string): void;
    /**
     * Returns the splitter pane's size, in pixels or percents.
     */
    GetSize(): string;
    /**
     * Returns the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
     */
    GetScrollTop(): number;
    /**
     * Specifies the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
     * @param value An integer value that is the distance (in pixels).
     */
    SetScrollTop(value: number): void;
    /**
     * Returns the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
     */
    GetScrollLeft(): number;
    /**
     * Specifies the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
     * @param value An integer value that is the distance (in pixels).
     */
    SetScrollLeft(value: number): void;
}
/**
 * A method that will handle the splitter's client events concerning manipulations with a pane.
 */
interface ASPxClientSplitterPaneEventHandler<S> {
    /**
     * A method that will handle the splitter's client events concerning pane manipulations.
     * @param source An object representing the event's source. Identifies the splitter object that raised the event.
     * @param e An ASPxClientSplitterPaneEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSplitterPaneEventArgs): void;
}
/**
 * A method that will handle the splitter's client events concerning manipulations with a pane.
 */
interface ASPxClientSplitterPaneEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the pane object related to the event.
     * Value: An ASPxClientSplitterPane object, manipulations on which forced the event to be raised.
     */
    pane: ASPxClientSplitterPane;
}
/**
 * A method that will handle a splitter control's cancelable client events concerning manipulations with a pane.
 */
interface ASPxClientSplitterPaneCancelEventHandler<S> {
    /**
     * A method that will handle a splitter control's cancelable client events concerning pane manipulations.
     * @param source An object representing the event's source. Identifies the splitter control object that raised the event.
     * @param e An ASPxClientSplitterPaneCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientSplitterPaneCancelEventArgs): void;
}
/**
 * Provides data for a splitter control's cancelable client events concerning manipulations with a pane.
 */
interface ASPxClientSplitterPaneCancelEventArgs extends ASPxClientSplitterPaneEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * Represents a base for the ASPxClientPageControl objects.
 */
interface ASPxClientTabControlBase extends ASPxClientControl {
    /**
     * Fires when a tab is clicked.
     */
    TabClick: ASPxClientEvent<ASPxClientTabControlTabClickEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client side after the active tab has been changed within a tab control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientTabControlTabEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client side before the active tab is changed within a tab control.
     */
    ActiveTabChanging: ASPxClientEvent<ASPxClientTabControlTabCancelEventHandler<ASPxClientTabControlBase>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTabControlBase>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTabControlBase>>;
    /**
     * Modifies a tab page's size in accordance with the content.
     */
    AdjustSize(): void;
    /**
     * Returns the active tab within the tab control.
     */
    GetActiveTab(): ASPxClientTab;
    /**
     * Makes the specified tab active within the tab control on the client side.
     * @param tab An ASPxClientTab object specifying the tab to select.
     */
    SetActiveTab(tab: ASPxClientTab): void;
    /**
     * Returns the index of the active tab within the tab control.
     */
    GetActiveTabIndex(): number;
    /**
     * Makes a tab active within the tab control, specifying the tab's index.
     * @param index An integer value specifying the index of the tab to select.
     */
    SetActiveTabIndex(index: number): void;
    /**
     * Returns the number of tabs in the ASPxTabControl.
     */
    GetTabCount(): number;
    /**
     * Returns a tab specified by its index.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): ASPxClientTab;
    /**
     * Returns a tab specified by its name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): ASPxClientTab;
}
/**
 * Represents a client-side equivalent of the ASPxTabControl object.
 */
interface ASPxClientTabControl extends ASPxClientTabControlBase {
}
/**
 * Represents a client-side equivalent of the ASPxPageControl object.
 */
interface ASPxClientPageControl extends ASPxClientTabControlBase {
    /**
     * Returns the HTML code that represents the contents of the specified page within the page control.
     * @param tab An ASPxClientTab object that specifies the required page.
     */
    GetTabContentHTML(tab: ASPxClientTab): string;
    /**
     * Defines the HTML content for a specific tab page within the page control.
     * @param tab An ASPxClientTab object that specifies the required tab page.
     * @param html A string value that represents the HTML code defining the content of the specified page.
     */
    SetTabContentHTML(tab: ASPxClientTab, html: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess: (arg1: string) => void): void;
}
/**
 * Represents a client-side equivalent of a tab control's TabPage object.
 */
interface ASPxClientTab {
    /**
     * Gets the tab control to which the current tab belongs.
     * Value: An ASPxClientTabControlBase object representing the control to which the tab belongs.
     */
    tabControl: ASPxClientTabControlBase;
    /**
     * Gets the index of the current tab (tabbed page) within the control's collection of tabs (tabbed pages).
     * Value: An integer value representing the zero-based index of the current tab (tabbed page) within the TabPages) collection of the control to which the tab belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current tab.
     * Value: A string value that represents the value assigned to the tab's Name property.
     */
    name: string;
    /**
     * Returns a value specifying whether a tab is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the tab is enabled.
     * @param value true to enable the tab; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the tab.
     */
    GetImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the tab.
     * @param value A string value that is the URL to the image displayed within the tab.
     */
    SetImageUrl(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the active tab.
     */
    GetActiveImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the active tab.
     * @param value A string value that is the URL to the image displayed within the active tab.
     */
    SetActiveImageUrl(value: string): void;
    /**
     * Gets an URL which defines the navigation location for the tab.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the navigation location for the tab.
     * @param value A string value which is a URL to where the client web browser will navigate when the tab is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the tab.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within the tab.
     * @param value A string value that is the text displayed within the tab.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a tab is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the tab is visible.
     * @param value true is the tab is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A method that will handle a tab control's client events concerning manipulations with a tab.
 */
interface ASPxClientTabControlTabEventHandler<S> {
    /**
     * A method that will handle a tab control's client events concerning manipulations with a tab.
     * @param source An object representing the event's source. Identifies the tab control object that raised the event.
     * @param e An ASPxClientTabControlTabEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTabControlTabEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on tabs.
 */
interface ASPxClientTabControlTabEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the tab object related to the event.
     * Value: An ASPxClientTab object, manipulations on which forced the event to be raised.
     */
    tab: ASPxClientTab;
}
/**
 * A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
 */
interface ASPxClientTabControlTabCancelEventHandler<S> {
    /**
     * A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
     * @param source An object representing the event's source. Identifies the tab control object that raised the event.
     * @param e An ASPxClientTabControlTabCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTabControlTabCancelEventArgs): void;
}
/**
 * Provides data for cancellable events which concern manipulations on tabs.
 */
interface ASPxClientTabControlTabCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets the tab object related to the event.
     * Value: An ASPxClientTab object representing the tab manipulations on which forced the tab control to raise the event.
     */
    tab: ASPxClientTab;
    /**
     * Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated.
     * Value: true to reload the page's content; otherwise, false.
     */
    reloadContentOnCallback: boolean;
}
/**
 * A method that will handle client events concerning clicks on the control's tabs.
 */
interface ASPxClientTabControlTabClickEventHandler<S> {
    /**
     * A method that will handle client events concerning clicks on tabs.
     * @param source The event source. This parameter identifies the tab control object which raised the event.
     * @param e An ASPxClientTabControlTabClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTabControlTabClickEventArgs): void;
}
/**
 * Provides data for events which concern clicking on the control's tabs.
 */
interface ASPxClientTabControlTabClickEventArgs extends ASPxClientTabControlTabCancelEventArgs {
    /**
     * Gets the HTML object that contains the processed tab.
     * Value: An object representing a container for the tab related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Represents a client-side equivalent of the ASPxTimer object.
 */
interface ASPxClientTimer extends ASPxClientControl {
    /**
     * Fires on the client side when the specified timer interval has elapsed, and the timer is enabled.
     */
    Tick: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTimer>>;
    /**
     * Returns a value indicating whether the timer is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Enables the timer.
     * @param enabled true to turn the timer on; false, to turn the timer off.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Gets the time before the Tick event.
     */
    GetInterval(): number;
    /**
     * Specifies the time before the Tick event.
     * @param interval An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event. The value cannot be less than one.
     */
    SetInterval(interval: number): void;
}
/**
 * Represents a client-side equivalent of the ASPxTitleIndex object.
 */
interface ASPxClientTitleIndex extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientTitleIndexItemEventHandler<ASPxClientTitleIndex>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTitleIndex>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTitleIndex>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTitleIndex.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTitleIndex>>;
}
/**
 * A method that will handle client events concerning manipulations with an item.
 */
interface ASPxClientTitleIndexItemEventHandler<S> {
    /**
     * A method that will handle the title index control's client events concerning manipulations with an item.
     * @param source An object representing the event's source. Identifies the title index control object that raised the event.
     * @param e An ASPxClientTitleIndexItemEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTitleIndexItemEventArgs): void;
}
/**
 * Provides data for events which concern manipulations on the control's items.
 */
interface ASPxClientTitleIndexItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the name that uniquely identifies the processed item.
     * Value: A string value that represents the value assigned to the processed item's Name property.
     */
    name: Object;
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An object representing a container for the item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * Represents a client-side equivalent of the ASPxTreeView object.
 */
interface ASPxClientTreeView extends ASPxClientControl {
    /**
     * Fires on the client side after a node has been clicked.
     */
    NodeClick: ASPxClientEvent<ASPxClientTreeViewNodeClickEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client side after a node's expansion state has been changed by end-user interaction.
     */
    ExpandedChanged: ASPxClientEvent<ASPxClientTreeViewNodeEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client side before the expansion state of a node is changed via end-user interaction.
     */
    ExpandedChanging: ASPxClientEvent<ASPxClientTreeViewNodeCancelEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs on the client side when the node's checked state is changed by clicking on a check box.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientTreeViewNodeProcessingModeEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTreeView>>;
    /**
     * Returns a node specified by its index within the ASPxTreeView's node collection.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): ASPxClientTreeViewNode;
    /**
     * Returns a node specified by its name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): ASPxClientTreeViewNode;
    /**
     * Returns a node specified by its text.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): ASPxClientTreeViewNode;
    /**
     * Returns the number of nodes at the ASPxTreeView's zero level.
     */
    GetNodeCount(): number;
    /**
     * Returns the selected node within the ASPxTreeView control on the client side.
     */
    GetSelectedNode(): ASPxClientTreeViewNode;
    /**
     * Selects the specified node within the ASPxTreeView control on the client side.
     * @param node An ASPxClientTreeViewNode object specifying the node to select.
     */
    SetSelectedNode(node: ASPxClientTreeViewNode): void;
    /**
     * Gets the root node of the ASPxTreeView object.
     */
    GetRootNode(): ASPxClientTreeViewNode;
    /**
     * Collapses all nodes in the ASPxTreeView on the client side.
     */
    CollapseAll(): void;
    /**
     * Expands all nodes in the ASPxTreeView on the client side.
     */
    ExpandAll(): void;
}
/**
 * Represents a client-side equivalent of the ASPxTreeView's TreeViewNode object.
 */
interface ASPxClientTreeViewNode {
    /**
     * Gets the client representation of the ASPxTreeView control to which the current node belongs.
     * Value: An ASPxClientTreeView object representing the control to which the node belongs.
     */
    treeView: ASPxClientTreeView;
    /**
     * Gets the current node's parent node.
     * Value: An ASPxClientTreeViewNode object representing the node's immediate parent.
     */
    parent: ASPxClientTreeViewNode;
    /**
     * Gets the node's index within the parent's collection of nodes.
     * Value: An integer value representing the node's zero-based index within the Nodes collection of the node to which the node belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the node.
     * Value: A string value that represents the value assigned to the node's Name property.
     */
    name: string;
    /**
     * Returns the number of the current node's immediate child nodes.
     */
    GetNodeCount(): number;
    /**
     * Returns the current node's immediate child node specified by its index.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): ASPxClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): ASPxClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its text.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): ASPxClientTreeViewNode;
    /**
     * Returns a value indicating whether the node is expanded.
     */
    GetExpanded(): boolean;
    /**
     * Sets a value which specifies the node's expansion state.
     * @param value true if the node is expanded; otherwise, false.
     */
    SetExpanded(value: boolean): void;
    /**
     * Returns a value indicating whether the node is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value indicating whether the node is checked.
     * @param value true if the node is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns a value which specifies the node's check state.
     */
    GetCheckState(): string;
    /**
     * Returns a value specifying whether the node is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets a value specifying whether the node is enabled.
     * @param value true to make the node enabled; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the node.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the node.
     * @param value A string value specifying the URL to the image displayed within the node.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets an URL which defines the navigation location for the node's hyperlink.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the node's navigate URL.
     * @param value A string value which specifies a URL to where the client web browser will navigate when the node is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Gets the text, displayed within the node.
     */
    GetText(): string;
    /**
     * Specifies the text, displayed within the node.
     * @param value A string value that represents the text displayed within the node.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a node is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the node is visible.
     * @param value true if the node is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Gets the HTML object that contains the current node.
     */
    GetHtmlElement(): Object;
}
/**
 * A method that will handle the client events concerned with node processing.
 */
interface ASPxClientTreeViewNodeProcessingModeEventHandler<S> {
    /**
     * A method that will handle the client events concerned with node processing.
     * @param source An object representing the event source. Identifies the ASPxClientTreeView control that raised the event.
     * @param e An ASPxClientTreeViewNodeProcessingModeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeViewNodeProcessingModeEventArgs): void;
}
/**
 * Provides data for the client events concerned with node processing, and that allow the event's processing to be passed to the server side.
 */
interface ASPxClientTreeViewNodeProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets a node object related to the event.
     * Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * A method that will handle the ASPxClientTreeView.ItemClick event.
 */
interface ASPxClientTreeViewNodeClickEventHandler<S> {
    /**
     * A method that will handle the NodeClick event.
     * @param source The ASPxClientTreeView control which fires the event.
     * @param e An ASPxClientTreeViewNodeClickEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeViewNodeClickEventArgs): void;
}
/**
 * Provides data for the NodeClick event.
 */
interface ASPxClientTreeViewNodeClickEventArgs extends ASPxClientTreeViewNodeProcessingModeEventArgs {
    /**
     * Gets the HTML object that contains the processed node.
     * Value: An object representing a container for the node related to the event.
     */
    htmlElement: Object;
    /**
     * Gets a DHTML event object that relates to the processed event.
     * Value: An object that maintains DHTML event-specific information.
     */
    htmlEvent: Object;
}
/**
 * A method that will handle the ASPxTreeView control's client events concerning manipulations with a node.
 */
interface ASPxClientTreeViewNodeEventHandler<S> {
    /**
     * A method that will handle the ASPxTreeView control's client events, concerning manipulations with a node.
     * @param source An object representing the event's source. Identifies the ASPxClientTreeView control object that raised the event.
     * @param e An ASPxClientTreeViewNodeEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeViewNodeEventArgs): void;
}
/**
 * Provides data for the ExpandedChanged events.
 */
interface ASPxClientTreeViewNodeEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a node object related to the event.
     * Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
 */
interface ASPxClientTreeViewNodeCancelEventHandler<S> {
    /**
     * A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
     * @param source An object representing the event's source. Identifies the ASPxClientTreeView object that raised the event.
     * @param e An ASPxClientTreeViewNodeCancelEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientTreeViewNodeCancelEventArgs): void;
}
/**
 * Provides data for the ExpandedChanging event.
 */
interface ASPxClientTreeViewNodeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Gets a node object related to the event.
     * Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * Represents a client-side equivalent of the ASPxUploadControl control.
 */
interface ASPxClientUploadControl extends ASPxClientControl {
    /**
     * Occurs on the client after a file has been uploaded.
     */
    FileUploadComplete: ASPxClientEvent<ASPxClientUploadControlFileUploadCompleteEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client after upload of all selected files has been completed.
     */
    FilesUploadComplete: ASPxClientEvent<ASPxClientUploadControlFilesUploadCompleteEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side before upload of the specified files starts.
     */
    FileUploadStart: ASPxClientEvent<ASPxClientUploadControlFilesUploadStartEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side before file upload is started.
     */
    FilesUploadStart: ASPxClientEvent<ASPxClientUploadControlFilesUploadStartEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires on the client side when the text within the control's edit box is changed while the control has focus.
     */
    TextChanged: ASPxClientEvent<ASPxClientUploadControlTextChangedEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side when the progress bar indicator position is changed.
     */
    UploadingProgressChanged: ASPxClientEvent<ASPxClientUploadControlUploadingProgressChangedEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side when the file input elements count is changed.
     */
    FileInputCountChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires when the mouse enters a drop zone or an external drop zone element while dragging a file.
     */
    DropZoneEnter: ASPxClientEvent<ASPxClientUploadControlDropZoneEnterEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires when the mouse leaves a drop zone or an external drop zone element while dragging a file.
     */
    DropZoneLeave: ASPxClientEvent<ASPxClientUploadControlDropZoneLeaveEventHandler<ASPxClientUploadControl>>;
    /**
     * Initiates uploading of the specified file to the web server's memory.
     */
    UploadFile(): void;
    /**
     * Adds a new file input element to the ASPxUploadControl.
     */
    AddFileInput(): void;
    /**
     * Removes a file input element from the ASPxUploadControl.
     * @param index An integer value that represents a file input element's index.
     */
    RemoveFileInput(index: number): void;
    /**
     * Removes a file with the specified index from the selected file list.
     * @param fileIndex An integer value that is the zero-based index of an item in the file list.
     */
    RemoveFileFromSelection(fileIndex: number): void;
    /**
     * Gets the text displayed within the edit box of the specified file input element.
     * @param index An integer value that specifies the required file input element's index.
     */
    GetText(index: number): string;
    /**
     * Gets the number of file input elements contained within the ASPxUploadControl.
     */
    GetFileInputCount(): number;
    /**
     * Specifies the count of the file input elements within the upload control.
     * @param count An integer value that specifies the file input elements count.
     */
    SetFileInputCount(count: number): void;
    /**
     * Specifies whether the upload control is enabled.
     * @param enabled true, to enable the upload control; otherwise, false.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether the upload control is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Initiates uploading of the specified file(s) to the web server's memory.
     */
    Upload(): void;
    /**
     * Cancels the initiated file uploading process.
     */
    Cancel(): void;
    /**
     * Clears the file selection in the upload control.
     */
    ClearText(): void;
    /**
     * Sets the text to be displayed within the add button.
     * @param text A string value specifying the text to be displayed within the button.
     */
    SetAddButtonText(text: string): void;
    /**
     * Sets the text to be displayed within the upload button.
     * @param text A string value specifying the text to be displayed within the button.
     */
    SetUploadButtonText(text: string): void;
    /**
     * Returns the text displayed within the add button.
     */
    GetAddButtonText(): string;
    /**
     * Returns the text displayed within the upload button.
     */
    GetUploadButtonText(): string;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
     * @param ids A string value specifying the ID or a list of IDs separated by the semicolon (;).
     */
    SetDialogTriggerID(ids: string): void;
}
/**
 * A method that will handle the client FilesUploadStart event.
 */
interface ASPxClientUploadControlFilesUploadStartEventHandler<S> {
    /**
     * A method that will handle the FilesUploadStart event.
     * @param source The event source. Identifies the ASPxUploadControl control that raised the event.
     * @param e A ASPxClientUploadControlFilesUploadStartEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlFilesUploadStartEventArgs): void;
}
/**
 * Provides data for the FilesUploadStart event.
 */
interface ASPxClientUploadControlFilesUploadStartEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     * Value: true if the action that raised the event should be canceled; otherwise, false.
     */
    cancel: boolean;
}
/**
 * A method that handles the FileUploadComplete client event.
 */
interface ASPxClientUploadControlFileUploadCompleteEventHandler<S> {
    /**
     * A method that will handle the corresponding client event.
     * @param source The event source. This parameter identifies the upload control which raised the event.
     * @param e An ASPxClientUploadControlFileUploadCompleteEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlFileUploadCompleteEventArgs): void;
}
/**
 * Provides data for the FileUploadComplete event.
 */
interface ASPxClientUploadControlFileUploadCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the index of a file input element within the ASPxUploadControl.
     * Value: An integer value that specifies the file input element's index.
     */
    inputIndex: number;
    /**
     * Gets or sets a value indicating whether the uploaded file passes validation.
     * Value: true if the file is valid; otherwise, false.
     */
    isValid: boolean;
    /**
     * Gets the error text to be displayed within the ASPxUploadControl's error frame.
     * Value: A string value that represents the error text.
     */
    errorText: string;
    /**
     * Gets a string that contains specific information (if any) passed from the server side for further client processing.
     * Value: A string value representing callback data passed from the server.
     */
    callbackData: string;
}
/**
 * A method that will handle the FilesUploadComplete client event.
 */
interface ASPxClientUploadControlFilesUploadCompleteEventHandler<S> {
    /**
     * A method that will handle the client FilesUploadComplete event.
     * @param source The event source. This parameter identifies the upload control which raised the event.
     * @param e A  object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlFilesUploadCompleteEventArgs): void;
}
/**
 * Provides data for the FilesUploadComplete client event, which enables you to perform specific actions after all selected files have been uploaded.
 */
interface ASPxClientUploadControlFilesUploadCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the error text to be displayed within the upload control's error frame.
     * Value: A string value that is the error text.
     */
    errorText: string;
    /**
     * Gets a string that contains specific information (if any) passed from the server side for further client processing.
     * Value: A string value that is the callback data passed from the server.
     */
    callbackData: string;
}
/**
 * A method that will handle the TextChanged client event.
 */
interface ASPxClientUploadControlTextChangedEventHandler<S> {
    /**
     * A method that will handle the TextChanged client event.
     * @param source The event source. This parameter identifies the upload control which raised the event.
     * @param e An ASPxClientUploadControlTextChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlTextChangedEventArgs): void;
}
/**
 * Provides data for the TextChanged client event that allows you to respond to an end-user changing an edit box's text.
 */
interface ASPxClientUploadControlTextChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the index of a file input element within the ASPxUploadControl.
     * Value: An integer value that specifies the file input element's index.
     */
    inputIndex: number;
}
/**
 * A method that will handle the ASPxUploadControl's client event, concerned with changes in upload progress.
 */
interface ASPxClientUploadControlUploadingProgressChangedEventHandler<S> {
    /**
     * A method that will handle the ASPxUploadControl's client event concerning the uploading process being changed.
     * @param source An object representing the event's source. Identifies the ASPxUploadControl object that raised the event.
     * @param e An ASPxClientUploadControlUploadingProgressChangedEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlUploadingProgressChangedEventArgs): void;
}
/**
 * Provides data for the UploadingProgressChanged event.
 */
interface ASPxClientUploadControlUploadingProgressChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the number of the files selected for upload.
     * Value: An integer value that represents the total number of selected files.
     */
    fileCount: number;
    /**
     * Gets the name of the file being currently uploaded.
     * Value: A string value that represents the file name.
     */
    currentFileName: string;
    /**
     * Gets the content length of the currently uploaded file.
     * Value: An integer value specifying the content length.
     */
    currentFileContentLength: number;
    /**
     * Gets the content length of the current file already uploaded to the server.
     * Value: An integer value that is the content length.
     */
    currentFileUploadedContentLength: number;
    /**
     * Gets the position of the current file upload progress.
     * Value: An <see cref="Int32" /> value specifying the upload progress position.
     */
    currentFileProgress: number;
    /**
     * Gets the content length of the files selected for upload.
     * Value: An integer value specifying the total content length of the selected files.
     */
    totalContentLength: number;
    /**
     * Gets the content length of the files already uploaded to the server.
     * Value: An integer value that represents the content length.
     */
    uploadedContentLength: number;
    /**
     * Gets the current position of total upload progress.
     * Value: An <see cref="Int32" /> value specifying the total upload progress position.
     */
    progress: number;
}
/**
 * A method that will handle the DropZoneEnter event.
 */
interface ASPxClientUploadControlDropZoneEnterEventHandler<S> {
    /**
     * A method that will handle the DropZoneEnter event.
     * @param source The event source. This parameter identifies the upload control object which raised the event.
     * @param e An ASPxClientUploadControlDropZoneEnterEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlDropZoneEnterEventArgs): void;
}
/**
 * Provides data for the DropZoneEnter event.
 */
interface ASPxClientUploadControlDropZoneEnterEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a drop zone object related to the processed event.
     * Value: An object that is a drop zone related to the processed event.
     */
    dropZone: Object;
}
/**
 * A method that will handle the DropZoneLeave event.
 */
interface ASPxClientUploadControlDropZoneLeaveEventHandler<S> {
    /**
     * A method that will handle the DropZoneLeave event.
     * @param source The event source. Identifies the upload control object that raised the event.
     * @param e A ASPxClientUploadControlDropZoneLeaveEventArgs object that contains event data.
     */
    (source: S, e: ASPxClientUploadControlDropZoneLeaveEventArgs): void;
}
/**
 * Provides data for the DropZoneLeave event.
 */
interface ASPxClientUploadControlDropZoneLeaveEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a drop zone object related to the processed event.
     * Value: An object that is a drop zone related to the processed event.
     */
    dropZone: Object;
}
/**
 * The JavaScript equivalent of the ASPxChartDesigner class.
 */
interface ASPxClientChartDesigner extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientChartDesigner>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientChartDesigner>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientChartDesigner.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientChartDesigner>>;
    /**
     * Occurs when executing the Save command on the client.
     */
    SaveCommandExecute: ASPxClientEvent<ASPxClientChartDesignerSaveCommandExecuteEventHandler<ASPxClientChartDesigner>>;
    /**
     * Enables you to customize the menu actions of a Client Chart Designer.
     */
    CustomizeMenuActions: ASPxClientEvent<ASPxClientChartDesignerCustomizeMenuActionsEventHandler<ASPxClientChartDesigner>>;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess: (arg1: string) => void): void;
    /**
     * Updates the localization settings of the ASPxClientChartDesigner properties.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Returns the model of the Client Chart Designer.
     */
    GetDesignerModel(): Object;
    /**
     * For internal use.
     */
    GetJsonChartModel(): string;
}
/**
 * A method that will handle the SaveCommandExecute  event.
 */
interface ASPxClientChartDesignerSaveCommandExecuteEventHandler<S> {
    /**
     * Represents a method that will handle the SaveCommandExecute event.
     * @param source The event source. This parameter identifies the ASPxChartDesigner which raised the event.
     * @param e A ASPxClientChartDesignerSaveCommandExecuteEventArgs object which contains event data.
     */
    (source: S, e: ASPxClientChartDesignerSaveCommandExecuteEventArgs): void;
}
/**
 * Provides data for a chart control's SaveCommandExecute event.
 */
interface ASPxClientChartDesignerSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets a value specifying whether an event has been handled.
     * Value: true, if the event hasn't been handled by a control; otherwise, false.
     */
    handled: boolean;
}
/**
 * Represents a method that will handle the CustomizeMenuActions events.
 */
interface ASPxClientChartDesignerCustomizeMenuActionsEventHandler<S> {
    /**
     * Represents a method that will handle the CustomizeMenuActions event.
     * @param source The event source. This parameter identifies the ASPxChartDesigner which raised the event.
     * @param e An ASPxClientChartDesignerCustomizeMenuActionsEventArgs object which contains event data.
     */
    (source: S, e: ASPxClientChartDesignerCustomizeMenuActionsEventArgs): void;
}
/**
 * An action of the Client Chart Designer's menu.
 */
interface ASPxClientChartDesignerMenuAction {
    /**
     * Provides access to the text for the command.
     * Value: A String value.
     */
    text: string;
    /**
     * Provides access to the CSS class of the command's glyph.
     * Value: A String value.
     */
    imageClassName: string;
    /**
     * Provides access to the action performed when the Client Chart Designer's button is clicked.
     * Value: The specific action implementation.
     */
    clickAction: Function;
    /**
     * Provides access to the value that specifies whether or not the command is disabled by default.
     * Value: true, if the command is disabled by default; otherwise, false.
     */
    disabled: boolean;
    /**
     * Provides access to the value that specifies whether or not the command is visible in the designer user interface.
     * Value: true if the command is visible; otherwise false.
     */
    visible: boolean;
    /**
     * Provides access to the keyboard shortcut used to invoke the command.
     * Value: A String value.
     */
    hotKey: string;
    /**
     * Provides access to the value that specifies whether or not the command has a visual separator.
     * Value: true, if the command has a visual separator; otherwise, false.
     */
    hasSeparator: string;
    /**
     * Provides access to the location of the displayed command.
     * Value: A String value.
     */
    container: string;
}
/**
 * Provides data for a chart control's CustomizeMenuActions event on the client side.
 */
interface ASPxClientChartDesignerCustomizeMenuActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Returns an array of the Client Chart Designer's menu actions.
     * Value: An array of the ASPxClientChartDesignerMenuAction objects.
     */
    actions: ASPxClientChartDesignerMenuAction[];
}
/**
 * A class which provides access to the entire hierarchy of chart elements on the client side.
 */
interface ASPxClientWebChartControl extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientWebChartControl.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs on the client side when any chart element is hot-tracked.
     */
    ObjectHotTracked: ASPxClientEvent<ASPxClientWebChartControlHotTrackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs before crosshair items are drawn when the chart's contents are being drawn.
     */
    CustomDrawCrosshair: ASPxClientEvent<ASPxClientWebChartControlCustomDrawCrosshairEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs on the client side when any chart element is selected.
     */
    ObjectSelected: ASPxClientEvent<ASPxClientWebChartControlHotTrackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
     */
    GetChart(): ASPxClientWebChart;
    /**
     * Returns the printing options of the chart control.
     */
    GetPrintOptions(): ASPxClientChartPrintOptions;
    /**
     * Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
     * @param cursor A string value representing the name of the desired cursor.
     */
    SetCursor(cursor: string): void;
    /**
     * Returns the specific chart element which is located under the test point.
     * @param x An integer value that specifies the x coordinate of the test point.
     * @param y An integer value that specifies the y coordinate of the test point.
     */
    HitTest(x: number, y: number): ASPxClientHitObject[];
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(args: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess: (arg1: string) => void): void;
    /**
     * Prints the current chart on the client side.
     */
    Print(): void;
    /**
     * Loads a chart which should be customized from its object model.
     * @param serializedChartObjectModel A String object representing the chart model.
     */
    LoadFromObjectModel(serializedChartObjectModel: string): void;
    /**
     * Exports a chart to the file of the specified format, and saves it to the disk.
     * @param format A string value specifying the format, to which a chart should be exported.
     */
    SaveToDisk(format: string): void;
    /**
     * Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
     * @param format A string value specifying the format, to which a chart should be exported.
     * @param filename A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
     */
    SaveToDisk(format: string, filename: string): void;
    /**
     * Exports a report to the file of the specified format, and shows it in a new Web Browser window.
     * @param format A string  value specifying a format in which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
     */
    GetMainDOMElement(): Object;
}
/**
 * A method that will handle the CustomDrawCrosshair  event.
 */
interface ASPxClientWebChartControlCustomDrawCrosshairEventHandler<S> {
    /**
     * A method that will handle the CustomDrawCrosshair event.
     * @param source The event source. This parameter identifies the chartControl which raised the event.
     * @param e An ASPxClientWebChartControlCustomDrawCrosshairEventArgs object which contains event data.
     */
    (source: S, e: ASPxClientWebChartControlCustomDrawCrosshairEventArgs): void;
}
/**
 * Provides data for a chart control's CustomDrawCrosshair event.
 */
interface ASPxClientWebChartControlCustomDrawCrosshairEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets crosshair elements settings  to custom draw a crosshair cursor.
     * Value: An  ASPxClientCrosshairElement object.
     */
    crosshairElements: ASPxClientCrosshairElement;
    /**
     * Gets the settings of crosshair axis label elements to customize their appearance.
     * Value: An ASPxClientCrosshairAxisLabelElement object.
     */
    cursorCrosshairAxisLabelElements: ASPxClientCrosshairAxisLabelElement;
    /**
     * Gets crosshair line element settings that are used to custom draw a crosshair cursor.
     * Value: An ASPxClientCrosshairLineElement object that contains crosshair line element settings.
     */
    cursorCrosshairLineElement: ASPxClientCrosshairLineElement;
    /**
     * Gets the settings of crosshair group header elements to customize their appearance.
     * Value: An ASPxClientCrosshairGroupHeaderElement object.
     */
    crosshairGroupHeaderElements: ASPxClientCrosshairGroupHeaderElement;
    /**
     * Provides access to the settings of crosshair elements and crosshair group header elements to customize their appearance.
     * Value: An ASPxClientCrosshairElementGroup object.
     */
    crosshairElementGroups: ASPxClientCrosshairElementGroup;
}
/**
 * Represents the client-side equivalent of the CrosshairElement class.
 */
interface ASPxClientCrosshairElement {
    /**
     * Gets a series that a crosshair element hovers over when implementing a custom draw.
     * Value: An ASPxClientSeries object which represents the series currently being painted.
     */
    Series: ASPxClientSeries;
    /**
     * Gets the series point that a crosshair element hovers over when implementing a custom draw.
     * Value: An ASPxClientSeriesPoint object, representing the series point that a crosshair element hovers over.
     */
    Point: ASPxClientSeriesPoint;
    /**
     * Gets or sets the crosshair line element to custom draw a crosshair cursor.
     * Value: An ASPxClientCrosshairLineElement object, representing the crosshair line element.
     */
    LineElement: ASPxClientCrosshairLineElement;
    /**
     * Provides access to the crosshair axis label element.
     * Value: An ASPxClientCrosshairAxisLabelElement object, representing the crosshair axis label element.
     */
    AxisLabelElement: ASPxClientCrosshairAxisLabelElement;
    /**
     * Gets the crosshair label element.
     * Value: An ASPxClientCrosshairSeriesLabelElement object, representing the crosshair label element.
     */
    LabelElement: ASPxClientCrosshairSeriesLabelElement;
    /**
     * Specifies whether the crosshair element is visible when implementing custom drawing in the crosshair cursor.
     * Value: true, if the crosshair element is visible; otherwise, false.
     */
    visible: boolean;
}
/**
 * Represents the client-side equivalent of the CrosshairLineElement class.
 */
interface ASPxClientCrosshairLineElement {
}
/**
 * Represents the client-side equivalent of the CrosshairAxisLabelElement class.
 */
interface ASPxClientCrosshairAxisLabelElement {
}
/**
 * The client-side equivalent of the CrosshairGroupHeaderElement class.
 */
interface ASPxClientCrosshairGroupHeaderElement {
}
/**
 * The client-side equivalent of the CrosshairLabelElement class.
 */
interface ASPxClientCrosshairSeriesLabelElement {
}
/**
 * Represents the client-side equivalent of the CrosshairElementGroup class.
 */
interface ASPxClientCrosshairElementGroup {
}
/**
 * Represents a method that will handle the ObjectSelected events.
 */
interface ASPxClientWebChartControlHotTrackEventHandler<S> {
    /**
     * Represents a method that will handle the ObjectSelected events.
     * @param source The event source. This parameter identifies the ASPxClientWebChartControl which raised the event.
     * @param e An ASPxClientWebChartControlHotTrackEventArgs object which contains event data.
     */
    (source: S, e: ASPxClientWebChartControlHotTrackEventArgs): void;
}
/**
 * Provides data for a chart control's ObjectSelected events on the client side.
 */
interface ASPxClientWebChartControlHotTrackEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Provides access on the client side to the chart element, for which the event was raised.
     * Value: An ASPxClientWebChartElement object, which represents the chart element for which the event was raised.
     */
    hitObject: ASPxClientWebChartElement;
    /**
     * Provides access on the client side to the object, which is in some way related to the object being hit. The returned value depends on the hitObject type and hit point location.
     * Value: An ASPxClientWebChartElement object representing an additional object that relates to the one being hit.
     */
    additionalHitObject: ASPxClientWebChartElement;
    /**
     * Gets details on the chart elements located at the point where an end-user has clicked when hot-tracking or selecting a chart element on the client side.
     * Value: An ASPxClientWebChartHitInfo object, which contains information about the chart elements located at the point where an end-user has clicked.
     */
    hitInfo: ASPxClientWebChartHitInfo;
    /**
     * Provides access on the client side to the chart and all its elements.
     * Value: An ASPxClientWebChart object, which provides access to chart properties.
     */
    chart: ASPxClientWebChart;
    /**
     * Gets the HTML object that contains the processed item.
     * Value: An object representing a container for the item related to the event.
     */
    htmlElement: Object;
    /**
     * Gets the X-coordinate of the hit test point, relative to the top left corner of the chart.
     * Value: An integer value specifying X-coordinate of the hit test point (in pixels).
     */
    x: number;
    /**
     * Gets the Y-coordinate of the hit test point, relative to the top left corner of the chart.
     * Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
     */
    y: number;
    /**
     * Gets the X-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart.
     * Value: An integer value specifying X-coordinate of the hit test point (in pixels).
     */
    absoluteX: number;
    /**
     * Gets the Y-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart.
     * Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
     */
    absoluteY: number;
    /**
     * Gets a value indicating whether the hot-tracking or object selection should be canceled.
     * Value: true to cancel the hot-tracking or selection of an object; otherwise, false.
     */
    cancel: boolean;
}
/**
 * Represents an object under the hit test point within a chart control, on the client side.
 */
interface ASPxClientHitObject {
    /**
     * Gets the chart element for which the event was raised.
     * Value: An ASPxClientWebChartElement object, representing the chart element for which the event was raised.
     */
    Object: ASPxClientWebChartElement;
    /**
     * Provides access to an object, which is in some way related to the object being hit. The returned value depends on the Object type and hit point location.
     * Value: An ASPxClientWebChartElement object that represents an additional object related to the one being hit.
     */
    AdditionalObject: ASPxClientWebChartElement;
}
/**
 * Contains information about a specific test point within a chart control, on the client side.
 */
interface ASPxClientWebChartHitInfo {
    /**
     * Gets a value indicating whether the test point is within the chart.
     * Value: true if the test point is within a chart; otherwise, false.
     */
    inChart: boolean;
    /**
     * Gets a value indicating whether the test point is within the chart title.
     * Value: true if the test point is within a chart title; otherwise, false.
     */
    inChartTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the .
     * Value: true if the test point is within an axis; otherwise, false.
     */
    inAxis: boolean;
    /**
     * Gets a value indicating whether the test point is within the axis label item.
     * Value: true if the test point is within an axis label item; otherwise, false.
     */
    inAxisLabelItem: boolean;
    /**
     * Gets a value indicating whether the test point is within the axis title.
     * Value: true if the test point is within an axis title; otherwise, false.
     */
    inAxisTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the constant line.
     * Value: true if the test point is within a constant line; otherwise, false.
     */
    inConstantLine: boolean;
    /**
     * Gets a value indicating whether the test point is within the diagram.
     * Value: true if the test point is within a diagram; otherwise, false.
     */
    inDiagram: boolean;
    /**
     * Gets a value indicating whether the test point is within the non-default pane.
     * Value: true if the test point is within a non-default pane; otherwise, false.
     */
    inNonDefaultPane: boolean;
    /**
     * Gets a value indicating whether the test point is within the legend.
     * Value: true if the test point is within a legend; otherwise, false.
     */
    inLegend: boolean;
    /**
     * Gets the value indicating whether or not the test point is within a custom legend item.
     * Value: true if the test point is within a custom legend item; otherwise, false.
     */
    inCustomLegendItem: boolean;
    /**
     * Gets a value indicating whether the test point is within the series.
     * Value: true if the test point is within a series; otherwise, false.
     */
    inSeries: boolean;
    /**
     * Gets a value indicating whether the test point is within the series label.
     * Value: true if the test point is within a series label; otherwise, false.
     */
    inSeriesLabel: boolean;
    /**
     * Gets a value indicating whether the test point is within the series point.
     * Value: true if the test point is within a series point; otherwise, false.
     */
    inSeriesPoint: boolean;
    /**
     * Gets a value indicating whether the test point is within the series title.
     * Value: true if the test point is within a series title; otherwise, false.
     */
    inSeriesTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the trendline.
     * Value: true if the test point is within a trendline; otherwise, false.
     */
    inTrendLine: boolean;
    /**
     * Gets a value indicating whether the test point is within the Fibonacci Indicator.
     * Value: true if the test point is within a Fibonacci Indicator; otherwise, false.
     */
    inFibonacciIndicator: boolean;
    /**
     * Gets a value indicating whether the test point is within the regression line.
     * Value: true if the test point is within a regression line; otherwise, false.
     */
    inRegressionLine: boolean;
    /**
     * Gets a value specifying whether the test point is within an indicator.
     * Value: true if the test point is within an indicator; otherwise, false.
     */
    inIndicator: boolean;
    /**
     * Gets a value indicating whether the test point is within an annotation.
     * Value: true if the test point is within an annotation; otherwise, false.
     */
    inAnnotation: boolean;
    /**
     * Gets a value indicating whether the test point is within a hyperlink.
     * Value: true, if the test point is within a hyperlink; otherwise, false.
     */
    inHyperlink: boolean;
    /**
     * Gets the client-side chart instance from under the test point.
     * Value: An ASPxClientWebChart object.
     */
    chart: ASPxClientWebChart;
    /**
     * Gets the client-side chart title instance from under the test point.
     * Value: An ASPxClientChartTitle object.
     */
    chartTitle: ASPxClientChartTitle;
    /**
     * Gets the client-side axis instance from under the test point.
     * Value: An ASPxClientAxisBase descendant.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the client-side constant line instance from under the test point.
     * Value: An ASPxClientConstantLine object.
     */
    constantLine: ASPxClientConstantLine;
    /**
     * Gets the client-side diagram instance from under the test point.
     * Value: An ASPxClientXYDiagramBase descendant.
     */
    diagram: ASPxClientXYDiagramBase;
    /**
     * Gets the client-side non-default pane instance from under the test point.
     * Value: An ASPxClientXYDiagramPane object.
     */
    nonDefaultPane: ASPxClientXYDiagramPane;
    /**
     * Gets the client-side legend instance from under the test point.
     * Value: An ASPxClientLegend object.
     */
    legend: ASPxClientLegend;
    /**
     * Gets a custom legend item which is located under the test point.
     * Value: An ASPxClientCustomLegendItem object which represents the item located under the test point.
     */
    customLegendItem: ASPxClientCustomLegendItem;
    /**
     * Gets the client-side series instance from under the test point.
     * Value: An ASPxClientSeries object.
     */
    series: ASPxClientSeries;
    /**
     * Gets the client-side series label instance from under the test point.
     * Value: An ASPxClientSeriesLabel object.
     */
    seriesLabel: ASPxClientSeriesLabel;
    /**
     * Gets the client-side series title instance from under the test point.
     * Value: An ASPxClientSeriesTitle object.
     */
    seriesTitle: ASPxClientSeriesTitle;
    /**
     * Gets the client-side trendline instance from under the test point.
     * Value: An ASPxClientTrendLine object.
     */
    trendLine: ASPxClientTrendLine;
    /**
     * Gets the client-side Fibonacci indicator instance from under the test point.
     * Value: An ASPxClientFibonacciIndicator object.
     */
    fibonacciIndicator: ASPxClientFibonacciIndicator;
    /**
     * Gets the client-side regression line instance from under the test point.
     * Value: An ASPxClientRegressionLine object.
     */
    regressionLine: ASPxClientRegressionLine;
    /**
     * Gets the client-side indicator instance from under the test point.
     * Value: An ASPxClientIndicator descendant.
     */
    indicator: ASPxClientIndicator;
    /**
     * Gets the client-side annotation instance from under the test point.
     * Value: An ASPxClientAnnotation object.
     */
    annotation: ASPxClientAnnotation;
    /**
     * Gets the client-side series point instance from under the test point.
     * Value: An ASPxClientSeriesPoint object.
     */
    seriesPoint: ASPxClientSeriesPoint;
    /**
     * Gets the client-side axis label item instance from under the test point.
     * Value: An ASPxClientAxisLabelItem object.
     */
    axisLabelItem: ASPxClientAxisLabelItem;
    /**
     * Gets the client-side axis title instance from under the test point.
     * Value: An ASPxClientAxisTitle object.
     */
    axisTitle: ASPxClientAxisTitle;
    /**
     * Returns a hyperlink which is located under the test point.
     * Value: A String object representing a hyperlink.
     */
    hyperlink: string;
}
/**
 * Represents the client-side equivalent of the DiagramCoordinates class.
 */
interface ASPxClientDiagramCoordinates {
    /**
     * Gets the type of the argument scale.
     * Value: A string object which contains the current scale type.
     */
    argumentScaleType: string;
    /**
     * Gets the type of the value scale.
     * Value: A string object which contains the current scale type.
     */
    valueScaleType: string;
    /**
     * Gets the argument of the data point as a text string.
     * Value: A string object, representing a data point's argument.
     */
    qualitativeArgument: string;
    /**
     * Gets the numerical representation of the data point's argument.
     * Value: A Double value, representing the data point's argument.
     */
    numericalArgument: number;
    /**
     * Gets the date-time representation of the data point's argument.
     * Value: A date object, representing the point's argument.
     */
    dateTimeArgument: Date;
    /**
     * Gets the numerical representation of the data point's value.
     * Value: A Double value, representing the data point's value.
     */
    numericalValue: number;
    /**
     * Gets the date-time representation of the data point's value.
     * Value: A date object, representing the point's value.
     */
    dateTimeValue: Date;
    /**
     * Gets the X- of the diagram point.
     * Value: An ASPxClientAxisBase descendant, representing the axis of arguments (X-axis).
     */
    axisX: ASPxClientAxisBase;
    /**
     * Gets the Y- of the diagram point.
     * Value: An ASPxClientAxisBase descendant, representing the axis of values (Y-axis).
     */
    axisY: ASPxClientAxisBase;
    /**
     * Gets the  of the diagram point.
     * Value: An ASPxClientXYDiagramPane descendant, representing the pane.
     */
    pane: ASPxClientXYDiagramPane;
    /**
     * Checks whether the current object represents a point outside the diagram area.
     */
    IsEmpty(): boolean;
    /**
     * Gets the value of the client-side axis instance.
     * @param axis An ASPxClientAxisBase class descendant, representing the axis that contains the requested value.
     */
    GetAxisValue(axis: ASPxClientAxisBase): ASPxClientAxisValue;
}
/**
 * Contains the information about an axis value.
 */
interface ASPxClientAxisValue {
    /**
     * Gets the axis scale type.
     * Value: A String value, specifying the axis scale type.
     */
    scaleType: string;
    /**
     * Gets the axis value, if the axis scale type is qualitative.
     * Value: A String value, specifying the axis value.
     */
    qualitativeValue: string;
    /**
     * Gets the axis value, if the axis scale type is numerical.
     * Value: A Double value, specifying the axis value.
     */
    numericalValue: number;
    /**
     * Gets the axis value, if the axis scale type is date-time.
     * Value: A DateTime value, specifying the axis value.
     */
    dateTimeValue: Date;
}
/**
 * Represents the client-side equivalent of the ControlCoordinates class.
 */
interface ASPxClientControlCoordinates {
    /**
     * Gets the point's pane.
     * Value: An ASPxClientXYDiagramPane object.
     */
    pane: ASPxClientXYDiagramPane;
    /**
     * Gets the point's X-coordinate, in pixels.
     * Value: An integer value, specifying the X-coordinate (in pixels).
     */
    x: number;
    /**
     * Gets the point's Y-coordinate, in pixels.
     * Value: An integer value, specifying the Y-coordinate (in pixels).
     */
    y: number;
    /**
     * Gets the point's visibility state.
     * Value: "Visible", "Hidden", or "Undefined".
     */
    visibility: string;
}
/**
 * Represents the client-side equivalent of the ChartElement class.
 */
interface ASPxClientWebChartElement {
    /**
     * Gets the chart that owns the current chart element.
     * Value: An ASPxClientWebChart object, to which the chart element belongs.
     */
    chart: ASPxClientWebChart;
}
/**
 * Represents a base class for chart elements, which are not necessarily required to be present on the client side.
 */
interface ASPxClientWebChartEmptyElement extends ASPxClientWebChartElement {
}
/**
 * Represents a base class for chart elements, which are required to be present on the client side.
 */
interface ASPxClientWebChartRequiredElement extends ASPxClientWebChartElement {
}
/**
 * Represents the client-side equivalent of the ChartElementNamed class.
 */
interface ASPxClientWebChartElementNamed extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the name of the chart element.
     * Value: A string object representing the name of the chart element.
     */
    name: string;
}
/**
 * Represents the client-side equivalent of the WebChartControl control.
 */
interface ASPxClientWebChart extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the client-side Chart Control that owns the current chart.
     * Value: An ASPxClientWebChartControl object, to which the chart belongs.
     */
    chartControl: ASPxClientWebChartControl;
    /**
     * Gets the chart's diagram and provides access to its settings.
     * Value: An ASPxClientRadarDiagram),  that represents the chart's diagram.
     */
    diagram: ASPxClientWebChartElement;
    /**
     * Provides access to the chart's collection of series.
     * Value: An array of ASPxClientSeries objects that represent the collection of series.
     */
    series: ASPxClientSeries[];
    /**
     * Provides access to the collection of chart titles.
     * Value: An array of ASPxClientChartTitle objects, that represent the collection of chart titles.
     */
    titles: ASPxClientChartTitle[];
    /**
     * Provides access to the chart's collection of annotations.
     * Value: An array of ASPxClientAnnotation objects, representing the collection of annotations.
     */
    annotations: ASPxClientAnnotation[];
    /**
     * Gets the chart's legend and provides access to its settings.
     * Value: An ASPxClientLegend object that represents the chart's legend.
     */
    legend: ASPxClientLegend;
    /**
     * Returns the collection of legends.
     * Value: An array of ASPxClientLegend objects.
     */
    legends: ASPxClientLegend[];
    /**
     * Gets the name of the appearance, which is currently used to draw the chart's elements.
     * Value: A string value that represents the appearance name.
     */
    appearanceName: string;
    /**
     * Gets the name of the palette currently used to draw the chart's series.
     * Value: A string value that represents the palette name.
     */
    paletteName: string;
    /**
     * Gets a value indicating whether series tooltips should be shown.
     * Value: true to show tooltips for series; otherwise, false.
     */
    showSeriesToolTip: boolean;
    /**
     * Gets a value indicating whether point tooltips should be shown.
     * Value: true to show tooltips for series points; otherwise, false.
     */
    showPointToolTip: boolean;
    /**
     * Gets a value indicating whether a crosshair cursor should be shown.
     * Value: true to show a crosshair cursor; otherwise, false.
     */
    showCrosshair: boolean;
    /**
     * Gets a value that contains information on how the tooltip position is defined, for example, relative to a mouse pointer or chart element.
     * Value: An ASPxClientToolTipPosition class descendant that defines the tooltip position type.
     */
    toolTipPosition: ASPxClientToolTipPosition;
    /**
     * Returns the tooltip controller that shows tooltips for chart elements.
     * Value: An ASPxClientToolTipController object.
     */
    toolTipController: ASPxClientToolTipController;
    /**
     * Gets the settings for a crosshair cursor concerning its position and appearance on a diagram.
     * Value: An ASPxClientCrosshairOptions object descendant which provides access to crosshair cursor options on a diagram.
     */
    crosshairOptions: ASPxClientCrosshairOptions;
    /**
     * Gets a css postfix for a chart.
     * Value: A string value.
     */
    cssPostfix: string;
    /**
     * Gets or sets a value which specifies how the chart elements are selected.
     * Value: A String object representing the name of the selection mode.
     */
    selectionMode: string;
}
/**
 * Represents the client-side equivalent of the SimpleDiagram class.
 */
interface ASPxClientSimpleDiagram extends ASPxClientWebChartEmptyElement {
}
/**
 * Represents the base class for all diagram classes, which have X and Y axes.
 */
interface ASPxClientXYDiagramBase extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the X-axis.
     * Value: An ASPxClientAxisBase object which represents the X-axis.
     */
    axisX: ASPxClientAxisBase;
    /**
     * Gets the Y-axis.
     * Value: An ASPxClientAxisBase object which represents the Y-axis.
     */
    axisY: ASPxClientAxisBase;
}
/**
 * Represents the client-side equivalent of the XYDiagram2D class.
 */
interface ASPxClientXYDiagram2D extends ASPxClientXYDiagramBase {
    /**
     * Provides access to a collection of secondary X-axes for a given 2D XY-diagram.
     * Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
     */
    secondaryAxesX: ASPxClientAxis[];
    /**
     * Provides access to a collection of secondary Y-axes for a given 2D XY-diagram.
     * Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
     */
    secondaryAxesY: ASPxClientAxis[];
    /**
     * Provides access to a default  object.
     * Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
     */
    defaultPane: ASPxClientXYDiagramPane;
    /**
     * Provides access to an array of a diagram's .
     * Value: An array of ASPxClientXYDiagramPane objects.
     */
    panes: ASPxClientXYDiagramPane[];
    /**
     * Converts the display coordinates into a diagram coordinates object.
     * @param x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     * @param y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     */
    PointToDiagram(x: number, y: number): ASPxClientDiagramCoordinates;
    /**
     * Converts the diagram coordinates of a point into screen coordinates.
     * @param argument An object, representing the point's argument.
     * @param value An object, representing the point's value.
     * @param axisX An ASPxClientAxis2D descendant, representing the X-axis.
     * @param axisY An ASPxClientAxis2D descendant, representing the Y-axis.
     * @param pane An ASPxClientXYDiagramPane object, representing the pane.
     */
    DiagramToPoint(argument: Object, value: Object, axisX: ASPxClientAxis2D, axisY: ASPxClientAxis2D, pane: ASPxClientXYDiagramPane): ASPxClientControlCoordinates;
}
/**
 * Represents the client-side equivalent of the XYDiagram class.
 */
interface ASPxClientXYDiagram extends ASPxClientXYDiagram2D {
    /**
     * Gets a value indicating whether the diagram is rotated.
     * Value: true if the diagram is rotated; otherwise, false.
     */
    rotated: boolean;
}
/**
 * Represents the client-side equivalent of the SwiftPlotDiagram class.
 */
interface ASPxClientSwiftPlotDiagram extends ASPxClientXYDiagram2D {
}
/**
 * Represents the client-side equivalent of the XYDiagramPane class.
 */
interface ASPxClientXYDiagramPane extends ASPxClientWebChartElementNamed {
    /**
     * Gets the diagram that owns the current pane object.
     * Value: An ASPxClientXYDiagram object, to which the pane belongs.
     */
    diagram: ASPxClientXYDiagram;
}
/**
 * Represents the client-side equivalent of the XYDiagram3D class.
 */
interface ASPxClientXYDiagram3D extends ASPxClientXYDiagramBase {
}
/**
 * Represents the client-side equivalent of the RadarDiagram class.
 */
interface ASPxClientRadarDiagram extends ASPxClientXYDiagramBase {
    /**
     * Converts the display coordinates into a diagram coordinates object.
     * @param x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     * @param y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     */
    PointToDiagram(x: number, y: number): ASPxClientDiagramCoordinates;
    /**
     * Converts the diagram coordinates of a point into screen coordinates.
     * @param argument An object, representing the point's argument.
     * @param value An object, representing the point's value.
     */
    DiagramToPoint(argument: Object, value: Object): ASPxClientControlCoordinates;
}
/**
 * Represents the client-side equivalent of the AxisBase class.
 */
interface ASPxClientAxisBase extends ASPxClientWebChartElementNamed {
    /**
     * Provides access to the XY-diagram which contains the current axis.
     * Value: An ASPxClientXYDiagramBase class descendant.
     */
    diagram: ASPxClientXYDiagramBase;
    /**
     * Provides acess to the range of the axis coordinates.
     * Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
     */
    range: ASPxClientAxisRange;
}
/**
 * Represents the client-side equivalent of the Axis2D class.
 */
interface ASPxClientAxis2D extends ASPxClientAxisBase {
    /**
     * Provides access to an axis title object.
     * Value: An ASPxClientAxisTitle object which represents the axis title.
     */
    axisTitle: ASPxClientAxisTitle;
    /**
     * Provides access to the axis strips collection.
     * Value: An array of ASPxClientStrip objects.
     */
    strips: ASPxClientStrip[];
    /**
     * Provides access to the collection of the axis constant lines.
     * Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
     */
    constantLines: ASPxClientConstantLine[];
}
/**
 * Represents the client-side equivalent of the Axis class.
 */
interface ASPxClientAxis extends ASPxClientAxis2D {
    /**
     * Gets a value indicating whether the axis is reversed.
     * Value: true if the axis is reversed; otherwise, false.
     */
    reverse: boolean;
}
/**
 * Represents the client-side equivalent of the SwiftPlotDiagramAxis class.
 */
interface ASPxClientSwiftPlotDiagramAxis extends ASPxClientAxis2D {
}
/**
 * Represents the client-side equivalent of the Axis3D class.
 */
interface ASPxClientAxis3D extends ASPxClientAxisBase {
}
/**
 * Represents the client-side equivalent of the RadarAxis class.
 */
interface ASPxClientRadarAxis extends ASPxClientAxisBase {
}
/**
 * Represents the client-side equivalent of the AxisTitle class.
 */
interface ASPxClientAxisTitle extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the  to which the axis title belongs.
     * Value: An ASPxClientAxisBase descendant, which identifies the axis.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the text of the axis title.
     * Value: A string object which contains the axis title's text.
     */
    text: string;
}
/**
 * Represents the client-side equivalent of the AxisLabelItem class.
 */
interface ASPxClientAxisLabelItem extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the  to which an axis label item belongs.
     * Value: An ASPxClientAxisBase descendant, which identifies the axis.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the text of an axis label item.
     * Value: A string object which contains the axis label item's text.
     */
    text: string;
    /**
     * Gets the axis value to which an axis label item corresponds.
     * Value: An object that specifies the axis value.
     */
    axisValue: Object;
    /**
     * Gets the internal representation of the axis value to which an axis label item corresponds.
     * Value: A Double value which specifies the internal representation of the axis value.
     */
    axisValueInternal: number;
}
/**
 * Represents the client-side equivalent of the AxisRange class.
 */
interface ASPxClientAxisRange extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the axis that owns the current axis range object.
     * Value: An ASPxClientAxisBase object, to which the axis range belongs.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the minimum value to display on an axis.
     * Value: An object representing the minimum value of the axis range.
     */
    minValue: Object;
    /**
     * Gets the maximum value to display on an axis.
     * Value: An object representing the maximum value of the axis range.
     */
    maxValue: Object;
    /**
     * Gets the internal float representation of the range minimum value.
     * Value: A Double value which specifies the internal representation of the range minimum value.
     */
    minValueInternal: number;
    /**
     * Gets the internal float representation of the range maximum value.
     * Value: A Double value which specifies the internal representation of the range maximum value.
     */
    maxValueInternal: number;
}
/**
 * Represents the client-side equivalent of the Strip class.
 */
interface ASPxClientStrip extends ASPxClientWebChartElementNamed {
    /**
     * Gets the axis that owns the current strip object.
     * Value: An ASPxClientAxis object, to which the strip belongs.
     */
    axis: ASPxClientAxis;
    /**
     * Gets the minimum value of the strip's range.
     * Value: An object that represents the minimum value of the strip's range.
     */
    minValue: Object;
    /**
     * Gets the maximum value of the strip's range.
     * Value: An object that represents the maximum value of the strip's range.
     */
    maxValue: Object;
}
/**
 * Represents the client-side equivalent of the ConstantLine class.
 */
interface ASPxClientConstantLine extends ASPxClientWebChartElementNamed {
    /**
     * Gets the axis that owns the current constant line object.
     * Value: An ASPxClientAxis object, to which the constant line belongs.
     */
    axis: ASPxClientAxis;
    /**
     * Gets the constant line's position along the axis.
     * Value: An object that specifies the constant line's position.
     */
    value: Object;
    /**
     * Gets the constant line title.
     * Value: A string object, representing the title's text.
     */
    title: string;
}
/**
 * Represents the client-side equivalent of the Series class.
 */
interface ASPxClientSeries extends ASPxClientWebChartElementNamed {
    /**
     * Gets a value that specifies the view type of the series.
     * Value: A string object which contains the current view type.
     */
    viewType: string;
    /**
     * Gets a value that specifies the scale type for the argument data of the series' data points.
     * Value: A string object which contains the current scale type.
     */
    argumentScaleType: string;
    /**
     * Gets a value that specifies the scale type for the value data of the series' data points.
     * Value: A string object which contains the current scale type.
     */
    valueScaleType: string;
    /**
     * Gets the X-Axis that is used to plot the current series on the XY-diagram.
     * Value: A string object, which represents the X-axis name.
     */
    axisX: string;
    /**
     * Gets the Y-Axis that is used to plot the current series on the XY-diagram.
     * Value: A string object, which represents the Y-axis name.
     */
    axisY: string;
    /**
     * Gets the pane that is used to plot the current series on the XY-diagram.
     * Value: A string object, which represents the pane's name.
     */
    pane: string;
    /**
     * Gets a value indicating whether the series is visible.
     * Value: true if the series is visible; otherwise, false.
     */
    visible: boolean;
    /**
     * Gets a value that specifies whether or not a tooltip is enabled for a chart.
     * Value: true - a tooltip is enabled for a chart; false - a tooltip is disabled.
     */
    toolTipEnabled: boolean;
    /**
     * Gets the text to be displayed within series tooltips.
     * Value: A string value.
     */
    toolTipText: string;
    /**
     * Gets an image to be displayed within series tooltips.
     * Value: A string value.
     */
    toolTipImage: string;
    /**
     * Gets the settings of series labels.
     * Value: An ASPxClientSeriesLabel object, which provides the series label settings.
     */
    label: ASPxClientSeriesLabel;
    /**
     * Gets the series' collection of data points.
     * Value: An array of ASPxClientSeriesPoint objects, that represent the series' data points.
     */
    points: ASPxClientSeriesPoint[];
    /**
     * Provides access to the collection of series titles.
     * Value: An array of ASPxClientSeriesTitle objects, that represent the collection of series titles.
     */
    titles: ASPxClientSeriesTitle[];
    /**
     * Gets the series' collection of indicators.
     * Value: An array of ASPxClientIndicator objects, that belong to the series.
     */
    indicators: ASPxClientIndicator[];
    /**
     * Provides access to the collection of regression lines.
     * Value: An array of ASPxClientRegressionLine objects which represent regression lines available for the series.
     */
    regressionLines: ASPxClientRegressionLine[];
    /**
     * Provides access to the collection of trendlines.
     * Value: An array of ASPxClientTrendLine objects, that represent the collection of trendlines.
     */
    trendLines: ASPxClientTrendLine[];
    /**
     * Provides access to the collection of Fibonacci Indicators.
     * Value: An array of ASPxClientFibonacciIndicator objects, that represent the collection of Fibonacci Indicators.
     */
    fibonacciIndicators: ASPxClientFibonacciIndicator[];
    /**
     * Gets the color of a series.
     * Value: A string value.
     */
    color: string;
    /**
     * Gets a value that defines a group for stacked series.
     * Value: A string value.
     */
    stackedGroup: string;
    /**
     * Gets a string which represents the pattern specifying the text to be displayed within a crosshair label for the current Series  type.
     * Value: A Empty.
     */
    crosshairLabelPattern: string;
    /**
     * This property is intended for internal use only.
     * Value: A String value.
     */
    groupedElementsPattern: string;
    /**
     * Returns a collection of crosshair value items.
     * Value: An array of ASPxClientCrosshairValueItem objects.
     */
    crosshairValueItems: ASPxClientCrosshairValueItem[];
    /**
     * Gets a value indicating whether a crosshair cursor is enabled.
     * Value: true if a crosshair cursor is enabled; otherwise, false.
     */
    actualCrosshairEnabled: boolean;
    /**
     * Gets a value indicating whether a crosshair label should be shown for this series.
     * Value: true if crosshair labels are visible; otherwise, false.
     */
    actualCrosshairLabelVisibility: boolean;
}
/**
 * Represents the client-side equivalent of the SeriesLabelBase class.
 */
interface ASPxClientSeriesLabel extends ASPxClientWebChartElement {
    /**
     * Gets the series that owns the current series label object.
     * Value: An ASPxClientSeries object, to which the series label belongs.
     */
    series: ASPxClientSeries;
    /**
     * Gets the common text for all series point labels.
     * Value: Returns an empty string object.
     */
    text: string;
}
/**
 * Represents the client-side equivalent of the SeriesPoint class.
 */
interface ASPxClientSeriesPoint extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the series that owns the current series point object.
     * Value: An ASPxClientSeries object, to which the series point belongs.
     */
    series: ASPxClientSeries;
    /**
     * Gets the data point's argument.
     * Value: An object that specifies the data point's argument.
     */
    argument: Object;
    /**
     * Gets the point's data value(s).
     * Value: An array of objects that represent the data value(s) of the series data point.
     */
    values: Object[];
    /**
     * Gets the text to be displayed within series points tooltips.
     * Value: A string value.
     */
    toolTipText: string;
    /**
     * Gets the color of a series point.
     * Value: A string value.
     */
    color: string;
    /**
     * Gets the percent value of a series point.
     * Value: A float value.
     */
    percentValue: number;
    /**
     * Gets a hint that is shown in series points tooltips.
     * Value: A string value.
     */
    toolTipHint: string;
}
/**
 * Represents the client-side equivalent of the Legend class.
 */
interface ASPxClientLegend extends ASPxClientWebChartEmptyElement {
    /**
     * Returns a value which determines whether to use checkboxes instead of markers on a chart legend for all legend items.
     * Value: true, if legend checkboxes are shown instead of markers for all legend items; otherwise, false.
     */
    useCheckBoxes: boolean;
    /**
     * Returns a collection of custom legend items of the legend.
     * Value: A collection of ASPxClientCustomLegendItem objects.
     */
    customItems: ASPxClientCustomLegendItem[];
    /**
     * Returns the name of the legend.
     * Value: The string value representing the name of the legend.
     */
    name: string;
}
/**
 * Represents the base for ASPxClientSeriesTitle classes.
 */
interface ASPxClientTitleBase extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the lines of text within a title.
     * Value: An array of string values containing the text of a title.
     */
    lines: string[];
    /**
     * Gets the alignment of the title.
     * Value: A string value containing the text, which specifies the alignment of a title.
     */
    alignment: string;
    /**
     * Gets a value that specifies to which edges of a parent element the title should be docked.
     * Value: A string value.
     */
    dock: string;
}
/**
 * Represents the client-side equivalent of the ChartTitle class.
 */
interface ASPxClientChartTitle extends ASPxClientTitleBase {
}
/**
 * Represents the client-side equivalent of the SeriesTitle class.
 */
interface ASPxClientSeriesTitle extends ASPxClientTitleBase {
    /**
     * Gets the series that owns the current title object.
     * Value: An ASPxClientSeries object, to which the series title belongs.
     */
    series: ASPxClientSeries;
}
/**
 * Represents the client-side equivalent of the Indicator class.
 */
interface ASPxClientIndicator extends ASPxClientWebChartElementNamed {
    /**
     * Gets the indicator's associated series.
     * Value: An ASPxClientSeries object.
     */
    series: ASPxClientSeries;
}
/**
 * Represents the client-side equivalent of the FinancialIndicator class.
 */
interface ASPxClientFinancialIndicator extends ASPxClientIndicator {
    /**
     * Gets the first point of the financial indicator.
     * Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
     */
    point1: ASPxClientFinancialIndicatorPoint;
    /**
     * Gets the second point of the financial indicator.
     * Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
     */
    point2: ASPxClientFinancialIndicatorPoint;
}
/**
 * Represents the client-side equivalent of the TrendLine class.
 */
interface ASPxClientTrendLine extends ASPxClientFinancialIndicator {
}
/**
 * Represents the client-side equivalent of the FibonacciIndicator class.
 */
interface ASPxClientFibonacciIndicator extends ASPxClientFinancialIndicator {
}
/**
 * Represents the client-side equivalent of the FinancialIndicatorPoint class.
 */
interface ASPxClientFinancialIndicatorPoint extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the financial indicator that owns the current financial indicator point.
     * Value: An ASPxClientFinancialIndicator object, to which the point belongs.
     */
    financialIndicator: ASPxClientFinancialIndicator;
    /**
     * Gets the argument of the financial indicator's point.
     * Value: An object that specifies the point argument.
     */
    argument: Object;
    /**
     * Gets a value, indicating how the value of a financial indicator's point is obtained.
     * Value: A string value, which indicates how to obtain a financial indicator point's value.
     */
    valueLevel: string;
}
/**
 * The client-side equivalent of the SingleLevelIndicator class.
 */
interface ASPxClientSingleLevelIndicator extends ASPxClientIndicator {
    /**
     * Gets a value specifying the value level to which the single-level indicator corresponds.
     * Value: A string value.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the RegressionLine class.
 */
interface ASPxClientRegressionLine extends ASPxClientSingleLevelIndicator {
}
/**
 * The client-side equivalent of the MovingAverage class.
 */
interface ASPxClientMovingAverage extends ASPxClientSingleLevelIndicator {
    /**
     * Gets the number of data points used to calculate the moving average.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value specifying whether to display a Moving Average, Envelope, or both.
     * Value: A string value.
     */
    kind: string;
    /**
     * Gets a value specifying the Envelope percent.
     * Value: A double value which specifies the Envelope percent.
     */
    envelopePercent: number;
}
/**
 * The client-side equivalent of the SimpleMovingAverage class.
 */
interface ASPxClientSimpleMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the ExponentialMovingAverage class.
 */
interface ASPxClientExponentialMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the WeightedMovingAverage class.
 */
interface ASPxClientWeightedMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the TriangularMovingAverage class.
 */
interface ASPxClientTriangularMovingAverage extends ASPxClientMovingAverage {
}
/**
 * Represents the client-side equivalent of the TripleExponentialMovingAverageTema class.
 */
interface ASPxClientTripleExponentialMovingAverageTema extends ASPxClientMovingAverage {
}
/**
 * Represents the client-side equivalent of the BollingerBands class.
 */
interface ASPxClientBollingerBands extends ASPxClientIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the MedianPrice class.
 */
interface ASPxClientMedianPrice extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the TypicalPrice class.
 */
interface ASPxClientTypicalPrice extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the WeightedClose class.
 */
interface ASPxClientWeightedClose extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the SeparatePaneIndicator class.
 */
interface ASPxSeparatePaneIndicator extends ASPxClientIndicator {
    /**
     * Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram.
     * Value: A string value specifying the Y-axis name.
     */
    axisY: string;
    /**
     * Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram.
     * Value: A string that is the name of a pane.
     */
    pane: string;
}
/**
 * Represents the client-side equivalent of the AverageTrueRange class.
 */
interface ASPxClientAverageTrueRange extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the ChaikinsVolatility class.
 */
interface ASPxClientChaikinsVolatility extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the CommodityChannelIndex class.
 */
interface ASPxClientCommodityChannelIndex extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the DetrendedPriceOscillator class.
 */
interface ASPxClientDetrendedPriceOscillator extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the MassIndex class.
 */
interface ASPxClientMassIndex extends ASPxSeparatePaneIndicator {
    /**
     * Returns the count of points used to calculate the exponential moving average (EMA).
     * Value: An integer value, specifying the count of points used to calculate EMA.
     */
    movingAveragePointsCount: number;
    /**
     * Returns the count of summable values.
     * Value: An integer value specifying the count of summable ratios.
     */
    sumPointsCount: number;
}
/**
 * Represents the client-side equivalent of the MovingAverageConvergenceDivergence class.
 */
interface ASPxClientMovingAverageConvergenceDivergence extends ASPxSeparatePaneIndicator {
    /**
     * Returns the short period value required to calculate the indicator.
     * Value: An integer value specifying the short period value.
     */
    shortPeriod: number;
    /**
     * Returns the long period value required to calculate the indicator.
     * Value: An integer value specifying the long period.
     */
    longPeriod: number;
    /**
     * Returns the smoothing period value required to calculate the indicator.
     * Value: An integer value specifying the smoothing period value.
     */
    signalSmoothingPeriod: number;
}
/**
 * Represents the client-side equivalent of the RateOfChange class.
 */
interface ASPxClientRateOfChange extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the RelativeStrengthIndex class.
 */
interface ASPxClientRelativeStrengthIndex extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the StandardDeviation class.
 */
interface ASPxClientStandardDeviation extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the TripleExponentialMovingAverageTrix class.
 */
interface ASPxClientTripleExponentialMovingAverageTrix extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     * Value: A string value, which indicates which series point value should be used to calculate indicator values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the WilliamsR class.
 */
interface ASPxClientWilliamsR extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     * Value: An integer value, specifying the number of points.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the FixedValueErrorBars class.
 */
interface ASPxClientFixedValueErrorBars extends ASPxClientIndicator {
    /**
     * Gets or sets the fixed positive error value.
     * Value: A double value specifying the positive error value.
     */
    positiveError: number;
    /**
     * Returns the fixed negative error value.
     * Value: A double value specifying the negative error value.
     */
    negativeError: number;
}
/**
 * Represents the client-side equivalent of the PercentageErrorBars class.
 */
interface ASPxClientPercentageErrorBars extends ASPxClientIndicator {
    /**
     * Returns the value specifying the percentage of error values of series point values.
     * Value: A double value specifying the percentage. Values less than or equal to 0 are not allowed.
     */
    percent: number;
}
/**
 * Represents the client-side equivalent of the StandardDeviationErrorBars class.
 */
interface ASPxClientStandardDeviationErrorBars extends ASPxClientIndicator {
    /**
     * Returns the multiplier on which the standard deviation value is multiplied before display.
     * Value: A double value specifying the multiplier. Values less than 0 are not allowed.
     */
    multiplier: number;
}
/**
 * Represents the client-side equivalent of the StandardErrorBars class.
 */
interface ASPxClientStandardErrorBars extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the DataSourceBasedErrorBars class.
 */
interface ASPxClientDataSourceBasedErrorBars extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the Annotation class.
 */
interface ASPxClientAnnotation extends ASPxClientWebChartElementNamed {
}
/**
 * Represents the client-side equivalent of the TextAnnotation class.
 */
interface ASPxClientTextAnnotation extends ASPxClientAnnotation {
    /**
     * Gets the lines of text within an annotation.
     * Value: An array of string values containing the text of a title.
     */
    lines: string[];
}
/**
 * Represents the client-side equivalent of the ImageAnnotation class.
 */
interface ASPxClientImageAnnotation extends ASPxClientAnnotation {
}
/**
 * The client-side equivalent of the CrosshairValueItem class.
 */
interface ASPxClientCrosshairValueItem {
    /**
     * Gets the value that is displayed in a crosshair label.
     * Value: A float value.
     */
    value: number;
    /**
     * Gets an index of a point for which this crosshair value item is displayed.
     * Value: An integer value.
     */
    pointIndex: number;
}
/**
 * The client-side equivalent of the ChartToolTipController class.
 */
interface ASPxClientToolTipController extends ASPxClientWebChartEmptyElement {
    /**
     * Gets a value indicating whether an image should be shown in tooltips.
     * Value: true to show an image in tooltips; otherwise, false.
     */
    showImage: boolean;
    /**
     * Gets a value indicating whether it is necessary to show text in tooltips.
     * Value: true to show text in tooltips; otherwise, false.
     */
    showText: boolean;
    /**
     * Gets a value that defines the position of an image within a tooltip.
     * Value: A string value.
     */
    imagePosition: string;
    /**
     * Gets a value that defines when tooltips should be invoked.
     * Value: A string value.
     */
    openMode: string;
}
/**
 * The client-side equivalent of the ToolTipPosition class.
 */
interface ASPxClientToolTipPosition {
}
/**
 * The client-side equivalent of the ToolTipRelativePosition class.
 */
interface ASPxClientToolTipRelativePosition extends ASPxClientToolTipPosition {
    /**
     * Gets the horizontal offset of a tooltip.
     * Value: An integer value.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a tooltip.
     * Value: An integer value.
     */
    offsetY: number;
}
/**
 * The client-side equivalent of the ToolTipFreePosition class.
 */
interface ASPxClientToolTipFreePosition extends ASPxClientToolTipPosition {
    /**
     * Gets the horizontal offset of a tooltip.
     * Value: An integer value.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a tooltip.
     * Value: An integer value.
     */
    offsetY: number;
    /**
     * Gets the ID of a pane.
     * Value: An integer value.
     */
    paneID: number;
    /**
     * Gets an object containing settings that define how a tooltip should be docked.
     * Value: A string value.
     */
    dockPosition: string;
}
/**
 * The client-side equivalent of the CrosshairLabelPosition class.
 */
interface ASPxClientCrosshairPosition {
    /**
     * Gets the horizontal offset of a crosshair cursor.
     * Value: An integer value that is the X-offset.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a crosshair cursor.
     * Value: An integer value that is the Y-offset.
     */
    offsetY: number;
}
/**
 * The client-side equivalent of the CrosshairMousePosition class.
 */
interface ASPxClientCrosshairMousePosition extends ASPxClientCrosshairPosition {
}
/**
 * The client-side equivalent of the CrosshairFreePosition class.
 */
interface ASPxClientCrosshairFreePosition extends ASPxClientCrosshairPosition {
    /**
     * Gets a Pane's ID when the crosshair cursor is in the free position mode.
     * Value: An integer value that is the pane's ID.
     */
    paneID: number;
    /**
     * Gets a string containing information on a crosshair label's dock position when the crosshair cursor is in the free position mode.
     * Value: A string value containing information on a crosshair label's dock position.
     */
    dockPosition: string;
}
/**
 * Defines line style settings.
 */
interface ASPxClientLineStyle extends ASPxClientWebChartElement {
    /**
     * Gets the dash style used to paint the line.
     * Value: A string value that contains information about the style used to paint the line.
     */
    dashStyle: string;
    /**
     * Gets the thickness that corresponds to the value of the current ASPxClientLineStyle object.
     * Value: An integer value which specifies the thickness, in pixels.
     */
    thickness: number;
    /**
     * Returns the join style for the ends of consecutive lines.
     * Value: A string representing the name of the line join type.
     */
    lineJoin: string;
}
/**
 * The client-side equivalent of the CrosshairOptions class.
 */
interface ASPxClientCrosshairOptions extends ASPxClientWebChartEmptyElement {
    /**
     * Gets a value indicating whether it is necessary to show a crosshair label for the X-axis.
     * Value: true to show a crosshair label for the X-axis; otherwise, false.
     */
    showAxisXLabels: boolean;
    /**
     * Gets a value indicating whether it is necessary to show a crosshair label for the Y-axis.
     * Value: true to show the crosshair label for the Y-axis; otherwise, false.
     */
    showAxisYLabels: boolean;
    /**
     * Gets a value that defines whether a crosshair label of a series point indicated by a crosshair cursor is shown on a diagram.
     * Value: true if a crosshair label indicated by a crosshair cursor is shown on a diagram; otherwise, false.
     */
    showCrosshairLabels: boolean;
    /**
     * Gets a value that indicates whether a crosshair cursor argument line is shown for a series point on a diagram.
     * Value: true if a crosshair cursor argument line is displayed on a diagram;  otherwise, false.
     */
    showArgumentLine: boolean;
    /**
     * Specifies whether to show a value line of a series point indicated by a crosshair cursor on a diagram.
     * Value: true to display a value line indicated by a crosshair cursor on a diagram; otherwise, false.
     */
    showValueLine: boolean;
    /**
     * Gets a value that specifies whether to show a crosshair cursor in a focused pane only.
     * Value: true to display a crosshair cursor in a focused pane; otherwise, false.
     */
    showOnlyInFocusedPane: boolean;
    /**
     * Specifies the current snap mode of a crosshair cursor.
     * Value: A string value.
     */
    snapMode: string;
    /**
     * Specifies the way in which the crosshair label is shown for a series on a diagram.
     * Value: A string value that specifies how the crosshair label is shown for a series.
     */
    crosshairLabelMode: string;
    /**
     * Gets a value that indicates whether to show a header for each series group in crosshair cursor labels.
     * Value: true, to show a group header in crosshair cursor labels; otherwise, false.
     */
    showGroupHeaders: boolean;
    /**
     * Gets a string which represents the  pattern specifying the group header text to be displayed within the crosshair label.
     * Value: A String, which represents the group header's pattern.
     */
    groupHeaderPattern: string;
    /**
     * Gets the color of a crosshair argument line.
     * Value: A String value, specifying the color of a crosshair argument line.
     */
    argumentLineColor: string;
    /**
     * Gets the color of a crosshair value line.
     * Value: A String value, specifying the color of a crosshair value line.
     */
    valueLineColor: string;
}
/**
 * The chart print options storage.
 */
interface ASPxClientChartPrintOptions {
    /**
     * Gets the size mode used to print a chart.
     */
    GetSizeMode(): string;
    /**
     * Sets the size mode used to print a chart.
     * @param sizeMode A System.String object, specifying the name of the size mode.
     */
    SetSizeMode(sizeMode: string): void;
    /**
     * Gets a value indicating that the landscape orientation will be used to print a chart.
     */
    GetLandscape(): boolean;
    /**
     * Sets a value indicating that the landscape orientation will be used to print a chart.
     * @param landscape A Boolean value, specifying that the landscape orientation will be used to print a chart.
     */
    SetLandscape(landscape: boolean): void;
    /**
     * Gets the left margin which will be used to print a chart.
     */
    GetMarginLeft(): number;
    /**
     * Sets the left margin which will be used to print a chart.
     * @param marginLeft A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginLeft(marginLeft: number): void;
    /**
     * Gets the top margin which will be used to print a chart.
     */
    GetMarginTop(): number;
    /**
     * Sets the top margin which will be used to print a chart.
     * @param marginTop A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginTop(marginTop: number): void;
    /**
     * Gets the right margin which will be used to print a chart.
     */
    GetMarginRight(): number;
    /**
     * Sets the right margin which will be used to print a chart.
     * @param marginRight A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginRight(marginRight: number): void;
    /**
     * Gets the bottom margin which will be used to print a chart.
     */
    GetMarginBottom(): number;
    /**
     * Sets the bottom margin which will be used to print a chart.
     * @param marginBottom A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginBottom(marginBottom: number): void;
    /**
     * Gets the predefined size ratio of the paper which will be used to print a chart.
     */
    GetPaperKind(): string;
    /**
     * Sets the predefined size ratio of the paper which will be used to print a chart.
     * @param paperKind A System.String object, specifying the name of a size ratio.
     */
    SetPaperKind(paperKind: string): void;
    /**
     * Gets the custom paper width which will be used to print a chart.
     */
    GetCustomPaperWidth(): number;
    /**
     * Sets the custom paper width which will be used to print a chart.
     * @param customPaperWidth A System.Int32 object, specifying the width in hundredths of an inch.
     */
    SetCustomPaperWidth(customPaperWidth: number): void;
    /**
     * Gets the custom paper height which will be used to print a chart.
     */
    GetCustomPaperHeight(): number;
    /**
     * Sets the custom paper height which will be used to print a chart.
     * @param customPaperHeight A System.Int32 object, specifying the height in hundredths of an inch.
     */
    SetCustomPaperHeight(customPaperHeight: number): void;
    /**
     * Gets the name of the custom paper width-height ratio used to print the chart.
     */
    GetCustomPaperName(): string;
    /**
     * Sets the name of the custom paper width-height ratio used to print a chart.
     * @param customPaperName A String object, specifying the name of the custom paper width-height ratio.
     */
    SetCustomPaperName(customPaperName: string): void;
}
/**
 * Represents the client-side equivalent of the CustomLegendItem class.
 */
interface ASPxClientCustomLegendItem extends ASPxClientWebChartElementNamed {
    /**
     * Returns the text displayed by the custom legend item.
     * Value: A string value that specifies legend item text.
     */
    text: string;
}
/**
 * The client-side equivalent of the ASPxDocumentViewer control.
 */
interface ASPxClientDocumentViewer extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDocumentViewer.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs when the value of an item within the Document Viewer's report toolbar is changed.
     */
    ToolbarItemValueChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs when an item within the Document Viewer's report toolbar is clicked.
     */
    ToolbarItemClick: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs on the client side when a report page is loaded into this ASPxClientDocumentViewer instance.
     */
    PageLoad: ASPxClientEvent<ASPxClientReportViewerPageLoadEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Provides access to the Splitter of the ASPxClientDocumentViewer.
     */
    GetSplitter(): ASPxClientSplitter;
    /**
     * Provides access to the ASPxClientDocumentViewer's preview that exposes methods to print and export the document.
     */
    GetViewer(): ASPxClientReportViewer;
    /**
     * Provides access to the Document Viewer toolbar on the client.
     */
    GetToolbar(): ASPxClientReportToolbar;
    /**
     * Provides access to the Ribbon of the ASPxClientDocumentViewer.
     */
    GetRibbonToolbar(): ASPxClientRibbon;
    /**
     * Provides access to the parameters panel of the ASPxClientDocumentViewer.
     */
    GetParametersPanel(): ASPxClientReportParametersPanel;
    /**
     * Provides access to the document of the ASPxClientDocumentViewer.
     */
    GetDocumentMap(): ASPxClientReportDocumentMap;
    /**
     * Sets focus on the report control specified by its bookmark.
     * @param pageIndex An integer value, specifying the page index.
     * @param bookmarkPath A String value, specifying the path to the bookmark.
     */
    GotoBookmark(pageIndex: number, bookmarkPath: string): void;
    /**
     * Initiates a round trip to the server so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Prints the current document.
     */
    Print(): void;
    /**
     * Prints the document's page with the specified page index.
     * @param pageIndex A Int32 representing the index of the page to be printed.
     */
    Print(pageIndex: number): void;
    /**
     * Displays the specified report page.
     * @param pageIndex An integer value, identifying the report page.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Invokes the Search dialog, which allows end-users to search for specific text in a report.
     */
    Search(): void;
    /**
     * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
     */
    IsSearchAllowed(): boolean;
    /**
     * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
     * @param format A string specifying the format to which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Exports a report to a file of the specified format, and saves it to the disk.
     * @param format A string specifying the format to which a report should be exported.
     */
    SaveToDisk(format: string): void;
}
/**
 * A method that will handle the ItemValueChanged event.
 */
interface ASPxClientToolbarItemValueChangedEventHandler<S> {
    /**
     * A method that will handle the ToolbarItemValueChanged event.
     * @param source A Object that is the event source.
     * @param e An ASPxClientToolbarItemValueChangedEventArgs object, containing the event arguments.
     */
    (source: S, e: ASPxClientToolbarItemValueChangedEventArgs): void;
}
/**
 * Provides data for the ItemValueChanged event.
 */
interface ASPxClientToolbarItemValueChangedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Gets the menu item object related to the event.
     * Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
     */
    item: ASPxClientMenuItem;
    /**
     * Provides access to the toolbar's value editor on the client.
     * Value: An ASPxClientControl descendant.
     */
    editor: ASPxClientControl;
}
/**
 * The client-side equivalent of the ASPxQueryBuilder control.
 */
interface ASPxClientQueryBuilder extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientQueryBuilder.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Enables you to customize the menu actions of a Query Builder.
     */
    CustomizeToolbarActions: ASPxClientEvent<ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs when executing the Save command on the client.
     */
    SaveCommandExecute: ASPxClientEvent<ASPxClientQueryBuilderSaveCommandExecuteEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Sends a callback to the server with the specified argument.
     * @param arg A String value, specifying the callback argument.
     */
    PerformCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess: (arg1: string) => void): void;
    /**
     * Updates the localization settings of the ASPxClientQueryBuilder properties.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Returns the object model of a Query Builder.
     */
    GetDesignerModel(): Object;
    /**
     * Gets a client-side model of the currently opened query serialized to Json.
     */
    GetJsonQueryModel(): string;
    /**
     * Saves the current query.
     */
    Save(): void;
    /**
     * Invokes a Data Preview for the current query.
     */
    ShowPreview(): void;
    /**
     * Specifies whether or not the current query is a valid SQL string.
     */
    IsQueryValid(): boolean;
}
/**
 * A method that will handle the SaveCommandExecute event.
 */
interface ASPxClientQueryBuilderSaveCommandExecuteEventHandler<S> {
    /**
     * A method that will handle the SaveCommandExecute event.
     * @param source The event sender.
     * @param e An ASPxClientQueryBuilderSaveCommandExecuteEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientQueryBuilderSaveCommandExecuteEventArgs): void;
}
/**
 * Provides data for the SaveCommandExecute event.
 */
interface ASPxClientQueryBuilderSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    /**
     * Specifies whether or not the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the CustomizeToolbarActions event.
 */
interface ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler<S> {
    /**
     * A method that will handle the CustomizeToolbarActions event.
     * @param source The event sender.
     * @param e An ASPxClientQueryBuilderCustomizeToolbarActionsEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientQueryBuilderCustomizeToolbarActionsEventArgs): void;
}
/**
 * Provides settings to the actions listed in a Query Builder menu.
 */
interface ASPxClientQueryBuilderMenuAction {
    /**
     * Provides access to the text for the command.
     * Value: A String value.
     */
    text: string;
    /**
     * Provides access to the CSS class of the command's glyph.
     * Value: A String value.
     */
    imageClassName: string;
    /**
     * Provides access to the action performed when a Query Builder's button is clicked.
     * Value: The specific action implementation.
     */
    clickAction: Function;
    /**
     * Provides access to the value that specifies whether or not the command is disabled by default.
     * Value: true, if the command is disabled by default; otherwise, false.
     */
    disabled: boolean;
    /**
     * Provides access to the value that specifies whether or not the command is visible in the Query Builder user interface.
     * Value: true if the command is visible; otherwise false.
     */
    visible: boolean;
    /**
     * Provides access to the keyboard shortcut used to invoke the command.
     * Value: A String value.
     */
    hotKey: string;
    /**
     * Provides access to the value that specifies whether or not the command has a visual separator.
     * Value: true, if the command has a visual separator; otherwise, false.
     */
    hasSeparator: string;
    /**
     * Provides access to the location of the displayed command.
     * Value: A String value.
     */
    container: string;
}
/**
 * Provides data for the CustomizeToolbarActions event.
 */
interface ASPxClientQueryBuilderCustomizeToolbarActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the collection of customized menu actions.
     * Value: An ASPxClientQueryBuilderMenuAction array.
     */
    Actions: ASPxClientQueryBuilderMenuAction[];
    /**
     * Returns a menu action with the specified ID.
     * @param actionId A String value, specifying the action ID.
     */
    GetById(actionId: string): ASPxClientQueryBuilderMenuAction;
}
/**
 * The client-side equivalent of the Web Report Designer control.
 */
interface ASPxClientReportDesigner extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientReportDesigner>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportDesigner.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when executing the Save command on the client.
     */
    SaveCommandExecute: ASPxClientEvent<ASPxClientReportDesignerSaveCommandExecuteEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the menu actions of a Web Report Designer.
     */
    CustomizeMenuActions: ASPxClientEvent<ASPxClientReportDesignerCustomizeMenuActionsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs each time a standard editor is created for a report parameter based on a parameter type.
     */
    CustomizeParameterEditors: ASPxClientEvent<ASPxClientReportDesignerCustomizeParameterEditorsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs on the client side when the Report Designer is being closed.
     */
    ExitDesigner: ASPxClientEvent<ASPxClientReportDesignerExitDesignerEventHandler<ASPxClientReportDesigner>>;
    /**
     * Sends a callback to the server with the specified argument.
     * @param arg A String value, specifying the callback argument.
     */
    PerformCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess: (arg1: string) => void): void;
    /**
     * Updates the localization settings of the ASPxClientReportDesigner properties.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Returns the object model of a Web Report Designer.
     */
    GetDesignerModel(): Object;
    /**
     * Gets a client-side model of the currently opened report serialized to Json.
     */
    GetJsonReportModel(): string;
    /**
     * Returns serialization information for the specific property of the specific control type.
     * @param controlType A string that identifies the name of the control type for which serialization information is to be returned.
     * @param propertyDisplayName A string that identifies the name of the property for which serialization information is to be returned.
     */
    GetPropertyInfo(controlType: string, propertyDisplayName: string): ASPxDesignerElementSerializationInfo;
    /**
     * Indicates whether or not the current ASPxClientReportDesigner instance has been modified.
     */
    IsModified(): boolean;
    /**
     * Resets the value returned by the IsModified method.
     */
    ResetIsModified(): void;
}
/**
 * A method that will handle the SaveCommandExecute event.
 */
interface ASPxClientReportDesignerSaveCommandExecuteEventHandler<S> {
    /**
     * A method that will handle the SaveCommandExecute event.
     * @param source The event sender.
     * @param e An ASPxClientReportDesignerSaveCommandExecuteEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientReportDesignerSaveCommandExecuteEventArgs): void;
}
/**
 * Provides data for the SaveCommandExecute event.
 */
interface ASPxClientReportDesignerSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    /**
     * Specifies whether or not the event was handled.
     * Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
     */
    handled: boolean;
}
/**
 * A method that will handle the CustomizeMenuActions event.
 */
interface ASPxClientReportDesignerCustomizeMenuActionsEventHandler<S> {
    /**
     * A method that will handle the CustomizeMenuActions event.
     * @param source The event sender.
     * @param e An ASPxClientReportDesignerCustomizeMenuActionsEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientReportDesignerCustomizeMenuActionsEventArgs): void;
}
/**
 * Provides settings to the actions listed in a Web Report Designer menu.
 */
interface ASPxClientReportDesignerMenuAction {
    /**
     * Provides access to the text for the command.
     * Value: A String value.
     */
    text: string;
    /**
     * Provides access to the CSS class of the command's glyph.
     * Value: A String value.
     */
    imageClassName: string;
    /**
     * Provides access to the action performed when a Web Report Designer's button is clicked.
     * Value: The specific action implementation.
     */
    clickAction: Function;
    /**
     * Provides access to the value that specifies whether or not the command is disabled by default.
     * Value: true, if the command is disabled by default; otherwise, false.
     */
    disabled: boolean;
    /**
     * Provides access to the value that specifies whether or not the command is visible in the designer user interface.
     * Value: true if the command is visible; otherwise false.
     */
    visible: boolean;
    /**
     * Provides access to the keyboard shortcut used to invoke the command.
     * Value: A String value.
     */
    hotKey: string;
    /**
     * Provides access to the value that specifies whether or not the command has a visual separator.
     * Value: true, if the command has a visual separator; otherwise, false.
     */
    hasSeparator: string;
    /**
     * Provides access to the location of the displayed command.
     * Value: A String value.
     */
    container: string;
}
/**
 * Provides data for the CustomizeMenuActions event.
 */
interface ASPxClientReportDesignerCustomizeMenuActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the collection of customized menu actions.
     * Value: An ASPxClientReportDesignerMenuAction array.
     */
    Actions: ASPxClientReportDesignerMenuAction[];
    /**
     * Returns a menu action with the specified ID.
     * @param actionId A String value, specifying the action ID.
     */
    GetById(actionId: string): ASPxClientReportDesignerMenuAction;
}
/**
 * Provides data for the ExitDesigner event.
 */
interface ASPxClientReportDesignerExitDesignerEventArgs extends ASPxClientEventArgs {
}
/**
 * A method that will handle the CustomizeParameterEditors event.
 */
interface ASPxClientReportDesignerCustomizeParameterEditorsEventHandler<S> {
    /**
     * A method that will handle the CustomizeParameterEditors event.
     * @param source The event sender.
     * @param e An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientCustomizeParameterEditorsEventArgs): void;
}
/**
 * A method that will handle the ExitDesigner event.
 */
interface ASPxClientReportDesignerExitDesignerEventHandler<S> {
    /**
     * A method that will handle the ExitDesigner event.
     * @param source The event sender.
     * @param e An ASPxClientReportDesignerExitDesignerEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientReportDesignerExitDesignerEventArgs): void;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's Document Map.
 */
interface ASPxClientReportDocumentMap extends ASPxClientControl {
    /**
     * Occurs after the content of the Document Viewer's document map is updated.
     */
    ContentChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientReportDocumentMap>>;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's Parameters Panel.
 */
interface ASPxClientReportParametersPanel extends ASPxClientControl {
    /**
     * Assigns a value to a parameter of the report displayed in the document viewer.
     * @param parametersInfo An array of ASPxClientReportParameterInfo values specifying parameters and values to assign.
     */
    AssignParameters(parametersInfo: ASPxClientReportParameterInfo[]): void;
    /**
     * Assigns a value to a parameter of the report displayed in the document viewer.
     * @param path A System.String specifying the parameter's path.
     * @param value An object specifying the parameter value.
     */
    AssignParameter(path: string, value: Object): void;
    /**
     * Returns an array storing the names of parameters available in a report.
     */
    GetParameterNames(): string[];
    /**
     * Returns a value editor that is associated with a parameter with the specified name.
     * @param parameterName A String value, specifying the parameter name.
     */
    GetEditorByParameterName(parameterName: string): ASPxClientControl;
}
interface ASPxClientReportParameterInfo {
    Path: string;
    Value: Object;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's toolbar.
 */
interface ASPxClientReportToolbar extends ASPxClientControl {
    /**
     * Provides access to the control template assigned for the specified menu item.
     * @param name A String value, specifying the menu item name.
     */
    GetItemTemplateControl(name: string): ASPxClientControl;
}
/**
 * The client-side equivalent of the ReportViewer.
 */
interface ASPxClientReportViewer extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientReportViewer>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientReportViewer>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportViewer.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientReportViewer>>;
    /**
     * Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
     */
    PageLoad: ASPxClientEvent<ASPxClientReportViewerPageLoadEventHandler<ASPxClientReportViewer>>;
    /**
     * Submits the values of the specified parameters.
     * @param parameters A dictionary containing the parameter names, along with their Object values.
     */
    SubmitParameters(parameters: { [key: string]: Object; }): void;
    /**
     * Prints a report shown in the ReportViewer.
     */
    Print(): void;
    /**
     * Prints a report page with the specified page index.
     * @param pageIndex An integer value which specifies an index of the page to be printed.
     */
    Print(pageIndex: number): void;
    /**
     * Displays a report page with the specified page index in the ReportViewer.
     * @param pageIndex An integer value which specifies the index of a page to be displayed.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Initiates a round trip to the server so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Invokes the Search dialog, which allows end-users to search for specific text in a report.
     */
    Search(): void;
    /**
     * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
     * @param format A string specifying the format, to which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Exports a report to a file of the specified format, and saves it to the disk.
     * @param format A string specifying the format, to which a report should be exported.
     */
    SaveToDisk(format: string): void;
    /**
     * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
     */
    IsSearchAllowed(): boolean;
}
interface ASPxClientReportViewerPageLoadEventHandler<S> {
    (source: S, e: ASPxClientReportViewerPageLoadEventArgs): void;
}
/**
 * Provides data for a Report Viewer's PageLoad event on the client side.
 */
interface ASPxClientReportViewerPageLoadEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a value specifying a zero-based index of a page to be displayed in a report viewer.
     * Returns: $
     */
    PageIndex: number;
    /**
     * Gets a value specifying the total number of pages displayed in a report viewer.
     * Returns: $
     */
    PageCount: number;
    /**
     * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the first page of a report.
     */
    IsFirstPage(): boolean;
    /**
     * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the last page of a report.
     */
    IsLastPage(): boolean;
}
/**
 * Provides data for the CustomizeParameterEditors events.
 */
interface ASPxClientCustomizeParameterEditorsEventArgs extends ASPxClientEventArgs {
    /**
     * Provides access to an object that stores information about a parameter.
     * Value: An ASPxDesignerElementParameterDescriptor object.
     */
    parameter: ASPxDesignerElementParameterDescriptor;
    /**
     * Provides access to an object that stores information required to serialize a parameter editor.
     * Value: An ASPxDesignerElementSerializationInfo object.
     */
    info: ASPxDesignerElementSerializationInfo;
}
/**
 * Provides general information about a report parameter.
 */
interface ASPxDesignerElementParameterDescriptor {
    /**
     * Provides access to the parameter description.
     * Value: A String value, specifying the parameter description.
     */
    description: string;
    /**
     * Provides access to the parameter name.
     * Value: A String value, specifying the parameter name.
     */
    name: string;
    /**
     * Provides access to the parameter type.
     * Value: A String value, specifying the parameter type.
     */
    type: string;
    /**
     * Provides access to the parameter value.
     * Value: A Object, specifying the parameter value.
     */
    value: Object;
    /**
     * Provides access to the parameter visibility state.
     * Value: true if the parameter is visible; otherwise false.
     */
    visible: boolean;
}
/**
 * Provides information required to serialize an element.
 */
interface ASPxDesignerElementSerializationInfo {
    /**
     * Gets the property name that will be used in the model to store the property value.
     * Value: A String value.
     */
    propertyName: string;
    /**
     * Gets the property name in the model that is displayed in the Property grid.
     * Value: A String value.
     */
    displayName: string;
    /**
     * Gets the property name that will be used during serialization to store the property value.
     * Value: A String value.
     */
    modelName: string;
    /**
     * Gets the default property value used for serialization.
     * Value: A Object value.
     */
    defaultVal: Object;
    /**
     * Gets the information about a complex object's content.
     * Value: An array of ASPxDesignerElementSerializationInfo objects.
     */
    info: ASPxDesignerElementSerializationInfo[];
    /**
     * Gets a value indicating whether or not the property returns an array.
     * Value: true if the property returns an array; otherwise false.
     */
    array: boolean;
    /**
     * Gets a value indicating whether an object should be serialized to the ComponentStorage property.
     * Value: true to serialize an object to the ObjectStorage; otherwise false.
     */
    link: boolean;
    /**
     * Gets a value specifying the type of value editor for the Property Grid.
     * Value: An ASPxDesignerElementEditor object.
     */
    editor: ASPxDesignerElementEditor;
    /**
     * Gets the collection of values displayed in the Property grid.
     * Value: An array of ASPxDesignerElementEditorItem objects.
     */
    valuesArray: ASPxDesignerElementEditorItem[];
    /**
     * Gets the rules for validating the property value entered into its editor.
     * Value: An array of Object values.
     */
    validationRules: Object[];
    /**
     * Gets the visibility state of the value editor in the Property Grid.
     * Value: A Object value.
     */
    visible: Object;
    /**
     * Gets a value, indicating whether or not the property value can be edited.
     * Value: true to disable the property editing; otherwise false.
     */
    disabled: Object;
}
/**
 * Provides information about a serialized property's value editor used in the Property Grid.
 */
interface ASPxDesignerElementEditor {
    /**
     * Gets the name of an HTML template specifying the editor and header of a complex object (i.e., an object having its content properties specified).
     * Value: A String value.
     */
    header: string;
    /**
     * Gets a nullable value, specifying the name of an HTML template used by a complex object's editor.
     * Value: A String value.
     */
    content: string;
    /**
     * Gets a nullable value, specifying the type of the editor's model.
     * Value: A Object value.
     */
    editorType: Object;
}
/**
 * Provides information about property values.
 */
interface ASPxDesignerElementEditorItem {
    /**
     * Gets an actual property value.
     * Value: A Object value.
     */
    value: Object;
    /**
     * Gets a value displayed by a property editor.
     * Value: A String value.
     */
    displayValue: string;
}
/**
 * A client-side equivalent of the ASPxWebDocumentViewer class.
 */
interface ASPxClientWebDocumentViewer extends ASPxClientControl {
    /**
     * Enables you to customize the menu actions of a Web Document Viewer.
     */
    CustomizeMenuActions: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs each time a standard editor is created for a report parameter based on a parameter type.
     */
    CustomizeParameterEditors: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Provides access to the preview model of the ASPxClientWebDocumentViewer.
     */
    GetPreviewModel(): Object;
    /**
     * Opens the specified report in the HTML5 Document Viewer.
     */
    OpenReport(): Object;
    /**
     * Prints the current document.
     */
    Print(): void;
    /**
     * Prints the document's page with the specified index.
     * @param pageIndex An index of the page to be printed.
     */
    Print(pageIndex: number): void;
    /**
     * Exports the document to a PDF file.
     */
    ExportTo(): void;
    /**
     * Exports the document to a specified file format.
     * @param format A String value, specifying the export format. The following formats are currently supported: 'csv', 'html', 'image', 'mht', 'pdf', 'rtf', 'txt', 'xls', and 'xlsx'.
     */
    ExportTo(format: string): void;
    /**
     * Updates the localization settings of the ASPxClientWebDocumentViewer properties.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
}
/**
 * A method that will handle the CustomizeMenuActions event.
 */
interface ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<S> {
    /**
     * A method that will handle the CustomizeMenuActions event.
     * @param source The event sender.
     * @param e An ASPxClientWebDocumentViewerCustomizeMenuActionsEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientWebDocumentViewerCustomizeMenuActionsEventArgs): void;
}
/**
 * Provides settings to the actions listed in a Web Document Viewer menu.
 */
interface ASPxClientWebDocumentViewerMenuAction {
    /**
     * Provides access to the text for the command.
     * Value: A String value.
     */
    text: string;
    /**
     * Provides access to the CSS class of the command's glyph.
     * Value: A String value.
     */
    imageClassName: string;
    /**
     * Provides access to the action performed when a Document Viewer's button is clicked.
     * Value: The specific action implementation.
     */
    clickAction: Function;
    /**
     * Provides access to the value that specifies whether or not the command is disabled by default.
     * Value: true, if the command is disabled by default; otherwise, false.
     */
    disabled: boolean;
    /**
     * Provides access to the value that specifies whether or not the command is visible in the Document Viewer user interface.
     * Value: true if the command is visible; otherwise false.
     */
    visible: boolean;
    /**
     * Provides access to the keyboard shortcut used to invoke the command.
     * Value: A String value.
     */
    hotKey: string;
    /**
     * Provides access to the value that specifies whether or not the command has a visual separator.
     * Value: true, if the command has a visual separator; otherwise, false.
     */
    hasSeparator: string;
    /**
     * Provides access to the location of the displayed command.
     * Value: A String value.
     */
    container: string;
}
/**
 * Provides data for the CustomizeMenuActions event.
 */
interface ASPxClientWebDocumentViewerCustomizeMenuActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the collection of customized menu actions.
     * Value: An ASPxClientWebDocumentViewerMenuAction array.
     */
    Actions: ASPxClientWebDocumentViewerMenuAction[];
    /**
     * Returns a menu action with the specified ID.
     * @param actionId A String value, specifying the action ID.
     */
    GetById(actionId: string): ASPxClientWebDocumentViewerMenuAction;
}
/**
 * A method that will handle the CustomizeParameterEditors event.
 */
interface ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler<S> {
    /**
     * A method that will handle the CustomizeParameterEditors event.
     * @param source The event sender.
     * @param e An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
     */
    (source: S, e: ASPxClientCustomizeParameterEditorsEventArgs): void;
}

interface MVCxClientDashboardViewerStatic extends ASPxClientDashboardViewerStatic {
}
interface DashboardDataAxisNamesStatic {
    /**
     * Identifies a default axis in all data-bound dashboard items.
     */
    DefaultAxis: string;
    /**
     * Identifies a series axis in a chart and pie.
     */
    ChartSeriesAxis: string;
    /**
     * Identifies an argument axis in a chart, scatter chart and pie.
     */
    ChartArgumentAxis: string;
    /**
     * Identifies a sparkline axis in a grid and cards.
     */
    SparklineAxis: string;
    /**
     * Identifies a pivot column axis.
     */
    PivotColumnAxis: string;
    /**
     * Identifies a pivot row axis.
     */
    PivotRowAxis: string;
}
interface DashboardSpecialValuesStatic {
    /**
     * Represents a null value.
     */
    NullValue: string;
    /**
     * Represents a null value in OLAP mode.
     */
    OlapNullValue: string;
    /**
     * Represents an Others value.
     */
    OthersValue: string;
    /**
     * Represents an error value for calculated fields.
     */
    ErrorValue: string;
    /**
     * Returns whether or not the specified value is an NullValue.
     * @param value The specified value.
     */
    IsNullValue(value: Object): boolean;
    /**
     * Returns whether or not the specified value is an OlapNullValue.
     * @param value The specified value.
     */
    IsOlapNullValue(value: Object): boolean;
    /**
     * Returns whether or not the specified value is an OthersValue.
     * @param value The specified value.
     */
    IsOthersValue(value: Object): boolean;
    /**
     * Returns whether or not the specified value is an ErrorValue.
     * @param value The specified value.
     */
    IsErrorValue(value: Object): boolean;
}
interface ASPxClientDashboardDesignerStatic extends ASPxClientControlStatic {
}
interface ASPxClientDashboardViewerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDashboardViewer;
}
interface DashboardExportPageLayoutStatic {
    /**
     * The page orientation used to export a dashboard (dashboard item) is portrait.
     */
    Portrait: string;
    /**
     * The page orientation used to export a dashboard (dashboard item) is landscape.
     */
    Landscape: string;
}
interface DashboardExportPaperKindStatic {
    /**
     * Letter paper (8.5 in. by 11 in.).
     */
    Letter: string;
    /**
     * Legal paper (8.5 in. by 14 in.).
     */
    Legal: string;
    /**
     * Executive paper (7.25 in. by 10.5 in.).
     */
    Executive: string;
    /**
     * A5 paper (148 mm by 210 mm).
     */
    A5: string;
    /**
     * A4 paper (210 mm by 297 mm).
     */
    A4: string;
    /**
     * A3 paper (297 mm by 420 mm).
     */
    A3: string;
}
interface DashboardExportScaleModeStatic {
    /**
     * The dashboard (dashboard item) on the exported page retains its original size.
     */
    None: string;
    /**
     * The size of the dashboard (dashboard item) on the exported page is changed according to the scale factor value.
     */
    UseScaleFactor: string;
    /**
     * The size of the dashboard (dashboard item) is changed according to the width of the exported page.
     */
    AutoFitToPageWidth: string;
    /**
     * The size of the dashboard (dashboard item) is changed to fit its content on a single page.
     */
    AutoFitWithinOnePage: string;
}
interface DashboardExportFilterStateStatic {
    /**
     * The filter state is not included in the exported document.
     */
    None: string;
    /**
     * The filter state is placed below the dashboard (dashboard item) in the exported document.
     */
    Below: string;
    /**
     * The filter state is placed on a separate page in the exported document.
     */
    SeparatePage: string;
}
interface DashboardExportImageFormatStatic {
    /**
     * The PNG image format.
     */
    Png: string;
    /**
     * The GIF image format.
     */
    Gif: string;
    /**
     * The JPG image format.
     */
    Jpg: string;
}
interface DashboardExportExcelFormatStatic {
    /**
     * The Excel 97 - Excel 2003 (XLS) file format.
     */
    Xls: string;
    /**
     * The Office Excel 2007 XML-based (XLSX) file format.
     */
    Xlsx: string;
    /**
     * A comma-separated values (CSV) file format.
     */
    Csv: string;
}
interface ChartExportSizeModeStatic {
    /**
     * A chart dashboard item is exported in a size identical to that shown on the dashboard.
     */
    None: string;
    /**
     * A chart dashboard item is stretched or shrunk to fit the page to which it is exported.
     */
    Stretch: string;
    /**
     * A chart dashboard item is resized proportionally to best fit the exported page.
     */
    Zoom: string;
}
interface MapExportSizeModeStatic {
    /**
     * A map dashboard item is exported in a size identical to that shown on the dashboard
     */
    None: string;
    /**
     * A map dashboard item is resized proportionally to best fit the exported page.
     */
    Zoom: string;
}
interface RangeFilterExportSizeModeStatic {
    /**
     * A Range Filter dashboard item is exported in a size identical to that shown on the dashboard.
     */
    None: string;
    /**
     * A Range Filter dashboard item is stretched or shrunk to fit the page to which it is exported.
     */
    Stretch: string;
    /**
     * A Range Filter dashboard item is resized proportionally to best fit the printed page.
     */
    Zoom: string;
}
interface DashboardSelectionModeStatic {
    None: string;
    Single: string;
    Multiple: string;
}
interface ASPxClientEditBaseStatic extends ASPxClientControlStatic {
}
interface ASPxClientEditStatic extends ASPxClientEditBaseStatic {
    /**
     * Assigns a null value to all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value specifying the validation group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
     */
    ClearEditorsInContainer(container: Object, validationGroup: string, clearInvisibleEditors: boolean): void;
    /**
     * Assigns a null value to all visible editors located within a specified container, and belonging to a specific validation group.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value specifying the validation group's name.
     */
    ClearEditorsInContainer(container: Object, validationGroup: string): void;
    /**
     * Assigns a null value to all visible editors located within a specified container.
     * @param container An HTML element specifying the container of editors to be validated.
     */
    ClearEditorsInContainer(container: Object): void;
    /**
     * Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group, dependent on the visibility state specified.
     * @param containerId A string value specifying the editor container's identifier.
     * @param validationGroup A string value specifying the validatiion group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
     */
    ClearEditorsInContainerById(containerId: string, validationGroup: string, clearInvisibleEditors: boolean): void;
    /**
     * Assigns a null value to all visible editors that are located within the specified container object, and belonging to a specific validation group.
     * @param containerId A string value specifying the editor container's identifier.
     * @param validationGroup A string value specifying the validatiion group's name.
     */
    ClearEditorsInContainerById(containerId: string, validationGroup: string): void;
    /**
     * Assigns a null value to all visible editors that are located within the specified container object.
     * @param containerId A string value specifying the editor container's identifier.
     */
    ClearEditorsInContainerById(containerId: string): void;
    /**
     * Assigns a null value to all editors which belong to a specific validation group, dependent on the visibility state specified.
     * @param validationGroup A string value specifying the validation group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified validation group; false to clear only visible editors.
     */
    ClearGroup(validationGroup: string, clearInvisibleEditors: boolean): void;
    /**
     * Assigns a null value to all visible editors which belong to a specific validation group.
     * @param validationGroup A string value specifying the validation group's name.
     */
    ClearGroup(validationGroup: string): void;
    /**
     * Performs validation of all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
     */
    ValidateEditorsInContainer(container: Object, validationGroup: string, validateInvisibleEditors: boolean): boolean;
    /**
     * Performs validation of visible editors that are located within the specified container and belong to a specific validation group.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     */
    ValidateEditorsInContainer(container: Object, validationGroup: string): boolean;
    /**
     * Performs validation of visible editors that are located within the specified container.
     * @param container An HTML element specifying the container of editors to be validated.
     */
    ValidateEditorsInContainer(container: Object): boolean;
    /**
     * Performs validation of the editors which are located within the specified container and belong to a specific validation group, dependent on the visibility state specified.
     * @param containerId A string value specifying the editor container's identifier.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
     */
    ValidateEditorsInContainerById(containerId: string, validationGroup: string, validateInvisibleEditors: boolean): boolean;
    /**
     * Performs validation of visible editors that are located within the specified container and belong to a specific validation group.
     * @param containerId A string value that specifies the container's unique identifier.
     * @param validationGroup A string value that specifies the validation group's name.
     */
    ValidateEditorsInContainerById(containerId: string, validationGroup: string): boolean;
    /**
     * Performs validation of visible editors which are located within the specified container.
     * @param containerId A string value that specifies the container's unique identifier.
     */
    ValidateEditorsInContainerById(containerId: string): boolean;
    /**
     * Performs validation of editors contained within the specified validation group, dependent on the editor visibility state specified.
     * @param validationGroup A string value specifying the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified validation group; false to validate only visible editors.
     */
    ValidateGroup(validationGroup: string, validateInvisibleEditors: boolean): boolean;
    /**
     * Performs validation of visible editors contained within the specified validation group.
     * @param validationGroup A string value specifying the validation group's name.
     */
    ValidateGroup(validationGroup: string): boolean;
    /**
     * Verifies whether the editors in a specified visibility state, which are located within a specified container and belong to a specific validation group, are valid.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param checkInvisibleEditors true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
     */
    AreEditorsValid(container: Object, validationGroup: string, checkInvisibleEditors: boolean): boolean;
    /**
     * Verifies whether visible editors, which are located within a specified container and belong to a specific validation group, are valid.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     */
    AreEditorsValid(container: Object, validationGroup: string): boolean;
    /**
     * Verifies whether visible editors located in a specified container are valid.
     * @param container An HTML element specifying the container of editors to be validated.
     */
    AreEditorsValid(container: Object): boolean;
    /**
     * Verifies whether the editors with the specified settings are valid.
     * @param containerId A string value that specifies the container's unique identifier.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param checkInvisibleEditors true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
     */
    AreEditorsValid(containerId: string, validationGroup: string, checkInvisibleEditors: boolean): boolean;
    /**
     * Verifies whether visible editors with the specified settings are valid.
     * @param containerId A string value that specifies the container's unique identifier.
     * @param validationGroup A string value that specifies the validation group's name.
     */
    AreEditorsValid(containerId: string, validationGroup: string): boolean;
    /**
     * Verifies whether visible editors with the specified settings are valid.
     * @param containerId A string value that specifies the container's unique identifier.
     */
    AreEditorsValid(containerId: string): boolean;
    /**
     * Verifies whether visible editors on a page are valid.
     */
    AreEditorsValid(): boolean;
}
interface ASPxClientBinaryImageStatic extends ASPxClientEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientBinaryImage;
}
interface ASPxClientButtonStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientButton;
}
interface ASPxClientCalendarStatic extends ASPxClientEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCalendar;
}
interface ASPxClientCaptchaStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCaptcha;
}
interface ASPxClientCheckBoxStatic extends ASPxClientEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCheckBox;
}
interface ASPxClientRadioButtonStatic extends ASPxClientCheckBoxStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientRadioButton;
}
interface ASPxClientTextEditStatic extends ASPxClientEditStatic {
}
interface ASPxClientTextBoxBaseStatic extends ASPxClientTextEditStatic {
}
interface ASPxClientButtonEditBaseStatic extends ASPxClientTextBoxBaseStatic {
}
interface ASPxClientDropDownEditBaseStatic extends ASPxClientButtonEditBaseStatic {
}
interface ASPxClientColorEditStatic extends ASPxClientDropDownEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientColorEdit;
}
interface ASPxClientComboBoxStatic extends ASPxClientDropDownEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientComboBox;
}
interface ASPxClientDateEditStatic extends ASPxClientDropDownEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDateEdit;
}
interface ASPxClientDropDownEditStatic extends ASPxClientDropDownEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDropDownEdit;
}
interface ASPxClientFilterControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientFilterControl;
}
interface ASPxClientListEditStatic extends ASPxClientEditStatic {
}
interface ASPxClientListBoxStatic extends ASPxClientListEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientListBox;
}
interface ASPxClientCheckListBaseStatic extends ASPxClientListEditStatic {
}
interface ASPxClientRadioButtonListStatic extends ASPxClientCheckListBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientRadioButtonList;
}
interface ASPxClientCheckBoxListStatic extends ASPxClientCheckListBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCheckBoxList;
}
interface ASPxClientProgressBarStatic extends ASPxClientEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientProgressBar;
}
interface ASPxClientSpinEditBaseStatic extends ASPxClientButtonEditBaseStatic {
}
interface ASPxClientSpinEditStatic extends ASPxClientSpinEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientSpinEdit;
}
interface ASPxClientTimeEditStatic extends ASPxClientSpinEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTimeEdit;
}
interface ASPxClientStaticEditStatic extends ASPxClientEditBaseStatic {
}
interface ASPxClientHyperLinkStatic extends ASPxClientStaticEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientHyperLink;
}
interface ASPxClientImageBaseStatic extends ASPxClientStaticEditStatic {
}
interface ASPxClientImageStatic extends ASPxClientImageBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientImage;
}
interface ASPxClientLabelStatic extends ASPxClientStaticEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientLabel;
}
interface ASPxClientTextBoxStatic extends ASPxClientTextBoxBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTextBox;
}
interface ASPxClientMemoStatic extends ASPxClientTextEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientMemo;
}
interface ASPxClientButtonEditStatic extends ASPxClientButtonEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientButtonEdit;
}
interface ASPxClientTokenBoxStatic extends ASPxClientComboBoxStatic {
    Cast(obj: Object): ASPxClientTokenBox;
}
interface ASPxClientTrackBarStatic extends ASPxClientEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTrackBar;
}
interface ASPxClientValidationSummaryStatic extends ASPxClientControlStatic {
}
interface ASPxClientGaugeControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientGaugeControl;
}
interface ASPxClientGridBaseStatic extends ASPxClientControlStatic {
}
interface ASPxClientGridViewCallbackCommandStatic {
    /**
     * Default value: "NEXTPAGE"
     */
    NextPage: string;
    /**
     * Default value: "PREVPAGE"
     */
    PreviousPage: string;
    /**
     * Default value: "GOTOPAGE"
     */
    GotoPage: string;
    /**
     * Default value: "SELECTROWS"
     */
    SelectRows: string;
    /**
     * Default value: "SELECTROWSKEY"
     */
    SelectRowsKey: string;
    /**
     * Default value: "SELECTION"
     */
    Selection: string;
    /**
     * Default value: "FOCUSEDROW"
     */
    FocusedRow: string;
    /**
     * Default value: "GROUP"
     */
    Group: string;
    /**
     * Default value: "UNGROUP"
     */
    UnGroup: string;
    /**
     * Default value: "SORT"
     */
    Sort: string;
    /**
     * Default value: "COLUMNMOVE"
     */
    ColumnMove: string;
    /**
     * Default value: "COLLAPSEALL"
     */
    CollapseAll: string;
    /**
     * Default value: "EXPANDALL"
     */
    ExpandAll: string;
    /**
     * Default value: "EXPANDROW"
     */
    ExpandRow: string;
    /**
     * Default value: "COLLAPSEROW"
     */
    CollapseRow: string;
    /**
     * Default value: "HIDEALLDETAIL"
     */
    HideAllDetail: string;
    /**
     * Default value: "SHOWALLDETAIL"
     */
    ShowAllDetail: string;
    /**
     * Default value: "SHOWDETAILROW"
     */
    ShowDetailRow: string;
    /**
     * Default value: "HIDEDETAILROW"
     */
    HideDetailRow: string;
    /**
     * Default value: "PAGERONCLICK"
     */
    PagerOnClick: string;
    /**
     * Default value: "APPLYFILTER"
     */
    ApplyFilter: string;
    /**
     * Default value: "APPLYCOLUMNFILTER"
     */
    ApplyColumnFilter: string;
    /**
     * Default value: "APPLYMULTICOLUMNFILTER"
     */
    ApplyMultiColumnFilter: string;
    /**
     * Default value: "APPLYHEADERCOLUMNFILTER"
     */
    ApplyHeaderColumnFilter: string;
    /**
     * Default value: "APPLYSEARCHPANELFILTER"
     */
    ApplySearchPanelFilter: string;
    /**
     * Default value: "FILTERROWMENU"
     */
    FilterRowMenu: string;
    /**
     * Default value: "STARTEDIT"
     */
    StartEdit: string;
    /**
     * Default value: "CANCELEDIT"
     */
    CancelEdit: string;
    /**
     * Default value: "UPDATEEDIT"
     */
    UpdateEdit: string;
    /**
     * Default value: "ADDNEWROW"
     */
    AddNewRow: string;
    /**
     * Default value: "DELETEROW"
     */
    DeleteRow: string;
    /**
     * Default value: "CUSTOMBUTTON"
     */
    CustomButton: string;
    /**
     * Default value: "CUSTOMCALLBACK"
     */
    CustomCallback: string;
    /**
     * Default value: "SHOWFILTERCONTROL"
     */
    ShowFilterControl: string;
    /**
     * Default value: "CLOSEFILTERCONTROL"
     */
    CloseFilterControl: string;
    /**
     * Default value: "SETFILTERENABLED"
     */
    SetFilterEnabled: string;
    /**
     * Default value: "REFRESH"
     */
    Refresh: string;
    /**
     * Default value: "SELFIELDVALUES"
     */
    SelFieldValues: string;
    /**
     * Default value: "ROWVALUES"
     */
    RowValues: string;
    /**
     * Default value: "PAGEROWVALUES"
     */
    PageRowValues: string;
    /**
     * Default value: "FILTERPOPUP"
     */
    FilterPopup: string;
    /**
     * Default value: "CONTEXTMENU"
     */
    ContextMenu: string;
    /**
     * Default value: "CUSTOMVALUES"
     */
    CustomValues: string;
}
interface ASPxClientGridLookupStatic extends ASPxClientDropDownEditBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientGridLookup;
}
interface ASPxClientCardViewStatic extends ASPxClientGridBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCardView;
}
interface ASPxClientGridViewStatic extends ASPxClientGridBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientGridView;
}
interface ASPxClientVerticalGridStatic extends ASPxClientGridBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientVerticalGrid;
}
interface ASPxClientVerticalGridCallbackCommandStatic {
    /**
     * Default value: "EXPANDROW"
     */
    ExpandRow: string;
}
interface ASPxClientCommandConstsStatic {
    /**
     * Identifies a command that shows a search panel.
     * Value: "showsearchpanel"
     */
    SHOWSEARCHPANEL_COMMAND: string;
    /**
     * Identifies a command that invokes the Find and Replace dialog.
     * Value: "findandreplacedialog"
     */
    FINDANDREPLACE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that applies the bold text formatting to the selected text. If it's already applied, cancels it.
     * Value: "bold"
     */
    BOLD_COMMAND: string;
    /**
     * Identifies a command that makes the selected text italic or regular type depending on the current state.
     * Value: "italic"
     */
    ITALIC_COMMAND: string;
    /**
     * Identifies a command that applies the underline text formatting to the selected text. If it's already applied, cancels it.
     * Value: "underline"
     */
    UNDERLINE_COMMAND: string;
    /**
     * Identifies a command that applies the strike through text formatting to the selected text. If it's already applied, cancels it.
     * Value: "strikethrough"
     */
    STRIKETHROUGH_COMMAND: string;
    /**
     * Identifies a command that applies the superscript text formatting to the selected text. If it's already applied, cancels it.
     * Value: "superscript"
     */
    SUPERSCRIPT_COMMAND: string;
    /**
     * Identifies a command that applies the subscript text formatting to the selected text. If it's already applied, cancels it.
     * Value: "subscript"
     */
    SUBSCRIPT_COMMAND: string;
    /**
     * Identifies a command that centers the content of the currently focused paragraph.
     * Value: "justifycenter"
     */
    JUSTIFYCENTER_COMMAND: string;
    /**
     * Identifies a command that left justifies the content of the currently focused paragraph.
     * Value: "justifyleft"
     */
    JUSTIFYLEFT_COMMAND: string;
    /**
     * Identifies a command that creates an indent for the selected paragarph.
     * Value: "indent"
     */
    INDENT_COMMAND: string;
    /**
     * Identifies a command that creates an outdent for the focused paragarph.
     * Value: "outdent"
     */
    OUTDENT_COMMAND: string;
    /**
     * Identifies a command that right justifies the content of the currently focused paragraph.
     * Value: "justifyright"
     */
    JUSTIFYRIGHT_COMMAND: string;
    /**
     * Identifies a command that fully justifies the content of the currently focused paragraph (aligned with both the left and right margines).
     * Value: "justifyfull"
     */
    JUSTIFYFULL_COMMAND: string;
    /**
     * Identifies a command that changes the size of the selected text.
     * Value: "fontsize"
     */
    FONTSIZE_COMMAND: string;
    /**
     * Identifies a command that changes the font of the selected text.
     * Value: "fontname"
     */
    FONTNAME_COMMAND: string;
    /**
     * Identifies a command that changes the color of a fore color pickers and sets the selected text fore color.
     * Value: "forecolor"
     */
    FONTCOLOR_COMMAND: string;
    /**
     * Identifies a command that changes the color of a back color pickers and sets the selected text back color.
     * Value: "backcolor"
     */
    BACKCOLOR_COMMAND: string;
    /**
     * Identifies a command that wraps the selected paragraph in the specified html tag.
     * Value: "formatblock"
     */
    FORMATBLOCK_COMMAND: string;
    /**
     * Identifies a command that wraps the currently selected text content in a specific html tag with a css class assigned to it.
     * Value: "applycss"
     */
    APPLYCSS_COMMAND: string;
    /**
     * Identifies a command that removes all formatting from the selected content.
     * Value: "removeformat"
     */
    REMOVEFORMAT_COMMAND: string;
    /**
     * Identifies a command that cancels the last action.
     * Value: "undo"
     */
    UNDO_COMMAND: string;
    /**
     * Identifies a command that returns a previously canceled action.
     * Value: "redo"
     */
    REDO_COMMAND: string;
    /**
     * Identifies a command that copies the selected content.
     * Value: "copy"
     */
    COPY_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard at the current cursor position.
     * Value: "paste"
     */
    PASTE_COMMAND: string;
    /**
     * Identifies a command that pastes a specified content taking into account that it was copied from Word.
     * Value: "pastefromword"
     */
    PASTEFROMWORD_COMMAND: string;
    /**
     * Identifies a command that invokes the Paste from Word dialog.
     * Value: "pastefromworddialog"
     */
    PASTEFROMWORDDIALOG_COMMAND: string;
    /**
     * Identifies a command that cuts the selected content.
     * Value: "cut"
     */
    CUT_COMMAND: string;
    /**
     * Identifies a command that selects all content inside the html editor.
     * Value: "selectall"
     */
    SELECT_ALL: string;
    /**
     * Identifies a command that deletes the selected content.
     * Value: "delete"
     */
    DELETE_COMMAND: string;
    /**
     * Identifies a command that can be used to correctly insert HTML code into the editor.
     * Value: "pastehtml"
     */
    PASTEHTML_COMMAND: string;
    /**
     * Identifies a command that inserts a new ordered list.
     * Value: "insertorderedlist"
     */
    INSERTORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that inserts a new unordered list.
     * Value: "insertunorderedlist"
     */
    INSERTUNORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that restarts the current ordered list.
     * Value: "restartorderedlist"
     */
    RESTARTORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that continues a disrupted ordered list.
     * Value: "continueorderedlist"
     */
    CONTINUEORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that removes a hyperlink from the selected text or image.
     * Value: "unlink"
     */
    UNLINK_COMMAND: string;
    /**
     * Identifies a command that inserts a new hyperlink.
     * Value: "insertlink"
     */
    INSERTLINK_COMMAND: string;
    /**
     * Identifies a command that inserts a new image.
     * Value: "insertimage"
     */
    INSERTIMAGE_COMMAND: string;
    /**
     * Identifies a command that changes the selected image.
     * Value: "changeimage"
     */
    CHANGEIMAGE_COMMAND: string;
    /**
     * Identifies a command that initiates spell checking.
     * Value: "checkspelling"
     */
    CHECKSPELLING_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Image dialog.
     * Value: "insertimagedialog"
     */
    INSERTIMAGE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Image dialog.
     * Value: "changeimagedialog"
     */
    CHANGEIMAGE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Link dialog.
     * Value: "insertlinkdialog"
     */
    INSERTLINK_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Link dialog.
     * Value: "changelinkdialog"
     */
    CHANGELINK_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Table dialog.
     * Value: "inserttabledialog"
     */
    INSERTTABLE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Table Properties dialog.
     * Value: "tablepropertiesdialog"
     */
    TABLEPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Cell Properties dialog.
     * Value: "tablecellpropertiesdialog"
     */
    TABLECELLPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Column Properties dialog.
     * Value: "tablecolumnpropertiesdialog"
     */
    TABLECOLUMNPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Row Properties dialog.
     * Value: "tablerowpropertiesdialog"
     */
    TABLEROWPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes a default browser Print dialog, allowing an end-user to print the content of the html editor.
     * Value: "print"
     */
    PRINT_COMMAND: string;
    /**
     * Identifies a command that toggles the full-screen mode.
     * Value: "fullscreen"
     */
    FULLSCREEN_COMMAND: string;
    /**
     * Identifies a command that inserts a new table.
     * Value: "inserttable"
     */
    INSERTTABLE_COMMAND: string;
    /**
     * Identifies a command that changes the selected table.
     * Value: "changetable"
     */
    CHANGETABLE_COMMAND: string;
    /**
     * Identifies a command that changes the selected table cell.
     * Value: "changetablecell"
     */
    CHANGETABLECELL_COMMAND: string;
    /**
     * Identifies a command that changes the selected table row.
     * Value: "changetablerow"
     */
    CHANGETABLEROW_COMMAND: string;
    /**
     * Identifies a command that changes the selected table column.
     * Value: "changetablecolumn"
     */
    CHANGETABLECOLUMN_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table.
     * Value: "deletetable"
     */
    DELETETABLE_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table row.
     * Value: "deletetablerow"
     */
    DELETETABLEROW_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table column.
     * Value: "deletetablecolumn"
     */
    DELETETABLECOLUMN_COMMAND: string;
    /**
     * Identifies a command that inserts a new column to the left from the currently focused one.
     * Value: "inserttablecolumntoleft"
     */
    INSERTTABLECOLUMNTOLEFT_COMMAND: string;
    /**
     * Identifies a command that inserts a new column to the right from the currently focused one.
     * Value: "inserttablecolumntoright"
     */
    INSERTTABLECOLUMNTORIGHT_COMMAND: string;
    /**
     * Identifies a command that inserts a new row below the currently focused one.
     * Value: "inserttablerowbelow"
     */
    INSERTTABLEROWBELOW_COMMAND: string;
    /**
     * Identifies a command that inserts a new row above the currently focused one.
     * Value: "inserttablerowabove"
     */
    INSERTTABLEROWABOVE_COMMAND: string;
    /**
     * Identifies a command that splits the current table cell horizontally.
     * Value: "splittablecellhorizontally"
     */
    SPLITTABLECELLHORIZONTALLY_COMMAND: string;
    /**
     * Identifies a command that splits the current table cell vertically.
     * Value: "splittablecellvertically"
     */
    SPLITTABLECELLVERTICALLY_COMMAND: string;
    /**
     * Identifies a command that merges the focused table cell with the one to the right.
     * Value: "mergetablecellright"
     */
    MERGETABLECELLRIGHT_COMMAND: string;
    /**
     * Identifies a command that merges the focused table cell with the one below.
     * Value: "mergetablecelldown"
     */
    MERGETABLECELLDOWN_COMMAND: string;
    /**
     * Identifies a command that invokes a custom dialog.
     * Value: "customdialog"
     */
    CUSTOMDIALOG_COMMAND: string;
    /**
     * Identifies a command that exports the html editor content.
     * Value: "export"
     */
    EXPORT_COMMAND: string;
    /**
     * Identifies a command that inserts a new audio element.
     * Value: "insertaudio"
     */
    INSERTAUDIO_COMMAND: string;
    /**
     * Identifies a command that inserts a new video.
     * Value: "insertvideo"
     */
    INSERTVIDEO_COMMAND: string;
    /**
     * Identifies a command that inserts a new flash element.
     * Value: "insertflash"
     */
    INSERTFLASH_COMMAND: string;
    /**
     * Identifies a command that inserts a new YouTube video.
     * Value: "insertyoutubevideo"
     */
    INSERTYOUTUBEVIDEO_COMMAND: string;
    /**
     * Identifies a command that changes the selected audio element.
     * Value: "changeaudio"
     */
    CHANGEAUDIO_COMMAND: string;
    /**
     * Identifies a command that changes the selected video element.
     * Value: "changevideo"
     */
    CHANGEVIDEO_COMMAND: string;
    /**
     * Identifies a command that changes the selected flash element.
     * Value: "changeflash"
     */
    CHANGEFLASH_COMMAND: string;
    /**
     * Identifies a command that changes the selected YouTube video element.
     * Value: "changeyoutubevideo"
     */
    CHANGEYOUTUBEVIDEO_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Audio dialog.
     * Value: "insertaudiodialog"
     */
    INSERTAUDIO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Video dialog.
     * Value: "insertvideodialog"
     */
    INSERTVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Flash dialog.
     * Value: "insertflashdialog"
     */
    INSERTFLASH_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert YouTube Video dialog.
     * Value: "insertyoutubevideodialog"
     */
    INSERTYOUTUBEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Audio dialog.
     * Value: "changeaudiodialog"
     */
    CHANGEAUDIO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Video dialog.
     * Value: "changevideodialog"
     */
    CHANGEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Flash dialog.
     * Value: "changeflash"
     */
    CHANGEFLASH_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change YouTube Video dialog.
     * Value: "changeyoutubevideodialog"
     */
    CHANGEYOUTUBEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to SourceFormatting.
     * Value: "pastehtmlsourceformatting"
     */
    PASTEHTMLSOURCEFORMATTING_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to PlainText.
     * Value: "pastehtmlplaintext"
     */
    PASTEHTMLPLAINTEXT_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to MergeFormatting.
     * Value: "pastehtmlmergeformatting"
     */
    PASTEHTMLMERGEFORMATTING_COMMAND: string;
    /**
     * Identifies a command that inserts a new placeholder.
     * Value: "insertplaceholder"
     */
    INSERTPLACEHOLDER_COMMAND: string;
    /**
     * Identifies a command that changes the selected placeholder.
     * Value: "changeplaceholder"
     */
    CHANGEPLACEHOLDER_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Placeholder dialog.
     * Value: "insertplaceholderdialog"
     */
    INSERTPLACEHOLDER_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Placeholder dialog.
     * Value: "changeplaceholderdialog"
     */
    CHANGEPLACEHOLDER_DIALOG_COMMAND: string;
    /**
     * Identifies a command that updates the editor content.
     * Value: "updatedocument"
     */
    UPDATEDOCUMENT_COMMAND: string;
    /**
     * Identifies a command that changes properties of the element selected in the tag inspector.
     * Value: "changeelementproperties"
     */
    CHANGEELEMENTPROPERTIES_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Element Properties dialog.
     * Value: "changeelementpropertiesdialog"
     */
    CHANGEELEMENTPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that comments the selected HTML code. If no code is selected, it comments the focused tag.
     * Value: "comment"
     */
    COMMENT_COMMAND: string;
    /**
     * Identifies a command that uncomments the selected HTML code. If no code is selected, the command uncomments the currently focused tag.
     * Value: "uncomment"
     */
    UNCOMMENTHTML_COMMAND: string;
    /**
     * Identifies a command that formats the current HTML document.
     * Value: "formatdocument"
     */
    FORMATDOCUMENT_COMMAND: string;
    /**
     * Identifies a command that applies the indent formatting to the selected content.
     * Value: "indent"
     */
    INDENTLINE_COMMAND: string;
    /**
     * Identifies a command that applies the outdent formatting to the focused content.
     * Value: "outdent"
     */
    OUTDENTLINE_COMMAND: string;
    /**
     * Identifies a command that collapses the selected HTML tag.
     * Value: "collapsetag"
     */
    COLLAPSETAG_COMMAND: string;
    /**
     * Identifies a command that expands the selected HTML tag.
     * Value: "expandtag"
     */
    EXPANDTAG_COMMAND: string;
    /**
     * Identifies a command that shows intellisense for the HTML code editor.
     * Value: "showintellisense"
     */
    SHOWINTELLISENSE_COMMAND: string;
}
interface ASPxClientHtmlEditorStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientHtmlEditor;
    /**
     * Programmatically closes a custom dialog, supplying it with specific parameters.
     * @param status An object representing a custom dialog's closing status.
     * @param data An object representing custom data associated with a custom dialog.
     */
    CustomDialogComplete(status: Object, data: Object): void;
}
interface ASPxClientHtmlEditorMediaPreloadModeStatic {
    /**
     * The browser does not load a media file when the page loads.
     */
    None: string;
    /**
     * The browser loads the entire video when the page loads.
     */
    Auto: string;
    /**
     * The browser loads only metadata when the page loads.
     */
    Metadata: string;
}
interface ASPxClientPivotGridStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPivotGrid;
}
interface ASPxClientPivotCustomizationStatic extends ASPxClientControlStatic {
}
interface ASPxClientRichEditStatic extends ASPxClientControlStatic {
    Cast(obj: Object): ASPxClientRichEdit;
}
interface ASPxSchedulerDateTimeHelperStatic {
    /**
     * Returns the date part of the specified DateTime value.
     * @param date A DateTime object from which to extract the date.
     */
    TruncToDate(date: Date): Date;
    /**
     * Returns the day time part of the specified DateTime value.
     * @param date A DateTime object from which to extract the day time.
     */
    ToDayTime(date: Date): any;
    /**
     * 
     * @param date 
     * @param dayCount 
     */
    AddDays(date: Date, dayCount: number): Date;
    /**
     * Adds the specified timespan to a DateTime object and returns the result.
     * @param date A DateTime object to which to add a timespan.
     * @param timeSpan A TimeSpan object specifying the timespan to add.
     */
    AddTimeSpan(date: Date, timeSpan: any): Date;
    /**
     * Rounds a DateTime value up to the nearest interval.
     * @param date A DateTime object containing a value to round.
     * @param spanInMs A TimeSpan object specifying an interval to which to round.
     */
    CeilDateTime(date: Date, spanInMs: any): Date;
}
interface ASPxClientWeekDaysCheckEditStatic extends ASPxClientControlStatic {
}
interface ASPxClientRecurrenceRangeControlStatic extends ASPxClientControlStatic {
}
interface ASPxClientRecurrenceControlBaseStatic extends ASPxClientControlStatic {
}
interface ASPxClientDailyRecurrenceControlStatic extends ASPxClientRecurrenceControlBaseStatic {
}
interface ASPxClientWeeklyRecurrenceControlStatic extends ASPxClientRecurrenceControlBaseStatic {
}
interface ASPxClientMonthlyRecurrenceControlStatic extends ASPxClientRecurrenceControlBaseStatic {
}
interface ASPxClientYearlyRecurrenceControlStatic extends ASPxClientRecurrenceControlBaseStatic {
}
interface ASPxClientRecurrenceTypeEditStatic extends ASPxClientRadioButtonListStatic {
}
interface ASPxClientTimeIntervalStatic {
    /**
     * Gets the duration of a time interval between two points in time.
     * @param start A DateTime object specifying the starting point of the time interval.
     * @param end A DateTime object specifying the ending point of the time interval.
     */
    CalculateDuration(start: Date, end: Date): number;
}
interface ASPxClientSchedulerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientScheduler;
}
interface ASPxClientSpellCheckerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientSpellChecker;
}
interface ASPxClientSpreadsheetStatic extends ASPxClientControlStatic {
    Cast(obj: Object): ASPxClientSpreadsheet;
}
interface ASPxClientTreeListStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTreeList;
}
interface MVCxClientCalendarStatic extends ASPxClientCalendarStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientCalendar;
}
interface MVCxClientCallbackPanelStatic extends ASPxClientCallbackPanelStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientCallbackPanel;
}
interface MVCxClientCardViewStatic extends ASPxClientCardViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientCardView;
}
interface MVCxClientChartStatic extends ASPxClientWebChartControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientChart;
}
interface MVCxClientComboBoxStatic extends ASPxClientComboBoxStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientComboBox;
}
interface MVCxClientDataViewStatic extends ASPxClientDataViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientDataView;
}
interface MVCxClientDateEditStatic extends ASPxClientDateEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientDateEdit;
}
interface MVCxClientDockManagerStatic extends ASPxClientDockManagerStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientDockManager;
}
interface MVCxClientDockPanelStatic extends ASPxClientDockPanelStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientDockPanel;
}
interface MVCxClientFileManagerStatic extends ASPxClientFileManagerStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientFileManager;
}
interface MVCxClientGridViewStatic extends ASPxClientGridViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientGridView;
}
interface MVCxClientHtmlEditorStatic extends ASPxClientHtmlEditorStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientHtmlEditor;
}
interface MVCxClientImageGalleryStatic extends ASPxClientImageGalleryStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientImageGallery;
}
interface MVCxClientListBoxStatic extends ASPxClientListBoxStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientListBox;
}
interface MVCxClientNavBarStatic extends ASPxClientNavBarStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientNavBar;
}
interface MVCxClientPivotGridStatic extends ASPxClientPivotGridStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientPivotGrid;
}
interface MVCxClientPopupControlStatic extends ASPxClientPopupControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientPopupControl;
}
interface MVCxClientDocumentViewerStatic extends ASPxClientDocumentViewerStatic {
}
interface MVCxClientReportViewerStatic extends ASPxClientReportViewerStatic {
}
interface MVCxClientReportDesignerStatic extends ASPxClientReportDesignerStatic {
}
interface MVCxClientRichEditStatic extends ASPxClientRichEditStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientRichEdit;
}
interface MVCxClientRoundPanelStatic extends ASPxClientRoundPanelStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientRoundPanel;
}
interface MVCxClientSchedulerStatic extends ASPxClientSchedulerStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientScheduler;
}
interface MVCxSchedulerToolTipTypeStatic {
    Appointment: number;
    AppointmentDrag: number;
    Selection: number;
}
interface MVCxClientSpreadsheetStatic extends ASPxClientSpreadsheetStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientSpreadsheet;
}
interface MVCxClientPageControlStatic extends ASPxClientPageControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientPageControl;
}
interface MVCxClientTokenBoxStatic extends ASPxClientTokenBoxStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientTokenBox;
}
interface MVCxClientTreeListStatic extends ASPxClientTreeListStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientTreeList;
}
interface MVCxClientTreeViewStatic extends ASPxClientTreeViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientTreeView;
}
interface MVCxClientUploadControlStatic extends ASPxClientUploadControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientUploadControl;
}
interface MVCxClientUtilsStatic {
    /**
     * Loads service resources (such as scripts, CSS files, etc.) required for DevExpress functionality to work properly after a non DevExpress callback has been processed on the server and returned back to the client.
     */
    FinalizeCallback(): void;
    /**
     * Returns values of editors placed in the specified container.
     * @param containerOrId A container of editors, or its ID.
     */
    GetSerializedEditorValuesInContainer(containerOrId: Object): Object;
    /**
     * Returns values of editors placed in the specified container.
     * @param containerOrId A container of editors, or its ID.
     * @param processInvisibleEditors true to process both visible and invisible editors that belong to the specified container; false to process only visible editors.
     */
    GetSerializedEditorValuesInContainer(containerOrId: Object, processInvisibleEditors: boolean): Object;
}
interface MVCxClientGlobalEventsStatic {
    /**
     * Dynamically connects the ControlsInitialized client event with an appropriate event handler function.
     * @param handler A object representing the event handling function's content.
     */
    AddControlsInitializedEventHandler(handler: ASPxClientControlsInitializedEventHandler<any>): void;
    /**
     * Dynamically connects the BeginCallback client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    AddBeginCallbackEventHandler(handler: MVCxClientBeginCallbackEventHandler<any>): void;
    /**
     * Dynamically connects the EndCallback client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    AddEndCallbackEventHandler(handler: ASPxClientEndCallbackEventHandler<any>): void;
    /**
     * Dynamically connects the CallbackError client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    AddCallbackErrorHandler(handler: ASPxClientCallbackErrorEventHandler<any>): void;
}
interface MVCxClientVerticalGridStatic extends ASPxClientVerticalGridStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): MVCxClientVerticalGrid;
}
interface MVCxClientWebDocumentViewerStatic extends ASPxClientWebDocumentViewerStatic {
}
interface ASPxClientControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientControlBase;
}
interface ASPxClientControlStatic extends ASPxClientControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientControl;
    /**
     * Modifies the controls size on the page.
     */
    AdjustControls(): void;
    /**
     * Modifies the controls size within the specified container.
     * @param container An HTML element that is the container of the controls.
     */
    AdjustControls(container: Object): void;
    /**
     * Returns a collection of client web control objects.
     */
    GetControlCollection(): ASPxClientControlCollection;
}
interface ASPxClientCallbackStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCallback;
}
interface ASPxClientCallbackPanelStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCallbackPanel;
}
interface ASPxClientCloudControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientCloudControl;
}
interface ASPxClientDataViewStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDataView;
}
interface ASPxClientDockManagerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDockManager;
}
interface ASPxClientPopupControlBaseStatic extends ASPxClientControlStatic {
}
interface ASPxClientDockPanelStatic extends ASPxClientPopupControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDockPanel;
}
interface ASPxClientDockZoneStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDockZone;
}
interface ASPxClientFileManagerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientFileManager;
}
interface ASPxClientFileManagerCommandConstsStatic {
    /**
     * The name of a command that is executed when an end-user renames an item.
     */
    Rename: string;
    /**
     * The name of a command that is executed when an end-user moves an item.
     */
    Move: string;
    /**
     * The name of a command that is executed when an end-user deletes an item.
     */
    Delete: string;
    /**
     * The name of a command that is executed when an end-user creates a folder.
     */
    Create: string;
    /**
     * The name of a command that is executed when an end-user uploads a file.
     */
    Upload: string;
    /**
     * The name of a command that is executed when an end-user downloads an item.
     */
    Download: string;
    /**
     * The name of a command that is executed when an end-user copies an item.
     */
    Copy: string;
    /**
     * The name of a command that is executed when an end-user opens an item.
     */
    Open: string;
}
interface ASPxClientFileManagerErrorConstsStatic {
    /**
     * The specified file is not found.    Return Value: 0
     */
    FileNotFound: number;
    /**
     * The specified folder is not found.    Return Value: 1
     */
    FolderNotFound: number;
    /**
     * Access is denied.    Return Value: 2
     */
    AccessDenied: number;
    /**
     * Unspecified IO error occurs.    Return Value: 3
     */
    UnspecifiedIO: number;
    /**
     * Unspecified error occurs.    Return Value: 4
     */
    Unspecified: number;
    /**
     * The file/folder name is empty.    Return Value: 5
     */
    EmptyName: number;
    /**
     * The operation was canceled.    Return Value: 6
     */
    CanceledOperation: number;
    /**
     * The specified name contains invalid characters.    Return Value: 7
     */
    InvalidSymbols: number;
    /**
     * The specified file extension is not allowed.    Return Value: 8
     */
    WrongExtension: number;
    /**
     * The file/folder is being used by another process.    Return Value: 9
     */
    UsedByAnotherProcess: number;
    /**
     * The specified file/folder already exists.    Return Value: 10
     */
    AlreadyExists: number;
}
interface ASPxClientFormLayoutStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientFormLayout;
}
interface ASPxClientHiddenFieldStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientHiddenField;
}
interface ASPxClientImageGalleryStatic extends ASPxClientDataViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientImageGallery;
}
interface ASPxClientImageSliderStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientImageSlider;
}
interface ASPxClientImageZoomNavigatorStatic extends ASPxClientImageSliderStatic {
}
interface ASPxClientImageZoomStatic extends ASPxClientControlStatic {
}
interface ASPxClientLoadingPanelStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientLoadingPanel;
}
interface ASPxClientMenuBaseStatic extends ASPxClientControlStatic {
    /**
     * Returns a collection of client menu objects.
     */
    GetMenuCollection(): ASPxClientMenuCollection;
}
interface ASPxClientMenuStatic extends ASPxClientMenuBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientMenu;
}
interface ASPxClientTouchUIStatic {
    /**
     * Extends the specified element's functionality with scrolling via touch behavior (one finger) and the ability to display vertical and horizontal scroll bars.
     * @param id A string value specifying the element's ID.
     */
    MakeScrollable(id: string): ScrollExtender;
    /**
     * Extends the specified element's functionality with scrolling via touch behavior (one finger) and the ability to display vertical and horizontal scroll bars.
     * @param element An object that specifies the required DOM element.
     */
    MakeScrollable(element: Object): ScrollExtender;
    /**
     * Extends the specified element's functionality with  scrolling via touch behavior (one finger) and customized scrollbar-related options.
     * @param id A string value specifying the name of a DOM element that should be extended with the touch scrolling functionality.
     * @param options An ASPxClientTouchUIOptions object that provides options affecting the touch scrolling functionality.
     */
    MakeScrollable(id: string, options: ASPxClientTouchUIOptions): ScrollExtender;
    /**
     * Extends the specified element's functionality with scrolling via touch behavior (one finger) and customized scrollbar-related options.
     * @param element An object specifying the DOM element to extend with the touch scrolling functionality.
     * @param options An ASPxClientTouchUIOptions object that provides options affecting the touch scrolling functionality.
     */
    MakeScrollable(element: Object, options: ASPxClientTouchUIOptions): ScrollExtender;
}
interface ASPxClientNavBarStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientNavBar;
}
interface ASPxClientNewsControlStatic extends ASPxClientDataViewStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientNewsControl;
}
interface ASPxClientObjectContainerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientObjectContainer;
}
interface ASPxClientPanelBaseStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPanelBase;
}
interface ASPxClientPanelStatic extends ASPxClientPanelBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPanel;
}
interface ASPxClientPopupControlStatic extends ASPxClientPopupControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPopupControl;
    /**
     * Returns a collection of client popup control objects.
     */
    GetPopupControlCollection(): ASPxClientPopupControlCollection;
}
interface ASPxClientPopupControlResizeStateStatic {
    /**
     * A window has been resized. Returns 0.
     */
    Resized: number;
    /**
     * A window has been collapsed. Returns 1.
     */
    Collapsed: number;
    /**
     * A window has been expanded. Returns 2.
     */
    Expanded: number;
    /**
     * A window has been maximized. Returns 3.
     */
    Maximized: number;
    /**
     * A window has been restored after maximizing. Returns 4.
     */
    RestoredAfterMaximized: number;
}
interface ASPxClientPopupControlCloseReasonStatic {
    /**
     * The window has been closed by an API.
     */
    API: string;
    /**
     * An end-user clicks the close header button.
     */
    CloseButton: string;
    /**
     * An end-user clicks outside the window's region
     */
    OuterMouseClick: string;
    /**
     * An end-user moves the mouse pointer out of the window region.
     */
    MouseOut: string;
    /**
     * An end-user presses the ESC key.
     */
    Escape: string;
}
interface ASPxClientPopupMenuStatic extends ASPxClientMenuBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPopupMenu;
}
interface ASPxClientRatingControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientRatingControl;
}
interface ASPxClientRibbonStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientRibbon;
}
interface ASPxClientRibbonStateStatic {
    /**
     * A ribbon is in the normal state. Returns 0
     */
    Normal: number;
    /**
     * A ribbon is minimized. Returns 1
     */
    Minimized: number;
    /**
     * A ribbon is temporarily shown. Returns 2
     */
    TemporaryShown: number;
}
interface ASPxClientRoundPanelStatic extends ASPxClientPanelBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientRoundPanel;
}
interface ASPxClientSplitterStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientSplitter;
}
interface ASPxClientTabControlBaseStatic extends ASPxClientControlStatic {
}
interface ASPxClientTabControlStatic extends ASPxClientTabControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTabControl;
}
interface ASPxClientPageControlStatic extends ASPxClientTabControlBaseStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientPageControl;
}
interface ASPxClientTimerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTimer;
}
interface ASPxClientTitleIndexStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTitleIndex;
}
interface ASPxClientTreeViewStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientTreeView;
}
interface ASPxClientUploadControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientUploadControl;
}
interface ASPxClientUtilsStatic {
    /**
     * Gets the user-agent string, which identifies the client browser and provides certain system details of the client computer.
     * Value: A string value representing the browser's user-agent string.
     */
    agent: string;
    /**
     * Gets a value that specifies whether the client browser is Opera.
     * Value: true if the client browser is Opera; otherwise, false.
     */
    opera: boolean;
    /**
     * Gets a value that specifies whether the client browser is Opera version 9.
     * Value: true if the client browser is Opera version 9; otherwise, false.
     */
    opera9: boolean;
    /**
     * Gets a value that specifies whether the client browser is Safari.
     * Value: true if the client browser is Safari; otherwise, false.
     */
    safari: boolean;
    /**
     * Gets a value that specifies whether the client browser is Safari version 3.
     * Value: true if the client browser is Safari version 3; otherwise, false.
     */
    safari3: boolean;
    /**
     * Gets a value that specifies whether the client browser is Safari, running under a MacOS operating system.
     * Value: true if the client browser is Safari, running under a MacOS operating system; otherwise, false.
     */
    safariMacOS: boolean;
    /**
     * Gets a value that specifies whether the client browser is Google Chrome.
     * Value: true if the client browser is Google Chrome; otherwise, false.
     */
    chrome: boolean;
    /**
     * Gets a value that specifies whether the client browser is Internet Explorer.
     * Value: true if the client browser is Intenet Explorer; otherwise, false.
     */
    ie: boolean;
    /**
     * Gets a value that specifies whether the client browser is Internet Explorer version 7.
     * Value: true if the client browser is Intenet Explorer version 7; otherwise, false.
     */
    ie7: boolean;
    /**
     * Gets a value that specifies whether the client browser is Firefox.
     * Value: true if the client browser is Firefox; otherwise, false.
     */
    firefox: boolean;
    /**
     * Gets a value that specifies whether the client browser is Firefox version 3.
     * Value: true if the client browser is Firefox version 3; otherwise, false.
     */
    firefox3: boolean;
    /**
     * Gets a value that specifies whether the client browser is Mozilla.
     * Value: true if the client browser is Mozilla; otherwise, false.
     */
    mozilla: boolean;
    /**
     * Gets a value that specifies whether the client browser is Netscape.
     * Value: true if the client browser is Netscape; otherwise, false.
     */
    netscape: boolean;
    /**
     * Gets a value that specifies a client browser's full version.
     * Value: A double precision floating-point value that specifies a client browser's version.
     */
    browserVersion: number;
    /**
     * Gets a value that specifies a client browser's major version.
     * Value: An integer value that specifies a client browser's major version.
     */
    browserMajorVersion: number;
    /**
     * Gets a value that specifies whether the application is run under a MacOS platform.
     * Value: true if the application is run under the MacOS platform; otherwise, false.
     */
    macOSPlatform: boolean;
    /**
     * Gets a value that specifies whether the application is run under the Windows platform.
     * Value: true if the application is run under the Windows platform; otherwise, false.
     */
    windowsPlatform: boolean;
    /**
     * Gets a value that specifies whether a client browser is based on WebKit.
     * Value: true if the client browser is based on WebKit; otherwise, false.
     */
    webKitFamily: boolean;
    /**
     * Gets a value that specifies whether a client browser is based on Netscape.
     * Value: true if client browser is based on Netscape; otherwise, false.
     */
    netscapeFamily: boolean;
    /**
     * Gets a value that specifies whether the client browser supports touch.
     * Value: true if the client browser supports touch; otherwise, false.
     */
    touchUI: boolean;
    /**
     * Gets a value that specifies whether the client browser supports the WebKit touch user interface.
     * Value: true if the client browser supports the WebKit touch user interface; otherwise, false.
     */
    webKitTouchUI: boolean;
    /**
     * Gets a value that specifies whether the client browser supports the Microsoft touch user interface.
     * Value: true if the client browser supports the Microsoft touch user interface; otherwise, false.
     */
    msTouchUI: boolean;
    /**
     * Gets a value that specifies whether the application is run under an iOS platform.
     * Value: true if the application is run under the iOS platform; otherwise, false.
     */
    iOSPlatform: boolean;
    /**
     * Gets a value that specifies whether the application is run under the Android platform.
     * Value: true if the application is run under the Android platform; otherwise, false.
     */
    androidPlatform: boolean;
    /**
     * Inserts the specified item into the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to insert.
     */
    ArrayInsert(array: Object[], element: Object): void;
    /**
     * Removes the specified item from the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to remove.
     */
    ArrayRemove(array: Object[], element: Object): void;
    /**
     * Removes an item at the specified index location from the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param index The zero-based index location of the array item to remove.
     */
    ArrayRemoveAt(array: Object[], index: number): void;
    /**
     * Removes all items from the specified array object.
     * @param array An object that specifies the array to manipulate.
     */
    ArrayClear(array: Object[]): void;
    /**
     * Searches for the specified array item and returns the zero-based index of its first occurrence within the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to locate.
     */
    ArrayIndexOf(array: Object[], element: Object): number;
    /**
     * Binds the specified function to a specific element's event, so that the function gets called whenever the event fires on the element.
     * @param element An object specifying the required element.
     * @param eventName A string value that specifies the required event name without the "on" prefix.
     * @param method An object that specifies the event's handling function.
     */
    AttachEventToElement(element: Object, eventName: string, method: Object): void;
    /**
     * Unbinds the specified function from a specific element's event, so that the function stops receiving notifications when the event fires.
     * @param element An object specifying the required element.
     * @param eventName A string value that specifies the required event name.
     * @param method An object that specifies the event's handling function.
     */
    DetachEventFromElement(element: Object, eventName: string, method: Object): void;
    /**
     * Returns the object that fired the event.
     * @param htmlEvent An object that represents the current event.
     */
    GetEventSource(htmlEvent: Object): Object;
    /**
     * Gets the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
     * @param htmlEvent An object specifying the required HTML event.
     */
    GetEventX(htmlEvent: Object): number;
    /**
     * Gets the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
     * @param htmlEvent An object specifying the required HTML event.
     */
    GetEventY(htmlEvent: Object): number;
    /**
     * Gets the keyboard code for the specified event.
     * @param htmlEvent An object specifying the required HTML event.
     */
    GetKeyCode(htmlEvent: Object): number;
    /**
     * Cancels the default action of the specified event.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    PreventEvent(htmlEvent: Object): boolean;
    /**
     * Cancels both the specified event's default action and the event's bubbling upon the hierarchy of event handlers.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    PreventEventAndBubble(htmlEvent: Object): boolean;
    /**
     * Removes mouse capture from the specified event's source object.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    PreventDragStart(htmlEvent: Object): boolean;
    /**
     * Clears any text selection made within the window's client region.
     */
    ClearSelection(): void;
    /**
     * Gets a value that indicates whether the specified object exists on the client side.
     * @param obj The object to test.
     */
    IsExists(obj: Object): boolean;
    /**
     * Gets a value that indicates whether the specified object is a function.
     * @param obj The object to test.
     */
    IsFunction(obj: Object): boolean;
    /**
     * Gets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be obtained.
     */
    GetAbsoluteX(element: Object): number;
    /**
     * Gets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be obtained.
     */
    GetAbsoluteY(element: Object): number;
    /**
     * Sets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be defined.
     * @param x An integer value specifying the required element's x-coordinate, in pixels.
     */
    SetAbsoluteX(element: Object, x: number): void;
    /**
     * Sets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be defined.
     * @param y An integer value specifying the required element's y-coordinate, in pixels.
     */
    SetAbsoluteY(element: Object, y: number): void;
    /**
     * Returns the distance between the top edge of the document and the topmost portion of the content currently visible in the window.
     */
    GetDocumentScrollTop(): number;
    /**
     * Returns the distance between the left edge of the document and the leftmost portion of the content currently visible in the window.
     */
    GetDocumentScrollLeft(): number;
    /**
     * Gets the width of the window's client region.
     */
    GetDocumentClientWidth(): number;
    /**
     * Gets the height of the window's client region.
     */
    GetDocumentClientHeight(): number;
    /**
     * Gets a value indicating whether the object passed via the parentElement parameter is a parent of the object passed via the element parameter.
     * @param parentElement An object specifying the parent HTML element.
     * @param element An object specifying the child HTML element.
     */
    GetIsParent(parentElement: Object, element: Object): boolean;
    /**
     * Returns a reference to the specified HTML element's first parent object which has an ID that matches the specified value.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param id A string specifying the required parent's ID.
     */
    GetParentById(element: Object, id: string): Object;
    /**
     * Returns a reference to the specified HTML element's first parent object whose element name matches the specified value.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param tagName A string value specifying the element name (tag name) of the desired HTML element.
     */
    GetParentByTagName(element: Object, tagName: string): Object;
    /**
     * Returns a reference to the specified HTML element's first parent object whose class name matches the specified value.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param className A string value specifying the class name of the desired HTML element.
     */
    GetParentByClassName(element: Object, className: string): Object;
    /**
     * Returns a reference to the first element that has the specified ID in the parent HTML element specified.
     * @param element An object identifying the parent HTML element to search.
     * @param id A string specifying the ID attribute value of the desired child element.
     */
    GetChildById(element: Object, id: string): Object;
    /**
     * Returns a reference to the particular element that has the specified element name and is contained within the specified parent HTML element.
     * @param element An object specifying the parent HTML element to search.
     * @param tagName A string value specifying the element name (tag name) of the desired HTML element.
     * @param index An integer value specifying the zero-based index of the desired element amongst all the matching elements found.
     */
    GetChildByTagName(element: Object, tagName: string, index: number): Object;
    /**
     * Creates or updates the HTTP cookie for the response.
     * @param name A string value that represents the name of a cookie.
     * @param value A string representing the cookie value.
     */
    SetCookie(name: string, value: string): void;
    /**
     * Creates or updates the HTTP cookie for the response.
     * @param name A string value that represents the name of a cookie.
     * @param value A string representing the cookie value.
     * @param expirationDate A date-time object that represents the expiration date and time for the cookie.
     */
    SetCookie(name: string, value: string, expirationDate: Date): void;
    /**
     * Retrieves a cookie with the specified name.
     * @param name A string value that represents the name of a cookie.
     */
    GetCookie(name: string): string;
    /**
     * Deletes a cookie with the specified name.
     * @param name A string value that represents the name of a cookie.
     */
    DeleteCookie(name: string): void;
    /**
     * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameters.
     * @param keyCode An integer value that specifies the code of the key.
     * @param isCtrlKey true if the CTRL key should be included into the key combination; otherwise, false.
     * @param isShiftKey true if the SHIFT key should be included into the key combination; otherwise, false.
     * @param isAltKey true if the ALT key should be included into the key combination; otherwise, false.
     */
    GetShortcutCode(keyCode: number, isCtrlKey: boolean, isShiftKey: boolean, isAltKey: boolean): number;
    /**
     * Returns a specifically generated code that uniquely identifies the pressed key combination, which is specified by the related HTML event.
     * @param htmlEvent A DHTML event object that relates to a key combination being pressed.
     */
    GetShortcutCodeByEvent(htmlEvent: Object): number;
    /**
     * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameter.
     * @param shortcutString A string value that specifies the key combination.
     */
    StringToShortcutCode(shortcutString: string): number;
    /**
     * Trims all leading and trailing whitespaces from the string.
     * @param str A string value representing the string for trimming.
     */
    Trim(str: string): string;
    /**
     * Trims all leading whitespaces from the string.
     * @param str A string value representing the string for trimming.
     */
    TrimStart(str: string): string;
    /**
     * Trims all trailing whitespaces from the string.
     * @param str A string value representing the string for trimming.
     */
    TrimEnd(str: string): string;
}
interface ASPxClientChartDesignerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientChartDesigner;
}
interface ASPxClientWebChartControlStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientWebChartControl;
}
interface ASPxClientDocumentViewerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientDocumentViewer;
}
interface ASPxClientQueryBuilderStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientQueryBuilder;
}
interface ASPxClientReportDesignerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientReportDesigner;
}
interface ASPxClientReportDocumentMapStatic extends ASPxClientControlStatic {
}
interface ASPxClientReportParametersPanelStatic extends ASPxClientControlStatic {
}
interface ASPxClientReportToolbarStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientReportToolbar;
}
interface ASPxClientReportViewerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientReportViewer;
}
interface ASPxClientWebDocumentViewerStatic extends ASPxClientControlStatic {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    Cast(obj: Object): ASPxClientWebDocumentViewer;
}

declare var MVCxClientDashboardViewer: MVCxClientDashboardViewerStatic;
declare var DashboardDataAxisNames: DashboardDataAxisNamesStatic;
declare var DashboardSpecialValues: DashboardSpecialValuesStatic;
declare var ASPxClientDashboardDesigner: ASPxClientDashboardDesignerStatic;
declare var ASPxClientDashboardViewer: ASPxClientDashboardViewerStatic;
declare var DashboardExportPageLayout: DashboardExportPageLayoutStatic;
declare var DashboardExportPaperKind: DashboardExportPaperKindStatic;
declare var DashboardExportScaleMode: DashboardExportScaleModeStatic;
declare var DashboardExportFilterState: DashboardExportFilterStateStatic;
declare var DashboardExportImageFormat: DashboardExportImageFormatStatic;
declare var DashboardExportExcelFormat: DashboardExportExcelFormatStatic;
declare var ChartExportSizeMode: ChartExportSizeModeStatic;
declare var MapExportSizeMode: MapExportSizeModeStatic;
declare var RangeFilterExportSizeMode: RangeFilterExportSizeModeStatic;
declare var DashboardSelectionMode: DashboardSelectionModeStatic;
declare var ASPxClientEditBase: ASPxClientEditBaseStatic;
declare var ASPxClientEdit: ASPxClientEditStatic;
declare var ASPxClientBinaryImage: ASPxClientBinaryImageStatic;
declare var ASPxClientButton: ASPxClientButtonStatic;
declare var ASPxClientCalendar: ASPxClientCalendarStatic;
declare var ASPxClientCaptcha: ASPxClientCaptchaStatic;
declare var ASPxClientCheckBox: ASPxClientCheckBoxStatic;
declare var ASPxClientRadioButton: ASPxClientRadioButtonStatic;
declare var ASPxClientTextEdit: ASPxClientTextEditStatic;
declare var ASPxClientTextBoxBase: ASPxClientTextBoxBaseStatic;
declare var ASPxClientButtonEditBase: ASPxClientButtonEditBaseStatic;
declare var ASPxClientDropDownEditBase: ASPxClientDropDownEditBaseStatic;
declare var ASPxClientColorEdit: ASPxClientColorEditStatic;
declare var ASPxClientComboBox: ASPxClientComboBoxStatic;
declare var ASPxClientDateEdit: ASPxClientDateEditStatic;
declare var ASPxClientDropDownEdit: ASPxClientDropDownEditStatic;
declare var ASPxClientFilterControl: ASPxClientFilterControlStatic;
declare var ASPxClientListEdit: ASPxClientListEditStatic;
declare var ASPxClientListBox: ASPxClientListBoxStatic;
declare var ASPxClientCheckListBase: ASPxClientCheckListBaseStatic;
declare var ASPxClientRadioButtonList: ASPxClientRadioButtonListStatic;
declare var ASPxClientCheckBoxList: ASPxClientCheckBoxListStatic;
declare var ASPxClientProgressBar: ASPxClientProgressBarStatic;
declare var ASPxClientSpinEditBase: ASPxClientSpinEditBaseStatic;
declare var ASPxClientSpinEdit: ASPxClientSpinEditStatic;
declare var ASPxClientTimeEdit: ASPxClientTimeEditStatic;
declare var ASPxClientStaticEdit: ASPxClientStaticEditStatic;
declare var ASPxClientHyperLink: ASPxClientHyperLinkStatic;
declare var ASPxClientImageBase: ASPxClientImageBaseStatic;
declare var ASPxClientImage: ASPxClientImageStatic;
declare var ASPxClientLabel: ASPxClientLabelStatic;
declare var ASPxClientTextBox: ASPxClientTextBoxStatic;
declare var ASPxClientMemo: ASPxClientMemoStatic;
declare var ASPxClientButtonEdit: ASPxClientButtonEditStatic;
declare var ASPxClientTokenBox: ASPxClientTokenBoxStatic;
declare var ASPxClientTrackBar: ASPxClientTrackBarStatic;
declare var ASPxClientValidationSummary: ASPxClientValidationSummaryStatic;
declare var ASPxClientGaugeControl: ASPxClientGaugeControlStatic;
declare var ASPxClientGridBase: ASPxClientGridBaseStatic;
declare var ASPxClientGridViewCallbackCommand: ASPxClientGridViewCallbackCommandStatic;
declare var ASPxClientGridLookup: ASPxClientGridLookupStatic;
declare var ASPxClientCardView: ASPxClientCardViewStatic;
declare var ASPxClientGridView: ASPxClientGridViewStatic;
declare var ASPxClientVerticalGrid: ASPxClientVerticalGridStatic;
declare var ASPxClientVerticalGridCallbackCommand: ASPxClientVerticalGridCallbackCommandStatic;
declare var ASPxClientCommandConsts: ASPxClientCommandConstsStatic;
declare var ASPxClientHtmlEditor: ASPxClientHtmlEditorStatic;
declare var ASPxClientHtmlEditorMediaPreloadMode: ASPxClientHtmlEditorMediaPreloadModeStatic;
declare var ASPxClientPivotGrid: ASPxClientPivotGridStatic;
declare var ASPxClientPivotCustomization: ASPxClientPivotCustomizationStatic;
declare var ASPxClientRichEdit: ASPxClientRichEditStatic;
declare var ASPxSchedulerDateTimeHelper: ASPxSchedulerDateTimeHelperStatic;
declare var ASPxClientWeekDaysCheckEdit: ASPxClientWeekDaysCheckEditStatic;
declare var ASPxClientRecurrenceRangeControl: ASPxClientRecurrenceRangeControlStatic;
declare var ASPxClientRecurrenceControlBase: ASPxClientRecurrenceControlBaseStatic;
declare var ASPxClientDailyRecurrenceControl: ASPxClientDailyRecurrenceControlStatic;
declare var ASPxClientWeeklyRecurrenceControl: ASPxClientWeeklyRecurrenceControlStatic;
declare var ASPxClientMonthlyRecurrenceControl: ASPxClientMonthlyRecurrenceControlStatic;
declare var ASPxClientYearlyRecurrenceControl: ASPxClientYearlyRecurrenceControlStatic;
declare var ASPxClientRecurrenceTypeEdit: ASPxClientRecurrenceTypeEditStatic;
declare var ASPxClientTimeInterval: ASPxClientTimeIntervalStatic;
declare var ASPxClientScheduler: ASPxClientSchedulerStatic;
declare var ASPxClientSpellChecker: ASPxClientSpellCheckerStatic;
declare var ASPxClientSpreadsheet: ASPxClientSpreadsheetStatic;
declare var ASPxClientTreeList: ASPxClientTreeListStatic;
declare var MVCxClientCalendar: MVCxClientCalendarStatic;
declare var MVCxClientCallbackPanel: MVCxClientCallbackPanelStatic;
declare var MVCxClientCardView: MVCxClientCardViewStatic;
declare var MVCxClientChart: MVCxClientChartStatic;
declare var MVCxClientComboBox: MVCxClientComboBoxStatic;
declare var MVCxClientDataView: MVCxClientDataViewStatic;
declare var MVCxClientDateEdit: MVCxClientDateEditStatic;
declare var MVCxClientDockManager: MVCxClientDockManagerStatic;
declare var MVCxClientDockPanel: MVCxClientDockPanelStatic;
declare var MVCxClientFileManager: MVCxClientFileManagerStatic;
declare var MVCxClientGridView: MVCxClientGridViewStatic;
declare var MVCxClientHtmlEditor: MVCxClientHtmlEditorStatic;
declare var MVCxClientImageGallery: MVCxClientImageGalleryStatic;
declare var MVCxClientListBox: MVCxClientListBoxStatic;
declare var MVCxClientNavBar: MVCxClientNavBarStatic;
declare var MVCxClientPivotGrid: MVCxClientPivotGridStatic;
declare var MVCxClientPopupControl: MVCxClientPopupControlStatic;
declare var MVCxClientDocumentViewer: MVCxClientDocumentViewerStatic;
declare var MVCxClientReportViewer: MVCxClientReportViewerStatic;
declare var MVCxClientReportDesigner: MVCxClientReportDesignerStatic;
declare var MVCxClientRichEdit: MVCxClientRichEditStatic;
declare var MVCxClientRoundPanel: MVCxClientRoundPanelStatic;
declare var MVCxClientScheduler: MVCxClientSchedulerStatic;
declare var MVCxSchedulerToolTipType: MVCxSchedulerToolTipTypeStatic;
declare var MVCxClientSpreadsheet: MVCxClientSpreadsheetStatic;
declare var MVCxClientPageControl: MVCxClientPageControlStatic;
declare var MVCxClientTokenBox: MVCxClientTokenBoxStatic;
declare var MVCxClientTreeList: MVCxClientTreeListStatic;
declare var MVCxClientTreeView: MVCxClientTreeViewStatic;
declare var MVCxClientUploadControl: MVCxClientUploadControlStatic;
declare var MVCxClientUtils: MVCxClientUtilsStatic;
declare var MVCxClientGlobalEvents: MVCxClientGlobalEventsStatic;
declare var MVCxClientVerticalGrid: MVCxClientVerticalGridStatic;
declare var MVCxClientWebDocumentViewer: MVCxClientWebDocumentViewerStatic;
declare var ASPxClientControlBase: ASPxClientControlBaseStatic;
declare var ASPxClientControl: ASPxClientControlStatic;
declare var ASPxClientCallback: ASPxClientCallbackStatic;
declare var ASPxClientCallbackPanel: ASPxClientCallbackPanelStatic;
declare var ASPxClientCloudControl: ASPxClientCloudControlStatic;
declare var ASPxClientDataView: ASPxClientDataViewStatic;
declare var ASPxClientDockManager: ASPxClientDockManagerStatic;
declare var ASPxClientPopupControlBase: ASPxClientPopupControlBaseStatic;
declare var ASPxClientDockPanel: ASPxClientDockPanelStatic;
declare var ASPxClientDockZone: ASPxClientDockZoneStatic;
declare var ASPxClientFileManager: ASPxClientFileManagerStatic;
declare var ASPxClientFileManagerCommandConsts: ASPxClientFileManagerCommandConstsStatic;
declare var ASPxClientFileManagerErrorConsts: ASPxClientFileManagerErrorConstsStatic;
declare var ASPxClientFormLayout: ASPxClientFormLayoutStatic;
declare var ASPxClientHiddenField: ASPxClientHiddenFieldStatic;
declare var ASPxClientImageGallery: ASPxClientImageGalleryStatic;
declare var ASPxClientImageSlider: ASPxClientImageSliderStatic;
declare var ASPxClientImageZoomNavigator: ASPxClientImageZoomNavigatorStatic;
declare var ASPxClientImageZoom: ASPxClientImageZoomStatic;
declare var ASPxClientLoadingPanel: ASPxClientLoadingPanelStatic;
declare var ASPxClientMenuBase: ASPxClientMenuBaseStatic;
declare var ASPxClientMenu: ASPxClientMenuStatic;
declare var ASPxClientTouchUI: ASPxClientTouchUIStatic;
declare var ASPxClientNavBar: ASPxClientNavBarStatic;
declare var ASPxClientNewsControl: ASPxClientNewsControlStatic;
declare var ASPxClientObjectContainer: ASPxClientObjectContainerStatic;
declare var ASPxClientPanelBase: ASPxClientPanelBaseStatic;
declare var ASPxClientPanel: ASPxClientPanelStatic;
declare var ASPxClientPopupControl: ASPxClientPopupControlStatic;
declare var ASPxClientPopupControlResizeState: ASPxClientPopupControlResizeStateStatic;
declare var ASPxClientPopupControlCloseReason: ASPxClientPopupControlCloseReasonStatic;
declare var ASPxClientPopupMenu: ASPxClientPopupMenuStatic;
declare var ASPxClientRatingControl: ASPxClientRatingControlStatic;
declare var ASPxClientRibbon: ASPxClientRibbonStatic;
declare var ASPxClientRibbonState: ASPxClientRibbonStateStatic;
declare var ASPxClientRoundPanel: ASPxClientRoundPanelStatic;
declare var ASPxClientSplitter: ASPxClientSplitterStatic;
declare var ASPxClientTabControlBase: ASPxClientTabControlBaseStatic;
declare var ASPxClientTabControl: ASPxClientTabControlStatic;
declare var ASPxClientPageControl: ASPxClientPageControlStatic;
declare var ASPxClientTimer: ASPxClientTimerStatic;
declare var ASPxClientTitleIndex: ASPxClientTitleIndexStatic;
declare var ASPxClientTreeView: ASPxClientTreeViewStatic;
declare var ASPxClientUploadControl: ASPxClientUploadControlStatic;
declare var ASPxClientUtils: ASPxClientUtilsStatic;
declare var ASPxClientChartDesigner: ASPxClientChartDesignerStatic;
declare var ASPxClientWebChartControl: ASPxClientWebChartControlStatic;
declare var ASPxClientDocumentViewer: ASPxClientDocumentViewerStatic;
declare var ASPxClientQueryBuilder: ASPxClientQueryBuilderStatic;
declare var ASPxClientReportDesigner: ASPxClientReportDesignerStatic;
declare var ASPxClientReportDocumentMap: ASPxClientReportDocumentMapStatic;
declare var ASPxClientReportParametersPanel: ASPxClientReportParametersPanelStatic;
declare var ASPxClientReportToolbar: ASPxClientReportToolbarStatic;
declare var ASPxClientReportViewer: ASPxClientReportViewerStatic;
declare var ASPxClientWebDocumentViewer: ASPxClientWebDocumentViewerStatic;

