diff --git a/types/novnc__novnc/index.d.ts b/types/novnc__novnc/index.d.ts
new file mode 100644
index 0000000..1dc842e
--- /dev/null
+++ b/types/novnc__novnc/index.d.ts
@@ -0,0 +1,8 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export { default } from "./lib/rfb";
+export as namespace RFB;
diff --git a/types/novnc__novnc/lib/base64.d.ts b/types/novnc__novnc/lib/base64.d.ts
new file mode 100644
index 0000000..fa80082
--- /dev/null
+++ b/types/novnc__novnc/lib/base64.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare namespace Base64 {
+    function encode(data: number[] | Uint8Array): string;
+    function decode(data: string, offset?: number): number[];
+}
+export default Base64;
diff --git a/types/novnc__novnc/lib/crypto/aes.d.ts b/types/novnc__novnc/lib/crypto/aes.d.ts
new file mode 100644
index 0000000..301737c
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/aes.d.ts
@@ -0,0 +1,30 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export class AESECBCipher {
+    constructor();
+    readonly algorithm: { name: "AES-ECB" };
+    encrypt(
+        algorithm: { name: "AES-ECB" },
+        plaintext: ArrayBuffer | ArrayBufferView,
+    ): Promise<ArrayBuffer | null>;
+    static importKey(
+        key: ArrayBuffer | ArrayBufferView,
+        algorithm: { name: "AES-ECB" },
+        extractable: boolean,
+        keyUsages: KeyUsage[],
+    ): Promise<AESECBCipher>;
+}
+
+export class AESEAXCipher {
+    constructor();
+    readonly algorithm: { name: "AES-EAX" };
+    encrypt(algorithm: AlgorithmIdentifier, message: ArrayBuffer | ArrayBufferView): Promise<ArrayBuffer | null>;
+    decrypt(algorithm: AlgorithmIdentifier, data: ArrayBuffer | ArrayBufferView): Promise<ArrayBuffer | null>;
+    static importKey(key: ArrayBuffer | ArrayBufferView, algorithm?: any, extractable?: boolean, keyUsages?: KeyUsage[]): Promise<AESEAXCipher>;
+}
+
+export {};
diff --git a/types/novnc__novnc/lib/crypto/bigint.d.ts b/types/novnc__novnc/lib/crypto/bigint.d.ts
new file mode 100644
index 0000000..4314b8d
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/bigint.d.ts
@@ -0,0 +1,8 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function modPow(b: bigint, e: bigint, m: bigint): bigint;
+export function bigIntToU8Array(bigint: bigint, padLength?: number): Uint8Array;
+export function u8ArrayToBigInt(arr: Uint8Array): bigint;
diff --git a/types/novnc__novnc/lib/crypto/crypto.d.ts b/types/novnc__novnc/lib/crypto/crypto.d.ts
new file mode 100644
index 0000000..1d485c9
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/crypto.d.ts
@@ -0,0 +1,30 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare class LegacyCrypto {
+    encrypt(
+        algorithm: AlgorithmIdentifier,
+        key: CryptoKey,
+        data: ArrayBuffer | ArrayBufferView,
+    ): Promise<ArrayBuffer>;
+    decrypt(
+        algorithm: AlgorithmIdentifier,
+        key: CryptoKey,
+        data: ArrayBuffer | ArrayBufferView,
+    ): Promise<ArrayBuffer>;
+    importKey(
+        format: "raw",
+        keyData: ArrayBuffer | ArrayBufferView,
+        algorithm: AlgorithmIdentifier,
+        extractable: boolean,
+        keyUsages: KeyUsage[],
+    ): Promise<CryptoKey>;
+    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;
+    exportKey(format: "raw", key: CryptoKey): Promise<ArrayBuffer>;
+    digest(algorithm: AlgorithmIdentifier | string, data: ArrayBuffer | ArrayBufferView): Promise<ArrayBuffer>;
+    deriveBits(algorithm: AlgorithmIdentifier, key: CryptoKey, length: number): Promise<ArrayBuffer>;
+}
+
+declare const legacyCrypto: LegacyCrypto;
+export default legacyCrypto;
diff --git a/types/novnc__novnc/lib/crypto/des.d.ts b/types/novnc__novnc/lib/crypto/des.d.ts
new file mode 100644
index 0000000..4d02df8
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/des.d.ts
@@ -0,0 +1,23 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export class DESECBCipher {
+    constructor();
+    readonly algorithm: { name: "DES-ECB" };
+    encrypt(algorithm: { name: "DES-ECB" }, plaintext: ArrayBuffer | ArrayBufferView): ArrayBuffer | null;
+    static importKey(key: ArrayBuffer | ArrayBufferView, algorithm?: any, extractable?: boolean, keyUsages?: KeyUsage[]): DESECBCipher;
+}
+
+export class DESCBCCipher {
+    constructor();
+    readonly algorithm: { name: "DES-CBC" };
+    encrypt(algorithm: { name: "DES-CBC", iv: ArrayBuffer | ArrayBufferView }, plaintext: ArrayBuffer | ArrayBufferView): ArrayBuffer | null;
+    static importKey(key: ArrayBuffer | ArrayBufferView, algorithm?: any, extractable?: boolean, keyUsages?: KeyUsage[]): DESCBCCipher;
+}
+
+export {};
+
diff --git a/types/novnc__novnc/lib/crypto/dh.d.ts b/types/novnc__novnc/lib/crypto/dh.d.ts
new file mode 100644
index 0000000..d449023
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/dh.d.ts
@@ -0,0 +1,20 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export class DHPublicKey {
+    constructor(key: Uint8Array);
+    readonly algorithm: { name: "DH" };
+    exportKey(): Uint8Array;
+}
+
+export class DHCipher {
+    constructor();
+    readonly algorithm: { name: "DH" };
+    deriveBits(algorithm: { name: "DH", public: ArrayBuffer | ArrayBufferView }, length: number): ArrayBuffer;
+    static generateKey(algorithm: { name: "DH", g: Uint8Array, p: Uint8Array }, extractable: boolean, keyUsages?: KeyUsage[]): { privateKey: DHCipher, publicKey: DHPublicKey };
+}
+
+export {};
diff --git a/types/novnc__novnc/lib/crypto/md5.d.ts b/types/novnc__novnc/lib/crypto/md5.d.ts
new file mode 100644
index 0000000..8d78e13
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/md5.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function MD5(data: Uint8Array | number[]): Promise<Uint8Array>;
diff --git a/types/novnc__novnc/lib/crypto/rsa.d.ts b/types/novnc__novnc/lib/crypto/rsa.d.ts
new file mode 100644
index 0000000..b3a76f2
--- /dev/null
+++ b/types/novnc__novnc/lib/crypto/rsa.d.ts
@@ -0,0 +1,26 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export interface RSAKeyData {
+    n: Uint8Array;
+    e: Uint8Array;
+    d?: Uint8Array; // Present for private keys
+}
+
+export class RSACipher {
+    constructor();
+    readonly algorithm: { name: "RSA-PKCS1-v1_5" };
+
+    encrypt(algorithm: { name: "RSA-PKCS1-v1_5" }, message: ArrayBuffer | ArrayBufferView): Promise<ArrayBuffer | null>;
+    decrypt(algorithm: { name: "RSA-PKCS1-v1_5" }, message: ArrayBuffer | ArrayBufferView): Promise<ArrayBuffer | null>;
+    exportKey(): Promise<RSAKeyData>;
+
+    static generateKey(algorithm: { name: "RSA-PKCS1-v1_5", modulusLength: number, publicExponent: Uint8Array }, extractable: boolean, keyUsages: KeyUsage[]): Promise<{ privateKey: RSACipher }>;
+    static importKey(keyData: RSAKeyData, algorithm: { name: "RSA-PKCS1-v1_5" }, extractable: boolean, keyUsages: KeyUsage[]): Promise<RSACipher>;
+}
+
+export {};
+
diff --git a/types/novnc__novnc/lib/decoders/copyrect.d.ts b/types/novnc__novnc/lib/decoders/copyrect.d.ts
new file mode 100644
index 0000000..1d77f33
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/copyrect.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import Inflator from "../inflator"; // Assuming WebSock uses typeName rQ for its queue
+import WebSock from "../websock";
+
+export default class CopyRectDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/h264.d.ts b/types/novnc__novnc/lib/decoders/h264.d.ts
new file mode 100644
index 0000000..4c551ed
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/h264.d.ts
@@ -0,0 +1,30 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export class H264Parser {
+    constructor(data: Uint8Array);
+    profileIdc: number | null;
+    constraintSet: number | null;
+    levelIdc: number | null;
+    parse(): { frame: Uint8Array, key: boolean } | null;
+}
+
+export interface PendingFrame {
+    timestamp: number;
+    promise: Promise<void>;
+    resolve: (() => void) | null;
+    frame: VideoFrame | null;
+    ready: boolean;
+    keep: boolean;
+}
+export class H264Context {
+    constructor(width: number, height: number);
+    lastUsed: number;
+    decode(payload: Uint8Array): PendingFrame | null;
+}
+export default class H264Decoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/hextile.d.ts b/types/novnc__novnc/lib/decoders/hextile.d.ts
new file mode 100644
index 0000000..576e865
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/hextile.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class HextileDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/jpeg.d.ts b/types/novnc__novnc/lib/decoders/jpeg.d.ts
new file mode 100644
index 0000000..ff2741b
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/jpeg.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class JPEGDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/raw.d.ts b/types/novnc__novnc/lib/decoders/raw.d.ts
new file mode 100644
index 0000000..41d22b8
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/raw.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class RawDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/rre.d.ts b/types/novnc__novnc/lib/decoders/rre.d.ts
new file mode 100644
index 0000000..2763ac5
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/rre.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class RREDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/tight.d.ts b/types/novnc__novnc/lib/decoders/tight.d.ts
new file mode 100644
index 0000000..3ac3556
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/tight.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class TightDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/tightpng.d.ts b/types/novnc__novnc/lib/decoders/tightpng.d.ts
new file mode 100644
index 0000000..6ff49c2
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/tightpng.d.ts
@@ -0,0 +1,12 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import TightDecoder from "./tight";
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class TightPNGDecoder extends TightDecoder {
+    protected _pngRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/zlib.d.ts b/types/novnc__novnc/lib/decoders/zlib.d.ts
new file mode 100644
index 0000000..c3bb273
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/zlib.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class ZlibDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/decoders/zrle.d.ts b/types/novnc__novnc/lib/decoders/zrle.d.ts
new file mode 100644
index 0000000..81d1151
--- /dev/null
+++ b/types/novnc__novnc/lib/decoders/zrle.d.ts
@@ -0,0 +1,11 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import Display from "../display";
+import WebSock from "../websock";
+
+export default class ZRLEDecoder {
+    decodeRect(x: number, y: number, width: number, height: number, sock: WebSock, display: Display, depth: number): boolean;
+}
diff --git a/types/novnc__novnc/lib/deflator.d.ts b/types/novnc__novnc/lib/deflator.d.ts
new file mode 100644
index 0000000..9764e7f
--- /dev/null
+++ b/types/novnc__novnc/lib/deflator.d.ts
@@ -0,0 +1,10 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export default class Deflator {
+    constructor();
+    deflate(inData: Uint8Array): Uint8Array;
+}
diff --git a/types/novnc__novnc/lib/display.d.ts b/types/novnc__novnc/lib/display.d.ts
new file mode 100644
index 0000000..6719f50
--- /dev/null
+++ b/types/novnc__novnc/lib/display.d.ts
@@ -0,0 +1,32 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import { PendingFrame } from "./decoders/h264";
+
+export default class Display {
+    constructor(target: HTMLCanvasElement);
+
+    scale: number;
+    clipViewport: boolean;
+    readonly width: number;
+    readonly height: number;
+
+    viewportChangePos(deltaX: number, deltaY: number): void;
+    viewportChangeSize(width: number, height: number): void;
+    absX(x: number): number;
+    absY(y: number): number;
+    resize(width: number, height: number): void;
+    getImageData(): ImageData;
+    toDataURL(type?: string, encoderOptions?: any): string;
+    toBlob(callback: (blob: Blob | null) => void, type?: string, quality?: any): void;
+    flip(fromQueue?: boolean): void;
+    pending(): boolean;
+    flush(): Promise<void>;
+    fillRect(x: number, y: number, width: number, height: number, color: number[] | Uint8Array, fromQueue?: boolean): void;
+    copyImage(oldX: number, oldY: number, newX: number, newY: number, w: number, h: number, fromQueue?: boolean): void;
+    imageRect(x: number, y: number, width: number, height: number, mime: string, arr: Uint8Array): void;
+    videoFrame(x: number, y: number, width: number, height: number, frame: PendingFrame): void;
+    blitImage(x: number, y: number, width: number, height: number, arr: Uint8Array, offset: number, fromQueue?: boolean): void;
+    drawImage(img: CanvasImageSource, ...args: number[]): void;
+    autoscale(containerWidth: number, containerHeight: number): void;
+}
diff --git a/types/novnc__novnc/lib/encodings.d.ts b/types/novnc__novnc/lib/encodings.d.ts
new file mode 100644
index 0000000..8423479
--- /dev/null
+++ b/types/novnc__novnc/lib/encodings.d.ts
@@ -0,0 +1,34 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export const encodings: {
+    encodingRaw: 0;
+    encodingCopyRect: 1;
+    encodingRRE: 2;
+    encodingHextile: 5;
+    encodingZlib: 6;
+    encodingTight: 7;
+    encodingZRLE: 16;
+    encodingTightPNG: -260;
+    encodingJPEG: 21;
+    encodingH264: 50;
+    pseudoEncodingQualityLevel9: -23;
+    pseudoEncodingQualityLevel0: -32;
+    pseudoEncodingDesktopSize: -223;
+    pseudoEncodingLastRect: -224;
+    pseudoEncodingCursor: -239;
+    pseudoEncodingQEMUExtendedKeyEvent: -258;
+    pseudoEncodingQEMULedEvent: -261,
+    pseudoEncodingDesktopName: -307;
+    pseudoEncodingExtendedDesktopSize: -308;
+    pseudoEncodingXvp: -309;
+    pseudoEncodingFence: -312;
+    pseudoEncodingContinuousUpdates: -313;
+    pseudoEncodingExtendedMouseButtons: -316,
+    pseudoEncodingCompressLevel9: -247;
+    pseudoEncodingCompressLevel0: -256;
+    pseudoEncodingVMwareCursor: 0x574d5664;
+    pseudoEncodingExtendedClipboard: 0xc0a1e5ce;
+};
+export function encodingName(num: number): string;
diff --git a/types/novnc__novnc/lib/inflator.d.ts b/types/novnc__novnc/lib/inflator.d.ts
new file mode 100644
index 0000000..9b7c1e7
--- /dev/null
+++ b/types/novnc__novnc/lib/inflator.d.ts
@@ -0,0 +1,12 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export default class Inflator {
+    constructor();
+    setInput(data: Uint8Array | null): void;
+    inflate(expected: number): Uint8Array;
+    reset(): void;
+}
diff --git a/types/novnc__novnc/lib/input/domkeytable.d.ts b/types/novnc__novnc/lib/input/domkeytable.d.ts
new file mode 100644
index 0000000..3478352
--- /dev/null
+++ b/types/novnc__novnc/lib/input/domkeytable.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare const DOMKeyTable: Record<string, [number, number, number, number]>;
+export default DOMKeyTable;
diff --git a/types/novnc__novnc/lib/input/fixedkeys.d.ts b/types/novnc__novnc/lib/input/fixedkeys.d.ts
new file mode 100644
index 0000000..7800878
--- /dev/null
+++ b/types/novnc__novnc/lib/input/fixedkeys.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare const FixedKeys: Record<string, string>;
+export default FixedKeys;
diff --git a/types/novnc__novnc/lib/input/gesturehandler.d.ts b/types/novnc__novnc/lib/input/gesturehandler.d.ts
new file mode 100644
index 0000000..1fbf9d9
--- /dev/null
+++ b/types/novnc__novnc/lib/input/gesturehandler.d.ts
@@ -0,0 +1,21 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export type GestureType = "onetap" | "twotap" | "threetap" | "drag" | "longpress" | "twodrag" | "pinch";
+
+export interface GestureEventDetail {
+    type: GestureType;
+    clientX: number;
+    clientY: number;
+    magnitudeX?: number;
+    magnitudeY?: number;
+}
+
+export default class GestureHandler {
+    constructor();
+    attach(target: EventTarget): void;
+    detach(): void;
+}
diff --git a/types/novnc__novnc/lib/input/keyboard.d.ts b/types/novnc__novnc/lib/input/keyboard.d.ts
new file mode 100644
index 0000000..149d5e2
--- /dev/null
+++ b/types/novnc__novnc/lib/input/keyboard.d.ts
@@ -0,0 +1,15 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export default class Keyboard {
+    constructor(target: EventTarget);
+
+    onkeyevent: (keysym: number | null, code: string, down: boolean, numlock?: boolean | null, capslock?: boolean | null) => void;
+
+    grab(): void;
+    ungrab(): void;
+}
+
diff --git a/types/novnc__novnc/lib/input/keysym.d.ts b/types/novnc__novnc/lib/input/keysym.d.ts
new file mode 100644
index 0000000..561973a
--- /dev/null
+++ b/types/novnc__novnc/lib/input/keysym.d.ts
@@ -0,0 +1,245 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare namespace KeySym {
+    const XK_VoidSymbol: number;
+    const XK_BackSpace: number;
+    const XK_Tab: number;
+    const XK_Linefeed: number;
+    const XK_Clear: number;
+    const XK_Return: number;
+    const XK_Pause: number;
+    const XK_Scroll_Lock: number;
+    const XK_Sys_Req: number;
+    const XK_Escape: number;
+    const XK_Delete: number;
+    const XK_Multi_key: number;
+    const XK_Codeinput: number;
+    const XK_SingleCandidate: number;
+    const XK_MultipleCandidate: number;
+    const XK_PreviousCandidate: number;
+    const XK_Kanji: number;
+    const XK_Muhenkan: number;
+    const XK_Henkan_Mode: number;
+    const XK_Henkan: number;
+    const XK_Romaji: number;
+    const XK_Hiragana: number;
+    const XK_Katakana: number;
+    const XK_Hiragana_Katakana: number;
+    const XK_Zenkaku: number;
+    const XK_Hankaku: number;
+    const XK_Zenkaku_Hankaku: number;
+    const XK_Touroku: number;
+    const XK_Massyo: number;
+    const XK_Kana_Lock: number;
+    const XK_Kana_Shift: number;
+    const XK_Eisu_Shift: number;
+    const XK_Eisu_toggle: number;
+    const XK_Kanji_Bangou: number;
+    const XK_Zen_Koho: number;
+    const XK_Mae_Koho: number;
+    const XK_Home: number;
+    const XK_Left: number;
+    const XK_Up: number;
+    const XK_Right: number;
+    const XK_Down: number;
+    const XK_Prior: number;
+    const XK_Page_Up: number;
+    const XK_Next: number;
+    const XK_Page_Down: number;
+    const XK_End: number;
+    const XK_Begin: number;
+    const XK_Select: number;
+    const XK_Print: number;
+    const XK_Execute: number;
+    const XK_Insert: number;
+    const XK_Undo: number;
+    const XK_Redo: number;
+    const XK_Menu: number;
+    const XK_Find: number;
+    const XK_Cancel: number;
+    const XK_Help: number;
+    const XK_Break: number;
+    const XK_Mode_switch: number;
+    const XK_script_switch: number;
+    const XK_Num_Lock: number;
+    const XK_KP_Space: number;
+    const XK_KP_Tab: number;
+    const XK_KP_Enter: number;
+    const XK_KP_F1: number;
+    const XK_KP_F2: number;
+    const XK_KP_F3: number;
+    const XK_KP_F4: number;
+    const XK_KP_Home: number;
+    const XK_KP_Left: number;
+    const XK_KP_Up: number;
+    const XK_KP_Right: number;
+    const XK_KP_Down: number;
+    const XK_KP_Prior: number;
+    const XK_KP_Page_Up: number;
+    const XK_KP_Next: number;
+    const XK_KP_Page_Down: number;
+    const XK_KP_End: number;
+    const XK_KP_Begin: number;
+    const XK_KP_Insert: number;
+    const XK_KP_Delete: number;
+    const XK_KP_Equal: number;
+    const XK_KP_Multiply: number;
+    const XK_KP_Add: number;
+    const XK_KP_Separator: number;
+    const XK_KP_Subtract: number;
+    const XK_KP_Decimal: number;
+    const XK_KP_Divide: number;
+    const XK_KP_0: number;
+    const XK_KP_1: number;
+    const XK_KP_2: number;
+    const XK_KP_3: number;
+    const XK_KP_4: number;
+    const XK_KP_5: number;
+    const XK_KP_6: number;
+    const XK_KP_7: number;
+    const XK_KP_8: number;
+    const XK_KP_9: number;
+    const XK_F1: number;
+    const XK_F2: number;
+    const XK_F3: number;
+    const XK_F4: number;
+    const XK_F5: number;
+    const XK_F6: number;
+    const XK_F7: number;
+    const XK_F8: number;
+    const XK_F9: number;
+    const XK_F10: number;
+    const XK_F11: number;
+    const XK_L1: number;
+    const XK_F12: number;
+    const XK_L2: number;
+    const XK_F13: number;
+    const XK_L3: number;
+    const XK_F14: number;
+    const XK_L4: number;
+    const XK_F15: number;
+    const XK_L5: number;
+    const XK_F16: number;
+    const XK_L6: number;
+    const XK_F17: number;
+    const XK_L7: number;
+    const XK_F18: number;
+    const XK_L8: number;
+    const XK_F19: number;
+    const XK_L9: number;
+    const XK_F20: number;
+    const XK_L10: number;
+    const XK_F21: number;
+    const XK_R1: number;
+    const XK_F22: number;
+    const XK_R2: number;
+    const XK_F23: number;
+    const XK_R3: number;
+    const XK_F24: number;
+    const XK_R4: number;
+    const XK_F25: number;
+    const XK_R5: number;
+    const XK_F26: number;
+    const XK_R6: number;
+    const XK_F27: number;
+    const XK_R7: number;
+    const XK_F28: number;
+    const XK_R8: number;
+    const XK_F29: number;
+    const XK_R9: number;
+    const XK_F30: number;
+    const XK_R10: number;
+    const XK_F31: number;
+    const XK_R11: number;
+    const XK_F32: number;
+    const XK_R12: number;
+    const XK_F33: number;
+    const XK_R13: number;
+    const XK_F34: number;
+    const XK_R14: number;
+    const XK_F35: number;
+    const XK_R15: number;
+    const XK_Shift_L: number;
+    const XK_Shift_R: number;
+    const XK_Control_L: number;
+    const XK_Control_R: number;
+    const XK_Caps_Lock: number;
+    const XK_Shift_Lock: number;
+    const XK_Meta_L: number;
+    const XK_Meta_R: number;
+    const XK_Alt_L: number;
+    const XK_Alt_R: number;
+    const XK_Super_L: number;
+    const XK_Super_R: number;
+    const XK_Hyper_L: number;
+    const XK_Hyper_R: number;
+    const XK_ISO_Level3_Shift: number;
+    const XK_ISO_Next_Group: number;
+    const XK_ISO_Prev_Group: number;
+    const XK_ISO_First_Group: number;
+    const XK_ISO_Last_Group: number;
+    const XK_space: number;
+    const XK_exclam: number;
+    const XK_quotedbl: number;
+    const XK_numbersign: number;
+    const XK_dollar: number;
+    const XK_percent: number;
+    const XK_ampersand: number;
+    const XK_apostrophe: number;
+    const XK_quoteright: number;
+    const XK_parenleft: number;
+    const XK_parenright: number;
+    const XK_asterisk: number;
+    const XK_plus: number;
+    const XK_comma: number;
+    const XK_minus: number;
+    const XK_period: number;
+    const XK_slash: number;
+    const XK_0: number;
+    const XK_1: number;
+    const XK_2: number;
+    const XK_3: number;
+    const XK_4: number;
+    const XK_5: number;
+    const XK_6: number;
+    const XK_7: number;
+    const XK_8: number;
+    const XK_9: number;
+    const XK_colon: number;
+    const XK_semicolon: number;
+    const XK_less: number;
+    const XK_equal: number;
+    const XK_greater: number;
+    const XK_question: number;
+    const XK_at: number;
+    const XK_A: number;
+    const XK_B: number;
+    const XK_C: number;
+    const XK_D: number;
+    const XK_E: number;
+    const XK_F: number;
+    const XK_G: number;
+    const XK_H: number;
+    const XK_I: number;
+    const XK_J: number;
+    const XK_K: number;
+    const XK_L: number;
+    const XK_M: number;
+    const XK_N: number;
+    const XK_O: number;
+    const XK_P: number;
+    const XK_Q: number;
+    const XK_R: number;
+    const XK_S: number;
+    const XK_T: number;
+    const XK_U: number;
+    const XK_V: number;
+    const XK_W: number;
+    const XK_X: number;
+    const XK_Y: number;
+    const XK_Z: number;
+    const XK_bracketleft: number;
+    const XK_backslash: number;
+    const XK_bracketright: number;
+    const XK_asciicircum: number;
+    const XK_underscore: number;
+    const XK_grave: number;
+    const XK_quoteleft: number;
+    const XK_a: number;
+    const XK_b: number;
+    const XK_c: number;
+    const XK_d: number;
+    const XK_e: number;
+    const XK_f: number;
+    const XK_g: number;
+    const XK_h: number;
+    const XK_i: number;
+    const XK_j: number;
+    const XK_k: number;
+    const XK_l: number;
+    const XK_m: number;
+    const XK_n: number;
+    const XK_o: number;
+    const XK_p: number;
+    const XK_q: number;
+    const XK_r: number;
+    const XK_s: number;
+    const XK_t: number;
+    const XK_u: number;
+    const XK_v: number;
+    const XK_w: number;
+    const XK_x: number;
+    const XK_y: number;
+    const XK_z: number;
+    const XK_braceleft: number;
+    const XK_bar: number;
+    const XK_braceright: number;
+    const XK_asciitilde: number;
+    const XK_nobreakspace: number;
+    const XK_exclamdown: number;
+    const XK_cent: number;
+    const XK_sterling: number;
+    const XK_currency: number;
+    const XK_yen: number;
+    const XK_brokenbar: number;
+    const XK_section: number;
+    const XK_diaeresis: number;
+    const XK_copyright: number;
+    const XK_ordfeminine: number;
+    const XK_guillemotleft: number;
+    const XK_notsign: number;
+    const XK_hyphen: number;
+    const XK_registered: number;
+    const XK_macron: number;
+    const XK_degree: number;
+    const XK_plusminus: number;
+    const XK_twosuperior: number;
+    const XK_threesuperior: number;
+    const XK_acute: number;
+    const XK_mu: number;
+    const XK_paragraph: number;
+    const XK_periodcentered: number;
+    const XK_cedilla: number;
+    const XK_onesuperior: number;
+    const XK_masculine: number;
+    const XK_guillemotright: number;
+    const XK_onequarter: number;
+    const XK_onehalf: number;
+    const XK_threequarters: number;
+    const XK_questiondown: number;
+    const XK_Agrave: number;
+    const XK_Aacute: number;
+    const XK_Acircumflex: number;
+    const XK_Atilde: number;
+    const XK_Adiaeresis: number;
+    const XK_Aring: number;
+    const XK_AE: number;
+    const XK_Ccedilla: number;
+    const XK_Egrave: number;
+    const XK_Eacute: number;
+    const XK_Ecircumflex: number;
+    const XK_Ediaeresis: number;
+    const XK_Igrave: number;
+    const XK_Iacute: number;
+    const XK_Icircumflex: number;
+    const XK_Idiaeresis: number;
+    const XK_ETH: number;
+    const XK_Eth: number;
+    const XK_Ntilde: number;
+    const XK_Ograve: number;
+    const XK_Oacute: number;
+    const XK_Ocircumflex: number;
+    const XK_Otilde: number;
+    const XK_Odiaeresis: number;
+    const XK_multiply: number;
+    const XK_Oslash: number;
+    const XK_Ooblique: number;
+    const XK_Ugrave: number;
+    const XK_Uacute: number;
+    const XK_Ucircumflex: number;
+    const XK_Udiaeresis: number;
+    const XK_Yacute: number;
+    const XK_THORN: number;
+    const XK_Thorn: number;
+    const XK_ssharp: number;
+    const XK_agrave: number;
+    const XK_aacute: number;
+    const XK_acircumflex: number;
+    const XK_atilde: number;
+    const XK_adiaeresis: number;
+    const XK_aring: number;
+    const XK_ae: number;
+    const XK_ccedilla: number;
+    const XK_egrave: number;
+    const XK_eacute: number;
+    const XK_ecircumflex: number;
+    const XK_ediaeresis: number;
+    const XK_igrave: number;
+    const XK_iacute: number;
+    const XK_icircumflex: number;
+    const XK_idiaeresis: number;
+    const XK_eth: number;
+    const XK_ntilde: number;
+    const XK_ograve: number;
+    const XK_oacute: number;
+    const XK_ocircumflex: number;
+    const XK_otilde: number;
+    const XK_odiaeresis: number;
+    const XK_division: number;
+    const XK_oslash: number;
+    const XK_ooblique: number;
+    const XK_ugrave: number;
+    const XK_uacute: number;
+    const XK_ucircumflex: number;
+    const XK_udiaeresis: number;
+    const XK_yacute: number;
+    const XK_thorn: number;
+    const XK_ydiaeresis: number;
+    const XK_Hangul: number;
+    const XK_Hangul_Hanja: number;
+    const XK_Hangul_Jeonja: number;
+    const XF86XK_ModeLock: number;
+    const XF86XK_MonBrightnessUp: number;
+    const XF86XK_MonBrightnessDown: number;
+    const XF86XK_KbdLightOnOff: number;
+    const XF86XK_KbdBrightnessUp: number;
+    const XF86XK_KbdBrightnessDown: number;
+    const XF86XK_Standby: number;
+    const XF86XK_AudioLowerVolume: number;
+    const XF86XK_AudioMute: number;
+    const XF86XK_AudioRaiseVolume: number;
+    const XF86XK_AudioPlay: number;
+    const XF86XK_AudioStop: number;
+    const XF86XK_AudioPrev: number;
+    const XF86XK_AudioNext: number;
+    const XF86XK_HomePage: number;
+    const XF86XK_Mail: number;
+    const XF86XK_Start: number;
+    const XF86XK_Search: number;
+    const XF86XK_AudioRecord: number;
+    const XF86XK_Calculator: number;
+    const XF86XK_Memo: number;
+    const XF86XK_ToDoList: number;
+    const XF86XK_Calendar: number;
+    const XF86XK_PowerDown: number;
+    const XF86XK_ContrastAdjust: number;
+    const XF86XK_RockerUp: number;
+    const XF86XK_RockerDown: number;
+    const XF86XK_RockerEnter: number;
+    const XF86XK_Back: number;
+    const XF86XK_Forward: number;
+    const XF86XK_Stop: number;
+    const XF86XK_Refresh: number;
+    const XF86XK_PowerOff: number;
+    const XF86XK_WakeUp: number;
+    const XF86XK_Eject: number;
+    const XF86XK_ScreenSaver: number;
+    const XF86XK_WWW: number;
+    const XF86XK_Sleep: number;
+    const XF86XK_Favorites: number;
+    const XF86XK_AudioPause: number;
+    const XF86XK_AudioMedia: number;
+    const XF86XK_MyComputer: number;
+    const XF86XK_VendorHome: number;
+    const XF86XK_LightBulb: number;
+    const XF86XK_Shop: number;
+    const XF86XK_History: number;
+    const XF86XK_OpenURL: number;
+    const XF86XK_AddFavorite: number;
+    const XF86XK_HotLinks: number;
+    const XF86XK_BrightnessAdjust: number;
+    const XF86XK_Finance: number;
+    const XF86XK_Community: number;
+    const XF86XK_AudioRewind: number;
+    const XF86XK_BackForward: number;
+    const XF86XK_Launch0: number;
+    const XF86XK_Launch1: number;
+    const XF86XK_Launch2: number;
+    const XF86XK_Launch3: number;
+    const XF86XK_Launch4: number;
+    const XF86XK_Launch5: number;
+    const XF86XK_Launch6: number;
+    const XF86XK_Launch7: number;
+    const XF86XK_Launch8: number;
+    const XF86XK_Launch9: number;
+    const XF86XK_LaunchA: number;
+    const XF86XK_LaunchB: number;
+    const XF86XK_LaunchC: number;
+    const XF86XK_LaunchD: number;
+    const XF86XK_LaunchE: number;
+    const XF86XK_LaunchF: number;
+    const XF86XK_ApplicationLeft: number;
+    const XF86XK_ApplicationRight: number;
+    const XF86XK_Book: number;
+    const XF86XK_CD: number;
+    const XF86XK_Calculater: number;
+    const XF86XK_Clear: number;
+    const XF86XK_Close: number;
+    const XF86XK_Copy: number;
+    const XF86XK_Cut: number;
+    const XF86XK_Display: number;
+    const XF86XK_DOS: number;
+    const XF86XK_Documents: number;
+    const XF86XK_Excel: number;
+    const XF86XK_Explorer: number;
+    const XF86XK_Game: number;
+    const XF86XK_Go: number;
+    const XF86XK_iTouch: number;
+    const XF86XK_LogOff: number;
+    const XF86XK_Market: number;
+    const XF86XK_Meeting: number;
+    const XF86XK_MenuKB: number;
+    const XF86XK_MenuPB: number;
+    const XF86XK_MySites: number;
+    const XF86XK_New: number;
+    const XF86XK_News: number;
+    const XF86XK_OfficeHome: number;
+    const XF86XK_Open: number;
+    const XF86XK_Option: number;
+    const XF86XK_Paste: number;
+    const XF86XK_Phone: number;
+    const XF86XK_Q: number;
+    const XF86XK_Reply: number;
+    const XF86XK_Reload: number;
+    const XF86XK_RotateWindows: number;
+    const XF86XK_RotationPB: number;
+    const XF86XK_RotationKB: number;
+    const XF86XK_Save: number;
+    const XF86XK_ScrollUp: number;
+    const XF86XK_ScrollDown: number;
+    const XF86XK_ScrollClick: number;
+    const XF86XK_Send: number;
+    const XF86XK_Spell: number;
+    const XF86XK_SplitScreen: number;
+    const XF86XK_Support: number;
+    const XF86XK_TaskPane: number;
+    const XF86XK_Terminal: number;
+    const XF86XK_Tools: number;
+    const XF86XK_Travel: number;
+    const XF86XK_UserPB: number;
+    const XF86XK_User1KB: number;
+    const XF86XK_User2KB: number;
+    const XF86XK_Video: number;
+    const XF86XK_WheelButton: number;
+    const XF86XK_Word: number;
+    const XF86XK_Xfer: number;
+    const XF86XK_ZoomIn: number;
+    const XF86XK_ZoomOut: number;
+    const XF86XK_Away: number;
+    const XF86XK_Messenger: number;
+    const XF86XK_WebCam: number;
+    const XF86XK_MailForward: number;
+    const XF86XK_Pictures: number;
+    const XF86XK_Music: number;
+    const XF86XK_Battery: number;
+    const XF86XK_Bluetooth: number;
+    const XF86XK_WLAN: number;
+    const XF86XK_UWB: number;
+    const XF86XK_AudioForward: number;
+    const XF86XK_AudioRepeat: number;
+    const XF86XK_AudioRandomPlay: number;
+    const XF86XK_Subtitle: number;
+    const XF86XK_AudioCycleTrack: number;
+    const XF86XK_CycleAngle: number;
+    const XF86XK_FrameBack: number;
+    const XF86XK_FrameForward: number;
+    const XF86XK_Time: number;
+    const XF86XK_Select: number;
+    const XF86XK_View: number;
+    const XF86XK_TopMenu: number;
+    const XF86XK_Red: number;
+    const XF86XK_Green: number;
+    const XF86XK_Yellow: number;
+    const XF86XK_Blue: number;
+    const XF86XK_Suspend: number;
+    const XF86XK_Hibernate: number;
+    const XF86XK_TouchpadToggle: number;
+    const XF86XK_TouchpadOn: number;
+    const XF86XK_TouchpadOff: number;
+    const XF86XK_AudioMicMute: number;
+    const XF86XK_Switch_VT_1: number;
+    const XF86XK_Switch_VT_2: number;
+    const XF86XK_Switch_VT_3: number;
+    const XF86XK_Switch_VT_4: number;
+    const XF86XK_Switch_VT_5: number;
+    const XF86XK_Switch_VT_6: number;
+    const XF86XK_Switch_VT_7: number;
+    const XF86XK_Switch_VT_8: number;
+    const XF86XK_Switch_VT_9: number;
+    const XF86XK_Switch_VT_10: number;
+    const XF86XK_Switch_VT_11: number;
+    const XF86XK_Switch_VT_12: number;
+    const XF86XK_Ungrab: number;
+    const XF86XK_ClearGrab: number;
+    const XF86XK_Next_VMode: number;
+    const XF86XK_Prev_VMode: number;
+    const XF86XK_LogWindowTree: number;
+    const XF86XK_LogGrabInfo: number;
+}
+export default KeySym;
diff --git a/types/novnc__novnc/lib/input/keysymdef.d.ts b/types/novnc__novnc/lib/input/keysymdef.d.ts
new file mode 100644
index 0000000..bb7a3c8
--- /dev/null
+++ b/types/novnc__novnc/lib/input/keysymdef.d.ts
@@ -0,0 +1,8 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare function lookup(unicodeCodepoint: number): number;
+export default { lookup };
diff --git a/types/novnc__novnc/lib/input/util.d.ts b/types/novnc__novnc/lib/input/util.d.ts
new file mode 100644
index 0000000..4079368
--- /dev/null
+++ b/types/novnc__novnc/lib/input/util.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function getKeycode(evt: KeyboardEvent): string;
+export function getKey(evt: KeyboardEvent): string;
+export function getKeysym(evt: KeyboardEvent): number | null;
diff --git a/types/novnc__novnc/lib/input/vkeys.d.ts b/types/novnc__novnc/lib/input/vkeys.d.ts
new file mode 100644
index 0000000..22d8854
--- /dev/null
+++ b/types/novnc__novnc/lib/input/vkeys.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare const VKeys: Record<number, string>;
+export default VKeys;
diff --git a/types/novnc__novnc/lib/input/xtscancodes.d.ts b/types/novnc__novnc/lib/input/xtscancodes.d.ts
new file mode 100644
index 0000000..50b6b88
--- /dev/null
+++ b/types/novnc__novnc/lib/input/xtscancodes.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+declare const XTScancodes: Record<string, number>;
+export default XTScancodes;
diff --git a/types/novnc__novnc/lib/ra2.d.ts b/types/novnc__novnc/lib/ra2.d.ts
new file mode 100644
index 0000000..0491127
--- /dev/null
+++ b/types/novnc__novnc/lib/ra2.d.ts
@@ -0,0 +1,30 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import EventTargetMixin from "./util/eventtarget";
+import WebSock from "./websock";
+import { RFBCredentials, ServerVerificationEvent, CredentialsRequiredEvent } from "./rfb";
+
+export default class RSAAESAuthenticationState extends EventTargetMixin {
+    constructor(sock: WebSock, getCredentials: () => RFBCredentials);
+
+    hasStarted: boolean;
+
+    checkInternalEvents(): void;
+    approveServer(): void;
+    disconnect(): void;
+    negotiateRA2neAuthAsync(): Promise<void>;
+
+    // EventTargetMixin methods
+    addEventListener(type: "serververification", listener: (event: ServerVerificationEvent) => void): void;
+    addEventListener(type: "credentialsrequired", listener: (event: CredentialsRequiredEvent) => void): void;
+    addEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
+
+    removeEventListener(type: "serververification", listener: (event: ServerVerificationEvent) => void): void;
+    removeEventListener(type: "credentialsrequired", listener: (event: CredentialsRequiredEvent) => void): void;
+    removeEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
+}
+
diff --git a/types/novnc__novnc/lib/rfb.d.ts b/types/novnc__novnc/lib/rfb.d.ts
new file mode 100644
index 0000000..ff3649a
--- /dev/null
+++ b/types/novnc__novnc/lib/rfb.d.ts
@@ -0,0 +1,101 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+import EventTargetMixin from "./util/eventtarget";
+
+export interface RFBCredentials {
+    username?: string | undefined;
+    password?: string | undefined;
+    target?: string | undefined;
+    ardPublicKey?: ArrayBuffer | ArrayBufferView | null | undefined; // For ARD auth
+    ardCredentials?: ArrayBuffer | ArrayBufferView | null | undefined; // For ARD auth
+}
+
+export interface RFBOptions {
+    shared?: boolean | undefined;
+    credentials?: RFBCredentials | undefined;
+    repeaterID?: string | undefined;
+    wsProtocols?: string[] | undefined;
+}
+
+export interface RFBCapabilities {
+    power: boolean;
+}
+
+export interface ServerVerificationRSAInfo {
+    type: "RSA";
+    publickey: Uint8Array;
+}
+
+export type ServerVerificationEvent = CustomEvent<ServerVerificationRSAInfo>;
+export type BellEvent = CustomEvent<Record<string, never>>; // No specific detail mentioned
+export type CapabilitiesEvent = CustomEvent<{ capabilities: RFBCapabilities }>;
+export type ClipboardEvent = CustomEvent<{ text: string }>;
+export type ClippingViewportEvent = CustomEvent<boolean>;
+export type ConnectEvent = CustomEvent<Record<string, never>>; // No specific detail mentioned
+export type CredentialsRequiredEvent = CustomEvent<{ types: string[] }>;
+export type DesktopNameEvent = CustomEvent<{ name: string }>;
+export type DisconnectEvent = CustomEvent<{ clean: boolean }>;
+export type SecurityFailureEvent = CustomEvent<{ status: number; reason?: string | undefined }>;
+
+export default class RFB extends EventTargetMixin {
+    constructor(target: HTMLElement, urlOrChannel: string | WebSocket | RTCDataChannel, options?: RFBOptions);
+
+    // Properties
+    background: string;
+    readonly capabilities: RFBCapabilities;
+    readonly clippingViewport: boolean;
+    clipViewport: boolean;
+    compressionLevel: number; // 0-9
+    dragViewport: boolean;
+    focusOnClick: boolean;
+    qualityLevel: number; // 0-9
+    resizeSession: boolean;
+    scaleViewport: boolean;
+    showDotCursor: boolean;
+    viewOnly: boolean;
+
+    // Methods
+    disconnect(): void;
+    approveServer(): void;
+    sendCredentials(credentials: RFBCredentials): void;
+    sendCtrlAltDel(): void;
+    machineShutdown(): void;
+    machineReboot(): void;
+    machineReset(): void;
+    sendKey(keysym: number, code: string | null, down?: boolean): void;
+    focus(options?: FocusOptions): void;
+    blur(): void;
+    clipboardPasteFrom(text: string): void;
+    getImageData(): ImageData;
+    toDataURL(type?: string, encoderOptions?: number): string;
+    toBlob(callback: (blob: Blob | null) => void, type?: string, quality?: number): void;
+
+    // Events
+    addEventListener(type: "bell", listener: (event: BellEvent) => void): void;
+    addEventListener(type: "capabilities", listener: (event: CapabilitiesEvent) => void): void;
+    addEventListener(type: "clipboard", listener: (event: ClipboardEvent) => void): void;
+    addEventListener(type: "clippingviewport", listener: (event: ClippingViewportEvent) => void): void;
+    addEventListener(type: "connect", listener: (event: ConnectEvent) => void): void;
+    addEventListener(type: "credentialsrequired", listener: (event: CredentialsRequiredEvent) => void): void;
+    addEventListener(type: "desktopname", listener: (event: DesktopNameEvent) => void): void;
+    addEventListener(type: "disconnect", listener: (event: DisconnectEvent) => void): void;
+    addEventListener(type: "securityfailure", listener: (event: SecurityFailureEvent) => void): void;
+    addEventListener(type: "serververification", listener: (event: ServerVerificationEvent) => void): void;
+    addEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
+
+    removeEventListener(type: "bell", listener: (event: BellEvent) => void): void;
+    removeEventListener(type: "capabilities", listener: (event: CapabilitiesEvent) => void): void;
+    removeEventListener(type: "clipboard", listener: (event: ClipboardEvent) => void): void;
+    removeEventListener(type: "clippingviewport", listener: (event: ClippingViewportEvent) => void): void;
+    removeEventListener(type: "connect", listener: (event: ConnectEvent) => void): void;
+    removeEventListener(type: "credentialsrequired", listener: (event: CredentialsRequiredEvent) => void): void;
+    removeEventListener(type: "desktopname", listener: (event: DesktopNameEvent) => void): void;
+    removeEventListener(type: "disconnect", listener: (event: DisconnectEvent) => void): void;
+    removeEventListener(type: "securityfailure", listener: (event: SecurityFailureEvent) => void): void;
+    removeEventListener(type: "serververification", listener: (event: ServerVerificationEvent) => void): void;
+    removeEventListener(type: string, listener: EventListenerOrEventListenerObject): void;
+}
diff --git a/types/novnc__novnc/lib/util/browser.d.ts b/types/novnc__novnc/lib/util/browser.d.ts
new file mode 100644
index 0000000..f8e0602
--- /dev/null
+++ b/types/novnc__novnc/lib/util/browser.d.ts
@@ -0,0 +1,22 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export const isTouchDevice: boolean;
+export const dragThreshold: number;
+export const supportsCursorURIs: boolean;
+export const hasScrollbarGutter: boolean;
+export const supportsWebCodecsH264Decode: boolean;
+
+export function isMac(): boolean;
+export function isWindows(): boolean;
+export function isIOS(): boolean;
+export function isAndroid(): boolean;
+export function isChromeOS(): boolean;
+export function isSafari(): boolean;
+export function isFirefox(): boolean;
+export function isChrome(): boolean;
+export function isChromium(): boolean;
+export function isOpera(): boolean;
+export function isEdge(): boolean;
+export function isGecko(): boolean;
+export function isWebKit(): boolean;
+export function isBlink(): boolean;
diff --git a/types/novnc__novnc/lib/util/cursor.d.ts b/types/novnc__novnc/lib/util/cursor.d.ts
new file mode 100644
index 0000000..303154d
--- /dev/null
+++ b/types/novnc__novnc/lib/util/cursor.d.ts
@@ -0,0 +1,13 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export default class Cursor {
+    constructor();
+    attach(target: HTMLElement): void;
+    detach(): void;
+    change(rgba: Uint8Array, hotx: number, hoty: number, w: number, h: number): void;
+    clear(): void;
+    move(clientX: number, clientY: number): void;
+}
diff --git a/types/novnc__novnc/lib/util/element.d.ts b/types/novnc__novnc/lib/util/element.d.ts
new file mode 100644
index 0000000..989ccda
--- /dev/null
+++ b/types/novnc__novnc/lib/util/element.d.ts
@@ -0,0 +1,10 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export interface ElementPosition {
+    x: number;
+    y: number;
+}
+export function clientToElement(x: number, y: number, elem: HTMLElement): ElementPosition;
diff --git a/types/novnc__novnc/lib/util/events.d.ts b/types/novnc__novnc/lib/util/events.d.ts
new file mode 100644
index 0000000..0184c5d
--- /dev/null
+++ b/types/novnc__novnc/lib/util/events.d.ts
@@ -0,0 +1,8 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function getPointerEvent(e: MouseEvent | TouchEvent): MouseEvent | Touch;
+export function stopEvent(e: Event): void;
+export function setCapture(target: Element): void;
+export function releaseCapture(): void;
diff --git a/types/novnc__novnc/lib/util/eventtarget.d.ts b/types/novnc__novnc/lib/util/eventtarget.d.ts
new file mode 100644
index 0000000..69c124a
--- /dev/null
+++ b/types/novnc__novnc/lib/util/eventtarget.d.ts
@@ -0,0 +1,9 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export default class EventTargetMixin implements EventTarget {
+    constructor();
+    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;
+    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
+    dispatchEvent(event: Event): boolean;
+}
diff --git a/types/novnc__novnc/lib/util/int.d.ts b/types/novnc__novnc/lib/util/int.d.ts
new file mode 100644
index 0000000..a488ac1
--- /dev/null
+++ b/types/novnc__novnc/lib/util/int.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function toUnsigned32bit(toConvert: number): number;
+export function toSigned32bit(toConvert: number): number;
diff --git a/types/novnc__novnc/lib/util/logging.d.ts b/types/novnc__novnc/lib/util/logging.d.ts
new file mode 100644
index 0000000..c517f3d
--- /dev/null
+++ b/types/novnc__novnc/lib/util/logging.d.ts
@@ -0,0 +1,12 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export type LogLevel = "debug" | "info" | "warn" | "error" | "none";
+export let Debug: (...args: any[]) => void;
+export let Info: (...args: any[]) => void;
+export let Warn: (...args: any[]) => void;
+export let Error: (...args: any[]) => void;
+export function initLogging(level?: LogLevel): void;
+export function getLogging(): LogLevel;
diff --git a/types/novnc__novnc/lib/util/strings.d.ts b/types/novnc__novnc/lib/util/strings.d.ts
new file mode 100644
index 0000000..6939853
--- /dev/null
+++ b/types/novnc__novnc/lib/util/strings.d.ts
@@ -0,0 +1,7 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+export function decodeUTF8(utf8string: string, allowLatin1?: boolean): string;
+export function encodeUTF8(DOMString: string): string;
diff --git a/types/novnc__novnc/lib/websock.d.ts b/types/novnc__novnc/lib/websock.d.ts
new file mode 100644
index 0000000..46c1d83
--- /dev/null
+++ b/types/novnc__novnc/lib/websock.d.ts
@@ -0,0 +1,36 @@
+// Type definitions for @novnc/novnc 1.6
+// Project: https://github.com/novnc/noVNC
+// Definitions by: My Self <https://github.com/me>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.7
+
+type WebsockEventType = "message" | "open" | "close" | "error";
+
+export default class WebSock {
+    constructor();
+
+    readonly readyState: "unused" | "connecting" | "open" | "closing" | "closed" | "unknown";
+    readonly sQlen: number;
+
+    open(uri: string, protocols?: string | string[]): void;
+    attach(rawChannel: WebSocket | RTCDataChannel): void;
+    close(): void;
+
+    on(evt: WebsockEventType, handler: (e: Event | CloseEvent | MessageEvent) => void): void;
+    off(evt: WebsockEventType): void;
+
+    rQpeek8(): number;
+    rQskipBytes(bytes: number): void;
+    rQshift8(): number;
+    rQshift16(): number;
+    rQshift32(): number;
+    rQshiftStr(len: number): string;
+    rQshiftBytes(len: number, copy?: boolean): Uint8Array;
+    rQshiftTo(target: Uint8Array, len: number): void;
+    rQpeekBytes(len: number, copy?: boolean): Uint8Array;
+    rQwait(msg: string, num: number, goback?: number): boolean;
+
+    sQpush8(num: number): void;
+    sQpush16(num: number): void;
+    sQpush32(num: number): void;
+    sQpushString(str: string): void;
+    sQpushBytes(bytes: Uint8Array | number[]): void;
+    flush(): void;
+}
diff --git a/types/novnc__novnc/tsconfig.json b/types/novnc__novnc/tsconfig.json
new file mode 100644
index 0000000..4cb6937
--- /dev/null
+++ b/types/novnc__novnc/tsconfig.json
@@ -0,0 +1,47 @@
+{
+    "compilerOptions": {
+        "module": "commonjs",
+        "lib": [
+            "es6",
+            "dom",
+            "dom.iterable"
+        ],
+        "noImplicitAny": true,
+        "noImplicitThis": true,
+        "strictNullChecks": true,
+        "strictFunctionTypes": true,
+        "baseUrl": "../",
+        "typeRoots": [
+            "../"
+        ],
+        "types": [],
+        "noEmit": true,
+        "forceConsistentCasingInFileNames": true,
+        "paths": {
+            "@novnc/novnc": ["novnc__novnc"],
+            "@novnc/novnc/*": ["novnc__novnc/*"]
+        }
+    },
+    "files": [
+        "index.d.ts",
+        "lib/base64.d.ts",
+        "lib/crypto/aes.d.ts",
+        "lib/crypto/bigint.d.ts",
+        "lib/crypto/crypto.d.ts",
+        "lib/crypto/des.d.ts",
+        "lib/crypto/dh.d.ts",
+        "lib/crypto/md5.d.ts",
+        "lib/crypto/rsa.d.ts",
+        "lib/decoders/copyrect.d.ts",
+        "lib/decoders/h264.d.ts",
+        "lib/decoders/hextile.d.ts",
+        "lib/decoders/jpeg.d.ts",
+        "lib/decoders/raw.d.ts",
+        "lib/decoders/rre.d.ts",
+        "lib/decoders/tight.d.ts",
+        "lib/decoders/tightpng.d.ts",
+        "lib/decoders/zlib.d.ts",
+        "lib/decoders/zrle.d.ts",
+        "lib/deflator.d.ts",
+        "lib/display.d.ts",
+        "lib/encodings.d.ts",
+        "lib/inflator.d.ts",
+        "lib/input/domkeytable.d.ts",
+        "lib/input/fixedkeys.d.ts",
+        "lib/input/gesturehandler.d.ts",
+        "lib/input/keyboard.d.ts",
+        "lib/input/keysym.d.ts",
+        "lib/input/keysymdef.d.ts",
+        "lib/input/util.d.ts",
+        "lib/input/vkeys.d.ts",
+        "lib/input/xtscancodes.d.ts",
+        "lib/ra2.d.ts",
+        "lib/rfb.d.ts",
+        "lib/util/browser.d.ts",
+        "lib/util/cursor.d.ts",
+        "lib/util/element.d.ts",
+        "lib/util/events.d.ts",
+        "lib/util/eventtarget.d.ts",
+        "lib/util/int.d.ts",
+        "lib/util/logging.d.ts",
+        "lib/util/strings.d.ts",
+        "lib/websock.d.ts"
+    ]
+}
