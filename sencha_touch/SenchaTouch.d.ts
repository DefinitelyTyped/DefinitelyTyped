// Type definitions for Touch 2.3.1
// Project: http://www.sencha.com/products/touch/
// Definitions by: Brian Kotek <https://github.com/brian428/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace Ext {
	export interface IAbstractComponent extends Ext.IEvented {
	}
}
declare namespace Ext {
	export interface IAbstractManager extends Ext.IBase {
		/** [Property] (Ext.util.HashMap) */
		all?: Ext.util.IHashMap;
		/** [Method] Creates and returns an instance of whatever this manager manages based on the supplied type and config object
		* @param config Object The config object.
		* @param defaultType String If no type is discovered in the config object, we fall back to this type.
		* @returns Object The instance of whatever this manager is managing.
		*/
		create?( config?:any, defaultType?:string ): any;
		/** [Method] Executes the specified function once for each item in the collection
		* @param fn Function The function to execute.
		* @param scope Object The scope to execute in.
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, undefined if not found.
		*/
		get?( id?:string ): any;
		/** [Method] Gets the number of items in the collection
		* @returns Number The number of items in the collection.
		*/
		getCount?(): number;
		/** [Method] Checks if an item type is registered
		* @param type String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		isRegistered?( type?:string ): boolean;
		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager
		* @param id String The item id.
		* @param fn Function The callback function. Called with a single parameter, the item.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
		*/
		onAvailable?( id?:string, fn?:any, scope?:any ): void;
		/** [Method] Registers an item to be managed
		* @param item Object The item to register.
		*/
		register?( item?:any ): void;
		/** [Method] Registers a new item constructor keyed by a type key
		* @param type String The mnemonic string by which the class may be looked up.
		* @param cls Function The new instance class.
		*/
		registerType?( type?:string, cls?:any ): void;
		/** [Method] Unregisters an item by removing it from this manager
		* @param item Object The item to unregister.
		*/
		unregister?( item?:any ): void;
	}
}
declare namespace Ext {
	export interface IAbstractPlugin extends Ext.IBase {
	}
}
declare namespace Ext {
	export interface IActionSheet extends Ext.ISheet {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of height
		* @returns String
		*/
		getHeight?(): string;
		/** [Method] Returns the value of left
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns the value of right
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number The new value.
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of height
		* @param height String The new value.
		*/
		setHeight?( height?:string ): void;
		/** [Method] Sets the value of left
		* @param left Number The new value.
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right
		* @param right Number The new value.
		*/
		setRight?( right?:number ): void;
	}
}
declare namespace Ext {
	export interface IAjax extends Ext.data.IConnection {
	}
	export class Ajax {
		/** [Property] (Boolean) */
		static autoAbort: boolean;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Aborts any outstanding request
		* @param request Object Defaults to the last request.
		*/
		static abort( request?:any ): void;
		/** [Method] Aborts all outstanding requests  */
		static abortAll(): void;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of async
		* @returns Boolean
		*/
		static getAsync(): boolean;
		/** [Method] Returns the value of autoAbort
		* @returns Boolean
		*/
		static getAutoAbort(): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Returns the value of defaultHeaders
		* @returns Object
		*/
		static getDefaultHeaders(): any;
		/** [Method] Returns the value of defaultPostHeader
		* @returns String
		*/
		static getDefaultPostHeader(): string;
		/** [Method] Returns the value of defaultXhrHeader
		* @returns String
		*/
		static getDefaultXhrHeader(): string;
		/** [Method] Returns the value of disableCaching
		* @returns Boolean
		*/
		static getDisableCaching(): boolean;
		/** [Method] Returns the value of disableCachingParam
		* @returns String
		*/
		static getDisableCachingParam(): string;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		static getExtraParams(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns the value of method
		* @returns String
		*/
		static getMethod(): string;
		/** [Method] Returns the value of password
		* @returns String
		*/
		static getPassword(): string;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		static getTimeout(): number;
		/** [Method] Returns the value of url
		* @returns String
		*/
		static getUrl(): string;
		/** [Method] Returns the value of useDefaultHeader
		* @returns Boolean
		*/
		static getUseDefaultHeader(): boolean;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Boolean
		*/
		static getUseDefaultXhrHeader(): boolean;
		/** [Method] Returns the value of username
		* @returns String
		*/
		static getUsername(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Determines whether this object has a request outstanding
		* @param request Object The request to check.
		* @returns Boolean True if there is an outstanding request.
		*/
		static isLoading( request?:any ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Checks if the response status was successful
		* @param status Number The status code.
		* @param xhr XMLHttpRequest
		* @returns Object An object containing success/status state.
		*/
		static parseStatus( status?:number, xhr?:XMLHttpRequest ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Sends an HTTP request to a remote server
		* @param options Object An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform post-processing in a callback because it is passed to callback functions.)
		* @returns Object/null The request object. This may be used to cancel the request.
		*/
		static request( options?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of async
		* @param async Boolean The new value.
		*/
		static setAsync( async?:boolean ): void;
		/** [Method] Sets the value of autoAbort
		* @param autoAbort Boolean The new value.
		*/
		static setAutoAbort( autoAbort?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of defaultHeaders
		* @param defaultHeaders Object The new value.
		*/
		static setDefaultHeaders( defaultHeaders?:any ): void;
		/** [Method] Sets the value of defaultPostHeader
		* @param defaultPostHeader String The new value.
		*/
		static setDefaultPostHeader( defaultPostHeader?:string ): void;
		/** [Method] Sets the value of defaultXhrHeader
		* @param defaultXhrHeader String The new value.
		*/
		static setDefaultXhrHeader( defaultXhrHeader?:string ): void;
		/** [Method] Sets the value of disableCaching
		* @param disableCaching Boolean The new value.
		*/
		static setDisableCaching( disableCaching?:boolean ): void;
		/** [Method] Sets the value of disableCachingParam
		* @param disableCachingParam String The new value.
		*/
		static setDisableCachingParam( disableCachingParam?:string ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		static setExtraParams( extraParams?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Sets the value of method
		* @param method String The new value.
		*/
		static setMethod( method?:string ): void;
		/** [Method] Sets various options such as the url params for the request
		* @param options Object The initial options.
		* @param scope Object The scope to execute in.
		* @returns Object The params for the request.
		*/
		static setOptions( options?:any, scope?:any ): any;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		static setPassword( password?:string ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		static setTimeout( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		static setUrl( url?:string ): void;
		/** [Method] Sets the value of useDefaultHeader
		* @param useDefaultHeader Boolean The new value.
		*/
		static setUseDefaultHeader( useDefaultHeader?:boolean ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Boolean The new value.
		*/
		static setUseDefaultXhrHeader( useDefaultXhrHeader?:boolean ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		static setUsername( username?:string ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Uploads a form using a hidden iframe
		* @param form String/HTMLElement/Ext.Element The form to upload.
		* @param url String The url to post to.
		* @param params String Any extra parameters to pass.
		* @param options Object The initial options.
		*/
		static upload( form?:any, url?:string, params?:string, options?:any ): void;
	}
}
declare namespace Ext {
	export interface IAnim extends Ext.IBase {
	}
	export class Anim {
		/** [Config Option] (Function) */
		static after: any;
		/** [Config Option] (Boolean) */
		static autoClear: boolean;
		/** [Config Option] (Function) */
		static before: any;
		/** [Config Option] (Number) */
		static delay: number;
		/** [Config Option] (String) */
		static direction: string;
		/** [Config Option] (Boolean) */
		static disableAnimations: boolean;
		/** [Config Option] (Number) */
		static duration: number;
		/** [Config Option] (String) */
		static easing: string;
		/** [Config Option] (Object) */
		static from: any;
		/** [Config Option] (Boolean) */
		static out: boolean;
		/** [Config Option] (Boolean) */
		static reverse: boolean;
		/** [Config Option] (Object) */
		static scope: any;
		/** [Config Option] (Object) */
		static to: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param el Object
		* @param runConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( el?:any, runConfig?:any ): any;
		/** [Method] Used to run an animation on a specific element
		* @param el Ext.Element/HTMLElement The element to animate.
		* @param anim String The animation type, defined in Ext.anims.
		* @param config Object The config object for the animation.
		*/
		static run( el?:any, anim?:string, config?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext {
	export interface IAnimationQueue extends Ext.IBase {
	}
	export class AnimationQueue {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method]
		* @param fn Function
		* @param scope Object
		* @param args Object
		*/
		static start( fn?:any, scope?:any, args?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method]
		* @param fn Function
		* @param scope Object
		* @param args Object
		*/
		static stop( fn?:any, scope?:any, args?:any ): void;
	}
}
declare namespace Ext {
	export interface IAnims {
	}
	export class Anims {
		/** [Property] (Object) */
		static cube: any;
		/** [Property] (Object) */
		static fade: any;
		/** [Property] (Object) */
		static flip: any;
		/** [Property] (Object) */
		static pop: any;
		/** [Property] (Object) */
		static slide: any;
		/** [Property] (Object) */
		static wipe: any;
	}
}
declare namespace Ext.app {
	export interface IAction extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		args?: any[];
		/** [Config Option] (Array) */
		beforeFilters?: any[];
		/** [Config Option] (Ext.app.Controller) */
		controller?: Ext.app.IController;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Starts execution of this Action by calling each of the beforeFilters in turn if any are specified  before calling t  */
		execute?(): void;
		/** [Method] Returns the value of action
		* @returns String
		*/
		getAction?(): string;
		/** [Method] Returns the value of application
		* @returns Ext.app.Application
		*/
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of args
		* @returns Array
		*/
		getArgs?(): any[];
		/** [Method] Returns the value of beforeFilters
		* @returns Array
		*/
		getBeforeFilters?(): any[];
		/** [Method] Returns the value of controller
		* @returns Ext.app.Controller
		*/
		getController?(): Ext.app.IController;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Returns the value of title
		* @returns Object
		*/
		getTitle?(): any;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Resumes the execution of this Action or starts it if it had not been started already */
		resume?(): void;
		/** [Method] Sets the value of action
		* @param action String The new value.
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of application
		* @param application Ext.app.Application The new value.
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of args
		* @param args Array The new value.
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of beforeFilters
		* @param beforeFilters Array The new value.
		*/
		setBeforeFilters?( beforeFilters?:any[] ): void;
		/** [Method] Sets the value of controller
		* @param controller Ext.app.Controller The new value.
		*/
		setController?( controller?:Ext.app.IController ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of title
		* @param title Object The new value.
		*/
		setTitle?( title?:any ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
	}
}
declare namespace Ext.app {
	export interface IApplication extends Ext.app.IController {
		/** [Config Option] (String) */
		appFolder?: string;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (Ext.app.Profile) */
		currentProfile?: Ext.app.IProfile;
		/** [Config Option] (Boolean) */
		glossOnIcon?: boolean;
		/** [Config Option] (Ext.app.History) */
		history?: Ext.app.IHistory;
		/** [Config Option] (String/Object) */
		icon?: any;
		/** [Config Option] (Boolean) */
		isIconPrecomposed?: boolean;
		/** [Config Option] (Function) */
		launch?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		phoneIcon?: string;
		/** [Config Option] (String) */
		phoneStartupScreen?: string;
		/** [Config Option] (Array) */
		profiles?: any[];
		/** [Config Option] (String[]) */
		requires?: string[];
		/** [Config Option] (Ext.app.Router) */
		router?: Ext.app.IRouter;
		/** [Config Option] (Object) */
		startupImage?: any;
		/** [Config Option] (String) */
		statusBarStyle?: string;
		/** [Config Option] (String) */
		tabletIcon?: string;
		/** [Config Option] (String) */
		tabletStartupScreen?: string;
		/** [Config Option] (String/Function) */
		themeVariation?: any;
		/** [Config Option] (String) */
		themeVariationPrefix?: string;
		/** [Config Option] (String) */
		themeVariationTransitionCls?: string;
		/** [Method] Dispatches a given Ext app Action to the relevant Controller instance
		* @param action Ext.app.Action The action to dispatch.
		* @param addToHistory Boolean Sets the browser's url to the action's url.
		*/
		dispatch?( action?:Ext.app.IAction, addToHistory?:boolean ): void;
		/** [Method] Returns the value of appFolder
		* @returns String
		*/
		getAppFolder?(): string;
		/** [Method] Returns the Controller instance for the given controller name
		* @param name String The name of the Controller.
		* @param profileName String Optional profile name. If passed, this is the same as calling getController('profileName.controllerName').
		* @returns Ext.app.Controller controller instance or undefined.
		*/
		getController?( name?:string, profileName?:string ): Ext.app.IController;
		/** [Method] Returns the value of controllers
		* @returns Array
		*/
		getControllers?(): any[];
		/** [Method] Returns the value of currentProfile
		* @returns Ext.app.Profile
		*/
		getCurrentProfile?(): Ext.app.IProfile;
		/** [Method] Returns the value of history
		* @returns Ext.app.History
		*/
		getHistory?(): Ext.app.IHistory;
		/** [Method] Returns the value of launch
		* @returns Function
		*/
		getLaunch?(): any;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of profiles
		* @returns Array
		*/
		getProfiles?(): any[];
		/** [Method] Returns the value of requires
		* @returns String[]
		*/
		getRequires?(): string[];
		/** [Method] Returns the value of router
		* @returns Ext.app.Router
		*/
		getRouter?(): Ext.app.IRouter;
		/** [Method] Returns the value of themeVariation
		* @returns String/Function
		*/
		getThemeVariation?(): any;
		/** [Method] Returns the value of themeVariationPrefix
		* @returns String
		*/
		getThemeVariationPrefix?(): string;
		/** [Method] Returns the value of themeVariationTransitionCls
		* @returns String
		*/
		getThemeVariationTransitionCls?(): string;
		/** [Method] Redirects the browser to the given url
		* @param url String/Ext.data.Model The String url to redirect to.
		*/
		redirectTo?( url?:any ): void;
		/** [Method] Sets the value of appFolder
		* @param appFolder String The new value.
		*/
		setAppFolder?( appFolder?:string ): void;
		/** [Method] Sets the value of controllers
		* @param controllers Array The new value.
		*/
		setControllers?( controllers?:any[] ): void;
		/** [Method] Sets the value of currentProfile
		* @param currentProfile Ext.app.Profile The new value.
		*/
		setCurrentProfile?( currentProfile?:Ext.app.IProfile ): void;
		/** [Method] Sets the value of history
		* @param history Ext.app.History The new value.
		*/
		setHistory?( history?:Ext.app.IHistory ): void;
		/** [Method] Sets the value of launch
		* @param launch Function The new value.
		*/
		setLaunch?( launch?:any ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of profiles
		* @param profiles Array The new value.
		*/
		setProfiles?( profiles?:any[] ): void;
		/** [Method] Sets the value of requires
		* @param requires String[] The new value.
		*/
		setRequires?( requires?:string[] ): void;
		/** [Method] Sets the value of router
		* @param router Ext.app.Router The new value.
		*/
		setRouter?( router?:Ext.app.IRouter ): void;
		/** [Method] Sets the value of themeVariation
		* @param themeVariation String/Function The new value.
		*/
		setThemeVariation?( themeVariation?:any ): void;
		/** [Method] Sets the value of themeVariationPrefix
		* @param themeVariationPrefix String The new value.
		*/
		setThemeVariationPrefix?( themeVariationPrefix?:string ): void;
		/** [Method] Sets the value of themeVariationTransitionCls
		* @param themeVariationTransitionCls String The new value.
		*/
		setThemeVariationTransitionCls?( themeVariationTransitionCls?:string ): void;
	}
}
declare namespace Ext.app {
	export interface IController extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (Function) */
		init?: any;
		/** [Config Option] (Function) */
		launch?: any;
		/** [Config Option] (String[]) */
		models?: string[];
		/** [Config Option] (Object) */
		refs?: any;
		/** [Config Option] (Object) */
		routes?: any;
		/** [Config Option] (String[]) */
		stores?: string[];
		/** [Config Option] (Array) */
		views?: any[];
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of application
		* @returns Ext.app.Application
		*/
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of control
		* @returns Object
		*/
		getControl?(): any;
		/** [Method] Returns a reference to another Controller
		* @param controllerName String
		* @param profile String
		* @returns Object
		*/
		getController?( controllerName?:string, profile?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns a reference to a Model
		* @param modelName String
		* @returns Object
		*/
		getModel?( modelName?:string ): any;
		/** [Method] Returns the value of models
		* @returns String[]
		*/
		getModels?(): string[];
		/** [Method] Returns the value of refs
		* @returns Object
		*/
		getRefs?(): any;
		/** [Method] Returns the value of routes
		* @returns Object
		*/
		getRoutes?(): any;
		/** [Method] Returns the value of stores
		* @returns String[]
		*/
		getStores?(): string[];
		/** [Method] Returns the value of views
		* @returns Array
		*/
		getViews?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Convenient way to redirect to a new url
		* @param place Object
		* @returns Object
		*/
		redirectTo?( place?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of application
		* @param application Ext.app.Application The new value.
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of control
		* @param control Object The new value.
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of models
		* @param models String[] The new value.
		*/
		setModels?( models?:string[] ): void;
		/** [Method] Sets the value of refs
		* @param refs Object The new value.
		*/
		setRefs?( refs?:any ): void;
		/** [Method] Sets the value of routes
		* @param routes Object The new value.
		*/
		setRoutes?( routes?:any ): void;
		/** [Method] Sets the value of stores
		* @param stores String[] The new value.
		*/
		setStores?( stores?:string[] ): void;
		/** [Method] Sets the value of views
		* @param views Array The new value.
		*/
		setViews?( views?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.app {
	export interface IHistory extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Array) */
		actions?: any[];
		/** [Config Option] (String) */
		token?: string;
		/** [Config Option] (Boolean) */
		updateUrl?: boolean;
		/** [Method] Adds an Action to the stack optionally updating the browser s url and firing the change event
		* @param action Ext.app.Action The Action to add to the stack.
		* @param silent Boolean Cancels the firing of the change event if true.
		*/
		add?( action?:Ext.app.IAction, silent?:boolean ): void;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Navigate to the previous active action  */
		back?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of actions
		* @returns Array
		*/
		getActions?(): any[];
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of token
		* @returns String
		*/
		getToken?(): string;
		/** [Method] Returns the value of updateUrl
		* @returns Boolean
		*/
		getUpdateUrl?(): boolean;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of actions
		* @param actions Array The new value.
		*/
		setActions?( actions?:any[] ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of token
		* @param token String The new value.
		*/
		setToken?( token?:string ): void;
		/** [Method] Sets the value of updateUrl
		* @param updateUrl Boolean The new value.
		*/
		setUpdateUrl?( updateUrl?:boolean ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.app {
	export interface IProfile extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (Array) */
		models?: any[];
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Array) */
		stores?: any[];
		/** [Config Option] (Array) */
		views?: any[];
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of application
		* @returns Ext.app.Application
		*/
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of controllers
		* @returns Array
		*/
		getControllers?(): any[];
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of models
		* @returns Array
		*/
		getModels?(): any[];
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of namespace
		* @returns String
		*/
		getNamespace?(): string;
		/** [Method] Returns the value of stores
		* @returns Array
		*/
		getStores?(): any[];
		/** [Method] Returns the value of views
		* @returns Array
		*/
		getViews?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Determines whether or not this Profile is active on the device isActive is executed on
		* @returns Boolean True if this Profile should be activated on the device it is running on, false otherwise
		*/
		isActive?(): boolean;
		/** [Method] The launch function is called by the Application if this Profile s isActive function returned true  */
		launch?(): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of application
		* @param application Ext.app.Application The new value.
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of controllers
		* @param controllers Array The new value.
		*/
		setControllers?( controllers?:any[] ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of models
		* @param models Array The new value.
		*/
		setModels?( models?:any[] ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of namespace
		* @param namespace String The new value.
		*/
		setNamespace?( namespace?:string ): void;
		/** [Method] Sets the value of stores
		* @param stores Array The new value.
		*/
		setStores?( stores?:any[] ): void;
		/** [Method] Sets the value of views
		* @param views Array The new value.
		*/
		setViews?( views?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.app {
	export interface IRoute extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Object) */
		conditions?: any;
		/** [Config Option] (String) */
		controller?: string;
		/** [Config Option] (String) */
		url?: string;
		/** [Property] (Object) */
		paramsInMatchString?: any;
		/** [Method] Returns the value of action
		* @returns String
		*/
		getAction?(): string;
		/** [Method] Returns the value of conditions
		* @returns Object
		*/
		getConditions?(): any;
		/** [Method] Returns the value of controller
		* @returns String
		*/
		getController?(): string;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Attempts to recognize a given url string and return controller action pair for it
		* @param url String The url to recognize.
		* @returns Object/Boolean The matched data, or false if no match.
		*/
		recognize?( url?:string ): any;
		/** [Method] Sets the value of action
		* @param action String The new value.
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of conditions
		* @param conditions Object The new value.
		*/
		setConditions?( conditions?:any ): void;
		/** [Method] Sets the value of controller
		* @param controller String The new value.
		*/
		setController?( controller?:string ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
	}
}
declare namespace Ext.app {
	export interface IRouter extends Ext.IBase {
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Array) */
		routes?: any[];
		/** [Method] Connects a url based route to a controller action pair plus additional params
		* @param url String The url to recognize.
		* @param params Object Additional parameters.
		*/
		connect?( url?:string, params?:any ): void;
		/** [Method] Convenience method which just calls the supplied function with the Router instance
		* @param fn Function The fn to call
		*/
		draw?( fn?:any ): void;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		getDefaults?(): any;
		/** [Method] Returns the value of routes
		* @returns Array
		*/
		getRoutes?(): any[];
		/** [Method] Recognizes a url string connected to the Router return the controller action pair plus any additional config associa
		* @param url String The url to recognize.
		* @returns Object/undefined If the url was recognized, the controller and action to call, else undefined.
		*/
		recognize?( url?:string ): any;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of routes
		* @param routes Array The new value.
		*/
		setRoutes?( routes?:any[] ): void;
	}
}
declare namespace Ext {
	export interface IArray {
	}
	export class Array {
		/** [Method] Filter through an array and remove empty item as defined in Ext isEmpty
		* @param array Array
		* @returns Array results
		*/
		static clean( array?:any[] ): any[];
		/** [Method] Clone a flat array without referencing the previous one
		* @param array Array The array
		* @returns Array The clone array
		*/
		static clone( array?:any[] ): any[];
		/** [Method] Checks whether or not the given array contains the specified item
		* @param array Array The array to check.
		* @param item Object The item to look for.
		* @returns Boolean true if the array contains the item, false otherwise.
		*/
		static contains( array?:any[], item?:any ): boolean;
		/** [Method] Perform a set difference A B by subtracting all items in array B from array A
		* @param arrayA Array
		* @param arrayB Array
		* @returns Array difference
		*/
		static difference( arrayA?:any[], arrayB?:any[] ): any[];
		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item
		* @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once.
		* @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index.
		* @param scope Object The scope (this reference) in which the specified function is executed.
		* @param reverse Boolean Reverse the iteration order (loop from the end to the beginning).
		* @returns Boolean See description for the fn parameter.
		*/
		static each( iterable?:any, fn?:any, scope?:any, reverse?:boolean ): boolean;
		/** [Method] Removes items from an array
		* @param array Array The Array on which to replace.
		* @param index Number The index in the array at which to operate.
		* @param removeCount Number The number of items to remove at index.
		* @returns Array The array passed.
		*/
		static erase( array?:any[], index?:number, removeCount?:number ): any[];
		/** [Method] Executes the specified function for each array element until the function returns a falsy value
		* @param array Array
		* @param fn Function Callback function for each item.
		* @param scope Object Callback function scope.
		* @returns Boolean true if no false value is returned by the callback function.
		*/
		static every( array?:any[], fn?:any, scope?:any ): boolean;
		/** [Method] Creates a new array with all of the elements of this array for which the provided filtering function returns true
		* @param array Array
		* @param fn Function Callback function for each item.
		* @param scope Object Callback function scope.
		* @returns Array results
		*/
		static filter( array?:any[], fn?:any, scope?:any ): any[];
		/** [Method] Recursively flattens into 1 d Array
		* @param array Array The array to flatten
		* @returns Array The 1-d array.
		*/
		static flatten( array?:any[] ): any[];
		/** [Method] Iterates an array and invoke the given callback function for each item
		* @param array Array The array to iterate.
		* @param fn Function The callback function.
		* @param scope Object The execution scope (this) in which the specified function is executed.
		*/
		static forEach( array?:any[], fn?:any, scope?:any ): void;
		/** [Method] Converts a value to an array if it s not already an array returns An empty array if given value is undefined or n
		* @param value Object The value to convert to an array if it's not already is an array.
		* @param newReference Boolean true to clone the given array and return a new reference if necessary.
		* @returns Array array
		*/
		static from( value?:any, newReference?:boolean ): any[];
		/** [Method] Push an item into the array only if the array doesn t contain it yet
		* @param array Array The array.
		* @param item Object The item to include.
		*/
		static include( array?:any[], item?:any ): void;
		/** [Method] Get the index of the provided item in the given array a supplement for the missing arrayPrototype indexOf in Interne
		* @param array Array The array to check.
		* @param item Object The item to look for.
		* @param from Number The index at which to begin the search.
		* @returns Number The index of item in the array (or -1 if it is not found).
		*/
		static indexOf( array?:any[], item?:any, from?:number ): number;
		/** [Method] Inserts items in to an array
		* @param array Array The Array on which to replace.
		* @param index Number The index in the array at which to operate.
		* @param items Array The array of items to insert at index.
		* @returns Array The array passed.
		*/
		static insert( array?:any[], index?:number, items?:any[] ): any[];
		/** [Method] Merge multiple arrays into one with unique items that exist in all of the arrays
		* @param array1 Array
		* @param array2 Array
		* @param etc Array
		* @returns Array intersect
		*/
		static intersect( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Creates a new array with the results of calling a provided function on every element in this array
		* @param array Array
		* @param fn Function Callback function for each item.
		* @param scope Object Callback function scope.
		* @returns Array results
		*/
		static map( array?:any[], fn?:any, scope?:any ): any[];
		/** [Method] Returns the maximum value in the Array
		* @param array Array/NodeList The Array from which to select the maximum value.
		* @param comparisonFn Function a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1
		* @returns Object maxValue The maximum value
		*/
		static max( array?:any, comparisonFn?:any ): any;
		/** [Method] Calculates the mean of all items in the array
		* @param array Array The Array to calculate the mean value of.
		* @returns Number The mean.
		*/
		static mean( array?:any[] ): number;
		/** [Method] Merge multiple arrays into one with unique items
		* @param array1 Array
		* @param array2 Array
		* @param etc Array
		* @returns Array merged
		*/
		static merge( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Returns the minimum value in the Array
		* @param array Array/NodeList The Array from which to select the minimum value.
		* @param comparisonFn Function a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1
		* @returns Object minValue The minimum value.
		*/
		static min( array?:any, comparisonFn?:any ): any;
		/** [Method] Plucks the value of a property from each item in the Array
		* @param array Array/NodeList The Array of items to pluck the value from.
		* @param propertyName String The property name to pluck from each element.
		* @returns Array The value from each item in the Array.
		*/
		static pluck( array?:any, propertyName?:string ): any[];
		/** [Method] Removes the specified item from the array if it exists
		* @param array Array The array.
		* @param item Object The item to remove.
		* @returns Array The passed array itself.
		*/
		static remove( array?:any[], item?:any ): any[];
		/** [Method] Replaces items in an array
		* @param array Array The Array on which to replace.
		* @param index Number The index in the array at which to operate.
		* @param removeCount Number The number of items to remove at index (can be 0).
		* @param insert Array An array of items to insert at index.
		* @returns Array The array passed.
		*/
		static replace( array?:any[], index?:number, removeCount?:number, insert?:any[] ): any[];
		/** [Method] Returns a shallow copy of a part of an array
		* @param array Array The array (or arguments object).
		* @param begin Number The index at which to begin. Negative values are offsets from the end of the array.
		* @param end Number The index at which to end. The copied items do not include end. Negative values are offsets from the end of the array. If end is omitted, all items up to the end of the array are copied.
		* @returns Array The copied piece of the array.
		*/
		static slice( array?:any[], begin?:number, end?:number ): any[];
		/** [Method] Executes the specified function for each array element until the function returns a truthy value
		* @param array Array
		* @param fn Function Callback function for each item.
		* @param scope Object Callback function scope.
		* @returns Boolean true if the callback function returns a truthy value.
		*/
		static some( array?:any[], fn?:any, scope?:any ): boolean;
		/** [Method] Sorts the elements of an Array
		* @param array Array The array to sort.
		* @param sortFn Function The comparison function.
		* @returns Array The sorted array.
		*/
		static sort( array?:any[], sortFn?:any ): any[];
		/** [Method] Replaces items in an array
		* @param array Array The Array on which to replace.
		* @param index Number The index in the array at which to operate.
		* @param removeCount Number The number of items to remove at index (can be 0).
		* @returns Array An array containing the removed items.
		*/
		static splice( array?:any[], index?:number, removeCount?:number ): any[];
		/** [Method] Calculates the sum of all items in the given array
		* @param array Array The Array to calculate the sum value of.
		* @returns Number The sum.
		*/
		static sum( array?:any[] ): number;
		/** [Method] Converts any iterable numeric indices and a length property into a true array
		* @param iterable Object the iterable object to be turned into a true Array.
		* @param start Number a zero-based index that specifies the start of extraction.
		* @param end Number a zero-based index that specifies the end of extraction.
		* @returns Array
		*/
		static toArray( iterable?:any, start?:number, end?:number ): any[];
		/** [Method] Merge multiple arrays into one with unique items
		* @param array1 Array
		* @param array2 Array
		* @param etc Array
		* @returns Array merged
		*/
		static union( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Returns a new array with unique items
		* @param array Array
		* @returns Array results
		*/
		static unique( array?:any[] ): any[];
	}
}
declare namespace Ext {
	export interface IAudio extends Ext.IMedia {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
	}
}
declare namespace Ext {
	export interface IBase extends Ext.IClass {
		/** [Property] (Ext.Class) */
		self?: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		callOverridden?( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		callParent?( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		callSuper?( args?:any ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		getInitialConfig?( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		initConfig?( instanceConfig?:any ): any;
	}
	export class Base {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Get the current class name in string format
		* @returns any className
		*/
		static getName(): any;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.behavior {
	export interface IBehavior extends Ext.IBase {
	}
}
declare namespace Ext.behavior {
	export interface IDraggable extends Ext.behavior.IBehavior {
	}
}
declare namespace Ext.behavior {
	export interface IScrollable extends Ext.behavior.IBehavior {
	}
}
declare namespace Ext.behavior {
	export interface ITranslatable extends Ext.behavior.IBehavior {
	}
}
declare namespace Ext {
	export interface IBrowser extends Ext.env.IBrowser {
	}
	export class Browser {
		/** [Property] (String) */
		static engineName: string;
		/** [Property] (Ext.Version) */
		static engineVersion: Ext.IVersion;
		/** [Property] (Boolean) */
		static isSecure: boolean;
		/** [Property] (Boolean) */
		static isStrict: boolean;
		/** [Property] (String) */
		static name: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (String) */
		static userAgent: string;
		/** [Property] (Ext.Version) */
		static version: Ext.IVersion;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] A hybrid property can be either accessed as a method call for example  if Ext browser is IE
		* @param value String The OS name to check.
		* @returns Boolean
		*/
		static is( value?:string ): boolean;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext {
	export interface IButton extends Ext.IComponent {
		/** [Config Option] (String) */
		autoEvent?: string;
		/** [Config Option] (String) */
		badge?: string;
		/** [Config Option] (String) */
		badgeCls?: string;
		/** [Config Option] (String) */
		badgeText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (String) */
		html?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number/Boolean) */
		pressedDelay?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoEvent
		* @returns String
		*/
		getAutoEvent?(): string;
		/** [Method] Returns the value of badgeCls
		* @returns String
		*/
		getBadgeCls?(): string;
		/** [Method] Returns the value of badgeText
		* @returns String
		*/
		getBadgeText?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of handler
		* @returns Function
		*/
		getHandler?(): any;
		/** [Method] Returns the value of icon
		* @returns String
		*/
		getIcon?(): string;
		/** [Method] Returns the value of iconAlign
		* @returns String
		*/
		getIconAlign?(): string;
		/** [Method] Returns the value of iconCls
		* @returns String
		*/
		getIconCls?(): string;
		/** [Method] Returns the value of labelCls
		* @returns String
		*/
		getLabelCls?(): string;
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay
		* @returns Number/Boolean
		*/
		getPressedDelay?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Returns the value of text
		* @returns String
		*/
		getText?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of autoEvent
		* @param autoEvent String The new value.
		*/
		setAutoEvent?( autoEvent?:string ): void;
		/** [Method] Updates the badge text
		* @param text String
		*/
		setBadge?( text?:string ): void;
		/** [Method] Sets the value of badgeCls
		* @param badgeCls String The new value.
		*/
		setBadgeCls?( badgeCls?:string ): void;
		/** [Method] Sets the value of badgeText
		* @param badgeText String The new value.
		*/
		setBadgeText?( badgeText?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of handler
		* @param handler Function The new value.
		*/
		setHandler?( handler?:any ): void;
		/** [Method] Sets the value of icon
		* @param icon String The new value.
		*/
		setIcon?( icon?:string ): void;
		/** [Method] Sets the value of iconAlign
		* @param iconAlign String The new value.
		*/
		setIconAlign?( iconAlign?:string ): void;
		/** [Method] Updates the icon class
		* @param iconClass String
		*/
		setIconClass?( iconClass?:string ): void;
		/** [Method] Sets the value of iconCls
		* @param iconCls String The new value.
		*/
		setIconCls?( iconCls?:string ): void;
		/** [Method] Sets the value of labelCls
		* @param labelCls String The new value.
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay
		* @param pressedDelay Number/Boolean The new value.
		*/
		setPressedDelay?( pressedDelay?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of text
		* @param text String The new value.
		*/
		setText?( text?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.carousel {
	export interface ICarousel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		indicator?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the index of the currently active card
		* @returns Number The index of the currently active card.
		*/
		getActiveIndex?(): number;
		/** [Method] Returns the value of animation
		* @returns Object
		*/
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bufferSize
		* @returns Number
		*/
		getBufferSize?(): number;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of directionLock
		* @returns Boolean
		*/
		getDirectionLock?(): boolean;
		/** [Method] Returns the value of indicator
		* @returns any
		*/
		getIndicator?(): any;
		/** [Method] Returns the value of itemConfig
		* @returns Object
		*/
		getItemConfig?(): any;
		/** [Method] Returns the value of itemLength
		* @returns Object
		*/
		getItemLength?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal
		* @returns Boolean
		*/
		isHorizontal?(): boolean;
		/** [Method] Returns true when direction is vertical
		* @returns Boolean
		*/
		isVertical?(): boolean;
		/** [Method] Switches to the next card
		* @returns Ext.carousel.Carousel this
		*/
		next?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card
		* @returns Ext.carousel.Carousel this
		*/
		prev?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card
		* @returns Ext.carousel.Carousel this
		*/
		previous?(): Ext.carousel.ICarousel;
		/** [Method] Sets the value of animation
		* @param animation Object The new value.
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bufferSize
		* @param bufferSize Number The new value.
		*/
		setBufferSize?( bufferSize?:number ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock
		* @param directionLock Boolean The new value.
		*/
		setDirectionLock?( directionLock?:boolean ): void;
		/** [Method] Sets the value of indicator
		* @param indicator Boolean The new value.
		*/
		setIndicator?( indicator?:boolean ): void;
		/** [Method] Sets the value of itemConfig
		* @param itemConfig Object The new value.
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemLength
		* @param itemLength Object The new value.
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext {
	export interface ICarousel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		indicator?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the index of the currently active card
		* @returns Number The index of the currently active card.
		*/
		getActiveIndex?(): number;
		/** [Method] Returns the value of animation
		* @returns Object
		*/
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bufferSize
		* @returns Number
		*/
		getBufferSize?(): number;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of directionLock
		* @returns Boolean
		*/
		getDirectionLock?(): boolean;
		/** [Method] Returns the value of indicator
		* @returns any
		*/
		getIndicator?(): any;
		/** [Method] Returns the value of itemConfig
		* @returns Object
		*/
		getItemConfig?(): any;
		/** [Method] Returns the value of itemLength
		* @returns Object
		*/
		getItemLength?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal
		* @returns Boolean
		*/
		isHorizontal?(): boolean;
		/** [Method] Returns true when direction is vertical
		* @returns Boolean
		*/
		isVertical?(): boolean;
		/** [Method] Switches to the next card
		* @returns Ext.carousel.Carousel this
		*/
		next?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card
		* @returns Ext.carousel.Carousel this
		*/
		prev?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card
		* @returns Ext.carousel.Carousel this
		*/
		previous?(): Ext.carousel.ICarousel;
		/** [Method] Sets the value of animation
		* @param animation Object The new value.
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bufferSize
		* @param bufferSize Number The new value.
		*/
		setBufferSize?( bufferSize?:number ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock
		* @param directionLock Boolean The new value.
		*/
		setDirectionLock?( directionLock?:boolean ): void;
		/** [Method] Sets the value of indicator
		* @param indicator Boolean The new value.
		*/
		setIndicator?( indicator?:boolean ): void;
		/** [Method] Sets the value of itemConfig
		* @param itemConfig Object The new value.
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemLength
		* @param itemLength Object The new value.
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.carousel {
	export interface IIndicator extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
	}
}
declare namespace Ext.carousel {
	export interface IInfinite extends Ext.carousel.ICarousel {
		/** [Config Option] (Boolean) */
		indicator?: boolean;
		/** [Method] Returns the value of indicator
		* @returns Object
		*/
		getIndicator?(): any;
		/** [Method] Returns the value of innerItemConfig
		* @returns Object
		*/
		getInnerItemConfig?(): any;
		/** [Method] Returns the value of maxItemIndex
		* @returns Object
		*/
		getMaxItemIndex?(): any;
		/** [Method] Sets the value of indicator
		* @param indicator Object The new value.
		*/
		setIndicator?( indicator?:any ): void;
		/** [Method] Sets the value of innerItemConfig
		* @param innerItemConfig Object The new value.
		*/
		setInnerItemConfig?( innerItemConfig?:any ): void;
		/** [Method] Sets the value of maxItemIndex
		* @param maxItemIndex Object The new value.
		*/
		setMaxItemIndex?( maxItemIndex?:any ): void;
	}
}
declare namespace Ext.carousel {
	export interface IItem extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of translatable
		* @returns Boolean
		*/
		getTranslatable?(): boolean;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of translatable
		* @param translatable Boolean The new value.
		*/
		setTranslatable?( translatable?:boolean ): void;
	}
}
declare namespace Ext.chart {
	export interface IAbstractChart extends Ext.draw.IComponent {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (Ext.chart.axis.Axis/Array/Object) */
		axes?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean/Array) */
		colors?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		innerPadding?: any;
		/** [Config Option] (Object|Number) */
		insetPadding?: any;
		/** [Config Option] (Array) */
		interactions?: any[];
		/** [Config Option] (Ext.chart.Legend/Object) */
		legend?: any;
		/** [Config Option] (Ext.chart.series.Series/Array) */
		series?: any;
		/** [Config Option] (Boolean/Object) */
		shadow?: any;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Property] (String) */
		version?: string;
		/** [Method] Changes the data store bound to this chart and refreshes it
		* @param store Ext.data.Store The store to bind to this chart.
		*/
		bindStore?( store?:Ext.data.IStore ): void;
		/** [Method] Cancel a scheduled layout  */
		cancelLayout?(): void;
		/** [Method] Flattens the given chart surfaces into a single image
		* @param surfaces Array A list of chart's surfaces to flatten.
		* @param format String If set to 'image', the method will return an Image object. Otherwise, the dataURL  of the flattened image will be returned.
		* @returns String|Image An Image DOM element containing the flattened image or its dataURL.
		*/
		flatten?( surfaces?:any[], format?:string ): any;
		/** [Method] Returns the value of axes
		* @returns Ext.chart.axis.Axis/Array/Object
		*/
		getAxes?(): any;
		/** [Method] Returns the value of background
		* @returns Object
		*/
		getBackground?(): any;
		/** [Method] Returns the value of colors
		* @returns Boolean/Array
		*/
		getColors?(): any;
		/** [Method] Returns the value of highlightItem
		* @returns Object
		*/
		getHighlightItem?(): any;
		/** [Method] Returns the value of innerPadding
		* @returns Object
		*/
		getInnerPadding?(): any;
		/** [Method] Returns the value of insetPadding
		* @returns Object|Number
		*/
		getInsetPadding?(): any;
		/** [Method] Returns the value of interactions
		* @returns Array
		*/
		getInteractions?(): any[];
		/** [Method] Given an x y point relative to the chart find and return the first series item that matches that point
		* @param x Number
		* @param y Number
		* @returns Object An object with series and item properties, or false if no item found.
		*/
		getItemForPoint?( x?:number, y?:number ): any;
		/** [Method] Given an x y point relative to the chart find and return all series items that match that point
		* @param x Number
		* @param y Number
		* @returns Array An array of objects with series and item properties.
		*/
		getItemsForPoint?( x?:number, y?:number ): any[];
		/** [Method] Returns the value of legend
		* @returns Ext.chart.Legend/Object
		*/
		getLegend?(): any;
		/** [Method] Return the legend store that contains all the legend information
		* @returns Ext.data.Store
		*/
		getLegendStore?(): Ext.data.IStore;
		/** [Method] Returns the value of series
		* @returns Ext.chart.series.Series/Array
		*/
		getSeries?(): any;
		/** [Method] Returns the value of shadow
		* @returns Boolean/Object
		*/
		getShadow?(): any;
		/** [Method] Returns the value of store
		* @returns Ext.data.Store
		*/
		getStore?(): Ext.data.IStore;
		/** [Method] Get a surface by the given id or create one if it doesn t exist
		* @param name Object
		* @param type Object
		* @returns Ext.draw.Surface
		*/
		getSurface?( name?:any, type?:any ): Ext.draw.ISurface;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Resume the layout initialized by thickness change */
		resumeThicknessChanged?(): void;
		/** [Method] Schedule a layout at next frame  */
		scheduleLayout?(): void;
		/** [Method] Sets the value of animate
		* @param animate Boolean/Object The new value.
		*/
		setAnimate?( animate?:any ): void;
		/** [Method] Sets the value of axes
		* @param axes Ext.chart.axis.Axis/Array/Object The new value.
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of background
		* @param background Object The new value.
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of colors
		* @param colors Boolean/Array The new value.
		*/
		setColors?( colors?:any ): void;
		/** [Method] Sets the value of highlightItem
		* @param highlightItem Object The new value.
		*/
		setHighlightItem?( highlightItem?:any ): void;
		/** [Method] Sets the value of innerPadding
		* @param innerPadding Object The new value.
		*/
		setInnerPadding?( innerPadding?:any ): void;
		/** [Method] Sets the value of insetPadding
		* @param insetPadding Object|Number The new value.
		*/
		setInsetPadding?( insetPadding?:any ): void;
		/** [Method] Sets the value of interactions
		* @param interactions Array The new value.
		*/
		setInteractions?( interactions?:any[] ): void;
		/** [Method] Sets the value of legend
		* @param legend Ext.chart.Legend/Object The new value.
		*/
		setLegend?( legend?:any ): void;
		/** [Method] Sets the value of series
		* @param series Ext.chart.series.Series/Array The new value.
		*/
		setSeries?( series?:any ): void;
		/** [Method] Sets the value of shadow
		* @param shadow Boolean/Object The new value.
		*/
		setShadow?( shadow?:any ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.Store The new value.
		*/
		setStore?( store?:Ext.data.IStore ): void;
		/** [Method] Suspend the layout initialized by thickness change */
		suspendThicknessChanged?(): void;
	}
}
declare namespace Ext.chart.axis {
	export interface IAxis extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Array) */
		fields?: any[];
		/** [Config Option] (Object) */
		grid?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Boolean) */
		labelInSpan?: boolean;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		majorTickSteps?: number;
		/** [Config Option] (Number) */
		maxZoom?: number;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minZoom?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Number) */
		minorTickSteps?: number;
		/** [Config Option] (Boolean) */
		needHighPrecision?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String|Object) */
		title?: any;
		/** [Config Option] (Number) */
		titleMargin?: number;
		/** [Config Option] (Array) */
		visibleRange?: any[];
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of background
		* @returns Object
		*/
		getBackground?(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of chart
		* @returns Ext.chart.AbstractChart
		*/
		getChart?(): Ext.chart.IAbstractChart;
		/** [Method] Mapping data value into coordinate
		* @param value *
		* @param field String
		* @param idx Number
		* @param items Ext.util.MixedCollection
		* @returns Number
		*/
		getCoordFor?( value?:any, field?:string, idx?:number, items?:Ext.util.IMixedCollection ): number;
		/** [Method] Returns the value of fields
		* @returns Array
		*/
		getFields?(): any[];
		/** [Method] Returns the value of grid
		* @returns Object
		*/
		getGrid?(): any;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		getHidden?(): boolean;
		/** [Method] Returns the value of increment
		* @returns Number
		*/
		getIncrement?(): number;
		/** [Method] Returns the value of label
		* @returns Object
		*/
		getLabel?(): any;
		/** [Method] Returns the value of labelInSpan
		* @returns Boolean
		*/
		getLabelInSpan?(): boolean;
		/** [Method] Returns the value of layout
		* @returns Object|Ext.chart.axis.layout.Layout
		*/
		getLayout?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of majorTickSteps
		* @returns Number
		*/
		getMajorTickSteps?(): number;
		/** [Method] Returns the value of maxZoom
		* @returns Number
		*/
		getMaxZoom?(): number;
		/** [Method] Returns the value of maximum
		* @returns Number
		*/
		getMaximum?(): number;
		/** [Method] Returns the value of minZoom
		* @returns Number
		*/
		getMinZoom?(): number;
		/** [Method] Returns the value of minimum
		* @returns Number
		*/
		getMinimum?(): number;
		/** [Method] Returns the value of minorTickSteps
		* @returns Number
		*/
		getMinorTickSteps?(): number;
		/** [Method] Returns the value of needHighPrecision
		* @returns Boolean
		*/
		getNeedHighPrecision?(): boolean;
		/** [Method] Returns the value of position
		* @returns String
		*/
		getPosition?(): string;
		/** [Method] Get the range derived from all the bound series
		* @returns Array
		*/
		getRange?(): any[];
		/** [Method] Returns the value of renderer
		* @returns Function
		*/
		getRenderer?(): any;
		/** [Method] Returns the value of segmenter
		* @returns Object|Ext.chart.axis.segmenter.Segmenter
		*/
		getSegmenter?(): any;
		/** [Method] Returns the value of style
		* @returns Object
		*/
		getStyle?(): any;
		/** [Method] Returns the value of title
		* @returns String|Object
		*/
		getTitle?(): any;
		/** [Method] Returns the value of titleMargin
		* @returns Number
		*/
		getTitleMargin?(): number;
		/** [Method] Returns the value of visibleRange
		* @returns Array
		*/
		getVisibleRange?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Invoked when data has changed  */
		processData?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Invokes renderFrame on this axis s surface s  */
		renderFrame?(): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of background
		* @param background Object The new value.
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of chart
		* @param chart Ext.chart.AbstractChart The new value.
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;
		/** [Method] Sets the value of fields
		* @param fields Array The new value.
		*/
		setFields?( fields?:any[] ): void;
		/** [Method] Sets the value of grid
		* @param grid Object The new value.
		*/
		setGrid?( grid?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		setHidden?( hidden?:boolean ): void;
		/** [Method] Sets the value of increment
		* @param increment Number The new value.
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of label
		* @param label Object The new value.
		*/
		setLabel?( label?:any ): void;
		/** [Method] Sets the value of labelInSpan
		* @param labelInSpan Boolean The new value.
		*/
		setLabelInSpan?( labelInSpan?:boolean ): void;
		/** [Method] Sets the value of layout
		* @param layout Object|Ext.chart.axis.layout.Layout The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of majorTickSteps
		* @param majorTickSteps Number The new value.
		*/
		setMajorTickSteps?( majorTickSteps?:number ): void;
		/** [Method] Sets the value of maxZoom
		* @param maxZoom Number The new value.
		*/
		setMaxZoom?( maxZoom?:number ): void;
		/** [Method] Sets the value of maximum
		* @param maximum Number The new value.
		*/
		setMaximum?( maximum?:number ): void;
		/** [Method] Sets the value of minZoom
		* @param minZoom Number The new value.
		*/
		setMinZoom?( minZoom?:number ): void;
		/** [Method] Sets the value of minimum
		* @param minimum Number The new value.
		*/
		setMinimum?( minimum?:number ): void;
		/** [Method] Sets the value of minorTickSteps
		* @param minorTickSteps Number The new value.
		*/
		setMinorTickSteps?( minorTickSteps?:number ): void;
		/** [Method] Sets the value of needHighPrecision
		* @param needHighPrecision Boolean The new value.
		*/
		setNeedHighPrecision?( needHighPrecision?:boolean ): void;
		/** [Method] Sets the value of position
		* @param position String The new value.
		*/
		setPosition?( position?:string ): void;
		/** [Method] Sets the value of renderer
		* @param renderer Function The new value.
		* @returns String The label to display.
		*/
		setRenderer?( renderer?:any ): string;
		/** [Method] Sets the value of segmenter
		* @param segmenter Object|Ext.chart.axis.segmenter.Segmenter The new value.
		*/
		setSegmenter?( segmenter?:any ): void;
		/** [Method] Sets the value of style
		* @param style Object The new value.
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of title
		* @param title String|Object The new value.
		*/
		setTitle?( title?:any ): void;
		/** [Method] Sets the value of titleMargin
		* @param titleMargin Number The new value.
		*/
		setTitleMargin?( titleMargin?:number ): void;
		/** [Method] Sets the value of visibleRange
		* @param visibleRange Array The new value.
		*/
		setVisibleRange?( visibleRange?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.chart.axis {
	export interface ICategory extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of layout
		* @returns String
		*/
		getLayout?(): string;
		/** [Method] Returns the value of segmenter
		* @returns String
		*/
		getSegmenter?(): string;
		/** [Method] Sets the value of layout
		* @param layout String The new value.
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter
		* @param segmenter String The new value.
		*/
		setSegmenter?( segmenter?:string ): void;
	}
}
declare namespace Ext.chart.axis.layout {
	export interface ICombineDuplicate extends Ext.chart.axis.layout.IDiscrete {
	}
}
declare namespace Ext.chart.axis.layout {
	export interface IContinuous extends Ext.chart.axis.layout.ILayout {
		/** [Method] Returns the value of adjustMaximumByMajorUnit
		* @returns Boolean
		*/
		getAdjustMaximumByMajorUnit?(): boolean;
		/** [Method] Returns the value of adjustMinimumByMajorUnit
		* @returns Boolean
		*/
		getAdjustMinimumByMajorUnit?(): boolean;
		/** [Method] Sets the value of adjustMaximumByMajorUnit
		* @param adjustMaximumByMajorUnit Boolean The new value.
		*/
		setAdjustMaximumByMajorUnit?( adjustMaximumByMajorUnit?:boolean ): void;
		/** [Method] Sets the value of adjustMinimumByMajorUnit
		* @param adjustMinimumByMajorUnit Boolean The new value.
		*/
		setAdjustMinimumByMajorUnit?( adjustMinimumByMajorUnit?:boolean ): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks
		* @param context Object
		* @param min Object
		* @param max Object
		* @param estStepSize Object
		*/
		snapEnds?( context?:any, min?:any, max?:any, estStepSize?:any ): void;
	}
}
declare namespace Ext.chart.axis.layout {
	export interface IDiscrete extends Ext.chart.axis.layout.ILayout {
		/** [Method] Calculates the position of tick marks for the axis
		* @param context Object
		* @returns *
		*/
		calculateLayout?( context?:any ): any;
		/** [Method] Calculates the position of major ticks for the axis
		* @param context Object
		*/
		calculateMajorTicks?( context?:any ): void;
		/** [Method] Processes the data of the series bound to the axis  */
		processData?(): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks
		* @param context Object
		* @param min Object
		* @param max Object
		* @param estStepSize Object
		*/
		snapEnds?( context?:any, min?:any, max?:any, estStepSize?:any ): void;
		/** [Method] Trims the layout of the axis by the defined minimum and maximum
		* @param context Object
		* @param out Object
		* @param trimMin Object
		* @param trimMax Object
		*/
		trimByRange?( context?:any, out?:any, trimMin?:any, trimMax?:any ): void;
	}
}
declare namespace Ext.chart.axis.layout {
	export interface ILayout extends Ext.IBase {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Calculates the position of tick marks for the axis
		* @param context Object
		* @returns *
		*/
		calculateLayout?( context?:any ): any;
		/** [Method] Calculates the position of major ticks for the axis
		* @param context Object
		*/
		calculateMajorTicks?( context?:any ): void;
		/** [Method] Calculates the position of sub ticks for the axis
		* @param context Object
		*/
		calculateMinorTicks?( context?:any ): void;
		/** [Method] Returns the value of axis
		* @returns Ext.chart.axis.Axis
		*/
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Processes the data of the series bound to the axis
		* @param series Ext.chart.series.Series The bound series.
		*/
		processData?( series?:Ext.chart.series.ISeries ): void;
		/** [Method] Sets the value of axis
		* @param axis Ext.chart.axis.Axis The new value.
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks
		* @param context Object
		* @param min Number
		* @param max Number
		* @param estStepSize Number
		*/
		snapEnds?( context?:any, min?:number, max?:number, estStepSize?:number ): void;
		/** [Method] Trims the layout of the axis by the defined minimum and maximum
		* @param context Object
		* @param out Object
		* @param trimMin Number
		* @param trimMax Number
		*/
		trimByRange?( context?:any, out?:any, trimMin?:number, trimMax?:number ): void;
	}
}
declare namespace Ext.chart.axis {
	export interface INumeric extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of aggregator
		* @returns String
		*/
		getAggregator?(): string;
		/** [Method] Returns the value of layout
		* @returns String
		*/
		getLayout?(): string;
		/** [Method] Returns the value of segmenter
		* @returns String
		*/
		getSegmenter?(): string;
		/** [Method] Sets the value of aggregator
		* @param aggregator String The new value.
		*/
		setAggregator?( aggregator?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout String The new value.
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter
		* @param segmenter String The new value.
		*/
		setSegmenter?( segmenter?:string ): void;
	}
}
declare namespace Ext.chart.axis.segmenter {
	export interface INames extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value
		* @param value Object
		* @param step Object
		* @param unit Object
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units
		* @param value Object
		* @param step Object
		* @param unit Object
		* @returns * Aligned value.
		*/
		align?( value?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale
		* @param min Object
		* @param max Object
		* @param unit Object
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max.
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size
		* @param min Object
		* @param estStepSize Object
		* @param minIdx Object
		* @param data Object
		* @returns Object Return the step size by an object of step x unit.
		*/
		preferredStep?( min?:any, estStepSize?:any, minIdx?:any, data?:any ): any;
		/** [Method] This method formats the value
		* @param value Object
		* @param context Object
		* @returns String
		*/
		renderer?( value?:any, context?:any ): string;
	}
}
declare namespace Ext.chart.axis.segmenter {
	export interface INumeric extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value
		* @param value Object
		* @param step Object
		* @param unit Object
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units
		* @param value Object
		* @param step Object
		* @param unit Object
		* @returns * Aligned value.
		*/
		align?( value?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale
		* @param min Object
		* @param max Object
		* @param unit Object
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max.
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Wraps the provided estimated step size of a range without altering it into a step size object
		* @param start * The start point of range.
		* @param estStepSize * The estimated step size.
		* @returns Object Return the step size by an object of step x unit.
		*/
		exactStep?( start?:any, estStepSize?:any ): any;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size
		* @param min Object
		* @param estStepSize Object
		* @returns Object Return the step size by an object of step x unit.
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value
		* @param value Object
		* @param context Object
		* @returns String
		*/
		renderer?( value?:any, context?:any ): string;
	}
}
declare namespace Ext.chart.axis.segmenter {
	export interface ISegmenter extends Ext.IBase {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Add step units to the value
		* @param value * The value to be added.
		* @param step Number The step of units. Negative value are allowed.
		* @param unit * The unit.
		*/
		add?( value?:any, step?:number, unit?:any ): void;
		/** [Method] Align value with step of units
		* @param value * The value to be aligned.
		* @param step Number The step of units.
		* @param unit * The unit.
		* @returns * Aligned value.
		*/
		align?( value?:any, step?:number, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale
		* @param min * The smaller value.
		* @param max * The larger value.
		* @param unit * The unit scale. Unit can be any type.
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max.
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Convert from any data into the target type
		* @param value * The value to convert from
		* @returns * The converted value.
		*/
		from?( value?:any ): any;
		/** [Method] Returns the value of axis
		* @returns Ext.chart.axis.Axis
		*/
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size
		* @param start * The start point of range.
		* @param estStepSize * The estimated step size.
		* @returns Object Return the step size by an object of step x unit.
		*/
		preferredStep?( start?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value
		* @param value * The value to format.
		* @param context Object Axis layout context.
		* @returns String
		*/
		renderer?( value?:any, context?:any ): string;
		/** [Method] Sets the value of axis
		* @param axis Ext.chart.axis.Axis The new value.
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
	}
}
declare namespace Ext.chart.axis.segmenter {
	export interface ITime extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Config Option] (Object) */
		step?: any;
		/** [Method] Add step units to the value
		* @param value Object
		* @param step Object
		* @param unit Object
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units
		* @param date Object
		* @param step Object
		* @param unit Object
		* @returns * Aligned value.
		*/
		align?( date?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale
		* @param min Object
		* @param max Object
		* @param unit Object
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max.
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Convert from any data into the target type
		* @param value Object
		* @returns * The converted value.
		*/
		from?( value?:any ): any;
		/** [Method] Returns the value of step
		* @returns Object
		*/
		getStep?(): any;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size
		* @param min Object
		* @param estStepSize Object
		* @returns Object Return the step size by an object of step x unit.
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value
		* @param value Object
		* @param context Object
		* @returns String
		*/
		renderer?( value?:any, context?:any ): string;
		/** [Method] Sets the value of step
		* @param step Object The new value.
		*/
		setStep?( step?:any ): void;
	}
}
declare namespace Ext.chart.axis.sprite {
	export interface IAxis extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		The?: number;
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Config Option] (Boolean) */
		axisLine?: boolean;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMax?: number;
		/** [Config Option] (Number) */
		dataMin?: number;
		/** [Config Option] (Boolean) */
		enlargeEstStepSizeByText?: boolean;
		/** [Config Option] (Boolean) */
		grid?: boolean;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		length?: number;
		/** [Config Option] (Number) */
		majorTickSize?: number;
		/** [Config Option] (Boolean) */
		majorTicks?: boolean;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (Number) */
		minStepSize?: number;
		/** [Config Option] (Number) */
		minorTickSize?: number;
		/** [Config Option] (Boolean) */
		minorTricks?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Number) */
		textPadding?: number;
		/** [Config Option] (Number) */
		visibleMax?: number;
		/** [Config Option] (Number) */
		visibleMin?: number;
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
		/** [Method] Returns the value of axis
		* @returns Ext.chart.axis.Axis
		*/
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine  */
		getBBox?(): void;
		/** [Method] Returns the value of label
		* @returns Object
		*/
		getLabel?(): any;
		/** [Method] Returns the value of layout
		* @returns Object|Ext.chart.axis.layout.Layout
		*/
		getLayout?(): any;
		/** [Method] Returns the value of renderer
		* @returns Function
		*/
		getRenderer?(): any;
		/** [Method] Returns the value of segmenter
		* @returns Object|Ext.chart.axis.segmenter.Segmenter
		*/
		getSegmenter?(): any;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of axis
		* @param axis Ext.chart.axis.Axis The new value.
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of label
		* @param label Object The new value.
		*/
		setLabel?( label?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object|Ext.chart.axis.layout.Layout The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of renderer
		* @param renderer Function The new value.
		*/
		setRenderer?( renderer?:any ): void;
		/** [Method] Sets the value of segmenter
		* @param segmenter Object|Ext.chart.axis.segmenter.Segmenter The new value.
		*/
		setSegmenter?( segmenter?:any ): void;
	}
}
declare namespace Ext.chart.axis {
	export interface ITime extends Ext.chart.axis.INumeric {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: boolean;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
		/** [Method] Returns the value of aggregator
		* @returns String
		*/
		getAggregator?(): string;
		/** [Method] Returns the value of calculateByLabelSize
		* @returns Boolean
		*/
		getCalculateByLabelSize?(): boolean;
		/** [Method] Mapping data value into coordinate
		* @param value Object
		* @returns Number
		*/
		getCoordFor?( value?:any ): number;
		/** [Method] Returns the value of dateFormat
		* @returns String/Boolean
		*/
		getDateFormat?(): any;
		/** [Method] Returns the value of fromDate
		* @returns Date
		*/
		getFromDate?(): any;
		/** [Method] Returns the value of layout
		* @returns String
		*/
		getLayout?(): string;
		/** [Method] Returns the value of segmenter
		* @returns String
		*/
		getSegmenter?(): string;
		/** [Method] Returns the value of step
		* @returns Array
		*/
		getStep?(): any[];
		/** [Method] Returns the value of toDate
		* @returns Date
		*/
		getToDate?(): any;
		/** [Method] Sets the value of aggregator
		* @param aggregator String The new value.
		*/
		setAggregator?( aggregator?:string ): void;
		/** [Method] Sets the value of calculateByLabelSize
		* @param calculateByLabelSize Boolean The new value.
		*/
		setCalculateByLabelSize?( calculateByLabelSize?:boolean ): void;
		/** [Method] Sets the value of dateFormat
		* @param dateFormat String/Boolean The new value.
		*/
		setDateFormat?( dateFormat?:any ): void;
		/** [Method] Sets the value of fromDate
		* @param fromDate Date The new value.
		*/
		setFromDate?( fromDate?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout String The new value.
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter
		* @param segmenter String The new value.
		*/
		setSegmenter?( segmenter?:string ): void;
		/** [Method] Sets the value of step
		* @param step Array The new value.
		*/
		setStep?( step?:any[] ): void;
		/** [Method] Sets the value of toDate
		* @param toDate Date The new value.
		*/
		setToDate?( toDate?:any ): void;
	}
}
declare namespace Ext.chart {
	export interface ICartesianChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Method] Returns the value of flipXY
		* @returns Boolean
		*/
		getFlipXY?(): boolean;
		/** [Method] Returns the value of innerRegion
		* @returns Array
		*/
		getInnerRegion?(): any[];
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Layout the axes and series  */
		performLayout?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of flipXY
		* @param flipXY Boolean The new value.
		*/
		setFlipXY?( flipXY?:boolean ): void;
		/** [Method] Sets the value of innerRegion
		* @param innerRegion Array The new value.
		*/
		setInnerRegion?( innerRegion?:any[] ): void;
	}
}
declare namespace Ext.chart {
	export interface IChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Method] Returns the value of flipXY
		* @returns Boolean
		*/
		getFlipXY?(): boolean;
		/** [Method] Returns the value of innerRegion
		* @returns Array
		*/
		getInnerRegion?(): any[];
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Layout the axes and series  */
		performLayout?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of flipXY
		* @param flipXY Boolean The new value.
		*/
		setFlipXY?( flipXY?:boolean ): void;
		/** [Method] Sets the value of innerRegion
		* @param innerRegion Array The new value.
		*/
		setInnerRegion?( innerRegion?:any[] ): void;
	}
}
declare namespace Ext.chart.grid {
	export interface ICircularGrid extends Ext.draw.sprite.ICircle {
	}
}
declare namespace Ext.chart.grid {
	export interface IHorizontalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare namespace Ext.chart.grid {
	export interface IRadialGrid extends Ext.draw.sprite.IPath {
		/** [Method] Render method
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?(): any;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare namespace Ext.chart.grid {
	export interface IVerticalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare namespace Ext.chart.interactions {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Boolean) */
		enabled?: boolean;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Property] (Number) */
		throttleGap?: number;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of chart
		* @returns Ext.chart.AbstractChart
		*/
		getChart?(): Ext.chart.IAbstractChart;
		/** [Method] Returns the value of enabled
		* @returns Boolean
		*/
		getEnabled?(): boolean;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Find and return a single series item corresponding to the given event or null if no matching item is found
		* @param e Event
		* @returns Object the item object or null if none found.
		*/
		getItemForEvent?( e?:Event ): any;
		/** [Method] Find and return all series items corresponding to the given event
		* @param e Event
		* @returns Array array of matching item objects
		*/
		getItemsForEvent?( e?:Event ): any[];
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] A method to be implemented by subclasses where all event attachment should occur  */
		initialize?(): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Placeholder method  */
		onGesture?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of chart
		* @param chart Ext.chart.AbstractChart The new value.
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;
		/** [Method] Sets the value of enabled
		* @param enabled Boolean The new value.
		*/
		setEnabled?( enabled?:boolean ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface ICrosshair extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object) */
		axes?: any;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Config Option] (Object) */
		lines?: any;
		/** [Method] Returns the value of axes
		* @returns Object
		*/
		getAxes?(): any;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Returns the value of lines
		* @returns Object
		*/
		getLines?(): any;
		/** [Method] Placeholder method
		* @param e Object
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of axes
		* @param axes Object The new value.
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of lines
		* @param lines Object The new value.
		*/
		setLines?( lines?:any ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface ICrossZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of axes
		* @returns Object/Array
		*/
		getAxes?(): any;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Returns the value of undoButton
		* @returns Object
		*/
		getUndoButton?(): any;
		/** [Method] Placeholder method
		* @param e Object
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of axes
		* @param axes Object/Array The new value.
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of undoButton
		* @param undoButton Object The new value.
		*/
		setUndoButton?( undoButton?:any ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface IItemHighlight extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Placeholder method
		* @param series Object
		* @param item Object
		* @param e Object
		*/
		onGesture?( series?:any, item?:any, e?:any ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface IItemInfo extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Config Option] (Object) */
		panel?: any;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Returns the value of panel
		* @returns Object
		*/
		getPanel?(): any;
		/** [Method] Placeholder method
		* @param series Object
		* @param item Object
		*/
		onGesture?( series?:any, item?:any ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of panel
		* @param panel Object The new value.
		*/
		setPanel?( panel?:any ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface IPanZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		overflowArrowOptions?: any;
		/** [Config Option] (Boolean) */
		showOverflowArrows?: boolean;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of axes
		* @returns Object/Array
		*/
		getAxes?(): any;
		/** [Method] Returns the value of hideLabelInGesture
		* @returns Boolean
		*/
		getHideLabelInGesture?(): boolean;
		/** [Method] Returns the value of maxZoom
		* @returns Object
		*/
		getMaxZoom?(): any;
		/** [Method] Returns the value of minZoom
		* @returns Object
		*/
		getMinZoom?(): any;
		/** [Method] Returns the value of modeToggleButton
		* @returns Object
		*/
		getModeToggleButton?(): any;
		/** [Method] Returns the value of panGesture
		* @returns String
		*/
		getPanGesture?(): string;
		/** [Method] Returns the value of showOverflowArrows
		* @returns Boolean
		*/
		getShowOverflowArrows?(): boolean;
		/** [Method] Returns the value of zoomOnPanGesture
		* @returns Boolean
		*/
		getZoomOnPanGesture?(): boolean;
		/** [Method] Placeholder method
		* @param e Object
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of axes
		* @param axes Object/Array The new value.
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of hideLabelInGesture
		* @param hideLabelInGesture Boolean The new value.
		*/
		setHideLabelInGesture?( hideLabelInGesture?:boolean ): void;
		/** [Method] Sets the value of maxZoom
		* @param maxZoom Object The new value.
		*/
		setMaxZoom?( maxZoom?:any ): void;
		/** [Method] Sets the value of minZoom
		* @param minZoom Object The new value.
		*/
		setMinZoom?( minZoom?:any ): void;
		/** [Method] Sets the value of modeToggleButton
		* @param modeToggleButton Object The new value.
		*/
		setModeToggleButton?( modeToggleButton?:any ): void;
		/** [Method] Sets the value of panGesture
		* @param panGesture String The new value.
		*/
		setPanGesture?( panGesture?:string ): void;
		/** [Method] Sets the value of showOverflowArrows
		* @param showOverflowArrows Boolean The new value.
		*/
		setShowOverflowArrows?( showOverflowArrows?:boolean ): void;
		/** [Method] Sets the value of zoomOnPanGesture
		* @param zoomOnPanGesture Boolean The new value.
		*/
		setZoomOnPanGesture?( zoomOnPanGesture?:boolean ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface IRotate extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of gesture
		* @returns String
		*/
		getGesture?(): string;
		/** [Method] Placeholder method
		* @param e Object
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of gesture
		* @param gesture String The new value.
		*/
		setGesture?( gesture?:string ): void;
	}
}
declare namespace Ext.chart.interactions {
	export interface IRotatePie3D extends Ext.chart.interactions.IRotate {
	}
}
declare namespace Ext.chart.label {
	export interface ICallout extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top
		* @param attr Object
		* @param changes Object
		*/
		popUp?( attr?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use
		* @param attr Object
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to be pushed down to the sprite
		* @param attr Object
		* @param changes Object
		* @returns Mixed
		*/
		pushDown?( attr?:any, changes?:any ): any;
	}
}
declare namespace Ext.chart.label {
	export interface ILabel extends Ext.draw.sprite.IText {
		/** [Config Option] (Object) */
		fx?: any;
		/** [Method] Returns the value of field
		* @returns Object
		*/
		getField?(): any;
		/** [Method] Returns the value of fx
		* @returns Object
		*/
		getFx?(): any;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of field
		* @param field Object The new value.
		*/
		setField?( field?:any ): void;
		/** [Method] Sets the value of fx
		* @param fx Object The new value.
		*/
		setFx?( fx?:any ): void;
	}
}
declare namespace Ext.chart {
	export interface ILegend extends Ext.dataview.IDataView {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Boolean) */
		toggleable?: boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of disableSelection
		* @returns Boolean
		*/
		getDisableSelection?(): boolean;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		getDocked?(): string;
		/** [Method] Returns the value of horizontalHeight
		* @returns Number
		*/
		getHorizontalHeight?(): number;
		/** [Method] Returns the value of inline
		* @returns Boolean
		*/
		getInline?(): boolean;
		/** [Method] Returns the value of itemTpl
		* @returns Array
		*/
		getItemTpl?(): any[];
		/** [Method] Returns the value of padding
		* @returns Number
		*/
		getPadding?(): number;
		/** [Method] Returns the value of toggleable
		* @returns Boolean
		*/
		getToggleable?(): boolean;
		/** [Method] Returns the value of verticalWidth
		* @returns Number
		*/
		getVerticalWidth?(): number;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of disableSelection
		* @param disableSelection Boolean The new value.
		*/
		setDisableSelection?( disableSelection?:boolean ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of horizontalHeight
		* @param horizontalHeight Number The new value.
		*/
		setHorizontalHeight?( horizontalHeight?:number ): void;
		/** [Method] Sets the value of inline
		* @param inline Boolean The new value.
		*/
		setInline?( inline?:boolean ): void;
		/** [Method] Sets the value of itemTpl
		* @param itemTpl Array The new value.
		*/
		setItemTpl?( itemTpl?:any[] ): void;
		/** [Method] Sets the value of padding
		* @param padding Number The new value.
		*/
		setPadding?( padding?:number ): void;
		/** [Method] Sets the value of toggleable
		* @param toggleable Boolean The new value.
		*/
		setToggleable?( toggleable?:boolean ): void;
		/** [Method] Sets the value of verticalWidth
		* @param verticalWidth Number The new value.
		*/
		setVerticalWidth?( verticalWidth?:number ): void;
	}
}
declare namespace Ext.chart {
	export interface IMarkerHolder extends Ext.mixin.IMixin {
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
	}
}
declare namespace Ext.chart {
	export interface IMarkers extends Ext.draw.sprite.IInstancing {
		/** [Method] Clear the markers in the category
		* @param category String
		*/
		clear?( category?:string ): void;
		/** [Method] Not supported
		* @returns null
		*/
		getBBox?(): any;
		/** [Method]
		* @param category String
		* @param index Mixed
		* @param isWithoutTransform Boolean
		*/
		getMarkerBBoxFor?( category?:string, index?:any, isWithoutTransform?:boolean ): void;
		/** [Method] Put a marker in the category with additional attributes
		* @param category String
		* @param markerAttr Object
		* @param index String|Number
		* @param canonical Boolean
		* @param keepRevision Boolean
		*/
		putMarkerFor?( category?:string, markerAttr?:any, index?:any, canonical?:boolean, keepRevision?:boolean ): void;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare namespace Ext.chart {
	export interface IPolarChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Returns the value of center
		* @returns Array
		*/
		getCenter?(): any[];
		/** [Method] Returns the value of radius
		* @returns Number
		*/
		getRadius?(): number;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of center
		* @param center Array The new value.
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of radius
		* @param radius Number The new value.
		*/
		setRadius?( radius?:number ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IArea extends Ext.chart.series.IStackedCartesian {
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
	}
}
declare namespace Ext.chart.series {
	export interface IBar extends Ext.chart.series.IStackedCartesian {
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Object
		* @param y Object
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:any, y?:any ): any;
	}
}
declare namespace Ext.chart.series {
	export interface ICandleStick extends Ext.chart.series.ICartesian {
		/** [Config Option] (String) */
		closeField?: string;
		/** [Config Option] (String) */
		highField?: string;
		/** [Config Option] (String) */
		lowField?: string;
		/** [Config Option] (String) */
		openField?: string;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of closeField
		* @returns String
		*/
		getCloseField?(): string;
		/** [Method] Returns the value of highField
		* @returns String
		*/
		getHighField?(): string;
		/** [Method] Returns the value of lowField
		* @returns String
		*/
		getLowField?(): string;
		/** [Method] Returns the value of openField
		* @returns String
		*/
		getOpenField?(): string;
		/** [Method] Sets the value of closeField
		* @param closeField String The new value.
		*/
		setCloseField?( closeField?:string ): void;
		/** [Method] Sets the value of highField
		* @param highField String The new value.
		*/
		setHighField?( highField?:string ): void;
		/** [Method] Sets the value of lowField
		* @param lowField String The new value.
		*/
		setLowField?( lowField?:string ): void;
		/** [Method] Sets the value of openField
		* @param openField String The new value.
		*/
		setOpenField?( openField?:string ): void;
	}
}
declare namespace Ext.chart.series {
	export interface ICartesian extends Ext.chart.series.ISeries {
		/** [Config Option] (Ext.chart.axis.Axis) */
		xAxis?: Ext.chart.axis.IAxis;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (Ext.chart.axis.Axis) */
		yAxis?: Ext.chart.axis.IAxis;
		/** [Config Option] (String) */
		yField?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Object
		* @param y Object
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of xAxis
		* @returns Ext.chart.axis.Axis
		*/
		getXAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the value of xField
		* @returns String
		*/
		getXField?(): string;
		/** [Method] Returns the value of yAxis
		* @returns Ext.chart.axis.Axis
		*/
		getYAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the value of yField
		* @returns String
		*/
		getYField?(): string;
		/** [Method] Provide legend information to target array
		* @param target Object
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of xAxis
		* @param xAxis Ext.chart.axis.Axis The new value.
		*/
		setXAxis?( xAxis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of xField
		* @param xField String The new value.
		*/
		setXField?( xField?:string ): void;
		/** [Method] Sets the value of yAxis
		* @param yAxis Ext.chart.axis.Axis The new value.
		*/
		setYAxis?( yAxis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of yField
		* @param yField String The new value.
		*/
		setYField?( yField?:string ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IGauge extends Ext.chart.series.ISeries {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Boolean) */
		needle?: boolean;
		/** [Config Option] (Number) */
		needleLength?: number;
		/** [Config Option] (Number) */
		needleLengthRatio?: number;
		/** [Config Option] (Number) */
		needleWidth?: number;
		/** [Config Option] (Array) */
		sectors?: any[];
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Boolean) */
		wholeDisk?: boolean;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of angleField
		* @returns String
		*/
		getAngleField?(): string;
		/** [Method] Returns the value of center
		* @returns Array
		*/
		getCenter?(): any[];
		/** [Method] Returns the value of colors
		* @returns Array
		*/
		getColors?(): any[];
		/** [Method] Returns the value of donut
		* @returns Number
		*/
		getDonut?(): number;
		/** [Method] Returns the value of field
		* @returns String
		*/
		getField?(): string;
		/** [Method] Returns the value of maximum
		* @returns Number
		*/
		getMaximum?(): number;
		/** [Method] Returns the value of minimum
		* @returns Number
		*/
		getMinimum?(): number;
		/** [Method] Returns the value of needle
		* @returns Boolean
		*/
		getNeedle?(): boolean;
		/** [Method] Returns the value of needleLength
		* @returns Number
		*/
		getNeedleLength?(): number;
		/** [Method] Returns the value of needleLengthRatio
		* @returns Number
		*/
		getNeedleLengthRatio?(): number;
		/** [Method] Returns the value of needleWidth
		* @returns Number
		*/
		getNeedleWidth?(): number;
		/** [Method] Returns the value of radius
		* @returns Number
		*/
		getRadius?(): number;
		/** [Method] Returns the value of region
		* @returns Array
		*/
		getRegion?(): any[];
		/** [Method] Returns the value of rotation
		* @returns Number
		*/
		getRotation?(): number;
		/** [Method] Returns the value of sectors
		* @returns Array
		*/
		getSectors?(): any[];
		/** [Method] Returns the value of showInLegend
		* @returns Boolean
		*/
		getShowInLegend?(): boolean;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of totalAngle
		* @returns Object
		*/
		getTotalAngle?(): any;
		/** [Method] Returns the value of value
		* @returns Number
		*/
		getValue?(): number;
		/** [Method] Returns the value of wholeDisk
		* @returns Boolean
		*/
		getWholeDisk?(): boolean;
		/** [Method] Sets the value of angleField
		* @param angleField String The new value.
		*/
		setAngleField?( angleField?:string ): void;
		/** [Method] Sets the value of center
		* @param center Array The new value.
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of colors
		* @param colors Array The new value.
		*/
		setColors?( colors?:any[] ): void;
		/** [Method] Sets the value of donut
		* @param donut Number The new value.
		*/
		setDonut?( donut?:number ): void;
		/** [Method] Sets the value of field
		* @param field String The new value.
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of maximum
		* @param maximum Number The new value.
		*/
		setMaximum?( maximum?:number ): void;
		/** [Method] Sets the value of minimum
		* @param minimum Number The new value.
		*/
		setMinimum?( minimum?:number ): void;
		/** [Method] Sets the value of needle
		* @param needle Boolean The new value.
		*/
		setNeedle?( needle?:boolean ): void;
		/** [Method] Sets the value of needleLength
		* @param needleLength Number The new value.
		*/
		setNeedleLength?( needleLength?:number ): void;
		/** [Method] Sets the value of needleLengthRatio
		* @param needleLengthRatio Number The new value.
		*/
		setNeedleLengthRatio?( needleLengthRatio?:number ): void;
		/** [Method] Sets the value of needleWidth
		* @param needleWidth Number The new value.
		*/
		setNeedleWidth?( needleWidth?:number ): void;
		/** [Method] Sets the value of radius
		* @param radius Number The new value.
		*/
		setRadius?( radius?:number ): void;
		/** [Method] Sets the value of region
		* @param region Array The new value.
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Sets the value of rotation
		* @param rotation Number The new value.
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of sectors
		* @param sectors Array The new value.
		*/
		setSectors?( sectors?:any[] ): void;
		/** [Method] Sets the value of showInLegend
		* @param showInLegend Boolean The new value.
		*/
		setShowInLegend?( showInLegend?:boolean ): void;
		/** [Method] Sets the value of totalAngle
		* @param totalAngle Object The new value.
		*/
		setTotalAngle?( totalAngle?:any ): void;
		/** [Method] Sets the value of value
		* @param value Number The new value.
		*/
		setValue?( value?:number ): void;
		/** [Method] Sets the value of wholeDisk
		* @param wholeDisk Boolean The new value.
		*/
		setWholeDisk?( wholeDisk?:boolean ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IItemPublisher extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.chart.series {
	export interface ILine extends Ext.chart.series.ICartesian {
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Config Option] (Boolean/Number) */
		smooth?: any;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of aggregator
		* @returns Object
		*/
		getAggregator?(): any;
		/** [Method] Returns the value of fill
		* @returns Boolean
		*/
		getFill?(): boolean;
		/** [Method] Returns the value of selectionTolerance
		* @returns Number
		*/
		getSelectionTolerance?(): number;
		/** [Method] Returns the value of smooth
		* @returns Boolean/Number
		*/
		getSmooth?(): any;
		/** [Method] Returns the value of step
		* @returns Boolean
		*/
		getStep?(): boolean;
		/** [Method] Sets the value of aggregator
		* @param aggregator Object The new value.
		*/
		setAggregator?( aggregator?:any ): void;
		/** [Method] Sets the value of fill
		* @param fill Boolean The new value.
		*/
		setFill?( fill?:boolean ): void;
		/** [Method] Sets the value of selectionTolerance
		* @param selectionTolerance Number The new value.
		*/
		setSelectionTolerance?( selectionTolerance?:number ): void;
		/** [Method] Sets the value of smooth
		* @param smooth Boolean/Number The new value.
		*/
		setSmooth?( smooth?:any ): void;
		/** [Method] Sets the value of step
		* @param step Boolean The new value.
		*/
		setStep?( step?:boolean ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IPie extends Ext.chart.series.IPolar {
		/** [Config Option] (Number) */
		Allows?: number;
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Number) */
		totalAngle?: number;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of donut
		* @returns Boolean/Number
		*/
		getDonut?(): any;
		/** [Method] Returns the pie slice for a given angle
		* @param angle Number The angle to search for the slice
		* @returns Object An object containing the reocord, sprite, scope etc.
		*/
		getItemForAngle?( angle?:number ): any;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Object
		* @param y Object
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Returns the value of labelField
		* @returns String
		*/
		getLabelField?(): string;
		/** [Method] Returns the value of rotation
		* @returns Number
		*/
		getRotation?(): number;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of style
		* @returns Object
		*/
		getStyle?(): any;
		/** [Method] Returns the value of totalAngle
		* @returns Number
		*/
		getTotalAngle?(): number;
		/** [Method] Provide legend information to target array
		* @param target Object
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of donut
		* @param donut Boolean/Number The new value.
		*/
		setDonut?( donut?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Array The new value.
		*/
		setHidden?( hidden?:any[] ): void;
		/** [Method] Sets the value of labelField
		* @param labelField String The new value.
		*/
		setLabelField?( labelField?:string ): void;
		/** [Method] Sets the value of rotation
		* @param rotation Number The new value.
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of style
		* @param style Object The new value.
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of totalAngle
		* @param totalAngle Number The new value.
		*/
		setTotalAngle?( totalAngle?:number ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IPie3D extends Ext.chart.series.IPolar {
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of distortion
		* @returns Number
		*/
		getDistortion?(): number;
		/** [Method] Returns the value of donut
		* @returns Boolean/Number
		*/
		getDonut?(): any;
		/** [Method] Returns the value of field
		* @returns String
		*/
		getField?(): string;
		/** [Method] Returns the value of region
		* @returns Array
		*/
		getRegion?(): any[];
		/** [Method] Returns the value of rotation
		* @returns Number
		*/
		getRotation?(): number;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of thickness
		* @returns Number
		*/
		getThickness?(): number;
		/** [Method] Sets the value of distortion
		* @param distortion Number The new value.
		*/
		setDistortion?( distortion?:number ): void;
		/** [Method] Sets the value of donut
		* @param donut Boolean/Number The new value.
		*/
		setDonut?( donut?:any ): void;
		/** [Method] Sets the value of field
		* @param field String The new value.
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of region
		* @param region Array The new value.
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Sets the value of rotation
		* @param rotation Number The new value.
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of thickness
		* @param thickness Number The new value.
		*/
		setThickness?( thickness?:number ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IPolar extends Ext.chart.series.ISeries {
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (Number) */
		offsetX?: number;
		/** [Config Option] (Number) */
		offsetY?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (String) */
		yField?: string;
		/** [Method] Returns the value of center
		* @returns Array
		*/
		getCenter?(): any[];
		/** [Method] Returns the value of offsetX
		* @returns Number
		*/
		getOffsetX?(): number;
		/** [Method] Returns the value of offsetY
		* @returns Number
		*/
		getOffsetY?(): number;
		/** [Method] Returns the value of radius
		* @returns Number
		*/
		getRadius?(): number;
		/** [Method] Returns the value of rotation
		* @returns Number
		*/
		getRotation?(): number;
		/** [Method] Returns the value of showInLegend
		* @returns Boolean
		*/
		getShowInLegend?(): boolean;
		/** [Method] Returns the value of xAxis
		* @returns Object
		*/
		getXAxis?(): any;
		/** [Method] Returns the value of xField
		* @returns String
		*/
		getXField?(): string;
		/** [Method] Returns the value of yAxis
		* @returns Object
		*/
		getYAxis?(): any;
		/** [Method] Returns the value of yField
		* @returns String
		*/
		getYField?(): string;
		/** [Method] Sets the value of center
		* @param center Array The new value.
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of offsetX
		* @param offsetX Number The new value.
		*/
		setOffsetX?( offsetX?:number ): void;
		/** [Method] Sets the value of offsetY
		* @param offsetY Number The new value.
		*/
		setOffsetY?( offsetY?:number ): void;
		/** [Method] Sets the value of radius
		* @param radius Number The new value.
		*/
		setRadius?( radius?:number ): void;
		/** [Method] Sets the value of rotation
		* @param rotation Number The new value.
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of showInLegend
		* @param showInLegend Boolean The new value.
		*/
		setShowInLegend?( showInLegend?:boolean ): void;
		/** [Method] Sets the value of xAxis
		* @param xAxis Object The new value.
		*/
		setXAxis?( xAxis?:any ): void;
		/** [Method] Sets the value of xField
		* @param xField String The new value.
		*/
		setXField?( xField?:string ): void;
		/** [Method] Sets the value of yAxis
		* @param yAxis Object The new value.
		*/
		setYAxis?( yAxis?:any ): void;
		/** [Method] Sets the value of yField
		* @param yField String The new value.
		*/
		setYField?( yField?:string ): void;
	}
}
declare namespace Ext.chart.series {
	export interface IRadar extends Ext.chart.series.IPolar {
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Object
		* @param y Object
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:any, y?:any ): any;
	}
}
declare namespace Ext.chart.series {
	export interface IScatter extends Ext.chart.series.ICartesian {
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of itemInstancing
		* @returns Object
		*/
		getItemInstancing?(): any;
		/** [Method] Provide legend information to target array
		* @param target Object
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of itemInstancing
		* @param itemInstancing Object The new value.
		*/
		setItemInstancing?( itemInstancing?:any ): void;
	}
}
declare namespace Ext.chart.series {
	export interface ISeries extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		animate?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Boolean|Array) */
		hidden?: any;
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (String/String[]) */
		labelField?: any;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		marker?: any;
		/** [Config Option] (Object) */
		markerSubStyle?: any;
		/** [Config Option] (Object) */
		overlaySurface?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Object) */
		subStyle?: any;
		/** [Config Option] (Object) */
		surface?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of animate
		* @returns Object
		*/
		getAnimate?(): any;
		/** [Method] Returns the value of background
		* @returns Object
		*/
		getBackground?(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of colors
		* @returns Array
		*/
		getColors?(): any[];
		/** [Method] Returns the value of hidden
		* @returns Boolean|Array
		*/
		getHidden?(): any;
		/** [Method] Returns the value of highlightCfg
		* @returns Object
		*/
		getHighlightCfg?(): any;
		/** [Method] Returns the value of highlightItem
		* @returns Object
		*/
		getHighlightItem?(): any;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Number
		* @param y Number
		* @param target Object optional target to receive the result
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:number, y?:number, target?:any ): any;
		/** [Method] Returns the value of itemInstancing
		* @returns Object
		*/
		getItemInstancing?(): any;
		/** [Method] Returns the value of label
		* @returns Object
		*/
		getLabel?(): any;
		/** [Method] Returns the value of labelField
		* @returns String/String[]
		*/
		getLabelField?(): any;
		/** [Method] Returns the value of labelOverflowPadding
		* @returns Number
		*/
		getLabelOverflowPadding?(): number;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of marker
		* @returns Object
		*/
		getMarker?(): any;
		/** [Method] Returns the value of markerSubStyle
		* @returns Object
		*/
		getMarkerSubStyle?(): any;
		/** [Method] Returns the value of overlaySurface
		* @returns Object
		*/
		getOverlaySurface?(): any;
		/** [Method] Returns the value of renderer
		* @returns Function
		*/
		getRenderer?(): any;
		/** [Method] Returns the value of showInLegend
		* @returns Boolean
		*/
		getShowInLegend?(): boolean;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of style
		* @returns Object
		*/
		getStyle?(): any;
		/** [Method] Returns the value of subStyle
		* @returns Object
		*/
		getSubStyle?(): any;
		/** [Method] Returns the value of surface
		* @returns Object
		*/
		getSurface?(): any;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Provide legend information to target array
		* @param target Array The information consists:
		*/
		provideLegendInfo?( target?:any[] ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of animate
		* @param animate Object The new value.
		*/
		setAnimate?( animate?:any ): void;
		/** [Method] Sets the value of background
		* @param background Object The new value.
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of colors
		* @param colors Array The new value.
		*/
		setColors?( colors?:any[] ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean|Array The new value.
		*/
		setHidden?( hidden?:any ): void;
		/** [Method]
		* @param index Number
		* @param value Boolean
		*/
		setHiddenByIndex?( index?:number, value?:boolean ): void;
		/** [Method] Sets the value of highlightCfg
		* @param highlightCfg Object The new value.
		*/
		setHighlightCfg?( highlightCfg?:any ): void;
		/** [Method] Sets the value of highlightItem
		* @param highlightItem Object The new value.
		*/
		setHighlightItem?( highlightItem?:any ): void;
		/** [Method] Sets the value of itemInstancing
		* @param itemInstancing Object The new value.
		*/
		setItemInstancing?( itemInstancing?:any ): void;
		/** [Method] Sets the value of label
		* @param label Object The new value.
		* @returns Object/String The attributes that have been changed or added, or the text for the label. Example to enclose every other label in parentheses: renderer: function (text) { if (index % 2 == 0) { return '(' + text + ')' } } Default value: null.
		*/
		setLabel?( label?:any ): any;
		/** [Method] Sets the value of labelField
		* @param labelField String/String[] The new value.
		*/
		setLabelField?( labelField?:any ): void;
		/** [Method] Sets the value of labelOverflowPadding
		* @param labelOverflowPadding Number The new value.
		*/
		setLabelOverflowPadding?( labelOverflowPadding?:number ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of marker
		* @param marker Object The new value.
		*/
		setMarker?( marker?:any ): void;
		/** [Method] Sets the value of markerSubStyle
		* @param markerSubStyle Object The new value.
		*/
		setMarkerSubStyle?( markerSubStyle?:any ): void;
		/** [Method] Sets the value of overlaySurface
		* @param overlaySurface Object The new value.
		*/
		setOverlaySurface?( overlaySurface?:any ): void;
		/** [Method] Sets the value of renderer
		* @param renderer Function The new value.
		* @returns Object The attributes that have been changed or added. Note: it is usually possible to add or modify the attributes directly into the config parameter and not return anything, but returning an object with only those attributes that have been changed may allow for optimizations in the rendering of some series. Example to draw every other item in red: renderer: function (sprite, config, rendererData, index) { if (index % 2 == 0) { return { strokeStyle: 'red' }; } }
		*/
		setRenderer?( renderer?:any ): any;
		/** [Method] Sets the value of showInLegend
		* @param showInLegend Boolean The new value.
		*/
		setShowInLegend?( showInLegend?:boolean ): void;
		/** [Method] Sets the value of store
		* @param store Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of style
		* @param style Object The new value.
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of subStyle
		* @param subStyle Object The new value.
		*/
		setSubStyle?( subStyle?:any ): void;
		/** [Method] Sets the value of surface
		* @param surface Object The new value.
		*/
		setSurface?( surface?:any ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IAggregative extends Ext.chart.series.sprite.ICartesian {
		/** [Config Option] (Object) */
		dataClose?: any;
		/** [Config Option] (Object) */
		dataHigh?: any;
		/** [Config Option] (Object) */
		dataLow?: any;
		/** [Config Option] (Object) */
		dataOpen?: any;
		/** [Method] Returns the value of aggregator
		* @returns Object
		*/
		getAggregator?(): any;
		/** [Method] Render the given visible clip range
		* @param surface Object
		* @param ctx Object
		* @param clip Object
		* @param region Object
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, region?:any ): void;
		/** [Method] Sets the value of aggregator
		* @param aggregator Object The new value.
		*/
		setAggregator?( aggregator?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IArea extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Method] Render the given visible clip range
		* @param surface Object
		* @param ctx Object
		* @param clip Object
		* @param clipRegion Object
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, clipRegion?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IBar extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Number) */
		inGroupGapWidth?: number;
		/** [Config Option] (Number) */
		maxBarWidth?: number;
		/** [Config Option] (Number) */
		minBarWidth?: number;
		/** [Config Option] (Number) */
		minGapWidth?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Get the nearest item index from point x y
		* @param x Object
		* @param y Object
		* @returns Number The index
		*/
		getIndexNearPoint?( x?:any, y?:any ): number;
		/** [Method] Render the given visible clip range
		* @param surface Object
		* @param ctx Object
		* @param clip Object
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface ICandleStick extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (String) */
		ohlcType?: string;
		/** [Config Option] (Number) */
		padding?: number;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface ICartesian extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Array) */
		Data?: any[];
		/** [Config Option] (Boolean) */
		If?: boolean;
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Method] Does a binary search of the data on the x axis using the given key
		* @param key String
		* @returns *
		*/
		binarySearch?( key?:string ): any;
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
		/** [Method] Returns the value of field
		* @returns String
		*/
		getField?(): string;
		/** [Method] Get the nearest item index from point x y
		* @param x Number
		* @param y Number
		* @returns Number The index
		*/
		getIndexNearPoint?( x?:number, y?:number ): number;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param region Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, region?:any ): any;
		/** [Method] Render the given visible clip range
		* @param surface Ext.draw.Surface
		* @param ctx Ext.draw.engine.Canvas/Ext.draw.engine.SvgContext
		* @param clip Array
		* @param region Arrary
		*/
		renderClipped?( surface?:Ext.draw.ISurface, ctx?:any, clip?:any[], region?:any[] ): void;
		/** [Method] Sets the value of field
		* @param field String The new value.
		*/
		setField?( field?:string ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface ILine extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Boolean) */
		fillArea?: boolean;
		/** [Config Option] (Boolean) */
		preciseStroke?: boolean;
		/** [Config Option] (Boolean) */
		smooth?: boolean;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IPie3DPart extends Ext.draw.sprite.IPath,Ext.chart.IMarkerHolder {
		/** [Config Option] (Object) */
		baseColor?: any;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		distortion?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (String) */
		part?: string;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Config Option] (Number) */
		thickness?: number;
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
		/** [Method] Update the path
		* @param path Object
		*/
		updatePath?( path?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IPieSlice extends Ext.draw.sprite.ISector,Ext.chart.IMarkerHolder {
		/** [Config Option] (Boolean) */
		doCallout?: boolean;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Boolean) */
		rotateLabels?: boolean;
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
		/** [Method] Returns the value of rendererIndex
		* @returns Number
		*/
		getRendererIndex?(): number;
		/** [Method] Render method
		* @param ctx Object
		* @param surface Object
		* @param clipRegion Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( ctx?:any, surface?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of rendererIndex
		* @param rendererIndex Number The new value.
		*/
		setRendererIndex?( rendererIndex?:number ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IPolar extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Array) */
		Data?: any[];
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method]
		* @param name String
		* @param marker Ext.chart.Markers
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;
		/** [Method] Returns the value of field
		* @returns Object
		*/
		getField?(): any;
		/** [Method] Sets the value of field
		* @param field Object The new value.
		*/
		setField?( field?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IRadar extends Ext.chart.series.sprite.IPolar {
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any ): any;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IScatter extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Render the given visible clip range
		* @param surface Object
		* @param ctx Object
		* @param clip Object
		* @param clipRegion Object
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, clipRegion?:any ): void;
	}
}
declare namespace Ext.chart.series.sprite {
	export interface IStackedCartesian extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Get the nearest item index from point x y
		* @param x Object
		* @param y Object
		* @returns Number The index
		*/
		getIndexNearPoint?( x?:any, y?:any ): number;
	}
}
declare namespace Ext.chart.series {
	export interface IStackedCartesian extends Ext.chart.series.ICartesian {
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Boolean) */
		stacked?: boolean;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any
		* @param x Object
		* @param y Object
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following:
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of stacked
		* @returns Boolean
		*/
		getStacked?(): boolean;
		/** [Method] Provide legend information to target array
		* @param target Object
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Array The new value.
		*/
		setHidden?( hidden?:any[] ): void;
		/** [Method] Sets the value of stacked
		* @param stacked Boolean The new value.
		*/
		setStacked?( stacked?:boolean ): void;
	}
}
declare namespace Ext.chart {
	export interface ISpaceFillingChart extends Ext.chart.IAbstractChart {
		/** [Method] Redraw the chart  */
		redraw?(): void;
	}
}
declare namespace Ext {
	export interface IClass {
		/** [Config Option] (String[]) */
		alias?: string[];
		/** [Config Option] (String/String[]) */
		alternateClassName?: any;
		/** [Config Option] (Object) */
		config?: any;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (Object) */
		inheritableStatics?: any;
		/** [Config Option] (Object) */
		mixins?: any;
		/** [Config Option] (Object) */
		platformConfig?: any;
		/** [Config Option] (Boolean) */
		singleton?: boolean;
		/** [Config Option] (Object) */
		statics?: any;
		/** [Config Option] (String[]) */
		uses?: string[];
	}
}
declare namespace Ext {
	export interface IClassManager {
	}
	export class ClassManager {
		/** [Method] Adds a batch of class name to alias mappings
		* @param aliases Object The set of mappings of the form className : [values...]
		* @returns Ext.ClassManager this
		*/
		static addNameAliasMappings( aliases?:any ): Ext.IClassManager;
		/** [Method]
		* @param alternates Object The set of mappings of the form className : [values...]
		* @returns Ext.ClassManager this
		*/
		static addNameAlternateMappings( alternates?:any ): Ext.IClassManager;
		/** [Method] Retrieve a class by its name
		* @param name String
		* @returns Ext.Class class
		*/
		static get( name?:string ): Ext.IClass;
		/** [Method] Get the aliases of a class by the class name
		* @param name String
		* @returns Array aliases
		*/
		static getAliasesByName( name?:string ): any[];
		/** [Method] Get a reference to the class by its alias
		* @param alias String
		* @returns Ext.Class class
		*/
		static getByAlias( alias?:string ): Ext.IClass;
		/** [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define
		* @param object Object
		* @returns Ext.Class class
		*/
		static getClass( object?:any ): Ext.IClass;
		/** [Method] Get the name of the class by its reference or its instance usually invoked by the shorthand Ext getClassName Ext Cl
		* @param object Ext.Class/Object
		* @returns String className
		*/
		static getName( object?:any ): string;
		/** [Method] Get the name of a class by its alias
		* @param alias String
		* @returns String className
		*/
		static getNameByAlias( alias?:string ): string;
		/** [Method] Get the name of a class by its alternate name
		* @param alternate String
		* @returns String className
		*/
		static getNameByAlternate( alternate?:string ): string;
		/** [Method] Converts a string expression to an array of matching class names
		* @param expression String
		* @returns Array classNames
		*/
		static getNamesByExpression( expression?:string ): any[];
		/** [Method] Instantiate a class by either full name alias or alternate name usually invoked by the convenient shorthand Ext cre
		* @param name String
		* @param args Mixed Additional arguments after the name will be passed to the class' constructor.
		* @returns Object instance
		*/
		static instantiate( name?:string, args?:any ): any;
		/** [Method] Instantiate a class by its alias usually invoked by the convenient shorthand Ext createByAlias If Ext Loader is enab
		* @param alias String
		* @param args Mixed... Additional arguments after the alias will be passed to the class constructor.
		* @returns Object instance
		*/
		static instantiateByAlias( alias:string, ...args:any[] ): any;
		/** [Method] Checks if a class has already been created
		* @param className String
		* @returns Boolean exist
		*/
		static isCreated( className?:string ): boolean;
		/** [Method] Sets a name reference to a class
		* @param name String
		* @param value Object
		* @returns Ext.ClassManager this
		*/
		static set( name?:string, value?:any ): Ext.IClassManager;
		/** [Method] Register the alias for a class
		* @param cls Ext.Class/String a reference to a class or a className.
		* @param alias String Alias to use when referring to this class.
		* @returns Ext.ClassManager this
		*/
		static setAlias( cls?:any, alias?:string ): Ext.IClassManager;
		/** [Method] Creates a namespace and assign the value to the created object
		* @param name String
		* @param value Mixed
		*/
		static setNamespace( name?:string, value?:any ): void;
	}
}
declare namespace Ext {
	export interface IComponent extends Ext.IAbstractComponent,Ext.mixin.ITraversable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		border?: any;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (Boolean) */
		centered?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Ext.Element/HTMLElement/String) */
		contentEl?: any;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (String) */
		dock?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (String/Mixed) */
		enterAnimation?: any;
		/** [Config Option] (String/Mixed) */
		exitAnimation?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (String) */
		floatingCls?: string;
		/** [Config Option] (Boolean) */
		fullscreen?: boolean;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hiddenCls?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: boolean;
		/** [Config Option] (String/Ext.Element/HTMLElement) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		layoutOnOrientationChange?: boolean;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (Number/String) */
		maxHeight?: any;
		/** [Config Option] (Number/String) */
		maxWidth?: any;
		/** [Config Option] (Number/String) */
		minHeight?: any;
		/** [Config Option] (Number/String) */
		minWidth?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (Boolean) */
		monitorOrientation?: boolean;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object/Array) */
		plugins?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Ext.Element) */
		renderTo?: Ext.IElement;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stopMaskTapEvent?: boolean;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (String) */
		styleHtmlCls?: string;
		/** [Config Option] (Boolean) */
		styleHtmlContent?: boolean;
		/** [Config Option] (Number/String) */
		top?: any;
		/** [Config Option] (String/String[]/Ext.Template/Ext.XTemplate[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Config Option] (String[]) */
		xtype?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Adds a CSS class or classes to this Component s rendered element
		* @param cls String The CSS class to add.
		* @param prefix String Optional prefix to add to each class.
		* @param suffix String Optional suffix to add to each class.
		*/
		addCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Disables this Component */
		disable?(): void;
		/** [Method] Enables this Component */
		enable?(): void;
		/** [Method] Prepares information on aligning this to component using alignment
		* @param component Object
		* @param alignment Object
		*/
		getAlignmentInfo?( component?:any, alignment?:any ): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of border
		* @returns Number/String
		*/
		getBorder?(): any;
		/** [Method] Returns the value of bottom
		* @returns any
		*/
		getBottom?(): any;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		getCentered?(): boolean;
		/** [Method] Returns the value of cls
		* @returns any
		*/
		getCls?(): any;
		/** [Method] Returns the value of contentEl
		* @returns Ext.Element/HTMLElement/String
		*/
		getContentEl?(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		getDisabled?(): boolean;
		/** [Method] Returns the value of disabledCls
		* @returns String
		*/
		getDisabledCls?(): string;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		getDocked?(): string;
		/** [Method] Retrieves the top level element representing this component
		* @returns Ext.dom.Element
		*/
		getEl?(): Ext.dom.IElement;
		/** [Method] Returns the value of enterAnimation
		* @returns String/Mixed
		*/
		getEnterAnimation?(): any;
		/** [Method] Returns the value of exitAnimation
		* @returns String/Mixed
		*/
		getExitAnimation?(): any;
		/** [Method] Returns the value of flex
		* @returns Number
		*/
		getFlex?(): number;
		/** [Method] Returns the value of floatingCls
		* @returns String
		*/
		getFloatingCls?(): string;
		/** [Method] Returns the value of height
		* @returns Number/String
		*/
		getHeight?(): any;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		getHidden?(): boolean;
		/** [Method] Returns the value of hiddenCls
		* @returns String
		*/
		getHiddenCls?(): string;
		/** [Method] Returns the value of hideAnimation
		* @returns String/Mixed
		*/
		getHideAnimation?(): any;
		/** [Method] Returns the value of html
		* @returns String/Ext.Element/HTMLElement
		*/
		getHtml?(): any;
		/** [Method] Returns the value of itemId
		* @returns String
		*/
		getItemId?(): string;
		/** [Method] Returns the value of left
		* @returns Number/String
		*/
		getLeft?(): any;
		/** [Method] Returns the value of margin
		* @returns Number/String
		*/
		getMargin?(): any;
		/** [Method] Returns the value of maxHeight
		* @returns Number/String
		*/
		getMaxHeight?(): any;
		/** [Method] Returns the value of maxWidth
		* @returns Number/String
		*/
		getMaxWidth?(): any;
		/** [Method] Returns the value of minHeight
		* @returns Number/String
		*/
		getMinHeight?(): any;
		/** [Method] Returns the value of minWidth
		* @returns Number/String
		*/
		getMinWidth?(): any;
		/** [Method] Returns the value of padding
		* @returns Number/String
		*/
		getPadding?(): any;
		/** [Method] Returns the parent of this component if it has one
		* @returns Ext.Component The parent of this component.
		*/
		getParent?(): Ext.IComponent;
		/** [Method] Returns the value of plugins
		* @returns Object/Array
		*/
		getPlugins?(): any;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo
		* @returns Ext.Element
		*/
		getRenderTo?(): Ext.IElement;
		/** [Method] Returns the value of right
		* @returns Number/String
		*/
		getRight?(): any;
		/** [Method] Returns the value of showAnimation
		* @returns String/Mixed
		*/
		getShowAnimation?(): any;
		/** [Method] Returns the height and width of the Component
		* @returns Object The current height and width of the Component.
		*/
		getSize?(): any;
		/** [Method] Returns the value of style
		* @returns String/Object
		*/
		getStyle?(): any;
		/** [Method] Returns the value of styleHtmlCls
		* @returns String
		*/
		getStyleHtmlCls?(): string;
		/** [Method] Returns the value of styleHtmlContent
		* @returns Boolean
		*/
		getStyleHtmlContent?(): boolean;
		/** [Method] Returns the value of top
		* @returns Number/String
		*/
		getTop?(): any;
		/** [Method] Returns the value of tpl
		* @returns String/String[]/Ext.Template/Ext.XTemplate[]
		*/
		getTpl?(): any;
		/** [Method] Returns the value of tplWriteMode
		* @returns String
		*/
		getTplWriteMode?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of width
		* @returns Number/String
		*/
		getWidth?(): any;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string
		* @returns String The xtype hierarchy string.
		*/
		getXTypes?(): string;
		/** [Method] Returns the value of zIndex
		* @returns Number
		*/
		getZIndex?(): number;
		/** [Method] Returns true if this component has a parent
		* @returns Boolean true if this component has a parent.
		*/
		hasParent?(): boolean;
		/** [Method] Hides this Component optionally using an animation
		* @param animation Object/Boolean You can specify an animation here or a bool to use the hideAnimation config.
		* @returns Ext.Component
		*/
		hide?( animation?:any ): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if this Component is currently disabled
		* @returns Boolean true if currently disabled.
		*/
		isDisabled?(): boolean;
		/** [Method] Returns true if this Component is currently hidden
		* @returns Boolean true if currently hidden.
		*/
		isHidden?(): boolean;
		/** [Method] Tests whether or not this Component is of a specific xtype
		* @param xtype String The xtype to check for this Component.
		* @param shallow Boolean false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype.
		* @returns Boolean true if this component descends from the specified xtype, false otherwise.
		*/
		isXType?( xtype?:string, shallow?:boolean ): boolean;
		/** [Method] Removes the given CSS class es from this Component s rendered element
		* @param cls String The class(es) to remove.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		removeCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Replaces specified classes with the newly specified classes
		* @param oldCls String The class(es) to remove.
		* @param newCls String The class(es) to add.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		replaceCls?( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		resetFloating?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of border
		* @param border Number/String The new value.
		*/
		setBorder?( border?:any ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number/String The new value.
		*/
		setBottom?( bottom?:any ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		setCentered?( centered?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String/String[] The new value.
		*/
		setCls?( cls?:any ): void;
		/** [Method] Sets the value of contentEl
		* @param contentEl Ext.Element/HTMLElement/String The new value.
		*/
		setContentEl?( contentEl?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		setDisabled?( disabled?:boolean ): void;
		/** [Method] Sets the value of disabledCls
		* @param disabledCls String The new value.
		*/
		setDisabledCls?( disabledCls?:string ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of draggable
		* @param draggable Object The new value.
		*/
		setDraggable?( draggable?:any ): void;
		/** [Method] Sets the value of enterAnimation
		* @param enterAnimation String/Mixed The new value.
		*/
		setEnterAnimation?( enterAnimation?:any ): void;
		/** [Method] Sets the value of exitAnimation
		* @param exitAnimation String/Mixed The new value.
		*/
		setExitAnimation?( exitAnimation?:any ): void;
		/** [Method] Sets the value of flex
		* @param flex Number The new value.
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Used to update the floating state of this component
		* @param floating Boolean true if you want to float this component.
		*/
		setFloating?( floating?:boolean ): void;
		/** [Method] Sets the value of floatingCls
		* @param floatingCls String The new value.
		*/
		setFloatingCls?( floatingCls?:string ): void;
		/** [Method] Sets the value of height
		* @param height Number/String The new value.
		*/
		setHeight?( height?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		setHidden?( hidden?:boolean ): void;
		/** [Method] Sets the value of hiddenCls
		* @param hiddenCls String The new value.
		*/
		setHiddenCls?( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation String/Mixed The new value.
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets the value of html
		* @param html String/Ext.Element/HTMLElement The new value.
		*/
		setHtml?( html?:any ): void;
		/** [Method] Sets the value of itemId
		* @param itemId String The new value.
		*/
		setItemId?( itemId?:string ): void;
		/** [Method] Sets the value of left
		* @param left Number/String The new value.
		*/
		setLeft?( left?:any ): void;
		/** [Method] Sets the value of margin
		* @param margin Number/String The new value.
		*/
		setMargin?( margin?:any ): void;
		/** [Method] Sets the value of maxHeight
		* @param maxHeight Number/String The new value.
		*/
		setMaxHeight?( maxHeight?:any ): void;
		/** [Method] Sets the value of maxWidth
		* @param maxWidth Number/String The new value.
		*/
		setMaxWidth?( maxWidth?:any ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight Number/String The new value.
		*/
		setMinHeight?( minHeight?:any ): void;
		/** [Method] Sets the value of minWidth
		* @param minWidth Number/String The new value.
		*/
		setMinWidth?( minWidth?:any ): void;
		/** [Method] Sets the value of padding
		* @param padding Number/String The new value.
		*/
		setPadding?( padding?:any ): void;
		/** [Method] Sets the value of plugins
		* @param plugins Object/Array The new value.
		*/
		setPlugins?( plugins?:any ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo
		* @param renderTo Ext.Element The new value.
		*/
		setRenderTo?( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right
		* @param right Number/String The new value.
		*/
		setRight?( right?:any ): void;
		/** [Method] This method has moved to Ext Container  */
		setScrollable?(): void;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation String/Mixed The new value.
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the size of the Component
		* @param width Number The new width for the Component.
		* @param height Number The new height for the Component.
		*/
		setSize?( width?:number, height?:number ): void;
		/** [Method] Sets the value of style
		* @param style String/Object The new value.
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls
		* @param styleHtmlCls String The new value.
		*/
		setStyleHtmlCls?( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent
		* @param styleHtmlContent Boolean The new value.
		*/
		setStyleHtmlContent?( styleHtmlContent?:boolean ): void;
		/** [Method] Sets the value of top
		* @param top Number/String The new value.
		*/
		setTop?( top?:any ): void;
		/** [Method] Sets the value of tpl
		* @param tpl String/String[]/Ext.Template/Ext.XTemplate[] The new value.
		*/
		setTpl?( tpl?:any ): void;
		/** [Method] Sets the value of tplWriteMode
		* @param tplWriteMode String The new value.
		*/
		setTplWriteMode?( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of width
		* @param width Number/String The new value.
		*/
		setWidth?( width?:any ): void;
		/** [Method] Sets the value of zIndex
		* @param zIndex Number The new value.
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Shows this component optionally using an animation
		* @param animation Object/Boolean You can specify an animation here or a bool to use the showAnimation config.
		* @returns Ext.Component
		*/
		show?( animation?:any ): Ext.IComponent;
		/** [Method] Shows this component by another component
		* @param component Ext.Component The target component to show this component by.
		* @param alignment String The specific alignment.
		*/
		showBy?( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector
		* @param selector String The simple selector to test.
		* @returns Ext.Container The matching ancestor Container (or undefined if no match was found).
		*/
		up?( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		update?(): void;
		/** [Method] Updates the styleHtmlCls configuration
		* @param newHtmlCls Object
		* @param oldHtmlCls Object
		*/
		updateStyleHtmlCls?( newHtmlCls?:any, oldHtmlCls?:any ): void;
	}
}
declare namespace Ext.lib {
	export interface IComponent extends Ext.IAbstractComponent,Ext.mixin.ITraversable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		border?: any;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (Boolean) */
		centered?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Ext.Element/HTMLElement/String) */
		contentEl?: any;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (String) */
		dock?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (String/Mixed) */
		enterAnimation?: any;
		/** [Config Option] (String/Mixed) */
		exitAnimation?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (String) */
		floatingCls?: string;
		/** [Config Option] (Boolean) */
		fullscreen?: boolean;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hiddenCls?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: boolean;
		/** [Config Option] (String/Ext.Element/HTMLElement) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		layoutOnOrientationChange?: boolean;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (Number/String) */
		maxHeight?: any;
		/** [Config Option] (Number/String) */
		maxWidth?: any;
		/** [Config Option] (Number/String) */
		minHeight?: any;
		/** [Config Option] (Number/String) */
		minWidth?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (Boolean) */
		monitorOrientation?: boolean;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object/Array) */
		plugins?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Ext.Element) */
		renderTo?: Ext.IElement;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stopMaskTapEvent?: boolean;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (String) */
		styleHtmlCls?: string;
		/** [Config Option] (Boolean) */
		styleHtmlContent?: boolean;
		/** [Config Option] (Number/String) */
		top?: any;
		/** [Config Option] (String/String[]/Ext.Template/Ext.XTemplate[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Config Option] (String[]) */
		xtype?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Adds a CSS class or classes to this Component s rendered element
		* @param cls String The CSS class to add.
		* @param prefix String Optional prefix to add to each class.
		* @param suffix String Optional suffix to add to each class.
		*/
		addCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Disables this Component */
		disable?(): void;
		/** [Method] Enables this Component */
		enable?(): void;
		/** [Method] Prepares information on aligning this to component using alignment
		* @param component Object
		* @param alignment Object
		*/
		getAlignmentInfo?( component?:any, alignment?:any ): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of border
		* @returns Number/String
		*/
		getBorder?(): any;
		/** [Method] Returns the value of bottom
		* @returns any
		*/
		getBottom?(): any;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		getCentered?(): boolean;
		/** [Method] Returns the value of cls
		* @returns any
		*/
		getCls?(): any;
		/** [Method] Returns the value of contentEl
		* @returns Ext.Element/HTMLElement/String
		*/
		getContentEl?(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		getDisabled?(): boolean;
		/** [Method] Returns the value of disabledCls
		* @returns String
		*/
		getDisabledCls?(): string;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		getDocked?(): string;
		/** [Method] Retrieves the top level element representing this component
		* @returns Ext.dom.Element
		*/
		getEl?(): Ext.dom.IElement;
		/** [Method] Returns the value of enterAnimation
		* @returns String/Mixed
		*/
		getEnterAnimation?(): any;
		/** [Method] Returns the value of exitAnimation
		* @returns String/Mixed
		*/
		getExitAnimation?(): any;
		/** [Method] Returns the value of flex
		* @returns Number
		*/
		getFlex?(): number;
		/** [Method] Returns the value of floatingCls
		* @returns String
		*/
		getFloatingCls?(): string;
		/** [Method] Returns the value of height
		* @returns Number/String
		*/
		getHeight?(): any;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		getHidden?(): boolean;
		/** [Method] Returns the value of hiddenCls
		* @returns String
		*/
		getHiddenCls?(): string;
		/** [Method] Returns the value of hideAnimation
		* @returns String/Mixed
		*/
		getHideAnimation?(): any;
		/** [Method] Returns the value of html
		* @returns String/Ext.Element/HTMLElement
		*/
		getHtml?(): any;
		/** [Method] Returns the value of itemId
		* @returns String
		*/
		getItemId?(): string;
		/** [Method] Returns the value of left
		* @returns Number/String
		*/
		getLeft?(): any;
		/** [Method] Returns the value of margin
		* @returns Number/String
		*/
		getMargin?(): any;
		/** [Method] Returns the value of maxHeight
		* @returns Number/String
		*/
		getMaxHeight?(): any;
		/** [Method] Returns the value of maxWidth
		* @returns Number/String
		*/
		getMaxWidth?(): any;
		/** [Method] Returns the value of minHeight
		* @returns Number/String
		*/
		getMinHeight?(): any;
		/** [Method] Returns the value of minWidth
		* @returns Number/String
		*/
		getMinWidth?(): any;
		/** [Method] Returns the value of padding
		* @returns Number/String
		*/
		getPadding?(): any;
		/** [Method] Returns the parent of this component if it has one
		* @returns Ext.Component The parent of this component.
		*/
		getParent?(): Ext.IComponent;
		/** [Method] Returns the value of plugins
		* @returns Object/Array
		*/
		getPlugins?(): any;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo
		* @returns Ext.Element
		*/
		getRenderTo?(): Ext.IElement;
		/** [Method] Returns the value of right
		* @returns Number/String
		*/
		getRight?(): any;
		/** [Method] Returns the value of showAnimation
		* @returns String/Mixed
		*/
		getShowAnimation?(): any;
		/** [Method] Returns the height and width of the Component
		* @returns Object The current height and width of the Component.
		*/
		getSize?(): any;
		/** [Method] Returns the value of style
		* @returns String/Object
		*/
		getStyle?(): any;
		/** [Method] Returns the value of styleHtmlCls
		* @returns String
		*/
		getStyleHtmlCls?(): string;
		/** [Method] Returns the value of styleHtmlContent
		* @returns Boolean
		*/
		getStyleHtmlContent?(): boolean;
		/** [Method] Returns the value of top
		* @returns Number/String
		*/
		getTop?(): any;
		/** [Method] Returns the value of tpl
		* @returns String/String[]/Ext.Template/Ext.XTemplate[]
		*/
		getTpl?(): any;
		/** [Method] Returns the value of tplWriteMode
		* @returns String
		*/
		getTplWriteMode?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of width
		* @returns Number/String
		*/
		getWidth?(): any;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string
		* @returns String The xtype hierarchy string.
		*/
		getXTypes?(): string;
		/** [Method] Returns the value of zIndex
		* @returns Number
		*/
		getZIndex?(): number;
		/** [Method] Returns true if this component has a parent
		* @returns Boolean true if this component has a parent.
		*/
		hasParent?(): boolean;
		/** [Method] Hides this Component optionally using an animation
		* @param animation Object/Boolean You can specify an animation here or a bool to use the hideAnimation config.
		* @returns Ext.Component
		*/
		hide?( animation?:any ): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if this Component is currently disabled
		* @returns Boolean true if currently disabled.
		*/
		isDisabled?(): boolean;
		/** [Method] Returns true if this Component is currently hidden
		* @returns Boolean true if currently hidden.
		*/
		isHidden?(): boolean;
		/** [Method] Tests whether or not this Component is of a specific xtype
		* @param xtype String The xtype to check for this Component.
		* @param shallow Boolean false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype.
		* @returns Boolean true if this component descends from the specified xtype, false otherwise.
		*/
		isXType?( xtype?:string, shallow?:boolean ): boolean;
		/** [Method] Removes the given CSS class es from this Component s rendered element
		* @param cls String The class(es) to remove.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		removeCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Replaces specified classes with the newly specified classes
		* @param oldCls String The class(es) to remove.
		* @param newCls String The class(es) to add.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		replaceCls?( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		resetFloating?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of border
		* @param border Number/String The new value.
		*/
		setBorder?( border?:any ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number/String The new value.
		*/
		setBottom?( bottom?:any ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		setCentered?( centered?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String/String[] The new value.
		*/
		setCls?( cls?:any ): void;
		/** [Method] Sets the value of contentEl
		* @param contentEl Ext.Element/HTMLElement/String The new value.
		*/
		setContentEl?( contentEl?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		setDisabled?( disabled?:boolean ): void;
		/** [Method] Sets the value of disabledCls
		* @param disabledCls String The new value.
		*/
		setDisabledCls?( disabledCls?:string ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of draggable
		* @param draggable Object The new value.
		*/
		setDraggable?( draggable?:any ): void;
		/** [Method] Sets the value of enterAnimation
		* @param enterAnimation String/Mixed The new value.
		*/
		setEnterAnimation?( enterAnimation?:any ): void;
		/** [Method] Sets the value of exitAnimation
		* @param exitAnimation String/Mixed The new value.
		*/
		setExitAnimation?( exitAnimation?:any ): void;
		/** [Method] Sets the value of flex
		* @param flex Number The new value.
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Used to update the floating state of this component
		* @param floating Boolean true if you want to float this component.
		*/
		setFloating?( floating?:boolean ): void;
		/** [Method] Sets the value of floatingCls
		* @param floatingCls String The new value.
		*/
		setFloatingCls?( floatingCls?:string ): void;
		/** [Method] Sets the value of height
		* @param height Number/String The new value.
		*/
		setHeight?( height?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		setHidden?( hidden?:boolean ): void;
		/** [Method] Sets the value of hiddenCls
		* @param hiddenCls String The new value.
		*/
		setHiddenCls?( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation String/Mixed The new value.
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets the value of html
		* @param html String/Ext.Element/HTMLElement The new value.
		*/
		setHtml?( html?:any ): void;
		/** [Method] Sets the value of itemId
		* @param itemId String The new value.
		*/
		setItemId?( itemId?:string ): void;
		/** [Method] Sets the value of left
		* @param left Number/String The new value.
		*/
		setLeft?( left?:any ): void;
		/** [Method] Sets the value of margin
		* @param margin Number/String The new value.
		*/
		setMargin?( margin?:any ): void;
		/** [Method] Sets the value of maxHeight
		* @param maxHeight Number/String The new value.
		*/
		setMaxHeight?( maxHeight?:any ): void;
		/** [Method] Sets the value of maxWidth
		* @param maxWidth Number/String The new value.
		*/
		setMaxWidth?( maxWidth?:any ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight Number/String The new value.
		*/
		setMinHeight?( minHeight?:any ): void;
		/** [Method] Sets the value of minWidth
		* @param minWidth Number/String The new value.
		*/
		setMinWidth?( minWidth?:any ): void;
		/** [Method] Sets the value of padding
		* @param padding Number/String The new value.
		*/
		setPadding?( padding?:any ): void;
		/** [Method] Sets the value of plugins
		* @param plugins Object/Array The new value.
		*/
		setPlugins?( plugins?:any ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo
		* @param renderTo Ext.Element The new value.
		*/
		setRenderTo?( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right
		* @param right Number/String The new value.
		*/
		setRight?( right?:any ): void;
		/** [Method] This method has moved to Ext Container  */
		setScrollable?(): void;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation String/Mixed The new value.
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the size of the Component
		* @param width Number The new width for the Component.
		* @param height Number The new height for the Component.
		*/
		setSize?( width?:number, height?:number ): void;
		/** [Method] Sets the value of style
		* @param style String/Object The new value.
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls
		* @param styleHtmlCls String The new value.
		*/
		setStyleHtmlCls?( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent
		* @param styleHtmlContent Boolean The new value.
		*/
		setStyleHtmlContent?( styleHtmlContent?:boolean ): void;
		/** [Method] Sets the value of top
		* @param top Number/String The new value.
		*/
		setTop?( top?:any ): void;
		/** [Method] Sets the value of tpl
		* @param tpl String/String[]/Ext.Template/Ext.XTemplate[] The new value.
		*/
		setTpl?( tpl?:any ): void;
		/** [Method] Sets the value of tplWriteMode
		* @param tplWriteMode String The new value.
		*/
		setTplWriteMode?( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of width
		* @param width Number/String The new value.
		*/
		setWidth?( width?:any ): void;
		/** [Method] Sets the value of zIndex
		* @param zIndex Number The new value.
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Shows this component optionally using an animation
		* @param animation Object/Boolean You can specify an animation here or a bool to use the showAnimation config.
		* @returns Ext.Component
		*/
		show?( animation?:any ): Ext.IComponent;
		/** [Method] Shows this component by another component
		* @param component Ext.Component The target component to show this component by.
		* @param alignment String The specific alignment.
		*/
		showBy?( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector
		* @param selector String The simple selector to test.
		* @returns Ext.Container The matching ancestor Container (or undefined if no match was found).
		*/
		up?( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		update?(): void;
		/** [Method] Updates the styleHtmlCls configuration
		* @param newHtmlCls Object
		* @param oldHtmlCls Object
		*/
		updateStyleHtmlCls?( newHtmlCls?:any, oldHtmlCls?:any ): void;
	}
}
declare namespace Ext {
	export interface IComponentManager extends Ext.IBase {
	}
	export class ComponentManager {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in
		* @param component Object A configuration object for the Component you wish to create.
		* @param defaultType Function The constructor to provide the default Component type if the config object does not contain a xtype. (Optional if the config contains an xtype).
		* @returns Ext.Component The newly instantiated Component.
		*/
		static create( component?:any, defaultType?:any ): Ext.IComponent;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, or undefined if not found.
		*/
		static get( id?:string ): any;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Checks if an item type is registered
		* @param component String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		static isRegistered( component?:string ): boolean;
		/** [Method] Registers an item to be managed
		* @param component Object The item to register.
		*/
		static register( component?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters an item by removing it from this manager
		* @param component Object The item to unregister.
		*/
		static unregister( component?:any ): void;
	}
}
declare namespace Ext {
	export interface IComponentMgr extends Ext.IBase {
	}
	export class ComponentMgr {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in
		* @param component Object A configuration object for the Component you wish to create.
		* @param defaultType Function The constructor to provide the default Component type if the config object does not contain a xtype. (Optional if the config contains an xtype).
		* @returns Ext.Component The newly instantiated Component.
		*/
		static create( component?:any, defaultType?:any ): Ext.IComponent;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, or undefined if not found.
		*/
		static get( id?:string ): any;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Checks if an item type is registered
		* @param component String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		static isRegistered( component?:string ): boolean;
		/** [Method] Registers an item to be managed
		* @param component Object The item to register.
		*/
		static register( component?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters an item by removing it from this manager
		* @param component Object The item to unregister.
		*/
		static unregister( component?:any ): void;
	}
}
declare namespace Ext {
	export interface IComponentQuery {
	}
	export class ComponentQuery {
		/** [Method] Tests whether the passed Component matches the selector string
		* @param component Ext.Component The Component to test.
		* @param selector String The selector string to test against.
		* @returns Boolean true if the Component matches the selector.
		*/
		static is( component?:Ext.IComponent, selector?:string ): boolean;
		/** [Method] Returns an array of matched Components from within the passed root object
		* @param selector String The selector string to filter returned Components
		* @param root Ext.Container The Container within which to perform the query. If omitted, all Components within the document are included in the search. This parameter may also be an array of Components to filter according to the selector.
		* @returns Ext.Component[] The matched Components.
		*/
		static query( selector?:string, root?:Ext.IContainer ): Ext.IComponent[];
	}
}
declare namespace Ext {
	export interface IContainer extends Ext.IComponent {
		/** [Config Option] (Object/String/Number) */
		activeItem?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: boolean;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean/Object/Ext.Mask/Ext.LoadMask) */
		masked?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Method] Adds one or more Components to this Container
		* @param newItems Object/Object[]/Ext.Component/Ext.Component[] The new items to add to the Container.
		* @returns Ext.Component The last item added to the Container from the newItems array.
		*/
		add?( newItems?:any ): Ext.IComponent;
		/** [Method] Adds an array of Components to this Container
		* @param items Array The array of items to add to this container.
		* @returns Array The array of items after they have been added.
		*/
		addAll?( items?:any[] ): any[];
		/** [Method] Animates to the supplied activeItem with a specified animation
		* @param activeItem Object/Number The item or item index to make active.
		* @param animation Object/Ext.fx.layout.Card Card animation configuration or instance.
		*/
		animateActiveItem?( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask
		* @returns Object
		*/
		applyMasked?( masked?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		child?( selector?:string ): Ext.IComponent;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		down?( selector?:string ): Ext.IComponent;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		getActiveItem?(): any;
		/** [Method] Returns the Component for a given index in the Container s items
		* @param index Number The index of the Component to return.
		* @returns Ext.Component The item at the specified index, if found.
		*/
		getAt?( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy
		* @returns Boolean
		*/
		getAutoDestroy?(): boolean;
		/** [Method] Examines this container s items property and gets a direct child component of this container
		* @param component String/Number This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get.
		* @returns Ext.Component The component (if found).
		*/
		getComponent?( component?:any ): Ext.IComponent;
		/** [Method] Returns the value of control
		* @returns Object
		*/
		getControl?(): any;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		getDefaults?(): any;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems
		* @param component String/Number The id or index of the component to find.
		* @returns Ext.Component/Boolean The docked component, if found.
		*/
		getDockedComponent?( component?:any ): any;
		/** [Method] Returns all the Ext Component docked items in this container
		* @returns Array The docked items of this container.
		*/
		getDockedItems?(): any[];
		/** [Method] Returns the value of hideOnMaskTap
		* @returns Boolean
		*/
		getHideOnMaskTap?(): boolean;
		/** [Method] Returns all inner items of this container
		* @returns Array The inner items of this container.
		*/
		getInnerItems?(): any[];
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		getItems?(): any;
		/** [Method] Returns the value of masked
		* @returns Boolean/Object/Ext.Mask/Ext.LoadMask
		*/
		getMasked?(): any;
		/** [Method] Returns the value of modal
		* @returns Boolean
		*/
		getModal?(): boolean;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class
		* @returns Ext.scroll.View The scroll view.
		*/
		getScrollable?(): Ext.scroll.IView;
		/** [Method] Hides this Component optionally using an animation
		* @returns Ext.Component
		*/
		hide?(): Ext.IComponent;
		/** [Method] Adds a child Component at the given index
		* @param index Number The index to insert the Component at.
		* @param item Object The Component to insert.
		*/
		insert?( index?:number, item?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask
		* @param mask Object
		*/
		mask?( mask?:any ): void;
		/** [Method] Retrieves all descendant components which match the passed selector
		* @param selector String Selector complying to an Ext.ComponentQuery selector.
		* @returns Array Ext.Component's which matched the selector.
		*/
		query?( selector?:string ): any[];
		/** [Method] Removes an item from this Container optionally destroying it
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		remove?( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes all items currently in the Container optionally destroying them all
		* @param destroy Boolean If true, destroys each removed Component.
		* @param everything Boolean If true, completely remove all items including docked / centered and floating items.
		* @returns Ext.Component this
		*/
		removeAll?( destroy?:boolean, everything?:boolean ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		removeAt?( index?:number ): Ext.IContainer;
		/** [Method] Removes a docked item from this Container
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		removeDocked?( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		removeInnerAt?( index?:number ): Ext.IContainer;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		setActiveItem?( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy
		* @param autoDestroy Boolean The new value.
		*/
		setAutoDestroy?( autoDestroy?:boolean ): void;
		/** [Method] Sets the value of control
		* @param control Object The new value.
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap
		* @param hideOnMaskTap Boolean The new value.
		*/
		setHideOnMaskTap?( hideOnMaskTap?:boolean ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object/String The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of masked
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask The new value.
		*/
		setMasked?( masked?:any ): void;
		/** [Method] Sets the value of modal
		* @param modal Boolean The new value.
		*/
		setModal?( modal?:boolean ): void;
		/** [Method] Sets the value of scrollable
		* @param scrollable Boolean/String/Object The new value.
		* @returns Ext.scroll.View The scroll view.
		*/
		setScrollable?( scrollable?:any ): Ext.scroll.IView;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		show?(): Ext.IComponent;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		unmask?(): void;
	}
}
declare namespace Ext.lib {
	export interface IContainer extends Ext.IComponent {
		/** [Config Option] (Object/String/Number) */
		activeItem?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: boolean;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean/Object/Ext.Mask/Ext.LoadMask) */
		masked?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Method] Adds one or more Components to this Container
		* @param newItems Object/Object[]/Ext.Component/Ext.Component[] The new items to add to the Container.
		* @returns Ext.Component The last item added to the Container from the newItems array.
		*/
		add?( newItems?:any ): Ext.IComponent;
		/** [Method] Adds an array of Components to this Container
		* @param items Array The array of items to add to this container.
		* @returns Array The array of items after they have been added.
		*/
		addAll?( items?:any[] ): any[];
		/** [Method] Animates to the supplied activeItem with a specified animation
		* @param activeItem Object/Number The item or item index to make active.
		* @param animation Object/Ext.fx.layout.Card Card animation configuration or instance.
		*/
		animateActiveItem?( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask
		* @returns Object
		*/
		applyMasked?( masked?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		child?( selector?:string ): Ext.IComponent;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		down?( selector?:string ): Ext.IComponent;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		getActiveItem?(): any;
		/** [Method] Returns the Component for a given index in the Container s items
		* @param index Number The index of the Component to return.
		* @returns Ext.Component The item at the specified index, if found.
		*/
		getAt?( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy
		* @returns Boolean
		*/
		getAutoDestroy?(): boolean;
		/** [Method] Examines this container s items property and gets a direct child component of this container
		* @param component String/Number This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get.
		* @returns Ext.Component The component (if found).
		*/
		getComponent?( component?:any ): Ext.IComponent;
		/** [Method] Returns the value of control
		* @returns Object
		*/
		getControl?(): any;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		getDefaults?(): any;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems
		* @param component String/Number The id or index of the component to find.
		* @returns Ext.Component/Boolean The docked component, if found.
		*/
		getDockedComponent?( component?:any ): any;
		/** [Method] Returns all the Ext Component docked items in this container
		* @returns Array The docked items of this container.
		*/
		getDockedItems?(): any[];
		/** [Method] Returns the value of hideOnMaskTap
		* @returns Boolean
		*/
		getHideOnMaskTap?(): boolean;
		/** [Method] Returns all inner items of this container
		* @returns Array The inner items of this container.
		*/
		getInnerItems?(): any[];
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		getItems?(): any;
		/** [Method] Returns the value of masked
		* @returns Boolean/Object/Ext.Mask/Ext.LoadMask
		*/
		getMasked?(): any;
		/** [Method] Returns the value of modal
		* @returns Boolean
		*/
		getModal?(): boolean;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class
		* @returns Ext.scroll.View The scroll view.
		*/
		getScrollable?(): Ext.scroll.IView;
		/** [Method] Hides this Component optionally using an animation
		* @returns Ext.Component
		*/
		hide?(): Ext.IComponent;
		/** [Method] Adds a child Component at the given index
		* @param index Number The index to insert the Component at.
		* @param item Object The Component to insert.
		*/
		insert?( index?:number, item?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask
		* @param mask Object
		*/
		mask?( mask?:any ): void;
		/** [Method] Retrieves all descendant components which match the passed selector
		* @param selector String Selector complying to an Ext.ComponentQuery selector.
		* @returns Array Ext.Component's which matched the selector.
		*/
		query?( selector?:string ): any[];
		/** [Method] Removes an item from this Container optionally destroying it
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		remove?( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes all items currently in the Container optionally destroying them all
		* @param destroy Boolean If true, destroys each removed Component.
		* @param everything Boolean If true, completely remove all items including docked / centered and floating items.
		* @returns Ext.Component this
		*/
		removeAll?( destroy?:boolean, everything?:boolean ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		removeAt?( index?:number ): Ext.IContainer;
		/** [Method] Removes a docked item from this Container
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		removeDocked?( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		removeInnerAt?( index?:number ): Ext.IContainer;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		setActiveItem?( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy
		* @param autoDestroy Boolean The new value.
		*/
		setAutoDestroy?( autoDestroy?:boolean ): void;
		/** [Method] Sets the value of control
		* @param control Object The new value.
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap
		* @param hideOnMaskTap Boolean The new value.
		*/
		setHideOnMaskTap?( hideOnMaskTap?:boolean ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object/String The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of masked
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask The new value.
		*/
		setMasked?( masked?:any ): void;
		/** [Method] Sets the value of modal
		* @param modal Boolean The new value.
		*/
		setModal?( modal?:boolean ): void;
		/** [Method] Sets the value of scrollable
		* @param scrollable Boolean/String/Object The new value.
		* @returns Ext.scroll.View The scroll view.
		*/
		setScrollable?( scrollable?:any ): Ext.scroll.IView;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		show?(): Ext.IComponent;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		unmask?(): void;
	}
}
declare namespace Ext.data {
	export interface IArrayStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy
		* @returns Object
		*/
		getProxy?(): any;
		/** [Method] Loads an array of data straight into the Store
		* @param data Object
		* @param append Object
		*/
		loadData?( data?:any, append?:any ): void;
		/** [Method] Sets the value of proxy
		* @param proxy Object The new value.
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare namespace Ext.data.association {
	export interface IAssociation extends Ext.IBase {
		/** [Config Option] (String) */
		associatedModel?: string;
		/** [Config Option] (String) */
		associatedName?: string;
		/** [Config Option] (String) */
		associationKey?: string;
		/** [Config Option] (Ext.data.Model/String) */
		ownerModel?: any;
		/** [Config Option] (String) */
		primaryKey?: string;
		/** [Config Option] (Ext.data.reader.Reader) */
		reader?: Ext.data.reader.IReader;
		/** [Config Option] (String) */
		type?: string;
		/** [Method] Returns the value of associatedModel
		* @returns String
		*/
		getAssociatedModel?(): string;
		/** [Method] Returns the value of associatedName
		* @returns String
		*/
		getAssociatedName?(): string;
		/** [Method] Returns the value of associationKey
		* @returns String
		*/
		getAssociationKey?(): string;
		/** [Method] Returns the value of name
		* @returns Object
		*/
		getName?(): any;
		/** [Method] Returns the value of ownerModel
		* @returns Ext.data.Model/String
		*/
		getOwnerModel?(): any;
		/** [Method] Returns the value of ownerName
		* @returns String
		*/
		getOwnerName?(): string;
		/** [Method] Returns the value of primaryKey
		* @returns String
		*/
		getPrimaryKey?(): string;
		/** [Method] Returns the value of reader
		* @returns Ext.data.reader.Reader
		*/
		getReader?(): Ext.data.reader.IReader;
		/** [Method] Returns the value of type
		* @returns String
		*/
		getType?(): string;
		/** [Method] Sets the value of associatedModel
		* @param associatedModel String The new value.
		*/
		setAssociatedModel?( associatedModel?:string ): void;
		/** [Method] Sets the value of associatedName
		* @param associatedName String The new value.
		*/
		setAssociatedName?( associatedName?:string ): void;
		/** [Method] Sets the value of associationKey
		* @param associationKey String The new value.
		*/
		setAssociationKey?( associationKey?:string ): void;
		/** [Method] Sets the value of name
		* @param name Object The new value.
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ownerModel
		* @param ownerModel Ext.data.Model/String The new value.
		*/
		setOwnerModel?( ownerModel?:any ): void;
		/** [Method] Sets the value of ownerName
		* @param ownerName String The new value.
		*/
		setOwnerName?( ownerName?:string ): void;
		/** [Method] Sets the value of primaryKey
		* @param primaryKey String The new value.
		*/
		setPrimaryKey?( primaryKey?:string ): void;
		/** [Method] Sets the value of reader
		* @param reader Ext.data.reader.Reader The new value.
		*/
		setReader?( reader?:Ext.data.reader.IReader ): void;
		/** [Method] Sets the value of type
		* @param type String The new value.
		*/
		setType?( type?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IAssociation extends Ext.IBase {
		/** [Config Option] (String) */
		associatedModel?: string;
		/** [Config Option] (String) */
		associatedName?: string;
		/** [Config Option] (String) */
		associationKey?: string;
		/** [Config Option] (Ext.data.Model/String) */
		ownerModel?: any;
		/** [Config Option] (String) */
		primaryKey?: string;
		/** [Config Option] (Ext.data.reader.Reader) */
		reader?: Ext.data.reader.IReader;
		/** [Config Option] (String) */
		type?: string;
		/** [Method] Returns the value of associatedModel
		* @returns String
		*/
		getAssociatedModel?(): string;
		/** [Method] Returns the value of associatedName
		* @returns String
		*/
		getAssociatedName?(): string;
		/** [Method] Returns the value of associationKey
		* @returns String
		*/
		getAssociationKey?(): string;
		/** [Method] Returns the value of name
		* @returns Object
		*/
		getName?(): any;
		/** [Method] Returns the value of ownerModel
		* @returns Ext.data.Model/String
		*/
		getOwnerModel?(): any;
		/** [Method] Returns the value of ownerName
		* @returns String
		*/
		getOwnerName?(): string;
		/** [Method] Returns the value of primaryKey
		* @returns String
		*/
		getPrimaryKey?(): string;
		/** [Method] Returns the value of reader
		* @returns Ext.data.reader.Reader
		*/
		getReader?(): Ext.data.reader.IReader;
		/** [Method] Returns the value of type
		* @returns String
		*/
		getType?(): string;
		/** [Method] Sets the value of associatedModel
		* @param associatedModel String The new value.
		*/
		setAssociatedModel?( associatedModel?:string ): void;
		/** [Method] Sets the value of associatedName
		* @param associatedName String The new value.
		*/
		setAssociatedName?( associatedName?:string ): void;
		/** [Method] Sets the value of associationKey
		* @param associationKey String The new value.
		*/
		setAssociationKey?( associationKey?:string ): void;
		/** [Method] Sets the value of name
		* @param name Object The new value.
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ownerModel
		* @param ownerModel Ext.data.Model/String The new value.
		*/
		setOwnerModel?( ownerModel?:any ): void;
		/** [Method] Sets the value of ownerName
		* @param ownerName String The new value.
		*/
		setOwnerName?( ownerName?:string ): void;
		/** [Method] Sets the value of primaryKey
		* @param primaryKey String The new value.
		*/
		setPrimaryKey?( primaryKey?:string ): void;
		/** [Method] Sets the value of reader
		* @param reader Ext.data.reader.Reader The new value.
		*/
		setReader?( reader?:Ext.data.reader.IReader ): void;
		/** [Method] Sets the value of type
		* @param type String The new value.
		*/
		setType?( type?:string ): void;
	}
}
declare namespace Ext.data.association {
	export interface IBelongsTo extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName
		* @returns String
		*/
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName
		* @returns Object
		*/
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName
		* @returns String
		*/
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName
		* @param getterName String The new value.
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName
		* @param instanceName Object The new value.
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName
		* @param setterName String The new value.
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IBelongsToAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName
		* @returns String
		*/
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName
		* @returns Object
		*/
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName
		* @returns String
		*/
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName
		* @param getterName String The new value.
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName
		* @param instanceName Object The new value.
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName
		* @param setterName String The new value.
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare namespace Ext.data.association {
	export interface IHasMany extends Ext.data.association.IAssociation {
		/** [Config Option] (Boolean) */
		autoLoad?: boolean;
		/** [Config Option] (Boolean) */
		autoSync?: boolean;
		/** [Config Option] (String) */
		filterProperty?: string;
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		storeConfig?: any;
		/** [Config Option] (String) */
		storeName?: string;
		/** [Method] Returns the value of autoLoad
		* @returns Boolean
		*/
		getAutoLoad?(): boolean;
		/** [Method] Returns the value of autoSync
		* @returns Boolean
		*/
		getAutoSync?(): boolean;
		/** [Method] Returns the value of filterProperty
		* @returns String
		*/
		getFilterProperty?(): string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of store
		* @returns Object
		*/
		getStore?(): any;
		/** [Method] Returns the value of storeName
		* @returns String
		*/
		getStoreName?(): string;
		/** [Method] Sets the value of autoLoad
		* @param autoLoad Boolean The new value.
		*/
		setAutoLoad?( autoLoad?:boolean ): void;
		/** [Method] Sets the value of autoSync
		* @param autoSync Boolean The new value.
		*/
		setAutoSync?( autoSync?:boolean ): void;
		/** [Method] Sets the value of filterProperty
		* @param filterProperty String The new value.
		*/
		setFilterProperty?( filterProperty?:string ): void;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of store
		* @param store Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of storeName
		* @param storeName String The new value.
		*/
		setStoreName?( storeName?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IHasManyAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (Boolean) */
		autoLoad?: boolean;
		/** [Config Option] (Boolean) */
		autoSync?: boolean;
		/** [Config Option] (String) */
		filterProperty?: string;
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		storeConfig?: any;
		/** [Config Option] (String) */
		storeName?: string;
		/** [Method] Returns the value of autoLoad
		* @returns Boolean
		*/
		getAutoLoad?(): boolean;
		/** [Method] Returns the value of autoSync
		* @returns Boolean
		*/
		getAutoSync?(): boolean;
		/** [Method] Returns the value of filterProperty
		* @returns String
		*/
		getFilterProperty?(): string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of store
		* @returns Object
		*/
		getStore?(): any;
		/** [Method] Returns the value of storeName
		* @returns String
		*/
		getStoreName?(): string;
		/** [Method] Sets the value of autoLoad
		* @param autoLoad Boolean The new value.
		*/
		setAutoLoad?( autoLoad?:boolean ): void;
		/** [Method] Sets the value of autoSync
		* @param autoSync Boolean The new value.
		*/
		setAutoSync?( autoSync?:boolean ): void;
		/** [Method] Sets the value of filterProperty
		* @param filterProperty String The new value.
		*/
		setFilterProperty?( filterProperty?:string ): void;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of store
		* @param store Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of storeName
		* @param storeName String The new value.
		*/
		setStoreName?( storeName?:string ): void;
	}
}
declare namespace Ext.data.association {
	export interface IHasOne extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName
		* @returns String
		*/
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName
		* @returns Object
		*/
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName
		* @returns String
		*/
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName
		* @param getterName String The new value.
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName
		* @param instanceName Object The new value.
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName
		* @param setterName String The new value.
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IHasOneAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey
		* @returns String
		*/
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName
		* @returns String
		*/
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName
		* @returns Object
		*/
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName
		* @returns String
		*/
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey
		* @param foreignKey String The new value.
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName
		* @param getterName String The new value.
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName
		* @param instanceName Object The new value.
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName
		* @param setterName String The new value.
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IBatch extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		autoStart?: boolean;
		/** [Config Option] (Boolean) */
		pauseOnException?: boolean;
		/** [Config Option] (Ext.data.Proxy) */
		proxy?: Ext.data.IProxy;
		/** [Property] (Number) */
		current?: number;
		/** [Property] (Boolean) */
		hasException?: boolean;
		/** [Property] (Boolean) */
		isComplete?: boolean;
		/** [Property] (Boolean) */
		isRunning?: boolean;
		/** [Property] (Ext.data.Operation[]) */
		operations?: Ext.data.IOperation[];
		/** [Property] (Number) */
		total?: number;
		/** [Method] Adds a new operation to this batch
		* @param operation Object The Operation object.
		*/
		add?( operation?:any ): void;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of autoStart
		* @returns Boolean
		*/
		getAutoStart?(): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of pauseOnException
		* @returns Boolean
		*/
		getPauseOnException?(): boolean;
		/** [Method] Returns the value of proxy
		* @returns Ext.data.Proxy
		*/
		getProxy?(): Ext.data.IProxy;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Pauses execution of the batch but does not cancel the current operation  */
		pause?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Executes a operation by its numeric index
		* @param index Number The operation index to run.
		*/
		runOperation?( index?:number ): void;
		/** [Method] Sets the value of autoStart
		* @param autoStart Boolean The new value.
		*/
		setAutoStart?( autoStart?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of pauseOnException
		* @param pauseOnException Boolean The new value.
		*/
		setPauseOnException?( pauseOnException?:boolean ): void;
		/** [Method] Sets the value of proxy
		* @param proxy Ext.data.Proxy The new value.
		*/
		setProxy?( proxy?:Ext.data.IProxy ): void;
		/** [Method] Kicks off the execution of the batch continuing from the next operation if the previous operation encountered an exc  */
		start?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IConnection extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		defaultHeaders?: any;
		/** [Config Option] (String) */
		defaultXhrHeader?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (String) */
		disableCachingParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Method] Aborts any outstanding request
		* @param request Object Defaults to the last request.
		*/
		abort?( request?:any ): void;
		/** [Method] Aborts all outstanding requests  */
		abortAll?(): void;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of async
		* @returns Boolean
		*/
		getAsync?(): boolean;
		/** [Method] Returns the value of autoAbort
		* @returns Boolean
		*/
		getAutoAbort?(): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of defaultHeaders
		* @returns Object
		*/
		getDefaultHeaders?(): any;
		/** [Method] Returns the value of defaultPostHeader
		* @returns String
		*/
		getDefaultPostHeader?(): string;
		/** [Method] Returns the value of defaultXhrHeader
		* @returns String
		*/
		getDefaultXhrHeader?(): string;
		/** [Method] Returns the value of disableCaching
		* @returns Boolean
		*/
		getDisableCaching?(): boolean;
		/** [Method] Returns the value of disableCachingParam
		* @returns String
		*/
		getDisableCachingParam?(): string;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		getExtraParams?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of method
		* @returns String
		*/
		getMethod?(): string;
		/** [Method] Returns the value of password
		* @returns String
		*/
		getPassword?(): string;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns the value of useDefaultHeader
		* @returns Boolean
		*/
		getUseDefaultHeader?(): boolean;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Boolean
		*/
		getUseDefaultXhrHeader?(): boolean;
		/** [Method] Returns the value of username
		* @returns String
		*/
		getUsername?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Determines whether this object has a request outstanding
		* @param request Object The request to check.
		* @returns Boolean True if there is an outstanding request.
		*/
		isLoading?( request?:any ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Checks if the response status was successful
		* @param status Number The status code.
		* @param xhr XMLHttpRequest
		* @returns Object An object containing success/status state.
		*/
		parseStatus?( status?:number, xhr?:XMLHttpRequest ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Sends an HTTP request to a remote server
		* @param options Object An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform post-processing in a callback because it is passed to callback functions.)
		* @returns Object/null The request object. This may be used to cancel the request.
		*/
		request?( options?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of async
		* @param async Boolean The new value.
		*/
		setAsync?( async?:boolean ): void;
		/** [Method] Sets the value of autoAbort
		* @param autoAbort Boolean The new value.
		*/
		setAutoAbort?( autoAbort?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of defaultHeaders
		* @param defaultHeaders Object The new value.
		*/
		setDefaultHeaders?( defaultHeaders?:any ): void;
		/** [Method] Sets the value of defaultPostHeader
		* @param defaultPostHeader String The new value.
		*/
		setDefaultPostHeader?( defaultPostHeader?:string ): void;
		/** [Method] Sets the value of defaultXhrHeader
		* @param defaultXhrHeader String The new value.
		*/
		setDefaultXhrHeader?( defaultXhrHeader?:string ): void;
		/** [Method] Sets the value of disableCaching
		* @param disableCaching Boolean The new value.
		*/
		setDisableCaching?( disableCaching?:boolean ): void;
		/** [Method] Sets the value of disableCachingParam
		* @param disableCachingParam String The new value.
		*/
		setDisableCachingParam?( disableCachingParam?:string ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of method
		* @param method String The new value.
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets various options such as the url params for the request
		* @param options Object The initial options.
		* @param scope Object The scope to execute in.
		* @returns Object The params for the request.
		*/
		setOptions?( options?:any, scope?:any ): any;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of useDefaultHeader
		* @param useDefaultHeader Boolean The new value.
		*/
		setUseDefaultHeader?( useDefaultHeader?:boolean ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Boolean The new value.
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		setUsername?( username?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Uploads a form using a hidden iframe
		* @param form String/HTMLElement/Ext.Element The form to upload.
		* @param url String The url to post to.
		* @param params String Any extra parameters to pass.
		* @param options Object The initial options.
		*/
		upload?( form?:any, url?:string, params?:string, options?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IDirectStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy
		* @returns Object
		*/
		getProxy?(): any;
		/** [Method] Sets the value of proxy
		* @param proxy Object The new value.
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IError extends Ext.IBase {
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (String) */
		message?: string;
		/** [Method] Returns the value of field
		* @returns String
		*/
		getField?(): string;
		/** [Method] Returns the value of message
		* @returns String
		*/
		getMessage?(): string;
		/** [Method] Sets the value of field
		* @param field String The new value.
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		setMessage?( message?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IErrors extends Ext.util.ICollection {
		/** [Method] Adds an item to the collection
		* @returns Object The item added.
		*/
		add?(): any;
		/** [Method] Returns all of the errors for the given field
		* @param fieldName String The field to get errors for.
		* @returns Object[] All errors for the given field.
		*/
		getByField?( fieldName?:string ): any[];
		/** [Method] Returns true if there are no errors in the collection
		* @returns Boolean
		*/
		isValid?(): boolean;
	}
}
declare namespace Ext.data {
	export interface IField extends Ext.IBase {
		/** [Config Option] (Boolean) */
		allowNull?: boolean;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/Number) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: boolean;
		/** [Config Option] (String) */
		sortDir?: string;
		/** [Config Option] (Function) */
		sortType?: any;
		/** [Config Option] (String/Object) */
		type?: any;
		/** [Config Option] (Boolean) */
		useNull?: boolean;
		/** [Method] Returns the value of allowNull
		* @returns Boolean
		*/
		getAllowNull?(): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String
		*/
		getBubbleEvents?(): string;
		/** [Method] Returns the value of convert
		* @returns Function
		*/
		getConvert?(): any;
		/** [Method] Returns the value of dateFormat
		* @returns String
		*/
		getDateFormat?(): string;
		/** [Method] Returns the value of decode
		* @returns Object
		*/
		getDecode?(): any;
		/** [Method] Returns the value of defaultValue
		* @returns Object
		*/
		getDefaultValue?(): any;
		/** [Method] Returns the value of encode
		* @returns Object
		*/
		getEncode?(): any;
		/** [Method] Returns the value of mapping
		* @returns String/Number
		*/
		getMapping?(): any;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of persist
		* @returns Boolean
		*/
		getPersist?(): boolean;
		/** [Method] Returns the value of sortDir
		* @returns String
		*/
		getSortDir?(): string;
		/** [Method] Returns the value of sortType
		* @returns Function
		*/
		getSortType?(): any;
		/** [Method] Returns the value of type
		* @returns String/Object
		*/
		getType?(): any;
		/** [Method] Sets the value of allowNull
		* @param allowNull Boolean The new value.
		*/
		setAllowNull?( allowNull?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String The new value.
		*/
		setBubbleEvents?( bubbleEvents?:string ): void;
		/** [Method] Sets the value of convert
		* @param convert Function The new value.
		*/
		setConvert?( convert?:any ): void;
		/** [Method] Sets the value of dateFormat
		* @param dateFormat String The new value.
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of decode
		* @param decode Object The new value.
		*/
		setDecode?( decode?:any ): void;
		/** [Method] Sets the value of defaultValue
		* @param defaultValue Object The new value.
		*/
		setDefaultValue?( defaultValue?:any ): void;
		/** [Method] Sets the value of encode
		* @param encode Object The new value.
		*/
		setEncode?( encode?:any ): void;
		/** [Method] Sets the value of mapping
		* @param mapping String/Number The new value.
		*/
		setMapping?( mapping?:any ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of persist
		* @param persist Boolean The new value.
		*/
		setPersist?( persist?:boolean ): void;
		/** [Method] Sets the value of sortDir
		* @param sortDir String The new value.
		*/
		setSortDir?( sortDir?:string ): void;
		/** [Method] Sets the value of sortType
		* @param sortType Function The new value.
		*/
		setSortType?( sortType?:any ): void;
		/** [Method] Sets the value of type
		* @param type String/Object The new value.
		*/
		setType?( type?:any ): void;
	}
}
declare namespace Ext.data.identifier {
	export interface ISequential extends Ext.data.identifier.ISimple {
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Number) */
		seed?: number;
		/** [Method] Returns the value of prefix
		* @returns String
		*/
		getPrefix?(): string;
		/** [Method] Returns the value of seed
		* @returns Number
		*/
		getSeed?(): number;
		/** [Method] Sets the value of prefix
		* @param prefix String The new value.
		*/
		setPrefix?( prefix?:string ): void;
		/** [Method] Sets the value of seed
		* @param seed Number The new value.
		*/
		setSeed?( seed?:number ): void;
	}
}
declare namespace Ext.data.identifier {
	export interface ISimple extends Ext.IBase {
		/** [Method] Returns the value of prefix
		* @returns String
		*/
		getPrefix?(): string;
		/** [Method] Sets the value of prefix
		* @param prefix String The new value.
		*/
		setPrefix?( prefix?:string ): void;
	}
}
declare namespace Ext.data.identifier {
	export interface IUuid extends Ext.data.identifier.ISimple {
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Number) */
		version?: number;
		/** [Property] (Number/Object) */
		salt?: any;
		/** [Property] (Number/Object) */
		timestamp?: any;
		/** [Method] Returns the value of id
		* @returns Object
		*/
		getId?(): any;
		/** [Method] Returns the value of version
		* @returns Number
		*/
		getVersion?(): number;
		/** [Method] Reconfigures this generator given new config properties
		* @param config Object
		*/
		reconfigure?( config?:any ): void;
		/** [Method] Sets the value of id
		* @param id Object The new value.
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of version
		* @param version Number The new value.
		*/
		setVersion?( version?:number ): void;
	}
}
declare namespace Ext.data {
	export interface IJsonP extends Ext.IBase {
	}
	export class JsonP {
		/** [Property] (String) */
		static callbackKey: string;
		/** [Property] (Boolean) */
		static disableCaching: boolean;
		/** [Property] (String) */
		static disableCachingParam: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Number) */
		static timeout: number;
		/** [Method] Abort a request
		* @param request Object/String The request to abort.
		*/
		static abort( request?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Makes a JSONP request
		* @param options Object An object which may contain the following properties. Note that options will take priority over any defaults that are specified in the class.
		* @returns Object request An object containing the request details.
		*/
		static request( options?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.util {
	export interface IJSONP extends Ext.IBase {
	}
	export class JSONP {
		/** [Property] (String) */
		static callbackKey: string;
		/** [Property] (Boolean) */
		static disableCaching: boolean;
		/** [Property] (String) */
		static disableCachingParam: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Number) */
		static timeout: number;
		/** [Method] Abort a request
		* @param request Object/String The request to abort.
		*/
		static abort( request?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Makes a JSONP request
		* @param options Object An object which may contain the following properties. Note that options will take priority over any defaults that are specified in the class.
		* @returns Object request An object containing the request details.
		*/
		static request( options?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.data {
	export interface IJsonStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy
		* @returns Object
		*/
		getProxy?(): any;
		/** [Method] Sets the value of proxy
		* @param proxy Object The new value.
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IModel extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasOne?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Object/String) */
		identifier?: any;
		/** [Config Option] (Object/Ext.data.Proxy) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		useCache?: boolean;
		/** [Config Option] (Object[]) */
		validations?: any[];
		/** [Property] (Boolean) */
		dirty?: boolean;
		/** [Property] (Boolean) */
		editing?: boolean;
		/** [Property] (Object) */
		modified?: any;
		/** [Property] (Boolean) */
		phantom?: boolean;
		/** [Property] (Object) */
		raw?: any;
		/** [Property] (Array) */
		stores?: any[];
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Begins an edit  */
		beginEdit?(): void;
		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Usually called by the Ext data Store which owns the model instance
		* @param silent Boolean true to skip notification of the owning store of the change.
		*/
		commit?( silent?:boolean ): void;
		/** [Method] Creates a copy clone of this Model instance
		* @param id String A new id. If you don't specify this a new id will be generated for you. To generate a phantom instance with a new id use: var rec = record.copy(); // clone the record with a new id
		* @returns Ext.data.Model
		*/
		copy?( id?:string ): Ext.data.IModel;
		/** [Method] Destroys this model instance  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Ends an edit
		* @param silent Boolean true to not notify the store of the change.
		* @param modifiedFieldNames String[] Array of field names changed during edit.
		*/
		endEdit?( silent?:boolean, modifiedFieldNames?:string[] ): void;
		/** [Method] Destroys the record using the configured proxy
		* @param options Object/Function Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments.
		* @param scope Object The scope to run your callback method in. This is only used if you passed a function as the first argument.
		* @returns Ext.data.Model The Model instance.
		*/
		erase?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of the given field
		* @param fieldName String The field to fetch the value for.
		* @returns Object The value.
		*/
		get?( fieldName?:string ): any;
		/** [Method] Gets all of the data from this Models loaded associations
		* @returns Object The nested data set for the Model's loaded associations.
		*/
		getAssociatedData?(): any;
		/** [Method] Returns the value of associations
		* @returns Object[]
		*/
		getAssociations?(): any[];
		/** [Method] Returns the value of belongsTo
		* @returns String/Object/String[]/Object[]
		*/
		getBelongsTo?(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Gets a hash of only the fields that have been modified since this Model was created or committed
		* @returns Object
		*/
		getChanges?(): any;
		/** [Method] Returns the value of clientIdProperty
		* @returns String
		*/
		getClientIdProperty?(): string;
		/** [Method] Returns an object containing the data set on this record
		* @param includeAssociated Boolean true to include the associated data.
		* @returns Object The data.
		*/
		getData?( includeAssociated?:boolean ): any;
		/** [Method] Returns the value of fields
		* @returns Object[]/String[]
		*/
		getFields?(): any;
		/** [Method] Returns the value of hasMany
		* @returns String/Object/String[]/Object[]
		*/
		getHasMany?(): any;
		/** [Method] Returns the value of hasOne
		* @returns String/Object/String[]/Object[]
		*/
		getHasOne?(): any;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty
		* @returns Number/String The id.
		*/
		getId?(): any;
		/** [Method] Returns the value of idProperty
		* @returns String
		*/
		getIdProperty?(): string;
		/** [Method] Returns the value of identifier
		* @returns Object/String
		*/
		getIdentifier?(): any;
		/** [Method] Returns true if the record has been erased on the server  */
		getIsErased?(): void;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of proxy
		* @returns Object/Ext.data.Proxy
		*/
		getProxy?(): any;
		/** [Method] Returns the value of useCache
		* @returns Boolean
		*/
		getUseCache?(): boolean;
		/** [Method] Returns the value of validations
		* @returns Object[]
		*/
		getValidations?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Returns true if the passed field name has been modified since the load or last commit
		* @param fieldName String Ext.data.Field.name
		* @returns Boolean
		*/
		isModified?( fieldName?:string ): boolean;
		/** [Method] Checks if the model is valid
		* @returns Boolean true if the model is valid.
		*/
		isValid?(): boolean;
		/** [Method] By joining this model to an instance of a class this model will automatically try to call certain template methods o
		* @param store Ext.data.Store The store to which this model has been added.
		*/
		join?( store?:Ext.data.IStore ): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Usually called by the Ext data Store to which this model instance has been joined
		* @param silent Boolean true to skip notification of the owning store of the change.
		*/
		reject?( silent?:boolean ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Saves the model instance using the configured proxy
		* @param options Object/Function Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments.
		* @param scope Object The scope to run your callback method in. This is only used if you passed a function as the first argument.
		* @returns Ext.data.Model The Model instance
		*/
		save?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Sets the given field to the given value marks the instance as dirty
		* @param fieldName String/Object The field to set, or an object containing key/value pairs.
		* @param value Object The value to set.
		*/
		set?( fieldName?:any, value?:any ): void;
		/** [Method] Sets the value of associations
		* @param associations Object[] The new value.
		*/
		setAssociations?( associations?:any[] ): void;
		/** [Method] Sets the value of belongsTo
		* @param belongsTo String/Object/String[]/Object[] The new value.
		*/
		setBelongsTo?( belongsTo?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of clientIdProperty
		* @param clientIdProperty String The new value.
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] This sets the data directly without converting and applying default values
		* @param data Object
		* @returns Ext.data.Model This Record.
		*/
		setConvertedData?( data?:any ): Ext.data.IModel;
		/** [Method] This method is used to set the data for this Record instance
		* @param rawData Object
		* @returns Ext.data.Model This record.
		*/
		setData?( rawData?:any ): Ext.data.IModel;
		/** [Method] Marks this Record as dirty  */
		setDirty?(): void;
		/** [Method] Updates the collection of Fields that all instances of this Model use
		* @param fields Array
		* @returns any
		*/
		setFields?( fields?:any[] ): any;
		/** [Method] Sets the value of hasMany
		* @param hasMany String/Object/String[]/Object[] The new value.
		*/
		setHasMany?( hasMany?:any ): void;
		/** [Method] Sets the value of hasOne
		* @param hasOne String/Object/String[]/Object[] The new value.
		*/
		setHasOne?( hasOne?:any ): void;
		/** [Method] Sets the model instance s id field to the given id
		* @param id Number/String The new id
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of idProperty
		* @param idProperty String The new value.
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of identifier
		* @param identifier Object/String The new value.
		*/
		setIdentifier?( identifier?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of proxy
		* @param proxy Object/Ext.data.Proxy The new value.
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of useCache
		* @param useCache Boolean The new value.
		*/
		setUseCache?( useCache?:boolean ): void;
		/** [Method] Sets the value of validations
		* @param validations Object[] The new value.
		*/
		setValidations?( validations?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Returns a url suitable string for this model instance
		* @returns String The url string for this model instance.
		*/
		toUrl?(): string;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] This un joins this record from an instance of a class
		* @param store Ext.data.Store The store from which this model has been removed.
		*/
		unjoin?( store?:Ext.data.IStore ): void;
		/** [Method] Validates the current data against all of its configured validations
		* @returns Ext.data.Errors The errors object.
		*/
		validate?(): Ext.data.IErrors;
	}
	export class Model {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Asynchronously loads a model instance by id
		* @param id Number The id of the model to load
		* @param config Object Config object containing fields:
		* @param scope Object Same as config.scope.
		*/
		static load( id?:number, config?:any, scope?:any ): void;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.data {
	export interface IRecord extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasOne?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Object/String) */
		identifier?: any;
		/** [Config Option] (Object/Ext.data.Proxy) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		useCache?: boolean;
		/** [Config Option] (Object[]) */
		validations?: any[];
		/** [Property] (Boolean) */
		dirty?: boolean;
		/** [Property] (Boolean) */
		editing?: boolean;
		/** [Property] (Object) */
		modified?: any;
		/** [Property] (Boolean) */
		phantom?: boolean;
		/** [Property] (Object) */
		raw?: any;
		/** [Property] (Array) */
		stores?: any[];
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Begins an edit  */
		beginEdit?(): void;
		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Usually called by the Ext data Store which owns the model instance
		* @param silent Boolean true to skip notification of the owning store of the change.
		*/
		commit?( silent?:boolean ): void;
		/** [Method] Creates a copy clone of this Model instance
		* @param id String A new id. If you don't specify this a new id will be generated for you. To generate a phantom instance with a new id use: var rec = record.copy(); // clone the record with a new id
		* @returns Ext.data.Model
		*/
		copy?( id?:string ): Ext.data.IModel;
		/** [Method] Destroys this model instance  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Ends an edit
		* @param silent Boolean true to not notify the store of the change.
		* @param modifiedFieldNames String[] Array of field names changed during edit.
		*/
		endEdit?( silent?:boolean, modifiedFieldNames?:string[] ): void;
		/** [Method] Destroys the record using the configured proxy
		* @param options Object/Function Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments.
		* @param scope Object The scope to run your callback method in. This is only used if you passed a function as the first argument.
		* @returns Ext.data.Model The Model instance.
		*/
		erase?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of the given field
		* @param fieldName String The field to fetch the value for.
		* @returns Object The value.
		*/
		get?( fieldName?:string ): any;
		/** [Method] Gets all of the data from this Models loaded associations
		* @returns Object The nested data set for the Model's loaded associations.
		*/
		getAssociatedData?(): any;
		/** [Method] Returns the value of associations
		* @returns Object[]
		*/
		getAssociations?(): any[];
		/** [Method] Returns the value of belongsTo
		* @returns String/Object/String[]/Object[]
		*/
		getBelongsTo?(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Gets a hash of only the fields that have been modified since this Model was created or committed
		* @returns Object
		*/
		getChanges?(): any;
		/** [Method] Returns the value of clientIdProperty
		* @returns String
		*/
		getClientIdProperty?(): string;
		/** [Method] Returns an object containing the data set on this record
		* @param includeAssociated Boolean true to include the associated data.
		* @returns Object The data.
		*/
		getData?( includeAssociated?:boolean ): any;
		/** [Method] Returns the value of fields
		* @returns Object[]/String[]
		*/
		getFields?(): any;
		/** [Method] Returns the value of hasMany
		* @returns String/Object/String[]/Object[]
		*/
		getHasMany?(): any;
		/** [Method] Returns the value of hasOne
		* @returns String/Object/String[]/Object[]
		*/
		getHasOne?(): any;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty
		* @returns Number/String The id.
		*/
		getId?(): any;
		/** [Method] Returns the value of idProperty
		* @returns String
		*/
		getIdProperty?(): string;
		/** [Method] Returns the value of identifier
		* @returns Object/String
		*/
		getIdentifier?(): any;
		/** [Method] Returns true if the record has been erased on the server  */
		getIsErased?(): void;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of proxy
		* @returns Object/Ext.data.Proxy
		*/
		getProxy?(): any;
		/** [Method] Returns the value of useCache
		* @returns Boolean
		*/
		getUseCache?(): boolean;
		/** [Method] Returns the value of validations
		* @returns Object[]
		*/
		getValidations?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Returns true if the passed field name has been modified since the load or last commit
		* @param fieldName String Ext.data.Field.name
		* @returns Boolean
		*/
		isModified?( fieldName?:string ): boolean;
		/** [Method] Checks if the model is valid
		* @returns Boolean true if the model is valid.
		*/
		isValid?(): boolean;
		/** [Method] By joining this model to an instance of a class this model will automatically try to call certain template methods o
		* @param store Ext.data.Store The store to which this model has been added.
		*/
		join?( store?:Ext.data.IStore ): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Usually called by the Ext data Store to which this model instance has been joined
		* @param silent Boolean true to skip notification of the owning store of the change.
		*/
		reject?( silent?:boolean ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Saves the model instance using the configured proxy
		* @param options Object/Function Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments.
		* @param scope Object The scope to run your callback method in. This is only used if you passed a function as the first argument.
		* @returns Ext.data.Model The Model instance
		*/
		save?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Sets the given field to the given value marks the instance as dirty
		* @param fieldName String/Object The field to set, or an object containing key/value pairs.
		* @param value Object The value to set.
		*/
		set?( fieldName?:any, value?:any ): void;
		/** [Method] Sets the value of associations
		* @param associations Object[] The new value.
		*/
		setAssociations?( associations?:any[] ): void;
		/** [Method] Sets the value of belongsTo
		* @param belongsTo String/Object/String[]/Object[] The new value.
		*/
		setBelongsTo?( belongsTo?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of clientIdProperty
		* @param clientIdProperty String The new value.
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] This sets the data directly without converting and applying default values
		* @param data Object
		* @returns Ext.data.Model This Record.
		*/
		setConvertedData?( data?:any ): Ext.data.IModel;
		/** [Method] This method is used to set the data for this Record instance
		* @param rawData Object
		* @returns Ext.data.Model This record.
		*/
		setData?( rawData?:any ): Ext.data.IModel;
		/** [Method] Marks this Record as dirty  */
		setDirty?(): void;
		/** [Method] Updates the collection of Fields that all instances of this Model use
		* @param fields Array
		* @returns any
		*/
		setFields?( fields?:any[] ): any;
		/** [Method] Sets the value of hasMany
		* @param hasMany String/Object/String[]/Object[] The new value.
		*/
		setHasMany?( hasMany?:any ): void;
		/** [Method] Sets the value of hasOne
		* @param hasOne String/Object/String[]/Object[] The new value.
		*/
		setHasOne?( hasOne?:any ): void;
		/** [Method] Sets the model instance s id field to the given id
		* @param id Number/String The new id
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of idProperty
		* @param idProperty String The new value.
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of identifier
		* @param identifier Object/String The new value.
		*/
		setIdentifier?( identifier?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of proxy
		* @param proxy Object/Ext.data.Proxy The new value.
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of useCache
		* @param useCache Boolean The new value.
		*/
		setUseCache?( useCache?:boolean ): void;
		/** [Method] Sets the value of validations
		* @param validations Object[] The new value.
		*/
		setValidations?( validations?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Returns a url suitable string for this model instance
		* @returns String The url string for this model instance.
		*/
		toUrl?(): string;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] This un joins this record from an instance of a class
		* @param store Ext.data.Store The store from which this model has been removed.
		*/
		unjoin?( store?:Ext.data.IStore ): void;
		/** [Method] Validates the current data against all of its configured validations
		* @returns Ext.data.Errors The errors object.
		*/
		validate?(): Ext.data.IErrors;
	}
	export class Record {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Asynchronously loads a model instance by id
		* @param id Number The id of the model to load
		* @param config Object Config object containing fields:
		* @param scope Object Same as config.scope.
		*/
		static load( id?:number, config?:any, scope?:any ): void;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.data {
	export interface IModelManager extends Ext.IAbstractManager {
	}
	export class ModelManager {
		/** [Property] (Ext.util.HashMap) */
		static all: Ext.util.IHashMap;
		/** [Property] (Object) */
		static associationStack: any;
		/** [Property] (Object) */
		static defaultProxyType: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Creates a new instance of a Model using the given data
		* @param data Object Data to initialize the Model's fields with.
		* @param name String The name of the model to create.
		* @param id Number Unique id of the Model instance (see Ext.data.Model).
		* @returns Object
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for each item in the collection
		* @param fn Function The function to execute.
		* @param scope Object The scope to execute in.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, undefined if not found.
		*/
		static get( id?:string ): any;
		/** [Method] Gets the number of items in the collection
		* @returns Number The number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the Ext data Model for a given model name
		* @param id String/Object The id of the model or the model instance.
		* @returns Ext.data.Model A model class.
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Checks if an item type is registered
		* @param type String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		static isRegistered( type?:string ): boolean;
		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager
		* @param id String The item id.
		* @param fn Function The callback function. Called with a single parameter, the item.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
		*/
		static onAvailable( id?:string, fn?:any, scope?:any ): void;
		/** [Method] Registers an item to be managed
		* @param item Object The item to register.
		*/
		static register( item?:any ): void;
		/** [Method] Registers a model definition
		* @param name String
		* @param config Object
		* @returns Object
		*/
		static registerType( name?:string, config?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters an item by removing it from this manager
		* @param item Object The item to unregister.
		*/
		static unregister( item?:any ): void;
	}
}
declare namespace Ext {
	export interface IModelMgr extends Ext.IAbstractManager {
	}
	export class ModelMgr {
		/** [Property] (Ext.util.HashMap) */
		static all: Ext.util.IHashMap;
		/** [Property] (Object) */
		static associationStack: any;
		/** [Property] (Object) */
		static defaultProxyType: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Creates a new instance of a Model using the given data
		* @param data Object Data to initialize the Model's fields with.
		* @param name String The name of the model to create.
		* @param id Number Unique id of the Model instance (see Ext.data.Model).
		* @returns Object
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for each item in the collection
		* @param fn Function The function to execute.
		* @param scope Object The scope to execute in.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, undefined if not found.
		*/
		static get( id?:string ): any;
		/** [Method] Gets the number of items in the collection
		* @returns Number The number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the Ext data Model for a given model name
		* @param id String/Object The id of the model or the model instance.
		* @returns Ext.data.Model A model class.
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Checks if an item type is registered
		* @param type String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		static isRegistered( type?:string ): boolean;
		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager
		* @param id String The item id.
		* @param fn Function The callback function. Called with a single parameter, the item.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
		*/
		static onAvailable( id?:string, fn?:any, scope?:any ): void;
		/** [Method] Registers an item to be managed
		* @param item Object The item to register.
		*/
		static register( item?:any ): void;
		/** [Method] Registers a model definition
		* @param name String
		* @param config Object
		* @returns Object
		*/
		static registerType( name?:string, config?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters an item by removing it from this manager
		* @param item Object The item to unregister.
		*/
		static unregister( item?:any ): void;
	}
}
declare namespace Ext {
	export interface IModelManager extends Ext.IAbstractManager {
	}
	export class ModelManager {
		/** [Property] (Ext.util.HashMap) */
		static all: Ext.util.IHashMap;
		/** [Property] (Object) */
		static associationStack: any;
		/** [Property] (Object) */
		static defaultProxyType: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Creates a new instance of a Model using the given data
		* @param data Object Data to initialize the Model's fields with.
		* @param name String The name of the model to create.
		* @param id Number Unique id of the Model instance (see Ext.data.Model).
		* @returns Object
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for each item in the collection
		* @param fn Function The function to execute.
		* @param scope Object The scope to execute in.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Returns an item by id
		* @param id String The id of the item.
		* @returns Object The item, undefined if not found.
		*/
		static get( id?:string ): any;
		/** [Method] Gets the number of items in the collection
		* @returns Number The number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the Ext data Model for a given model name
		* @param id String/Object The id of the model or the model instance.
		* @returns Ext.data.Model A model class.
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Checks if an item type is registered
		* @param type String The mnemonic string by which the class may be looked up.
		* @returns Boolean Whether the type is registered.
		*/
		static isRegistered( type?:string ): boolean;
		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager
		* @param id String The item id.
		* @param fn Function The callback function. Called with a single parameter, the item.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
		*/
		static onAvailable( id?:string, fn?:any, scope?:any ): void;
		/** [Method] Registers an item to be managed
		* @param item Object The item to register.
		*/
		static register( item?:any ): void;
		/** [Method] Registers a model definition
		* @param name String
		* @param config Object
		* @returns Object
		*/
		static registerType( name?:string, config?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters an item by removing it from this manager
		* @param item Object The item to unregister.
		*/
		static unregister( item?:any ): void;
	}
}
declare namespace Ext.data {
	export interface INodeInterface extends Ext.IBase {
		/** [Property] (Object) */
		childNodes?: any;
		/** [Property] (Object) */
		firstChild?: any;
		/** [Property] (Object) */
		lastChild?: any;
		/** [Property] (Object) */
		nextSibling?: any;
		/** [Property] (Object) */
		parentNode?: any;
		/** [Property] (Object) */
		previousSibling?: any;
		/** [Method] Insert node s as the last child node of this node
		* @param node Ext.data.NodeInterface/Ext.data.NodeInterface[] The node or Array of nodes to append.
		* @returns Ext.data.NodeInterface The appended node if single append, or null if an array was passed.
		*/
		appendChild?( node?:any ): Ext.data.INodeInterface;
		/** [Method] Bubbles up the tree from this node calling the specified function with each node
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Cascades down the tree from this node calling the specified function with each node
		* @param fn Function The function to call
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		cascadeBy?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Collapse this node
		* @param recursive Function true to recursively collapse all the children.
		* @param callback Function The function to execute once the collapse completes.
		* @param scope Object The scope to run the callback in.
		*/
		collapse?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns true if this node is an ancestor at any point of the passed node
		* @param node Ext.data.NodeInterface
		* @returns Boolean
		*/
		contains?( node?:Ext.data.INodeInterface ): boolean;
		/** [Method] Creates a copy clone of this Node
		* @param newId String A new id, defaults to this Node's id.
		* @param deep Boolean If passed as true, all child Nodes are recursively copied into the new Node. If omitted or false, the copy will have no child Nodes.
		* @returns Ext.data.NodeInterface A copy of this Node.
		*/
		copy?( newId?:string, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Destroys the node
		* @param silent Object
		*/
		destroy?( silent?:any ): void;
		/** [Method] Iterates the child nodes of this node calling the specified function with each node
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node in the iteration.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		eachChild?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Expand this node
		* @param recursive Function true to recursively expand all the children.
		* @param callback Function The function to execute once the expand completes.
		* @param scope Object The scope to run the callback in.
		*/
		expand?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Finds the first child that has the attribute with the specified value
		* @param attribute String The attribute name.
		* @param value Object The value to search for.
		* @param deep Boolean true to search through nodes deeper than the immediate children.
		* @returns Ext.data.NodeInterface The found child or null if none was found.
		*/
		findChild?( attribute?:string, value?:any, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Finds the first child by a custom function
		* @param fn Function A function which must return true if the passed Node is the required Node.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Node being tested.
		* @param deep Boolean True to search through nodes deeper than the immediate children.
		* @returns Ext.data.NodeInterface The found child or null if none was found.
		*/
		findChildBy?( fn?:any, scope?:any, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Returns the child node at the specified index
		* @param index Number
		* @returns Ext.data.NodeInterface
		*/
		getChildAt?( index?:number ): Ext.data.INodeInterface;
		/** [Method] Returns depth of this node the root node has a depth of 0
		* @returns Number
		*/
		getDepth?(): number;
		/** [Method] Gets the hierarchical path from the root of the current node
		* @param field String The field to construct the path from. Defaults to the model idProperty.
		* @param separator String A separator to use.
		* @returns String The node path
		*/
		getPath?( field?:string, separator?:string ): string;
		/** [Method] Returns true if this node has one or more child nodes else false
		* @returns Boolean
		*/
		hasChildNodes?(): boolean;
		/** [Method] Returns the index of a child node
		* @param child Ext.data.NodeInterface
		* @returns Number The index of the node or -1 if it was not found.
		*/
		indexOf?( child?:Ext.data.INodeInterface ): number;
		/** [Method] Inserts the first node before the second node in this nodes childNodes collection
		* @param node Ext.data.NodeInterface The node to insert.
		* @param refNode Ext.data.NodeInterface The node to insert before (if null the node is appended).
		* @returns Ext.data.NodeInterface The inserted node.
		*/
		insertBefore?( node?:Ext.data.INodeInterface, refNode?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Insert a node into this node
		* @param index Number The zero-based index to insert the node at.
		* @param node Ext.data.Model The node to insert.
		* @returns Ext.data.Model The record you just inserted.
		*/
		insertChild?( index?:number, node?:Ext.data.IModel ): Ext.data.IModel;
		/** [Method] Returns true if the passed node is an ancestor at any point of this node
		* @param node Ext.data.NodeInterface
		* @returns Boolean
		*/
		isAncestor?( node?:Ext.data.INodeInterface ): boolean;
		/** [Method] Returns true if this node has one or more child nodes or if the expandable node attribute is explicitly specified as
		* @returns Boolean
		*/
		isExpandable?(): boolean;
		/** [Method] Returns true if this node is expanded
		* @returns Boolean
		*/
		isExpanded?(): boolean;
		/** [Method] Returns true if this node is the first child of its parent
		* @returns Boolean
		*/
		isFirst?(): boolean;
		/** [Method] Returns true if this node is the last child of its parent
		* @returns Boolean
		*/
		isLast?(): boolean;
		/** [Method] Returns true if this node is a leaf
		* @returns Boolean
		*/
		isLeaf?(): boolean;
		/** [Method] Returns true if this node is loaded
		* @returns Boolean
		*/
		isLoaded?(): boolean;
		/** [Method] Returns true if this node is loading
		* @returns Boolean
		*/
		isLoading?(): boolean;
		/** [Method] Returns true if this node is the root node
		* @returns Boolean
		*/
		isRoot?(): boolean;
		/** [Method] Returns true if this node is visible
		* @returns Boolean
		*/
		isVisible?(): boolean;
		/** [Method] Removes this node from its parent
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface this
		*/
		remove?( destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Removes all child nodes from this node
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface this
		*/
		removeAll?( destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Removes a child node from this node
		* @param node Ext.data.NodeInterface The node to remove.
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface The removed node.
		*/
		removeChild?( node?:Ext.data.INodeInterface, destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Replaces one child node in this node with another
		* @param newChild Ext.data.NodeInterface The replacement node.
		* @param oldChild Ext.data.NodeInterface The node to replace.
		* @returns Ext.data.NodeInterface The replaced node.
		*/
		replaceChild?( newChild?:Ext.data.INodeInterface, oldChild?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Sorts this nodes children using the supplied sort function
		* @param sortFn Function A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
		* @param recursive Boolean Whether or not to apply this sort recursively.
		* @param suppressEvent Boolean Set to true to not fire a sort event.
		*/
		sort?( sortFn?:any, recursive?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Updates general data of this node like isFirst isLast depth
		* @param silent Object
		* @returns Boolean
		*/
		updateInfo?( silent?:any ): boolean;
	}
	export class NodeInterface {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] This method allows you to decorate a Record s prototype to implement the NodeInterface
		* @param record Ext.data.Model The Record you want to decorate the prototype of.
		*/
		static decorate( record?:Ext.data.IModel ): void;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.data {
	export interface INode extends Ext.IBase {
		/** [Property] (Object) */
		childNodes?: any;
		/** [Property] (Object) */
		firstChild?: any;
		/** [Property] (Object) */
		lastChild?: any;
		/** [Property] (Object) */
		nextSibling?: any;
		/** [Property] (Object) */
		parentNode?: any;
		/** [Property] (Object) */
		previousSibling?: any;
		/** [Method] Insert node s as the last child node of this node
		* @param node Ext.data.NodeInterface/Ext.data.NodeInterface[] The node or Array of nodes to append.
		* @returns Ext.data.NodeInterface The appended node if single append, or null if an array was passed.
		*/
		appendChild?( node?:any ): Ext.data.INodeInterface;
		/** [Method] Bubbles up the tree from this node calling the specified function with each node
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Cascades down the tree from this node calling the specified function with each node
		* @param fn Function The function to call
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		cascadeBy?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Collapse this node
		* @param recursive Function true to recursively collapse all the children.
		* @param callback Function The function to execute once the collapse completes.
		* @param scope Object The scope to run the callback in.
		*/
		collapse?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns true if this node is an ancestor at any point of the passed node
		* @param node Ext.data.NodeInterface
		* @returns Boolean
		*/
		contains?( node?:Ext.data.INodeInterface ): boolean;
		/** [Method] Creates a copy clone of this Node
		* @param newId String A new id, defaults to this Node's id.
		* @param deep Boolean If passed as true, all child Nodes are recursively copied into the new Node. If omitted or false, the copy will have no child Nodes.
		* @returns Ext.data.NodeInterface A copy of this Node.
		*/
		copy?( newId?:string, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Destroys the node
		* @param silent Object
		*/
		destroy?( silent?:any ): void;
		/** [Method] Iterates the child nodes of this node calling the specified function with each node
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node in the iteration.
		* @param args Array The args to call the function with (default to passing the current Node).
		*/
		eachChild?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Expand this node
		* @param recursive Function true to recursively expand all the children.
		* @param callback Function The function to execute once the expand completes.
		* @param scope Object The scope to run the callback in.
		*/
		expand?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Finds the first child that has the attribute with the specified value
		* @param attribute String The attribute name.
		* @param value Object The value to search for.
		* @param deep Boolean true to search through nodes deeper than the immediate children.
		* @returns Ext.data.NodeInterface The found child or null if none was found.
		*/
		findChild?( attribute?:string, value?:any, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Finds the first child by a custom function
		* @param fn Function A function which must return true if the passed Node is the required Node.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Node being tested.
		* @param deep Boolean True to search through nodes deeper than the immediate children.
		* @returns Ext.data.NodeInterface The found child or null if none was found.
		*/
		findChildBy?( fn?:any, scope?:any, deep?:boolean ): Ext.data.INodeInterface;
		/** [Method] Returns the child node at the specified index
		* @param index Number
		* @returns Ext.data.NodeInterface
		*/
		getChildAt?( index?:number ): Ext.data.INodeInterface;
		/** [Method] Returns depth of this node the root node has a depth of 0
		* @returns Number
		*/
		getDepth?(): number;
		/** [Method] Gets the hierarchical path from the root of the current node
		* @param field String The field to construct the path from. Defaults to the model idProperty.
		* @param separator String A separator to use.
		* @returns String The node path
		*/
		getPath?( field?:string, separator?:string ): string;
		/** [Method] Returns true if this node has one or more child nodes else false
		* @returns Boolean
		*/
		hasChildNodes?(): boolean;
		/** [Method] Returns the index of a child node
		* @param child Ext.data.NodeInterface
		* @returns Number The index of the node or -1 if it was not found.
		*/
		indexOf?( child?:Ext.data.INodeInterface ): number;
		/** [Method] Inserts the first node before the second node in this nodes childNodes collection
		* @param node Ext.data.NodeInterface The node to insert.
		* @param refNode Ext.data.NodeInterface The node to insert before (if null the node is appended).
		* @returns Ext.data.NodeInterface The inserted node.
		*/
		insertBefore?( node?:Ext.data.INodeInterface, refNode?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Insert a node into this node
		* @param index Number The zero-based index to insert the node at.
		* @param node Ext.data.Model The node to insert.
		* @returns Ext.data.Model The record you just inserted.
		*/
		insertChild?( index?:number, node?:Ext.data.IModel ): Ext.data.IModel;
		/** [Method] Returns true if the passed node is an ancestor at any point of this node
		* @param node Ext.data.NodeInterface
		* @returns Boolean
		*/
		isAncestor?( node?:Ext.data.INodeInterface ): boolean;
		/** [Method] Returns true if this node has one or more child nodes or if the expandable node attribute is explicitly specified as
		* @returns Boolean
		*/
		isExpandable?(): boolean;
		/** [Method] Returns true if this node is expanded
		* @returns Boolean
		*/
		isExpanded?(): boolean;
		/** [Method] Returns true if this node is the first child of its parent
		* @returns Boolean
		*/
		isFirst?(): boolean;
		/** [Method] Returns true if this node is the last child of its parent
		* @returns Boolean
		*/
		isLast?(): boolean;
		/** [Method] Returns true if this node is a leaf
		* @returns Boolean
		*/
		isLeaf?(): boolean;
		/** [Method] Returns true if this node is loaded
		* @returns Boolean
		*/
		isLoaded?(): boolean;
		/** [Method] Returns true if this node is loading
		* @returns Boolean
		*/
		isLoading?(): boolean;
		/** [Method] Returns true if this node is the root node
		* @returns Boolean
		*/
		isRoot?(): boolean;
		/** [Method] Returns true if this node is visible
		* @returns Boolean
		*/
		isVisible?(): boolean;
		/** [Method] Removes this node from its parent
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface this
		*/
		remove?( destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Removes all child nodes from this node
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface this
		*/
		removeAll?( destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Removes a child node from this node
		* @param node Ext.data.NodeInterface The node to remove.
		* @param destroy Boolean true to destroy the node upon removal.
		* @returns Ext.data.NodeInterface The removed node.
		*/
		removeChild?( node?:Ext.data.INodeInterface, destroy?:boolean ): Ext.data.INodeInterface;
		/** [Method] Replaces one child node in this node with another
		* @param newChild Ext.data.NodeInterface The replacement node.
		* @param oldChild Ext.data.NodeInterface The node to replace.
		* @returns Ext.data.NodeInterface The replaced node.
		*/
		replaceChild?( newChild?:Ext.data.INodeInterface, oldChild?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Sorts this nodes children using the supplied sort function
		* @param sortFn Function A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order.
		* @param recursive Boolean Whether or not to apply this sort recursively.
		* @param suppressEvent Boolean Set to true to not fire a sort event.
		*/
		sort?( sortFn?:any, recursive?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Updates general data of this node like isFirst isLast depth
		* @param silent Object
		* @returns Boolean
		*/
		updateInfo?( silent?:any ): boolean;
	}
	export class Node {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] This method allows you to decorate a Record s prototype to implement the NodeInterface
		* @param record Ext.data.Model The Record you want to decorate the prototype of.
		*/
		static decorate( record?:Ext.data.IModel ): void;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.data {
	export interface INodeStore extends Ext.data.IStore {
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Ext.data.Model) */
		node?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		recursive?: boolean;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Method] Returns the value of filters
		* @returns Object
		*/
		getFilters?(): any;
		/** [Method] Returns the value of folderSort
		* @returns Boolean
		*/
		getFolderSort?(): boolean;
		/** [Method] Returns the value of node
		* @returns Ext.data.Model
		*/
		getNode?(): Ext.data.IModel;
		/** [Method] Returns the value of recursive
		* @returns Boolean
		*/
		getRecursive?(): boolean;
		/** [Method] Returns the value of rootVisible
		* @returns Boolean
		*/
		getRootVisible?(): boolean;
		/** [Method] Returns the value of sorters
		* @returns Object
		*/
		getSorters?(): any;
		/** [Method]
		* @param node Object
		* @returns Boolean
		*/
		isVisible?( node?:any ): boolean;
		/** [Method] Sets the value of filters
		* @param filters Object The new value.
		*/
		setFilters?( filters?:any ): void;
		/** [Method] Sets the value of folderSort
		* @param folderSort Boolean The new value.
		*/
		setFolderSort?( folderSort?:boolean ): void;
		/** [Method] Sets the value of node
		* @param node Ext.data.Model The new value.
		*/
		setNode?( node?:Ext.data.IModel ): void;
		/** [Method] Sets the value of recursive
		* @param recursive Boolean The new value.
		*/
		setRecursive?( recursive?:boolean ): void;
		/** [Method] Sets the value of rootVisible
		* @param rootVisible Boolean The new value.
		*/
		setRootVisible?( rootVisible?:boolean ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Object The new value.
		*/
		setSorters?( sorters?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IOperation extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Ext.util.Filter[]) */
		filters?: Ext.util.IFilter[];
		/** [Config Option] (Boolean) */
		group?: boolean;
		/** [Config Option] (Ext.util.Grouper) */
		grouper?: Ext.util.IGrouper;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Ext.data.Model) */
		model?: Ext.data.IModel;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Array) */
		records?: any[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Object) */
		response?: any;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Ext.util.Sorter[]) */
		sorters?: Ext.util.ISorter[];
		/** [Config Option] (Number) */
		start?: number;
		/** [Config Option] (Boolean) */
		synchronous?: boolean;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Method] Checks whether this operation should cause writing to occur
		* @returns Boolean Whether the operation should cause a write to occur.
		*/
		allowWrite?(): boolean;
		/** [Method] Returns the value of action
		* @returns String
		*/
		getAction?(): string;
		/** [Method] Returns the value of addRecords
		* @returns Boolean
		*/
		getAddRecords?(): boolean;
		/** [Method] Returns the value of batch
		* @returns Ext.data.Batch
		*/
		getBatch?(): Ext.data.IBatch;
		/** [Method] Returns the value of callback
		* @returns Function
		*/
		getCallback?(): any;
		/** [Method] Returns the error string or object that was set using setException
		* @returns String/Object The error object.
		*/
		getError?(): any;
		/** [Method] Returns the value of filters
		* @returns Ext.util.Filter[]
		*/
		getFilters?(): Ext.util.IFilter[];
		/** [Method] Returns the value of grouper
		* @returns Ext.util.Grouper
		*/
		getGrouper?(): Ext.util.IGrouper;
		/** [Method] Returns the value of limit
		* @returns Number
		*/
		getLimit?(): number;
		/** [Method] Returns the value of model
		* @returns Ext.data.Model
		*/
		getModel?(): Ext.data.IModel;
		/** [Method] Returns the value of node
		* @returns Object
		*/
		getNode?(): any;
		/** [Method] Returns the value of page
		* @returns Object
		*/
		getPage?(): any;
		/** [Method] Returns the value of params
		* @returns Object
		*/
		getParams?(): any;
		/** [Method] Returns the value of request
		* @returns Ext.data.Request
		*/
		getRequest?(): Ext.data.IRequest;
		/** [Method] Returns the value of response
		* @returns Object
		*/
		getResponse?(): any;
		/** [Method] Returns the value of resultSet
		* @returns Ext.data.ResultSet
		*/
		getResultSet?(): Ext.data.IResultSet;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Returns the value of sorters
		* @returns Ext.util.Sorter[]
		*/
		getSorters?(): Ext.util.ISorter[];
		/** [Method] Returns the value of start
		* @returns Number
		*/
		getStart?(): number;
		/** [Method] Returns the value of synchronous
		* @returns Boolean
		*/
		getSynchronous?(): boolean;
		/** [Method] Returns the value of url
		* @returns Object
		*/
		getUrl?(): any;
		/** [Method] Returns the value of withCredentials
		* @returns Boolean
		*/
		getWithCredentials?(): boolean;
		/** [Method] Returns true if this Operation encountered an exception see also getError
		* @returns Boolean true if there was an exception.
		*/
		hasException?(): boolean;
		/** [Method] Returns true if the Operation has been completed
		* @returns Boolean true if the Operation is complete
		*/
		isComplete?(): boolean;
		/** [Method] Returns true if the Operation has been started but has not yet completed
		* @returns Boolean true if the Operation is currently running
		*/
		isRunning?(): boolean;
		/** [Method] Returns true if the Operation has been started
		* @returns Boolean true if the Operation has started
		*/
		isStarted?(): boolean;
		/** [Method] Sets the value of action
		* @param action String The new value.
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of addRecords
		* @param addRecords Boolean The new value.
		*/
		setAddRecords?( addRecords?:boolean ): void;
		/** [Method] Sets the value of batch
		* @param batch Ext.data.Batch The new value.
		*/
		setBatch?( batch?:Ext.data.IBatch ): void;
		/** [Method] Sets the value of callback
		* @param callback Function The new value.
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Marks the Operation as completed  */
		setCompleted?(): void;
		/** [Method] Marks the Operation as having experienced an exception
		* @param error String/Object error string/object
		*/
		setException?( error?:any ): void;
		/** [Method] Sets the value of filters
		* @param filters Ext.util.Filter[] The new value.
		*/
		setFilters?( filters?:Ext.util.IFilter[] ): void;
		/** [Method] Sets the value of grouper
		* @param grouper Ext.util.Grouper The new value.
		*/
		setGrouper?( grouper?:Ext.util.IGrouper ): void;
		/** [Method] Sets the value of limit
		* @param limit Number The new value.
		*/
		setLimit?( limit?:number ): void;
		/** [Method] Sets the value of model
		* @param model Ext.data.Model The new value.
		*/
		setModel?( model?:Ext.data.IModel ): void;
		/** [Method] Sets the value of node
		* @param node Object The new value.
		*/
		setNode?( node?:any ): void;
		/** [Method] Sets the value of page
		* @param page Object The new value.
		*/
		setPage?( page?:any ): void;
		/** [Method] Sets the value of params
		* @param params Object The new value.
		*/
		setParams?( params?:any ): void;
		/** [Method] Sets the value of records
		* @param records Array The new value.
		*/
		setRecords?( records?:any[] ): void;
		/** [Method] Sets the value of request
		* @param request Ext.data.Request The new value.
		*/
		setRequest?( request?:Ext.data.IRequest ): void;
		/** [Method] Sets the value of response
		* @param response Object The new value.
		*/
		setResponse?( response?:any ): void;
		/** [Method] Sets the value of resultSet
		* @param resultSet Ext.data.ResultSet The new value.
		*/
		setResultSet?( resultSet?:Ext.data.IResultSet ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Ext.util.Sorter[] The new value.
		*/
		setSorters?( sorters?:Ext.util.ISorter[] ): void;
		/** [Method] Sets the value of start
		* @param start Number The new value.
		*/
		setStart?( start?:number ): void;
		/** [Method] Marks the Operation as started  */
		setStarted?(): void;
		/** [Method] Marks the Operation as successful  */
		setSuccessful?(): void;
		/** [Method] Sets the value of synchronous
		* @param synchronous Boolean The new value.
		*/
		setSynchronous?( synchronous?:boolean ): void;
		/** [Method] Sets the value of url
		* @param url Object The new value.
		*/
		setUrl?( url?:any ): void;
		/** [Method] Sets the value of withCredentials
		* @param withCredentials Boolean The new value.
		*/
		setWithCredentials?( withCredentials?:boolean ): void;
		/** [Method] Returns true if the Operation has completed and was successful
		* @returns Boolean true if successful
		*/
		wasSuccessful?(): boolean;
	}
}
declare namespace Ext.data.plugin {
	export interface IBuffered extends Ext.IEvented {
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Number) */
		purgePageCount?: number;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
		/** [Method] Returns the value of bufferedCollection
		* @returns Object
		*/
		getBufferedCollection?(): any;
		/** [Method] Returns the value of leadingBufferZone
		* @returns Number
		*/
		getLeadingBufferZone?(): number;
		/** [Method] Determines the page from a record index
		* @param index Number The record index
		* @returns Number The page the record belongs to
		*/
		getPageFromRecordIndex?( index?:number ): number;
		/** [Method] Returns the value of purgePageCount
		* @returns Number
		*/
		getPurgePageCount?(): number;
		/** [Method] Returns the value of store
		* @returns Object
		*/
		getStore?(): any;
		/** [Method] Returns the value of trailingBufferZone
		* @returns Number
		*/
		getTrailingBufferZone?(): number;
		/** [Method] Returns the value of viewSize
		* @returns Number
		*/
		getViewSize?(): number;
		/** [Method] Prefetches data into the store using its configured proxy
		* @param options Object config object, passed into the Ext.data.Operation object before loading. See load
		*/
		prefetch?( options?:any ): void;
		/** [Method] Prefetches a page of data
		* @param page Number The page to prefetch
		* @param options Object config object, passed into the Ext.data.Operation object before loading. See load
		*/
		prefetchPage?( page?:number, options?:any ): void;
		/** [Method] Sets the value of bufferedCollection
		* @param bufferedCollection Object The new value.
		*/
		setBufferedCollection?( bufferedCollection?:any ): void;
		/** [Method] Sets the value of leadingBufferZone
		* @param leadingBufferZone Number The new value.
		*/
		setLeadingBufferZone?( leadingBufferZone?:number ): void;
		/** [Method] Sets the value of purgePageCount
		* @param purgePageCount Number The new value.
		*/
		setPurgePageCount?( purgePageCount?:number ): void;
		/** [Method] Sets the value of store
		* @param store Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of trailingBufferZone
		* @param trailingBufferZone Number The new value.
		*/
		setTrailingBufferZone?( trailingBufferZone?:number ): void;
		/** [Method] Sets the value of viewSize
		* @param viewSize Number The new value.
		*/
		setViewSize?( viewSize?:number ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IAjax extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request
		* @param operation Ext.data.Operation
		* @param callback Function
		* @param scope Object
		* @returns Object
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers
		* @returns Object
		*/
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request
		* @param request Ext.data.Request The request object.
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE').
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password
		* @returns String
		*/
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Boolean
		*/
		getUseDefaultXhrHeader?(): boolean;
		/** [Method] Returns the value of username
		* @returns String
		*/
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials
		* @returns Boolean
		*/
		getWithCredentials?(): boolean;
		/** [Method] Sets the value of headers
		* @param headers Object The new value.
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Boolean The new value.
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials
		* @param withCredentials Boolean The new value.
		*/
		setWithCredentials?( withCredentials?:boolean ): void;
	}
}
declare namespace Ext.data {
	export interface IHttpProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request
		* @param operation Ext.data.Operation
		* @param callback Function
		* @param scope Object
		* @returns Object
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers
		* @returns Object
		*/
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request
		* @param request Ext.data.Request The request object.
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE').
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password
		* @returns String
		*/
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Boolean
		*/
		getUseDefaultXhrHeader?(): boolean;
		/** [Method] Returns the value of username
		* @returns String
		*/
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials
		* @returns Boolean
		*/
		getWithCredentials?(): boolean;
		/** [Method] Sets the value of headers
		* @param headers Object The new value.
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Boolean The new value.
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials
		* @param withCredentials Boolean The new value.
		*/
		setWithCredentials?( withCredentials?:boolean ): void;
	}
}
declare namespace Ext.data {
	export interface IAjaxProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request
		* @param operation Ext.data.Operation
		* @param callback Function
		* @param scope Object
		* @returns Object
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers
		* @returns Object
		*/
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request
		* @param request Ext.data.Request The request object.
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE').
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password
		* @returns String
		*/
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Boolean
		*/
		getUseDefaultXhrHeader?(): boolean;
		/** [Method] Returns the value of username
		* @returns String
		*/
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials
		* @returns Boolean
		*/
		getWithCredentials?(): boolean;
		/** [Method] Sets the value of headers
		* @param headers Object The new value.
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Boolean The new value.
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials
		* @param withCredentials Boolean The new value.
		*/
		setWithCredentials?( withCredentials?:boolean ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IClient extends Ext.data.proxy.IProxy {
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
	}
}
declare namespace Ext.proxy {
	export interface IClientProxy extends Ext.data.proxy.IProxy {
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IDirect extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Method] Generates a url based on a given Ext data Request object
		* @returns String The url
		*/
		buildUrl?(): string;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of directFn
		* @returns Function/String
		*/
		getDirectFn?(): any;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		getExtraParams?(): any;
		/** [Method] Returns the value of paramOrder
		* @returns String/String[]
		*/
		getParamOrder?(): any;
		/** [Method] Returns the value of paramsAsHash
		* @returns Boolean
		*/
		getParamsAsHash?(): boolean;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of directFn
		* @param directFn Function/String The new value.
		*/
		setDirectFn?( directFn?:any ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of paramOrder
		* @param paramOrder String/String[] The new value.
		*/
		setParamOrder?( paramOrder?:any ): void;
		/** [Method] Sets the value of paramsAsHash
		* @param paramsAsHash Boolean The new value.
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;
	}
}
declare namespace Ext.data {
	export interface IDirectProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Method] Generates a url based on a given Ext data Request object
		* @returns String The url
		*/
		buildUrl?(): string;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of directFn
		* @returns Function/String
		*/
		getDirectFn?(): any;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		getExtraParams?(): any;
		/** [Method] Returns the value of paramOrder
		* @returns String/String[]
		*/
		getParamOrder?(): any;
		/** [Method] Returns the value of paramsAsHash
		* @returns Boolean
		*/
		getParamsAsHash?(): boolean;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of directFn
		* @param directFn Function/String The new value.
		*/
		setDirectFn?( directFn?:any ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of paramOrder
		* @param paramOrder String/String[] The new value.
		*/
		setParamOrder?( paramOrder?:any ): void;
		/** [Method] Sets the value of paramsAsHash
		* @param paramsAsHash Boolean The new value.
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IJsonP extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts the current server request if one is currently running  */
		abort?(): void;
		/** [Method] Generates a url based on a given Ext data Request object
		* @param request Ext.data.Request The request object.
		* @returns String The url.
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] Performs the read request to the remote domain
		* @param operation Ext.data.Operation The Operation object to execute.
		* @param callback Function A callback function to execute when the Operation has been completed.
		* @param scope Object The scope to execute the callback in.
		* @returns Object
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of autoAppendParams
		* @returns Boolean
		*/
		getAutoAppendParams?(): boolean;
		/** [Method] Returns the value of callbackKey
		* @returns String
		*/
		getCallbackKey?(): string;
		/** [Method] Returns the value of defaultWriterType
		* @returns String
		*/
		getDefaultWriterType?(): string;
		/** [Method] Returns the value of recordParam
		* @returns String
		*/
		getRecordParam?(): string;
		/** [Method] Sets the value of autoAppendParams
		* @param autoAppendParams Boolean The new value.
		*/
		setAutoAppendParams?( autoAppendParams?:boolean ): void;
		/** [Method] Sets the value of callbackKey
		* @param callbackKey String The new value.
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of defaultWriterType
		* @param defaultWriterType String The new value.
		*/
		setDefaultWriterType?( defaultWriterType?:string ): void;
		/** [Method] Sets the value of recordParam
		* @param recordParam String The new value.
		*/
		setRecordParam?( recordParam?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IScriptTagProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts the current server request if one is currently running  */
		abort?(): void;
		/** [Method] Generates a url based on a given Ext data Request object
		* @param request Ext.data.Request The request object.
		* @returns String The url.
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] Performs the read request to the remote domain
		* @param operation Ext.data.Operation The Operation object to execute.
		* @param callback Function A callback function to execute when the Operation has been completed.
		* @param scope Object The scope to execute the callback in.
		* @returns Object
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of autoAppendParams
		* @returns Boolean
		*/
		getAutoAppendParams?(): boolean;
		/** [Method] Returns the value of callbackKey
		* @returns String
		*/
		getCallbackKey?(): string;
		/** [Method] Returns the value of defaultWriterType
		* @returns String
		*/
		getDefaultWriterType?(): string;
		/** [Method] Returns the value of recordParam
		* @returns String
		*/
		getRecordParam?(): string;
		/** [Method] Sets the value of autoAppendParams
		* @param autoAppendParams Boolean The new value.
		*/
		setAutoAppendParams?( autoAppendParams?:boolean ): void;
		/** [Method] Sets the value of callbackKey
		* @param callbackKey String The new value.
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of defaultWriterType
		* @param defaultWriterType String The new value.
		*/
		setDefaultWriterType?( defaultWriterType?:string ): void;
		/** [Method] Sets the value of recordParam
		* @param recordParam String The new value.
		*/
		setRecordParam?( recordParam?:string ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface ILocalStorage extends Ext.data.proxy.IWebStorage {
	}
}
declare namespace Ext.data {
	export interface ILocalStorageProxy extends Ext.data.proxy.IWebStorage {
	}
}
declare namespace Ext.data.proxy {
	export interface IMemory extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Reads data from the configured data object
		* @param operation Ext.data.Operation The read Operation
		* @param callback Function The callback to call when reading has completed
		* @param scope Object The scope to call the callback function in
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IMemoryProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Reads data from the configured data object
		* @param operation Ext.data.Operation The read Operation
		* @param callback Function The callback to call when reading has completed
		* @param scope Object The scope to call the callback function in
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder
		* @param options Object Object containing one or more properties supported by the batch method:
		* @returns Ext.data.Batch The newly created Batch
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions
		* @returns Boolean
		*/
		getBatchActions?(): boolean;
		/** [Method] Returns the value of batchOrder
		* @returns String
		*/
		getBatchOrder?(): string;
		/** [Method] Returns the value of model
		* @returns String/Ext.data.Model
		*/
		getModel?(): any;
		/** [Method] Returns the value of reader
		* @returns Object/String/Ext.data.reader.Reader
		*/
		getReader?(): any;
		/** [Method] Returns the value of writer
		* @returns Object/String/Ext.data.writer.Writer
		*/
		getWriter?(): any;
		/** [Method] Performs the given read operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions
		* @param batchActions Boolean The new value.
		*/
		setBatchActions?( batchActions?:boolean ): void;
		/** [Method] Sets the value of batchOrder
		* @param batchOrder String The new value.
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model
		* @param model String/Ext.data.Model The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of reader
		* @param reader Object/String/Ext.data.reader.Reader The new value.
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer
		* @param writer Object/String/Ext.data.writer.Writer The new value.
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IDataProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder
		* @param options Object Object containing one or more properties supported by the batch method:
		* @returns Ext.data.Batch The newly created Batch
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions
		* @returns Boolean
		*/
		getBatchActions?(): boolean;
		/** [Method] Returns the value of batchOrder
		* @returns String
		*/
		getBatchOrder?(): string;
		/** [Method] Returns the value of model
		* @returns String/Ext.data.Model
		*/
		getModel?(): any;
		/** [Method] Returns the value of reader
		* @returns Object/String/Ext.data.reader.Reader
		*/
		getReader?(): any;
		/** [Method] Returns the value of writer
		* @returns Object/String/Ext.data.writer.Writer
		*/
		getWriter?(): any;
		/** [Method] Performs the given read operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions
		* @param batchActions Boolean The new value.
		*/
		setBatchActions?( batchActions?:boolean ): void;
		/** [Method] Sets the value of batchOrder
		* @param batchOrder String The new value.
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model
		* @param model String/Ext.data.Model The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of reader
		* @param reader Object/String/Ext.data.reader.Reader The new value.
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer
		* @param writer Object/String/Ext.data.writer.Writer The new value.
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder
		* @param options Object Object containing one or more properties supported by the batch method:
		* @returns Ext.data.Batch The newly created Batch
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions
		* @returns Boolean
		*/
		getBatchActions?(): boolean;
		/** [Method] Returns the value of batchOrder
		* @returns String
		*/
		getBatchOrder?(): string;
		/** [Method] Returns the value of model
		* @returns String/Ext.data.Model
		*/
		getModel?(): any;
		/** [Method] Returns the value of reader
		* @returns Object/String/Ext.data.reader.Reader
		*/
		getReader?(): any;
		/** [Method] Returns the value of writer
		* @returns Object/String/Ext.data.writer.Writer
		*/
		getWriter?(): any;
		/** [Method] Performs the given read operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions
		* @param batchActions Boolean The new value.
		*/
		setBatchActions?( batchActions?:boolean ): void;
		/** [Method] Sets the value of batchOrder
		* @param batchOrder String The new value.
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model
		* @param model String/Ext.data.Model The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of reader
		* @param reader Object/String/Ext.data.reader.Reader The new value.
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer
		* @param writer Object/String/Ext.data.writer.Writer The new value.
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation
		* @param operation Ext.data.Operation The Operation to perform
		* @param callback Function Callback function to be called when the Operation has completed (whether successful or not)
		* @param scope Object Scope to execute the callback function in
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IRest extends Ext.data.proxy.IAjax {
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Returns the value of actionMethods
		* @returns Object
		*/
		getActionMethods?(): any;
		/** [Method] Returns the value of appendId
		* @returns Boolean
		*/
		getAppendId?(): boolean;
		/** [Method] Returns the value of batchActions
		* @returns Boolean
		*/
		getBatchActions?(): boolean;
		/** [Method] Returns the value of format
		* @returns String
		*/
		getFormat?(): string;
		/** [Method] Sets the value of actionMethods
		* @param actionMethods Object The new value.
		*/
		setActionMethods?( actionMethods?:any ): void;
		/** [Method] Sets the value of appendId
		* @param appendId Boolean The new value.
		*/
		setAppendId?( appendId?:boolean ): void;
		/** [Method] Sets the value of batchActions
		* @param batchActions Boolean The new value.
		*/
		setBatchActions?( batchActions?:boolean ): void;
		/** [Method] Sets the value of format
		* @param format String The new value.
		*/
		setFormat?( format?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IRestProxy extends Ext.data.proxy.IAjax {
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Returns the value of actionMethods
		* @returns Object
		*/
		getActionMethods?(): any;
		/** [Method] Returns the value of appendId
		* @returns Boolean
		*/
		getAppendId?(): boolean;
		/** [Method] Returns the value of batchActions
		* @returns Boolean
		*/
		getBatchActions?(): boolean;
		/** [Method] Returns the value of format
		* @returns String
		*/
		getFormat?(): string;
		/** [Method] Sets the value of actionMethods
		* @param actionMethods Object The new value.
		*/
		setActionMethods?( actionMethods?:any ): void;
		/** [Method] Sets the value of appendId
		* @param appendId Boolean The new value.
		*/
		setAppendId?( appendId?:boolean ): void;
		/** [Method] Sets the value of batchActions
		* @param batchActions Boolean The new value.
		*/
		setBatchActions?( batchActions?:boolean ): void;
		/** [Method] Sets the value of format
		* @param format String The new value.
		*/
		setFormat?( format?:string ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IServer extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Boolean) */
		enablePagingParams?: boolean;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed
		* @param request Ext.data.Request The Request object
		* @param success Boolean True if the request was successful
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:boolean ): void;
		/** [Method] Creates and returns an Ext data Request object based on the options passed by the Store that this Proxy is attached to
		* @param operation Ext.data.Operation The Operation object to execute
		* @returns Ext.data.Request The request object
		*/
		buildRequest?( operation?:Ext.data.IOperation ): Ext.data.IRequest;
		/** [Method] Generates a url based on a given Ext data Request object
		* @param request Ext.data.Request The request object
		* @returns String The url
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest
		* @param operation Ext.data.Operation The Ext.data.Operation object
		* @param callback Function The callback function to call when the Operation has completed
		* @param scope Object The scope in which to execute the callback
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url
		* @param filters Ext.util.Filter[] The array of Filter objects
		* @returns String The encoded filters
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;
		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url
		* @param sorters Ext.util.Sorter[] The array of Sorter objects
		* @returns String The encoded sorters
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[] ): string;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of cacheString
		* @returns String
		*/
		getCacheString?(): string;
		/** [Method] Returns the value of directionParam
		* @returns String
		*/
		getDirectionParam?(): string;
		/** [Method] Returns the value of enablePagingParams
		* @returns Boolean
		*/
		getEnablePagingParams?(): boolean;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		getExtraParams?(): any;
		/** [Method] Returns the value of filterParam
		* @returns String
		*/
		getFilterParam?(): string;
		/** [Method] Returns the value of groupParam
		* @returns String
		*/
		getGroupParam?(): string;
		/** [Method] Returns the value of limitParam
		* @returns String
		*/
		getLimitParam?(): string;
		/** [Method] Returns the value of noCache
		* @returns Boolean
		*/
		getNoCache?(): boolean;
		/** [Method] Returns the value of pageParam
		* @returns String
		*/
		getPageParam?(): string;
		/** [Method] Returns the value of simpleSortMode
		* @returns Boolean
		*/
		getSimpleSortMode?(): boolean;
		/** [Method] Returns the value of sortParam
		* @returns String
		*/
		getSortParam?(): string;
		/** [Method] Returns the value of startParam
		* @returns String
		*/
		getStartParam?(): string;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] This method handles the processing of the response and is usually overridden by subclasses to do additional processing
		* @param success Boolean Whether or not this request was successful
		* @param operation Ext.data.Operation The operation we made this request for
		* @param request Ext.data.Request The request that was made
		* @param response Object The response that we got
		* @param callback Function The callback to be fired onces the response is processed
		* @param scope Object The scope in which we call the callback
		*/
		processResponse?( success?:boolean, operation?:Ext.data.IOperation, request?:Ext.data.IRequest, response?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given read operation  */
		read?(): void;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of cacheString
		* @param cacheString String The new value.
		*/
		setCacheString?( cacheString?:string ): void;
		/** [Method] Sets the value of directionParam
		* @param directionParam String The new value.
		*/
		setDirectionParam?( directionParam?:string ): void;
		/** [Method] Sets the value of enablePagingParams
		* @param enablePagingParams Boolean The new value.
		*/
		setEnablePagingParams?( enablePagingParams?:boolean ): void;
		/** [Method] Sets a value in the underlying extraParams
		* @param name String The key for the new value
		* @param value Object The value
		*/
		setExtraParam?( name?:string, value?:any ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of filterParam
		* @param filterParam String The new value.
		*/
		setFilterParam?( filterParam?:string ): void;
		/** [Method] Sets the value of groupParam
		* @param groupParam String The new value.
		*/
		setGroupParam?( groupParam?:string ): void;
		/** [Method] Sets the value of limitParam
		* @param limitParam String The new value.
		*/
		setLimitParam?( limitParam?:string ): void;
		/** [Method] Sets the value of noCache
		* @param noCache Boolean The new value.
		*/
		setNoCache?( noCache?:boolean ): void;
		/** [Method] Sets the value of pageParam
		* @param pageParam String The new value.
		*/
		setPageParam?( pageParam?:string ): void;
		/** [Method] Sets the value of simpleSortMode
		* @param simpleSortMode Boolean The new value.
		*/
		setSimpleSortMode?( simpleSortMode?:boolean ): void;
		/** [Method] Sets the value of sortParam
		* @param sortParam String The new value.
		*/
		setSortParam?( sortParam?:string ): void;
		/** [Method] Sets the value of startParam
		* @param startParam String The new value.
		*/
		setStartParam?( startParam?:string ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Performs the given update operation  */
		update?(): void;
	}
}
declare namespace Ext.data {
	export interface IServerProxy extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Boolean) */
		enablePagingParams?: boolean;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed
		* @param request Ext.data.Request The Request object
		* @param success Boolean True if the request was successful
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:boolean ): void;
		/** [Method] Creates and returns an Ext data Request object based on the options passed by the Store that this Proxy is attached to
		* @param operation Ext.data.Operation The Operation object to execute
		* @returns Ext.data.Request The request object
		*/
		buildRequest?( operation?:Ext.data.IOperation ): Ext.data.IRequest;
		/** [Method] Generates a url based on a given Ext data Request object
		* @param request Ext.data.Request The request object
		* @returns String The url
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest
		* @param operation Ext.data.Operation The Ext.data.Operation object
		* @param callback Function The callback function to call when the Operation has completed
		* @param scope Object The scope in which to execute the callback
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url
		* @param filters Ext.util.Filter[] The array of Filter objects
		* @returns String The encoded filters
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;
		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url
		* @param sorters Ext.util.Sorter[] The array of Sorter objects
		* @returns String The encoded sorters
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[] ): string;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of cacheString
		* @returns String
		*/
		getCacheString?(): string;
		/** [Method] Returns the value of directionParam
		* @returns String
		*/
		getDirectionParam?(): string;
		/** [Method] Returns the value of enablePagingParams
		* @returns Boolean
		*/
		getEnablePagingParams?(): boolean;
		/** [Method] Returns the value of extraParams
		* @returns Object
		*/
		getExtraParams?(): any;
		/** [Method] Returns the value of filterParam
		* @returns String
		*/
		getFilterParam?(): string;
		/** [Method] Returns the value of groupParam
		* @returns String
		*/
		getGroupParam?(): string;
		/** [Method] Returns the value of limitParam
		* @returns String
		*/
		getLimitParam?(): string;
		/** [Method] Returns the value of noCache
		* @returns Boolean
		*/
		getNoCache?(): boolean;
		/** [Method] Returns the value of pageParam
		* @returns String
		*/
		getPageParam?(): string;
		/** [Method] Returns the value of simpleSortMode
		* @returns Boolean
		*/
		getSimpleSortMode?(): boolean;
		/** [Method] Returns the value of sortParam
		* @returns String
		*/
		getSortParam?(): string;
		/** [Method] Returns the value of startParam
		* @returns String
		*/
		getStartParam?(): string;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] This method handles the processing of the response and is usually overridden by subclasses to do additional processing
		* @param success Boolean Whether or not this request was successful
		* @param operation Ext.data.Operation The operation we made this request for
		* @param request Ext.data.Request The request that was made
		* @param response Object The response that we got
		* @param callback Function The callback to be fired onces the response is processed
		* @param scope Object The scope in which we call the callback
		*/
		processResponse?( success?:boolean, operation?:Ext.data.IOperation, request?:Ext.data.IRequest, response?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given read operation  */
		read?(): void;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of cacheString
		* @param cacheString String The new value.
		*/
		setCacheString?( cacheString?:string ): void;
		/** [Method] Sets the value of directionParam
		* @param directionParam String The new value.
		*/
		setDirectionParam?( directionParam?:string ): void;
		/** [Method] Sets the value of enablePagingParams
		* @param enablePagingParams Boolean The new value.
		*/
		setEnablePagingParams?( enablePagingParams?:boolean ): void;
		/** [Method] Sets a value in the underlying extraParams
		* @param name String The key for the new value
		* @param value Object The value
		*/
		setExtraParam?( name?:string, value?:any ): void;
		/** [Method] Sets the value of extraParams
		* @param extraParams Object The new value.
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of filterParam
		* @param filterParam String The new value.
		*/
		setFilterParam?( filterParam?:string ): void;
		/** [Method] Sets the value of groupParam
		* @param groupParam String The new value.
		*/
		setGroupParam?( groupParam?:string ): void;
		/** [Method] Sets the value of limitParam
		* @param limitParam String The new value.
		*/
		setLimitParam?( limitParam?:string ): void;
		/** [Method] Sets the value of noCache
		* @param noCache Boolean The new value.
		*/
		setNoCache?( noCache?:boolean ): void;
		/** [Method] Sets the value of pageParam
		* @param pageParam String The new value.
		*/
		setPageParam?( pageParam?:string ): void;
		/** [Method] Sets the value of simpleSortMode
		* @param simpleSortMode Boolean The new value.
		*/
		setSimpleSortMode?( simpleSortMode?:boolean ): void;
		/** [Method] Sets the value of sortParam
		* @param sortParam String The new value.
		*/
		setSortParam?( sortParam?:string ): void;
		/** [Method] Sets the value of startParam
		* @param startParam String The new value.
		*/
		setStartParam?( startParam?:string ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Performs the given update operation  */
		update?(): void;
	}
}
declare namespace Ext.data.proxy {
	export interface ISessionStorage extends Ext.data.proxy.IWebStorage {
	}
}
declare namespace Ext.data {
	export interface ISessionStorageProxy extends Ext.data.proxy.IWebStorage {
	}
}
declare namespace Ext.data.proxy {
	export interface ISql extends Ext.data.proxy.IClient {
		/** [Config Option] (String) */
		database?: string;
		/** [Config Option] (String) */
		table?: string;
		/** [Method] Performs the given create operation
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of columns
		* @returns String
		*/
		getColumns?(): string;
		/** [Method] Returns the value of database
		* @returns String
		*/
		getDatabase?(): string;
		/** [Method] Returns the value of defaultDateFormat
		* @returns String
		*/
		getDefaultDateFormat?(): string;
		/** [Method] Formats the data for each record before sending it to the server
		* @param record Object The record that we are writing to the server.
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record.
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of table
		* @returns String
		*/
		getTable?(): string;
		/** [Method] Returns the value of tableExists
		* @returns Boolean
		*/
		getTableExists?(): boolean;
		/** [Method] Returns the value of uniqueIdStrategy
		* @returns Boolean
		*/
		getUniqueIdStrategy?(): boolean;
		/** [Method] Performs the given read operation
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of columns
		* @param columns String The new value.
		*/
		setColumns?( columns?:string ): void;
		/** [Method] Sets the value of database
		* @param database String The new value.
		*/
		setDatabase?( database?:string ): void;
		/** [Method] Sets the value of defaultDateFormat
		* @param defaultDateFormat String The new value.
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of table
		* @param table String The new value.
		*/
		setTable?( table?:string ): void;
		/** [Method] Sets the value of tableExists
		* @param tableExists Boolean The new value.
		*/
		setTableExists?( tableExists?:boolean ): void;
		/** [Method] Sets the value of uniqueIdStrategy
		* @param uniqueIdStrategy Boolean The new value.
		*/
		setUniqueIdStrategy?( uniqueIdStrategy?:boolean ): void;
		/** [Method] Performs the given update operation
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data.proxy {
	export interface IWebStorage extends Ext.data.proxy.IClient {
		/** [Config Option] (Boolean) */
		enablePagingParams?: boolean;
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;
		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] inherit
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of defaultDateFormat
		* @returns String
		*/
		getDefaultDateFormat?(): string;
		/** [Method] Returns the value of enablePagingParams
		* @returns Boolean
		*/
		getEnablePagingParams?(): boolean;
		/** [Method] Returns the value of id
		* @returns String
		*/
		getId?(): string;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of defaultDateFormat
		* @param defaultDateFormat String The new value.
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of enablePagingParams
		* @param enablePagingParams Boolean The new value.
		*/
		setEnablePagingParams?( enablePagingParams?:boolean ): void;
		/** [Method] Sets the value of id
		* @param id String The new value.
		*/
		setId?( id?:string ): void;
		/** [Method] Saves the given record in the Proxy
		* @param record Ext.data.Model The model instance
		* @param id String The id to save the record under (defaults to the value of the record's getId() function)
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IWebStorageProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (Boolean) */
		enablePagingParams?: boolean;
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;
		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] inherit
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of defaultDateFormat
		* @returns String
		*/
		getDefaultDateFormat?(): string;
		/** [Method] Returns the value of enablePagingParams
		* @returns Boolean
		*/
		getEnablePagingParams?(): boolean;
		/** [Method] Returns the value of id
		* @returns String
		*/
		getId?(): string;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of defaultDateFormat
		* @param defaultDateFormat String The new value.
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of enablePagingParams
		* @param enablePagingParams Boolean The new value.
		*/
		setEnablePagingParams?( enablePagingParams?:boolean ): void;
		/** [Method] Sets the value of id
		* @param id String The new value.
		*/
		setId?( id?:string ): void;
		/** [Method] Saves the given record in the Proxy
		* @param record Ext.data.Model The model instance
		* @param id String The id to save the record under (defaults to the value of the record's getId() function)
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;
		/** [Method] inherit docs
		* @param operation Object
		* @param callback Object
		* @param scope Object
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.data.reader {
	export interface IArray extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty
		* @returns Object
		*/
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty
		* @returns Object
		*/
		getTotalProperty?(): any;
		/** [Method] Sets the value of successProperty
		* @param successProperty Object The new value.
		*/
		setSuccessProperty?( successProperty?:any ): void;
		/** [Method] Sets the value of totalProperty
		* @param totalProperty Object The new value.
		*/
		setTotalProperty?( totalProperty?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IArrayReader extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty
		* @returns Object
		*/
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty
		* @returns Object
		*/
		getTotalProperty?(): any;
		/** [Method] Sets the value of successProperty
		* @param successProperty Object The new value.
		*/
		setSuccessProperty?( successProperty?:any ): void;
		/** [Method] Sets the value of totalProperty
		* @param totalProperty Object The new value.
		*/
		setTotalProperty?( totalProperty?:any ): void;
	}
}
declare namespace Ext.data.reader {
	export interface IJson extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it
		* @param response Object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of useSimpleAccessors
		* @returns Boolean
		*/
		getUseSimpleAccessors?(): boolean;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
		/** [Method] Sets the value of useSimpleAccessors
		* @param useSimpleAccessors Boolean The new value.
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:boolean ): void;
	}
}
declare namespace Ext.data {
	export interface IJsonReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it
		* @param response Object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of useSimpleAccessors
		* @returns Boolean
		*/
		getUseSimpleAccessors?(): boolean;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
		/** [Method] Sets the value of useSimpleAccessors
		* @param useSimpleAccessors Boolean The new value.
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:boolean ): void;
	}
}
declare namespace Ext.data.reader {
	export interface IReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of clientIdProperty
		* @returns String
		*/
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty
		* @returns String
		*/
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes
		* @returns Boolean
		*/
		getImplicitIncludes?(): boolean;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty
		* @returns String
		*/
		getMessageProperty?(): string;
		/** [Method] Returns the value of model
		* @returns Object
		*/
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it
		* @param response Object The response object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty
		* @returns String
		*/
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty
		* @returns any
		*/
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty
		* @returns any
		*/
		getTotalProperty?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object
		* @returns Ext.data.ResultSet The parsed ResultSet object
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses
		* @param data Object The raw data object
		* @returns Ext.data.ResultSet A ResultSet object
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of clientIdProperty
		* @param clientIdProperty String The new value.
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty
		* @param idProperty String The new value.
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes
		* @param implicitIncludes Boolean The new value.
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty
		* @param messageProperty String The new value.
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model
		* @param model Object The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty
		* @param rootProperty String The new value.
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty
		* @param successProperty String The new value.
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty
		* @param totalProperty String The new value.
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of clientIdProperty
		* @returns String
		*/
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty
		* @returns String
		*/
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes
		* @returns Boolean
		*/
		getImplicitIncludes?(): boolean;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty
		* @returns String
		*/
		getMessageProperty?(): string;
		/** [Method] Returns the value of model
		* @returns Object
		*/
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it
		* @param response Object The response object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty
		* @returns String
		*/
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty
		* @returns any
		*/
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty
		* @returns any
		*/
		getTotalProperty?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object
		* @returns Ext.data.ResultSet The parsed ResultSet object
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses
		* @param data Object The raw data object
		* @returns Ext.data.ResultSet A ResultSet object
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of clientIdProperty
		* @param clientIdProperty String The new value.
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty
		* @param idProperty String The new value.
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes
		* @param implicitIncludes Boolean The new value.
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty
		* @param messageProperty String The new value.
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model
		* @param model Object The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty
		* @param rootProperty String The new value.
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty
		* @param successProperty String The new value.
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty
		* @param totalProperty String The new value.
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IDataReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of clientIdProperty
		* @returns String
		*/
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty
		* @returns String
		*/
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes
		* @returns Boolean
		*/
		getImplicitIncludes?(): boolean;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty
		* @returns String
		*/
		getMessageProperty?(): string;
		/** [Method] Returns the value of model
		* @returns Object
		*/
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it
		* @param response Object The response object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty
		* @returns String
		*/
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty
		* @returns any
		*/
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty
		* @returns any
		*/
		getTotalProperty?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object
		* @returns Ext.data.ResultSet The parsed ResultSet object
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses
		* @param data Object The raw data object
		* @returns Ext.data.ResultSet A ResultSet object
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of clientIdProperty
		* @param clientIdProperty String The new value.
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty
		* @param idProperty String The new value.
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes
		* @param implicitIncludes Boolean The new value.
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty
		* @param messageProperty String The new value.
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model
		* @param model Object The new value.
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty
		* @param rootProperty String The new value.
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty
		* @param successProperty String The new value.
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty
		* @param totalProperty String The new value.
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.data.reader {
	export interface IXml extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Normalizes the data object
		* @param data Object The raw data object.
		* @returns Object Returns the documentElement property of the data object if present, or the same object if not.
		*/
		getData?( data?:any ): any;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] inherit docs
		* @param response Object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Parses an XML document and returns a ResultSet containing the model instances
		* @param doc Object Parsed XML document.
		* @returns Ext.data.ResultSet The parsed result set.
		*/
		readRecords?( doc?:any ): Ext.data.IResultSet;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IXmlReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Normalizes the data object
		* @param data Object The raw data object.
		* @returns Object Returns the documentElement property of the data object if present, or the same object if not.
		*/
		getData?( data?:any ): any;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] inherit docs
		* @param response Object
		* @returns Object The useful data from the response
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Parses an XML document and returns a ResultSet containing the model instances
		* @param doc Object Parsed XML document.
		* @returns Ext.data.ResultSet The parsed result set.
		*/
		readRecords?( doc?:any ): Ext.data.IResultSet;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IRequest extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Object) */
		jsonData?: any;
		/** [Config Option] (Ext.data.JsonP) */
		jsonp?: Ext.data.IJsonP;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.Operation) */
		operation?: Ext.data.IOperation;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Config Option] (Object) */
		xmlData?: any;
		/** [Method] Returns the value of action
		* @returns String
		*/
		getAction?(): string;
		/** [Method] Returns the value of args
		* @returns Object
		*/
		getArgs?(): any;
		/** [Method] Returns the value of callback
		* @returns Object
		*/
		getCallback?(): any;
		/** [Method] Returns the value of callbackKey
		* @returns String
		*/
		getCallbackKey?(): string;
		/** [Method] Returns the value of directFn
		* @returns Object
		*/
		getDirectFn?(): any;
		/** [Method] Returns the value of disableCaching
		* @returns Boolean
		*/
		getDisableCaching?(): boolean;
		/** [Method] Returns the value of headers
		* @returns Object
		*/
		getHeaders?(): any;
		/** [Method] Returns the value of jsonData
		* @returns Object
		*/
		getJsonData?(): any;
		/** [Method] Returns the value of method
		* @returns String
		*/
		getMethod?(): string;
		/** [Method] Returns the value of operation
		* @returns Ext.data.Operation
		*/
		getOperation?(): Ext.data.IOperation;
		/** [Method] Returns the value of params
		* @returns Object
		*/
		getParams?(): any;
		/** [Method] Returns the value of password
		* @returns String
		*/
		getPassword?(): string;
		/** [Method] Returns the value of proxy
		* @returns Ext.data.proxy.Proxy
		*/
		getProxy?(): Ext.data.proxy.IProxy;
		/** [Method] Returns the value of records
		* @returns Object
		*/
		getRecords?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader
		* @returns Object
		*/
		getUseDefaultXhrHeader?(): any;
		/** [Method] Returns the value of username
		* @returns String
		*/
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials
		* @returns Boolean
		*/
		getWithCredentials?(): boolean;
		/** [Method] Returns the value of xmlData
		* @returns Object
		*/
		getXmlData?(): any;
		/** [Method] Sets the value of action
		* @param action String The new value.
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of args
		* @param args Object The new value.
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of callback
		* @param callback Object The new value.
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of callbackKey
		* @param callbackKey String The new value.
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of directFn
		* @param directFn Object The new value.
		*/
		setDirectFn?( directFn?:any ): void;
		/** [Method] Sets the value of disableCaching
		* @param disableCaching Boolean The new value.
		*/
		setDisableCaching?( disableCaching?:boolean ): void;
		/** [Method] Sets the value of headers
		* @param headers Object The new value.
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of jsonData
		* @param jsonData Object The new value.
		*/
		setJsonData?( jsonData?:any ): void;
		/** [Method] Sets the value of method
		* @param method String The new value.
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets the value of operation
		* @param operation Ext.data.Operation The new value.
		*/
		setOperation?( operation?:Ext.data.IOperation ): void;
		/** [Method] Sets the value of params
		* @param params Object The new value.
		*/
		setParams?( params?:any ): void;
		/** [Method] Sets the value of password
		* @param password String The new value.
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of proxy
		* @param proxy Ext.data.proxy.Proxy The new value.
		*/
		setProxy?( proxy?:Ext.data.proxy.IProxy ): void;
		/** [Method] Sets the value of records
		* @param records Object The new value.
		*/
		setRecords?( records?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader
		* @param useDefaultXhrHeader Object The new value.
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:any ): void;
		/** [Method] Sets the value of username
		* @param username String The new value.
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials
		* @param withCredentials Boolean The new value.
		*/
		setWithCredentials?( withCredentials?:boolean ): void;
		/** [Method] Sets the value of xmlData
		* @param xmlData Object The new value.
		*/
		setXmlData?( xmlData?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IResultSet extends Ext.IBase {
		/** [Config Option] (Number) */
		count?: number;
		/** [Config Option] (Boolean) */
		loaded?: boolean;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Boolean) */
		success?: boolean;
		/** [Config Option] (Number) */
		total?: number;
		/** [Method] Returns the value of count
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the value of loaded
		* @returns Boolean
		*/
		getLoaded?(): boolean;
		/** [Method] Returns the value of message
		* @returns String
		*/
		getMessage?(): string;
		/** [Method] Returns the value of records
		* @returns Ext.data.Model[]
		*/
		getRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of success
		* @returns Boolean
		*/
		getSuccess?(): boolean;
		/** [Method] Returns the value of total
		* @returns Number
		*/
		getTotal?(): number;
		/** [Method] Sets the value of count
		* @param count Number The new value.
		*/
		setCount?( count?:number ): void;
		/** [Method] Sets the value of loaded
		* @param loaded Boolean The new value.
		*/
		setLoaded?( loaded?:boolean ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of records
		* @param records Ext.data.Model[] The new value.
		*/
		setRecords?( records?:Ext.data.IModel[] ): void;
		/** [Method] Sets the value of success
		* @param success Boolean The new value.
		*/
		setSuccess?( success?:boolean ): void;
		/** [Method] Sets the value of total
		* @param total Number The new value.
		*/
		setTotal?( total?:number ): void;
	}
}
declare namespace Ext.data {
	export interface ISortTypes extends Ext.IBase {
	}
	export class SortTypes {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (RegExp) */
		static stripTagsRE: RegExp;
		/** [Method] Date sorting
		* @param value Object The value being converted.
		* @returns Number The comparison value.
		*/
		static asDate( value?:any ): number;
		/** [Method] Float sorting
		* @param value Object The value being converted.
		* @returns Number The comparison value.
		*/
		static asFloat( value?:any ): number;
		/** [Method] Integer sorting
		* @param value Object The value being converted.
		* @returns Number The comparison value.
		*/
		static asInt( value?:any ): number;
		/** [Method] Strips all HTML tags to sort on text only
		* @param value Object The value being converted.
		* @returns String The comparison value.
		*/
		static asText( value?:any ): string;
		/** [Method] Case insensitive string
		* @param value Object The value being converted.
		* @returns String The comparison value.
		*/
		static asUCString( value?:any ): string;
		/** [Method] Strips all HTML tags to sort on text only  case insensitive
		* @param value Object The value being converted.
		* @returns String The comparison value.
		*/
		static asUCText( value?:any ): string;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Default sort that does nothing
		* @param value Object The value being converted.
		* @returns Object The comparison value.
		*/
		static none( value?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.data {
	export interface IStore extends Ext.IEvented {
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Boolean) */
		autoSync?: boolean;
		/** [Config Option] (Boolean) */
		buffered?: boolean;
		/** [Config Option] (Boolean) */
		clearOnPageLoad?: boolean;
		/** [Config Option] (Object[]/Ext.data.Model[]) */
		data?: any;
		/** [Config Option] (Boolean) */
		destroyRemovedRecords?: boolean;
		/** [Config Option] (Object[]/Ext.util.Collection) */
		fields?: any;
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Function) */
		getGroupString?: any;
		/** [Config Option] (String) */
		groupDir?: string;
		/** [Config Option] (String) */
		groupField?: string;
		/** [Config Option] (Object) */
		grouper?: any;
		/** [Config Option] (String) */
		model?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Object/Array) */
		plugins?: any;
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteGroup?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Config Option] (String) */
		storeId?: string;
		/** [Config Option] (Boolean) */
		syncRemovedRecords?: boolean;
		/** [Config Option] (Number) */
		totalCount?: number;
		/** [Property] (Number) */
		currentPage?: number;
		/** [Method] Adds Model instance to the Store
		* @param model Ext.data.Model[]/Ext.data.Model... An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments.
		* @returns Ext.data.Model[] The model instances that were added.
		*/
		add?( model?:any ): Ext.data.IModel[];
		/** [Method] Uses the configured reader to convert the data into records and adds it to the Store
		* @param data Object[] Array of data to load
		*/
		addData?( data?:any[] ): void;
		/** [Method] We are using applyData so that we can return nothing and prevent the this data property to be overridden
		* @param data Array/Object
		*/
		applyData?( data?:any ): void;
		/** [Method] Gets the average value in the store
		* @param field String The field in each record you want to get the average for.
		* @returns Number The average value, if no items exist, 0.
		*/
		average?( field?:string ): number;
		/** [Method] Reverts to a view of the Record cache with no filtering applied
		* @param suppressEvent Boolean true to clear silently without firing the refresh event.
		*/
		clearFilter?( suppressEvent?:boolean ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Calls the specified function for each of the Records in the cache
		* @param fn Function The function to call. Returning false aborts and exits the iteration.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Record in the iteration.
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Filters the loaded set of records by a given set of filters
		* @param filters Object[]/Ext.util.Filter[]/String The set of filters to apply to the data. These are stored internally on the store, but the filtering itself is done on the Store's MixedCollection. See MixedCollection's filter method for filter syntax. Alternatively, pass in a property string.
		* @param value String value to filter by (only if using a property string as the first argument).
		* @param anyMatch Boolean true to allow any match, false to anchor regex beginning with ^.
		* @param caseSensitive Boolean true to make the filtering regex case sensitive.
		*/
		filter?( filters?:any, value?:string, anyMatch?:boolean, caseSensitive?:boolean ): void;
		/** [Method] Filter by a function
		* @param fn Function The function to be called. It will be passed the following parameters:
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Store.
		*/
		filterBy?( fn?:any, scope?:any ): void;
		/** [Method] Finds the index of the first matching Record in this store by a specific field value
		* @param fieldName String The name of the Record field to test.
		* @param value String/RegExp Either a string that the field value should begin with, or a RegExp to test against the field.
		* @param startIndex Number The index to start searching at.
		* @param anyMatch Boolean true to match any part of the string, not just the beginning.
		* @param caseSensitive Boolean true for case sensitive comparison.
		* @param exactMatch Boolean true to force exact match (^ and $ characters added to the regex).
		* @returns Number The matched index or -1
		*/
		find?( fieldName?:string, value?:any, startIndex?:number, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): number;
		/** [Method] Find the index of the first matching Record in this Store by a function
		* @param fn Function The function to be called. It will be passed the following parameters:
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Store.
		* @param startIndex Number The index to start searching at.
		* @returns Number The matched index or -1.
		*/
		findBy?( fn?:any, scope?:any, startIndex?:number ): number;
		/** [Method] Finds the index of the first matching Record in this store by a specific field value
		* @param fieldName String The name of the Record field to test.
		* @param value Object The value to match the field against.
		* @param startIndex Number The index to start searching at.
		* @returns Number The matched index or -1.
		*/
		findExact?( fieldName?:string, value?:any, startIndex?:number ): number;
		/** [Method] Finds the first matching Record in this store by a specific field value
		* @param fieldName String The name of the Record field to test.
		* @param value String/RegExp Either a string that the field value should begin with, or a RegExp to test against the field.
		* @param startIndex Number The index to start searching at.
		* @param anyMatch Boolean true to match any part of the string, not just the beginning.
		* @param caseSensitive Boolean true for case sensitive comparison.
		* @param exactMatch Boolean true to force exact match (^ and $ characters added to the regex).
		* @returns Ext.data.Model The matched record or null.
		*/
		findRecord?( fieldName?:string, value?:any, startIndex?:number, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.data.IModel;
		/** [Method] Convenience function for getting the first model instance in the store
		* @returns Ext.data.Model/undefined The first model instance in the store, or undefined.
		*/
		first?(): any;
		/** [Method] Gets the number of all cached records including the ones currently filtered
		* @returns Number The number of all Records in the Store's cache.
		*/
		getAllCount?(): number;
		/** [Method] Get the Record at the specified index
		* @param index Number The index of the Record to find.
		* @returns Ext.data.Model/undefined The Record at the passed index. Returns undefined if not found.
		*/
		getAt?( index?:number ): any;
		/** [Method] Returns the value of autoLoad
		* @returns Boolean/Object
		*/
		getAutoLoad?(): any;
		/** [Method] Returns the value of autoSync
		* @returns Boolean
		*/
		getAutoSync?(): boolean;
		/** [Method] Returns the value of buffered
		* @returns Boolean
		*/
		getBuffered?(): boolean;
		/** [Method] Get the Record with the specified id
		* @param id String The id of the Record to find.
		* @returns Ext.data.Model/undefined The Record with the passed id. Returns undefined if not found.
		*/
		getById?( id?:string ): any;
		/** [Method] Returns the value of clearOnPageLoad
		* @returns Boolean
		*/
		getClearOnPageLoad?(): boolean;
		/** [Method] Gets the number of cached records
		* @returns Number The number of Records in the Store's cache.
		*/
		getCount?(): number;
		/** [Method] Returns the value of data
		* @returns Object[]/Ext.data.Model[]
		*/
		getData?(): any;
		/** [Method] Returns the value of destroyRemovedRecords
		* @returns Boolean
		*/
		getDestroyRemovedRecords?(): boolean;
		/** [Method] Returns the value of fields
		* @returns Object[]/Ext.util.Collection
		*/
		getFields?(): any;
		/** [Method] Returns the value of getGroupString
		* @returns Function
		*/
		getGetGroupString?(): any;
		/** [Method] Returns the value of groupDir
		* @returns String
		*/
		getGroupDir?(): string;
		/** [Method] Returns the value of groupField
		* @returns String
		*/
		getGroupField?(): string;
		/** [Method] Returns the value of grouper
		* @returns Object
		*/
		getGrouper?(): any;
		/** [Method] Returns an array containing the result of applying the grouper to the records in this store
		* @param groupName String Pass in an optional groupName argument to access a specific group as defined by grouper.
		* @returns Object/Object[] The grouped data.
		*/
		getGroups?( groupName?:string ): any;
		/** [Method] Returns the value of model
		* @returns String
		*/
		getModel?(): string;
		/** [Method] Returns the value of modelDefaults
		* @returns Object
		*/
		getModelDefaults?(): any;
		/** [Method] Returns all Model instances that are either currently a phantom e g
		* @returns Ext.data.Model[] The Model instances.
		*/
		getNewRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of pageSize
		* @returns Number
		*/
		getPageSize?(): number;
		/** [Method] Returns the value of params
		* @returns Object
		*/
		getParams?(): any;
		/** [Method] Returns the value of plugins
		* @returns Object/Array
		*/
		getPlugins?(): any;
		/** [Method] Returns the value of proxy
		* @returns String/Ext.data.proxy.Proxy/Object
		*/
		getProxy?(): any;
		/** [Method] Returns a range of Records between specified indices
		* @param startIndex Number The starting index.
		* @param endIndex Number The ending index (defaults to the last Record in the Store).
		* @returns Ext.data.Model[] An array of Records.
		*/
		getRange?( startIndex?:number, endIndex?:number ): Ext.data.IModel[];
		/** [Method] Returns the value of remoteFilter
		* @returns Boolean
		*/
		getRemoteFilter?(): boolean;
		/** [Method] Returns the value of remoteGroup
		* @returns Boolean
		*/
		getRemoteGroup?(): boolean;
		/** [Method] Returns the value of remoteSort
		* @returns Boolean
		*/
		getRemoteSort?(): boolean;
		/** [Method] Returns any records that have been removed from the store but not yet destroyed on the proxy
		* @returns Ext.data.Model[] The removed Model instances.
		*/
		getRemovedRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of storeId
		* @returns String
		*/
		getStoreId?(): string;
		/** [Method] Returns the value of syncRemovedRecords
		* @returns Boolean
		*/
		getSyncRemovedRecords?(): boolean;
		/** [Method] Returns the value of totalCount
		* @returns Number
		*/
		getTotalCount?(): number;
		/** [Method] Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
		* @returns Ext.data.Model[] The updated Model instances.
		*/
		getUpdatedRecords?(): Ext.data.IModel[];
		/** [Method] Get the index within the cache of the passed Record
		* @param record Ext.data.Model The Ext.data.Model object to find.
		* @returns Number The index of the passed Record. Returns -1 if not found.
		*/
		indexOf?( record?:Ext.data.IModel ): number;
		/** [Method] Get the index within the cache of the Record with the passed id
		* @param id String The id of the Record to find.
		* @returns Number The index of the Record. Returns -1 if not found.
		*/
		indexOfId?( id?:string ): number;
		/** [Method] Inserts Model instances into the Store at the given index and fires the add event
		* @param index Number The start index at which to insert the passed Records.
		* @param records Ext.data.Model[] An Array of Ext.data.Model objects to add to the cache.
		* @returns Object
		*/
		insert?( index?:number, records?:Ext.data.IModel[] ): any;
		/** [Method] Returns true if the Store is set to autoLoad or is a type which loads upon instantiation
		* @returns Boolean
		*/
		isAutoLoading?(): boolean;
		/** [Method] Returns true if this store is currently filtered
		* @returns Boolean
		*/
		isFiltered?(): boolean;
		/** [Method] This method tells you if this store has a grouper defined on it
		* @returns Boolean true if this store has a grouper defined.
		*/
		isGrouped?(): boolean;
		/** [Method] Returns true if the Store has been loaded
		* @returns Boolean true if the Store has been loaded.
		*/
		isLoaded?(): boolean;
		/** [Method] Returns true if the Store is currently performing a load operation
		* @returns Boolean true if the Store is currently loading.
		*/
		isLoading?(): boolean;
		/** [Method] Returns true if this store is currently sorted
		* @returns Boolean
		*/
		isSorted?(): boolean;
		/** [Method] Convenience function for getting the last model instance in the store
		* @returns Ext.data.Model/undefined The last model instance in the store, or undefined.
		*/
		last?(): any;
		/** [Method] Loads data into the Store via the configured proxy
		* @param options Object/Function config object, passed into the Ext.data.Operation object before loading.
		* @param scope Object Scope for the function.
		* @returns Object
		*/
		load?( options?:any, scope?:any ): any;
		/** [Method] Loads an array of data straight into the Store
		* @param data Ext.data.Model[]/Object[] Array of data to load. Any non-model instances will be cast into model instances first.
		* @param append Boolean true to add the records to the existing records in the store, false to remove the old ones first.
		*/
		loadData?( data?:any, append?:boolean ): void;
		/** [Method] Loads a given page of data by setting the start and limit values appropriately
		* @param page Number The number of the page to load.
		* @param options Object See options for load.
		* @param scope Object
		*/
		loadPage?( page?:number, options?:any, scope?:any ): void;
		/** [Method] Adds Model instance to the Store
		* @param model Ext.data.Model[]/Ext.data.Model... An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments.
		* @returns Ext.data.Model[] The model instances that were added.
		*/
		loadRecords?( model?:any ): Ext.data.IModel[];
		/** [Method] Gets the maximum value in the store
		* @param field String The field in each record.
		* @returns Object/undefined The maximum value, if no items exist, undefined.
		*/
		max?( field?:string ): any;
		/** [Method] Gets the minimum value in the store
		* @param field String The field in each record.
		* @returns Object/undefined The minimum value, if no items exist, undefined.
		*/
		min?( field?:string ): any;
		/** [Method] Loads the next page in the current data set
		* @param options Object See options for load.
		*/
		nextPage?( options?:any ): void;
		/** [Method] Loads the previous page in the current data set
		* @param options Object See options for load.
		*/
		previousPage?( options?:any ): void;
		/** [Method] Query the cached records in this Store using a filtering function
		* @param fn Function The function to be called. It will be passed the following parameters:
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Store.
		* @returns Ext.util.MixedCollection Returns an Ext.util.MixedCollection of the matched records.
		*/
		queryBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Removes the given record from the Store firing the removerecords event passing all the instances that are removed
		* @param records Ext.data.Model/Ext.data.Model[] Model instance or array of instances to remove.
		*/
		remove?( records?:any ): void;
		/** [Method] Remove all items from the store
		* @param silent Boolean Prevent the clear event from being fired.
		*/
		removeAll?( silent?:boolean ): void;
		/** [Method] Removes the model instance at the given index
		* @param index Number The record index.
		*/
		removeAt?( index?:number ): void;
		/** [Method] Sets the value of autoLoad
		* @param autoLoad Boolean/Object The new value.
		*/
		setAutoLoad?( autoLoad?:any ): void;
		/** [Method] Sets the value of autoSync
		* @param autoSync Boolean The new value.
		*/
		setAutoSync?( autoSync?:boolean ): void;
		/** [Method] Sets the value of buffered
		* @param buffered Boolean The new value.
		*/
		setBuffered?( buffered?:boolean ): void;
		/** [Method] Sets the value of clearOnPageLoad
		* @param clearOnPageLoad Boolean The new value.
		*/
		setClearOnPageLoad?( clearOnPageLoad?:boolean ): void;
		/** [Method] Sets the value of data
		* @param data Object[]/Ext.data.Model[] The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of destroyRemovedRecords
		* @param destroyRemovedRecords Boolean The new value.
		*/
		setDestroyRemovedRecords?( destroyRemovedRecords?:boolean ): void;
		/** [Method] Sets the value of fields
		* @param fields Object[]/Ext.util.Collection The new value.
		* @returns Object Ext.util.Collection
		*/
		setFields?( fields?:any ): any;
		/** [Method] Sets the value of filters
		* @param filters Object[] The new value.
		*/
		setFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of getGroupString
		* @param getGroupString Function The new value.
		*/
		setGetGroupString?( getGroupString?:any ): void;
		/** [Method] Sets the value of groupDir
		* @param groupDir String The new value.
		*/
		setGroupDir?( groupDir?:string ): void;
		/** [Method] Sets the value of groupField
		* @param groupField String The new value.
		*/
		setGroupField?( groupField?:string ): void;
		/** [Method] Sets the value of grouper
		* @param grouper Object The new value.
		*/
		setGrouper?( grouper?:any ): void;
		/** [Method] Sets the value of model
		* @param model String The new value.
		*/
		setModel?( model?:string ): void;
		/** [Method] Sets the value of modelDefaults
		* @param modelDefaults Object The new value.
		*/
		setModelDefaults?( modelDefaults?:any ): void;
		/** [Method] Sets the value of pageSize
		* @param pageSize Number The new value.
		*/
		setPageSize?( pageSize?:number ): void;
		/** [Method] Sets the value of params
		* @param params Object The new value.
		*/
		setParams?( params?:any ): void;
		/** [Method] Sets the value of plugins
		* @param plugins Object/Array The new value.
		*/
		setPlugins?( plugins?:any ): void;
		/** [Method] Sets the value of proxy
		* @param proxy String/Ext.data.proxy.Proxy/Object The new value.
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of remoteFilter
		* @param remoteFilter Boolean The new value.
		*/
		setRemoteFilter?( remoteFilter?:boolean ): void;
		/** [Method] Sets the value of remoteGroup
		* @param remoteGroup Boolean The new value.
		*/
		setRemoteGroup?( remoteGroup?:boolean ): void;
		/** [Method] Sets the value of remoteSort
		* @param remoteSort Boolean The new value.
		*/
		setRemoteSort?( remoteSort?:boolean ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Object[] The new value.
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] Sets the value of storeId
		* @param storeId String The new value.
		*/
		setStoreId?( storeId?:string ): void;
		/** [Method] Sets the value of syncRemovedRecords
		* @param syncRemovedRecords Boolean The new value.
		*/
		setSyncRemovedRecords?( syncRemovedRecords?:boolean ): void;
		/** [Method] Sets the value of totalCount
		* @param totalCount Number The new value.
		*/
		setTotalCount?( totalCount?:number ): void;
		/** [Method] Sorts the data in the Store by one or more of its properties
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations.
		* @param defaultDirection String The default overall direction to sort the data by.
		* @param where String This can be either 'prepend' or 'append'. If you leave this undefined it will clear the current sorters.
		*/
		sort?( sorters?:any, defaultDirection?:string, where?:string ): void;
		/** [Method] Sums the value of property for each record between start and end and returns the result
		* @param field String The field in each record.
		* @returns Number The sum.
		*/
		sum?( field?:string ): number;
		/** [Method] Synchronizes the Store with its Proxy
		* @param options Object
		* @returns Object
		*/
		sync?( options?:any ): any;
	}
}
declare namespace Ext.data {
	export interface IStoreManager extends Ext.util.ICollection {
	}
	export class StoreManager {
		/** [Property] (Array) */
		static all: any[];
		/** [Property] (Object) */
		static currentSortFn: any;
		/** [Property] (Boolean) */
		static dirtyFilterFn: boolean;
		/** [Property] (Boolean) */
		static dirtySortFn: boolean;
		/** [Property] (Boolean) */
		static filtered: boolean;
		/** [Property] (Object) */
		static indices: any;
		/** [Property] (Array) */
		static items: any[];
		/** [Property] (Array) */
		static keys: any[];
		/** [Property] (Number) */
		static length: number;
		/** [Property] (Object) */
		static map: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Boolean) */
		static sorted: boolean;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param item Object The item to add.
		* @returns Object The item added.
		*/
		static add( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param addItems Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true.
		*/
		static addAll( addItems?:any ): void;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		static addFilter( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Object
		* @returns Object
		*/
		static addFilters( filters?:any ): any;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorter( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorters( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all items from the collection  */
		static clear(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		static clone(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param item Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		static contains( item?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		static containsKey( key?:string ): boolean;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		static eachKey( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters
		* @param property Object
		* @param value Object
		* @param anyMatch Object
		* @param caseSensitive Object
		* @returns Array
		*/
		static filter( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		static findBy( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index, or -1 if the item was not found.
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		static findInsertionIndex( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection.
		*/
		static first(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		static get( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		static getAt( index?:number ): any;
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		static getAutoFilter(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		static getAutoSort(): boolean;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		static getByKey( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		static getDefaultSortDirection(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		static getFilterFn(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		static getFilterRoot(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		static getFilters(): any[];
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] getKey implementation for MixedCollection
		* @param o Object
		* @returns Object The key for the passed item.
		*/
		static getKey( o?:any ): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index. Defaults to the last item.
		* @returns Array An array of items.
		*/
		static getRange( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		static getSortFn(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		static getSortRoot(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		static getSorters(): any[];
		/** [Method] Returns index within the collection of the passed Object
		* @param item Object The item to find the index of.
		* @returns Number Index of the item. Returns -1 if not found.
		*/
		static indexOf( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number Index of the key.
		*/
		static indexOfKey( key?:string ): number;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param item Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		static insert( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		static insertFilter( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		static insertFilters( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static insertSorter( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @returns Ext.util.Collection this
		*/
		static insertSorters(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection.
		*/
		static last(): any;
		/** [Method] Gets a registered Store by its id returns a passed store instance or returns a new instance of a store created with
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration.
		* @returns Ext.data.Store
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager
		* @param stores Ext.data.Store... Any number of Store instances.
		*/
		static register( stores:Ext.data.IStore ): void;
		/** [Method] Remove an item from the collection
		* @param item Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static remove( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static removeAt( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		static removeAtKey( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array
		* @param filters Object
		* @returns Ext.util.Collection this
		*/
		static removeFilters( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		static removeSorter( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Object
		* @returns Ext.util.Collection this
		*/
		static removeSorters( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection
		* @param oldKey String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param item Object {Object} item (optional) If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		static replace( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		static setAutoFilter( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		static setAutoSort( autoSort?:boolean ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		static setDefaultSortDirection( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		static setFilterRoot( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		static setFilters( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		static setSortRoot( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		static setSorters( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param sorters Object
		* @param defaultDirection Object
		* @returns Array The array you passed after it is sorted.
		*/
		static sort( sorters?:any, defaultDirection?:any ): any[];
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters one or more Stores with the StoreManager
		* @param stores String/Object... Any number of Store instances or ID-s.
		*/
		static unregister( stores?:any ): void;
	}
}
declare namespace Ext {
	export interface IStoreMgr extends Ext.util.ICollection {
	}
	export class StoreMgr {
		/** [Property] (Array) */
		static all: any[];
		/** [Property] (Object) */
		static currentSortFn: any;
		/** [Property] (Boolean) */
		static dirtyFilterFn: boolean;
		/** [Property] (Boolean) */
		static dirtySortFn: boolean;
		/** [Property] (Boolean) */
		static filtered: boolean;
		/** [Property] (Object) */
		static indices: any;
		/** [Property] (Array) */
		static items: any[];
		/** [Property] (Array) */
		static keys: any[];
		/** [Property] (Number) */
		static length: number;
		/** [Property] (Object) */
		static map: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Boolean) */
		static sorted: boolean;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param item Object The item to add.
		* @returns Object The item added.
		*/
		static add( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param addItems Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true.
		*/
		static addAll( addItems?:any ): void;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		static addFilter( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Object
		* @returns Object
		*/
		static addFilters( filters?:any ): any;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorter( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorters( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all items from the collection  */
		static clear(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		static clone(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param item Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		static contains( item?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		static containsKey( key?:string ): boolean;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		static eachKey( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters
		* @param property Object
		* @param value Object
		* @param anyMatch Object
		* @param caseSensitive Object
		* @returns Array
		*/
		static filter( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		static findBy( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index, or -1 if the item was not found.
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		static findInsertionIndex( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection.
		*/
		static first(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		static get( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		static getAt( index?:number ): any;
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		static getAutoFilter(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		static getAutoSort(): boolean;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		static getByKey( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		static getDefaultSortDirection(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		static getFilterFn(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		static getFilterRoot(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		static getFilters(): any[];
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] getKey implementation for MixedCollection
		* @param o Object
		* @returns Object The key for the passed item.
		*/
		static getKey( o?:any ): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index. Defaults to the last item.
		* @returns Array An array of items.
		*/
		static getRange( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		static getSortFn(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		static getSortRoot(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		static getSorters(): any[];
		/** [Method] Returns index within the collection of the passed Object
		* @param item Object The item to find the index of.
		* @returns Number Index of the item. Returns -1 if not found.
		*/
		static indexOf( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number Index of the key.
		*/
		static indexOfKey( key?:string ): number;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param item Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		static insert( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		static insertFilter( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		static insertFilters( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static insertSorter( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @returns Ext.util.Collection this
		*/
		static insertSorters(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection.
		*/
		static last(): any;
		/** [Method] Gets a registered Store by its id returns a passed store instance or returns a new instance of a store created with
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration.
		* @returns Ext.data.Store
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager
		* @param stores Ext.data.Store... Any number of Store instances.
		*/
		static register( stores:Ext.data.IStore ): void;
		/** [Method] Remove an item from the collection
		* @param item Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static remove( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static removeAt( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		static removeAtKey( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array
		* @param filters Object
		* @returns Ext.util.Collection this
		*/
		static removeFilters( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		static removeSorter( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Object
		* @returns Ext.util.Collection this
		*/
		static removeSorters( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection
		* @param oldKey String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param item Object {Object} item (optional) If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		static replace( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		static setAutoFilter( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		static setAutoSort( autoSort?:boolean ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		static setDefaultSortDirection( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		static setFilterRoot( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		static setFilters( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		static setSortRoot( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		static setSorters( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param sorters Object
		* @param defaultDirection Object
		* @returns Array The array you passed after it is sorted.
		*/
		static sort( sorters?:any, defaultDirection?:any ): any[];
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters one or more Stores with the StoreManager
		* @param stores String/Object... Any number of Store instances or ID-s.
		*/
		static unregister( stores?:any ): void;
	}
}
declare namespace Ext.data {
	export interface IStoreMgr extends Ext.util.ICollection {
	}
	export class StoreMgr {
		/** [Property] (Array) */
		static all: any[];
		/** [Property] (Object) */
		static currentSortFn: any;
		/** [Property] (Boolean) */
		static dirtyFilterFn: boolean;
		/** [Property] (Boolean) */
		static dirtySortFn: boolean;
		/** [Property] (Boolean) */
		static filtered: boolean;
		/** [Property] (Object) */
		static indices: any;
		/** [Property] (Array) */
		static items: any[];
		/** [Property] (Array) */
		static keys: any[];
		/** [Property] (Number) */
		static length: number;
		/** [Property] (Object) */
		static map: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Boolean) */
		static sorted: boolean;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param item Object The item to add.
		* @returns Object The item added.
		*/
		static add( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param addItems Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true.
		*/
		static addAll( addItems?:any ): void;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		static addFilter( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Object
		* @returns Object
		*/
		static addFilters( filters?:any ): any;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorter( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorters( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all items from the collection  */
		static clear(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		static clone(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param item Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		static contains( item?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		static containsKey( key?:string ): boolean;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		static eachKey( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters
		* @param property Object
		* @param value Object
		* @param anyMatch Object
		* @param caseSensitive Object
		* @returns Array
		*/
		static filter( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		static findBy( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index, or -1 if the item was not found.
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		static findInsertionIndex( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection.
		*/
		static first(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		static get( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		static getAt( index?:number ): any;
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		static getAutoFilter(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		static getAutoSort(): boolean;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		static getByKey( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		static getDefaultSortDirection(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		static getFilterFn(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		static getFilterRoot(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		static getFilters(): any[];
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] getKey implementation for MixedCollection
		* @param o Object
		* @returns Object The key for the passed item.
		*/
		static getKey( o?:any ): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index. Defaults to the last item.
		* @returns Array An array of items.
		*/
		static getRange( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		static getSortFn(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		static getSortRoot(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		static getSorters(): any[];
		/** [Method] Returns index within the collection of the passed Object
		* @param item Object The item to find the index of.
		* @returns Number Index of the item. Returns -1 if not found.
		*/
		static indexOf( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number Index of the key.
		*/
		static indexOfKey( key?:string ): number;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param item Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		static insert( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		static insertFilter( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		static insertFilters( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static insertSorter( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @returns Ext.util.Collection this
		*/
		static insertSorters(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection.
		*/
		static last(): any;
		/** [Method] Gets a registered Store by its id returns a passed store instance or returns a new instance of a store created with
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration.
		* @returns Ext.data.Store
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager
		* @param stores Ext.data.Store... Any number of Store instances.
		*/
		static register( stores:Ext.data.IStore ): void;
		/** [Method] Remove an item from the collection
		* @param item Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static remove( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static removeAt( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		static removeAtKey( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array
		* @param filters Object
		* @returns Ext.util.Collection this
		*/
		static removeFilters( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		static removeSorter( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Object
		* @returns Ext.util.Collection this
		*/
		static removeSorters( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection
		* @param oldKey String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param item Object {Object} item (optional) If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		static replace( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		static setAutoFilter( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		static setAutoSort( autoSort?:boolean ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		static setDefaultSortDirection( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		static setFilterRoot( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		static setFilters( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		static setSortRoot( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		static setSorters( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param sorters Object
		* @param defaultDirection Object
		* @returns Array The array you passed after it is sorted.
		*/
		static sort( sorters?:any, defaultDirection?:any ): any[];
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters one or more Stores with the StoreManager
		* @param stores String/Object... Any number of Store instances or ID-s.
		*/
		static unregister( stores?:any ): void;
	}
}
declare namespace Ext {
	export interface IStoreManager extends Ext.util.ICollection {
	}
	export class StoreManager {
		/** [Property] (Array) */
		static all: any[];
		/** [Property] (Object) */
		static currentSortFn: any;
		/** [Property] (Boolean) */
		static dirtyFilterFn: boolean;
		/** [Property] (Boolean) */
		static dirtySortFn: boolean;
		/** [Property] (Boolean) */
		static filtered: boolean;
		/** [Property] (Object) */
		static indices: any;
		/** [Property] (Array) */
		static items: any[];
		/** [Property] (Array) */
		static keys: any[];
		/** [Property] (Number) */
		static length: number;
		/** [Property] (Object) */
		static map: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Boolean) */
		static sorted: boolean;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param item Object The item to add.
		* @returns Object The item added.
		*/
		static add( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param addItems Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true.
		*/
		static addAll( addItems?:any ): void;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		static addFilter( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Object
		* @returns Object
		*/
		static addFilters( filters?:any ): any;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorter( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static addSorters( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all items from the collection  */
		static clear(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		static clone(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param item Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		static contains( item?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		static containsKey( key?:string ): boolean;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		static each( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		static eachKey( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters
		* @param property Object
		* @param value Object
		* @param anyMatch Object
		* @param caseSensitive Object
		* @returns Array
		*/
		static filter( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		static findBy( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index, or -1 if the item was not found.
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		static findInsertionIndex( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection.
		*/
		static first(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		static get( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		static getAt( index?:number ): any;
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		static getAutoFilter(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		static getAutoSort(): boolean;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		static getByKey( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		static getCount(): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		static getDefaultSortDirection(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		static getFilterFn(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		static getFilterRoot(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		static getFilters(): any[];
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] getKey implementation for MixedCollection
		* @param o Object
		* @returns Object The key for the passed item.
		*/
		static getKey( o?:any ): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index. Defaults to the last item.
		* @returns Array An array of items.
		*/
		static getRange( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		static getSortFn(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		static getSortRoot(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		static getSorters(): any[];
		/** [Method] Returns index within the collection of the passed Object
		* @param item Object The item to find the index of.
		* @returns Number Index of the item. Returns -1 if not found.
		*/
		static indexOf( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number Index of the key.
		*/
		static indexOfKey( key?:string ): number;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param item Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		static insert( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		static insertFilter( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		static insertFilters( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		static insertSorter( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @returns Ext.util.Collection this
		*/
		static insertSorters(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection.
		*/
		static last(): any;
		/** [Method] Gets a registered Store by its id returns a passed store instance or returns a new instance of a store created with
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration.
		* @returns Ext.data.Store
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager
		* @param stores Ext.data.Store... Any number of Store instances.
		*/
		static register( stores:Ext.data.IStore ): void;
		/** [Method] Remove an item from the collection
		* @param item Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static remove( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		static removeAt( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		static removeAtKey( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array
		* @param filters Object
		* @returns Ext.util.Collection this
		*/
		static removeFilters( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		static removeSorter( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Object
		* @returns Ext.util.Collection this
		*/
		static removeSorters( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection
		* @param oldKey String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param item Object {Object} item (optional) If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		static replace( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		static setAutoFilter( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		static setAutoSort( autoSort?:boolean ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		static setDefaultSortDirection( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		static setFilterRoot( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		static setFilters( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		static setSortRoot( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		static setSorters( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param sorters Object
		* @param defaultDirection Object
		* @returns Array The array you passed after it is sorted.
		*/
		static sort( sorters?:any, defaultDirection?:any ): any[];
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Unregisters one or more Stores with the StoreManager
		* @param stores String/Object... Any number of Store instances or ID-s.
		*/
		static unregister( stores?:any ): void;
	}
}
declare namespace Ext.data {
	export interface ITreeStore extends Ext.data.INodeStore {
		/** [Config Option] (Boolean) */
		clearOnLoad?: boolean;
		/** [Config Option] (String) */
		defaultRootId?: string;
		/** [Config Option] (String) */
		defaultRootProperty?: string;
		/** [Config Option] (String) */
		nodeParam?: string;
		/** [Config Option] (Ext.data.Model/Ext.data.NodeInterface/Object) */
		root?: any;
		/** [Method] Get the Record with the specified id
		* @param id Object
		* @returns Ext.data.Model/undefined The Record with the passed id. Returns undefined if not found.
		*/
		getById?( id?:any ): any;
		/** [Method] Returns the value of clearOnLoad
		* @returns Boolean
		*/
		getClearOnLoad?(): boolean;
		/** [Method] Returns the value of defaultRootId
		* @returns String
		*/
		getDefaultRootId?(): string;
		/** [Method] Returns the value of defaultRootProperty
		* @returns String
		*/
		getDefaultRootProperty?(): string;
		/** [Method] Returns the record node by id
		* @param id Object
		* @returns Ext.data.NodeInterface
		*/
		getNodeById?( id?:any ): Ext.data.INodeInterface;
		/** [Method] Returns the value of nodeParam
		* @returns String
		*/
		getNodeParam?(): string;
		/** [Method] Returns the value of root
		* @returns Ext.data.Model/Ext.data.NodeInterface/Object
		*/
		getRoot?(): any;
		/** [Method] Returns the root node for this tree
		* @param node Object
		* @returns Ext.data.Model
		*/
		getRootNode?( node?:any ): Ext.data.IModel;
		/** [Method] Loads the Store using its configured proxy
		* @param options Object config object. This is passed into the Operation object that is created and then sent to the proxy's Ext.data.proxy.Proxy.read function. The options can also contain a node, which indicates which node is to be loaded. If not specified, it will default to the root node.
		* @returns Object
		*/
		load?( options?:any ): any;
		/** [Method] Called internally when a Proxy has completed a load request
		* @param operation Object
		*/
		onProxyLoad?( operation?:any ): void;
		/** [Method] Remove all items from the store
		* @param silent Boolean Prevent the clear event from being fired.
		*/
		removeAll?( silent?:boolean ): void;
		/** [Method] Sets the value of clearOnLoad
		* @param clearOnLoad Boolean The new value.
		*/
		setClearOnLoad?( clearOnLoad?:boolean ): void;
		/** [Method] Sets the value of defaultRootId
		* @param defaultRootId String The new value.
		*/
		setDefaultRootId?( defaultRootId?:string ): void;
		/** [Method] Sets the value of defaultRootProperty
		* @param defaultRootProperty String The new value.
		*/
		setDefaultRootProperty?( defaultRootProperty?:string ): void;
		/** [Method] Sets the value of nodeParam
		* @param nodeParam String The new value.
		*/
		setNodeParam?( nodeParam?:string ): void;
		/** [Method] Sets the value of root
		* @param root Ext.data.Model/Ext.data.NodeInterface/Object The new value.
		*/
		setRoot?( root?:any ): void;
		/** [Method] Sets the root node for this tree
		* @param node Ext.data.Model
		* @returns Ext.data.Model
		*/
		setRootNode?( node?:Ext.data.IModel ): Ext.data.IModel;
	}
}
declare namespace Ext.data {
	export interface ITypes extends Ext.IBase {
	}
	export class Types {
		/** [Property] (Object) */
		static AUTO: any;
		/** [Property] (Object) */
		static BOOL: any;
		/** [Property] (Object) */
		static BOOLEAN: any;
		/** [Property] (Object) */
		static DATE: any;
		/** [Property] (Object) */
		static FLOAT: any;
		/** [Property] (Object) */
		static INT: any;
		/** [Property] (Object) */
		static INTEGER: any;
		/** [Property] (Object) */
		static NUMBER: any;
		/** [Property] (Object) */
		static STRING: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (RegExp) */
		static stripRe: RegExp;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.data {
	export interface IValidations extends Ext.IBase {
	}
	export class Validations {
		/** [Property] (String) */
		static emailMessage: string;
		/** [Property] (RegExp) */
		static emailRe: RegExp;
		/** [Property] (String) */
		static exclusionMessage: string;
		/** [Property] (String) */
		static formatMessage: string;
		/** [Property] (String) */
		static inclusionMessage: string;
		/** [Property] (String) */
		static lengthMessage: string;
		/** [Property] (String) */
		static presenceMessage: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Validates that an email string is in the correct format
		* @param config Object Config object.
		* @param email String The email address.
		* @returns Boolean true if the value passes validation.
		*/
		static email( config?:any, email?:string ): boolean;
		/** [Method] Validates that the given value is present in the configured list
		* @param config Object Config object.
		* @param value String The value to validate.
		* @returns Boolean true if the value is not present in the list.
		*/
		static exclusion( config?:any, value?:string ): boolean;
		/** [Method] Returns true if the given value passes validation against the configured matcher regex
		* @param config Object Config object.
		* @param value String The value to validate.
		* @returns Boolean true if the value passes the format validation.
		*/
		static format( config?:any, value?:string ): boolean;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the configured error message for any of the validation types
		* @param type String The type of validation you want to get the error message for.
		* @returns Object
		*/
		static getMessage( type?:string ): any;
		/** [Method] Validates that the given value is present in the configured list
		* @param config Object Config object.
		* @param value String The value to validate.
		* @returns Boolean true if the value is present in the list.
		*/
		static inclusion( config?:any, value?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns true if the given value is between the configured min and max values
		* @param config Object Config object.
		* @param value String The value to validate.
		* @returns Boolean true if the value passes validation.
		*/
		static length( config?:any, value?:string ): boolean;
		/** [Method] Validates that the given value is present
		* @param config Object Config object.
		* @param value Object The value to validate.
		* @returns Boolean true if validation passed.
		*/
		static presence( config?:any, value?:any ): boolean;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.data.writer {
	export interface IJson extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle
		* @returns Boolean
		*/
		getAllowSingle?(): boolean;
		/** [Method] Returns the value of encode
		* @returns Boolean
		*/
		getEncode?(): boolean;
		/** [Method] Returns the value of encodeRequest
		* @returns Boolean
		*/
		getEncodeRequest?(): boolean;
		/** [Method] Returns the value of rootProperty
		* @returns String
		*/
		getRootProperty?(): string;
		/** [Method] Sets the value of allowSingle
		* @param allowSingle Boolean The new value.
		*/
		setAllowSingle?( allowSingle?:boolean ): void;
		/** [Method] Sets the value of encode
		* @param encode Boolean The new value.
		*/
		setEncode?( encode?:boolean ): void;
		/** [Method] Sets the value of encodeRequest
		* @param encodeRequest Boolean The new value.
		*/
		setEncodeRequest?( encodeRequest?:boolean ): void;
		/** [Method] Sets the value of rootProperty
		* @param rootProperty String The new value.
		*/
		setRootProperty?( rootProperty?:string ): void;
	}
}
declare namespace Ext.data {
	export interface IJsonWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle
		* @returns Boolean
		*/
		getAllowSingle?(): boolean;
		/** [Method] Returns the value of encode
		* @returns Boolean
		*/
		getEncode?(): boolean;
		/** [Method] Returns the value of encodeRequest
		* @returns Boolean
		*/
		getEncodeRequest?(): boolean;
		/** [Method] Returns the value of rootProperty
		* @returns String
		*/
		getRootProperty?(): string;
		/** [Method] Sets the value of allowSingle
		* @param allowSingle Boolean The new value.
		*/
		setAllowSingle?( allowSingle?:boolean ): void;
		/** [Method] Sets the value of encode
		* @param encode Boolean The new value.
		*/
		setEncode?( encode?:boolean ): void;
		/** [Method] Sets the value of encodeRequest
		* @param encodeRequest Boolean The new value.
		*/
		setEncodeRequest?( encodeRequest?:boolean ): void;
		/** [Method] Sets the value of rootProperty
		* @param rootProperty String The new value.
		*/
		setRootProperty?( rootProperty?:string ): void;
	}
}
declare namespace Ext.data.writer {
	export interface IWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Method] Returns the value of nameProperty
		* @returns String
		*/
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server
		* @param record Object The record that we are writing to the server.
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record.
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields
		* @returns Boolean
		*/
		getWriteAllFields?(): boolean;
		/** [Method] Sets the value of nameProperty
		* @param nameProperty String The new value.
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields
		* @param writeAllFields Boolean The new value.
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;
		/** [Method] Prepares a Proxy s Ext data Request object
		* @param request Ext.data.Request The request object.
		* @returns Ext.data.Request The modified request object.
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare namespace Ext.data {
	export interface IDataWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Method] Returns the value of nameProperty
		* @returns String
		*/
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server
		* @param record Object The record that we are writing to the server.
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record.
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields
		* @returns Boolean
		*/
		getWriteAllFields?(): boolean;
		/** [Method] Sets the value of nameProperty
		* @param nameProperty String The new value.
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields
		* @param writeAllFields Boolean The new value.
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;
		/** [Method] Prepares a Proxy s Ext data Request object
		* @param request Ext.data.Request The request object.
		* @returns Ext.data.Request The modified request object.
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare namespace Ext.data {
	export interface IWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Method] Returns the value of nameProperty
		* @returns String
		*/
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server
		* @param record Object The record that we are writing to the server.
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record.
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields
		* @returns Boolean
		*/
		getWriteAllFields?(): boolean;
		/** [Method] Sets the value of nameProperty
		* @param nameProperty String The new value.
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields
		* @param writeAllFields Boolean The new value.
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;
		/** [Method] Prepares a Proxy s Ext data Request object
		* @param request Ext.data.Request The request object.
		* @returns Ext.data.Request The modified request object.
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare namespace Ext.data.writer {
	export interface IXml extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot
		* @returns String
		*/
		getDefaultDocumentRoot?(): string;
		/** [Method] Returns the value of documentRoot
		* @returns String
		*/
		getDocumentRoot?(): string;
		/** [Method] Returns the value of header
		* @returns String
		*/
		getHeader?(): string;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] Sets the value of defaultDocumentRoot
		* @param defaultDocumentRoot String The new value.
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;
		/** [Method] Sets the value of documentRoot
		* @param documentRoot String The new value.
		*/
		setDocumentRoot?( documentRoot?:string ): void;
		/** [Method] Sets the value of header
		* @param header String The new value.
		*/
		setHeader?( header?:string ): void;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
		/** [Method]
		* @param request Object
		* @param data Array
		* @returns Object
		*/
		writeRecords?( request?:any, data?:any[] ): any;
	}
}
declare namespace Ext.data {
	export interface IXmlWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot
		* @returns String
		*/
		getDefaultDocumentRoot?(): string;
		/** [Method] Returns the value of documentRoot
		* @returns String
		*/
		getDocumentRoot?(): string;
		/** [Method] Returns the value of header
		* @returns String
		*/
		getHeader?(): string;
		/** [Method] Returns the value of record
		* @returns String
		*/
		getRecord?(): string;
		/** [Method] Sets the value of defaultDocumentRoot
		* @param defaultDocumentRoot String The new value.
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;
		/** [Method] Sets the value of documentRoot
		* @param documentRoot String The new value.
		*/
		setDocumentRoot?( documentRoot?:string ): void;
		/** [Method] Sets the value of header
		* @param header String The new value.
		*/
		setHeader?( header?:string ): void;
		/** [Method] Sets the value of record
		* @param record String The new value.
		*/
		setRecord?( record?:string ): void;
		/** [Method]
		* @param request Object
		* @param data Array
		* @returns Object
		*/
		writeRecords?( request?:any, data?:any[] ): any;
	}
}
declare namespace Ext.dataview.component {
	export interface IContainer extends Ext.IContainer {
		/** [Method]  */
		destroy?(): void;
	}
}
declare namespace Ext.dataview.component {
	export interface IDataItem extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		dataMap?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of dataMap
		* @returns Object
		*/
		getDataMap?(): any;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of itemCls
		* @returns String
		*/
		getItemCls?(): string;
		/** [Method] Returns the value of items
		* @returns Array
		*/
		getItems?(): any[];
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of dataMap
		* @param dataMap Object The new value.
		*/
		setDataMap?( dataMap?:any ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of itemCls
		* @param itemCls String The new value.
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array The new value.
		*/
		setItems?( items?:any[] ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of width
		* @param width String The new value.
		*/
		setWidth?( width?:string ): void;
	}
}
declare namespace Ext.dataview.component {
	export interface IListItem extends Ext.dataview.component.IDataItem {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		dataMap?: any;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (String/String[]/Ext.Template/Ext.XTemplate[]) */
		tpl?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of body
		* @returns Object
		*/
		getBody?(): any;
		/** [Method] Returns the value of dataMap
		* @returns Object
		*/
		getDataMap?(): any;
		/** [Method] Returns the value of disclosure
		* @returns Object
		*/
		getDisclosure?(): any;
		/** [Method] Returns the value of header
		* @returns Object
		*/
		getHeader?(): any;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of body
		* @param body Object The new value.
		*/
		setBody?( body?:any ): void;
		/** [Method] Sets the value of dataMap
		* @param dataMap Object The new value.
		*/
		setDataMap?( dataMap?:any ): void;
		/** [Method] Sets the value of disclosure
		* @param disclosure Object The new value.
		*/
		setDisclosure?( disclosure?:any ): void;
		/** [Method] Sets the value of header
		* @param header Object The new value.
		*/
		setHeader?( header?:any ): void;
		/** [Method] Sets the value of items
		* @param items Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of tpl
		* @param tpl Object The new value.
		*/
		setTpl?( tpl?:any ): void;
	}
}
declare namespace Ext.dataview.component {
	export interface ISimpleListItem extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of disclosure
		* @returns Object
		*/
		getDisclosure?(): any;
		/** [Method] Returns the value of header
		* @returns Object
		*/
		getHeader?(): any;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of disclosure
		* @param disclosure Object The new value.
		*/
		setDisclosure?( disclosure?:any ): void;
		/** [Method] Sets the value of header
		* @param header Object The new value.
		*/
		setHeader?( header?:any ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		setRecord?( record?:Ext.data.IModel ): void;
	}
}
declare namespace Ext.dataview {
	export interface IDataView extends Ext.IContainer,Ext.mixin.ISelectable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		blockRefresh?: boolean;
		/** [Config Option] (Object[]) */
		data?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		deferEmptyText?: boolean;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Object) */
		itemConfig?: any;
		/** [Config Option] (Boolean) */
		itemSelector?: boolean;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (String/Boolean) */
		loadingText?: any;
		/** [Config Option] (Number) */
		maxItemCache?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Boolean) */
		overItemCls?: boolean;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number) */
		pressedDelay?: number;
		/** [Config Option] (Boolean) */
		scrollToTopOnRefresh?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		selectedItemCls?: boolean;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		singleSelect?: boolean;
		/** [Config Option] (Ext.data.Store/Object) */
		store?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String) */
		triggerCtEvent?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
		/** [Config Option] (Boolean) */
		useComponents?: boolean;
		/** [Method] Binds a new Store to this DataView  */
		bindStore?(): void;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  */
		collectData?(): void;
		/** [Method] Deselects the given record s
		* @param records Number/Array/Ext.data.Model The record(s) to deselect. Can also be a number to reference by index.
		* @param suppressEvent Boolean If true the deselect event will not be fired.
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Deselects all records
		* @param supress Object
		*/
		deselectAll?( supress?:any ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Deselects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param suppressEvent Boolean Set to false to not fire a deselect event.
		*/
		doDeselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Selects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param keepExisting Boolean
		* @param suppressEvent Boolean Set to false to not fire a select event.
		*/
		doSelect?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Returns the template node the passed child belongs to or null if it doesn t belong to one  */
		findItemByChild?(): void;
		/** [Method] Returns the template node by the Ext EventObject or null if it is not found  */
		findTargetByEvent?(): void;
		/** [Method] Returns the value of allowDeselect
		* @returns Boolean
		*/
		getAllowDeselect?(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the value of data
		* @returns Object[]
		*/
		getData?(): any[];
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of deferEmptyText
		* @returns Boolean
		*/
		getDeferEmptyText?(): boolean;
		/** [Method] Returns the value of deselectOnContainerClick
		* @returns Boolean
		*/
		getDeselectOnContainerClick?(): boolean;
		/** [Method] Returns the value of disableSelection
		* @returns Boolean
		*/
		getDisableSelection?(): boolean;
		/** [Method] Returns the value of emptyText
		* @returns String
		*/
		getEmptyText?(): string;
		/** [Method] Returns the value of inline
		* @returns Boolean/Object
		*/
		getInline?(): any;
		/** [Method] Returns an item at the specified index
		* @param index Number Index of the item.
		* @returns Ext.dom.Element/Ext.dataview.component.DataItem item Item at the specified index.
		*/
		getItemAt?( index?:number ): any;
		/** [Method] Returns the value of itemCls
		* @returns String
		*/
		getItemCls?(): string;
		/** [Method] Returns the value of itemConfig
		* @returns Object
		*/
		getItemConfig?(): any;
		/** [Method] Returns an index for the specified item
		* @param item Number The item to locate.
		* @returns Number Index for the specified item.
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of itemTpl
		* @returns String/String[]/Ext.XTemplate
		*/
		getItemTpl?(): any;
		/** [Method] Returns the array of previously selected items
		* @returns Array The previous selection.
		*/
		getLastSelected?(): any[];
		/** [Method] Returns the value of loadingText
		* @returns String/Boolean
		*/
		getLoadingText?(): any;
		/** [Method] Returns the value of maxItemCache
		* @returns Number
		*/
		getMaxItemCache?(): number;
		/** [Method] Returns the value of mode
		* @returns String
		*/
		getMode?(): string;
		/** [Method] Gets a template node  */
		getNode?(): void;
		/** [Method] Gets a range nodes  */
		getNodes?(): void;
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay
		* @returns Number
		*/
		getPressedDelay?(): number;
		/** [Method] Gets an array of the records from an array of nodes  */
		getRecords?(): void;
		/** [Method] Returns the value of scrollToTopOnRefresh
		* @returns Boolean
		*/
		getScrollToTopOnRefresh?(): boolean;
		/** [Method] Returns the value of scrollable
		* @returns Boolean
		*/
		getScrollable?(): boolean;
		/** [Method] Returns the value of selectedCls
		* @returns String
		*/
		getSelectedCls?(): string;
		/** [Method] Gets the currently selected nodes  */
		getSelectedNodes?(): void;
		/** [Method] Gets an array of the selected records  */
		getSelectedRecords?(): void;
		/** [Method] Returns an array of the currently selected records
		* @returns Array An array of selected records.
		*/
		getSelection?(): any[];
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable
		* @returns String The current mode.
		*/
		getSelectionMode?(): string;
		/** [Method] Returns the value of store
		* @returns Ext.data.Store/Object
		*/
		getStore?(): any;
		/** [Method] Returns the value of triggerCtEvent
		* @returns String
		*/
		getTriggerCtEvent?(): string;
		/** [Method] Returns the value of triggerEvent
		* @returns String
		*/
		getTriggerEvent?(): string;
		/** [Method] Returns the value of useComponents
		* @returns Boolean
		*/
		getUseComponents?(): boolean;
		/** [Method] Returns an array of the current items in the DataView
		* @returns Ext.dom.Element[]/Ext.dataview.component.DataItem[] Array of Items.
		*/
		getViewItems?(): any;
		/** [Method] Method called when the Store s Reader throws an exception */
		handleException?(): void;
		/** [Method] Returns true if there is a selected record
		* @returns Boolean
		*/
		hasSelection?(): boolean;
		/** [Method] Finds the index of the passed node  */
		indexOf?(): void;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if the Selectable is currently locked
		* @returns Boolean True if currently locked
		*/
		isLocked?(): boolean;
		/** [Method] Returns true if the specified row is selected
		* @param record Ext.data.Model/Number The record or index of the record to check.
		* @returns Boolean
		*/
		isSelected?( record?:any ): boolean;
		/** [Method] Function which can be overridden to provide custom formatting for each Record that is used by this DataView s templat
		* @param data Object/Object[] The raw data object that was used to create the Record.
		* @param index Number the index number of the Record being prepared for rendering.
		* @param record Ext.data.Model The Record being prepared for rendering.
		* @returns Array/Object The formatted data in a format expected by the internal template's overwrite() method. (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
		*/
		prepareData?( data?:any, index?:number, record?:Ext.data.IModel ): any;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Refreshes an individual node s data from the store  */
		refreshNode?(): void;
		/** [Method] Adds the given records to the currently selected set
		* @param records Ext.data.Model/Array/Number The records to select.
		* @param keepExisting Boolean If true, the existing selection will be added to (if not, the old selection is replaced).
		* @param suppressEvent Boolean If true, the select event will not be fired.
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Selects all records
		* @param silent Boolean true to suppress all select events.
		*/
		selectAll?( silent?:boolean ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked
		* @param startRecord Number The index of the first row in the range.
		* @param endRecord Number The index of the last row in the range.
		* @param keepExisting Boolean true to retain existing selections.
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:boolean ): void;
		/** [Method] Sets the value of allowDeselect
		* @param allowDeselect Boolean The new value.
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of data
		* @param data Object[] The new value.
		*/
		setData?( data?:any[] ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of deferEmptyText
		* @param deferEmptyText Boolean The new value.
		*/
		setDeferEmptyText?( deferEmptyText?:boolean ): void;
		/** [Method] Sets the value of deselectOnContainerClick
		* @param deselectOnContainerClick Boolean The new value.
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:boolean ): void;
		/** [Method] Sets the value of disableSelection
		* @param disableSelection Boolean The new value.
		*/
		setDisableSelection?( disableSelection?:boolean ): void;
		/** [Method] Sets the value of emptyText
		* @param emptyText String The new value.
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of inline
		* @param inline Boolean/Object The new value.
		*/
		setInline?( inline?:any ): void;
		/** [Method] Sets the value of itemCls
		* @param itemCls String The new value.
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of itemConfig
		* @param itemConfig Object The new value.
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemTpl
		* @param itemTpl String/String[]/Ext.XTemplate The new value.
		*/
		setItemTpl?( itemTpl?:any ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String/Boolean The new value.
		*/
		setLoadingText?( loadingText?:any ): void;
		/** [Method] Sets the value of maxItemCache
		* @param maxItemCache Number The new value.
		*/
		setMaxItemCache?( maxItemCache?:number ): void;
		/** [Method] Sets the value of mode
		* @param mode String The new value.
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay
		* @param pressedDelay Number The new value.
		*/
		setPressedDelay?( pressedDelay?:number ): void;
		/** [Method] Sets the value of scrollToTopOnRefresh
		* @param scrollToTopOnRefresh Boolean The new value.
		*/
		setScrollToTopOnRefresh?( scrollToTopOnRefresh?:boolean ): void;
		/** [Method] Sets the value of selectedCls
		* @param selectedCls String The new value.
		*/
		setSelectedCls?( selectedCls?:string ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.Store/Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of triggerCtEvent
		* @param triggerCtEvent String The new value.
		*/
		setTriggerCtEvent?( triggerCtEvent?:string ): void;
		/** [Method] Sets the value of triggerEvent
		* @param triggerEvent String The new value.
		*/
		setTriggerEvent?( triggerEvent?:string ): void;
		/** [Method] Sets the value of useComponents
		* @param useComponents Boolean The new value.
		*/
		setUseComponents?( useComponents?:boolean ): void;
		/** [Method] Sets a record as the last focused record
		* @param newRecord Ext.data.Record
		* @param oldRecord Ext.data.Record
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare namespace Ext {
	export interface IDataView extends Ext.IContainer,Ext.mixin.ISelectable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		blockRefresh?: boolean;
		/** [Config Option] (Object[]) */
		data?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		deferEmptyText?: boolean;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Object) */
		itemConfig?: any;
		/** [Config Option] (Boolean) */
		itemSelector?: boolean;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (String/Boolean) */
		loadingText?: any;
		/** [Config Option] (Number) */
		maxItemCache?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Boolean) */
		overItemCls?: boolean;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number) */
		pressedDelay?: number;
		/** [Config Option] (Boolean) */
		scrollToTopOnRefresh?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		selectedItemCls?: boolean;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		singleSelect?: boolean;
		/** [Config Option] (Ext.data.Store/Object) */
		store?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String) */
		triggerCtEvent?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
		/** [Config Option] (Boolean) */
		useComponents?: boolean;
		/** [Method] Binds a new Store to this DataView  */
		bindStore?(): void;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  */
		collectData?(): void;
		/** [Method] Deselects the given record s
		* @param records Number/Array/Ext.data.Model The record(s) to deselect. Can also be a number to reference by index.
		* @param suppressEvent Boolean If true the deselect event will not be fired.
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Deselects all records
		* @param supress Object
		*/
		deselectAll?( supress?:any ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Deselects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param suppressEvent Boolean Set to false to not fire a deselect event.
		*/
		doDeselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Selects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param keepExisting Boolean
		* @param suppressEvent Boolean Set to false to not fire a select event.
		*/
		doSelect?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Returns the template node the passed child belongs to or null if it doesn t belong to one  */
		findItemByChild?(): void;
		/** [Method] Returns the template node by the Ext EventObject or null if it is not found  */
		findTargetByEvent?(): void;
		/** [Method] Returns the value of allowDeselect
		* @returns Boolean
		*/
		getAllowDeselect?(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the value of data
		* @returns Object[]
		*/
		getData?(): any[];
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of deferEmptyText
		* @returns Boolean
		*/
		getDeferEmptyText?(): boolean;
		/** [Method] Returns the value of deselectOnContainerClick
		* @returns Boolean
		*/
		getDeselectOnContainerClick?(): boolean;
		/** [Method] Returns the value of disableSelection
		* @returns Boolean
		*/
		getDisableSelection?(): boolean;
		/** [Method] Returns the value of emptyText
		* @returns String
		*/
		getEmptyText?(): string;
		/** [Method] Returns the value of inline
		* @returns Boolean/Object
		*/
		getInline?(): any;
		/** [Method] Returns an item at the specified index
		* @param index Number Index of the item.
		* @returns Ext.dom.Element/Ext.dataview.component.DataItem item Item at the specified index.
		*/
		getItemAt?( index?:number ): any;
		/** [Method] Returns the value of itemCls
		* @returns String
		*/
		getItemCls?(): string;
		/** [Method] Returns the value of itemConfig
		* @returns Object
		*/
		getItemConfig?(): any;
		/** [Method] Returns an index for the specified item
		* @param item Number The item to locate.
		* @returns Number Index for the specified item.
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of itemTpl
		* @returns String/String[]/Ext.XTemplate
		*/
		getItemTpl?(): any;
		/** [Method] Returns the array of previously selected items
		* @returns Array The previous selection.
		*/
		getLastSelected?(): any[];
		/** [Method] Returns the value of loadingText
		* @returns String/Boolean
		*/
		getLoadingText?(): any;
		/** [Method] Returns the value of maxItemCache
		* @returns Number
		*/
		getMaxItemCache?(): number;
		/** [Method] Returns the value of mode
		* @returns String
		*/
		getMode?(): string;
		/** [Method] Gets a template node  */
		getNode?(): void;
		/** [Method] Gets a range nodes  */
		getNodes?(): void;
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay
		* @returns Number
		*/
		getPressedDelay?(): number;
		/** [Method] Gets an array of the records from an array of nodes  */
		getRecords?(): void;
		/** [Method] Returns the value of scrollToTopOnRefresh
		* @returns Boolean
		*/
		getScrollToTopOnRefresh?(): boolean;
		/** [Method] Returns the value of scrollable
		* @returns Boolean
		*/
		getScrollable?(): boolean;
		/** [Method] Returns the value of selectedCls
		* @returns String
		*/
		getSelectedCls?(): string;
		/** [Method] Gets the currently selected nodes  */
		getSelectedNodes?(): void;
		/** [Method] Gets an array of the selected records  */
		getSelectedRecords?(): void;
		/** [Method] Returns an array of the currently selected records
		* @returns Array An array of selected records.
		*/
		getSelection?(): any[];
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable
		* @returns String The current mode.
		*/
		getSelectionMode?(): string;
		/** [Method] Returns the value of store
		* @returns Ext.data.Store/Object
		*/
		getStore?(): any;
		/** [Method] Returns the value of triggerCtEvent
		* @returns String
		*/
		getTriggerCtEvent?(): string;
		/** [Method] Returns the value of triggerEvent
		* @returns String
		*/
		getTriggerEvent?(): string;
		/** [Method] Returns the value of useComponents
		* @returns Boolean
		*/
		getUseComponents?(): boolean;
		/** [Method] Returns an array of the current items in the DataView
		* @returns Ext.dom.Element[]/Ext.dataview.component.DataItem[] Array of Items.
		*/
		getViewItems?(): any;
		/** [Method] Method called when the Store s Reader throws an exception */
		handleException?(): void;
		/** [Method] Returns true if there is a selected record
		* @returns Boolean
		*/
		hasSelection?(): boolean;
		/** [Method] Finds the index of the passed node  */
		indexOf?(): void;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if the Selectable is currently locked
		* @returns Boolean True if currently locked
		*/
		isLocked?(): boolean;
		/** [Method] Returns true if the specified row is selected
		* @param record Ext.data.Model/Number The record or index of the record to check.
		* @returns Boolean
		*/
		isSelected?( record?:any ): boolean;
		/** [Method] Function which can be overridden to provide custom formatting for each Record that is used by this DataView s templat
		* @param data Object/Object[] The raw data object that was used to create the Record.
		* @param index Number the index number of the Record being prepared for rendering.
		* @param record Ext.data.Model The Record being prepared for rendering.
		* @returns Array/Object The formatted data in a format expected by the internal template's overwrite() method. (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))
		*/
		prepareData?( data?:any, index?:number, record?:Ext.data.IModel ): any;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Refreshes an individual node s data from the store  */
		refreshNode?(): void;
		/** [Method] Adds the given records to the currently selected set
		* @param records Ext.data.Model/Array/Number The records to select.
		* @param keepExisting Boolean If true, the existing selection will be added to (if not, the old selection is replaced).
		* @param suppressEvent Boolean If true, the select event will not be fired.
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Selects all records
		* @param silent Boolean true to suppress all select events.
		*/
		selectAll?( silent?:boolean ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked
		* @param startRecord Number The index of the first row in the range.
		* @param endRecord Number The index of the last row in the range.
		* @param keepExisting Boolean true to retain existing selections.
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:boolean ): void;
		/** [Method] Sets the value of allowDeselect
		* @param allowDeselect Boolean The new value.
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of data
		* @param data Object[] The new value.
		*/
		setData?( data?:any[] ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of deferEmptyText
		* @param deferEmptyText Boolean The new value.
		*/
		setDeferEmptyText?( deferEmptyText?:boolean ): void;
		/** [Method] Sets the value of deselectOnContainerClick
		* @param deselectOnContainerClick Boolean The new value.
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:boolean ): void;
		/** [Method] Sets the value of disableSelection
		* @param disableSelection Boolean The new value.
		*/
		setDisableSelection?( disableSelection?:boolean ): void;
		/** [Method] Sets the value of emptyText
		* @param emptyText String The new value.
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of inline
		* @param inline Boolean/Object The new value.
		*/
		setInline?( inline?:any ): void;
		/** [Method] Sets the value of itemCls
		* @param itemCls String The new value.
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of itemConfig
		* @param itemConfig Object The new value.
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemTpl
		* @param itemTpl String/String[]/Ext.XTemplate The new value.
		*/
		setItemTpl?( itemTpl?:any ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String/Boolean The new value.
		*/
		setLoadingText?( loadingText?:any ): void;
		/** [Method] Sets the value of maxItemCache
		* @param maxItemCache Number The new value.
		*/
		setMaxItemCache?( maxItemCache?:number ): void;
		/** [Method] Sets the value of mode
		* @param mode String The new value.
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay
		* @param pressedDelay Number The new value.
		*/
		setPressedDelay?( pressedDelay?:number ): void;
		/** [Method] Sets the value of scrollToTopOnRefresh
		* @param scrollToTopOnRefresh Boolean The new value.
		*/
		setScrollToTopOnRefresh?( scrollToTopOnRefresh?:boolean ): void;
		/** [Method] Sets the value of selectedCls
		* @param selectedCls String The new value.
		*/
		setSelectedCls?( selectedCls?:string ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.Store/Object The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of triggerCtEvent
		* @param triggerCtEvent String The new value.
		*/
		setTriggerCtEvent?( triggerCtEvent?:string ): void;
		/** [Method] Sets the value of triggerEvent
		* @param triggerEvent String The new value.
		*/
		setTriggerEvent?( triggerEvent?:string ): void;
		/** [Method] Sets the value of useComponents
		* @param useComponents Boolean The new value.
		*/
		setUseComponents?( useComponents?:boolean ): void;
		/** [Method] Sets a record as the last focused record
		* @param newRecord Ext.data.Record
		* @param oldRecord Ext.data.Record
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare namespace Ext.dataview.element {
	export interface IContainer extends Ext.IComponent {
		/** [Method] Destroys this Component  */
		destroy?(): void;
	}
}
declare namespace Ext.dataview.element {
	export interface IList extends Ext.dataview.element.IContainer {
		/** [Method] Destroys this Component  */
		destroy?(): void;
	}
}
declare namespace Ext.dataview {
	export interface IIndexBar extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		alphabet?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		itemSelector?: boolean;
		/** [Config Option] (Array) */
		letters?: any[];
		/** [Config Option] (String) */
		listPrefix?: string;
		/** [Config Option] (Boolean) */
		store?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of letters
		* @returns Array
		*/
		getLetters?(): any[];
		/** [Method] Returns the value of listPrefix
		* @returns String
		*/
		getListPrefix?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal  */
		isHorizontal?(): void;
		/** [Method] Returns true when direction is vertical  */
		isVertical?(): void;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of letters
		* @param letters Array The new value.
		*/
		setLetters?( letters?:any[] ): void;
		/** [Method] Sets the value of listPrefix
		* @param listPrefix String The new value.
		*/
		setListPrefix?( listPrefix?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext {
	export interface IIndexBar extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		alphabet?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		itemSelector?: boolean;
		/** [Config Option] (Array) */
		letters?: any[];
		/** [Config Option] (String) */
		listPrefix?: string;
		/** [Config Option] (Boolean) */
		store?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of letters
		* @returns Array
		*/
		getLetters?(): any[];
		/** [Method] Returns the value of listPrefix
		* @returns String
		*/
		getListPrefix?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal  */
		isHorizontal?(): void;
		/** [Method] Returns true when direction is vertical  */
		isVertical?(): void;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of letters
		* @param letters Array The new value.
		*/
		setLetters?( letters?:any[] ): void;
		/** [Method] Sets the value of listPrefix
		* @param listPrefix String The new value.
		*/
		setListPrefix?( listPrefix?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.dataview {
	export interface IList extends Ext.dataview.IDataView,Ext.mixin.IBindable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		disclosureProperty?: string;
		/** [Config Option] (Boolean) */
		grouped?: boolean;
		/** [Config Option] (Boolean/Object) */
		indexBar?: any;
		/** [Config Option] (Boolean) */
		infinite?: boolean;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Boolean/Function/Object) */
		onItemDisclosure?: any;
		/** [Config Option] (Boolean) */
		pinHeaders?: boolean;
		/** [Config Option] (Boolean) */
		preventSelectionOnDisclose?: boolean;
		/** [Config Option] (Boolean) */
		refreshHeightOnUpdate?: boolean;
		/** [Config Option] (Boolean) */
		striped?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		useSimpleItems?: boolean;
		/** [Config Option] (Boolean) */
		variableHeights?: boolean;
		/** [Property] (Number) */
		bufferSize?: number;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of disclosureProperty
		* @returns String
		*/
		getDisclosureProperty?(): string;
		/** [Method] Returns the value of grouped
		* @returns Boolean
		*/
		getGrouped?(): boolean;
		/** [Method] Returns the value of icon
		* @returns Object
		*/
		getIcon?(): any;
		/** [Method] Returns the value of indexBar
		* @returns Boolean/Object
		*/
		getIndexBar?(): any;
		/** [Method] Returns the value of infinite
		* @returns Boolean
		*/
		getInfinite?(): boolean;
		/** [Method] Returns an item at the specified index
		* @param index Number Index of the item.
		* @returns Ext.dom.Element/Ext.dataview.component.DataItem item Item at the specified index.
		*/
		getItemAt?( index?:number ): any;
		/** [Method] Returns the value of itemHeight
		* @returns Number
		*/
		getItemHeight?(): number;
		/** [Method] Returns an index for the specified item
		* @param item Number The item to locate.
		* @returns Number Index for the specified item.
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of minimumBufferDistance
		* @returns Number
		*/
		getMinimumBufferDistance?(): number;
		/** [Method] Returns the value of onItemDisclosure
		* @returns Boolean/Function/Object
		*/
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of pinHeaders
		* @returns Boolean
		*/
		getPinHeaders?(): boolean;
		/** [Method] Returns the value of preventSelectionOnDisclose
		* @returns Boolean
		*/
		getPreventSelectionOnDisclose?(): boolean;
		/** [Method] Returns the value of refreshHeightOnUpdate
		* @returns Boolean
		*/
		getRefreshHeightOnUpdate?(): boolean;
		/** [Method] Returns all the items that are docked in the scroller in this list
		* @returns Array An array of the scrollDock items
		*/
		getScrollDockedItems?(): any[];
		/** [Method] Returns the value of striped
		* @returns Boolean
		*/
		getStriped?(): boolean;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of useHeaders
		* @returns Boolean
		*/
		getUseHeaders?(): boolean;
		/** [Method] Returns the value of useSimpleItems
		* @returns Boolean
		*/
		getUseSimpleItems?(): boolean;
		/** [Method] Returns the value of variableHeights
		* @returns Boolean
		*/
		getVariableHeights?(): boolean;
		/** [Method] Returns an array of the current items in the DataView
		* @returns Ext.dom.Element[]/Ext.dataview.component.DataItem[] Array of Items.
		*/
		getViewItems?(): any;
		/** [Method] We override DataView s initialize method with an empty function */
		initialize?(): void;
		/** [Method] Scrolls the list so that the specified record is at the top
		* @param record Object {Ext.data.Model} Record in the lists store to scroll to
		* @param animate Object {Boolean} Determines if scrolling is animated to a cut
		* @param overscroll Object {Boolean} Determines if list can be overscrolled
		*/
		scrollToRecord?( record?:any, animate?:any, overscroll?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of disclosureProperty
		* @param disclosureProperty String The new value.
		*/
		setDisclosureProperty?( disclosureProperty?:string ): void;
		/** [Method] Sets the value of grouped
		* @param grouped Boolean The new value.
		*/
		setGrouped?( grouped?:boolean ): void;
		/** [Method] Sets the value of icon
		* @param icon Object The new value.
		*/
		setIcon?( icon?:any ): void;
		/** [Method] Sets the value of indexBar
		* @param indexBar Boolean/Object The new value.
		*/
		setIndexBar?( indexBar?:any ): void;
		/** [Method] Sets the value of infinite
		* @param infinite Boolean The new value.
		*/
		setInfinite?( infinite?:boolean ): void;
		/** [Method] Sets the value of itemHeight
		* @param itemHeight Number The new value.
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of minimumBufferDistance
		* @param minimumBufferDistance Number The new value.
		*/
		setMinimumBufferDistance?( minimumBufferDistance?:number ): void;
		/** [Method] Sets the value of onItemDisclosure
		* @param onItemDisclosure Boolean/Function/Object The new value.
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of pinHeaders
		* @param pinHeaders Boolean The new value.
		*/
		setPinHeaders?( pinHeaders?:boolean ): void;
		/** [Method] Sets the value of preventSelectionOnDisclose
		* @param preventSelectionOnDisclose Boolean The new value.
		*/
		setPreventSelectionOnDisclose?( preventSelectionOnDisclose?:boolean ): void;
		/** [Method] Sets the value of refreshHeightOnUpdate
		* @param refreshHeightOnUpdate Boolean The new value.
		*/
		setRefreshHeightOnUpdate?( refreshHeightOnUpdate?:boolean ): void;
		/** [Method] Sets the value of striped
		* @param striped Boolean The new value.
		*/
		setStriped?( striped?:boolean ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of useHeaders
		* @param useHeaders Boolean The new value.
		*/
		setUseHeaders?( useHeaders?:boolean ): void;
		/** [Method] Sets the value of useSimpleItems
		* @param useSimpleItems Boolean The new value.
		*/
		setUseSimpleItems?( useSimpleItems?:boolean ): void;
		/** [Method] Sets the value of variableHeights
		* @param variableHeights Boolean The new value.
		*/
		setVariableHeights?( variableHeights?:boolean ): void;
	}
}
declare namespace Ext {
	export interface IList extends Ext.dataview.IDataView,Ext.mixin.IBindable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		disclosureProperty?: string;
		/** [Config Option] (Boolean) */
		grouped?: boolean;
		/** [Config Option] (Boolean/Object) */
		indexBar?: any;
		/** [Config Option] (Boolean) */
		infinite?: boolean;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Boolean/Function/Object) */
		onItemDisclosure?: any;
		/** [Config Option] (Boolean) */
		pinHeaders?: boolean;
		/** [Config Option] (Boolean) */
		preventSelectionOnDisclose?: boolean;
		/** [Config Option] (Boolean) */
		refreshHeightOnUpdate?: boolean;
		/** [Config Option] (Boolean) */
		striped?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		useSimpleItems?: boolean;
		/** [Config Option] (Boolean) */
		variableHeights?: boolean;
		/** [Property] (Number) */
		bufferSize?: number;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of disclosureProperty
		* @returns String
		*/
		getDisclosureProperty?(): string;
		/** [Method] Returns the value of grouped
		* @returns Boolean
		*/
		getGrouped?(): boolean;
		/** [Method] Returns the value of icon
		* @returns Object
		*/
		getIcon?(): any;
		/** [Method] Returns the value of indexBar
		* @returns Boolean/Object
		*/
		getIndexBar?(): any;
		/** [Method] Returns the value of infinite
		* @returns Boolean
		*/
		getInfinite?(): boolean;
		/** [Method] Returns an item at the specified index
		* @param index Number Index of the item.
		* @returns Ext.dom.Element/Ext.dataview.component.DataItem item Item at the specified index.
		*/
		getItemAt?( index?:number ): any;
		/** [Method] Returns the value of itemHeight
		* @returns Number
		*/
		getItemHeight?(): number;
		/** [Method] Returns an index for the specified item
		* @param item Number The item to locate.
		* @returns Number Index for the specified item.
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of minimumBufferDistance
		* @returns Number
		*/
		getMinimumBufferDistance?(): number;
		/** [Method] Returns the value of onItemDisclosure
		* @returns Boolean/Function/Object
		*/
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of pinHeaders
		* @returns Boolean
		*/
		getPinHeaders?(): boolean;
		/** [Method] Returns the value of preventSelectionOnDisclose
		* @returns Boolean
		*/
		getPreventSelectionOnDisclose?(): boolean;
		/** [Method] Returns the value of refreshHeightOnUpdate
		* @returns Boolean
		*/
		getRefreshHeightOnUpdate?(): boolean;
		/** [Method] Returns all the items that are docked in the scroller in this list
		* @returns Array An array of the scrollDock items
		*/
		getScrollDockedItems?(): any[];
		/** [Method] Returns the value of striped
		* @returns Boolean
		*/
		getStriped?(): boolean;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of useHeaders
		* @returns Boolean
		*/
		getUseHeaders?(): boolean;
		/** [Method] Returns the value of useSimpleItems
		* @returns Boolean
		*/
		getUseSimpleItems?(): boolean;
		/** [Method] Returns the value of variableHeights
		* @returns Boolean
		*/
		getVariableHeights?(): boolean;
		/** [Method] Returns an array of the current items in the DataView
		* @returns Ext.dom.Element[]/Ext.dataview.component.DataItem[] Array of Items.
		*/
		getViewItems?(): any;
		/** [Method] We override DataView s initialize method with an empty function */
		initialize?(): void;
		/** [Method] Scrolls the list so that the specified record is at the top
		* @param record Object {Ext.data.Model} Record in the lists store to scroll to
		* @param animate Object {Boolean} Determines if scrolling is animated to a cut
		* @param overscroll Object {Boolean} Determines if list can be overscrolled
		*/
		scrollToRecord?( record?:any, animate?:any, overscroll?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of disclosureProperty
		* @param disclosureProperty String The new value.
		*/
		setDisclosureProperty?( disclosureProperty?:string ): void;
		/** [Method] Sets the value of grouped
		* @param grouped Boolean The new value.
		*/
		setGrouped?( grouped?:boolean ): void;
		/** [Method] Sets the value of icon
		* @param icon Object The new value.
		*/
		setIcon?( icon?:any ): void;
		/** [Method] Sets the value of indexBar
		* @param indexBar Boolean/Object The new value.
		*/
		setIndexBar?( indexBar?:any ): void;
		/** [Method] Sets the value of infinite
		* @param infinite Boolean The new value.
		*/
		setInfinite?( infinite?:boolean ): void;
		/** [Method] Sets the value of itemHeight
		* @param itemHeight Number The new value.
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of minimumBufferDistance
		* @param minimumBufferDistance Number The new value.
		*/
		setMinimumBufferDistance?( minimumBufferDistance?:number ): void;
		/** [Method] Sets the value of onItemDisclosure
		* @param onItemDisclosure Boolean/Function/Object The new value.
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of pinHeaders
		* @param pinHeaders Boolean The new value.
		*/
		setPinHeaders?( pinHeaders?:boolean ): void;
		/** [Method] Sets the value of preventSelectionOnDisclose
		* @param preventSelectionOnDisclose Boolean The new value.
		*/
		setPreventSelectionOnDisclose?( preventSelectionOnDisclose?:boolean ): void;
		/** [Method] Sets the value of refreshHeightOnUpdate
		* @param refreshHeightOnUpdate Boolean The new value.
		*/
		setRefreshHeightOnUpdate?( refreshHeightOnUpdate?:boolean ): void;
		/** [Method] Sets the value of striped
		* @param striped Boolean The new value.
		*/
		setStriped?( striped?:boolean ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of useHeaders
		* @param useHeaders Boolean The new value.
		*/
		setUseHeaders?( useHeaders?:boolean ): void;
		/** [Method] Sets the value of useSimpleItems
		* @param useSimpleItems Boolean The new value.
		*/
		setUseSimpleItems?( useSimpleItems?:boolean ): void;
		/** [Method] Sets the value of variableHeights
		* @param variableHeights Boolean The new value.
		*/
		setVariableHeights?( variableHeights?:boolean ): void;
	}
}
declare namespace Ext.dataview {
	export interface IListItemHeader extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare namespace Ext.dataview {
	export interface INestedList extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Object) */
		backButton?: any;
		/** [Config Option] (String) */
		backText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Number) */
		clearSelectionDelay?: number;
		/** [Config Option] (Ext.Component) */
		detailCard?: Ext.IComponent;
		/** [Config Option] (Ext.Container) */
		detailContainer?: Ext.IContainer;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean/Function) */
		onItemDisclosure?: any;
		/** [Config Option] (Ext.data.TreeStore/String) */
		store?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Ext.Toolbar/Object/Boolean) */
		toolbar?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		updateTitleText?: boolean;
		/** [Config Option] (Boolean) */
		useSimpleItems?: boolean;
		/** [Config Option] (Boolean) */
		useTitleAsBackText?: boolean;
		/** [Config Option] (Boolean) */
		useToolbar?: boolean;
		/** [Config Option] (Boolean) */
		variableHeights?: boolean;
		/** [Method] Returns the value of allowDeselect
		* @returns Boolean
		*/
		getAllowDeselect?(): boolean;
		/** [Method] Returns the value of backButton
		* @returns Object
		*/
		getBackButton?(): any;
		/** [Method] Returns the value of backText
		* @returns String
		*/
		getBackText?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of clearSelectionOnListChange
		* @returns Boolean
		*/
		getClearSelectionOnListChange?(): boolean;
		/** [Method] Returns the value of detailCard
		* @returns Ext.Component
		*/
		getDetailCard?(): Ext.IComponent;
		/** [Method] Returns the value of detailContainer
		* @returns Ext.Container
		*/
		getDetailContainer?(): Ext.IContainer;
		/** [Method] Returns the value of displayField
		* @returns String
		*/
		getDisplayField?(): string;
		/** [Method] Returns the value of emptyText
		* @returns String
		*/
		getEmptyText?(): string;
		/** [Method] Returns the value of itemHeight
		* @returns Number
		*/
		getItemHeight?(): number;
		/** [Method] Override this method to provide custom template rendering of individual nodes
		* @param node Ext.data.Record
		* @returns String
		*/
		getItemTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of listConfig
		* @returns Object
		*/
		getListConfig?(): any;
		/** [Method] Returns the value of loadingText
		* @returns String
		*/
		getLoadingText?(): string;
		/** [Method] Returns the value of onItemDisclosure
		* @returns Boolean/Function
		*/
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of store
		* @returns Ext.data.TreeStore/String
		*/
		getStore?(): any;
		/** [Method] Returns the subList for a specified node  */
		getSubList?(): void;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Override this method to provide custom template rendering of titles back buttons when useTitleAsBackText is enabled
		* @param node Ext.data.Record
		* @returns String
		*/
		getTitleTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of toolbar
		* @returns Ext.Toolbar/Object/Boolean
		*/
		getToolbar?(): any;
		/** [Method] Returns the value of updateTitleText
		* @returns Boolean
		*/
		getUpdateTitleText?(): boolean;
		/** [Method] Returns the value of useSimpleItems
		* @returns Boolean
		*/
		getUseSimpleItems?(): boolean;
		/** [Method] Returns the value of useTitleAsBackText
		* @returns Boolean
		*/
		getUseTitleAsBackText?(): boolean;
		/** [Method] Returns the value of useToolbar
		* @returns Boolean
		*/
		getUseToolbar?(): boolean;
		/** [Method] Returns the value of variableHeights
		* @returns Boolean
		*/
		getVariableHeights?(): boolean;
		/** [Method] The leaf you want to navigate to
		* @param node Ext.data.NodeInterface The specified node to navigate to.
		*/
		goToLeaf?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Method to handle going to a specific node within this nested list
		* @param node Ext.data.NodeInterface The specified node to navigate to.
		*/
		goToNode?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Called when the backButton has been tapped  */
		onBackTap?(): void;
		/** [Method] Called when an list item has been tapped
		* @param list Ext.List The subList the item is on.
		* @param index Number The id of the item tapped.
		* @param target Ext.Element The list item tapped.
		* @param record Ext.data.Record The record which as tapped.
		* @param e Ext.event.Event The event.
		*/
		onItemTap?( list?:Ext.IList, index?:number, target?:Ext.IElement, record?:Ext.data.IRecord, e?:Ext.event.IEvent ): void;
		/** [Method] Sets the value of allowDeselect
		* @param allowDeselect Boolean The new value.
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;
		/** [Method] Sets the value of backButton
		* @param backButton Object The new value.
		*/
		setBackButton?( backButton?:any ): void;
		/** [Method] Sets the value of backText
		* @param backText String The new value.
		*/
		setBackText?( backText?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearSelectionOnListChange
		* @param clearSelectionOnListChange Boolean The new value.
		*/
		setClearSelectionOnListChange?( clearSelectionOnListChange?:boolean ): void;
		/** [Method] Sets the value of detailCard
		* @param detailCard Ext.Component The new value.
		*/
		setDetailCard?( detailCard?:Ext.IComponent ): void;
		/** [Method] Sets the value of detailContainer
		* @param detailContainer Ext.Container The new value.
		*/
		setDetailContainer?( detailContainer?:Ext.IContainer ): void;
		/** [Method] Sets the value of displayField
		* @param displayField String The new value.
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of emptyText
		* @param emptyText String The new value.
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of itemHeight
		* @param itemHeight Number The new value.
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of listConfig
		* @param listConfig Object The new value.
		*/
		setListConfig?( listConfig?:any ): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String The new value.
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of onItemDisclosure
		* @param onItemDisclosure Boolean/Function The new value.
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.TreeStore/String The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of toolbar
		* @param toolbar Ext.Toolbar/Object/Boolean The new value.
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui Object The new value.
		*/
		setUi?( ui?:any ): void;
		/** [Method] Sets the value of updateTitleText
		* @param updateTitleText Boolean The new value.
		*/
		setUpdateTitleText?( updateTitleText?:boolean ): void;
		/** [Method] Sets the value of useSimpleItems
		* @param useSimpleItems Boolean The new value.
		*/
		setUseSimpleItems?( useSimpleItems?:boolean ): void;
		/** [Method] Sets the value of useTitleAsBackText
		* @param useTitleAsBackText Boolean The new value.
		*/
		setUseTitleAsBackText?( useTitleAsBackText?:boolean ): void;
		/** [Method] Sets the value of useToolbar
		* @param useToolbar Boolean The new value.
		*/
		setUseToolbar?( useToolbar?:boolean ): void;
		/** [Method] Sets the value of variableHeights
		* @param variableHeights Boolean The new value.
		*/
		setVariableHeights?( variableHeights?:boolean ): void;
	}
}
declare namespace Ext {
	export interface INestedList extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Object) */
		backButton?: any;
		/** [Config Option] (String) */
		backText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Number) */
		clearSelectionDelay?: number;
		/** [Config Option] (Ext.Component) */
		detailCard?: Ext.IComponent;
		/** [Config Option] (Ext.Container) */
		detailContainer?: Ext.IContainer;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean/Function) */
		onItemDisclosure?: any;
		/** [Config Option] (Ext.data.TreeStore/String) */
		store?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Ext.Toolbar/Object/Boolean) */
		toolbar?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		updateTitleText?: boolean;
		/** [Config Option] (Boolean) */
		useSimpleItems?: boolean;
		/** [Config Option] (Boolean) */
		useTitleAsBackText?: boolean;
		/** [Config Option] (Boolean) */
		useToolbar?: boolean;
		/** [Config Option] (Boolean) */
		variableHeights?: boolean;
		/** [Method] Returns the value of allowDeselect
		* @returns Boolean
		*/
		getAllowDeselect?(): boolean;
		/** [Method] Returns the value of backButton
		* @returns Object
		*/
		getBackButton?(): any;
		/** [Method] Returns the value of backText
		* @returns String
		*/
		getBackText?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of clearSelectionOnListChange
		* @returns Boolean
		*/
		getClearSelectionOnListChange?(): boolean;
		/** [Method] Returns the value of detailCard
		* @returns Ext.Component
		*/
		getDetailCard?(): Ext.IComponent;
		/** [Method] Returns the value of detailContainer
		* @returns Ext.Container
		*/
		getDetailContainer?(): Ext.IContainer;
		/** [Method] Returns the value of displayField
		* @returns String
		*/
		getDisplayField?(): string;
		/** [Method] Returns the value of emptyText
		* @returns String
		*/
		getEmptyText?(): string;
		/** [Method] Returns the value of itemHeight
		* @returns Number
		*/
		getItemHeight?(): number;
		/** [Method] Override this method to provide custom template rendering of individual nodes
		* @param node Ext.data.Record
		* @returns String
		*/
		getItemTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of listConfig
		* @returns Object
		*/
		getListConfig?(): any;
		/** [Method] Returns the value of loadingText
		* @returns String
		*/
		getLoadingText?(): string;
		/** [Method] Returns the value of onItemDisclosure
		* @returns Boolean/Function
		*/
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of store
		* @returns Ext.data.TreeStore/String
		*/
		getStore?(): any;
		/** [Method] Returns the subList for a specified node  */
		getSubList?(): void;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Override this method to provide custom template rendering of titles back buttons when useTitleAsBackText is enabled
		* @param node Ext.data.Record
		* @returns String
		*/
		getTitleTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of toolbar
		* @returns Ext.Toolbar/Object/Boolean
		*/
		getToolbar?(): any;
		/** [Method] Returns the value of updateTitleText
		* @returns Boolean
		*/
		getUpdateTitleText?(): boolean;
		/** [Method] Returns the value of useSimpleItems
		* @returns Boolean
		*/
		getUseSimpleItems?(): boolean;
		/** [Method] Returns the value of useTitleAsBackText
		* @returns Boolean
		*/
		getUseTitleAsBackText?(): boolean;
		/** [Method] Returns the value of useToolbar
		* @returns Boolean
		*/
		getUseToolbar?(): boolean;
		/** [Method] Returns the value of variableHeights
		* @returns Boolean
		*/
		getVariableHeights?(): boolean;
		/** [Method] The leaf you want to navigate to
		* @param node Ext.data.NodeInterface The specified node to navigate to.
		*/
		goToLeaf?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Method to handle going to a specific node within this nested list
		* @param node Ext.data.NodeInterface The specified node to navigate to.
		*/
		goToNode?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Called when the backButton has been tapped  */
		onBackTap?(): void;
		/** [Method] Called when an list item has been tapped
		* @param list Ext.List The subList the item is on.
		* @param index Number The id of the item tapped.
		* @param target Ext.Element The list item tapped.
		* @param record Ext.data.Record The record which as tapped.
		* @param e Ext.event.Event The event.
		*/
		onItemTap?( list?:Ext.IList, index?:number, target?:Ext.IElement, record?:Ext.data.IRecord, e?:Ext.event.IEvent ): void;
		/** [Method] Sets the value of allowDeselect
		* @param allowDeselect Boolean The new value.
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;
		/** [Method] Sets the value of backButton
		* @param backButton Object The new value.
		*/
		setBackButton?( backButton?:any ): void;
		/** [Method] Sets the value of backText
		* @param backText String The new value.
		*/
		setBackText?( backText?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearSelectionOnListChange
		* @param clearSelectionOnListChange Boolean The new value.
		*/
		setClearSelectionOnListChange?( clearSelectionOnListChange?:boolean ): void;
		/** [Method] Sets the value of detailCard
		* @param detailCard Ext.Component The new value.
		*/
		setDetailCard?( detailCard?:Ext.IComponent ): void;
		/** [Method] Sets the value of detailContainer
		* @param detailContainer Ext.Container The new value.
		*/
		setDetailContainer?( detailContainer?:Ext.IContainer ): void;
		/** [Method] Sets the value of displayField
		* @param displayField String The new value.
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of emptyText
		* @param emptyText String The new value.
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of itemHeight
		* @param itemHeight Number The new value.
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of listConfig
		* @param listConfig Object The new value.
		*/
		setListConfig?( listConfig?:any ): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String The new value.
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of onItemDisclosure
		* @param onItemDisclosure Boolean/Function The new value.
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.TreeStore/String The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of toolbar
		* @param toolbar Ext.Toolbar/Object/Boolean The new value.
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui Object The new value.
		*/
		setUi?( ui?:any ): void;
		/** [Method] Sets the value of updateTitleText
		* @param updateTitleText Boolean The new value.
		*/
		setUpdateTitleText?( updateTitleText?:boolean ): void;
		/** [Method] Sets the value of useSimpleItems
		* @param useSimpleItems Boolean The new value.
		*/
		setUseSimpleItems?( useSimpleItems?:boolean ): void;
		/** [Method] Sets the value of useTitleAsBackText
		* @param useTitleAsBackText Boolean The new value.
		*/
		setUseTitleAsBackText?( useTitleAsBackText?:boolean ): void;
		/** [Method] Sets the value of useToolbar
		* @param useToolbar Boolean The new value.
		*/
		setUseToolbar?( useToolbar?:boolean ): void;
		/** [Method] Sets the value of variableHeights
		* @param variableHeights Boolean The new value.
		*/
		setVariableHeights?( variableHeights?:boolean ): void;
	}
}
declare namespace Ext {
	export interface IDate extends Ext.IDateExtras {
	}
	export class Date {
		/** [Property] (String) */
		static DAY: string;
		/** [Property] (String) */
		static HOUR: string;
		/** [Property] (String) */
		static MILLI: string;
		/** [Property] (String) */
		static MINUTE: string;
		/** [Property] (String) */
		static MONTH: string;
		/** [Property] (String) */
		static SECOND: string;
		/** [Property] (String) */
		static YEAR: string;
		/** [Property] (Array) */
		static dayNames: any[];
		/** [Property] (String) */
		static defaultFormat: string;
		/** [Property] (Object) */
		static defaults: any;
		/** [Property] (Object) */
		static formatCodes: any;
		/** [Property] (Object) */
		static formatFunctions: any;
		/** [Property] (Array) */
		static monthNames: any[];
		/** [Property] (Object) */
		static monthNumbers: any;
		/** [Property] (Object) */
		static parseFunctions: any;
		/** [Property] (Boolean) */
		static useStrict: boolean;
		/** [Method] Provides a convenient method for performing basic date arithmetic
		* @param date Date The date to modify.
		* @param interval String A valid date interval enum value.
		* @param value Number The amount to add to the current date.
		* @returns Date The new Date instance.
		*/
		static add( date?:any, interval?:string, value?:number ): any;
		/** [Method] Align the date to unit
		* @param date Date The date to be aligned.
		* @param unit String The unit. This unit is compatible with the date interval constants.
		* @returns Date The aligned date.
		*/
		static align( date?:any, unit?:string ): any;
		/** [Method] Checks if a date falls on or between the given start and end dates
		* @param date Date The date to check.
		* @param start Date Start date.
		* @param end Date End date.
		* @returns Boolean true if this date falls on or between the given start and end dates.
		*/
		static between( date?:any, start?:any, end?:any ): boolean;
		/** [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically
		* @param date Date The date.
		* @param clone Boolean true to create a clone of this date, clear the time and return it.
		* @returns Date this or the clone.
		*/
		static clearTime( date?:any, clone?:boolean ): any;
		/** [Method] Creates and returns a new Date instance with the exact same date value as the called instance
		* @param date Date The date.
		* @returns Date The new Date instance.
		*/
		static clone( date?:any ): any;
		/** [Method] Calculate how many units are there between two time
		* @param min Date The first time.
		* @param max Date The second time.
		* @param unit String The unit. This unit is compatible with the date interval constants.
		* @returns Number The maximum number n of units that min + n * unit &lt;= max.
		*/
		static diff( min?:any, max?:any, unit?:string ): number;
		/** [Method] Formats a date given the supplied format string
		* @param date Date The date to format.
		* @param format String The format string.
		* @returns String The formatted date.
		*/
		static format( date?:any, format?:string ): string;
		/** [Method] Get the numeric day number of the year adjusted for leap year
		* @param date Date The date.
		* @returns Number 0 to 364 (365 in leap years).
		*/
		static getDayOfYear( date?:any ): number;
		/** [Method] Get the number of days in the current month adjusted for leap year
		* @param date Date The date.
		* @returns Number The number of days in the month.
		*/
		static getDaysInMonth( date?:any ): number;
		/** [Method] Returns the number of milliseconds between two dates
		* @param dateA Date The first date.
		* @param dateB Date The second date, defaults to now.
		* @returns Number The difference in milliseconds.
		*/
		static getElapsed( dateA?:any, dateB?:any ): number;
		/** [Method] Get the date of the first day of the month in which this date resides
		* @param date Date The date.
		* @returns Date
		*/
		static getFirstDateOfMonth( date?:any ): any;
		/** [Method] Get the first day of the current month adjusted for leap year
		* @param date Date The date
		* @returns Number The day number (0-6).
		*/
		static getFirstDayOfMonth( date?:any ): number;
		/** [Method] Get the offset from GMT of the current date equivalent to the format specifier O
		* @param date Date The date.
		* @param colon Boolean true to separate the hours and minutes with a colon.
		* @returns String The 4-character offset string prefixed with + or - (e.g. '-0600').
		*/
		static getGMTOffset( date?:any, colon?:boolean ): string;
		/** [Method] Get the date of the last day of the month in which this date resides
		* @param date Date The date.
		* @returns Date
		*/
		static getLastDateOfMonth( date?:any ): any;
		/** [Method] Get the last day of the current month adjusted for leap year
		* @param date Date The date.
		* @returns Number The day number (0-6).
		*/
		static getLastDayOfMonth( date?:any ): number;
		/** [Method] Get the zero based JavaScript month number for the given short full month name
		* @param name String The short/full month name.
		* @returns Number The zero-based JavaScript month number.
		*/
		static getMonthNumber( name?:string ): number;
		/** [Method] Get the short day name for the given day number
		* @param day Number A zero-based JavaScript day number.
		* @returns String The short day name.
		*/
		static getShortDayName( day?:number ): string;
		/** [Method] Get the short month name for the given month number
		* @param month Number A zero-based JavaScript month number.
		* @returns String The short month name.
		*/
		static getShortMonthName( month?:number ): string;
		/** [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S
		* @param date Date The date.
		* @returns String 'st', 'nd', 'rd' or 'th'.
		*/
		static getSuffix( date?:any ): string;
		/** [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T
		* @param date Date The date.
		* @returns String The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).
		*/
		static getTimezone( date?:any ): string;
		/** [Method] Get the numeric ISO 8601 week number of the year equivalent to the format specifier W  but without a leading zero
		* @param date Date The date.
		* @returns Number 1 to 53.
		*/
		static getWeekOfYear( date?:any ): number;
		/** [Method] Checks if the current date is affected by Daylight Saving Time DST
		* @param date Date The date.
		* @returns Boolean true if the current date is affected by DST.
		*/
		static isDST( date?:any ): boolean;
		/** [Method] Checks if the current date falls within a leap year
		* @param date Date The date.
		* @returns Boolean true if the current date falls within a leap year, false otherwise.
		*/
		static isLeapYear( date?:any ): boolean;
		/** [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover
		* @param year Number 4-digit year.
		* @param month Number 1-based month-of-year.
		* @param day Number Day of month.
		* @param hour Number Hour.
		* @param minute Number Minute.
		* @param second Number Second.
		* @param millisecond Number Millisecond.
		* @returns Boolean true if the passed parameters do not cause a Date "rollover", false otherwise.
		*/
		static isValid( year?:number, month?:number, day?:number, hour?:number, minute?:number, second?:number, millisecond?:number ): boolean;
		/** [Method] Returns the current timestamp
		* @returns Number The current timestamp.
		*/
		static now(): number;
		/** [Method] Parses the passed string using the specified date format
		* @param input String/Number The raw date string.
		* @param format String The expected date string format.
		* @param strict Boolean true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed.
		* @returns Date/null The parsed Date, or null if an invalid date string.
		*/
		static parse( input?:any, format?:string, strict?:boolean ): any;
	}
}
declare namespace Ext {
	export interface IDateExtras {
	}
	export class DateExtras {
		/** [Property] (String) */
		static DAY: string;
		/** [Property] (String) */
		static HOUR: string;
		/** [Property] (String) */
		static MILLI: string;
		/** [Property] (String) */
		static MINUTE: string;
		/** [Property] (String) */
		static MONTH: string;
		/** [Property] (String) */
		static SECOND: string;
		/** [Property] (String) */
		static YEAR: string;
		/** [Property] (Array) */
		static dayNames: any[];
		/** [Property] (String) */
		static defaultFormat: string;
		/** [Property] (Object) */
		static defaults: any;
		/** [Property] (Object) */
		static formatCodes: any;
		/** [Property] (Object) */
		static formatFunctions: any;
		/** [Property] (Array) */
		static monthNames: any[];
		/** [Property] (Object) */
		static monthNumbers: any;
		/** [Property] (Object) */
		static parseFunctions: any;
		/** [Property] (Boolean) */
		static useStrict: boolean;
		/** [Method] Provides a convenient method for performing basic date arithmetic
		* @param date Date The date to modify.
		* @param interval String A valid date interval enum value.
		* @param value Number The amount to add to the current date.
		* @returns Date The new Date instance.
		*/
		static add( date?:any, interval?:string, value?:number ): any;
		/** [Method] Align the date to unit
		* @param date Date The date to be aligned.
		* @param unit String The unit. This unit is compatible with the date interval constants.
		* @returns Date The aligned date.
		*/
		static align( date?:any, unit?:string ): any;
		/** [Method] Checks if a date falls on or between the given start and end dates
		* @param date Date The date to check.
		* @param start Date Start date.
		* @param end Date End date.
		* @returns Boolean true if this date falls on or between the given start and end dates.
		*/
		static between( date?:any, start?:any, end?:any ): boolean;
		/** [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically
		* @param date Date The date.
		* @param clone Boolean true to create a clone of this date, clear the time and return it.
		* @returns Date this or the clone.
		*/
		static clearTime( date?:any, clone?:boolean ): any;
		/** [Method] Creates and returns a new Date instance with the exact same date value as the called instance
		* @param date Date The date.
		* @returns Date The new Date instance.
		*/
		static clone( date?:any ): any;
		/** [Method] Calculate how many units are there between two time
		* @param min Date The first time.
		* @param max Date The second time.
		* @param unit String The unit. This unit is compatible with the date interval constants.
		* @returns Number The maximum number n of units that min + n * unit &lt;= max.
		*/
		static diff( min?:any, max?:any, unit?:string ): number;
		/** [Method] Formats a date given the supplied format string
		* @param date Date The date to format.
		* @param format String The format string.
		* @returns String The formatted date.
		*/
		static format( date?:any, format?:string ): string;
		/** [Method] Get the numeric day number of the year adjusted for leap year
		* @param date Date The date.
		* @returns Number 0 to 364 (365 in leap years).
		*/
		static getDayOfYear( date?:any ): number;
		/** [Method] Get the number of days in the current month adjusted for leap year
		* @param date Date The date.
		* @returns Number The number of days in the month.
		*/
		static getDaysInMonth( date?:any ): number;
		/** [Method] Returns the number of milliseconds between two dates
		* @param dateA Date The first date.
		* @param dateB Date The second date, defaults to now.
		* @returns Number The difference in milliseconds.
		*/
		static getElapsed( dateA?:any, dateB?:any ): number;
		/** [Method] Get the date of the first day of the month in which this date resides
		* @param date Date The date.
		* @returns Date
		*/
		static getFirstDateOfMonth( date?:any ): any;
		/** [Method] Get the first day of the current month adjusted for leap year
		* @param date Date The date
		* @returns Number The day number (0-6).
		*/
		static getFirstDayOfMonth( date?:any ): number;
		/** [Method] Get the offset from GMT of the current date equivalent to the format specifier O
		* @param date Date The date.
		* @param colon Boolean true to separate the hours and minutes with a colon.
		* @returns String The 4-character offset string prefixed with + or - (e.g. '-0600').
		*/
		static getGMTOffset( date?:any, colon?:boolean ): string;
		/** [Method] Get the date of the last day of the month in which this date resides
		* @param date Date The date.
		* @returns Date
		*/
		static getLastDateOfMonth( date?:any ): any;
		/** [Method] Get the last day of the current month adjusted for leap year
		* @param date Date The date.
		* @returns Number The day number (0-6).
		*/
		static getLastDayOfMonth( date?:any ): number;
		/** [Method] Get the zero based JavaScript month number for the given short full month name
		* @param name String The short/full month name.
		* @returns Number The zero-based JavaScript month number.
		*/
		static getMonthNumber( name?:string ): number;
		/** [Method] Get the short day name for the given day number
		* @param day Number A zero-based JavaScript day number.
		* @returns String The short day name.
		*/
		static getShortDayName( day?:number ): string;
		/** [Method] Get the short month name for the given month number
		* @param month Number A zero-based JavaScript month number.
		* @returns String The short month name.
		*/
		static getShortMonthName( month?:number ): string;
		/** [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S
		* @param date Date The date.
		* @returns String 'st', 'nd', 'rd' or 'th'.
		*/
		static getSuffix( date?:any ): string;
		/** [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T
		* @param date Date The date.
		* @returns String The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).
		*/
		static getTimezone( date?:any ): string;
		/** [Method] Get the numeric ISO 8601 week number of the year equivalent to the format specifier W  but without a leading zero
		* @param date Date The date.
		* @returns Number 1 to 53.
		*/
		static getWeekOfYear( date?:any ): number;
		/** [Method] Checks if the current date is affected by Daylight Saving Time DST
		* @param date Date The date.
		* @returns Boolean true if the current date is affected by DST.
		*/
		static isDST( date?:any ): boolean;
		/** [Method] Checks if the current date falls within a leap year
		* @param date Date The date.
		* @returns Boolean true if the current date falls within a leap year, false otherwise.
		*/
		static isLeapYear( date?:any ): boolean;
		/** [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover
		* @param year Number 4-digit year.
		* @param month Number 1-based month-of-year.
		* @param day Number Day of month.
		* @param hour Number Hour.
		* @param minute Number Minute.
		* @param second Number Second.
		* @param millisecond Number Millisecond.
		* @returns Boolean true if the passed parameters do not cause a Date "rollover", false otherwise.
		*/
		static isValid( year?:number, month?:number, day?:number, hour?:number, minute?:number, second?:number, millisecond?:number ): boolean;
		/** [Method] Returns the current timestamp
		* @returns Number The current timestamp.
		*/
		static now(): number;
		/** [Method] Parses the passed string using the specified date format
		* @param input String/Number The raw date string.
		* @param format String The expected date string format.
		* @param strict Boolean true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed.
		* @returns Date/null The parsed Date, or null if an invalid date string.
		*/
		static parse( input?:any, format?:string, strict?:boolean ): any;
	}
}
declare namespace Ext {
	export interface IDecorator extends Ext.IComponent {
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.device.accelerometer {
	export interface IAbstract extends Ext.IBase {
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		getFrequency?(): number;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		setFrequency?( frequency?:number ): void;
	}
}
declare namespace Ext.device.accelerometer {
	export interface ICordova extends Ext.device.accelerometer.IAbstract {
	}
}
declare namespace Ext.device.accelerometer {
	export interface IPhoneGap extends Ext.device.accelerometer.IAbstract {
	}
}
declare namespace Ext.device {
	export interface IAccelerometer extends Ext.IBase,Ext.device.accelerometer.IAbstract {
	}
	export class Accelerometer {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		static getFrequency(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		static setFrequency( frequency?:number ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.accelerometer {
	export interface ISimulator extends Ext.device.accelerometer.IAbstract {
	}
}
declare namespace Ext.device.browser {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Used to close the browser if one is opened  */
		close?(): void;
		/** [Method] Used to open a new browser window
		* @param options Object The options to use when opening a new browser window.
		*/
		open?( options?:any ): void;
	}
}
declare namespace Ext.device.browser {
	export interface ICordova extends Ext.device.browser.IAbstract {
		/** [Method] Used to close the browser if one is opened  */
		close?(): void;
		/** [Method] Used to open a new browser window
		* @param config Object
		*/
		open?( config?:any ): void;
	}
}
declare namespace Ext.device {
	export interface IBrowser extends Ext.IBase,Ext.device.browser.IAbstract {
	}
	export class Browser {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Used to close the browser if one is opened  */
		static close(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Used to open a new browser window
		* @param options Object The options to use when opening a new browser window.
		*/
		static open( options?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.browser {
	export interface ISimulator extends Ext.IBase {
	}
}
declare namespace Ext.device.browser {
	export interface IWindow extends Ext.IEvented {
	}
}
declare namespace Ext.device.camera {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Allows you to capture a photo
		* @param options Object The options to use when taking a photo.
		* @param scope Object The scope in which to call the success and failure functions, if specified.
		* @param destination String The destination of the image which is returned. Available options are:  data - returns a base64 encoded string file - returns the file's URI
		* @param encoding String The encoding of the returned image. Available options are:  jpg png
		* @param width Number The width of the image to return
		* @param height Number The height of the image to return
		*/
		capture?( options?:any, scope?:any, destination?:string, encoding?:string, width?:number, height?:number ): void;
	}
}
declare namespace Ext.device.camera {
	export interface ICordova extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo
		* @param args Object
		*/
		capture?( args?:any ): void;
	}
}
declare namespace Ext.device.camera {
	export interface IPhoneGap extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo
		* @param args Object
		*/
		capture?( args?:any ): void;
	}
}
declare namespace Ext.device {
	export interface ICamera extends Ext.IBase,Ext.device.camera.IAbstract {
	}
	export class Camera {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Allows you to capture a photo
		* @param options Object The options to use when taking a photo.
		* @param scope Object The scope in which to call the success and failure functions, if specified.
		* @param destination String The destination of the image which is returned. Available options are:  data - returns a base64 encoded string file - returns the file's URI
		* @param encoding String The encoding of the returned image. Available options are:  jpg png
		* @param width Number The width of the image to return
		* @param height Number The height of the image to return
		*/
		static capture( options?:any, scope?:any, destination?:string, encoding?:string, width?:number, height?:number ): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.camera {
	export interface ISencha extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo
		* @param options Object
		*/
		capture?( options?:any ): void;
	}
}
declare namespace Ext.device.camera {
	export interface ISimulator extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo
		* @param options Object
		*/
		capture?( options?:any ): void;
		/** [Method] Returns the value of samples
		* @returns Array
		*/
		getSamples?(): any[];
		/** [Method] Sets the value of samples
		* @param samples Array The new value.
		*/
		setSamples?( samples?:any[] ): void;
	}
}
declare namespace Ext.device.capture {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Start the audio recorder application and return information about captured audio clip file s
		* @param config Object The configuration object to be passed:
		*/
		captureAudio?( config?:any ): void;
		/** [Method] Start the video recorder application and return information about captured video clip file s
		* @param config Object The configuration object to be passed:
		*/
		captureVideo?( config?:any ): void;
	}
}
declare namespace Ext.device.capture {
	export interface ISimulator extends Ext.IBase {
		/** [Method] Start the audio recorder application and return information about captured audio clip file s
		* @param config Object The configuration object to be passed:
		*/
		captureAudio?( config?:any ): void;
		/** [Method] Start the video recorder application and return information about captured video clip file s
		* @param config Object The configuration object to be passed:
		*/
		captureVideo?( config?:any ): void;
	}
}
declare namespace Ext.device.capture {
	export interface ICordova extends Ext.IBase {
	}
}
declare namespace Ext.device {
	export interface ICapture extends Ext.IBase,Ext.device.capture.IAbstract {
	}
	export class Capture {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Start the audio recorder application and return information about captured audio clip file s
		* @param config Object The configuration object to be passed:
		*/
		static captureAudio( config?:any ): void;
		/** [Method] Start the video recorder application and return information about captured video clip file s
		* @param config Object The configuration object to be passed:
		*/
		static captureVideo( config?:any ): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.communicator {
	export interface IAndroid extends Ext.device.communicator.IDefault {
	}
}
declare namespace Ext.device.communicator {
	export interface IDefault extends Ext.IBase {
	}
}
declare namespace Ext.device {
	export interface ICommunicator extends Ext.IBase {
	}
	export class Communicator {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.compass {
	export interface IAbstract extends Ext.IBase {
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		getFrequency?(): number;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		setFrequency?( frequency?:number ): void;
	}
}
declare namespace Ext.device.compass {
	export interface ICordova extends Ext.device.compass.IAbstract {
	}
}
declare namespace Ext.device.compass {
	export interface IPhoneGap extends Ext.device.compass.IAbstract {
	}
}
declare namespace Ext.device {
	export interface ICompass extends Ext.IBase,Ext.device.compass.IAbstract {
	}
	export class Compass {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		static getFrequency(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		static setFrequency( frequency?:number ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.compass {
	export interface ISimulator extends Ext.device.compass.IAbstract {
	}
}
declare namespace Ext.device.connection {
	export interface IAbstract extends Ext.IEvented,Ext.mixin.IObservable {
		/** [Property] (String) */
		CELL_2G?: string;
		/** [Property] (String) */
		CELL_3G?: string;
		/** [Property] (String) */
		CELL_4G?: string;
		/** [Property] (String) */
		ETHERNET?: string;
		/** [Property] (String) */
		NONE?: string;
		/** [Property] (String) */
		UNKNOWN?: string;
		/** [Property] (String) */
		WIFI?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of online
		* @returns Boolean
		*/
		getOnline?(): boolean;
		/** [Method] Returns the current connection type
		* @returns String type
		*/
		getType?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] True if the device is currently online
		* @returns Boolean online
		*/
		isOnline?(): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of online
		* @param online Boolean The new value.
		*/
		setOnline?( online?:boolean ): void;
		/** [Method] Sets the value of type
		* @param type Object The new value.
		*/
		setType?( type?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.connection {
	export interface ICordova extends Ext.device.connection.IAbstract {
		/** [Method] Returns the value of online
		* @returns Boolean
		*/
		getOnline?(): boolean;
		/** [Method] Returns the current connection type
		* @returns String type
		*/
		getType?(): string;
	}
}
declare namespace Ext.device.connection {
	export interface IPhoneGap extends Ext.device.connection.IAbstract {
		/** [Method] Returns the value of online
		* @returns Boolean
		*/
		getOnline?(): boolean;
		/** [Method] Returns the current connection type
		* @returns String type
		*/
		getType?(): string;
	}
}
declare namespace Ext.device {
	export interface IConnection extends Ext.IBase,Ext.device.connection.IAbstract {
	}
	export class Connection {
		/** [Property] (String) */
		static CELL_2G: string;
		/** [Property] (String) */
		static CELL_3G: string;
		/** [Property] (String) */
		static CELL_4G: string;
		/** [Property] (String) */
		static ETHERNET: string;
		/** [Property] (String) */
		static NONE: string;
		/** [Property] (String) */
		static UNKNOWN: string;
		/** [Property] (String) */
		static WIFI: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns the value of online
		* @returns Boolean
		*/
		static getOnline(): boolean;
		/** [Method] Returns the current connection type
		* @returns String type
		*/
		static getType(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] True if the device is currently online
		* @returns Boolean online
		*/
		static isOnline(): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Sets the value of online
		* @param online Boolean The new value.
		*/
		static setOnline( online?:boolean ): void;
		/** [Method] Sets the value of type
		* @param type Object The new value.
		*/
		static setType( type?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.connection {
	export interface ISencha extends Ext.device.connection.IAbstract {
	}
}
declare namespace Ext.device.connection {
	export interface ISimulator extends Ext.device.connection.IAbstract {
		/** [Method] Returns the value of online
		* @returns Boolean
		*/
		getOnline?(): boolean;
	}
}
declare namespace Ext.device.contacts {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		includeImages?: boolean;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns an Array of contact objects
		* @param config Object
		* @returns Object[] An array of contact objects.
		*/
		getContacts?( config?:any ): any[];
		/** [Method] Returns the value of includeImages
		* @returns Boolean
		*/
		getIncludeImages?(): boolean;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns localized user readable label for a contact field i e
		* @param config Object
		* @returns String user readable string
		*/
		getLocalizedLabel?( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id This method is for Sencha Native Packager
		* @param config Object
		* @returns String base64 string
		*/
		getThumbnail?( config?:any ): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of includeImages
		* @param includeImages Boolean The new value.
		*/
		setIncludeImages?( includeImages?:boolean ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.contacts {
	export interface ICordova extends Ext.device.contacts.IAbstract {
		/** [Method] Returns an Array of contact objects
		* @param config Object
		* @returns Object[] An array of contact objects.
		*/
		getContacts?( config?:any ): any[];
	}
}
declare namespace Ext.device.contacts {
	export interface IPhoneGap extends Ext.device.contacts.IAbstract {
		/** [Method] Returns an Array of contact objects
		* @param config Object
		* @returns Object[] An array of contact objects.
		*/
		getContacts?( config?:any ): any[];
	}
}
declare namespace Ext.device {
	export interface IContacts extends Ext.IBase,Ext.device.contacts.IAbstract,Ext.device.contacts.ISencha,Ext.device.contacts.ICordova {
	}
	export class Contacts {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Returns an Array of contact objects
		* @param config Object
		* @returns Object[] An array of contact objects.
		*/
		static getContacts( config?:any ): any[];
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the value of includeImages
		* @returns Boolean
		*/
		static getIncludeImages(): boolean;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns localized user readable label for a contact field i e
		* @param config Object
		* @returns String user readable string
		*/
		static getLocalizedLabel( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id This method is for Sencha Native Packager
		* @param config Object
		* @returns String base64 string
		*/
		static getThumbnail( config?:any ): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of includeImages
		* @param includeImages Boolean The new value.
		*/
		static setIncludeImages( includeImages?:boolean ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.contacts {
	export interface ISencha extends Ext.device.contacts.IAbstract {
		/** [Method] Returns an Array of contact objects
		* @param config Object
		* @returns Object[] An array of contact objects.
		*/
		getContacts?( config?:any ): any[];
		/** [Method] Returns localized user readable label for a contact field i e
		* @param config Object
		* @returns String user readable string
		*/
		getLocalizedLabel?( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id This method is for Sencha Native Packager
		* @param config Object
		* @returns String base64 string
		*/
		getThumbnail?( config?:any ): string;
	}
}
declare namespace Ext.device.device {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (String) */
		name?: string;
		/** [Property] (String) */
		platform?: string;
		/** [Property] (Object/Boolean) */
		scheme?: any;
		/** [Property] (String) */
		uuid?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Opens a specified URL
		* @param url String The URL to open
		*/
		openURL?( url?:string ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.device {
	export interface ICordova extends Ext.device.device.IAbstract {
		/** [Property] (String) */
		cordova?: string;
		/** [Property] (String) */
		model?: string;
		/** [Property] (String) */
		version?: string;
	}
}
declare namespace Ext.device.device {
	export interface IPhoneGap extends Ext.device.device.IAbstract {
		/** [Property] (String) */
		cordova?: string;
		/** [Property] (String) */
		model?: string;
		/** [Property] (String) */
		version?: string;
	}
}
declare namespace Ext.device {
	export interface IDevice extends Ext.IBase,Ext.device.device.IAbstract {
	}
	export class Device {
		/** [Property] (String) */
		static name: string;
		/** [Property] (String) */
		static platform: string;
		/** [Property] (Object/Boolean) */
		static scheme: any;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (String) */
		static uuid: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Opens a specified URL
		* @param url String The URL to open
		*/
		static openURL( url?:string ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.device {
	export interface ISencha extends Ext.device.device.IAbstract {
		/** [Method] Opens a specified URL
		* @param url Object
		*/
		openURL?( url?:any ): void;
	}
}
declare namespace Ext.device.device {
	export interface ISimulator extends Ext.device.device.IAbstract {
	}
}
declare namespace Ext.device.filesystem {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of fileSystemSize
		* @returns Number
		*/
		getFileSystemSize?(): number;
		/** [Method] Returns the value of fileSystemType
		* @returns Number
		*/
		getFileSystemType?(): number;
		/** [Method] Returns the value of readerType
		* @returns String
		*/
		getReaderType?(): string;
		/** [Method] Returns the value of stringEncoding
		* @returns String
		*/
		getStringEncoding?(): string;
		/** [Method] Sets the value of fileSystemSize
		* @param fileSystemSize Number The new value.
		*/
		setFileSystemSize?( fileSystemSize?:number ): void;
		/** [Method] Sets the value of fileSystemType
		* @param fileSystemType Number The new value.
		*/
		setFileSystemType?( fileSystemType?:number ): void;
		/** [Method] Sets the value of readerType
		* @param readerType String The new value.
		*/
		setReaderType?( readerType?:string ): void;
		/** [Method] Sets the value of stringEncoding
		* @param stringEncoding String The new value.
		*/
		setStringEncoding?( stringEncoding?:string ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IChrome extends Ext.device.filesystem.IHTML5 {
		/** [Method] Requests access to the Local File System  var me  this  var fs  Ext create Ext device File  fs requestFil
		* @param config Object An object which contains the follow options
		*/
		requestFileSystem?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface ICordova extends Ext.device.filesystem.IHTML5 {
		/** [Method] Downloads a file from the server saving it into the Local File System
		* @param config Object
		* @returns FileTransfer
		*/
		download?( config?:any ): any;
		/** [Method]
		* @param config Object
		*/
		readMetadata?( config?:any ): void;
		/** [Method] Send a file to a server
		* @param config Object
		* @returns FileTransfer
		*/
		upload?( config?:any ): any;
		/** [Method]
		* @param config Object
		*/
		writeMetadata?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IPhoneGap extends Ext.device.filesystem.IHTML5 {
		/** [Method] Downloads a file from the server saving it into the Local File System
		* @param config Object
		* @returns FileTransfer
		*/
		download?( config?:any ): any;
		/** [Method]
		* @param config Object
		*/
		readMetadata?( config?:any ): void;
		/** [Method] Send a file to a server
		* @param config Object
		* @returns FileTransfer
		*/
		upload?( config?:any ): any;
		/** [Method]
		* @param config Object
		*/
		writeMetadata?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IDirectoryEntry extends Ext.device.filesystem.IEntry {
		/** [Method] Works the same way as getFile but creates or looks up a directory
		* @param config Object
		*/
		getDirectory?( config?:any ): void;
		/** [Method] Requests a Directory from the Local File System
		* @param config Object
		*/
		getEntry?( config?:any ): void;
		/** [Method] Creates or looks up a file
		* @param config Object The object which contains the following config options:
		*/
		getFile?( config?:any ): void;
		/** [Method] Lists all the entries in the directory
		* @param config Object The object which contains the following config options:
		*/
		readEntries?( config?:any ): void;
		/** [Method] Works the same way as Ext device filesystem Entry remove but removes the directory and all of its contents if any
		* @param config Object
		*/
		removeRecursively?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IEntry extends Ext.IBase {
		/** [Method] Works the same way as moveTo but copies the entry
		* @param config Object
		*/
		copyTo?( config?:any ): void;
		/** [Method] Returns the file system on which the entry resides
		* @returns Ext.device.filesystem.FileSystem The entry file system.
		*/
		getFileSystem?(): Ext.device.filesystem.IFileSystem;
		/** [Method] Returns the full absolute path from the root to the entry
		* @returns String The entry full path.
		*/
		getFullPath?(): string;
		/** [Method] Returns the name of the entry excluding the path leading to it
		* @returns String The entry name.
		*/
		getName?(): string;
		/** [Method] Looks up the parent directory containing the entry
		* @param config Object The object which contains the following config options:
		*/
		getParent?( config?:any ): void;
		/** [Method] Returns whether the entry is a directory
		* @returns Boolean The entry is a directory.
		*/
		isDirectory?(): boolean;
		/** [Method] Returns whether the entry is a file
		* @returns Boolean The entry is a file.
		*/
		isFile?(): boolean;
		/** [Method] Moves the entry to a different location on the file system
		* @param config Object The object which contains the following config options:
		*/
		moveTo?( config?:any ): void;
		/** [Method] Removes the entry from the file system
		* @param config Object The object which contains the following config options:
		*/
		remove?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IFileEntry extends Ext.device.filesystem.IEntry {
		/** [Method] Requests a File Handle from the Local File System
		* @param config Object
		*/
		getEntry?( config?:any ): void;
		/** [Method] Returns the byte offset into the file at which the next read write will occur
		* @returns Number The file offset.
		*/
		getOffset?(): number;
		/** [Method] Reads the data from the file starting at the file offset
		* @param config Object The object which contains the following config options:
		*/
		read?( config?:any ): void;
		/** [Method] Sets the byte offset into the file at which the next read write will occur
		* @param config Object The object which contains the following config options:
		*/
		seek?( config?:any ): void;
		/** [Method] Truncates or extends the file to the specified size in bytes
		* @param config Object The object which contains the following config options:
		*/
		truncate?( config?:any ): void;
		/** [Method] Writes the data to the file starting at the file offset
		* @param config Object The object which contains the following config options:
		*/
		write?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface IFileSystem extends Ext.IBase {
		/** [Method] Returns a Ext device filesystem DirectoryEntry instance for the root of the file system
		* @returns Ext.device.filesystem.DirectoryEntry The file system root directory.
		*/
		getRoot?(): Ext.device.filesystem.IDirectoryEntry;
	}
}
declare namespace Ext.device.filesystem {
	export interface IHTML5 extends Ext.device.filesystem.IAbstract {
		/** [Method] Requests a Ext device filesystem FileSystem instance
		* @param config Object The object which contains the following config options:
		*/
		requestFileSystem?( config?:any ): void;
	}
}
declare namespace Ext.device {
	export interface IFileSystem extends Ext.IBase,Ext.device.filesystem.ISencha {
	}
	export class FileSystem {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the value of fileSystemSize
		* @returns Number
		*/
		static getFileSystemSize(): number;
		/** [Method] Returns the value of fileSystemType
		* @returns Number
		*/
		static getFileSystemType(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of readerType
		* @returns String
		*/
		static getReaderType(): string;
		/** [Method] Returns the value of stringEncoding
		* @returns String
		*/
		static getStringEncoding(): string;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Requests a Ext device filesystem FileSystem instance
		* @param config Object The object which contains the following config options:
		*/
		static requestFileSystem( config?:any ): void;
		/** [Method] Sets the value of fileSystemSize
		* @param fileSystemSize Number The new value.
		*/
		static setFileSystemSize( fileSystemSize?:number ): void;
		/** [Method] Sets the value of fileSystemType
		* @param fileSystemType Number The new value.
		*/
		static setFileSystemType( fileSystemType?:number ): void;
		/** [Method] Sets the value of readerType
		* @param readerType String The new value.
		*/
		static setReaderType( readerType?:string ): void;
		/** [Method] Sets the value of stringEncoding
		* @param stringEncoding String The new value.
		*/
		static setStringEncoding( stringEncoding?:string ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.filesystem {
	export interface ISencha extends Ext.device.filesystem.IAbstract {
		/** [Method] Requests a Ext device filesystem FileSystem instance
		* @param config Object The object which contains the following config options:
		*/
		requestFileSystem?( config?:any ): void;
	}
}
declare namespace Ext.device.filesystem {
	export interface ISimulator extends Ext.device.filesystem.IHTML5 {
	}
}
declare namespace Ext.device.geolocation {
	export interface IAbstract extends Ext.IBase {
		/** [Config Option] (Boolean) */
		allowHighAccuracy?: boolean;
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Config Option] (Number) */
		maximumAge?: number;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Returns the value of allowHighAccuracy
		* @returns Boolean
		*/
		getAllowHighAccuracy?(): boolean;
		/** [Method] Attempts to get the current position of this device
		* @param config Object An object which contains the following config options:
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		getFrequency?(): number;
		/** [Method] Returns the value of maximumAge
		* @returns Number
		*/
		getMaximumAge?(): number;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Sets the value of allowHighAccuracy
		* @param allowHighAccuracy Boolean The new value.
		*/
		setAllowHighAccuracy?( allowHighAccuracy?:boolean ): void;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		setFrequency?( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge
		* @param maximumAge Number The new value.
		*/
		setMaximumAge?( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object An object which contains the following config options:
		*/
		watchPosition?( config?:any ): void;
	}
}
declare namespace Ext.device.geolocation {
	export interface ICordova extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device
		* @param config Object
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object
		*/
		watchPosition?( config?:any ): void;
	}
}
declare namespace Ext.device.geolocation {
	export interface IPhoneGap extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device
		* @param config Object
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object
		*/
		watchPosition?( config?:any ): void;
	}
}
declare namespace Ext.device {
	export interface IGeolocation extends Ext.IBase,Ext.device.geolocation.IAbstract {
	}
	export class Geolocation {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] If you are currently watching for the current position this will stop that task  */
		static clearWatch(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the value of allowHighAccuracy
		* @returns Boolean
		*/
		static getAllowHighAccuracy(): boolean;
		/** [Method] Attempts to get the current position of this device
		* @param config Object An object which contains the following config options:
		*/
		static getCurrentPosition( config?:any ): void;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		static getFrequency(): number;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of maximumAge
		* @returns Number
		*/
		static getMaximumAge(): number;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		static getTimeout(): number;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Sets the value of allowHighAccuracy
		* @param allowHighAccuracy Boolean The new value.
		*/
		static setAllowHighAccuracy( allowHighAccuracy?:boolean ): void;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		static setFrequency( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge
		* @param maximumAge Number The new value.
		*/
		static setMaximumAge( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		static setTimeout( timeout?:number ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object An object which contains the following config options:
		*/
		static watchPosition( config?:any ): void;
	}
}
declare namespace Ext.device.geolocation {
	export interface ISencha extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device
		* @param config Object
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object
		*/
		watchPosition?( config?:any ): void;
	}
}
declare namespace Ext.device.geolocation {
	export interface ISimulator extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device
		* @param config Object
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency
		* @param config Object
		*/
		watchPosition?( config?:any ): void;
	}
}
declare namespace Ext.device.globalization {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of currencyCode
		* @returns String
		*/
		getCurrencyCode?(): string;
		/** [Method] Returns the value of dateType
		* @returns String
		*/
		getDateType?(): string;
		/** [Method] Returns the value of formatLength
		* @returns String
		*/
		getFormatLength?(): string;
		/** [Method] Returns the value of items
		* @returns String
		*/
		getItems?(): string;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of numberType
		* @returns String
		*/
		getNumberType?(): string;
		/** [Method] Returns the value of selector
		* @returns String
		*/
		getSelector?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of currencyCode
		* @param currencyCode String The new value.
		*/
		setCurrencyCode?( currencyCode?:string ): void;
		/** [Method] Sets the value of dateType
		* @param dateType String The new value.
		*/
		setDateType?( dateType?:string ): void;
		/** [Method] Sets the value of formatLength
		* @param formatLength String The new value.
		*/
		setFormatLength?( formatLength?:string ): void;
		/** [Method] Sets the value of items
		* @param items String The new value.
		*/
		setItems?( items?:string ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of numberType
		* @param numberType String The new value.
		*/
		setNumberType?( numberType?:string ): void;
		/** [Method] Sets the value of selector
		* @param selector String The new value.
		*/
		setSelector?( selector?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.globalization {
	export interface ICordova extends Ext.device.globalization.IAbstract {
	}
}
declare namespace Ext.device.globalization {
	export interface IPhoneGap extends Ext.device.globalization.IAbstract {
	}
}
declare namespace Ext.device {
	export interface IGlobalization extends Ext.IBase {
	}
	export class Globalization {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.globalization {
	export interface ISimulator extends Ext.device.globalization.IAbstract {
	}
}
declare namespace Ext.device.media {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of src
		* @returns Object
		*/
		getSrc?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of src
		* @param src Object The new value.
		*/
		setSrc?( src?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.media {
	export interface ICordova extends Ext.device.media.IAbstract {
		/** [Property] (String) */
		src?: string;
	}
}
declare namespace Ext.device.media {
	export interface IPhoneGap extends Ext.device.media.IAbstract {
		/** [Property] (String) */
		src?: string;
	}
}
declare namespace Ext.device {
	export interface IMedia extends Ext.IBase,Ext.device.media.IAbstract {
	}
	export class Media {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns the value of src
		* @returns Object
		*/
		static getSrc(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Sets the value of src
		* @param src Object The new value.
		*/
		static setSrc( src?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.notification {
	export interface IAbstract extends Ext.IBase {
		/** [Method] A simple way to show a notification
		* @param config Object An object which contains the following config options:
		*/
		show?( config?:any ): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare namespace Ext.device.notification {
	export interface ICordova extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification
		* @param config Object
		*/
		show?( config?:any ): void;
		/** [Method] Vibrates the device
		* @param time Object
		*/
		vibrate?( time?:any ): void;
	}
}
declare namespace Ext.device.notification {
	export interface IPhoneGap extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification
		* @param config Object
		*/
		show?( config?:any ): void;
		/** [Method] Vibrates the device
		* @param time Object
		*/
		vibrate?( time?:any ): void;
	}
}
declare namespace Ext.device {
	export interface INotification extends Ext.IBase,Ext.device.notification.IAbstract {
	}
	export class Notification {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] A simple way to show a notification
		* @param config Object An object which contains the following config options:
		*/
		static show( config?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Vibrates the device  */
		static vibrate(): void;
	}
}
declare namespace Ext.device.notification {
	export interface ISencha extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification  */
		show?(): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare namespace Ext.device.notification {
	export interface ISimulator extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification  */
		show?(): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare namespace Ext.device.orientation {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.orientation {
	export interface IHTML5 extends Ext.device.orientation.IAbstract {
	}
}
declare namespace Ext.device {
	export interface IOrientation extends Ext.IBase,Ext.device.orientation.IAbstract {
	}
	export class Orientation {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.device.orientation {
	export interface ISencha extends Ext.device.orientation.IAbstract {
	}
}
declare namespace Ext.device {
	export interface IPurchases extends Ext.IBase,Ext.device.purchases.ISencha {
	}
	export class Purchases {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Checks if the current user is able to make payments
		* @param config Object
		*/
		static canMakePayments( config?:any ): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns a Ext data Store instance of all purchases delivered to the current user
		* @param config Object
		*/
		static getCompletedPurchases( config?:any ): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns a Ext data Store instance of all products available to purchase
		* @param config Object
		*/
		static getProducts( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases the current user has been charged
		* @param config Object
		*/
		static getPurchases( config?:any ): void;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.purchases {
	export interface IProduct extends Ext.data.IModel {
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Method] Returns the value of fields
		* @returns Array
		*/
		getFields?(): any[];
		/** [Method] Will attempt to purchase this product
		* @param config Object
		*/
		purchase?( config?:any ): void;
		/** [Method] Sets the value of fields
		* @param fields Array The new value.
		*/
		setFields?( fields?:any[] ): void;
	}
}
declare namespace Ext.device.purchases {
	export interface IPurchase extends Ext.data.IModel {
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Method] Attempts to mark this purchase as complete
		* @param config Object
		*/
		complete?( config?:any ): void;
		/** [Method] Returns the value of fields
		* @returns Array
		*/
		getFields?(): any[];
		/** [Method] Sets the value of fields
		* @param fields Array The new value.
		*/
		setFields?( fields?:any[] ): void;
	}
}
declare namespace Ext.device.purchases {
	export interface ISencha extends Ext.IBase {
		/** [Method] Checks if the current user is able to make payments
		* @param config Object
		*/
		canMakePayments?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases delivered to the current user
		* @param config Object
		*/
		getCompletedPurchases?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all products available to purchase
		* @param config Object
		*/
		getProducts?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases the current user has been charged
		* @param config Object
		*/
		getPurchases?( config?:any ): void;
	}
}
declare namespace Ext.device.push {
	export interface IAbstract extends Ext.IBase {
		/** [Property] (Number) */
		ALERT?: number;
		/** [Property] (Number) */
		BADGE?: number;
		/** [Property] (Number) */
		SOUND?: number;
		/** [Method] Registers a push notification
		* @param config Object The configuration for to pass when registering this push notification service.
		*/
		register?( config?:any ): void;
	}
}
declare namespace Ext.device.push {
	export interface ICordova extends Ext.device.push.IAbstract {
		/** [Method] Registers a push notification  */
		register?(): void;
	}
}
declare namespace Ext.device {
	export interface IPush extends Ext.IBase,Ext.device.push.IAbstract {
	}
	export class Push {
		/** [Property] (Number) */
		static ALERT: number;
		/** [Property] (Number) */
		static BADGE: number;
		/** [Property] (Number) */
		static SOUND: number;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Registers a push notification
		* @param config Object The configuration for to pass when registering this push notification service.
		*/
		static register( config?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.push {
	export interface ISencha extends Ext.device.push.IAbstract {
		/** [Method] Registers a push notification  */
		register?(): void;
	}
}
declare namespace Ext.device.splashscreen {
	export interface IAbstract extends Ext.IBase {
	}
}
declare namespace Ext.device.splashscreen {
	export interface ICordova extends Ext.device.splashscreen.IAbstract {
	}
}
declare namespace Ext.device.splashscreen {
	export interface IPhoneGap extends Ext.device.splashscreen.IAbstract {
	}
}
declare namespace Ext.device {
	export interface ISplashscreen extends Ext.IBase {
	}
	export class Splashscreen {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.splashscreen {
	export interface ISimulator extends Ext.device.splashscreen.IAbstract {
	}
}
declare namespace Ext.device.sqlite {
	export interface IDatabase extends Ext.IBase {
		/** [Method] Verifies and changes the version of the database at the same time as doing a schema update with a Ext device sqlite S
		* @param config Object The object which contains the following config options:
		*/
		changeVersion?( config?:any ): void;
		/** [Method] Returns the current version of the database
		* @returns String The database current version.
		*/
		getVersion?(): string;
		/** [Method] Works the same way as transaction but performs a Ext device sqlite SQLTransaction instance in a read only mode
		* @param config Object
		*/
		readTransaction?( config?:any ): void;
		/** [Method] Performs a Ext device sqlite SQLTransaction instance in a read write mode
		* @param config Object The object which contains the following config options:
		*/
		transaction?( config?:any ): void;
	}
}
declare namespace Ext.device {
	export interface ISQLite extends Ext.IBase,Ext.device.sqlite.ISencha {
	}
	export class SQLite {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns a Ext device sqlite Database instance
		* @param config Object The object which contains the following config options:
		* @returns Ext.device.sqlite.Database The opened database, null if an error occured.
		*/
		static openDatabase( config?:any ): Ext.device.sqlite.IDatabase;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.device.sqlite {
	export interface ISencha extends Ext.IBase {
		/** [Method] Returns a Ext device sqlite Database instance
		* @param config Object The object which contains the following config options:
		* @returns Ext.device.sqlite.Database The opened database, null if an error occured.
		*/
		openDatabase?( config?:any ): Ext.device.sqlite.IDatabase;
	}
}
declare namespace Ext.device.sqlite {
	export interface ISQLResultSet extends Ext.IBase {
		/** [Method] Returns the row ID of the last row that the SQL statement inserted into the database if the statement inserted any r
		* @returns Number The inserted row ID.
		*/
		getInsertId?(): number;
		/** [Method] Returns a Ext device sqlite SQLResultSetRowList instance representing rows returned by the SQL statement
		* @returns Ext.device.sqlite.SQLResultSetRowList The rows.
		*/
		getRows?(): Ext.device.sqlite.ISQLResultSetRowList;
		/** [Method] Returns the number of rows that were changed by the SQL statement
		* @returns Number The number of rows affected.
		*/
		getRowsAffected?(): number;
	}
}
declare namespace Ext.device.sqlite {
	export interface ISQLResultSetRowList extends Ext.IBase {
		/** [Method] Returns the number of rows returned by the SQL statement
		* @returns Number The number of rows.
		*/
		getLength?(): number;
		/** [Method] Returns a row at specified index returned by the SQL statement
		* @param index Number This is required. The index of a row.
		* @returns Object The row.
		*/
		item?( index?:number ): any;
	}
}
declare namespace Ext.device.sqlite {
	export interface ISQLTransaction extends Ext.IBase {
		/** [Method] Executes an SQL statement
		* @param config Object The object which contains the following config options:
		*/
		executeSql?( config?:any ): void;
	}
}
declare namespace Ext.device.storage {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of databaseDisplayName
		* @returns String
		*/
		getDatabaseDisplayName?(): string;
		/** [Method] Returns the value of databaseName
		* @returns String
		*/
		getDatabaseName?(): string;
		/** [Method] Returns the value of databaseSize
		* @returns Object
		*/
		getDatabaseSize?(): any;
		/** [Method] Returns the value of databaseVersion
		* @returns String
		*/
		getDatabaseVersion?(): string;
		/** [Method] Sets the value of databaseDisplayName
		* @param databaseDisplayName String The new value.
		*/
		setDatabaseDisplayName?( databaseDisplayName?:string ): void;
		/** [Method] Sets the value of databaseName
		* @param databaseName String The new value.
		*/
		setDatabaseName?( databaseName?:string ): void;
		/** [Method] Sets the value of databaseSize
		* @param databaseSize Object The new value.
		*/
		setDatabaseSize?( databaseSize?:any ): void;
		/** [Method] Sets the value of databaseVersion
		* @param databaseVersion String The new value.
		*/
		setDatabaseVersion?( databaseVersion?:string ): void;
	}
}
declare namespace Ext.device.storage {
	export interface ICordova extends Ext.device.storage.html5.IHTML5 {
	}
}
declare namespace Ext.device.storage {
	export interface IPhoneGap extends Ext.device.storage.html5.IHTML5 {
	}
}
declare namespace Ext.device.storage.html5 {
	export interface IDatabase extends Ext.IBase {
		/** [Method]
		* @param sql String/String[]/Object/Object[]/SQLStatement/SQLStatement[] SQL Command to run with optional arguments and callbacks
		* @param success Function callback for successful transaction
		* @param failure Function callback for failed transaction
		*/
		transaction?( sql?:any, success?:any, failure?:any ): void;
	}
}
declare namespace Ext.device.storage.html5 {
	export interface IHTML5 extends Ext.device.storage.IAbstract {
	}
}
declare namespace Ext.device.storage.html5 {
	export interface ISQLStatement extends Ext.IBase {
	}
}
declare namespace Ext.device.storage {
	export interface ISimulator extends Ext.device.storage.html5.IHTML5 {
	}
}
declare namespace Ext.device.tunnel {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Broadcast a message intent to look for receivers who can respond to it
		* @param message String
		* @returns Ext.Promise A promise which provides an array of objects upon fulfilled. Each object contains information about a receiver, with 'id', 'name' and 'icon' keys.
		*/
		broadcast?( message?:string ): Ext.IPromise;
		/** [Method] Create a connection to another application with the given id
		* @param receiverId String The id of the application to connect to. Get this id from broadcast
		* @returns Ext.Promise
		*/
		connect?( receiverId?:string ): Ext.IPromise;
		/** [Method] Assign the callback to handle new connection
		* @param callback Function
		*/
		onConnect?( callback?:any ): void;
		/** [Method] Assign the callback to handling incoming messages
		* @param callback Function
		*/
		onMessage?( callback?:any ): void;
		/** [Method] Send a message
		* @param receiverId String The id of the application to connect to. Get this id from broadcast
		* @param message * The message to send, can be an object, as long as it is JSON-able.
		* @param foreground Boolean Whether or not to bring the receiver app to the foreground
		* @returns Ext.Promise
		*/
		send?( receiverId?:string, message?:any, foreground?:boolean ): Ext.IPromise;
	}
}
declare namespace Ext.direct {
	export interface IEvent extends Ext.IBase {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of code
		* @returns Object
		*/
		getCode?(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Returns the value of message
		* @returns String
		*/
		getMessage?(): string;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of result
		* @returns Object
		*/
		getResult?(): any;
		/** [Method] Returns the value of status
		* @returns Boolean
		*/
		getStatus?(): boolean;
		/** [Method] Returns the value of transaction
		* @returns Object
		*/
		getTransaction?(): any;
		/** [Method] Returns the value of xhr
		* @returns Object
		*/
		getXhr?(): any;
		/** [Method] Sets the value of code
		* @param code Object The new value.
		*/
		setCode?( code?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of result
		* @param result Object The new value.
		*/
		setResult?( result?:any ): void;
		/** [Method] Sets the value of status
		* @param status Boolean The new value.
		*/
		setStatus?( status?:boolean ): void;
		/** [Method] Sets the value of transaction
		* @param transaction Object The new value.
		*/
		setTransaction?( transaction?:any ): void;
		/** [Method] Sets the value of xhr
		* @param xhr Object The new value.
		*/
		setXhr?( xhr?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IExceptionEvent extends Ext.direct.IRemotingEvent {
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of error
		* @returns Object
		*/
		getError?(): any;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of status
		* @returns Boolean
		*/
		getStatus?(): boolean;
		/** [Method] Sets the value of error
		* @param error Object The new value.
		*/
		setError?( error?:any ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of status
		* @param status Boolean The new value.
		*/
		setStatus?( status?:boolean ): void;
	}
}
declare namespace Ext.direct {
	export interface IJsonProvider extends Ext.direct.IProvider {
		/** [Method] Create an event from a response object
		* @param response Object The XHR response object.
		* @returns Ext.direct.Event The event.
		*/
		createEvent?( response?:any ): Ext.direct.IEvent;
	}
}
declare namespace Ext.direct {
	export interface IManager extends Ext.IBase,Ext.mixin.IObservable {
	}
	export class Manager {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods
		* @param provider Ext.direct.Provider/Object... Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext.Direct how to create client-side stub methods.
		* @returns Object
		*/
		static addProvider( provider?:any ): any;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Retrieves a provider by the id specified when the provider is added
		* @param id String/Ext.direct.Provider The id of the provider, or the provider instance.
		* @returns Object
		*/
		static getProvider( id?:any ): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Parses a direct function
		* @param fn String/Function The direct function
		* @returns Function The function to use in the direct call. Null if not found
		*/
		static parseMethod( fn?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Removes the provider
		* @param provider String/Ext.direct.Provider The provider instance or the id of the provider.
		* @returns Ext.direct.Provider/null The provider, null if not found.
		*/
		static removeProvider( provider?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext {
	export interface IDirect extends Ext.IBase,Ext.mixin.IObservable {
	}
	export class Direct {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods
		* @param provider Ext.direct.Provider/Object... Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext.Direct how to create client-side stub methods.
		* @returns Object
		*/
		static addProvider( provider?:any ): any;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Retrieves a provider by the id specified when the provider is added
		* @param id String/Ext.direct.Provider The id of the provider, or the provider instance.
		* @returns Object
		*/
		static getProvider( id?:any ): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Parses a direct function
		* @param fn String/Function The direct function
		* @returns Function The function to use in the direct call. Null if not found
		*/
		static parseMethod( fn?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Removes the provider
		* @param provider String/Ext.direct.Provider The provider instance or the id of the provider.
		* @returns Ext.direct.Provider/null The provider, null if not found.
		*/
		static removeProvider( provider?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IPollingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String/Function) */
		url?: any;
		/** [Method] Connect to the server side and begin the polling process  */
		connect?(): void;
		/** [Method] Disconnect from the server side and stop the polling process  */
		disconnect?(): void;
		/** [Method] Returns the value of baseParams
		* @returns Object
		*/
		getBaseParams?(): any;
		/** [Method] Returns the value of interval
		* @returns Number
		*/
		getInterval?(): number;
		/** [Method] Returns the value of url
		* @returns String/Function
		*/
		getUrl?(): any;
		/** [Method] Returns whether or not the server side is currently connected
		* @returns Boolean
		*/
		isConnected?(): boolean;
		/** [Method] Sets the value of baseParams
		* @param baseParams Object The new value.
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of interval
		* @param interval Number The new value.
		*/
		setInterval?( interval?:number ): void;
		/** [Method] Sets the value of url
		* @param url String/Function The new value.
		*/
		setUrl?( url?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IProvider extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Boolean) */
		isProvider?: boolean;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		connect?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		disconnect?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of id
		* @returns String
		*/
		getId?(): string;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Returns whether or not the server side is currently connected
		* @returns Boolean
		*/
		isConnected?(): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of id
		* @param id String The new value.
		*/
		setId?( id?:string ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IRemotingEvent extends Ext.direct.IEvent {
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of tid
		* @returns Object
		*/
		getTid?(): any;
		/** [Method] Get the transaction associated with this event
		* @returns Ext.direct.Transaction The transaction
		*/
		getTransaction?(): Ext.direct.ITransaction;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of tid
		* @param tid Object The new value.
		*/
		setTid?( tid?:any ): void;
		/** [Method] Sets the value of transaction
		* @param transaction Object The new value.
		*/
		setTransaction?( transaction?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IRemotingMethod extends Ext.IBase {
		/** [Method] Takes the arguments for the Direct function and splits the arguments from the scope and the callback
		* @param args Array The arguments passed to the direct call
		* @returns Object An object with 3 properties, args, callback &amp; scope.
		*/
		getCallData?( args?:any[] ): any;
		/** [Method] Returns the value of formHandler
		* @returns Object
		*/
		getFormHandler?(): any;
		/** [Method] Returns the value of len
		* @returns Object
		*/
		getLen?(): any;
		/** [Method] Returns the value of name
		* @returns Object
		*/
		getName?(): any;
		/** [Method] Returns the value of ordered
		* @returns Boolean
		*/
		getOrdered?(): boolean;
		/** [Method] Returns the value of params
		* @returns Object
		*/
		getParams?(): any;
		/** [Method] Sets the value of formHandler
		* @param formHandler Object The new value.
		*/
		setFormHandler?( formHandler?:any ): void;
		/** [Method] Sets the value of len
		* @param len Object The new value.
		*/
		setLen?( len?:any ): void;
		/** [Method] Sets the value of name
		* @param name Object The new value.
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ordered
		* @param ordered Boolean The new value.
		*/
		setOrdered?( ordered?:boolean ): void;
		/** [Method] Sets the value of params
		* @param params Object The new value.
		*/
		setParams?( params?:any ): void;
	}
}
declare namespace Ext.direct {
	export interface IRemotingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		actions?: any;
		/** [Config Option] (Number/Boolean) */
		enableBuffer?: any;
		/** [Config Option] (String) */
		enableUrlEncode?: string;
		/** [Config Option] (Number) */
		maxRetries?: number;
		/** [Config Option] (String/Object) */
		namespace?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Abstract methods for subclasses to implement  */
		connect?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		disconnect?(): void;
		/** [Method] Returns the value of actions
		* @returns Object
		*/
		getActions?(): any;
		/** [Method] Returns the value of enableBuffer
		* @returns Number/Boolean
		*/
		getEnableBuffer?(): any;
		/** [Method] Returns the value of enableUrlEncode
		* @returns String
		*/
		getEnableUrlEncode?(): string;
		/** [Method] Returns the value of maxRetries
		* @returns Number
		*/
		getMaxRetries?(): number;
		/** [Method] Returns the value of namespace
		* @returns String/Object
		*/
		getNamespace?(): any;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns whether or not the server side is currently connected
		* @returns Boolean
		*/
		isConnected?(): boolean;
		/** [Method] Sets the value of actions
		* @param actions Object The new value.
		*/
		setActions?( actions?:any ): void;
		/** [Method] Sets the value of enableBuffer
		* @param enableBuffer Number/Boolean The new value.
		*/
		setEnableBuffer?( enableBuffer?:any ): void;
		/** [Method] Sets the value of enableUrlEncode
		* @param enableUrlEncode String The new value.
		*/
		setEnableUrlEncode?( enableUrlEncode?:string ): void;
		/** [Method] Sets the value of maxRetries
		* @param maxRetries Number The new value.
		*/
		setMaxRetries?( maxRetries?:number ): void;
		/** [Method] Sets the value of namespace
		* @param namespace String/Object The new value.
		*/
		setNamespace?( namespace?:any ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
	}
}
declare namespace Ext.direct {
	export interface ITransaction extends Ext.IBase {
		/** [Method] Returns the value of action
		* @returns Object
		*/
		getAction?(): any;
		/** [Method] Returns the value of args
		* @returns Object
		*/
		getArgs?(): any;
		/** [Method] Returns the value of callback
		* @returns Object
		*/
		getCallback?(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		getData?(): any;
		/** [Method] Returns the value of form
		* @returns Object
		*/
		getForm?(): any;
		/** [Method] Returns the value of id
		* @returns Object
		*/
		getId?(): any;
		/** [Method] Returns the value of method
		* @returns Object
		*/
		getMethod?(): any;
		/** [Method] Returns the value of provider
		* @returns Object
		*/
		getProvider?(): any;
		/** [Method] Returns the value of retryCount
		* @returns Number
		*/
		getRetryCount?(): number;
		/** [Method] Sets the value of action
		* @param action Object The new value.
		*/
		setAction?( action?:any ): void;
		/** [Method] Sets the value of args
		* @param args Object The new value.
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of callback
		* @param callback Object The new value.
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of form
		* @param form Object The new value.
		*/
		setForm?( form?:any ): void;
		/** [Method] Sets the value of id
		* @param id Object The new value.
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of method
		* @param method Object The new value.
		*/
		setMethod?( method?:any ): void;
		/** [Method] Sets the value of provider
		* @param provider Object The new value.
		*/
		setProvider?( provider?:any ): void;
		/** [Method] Sets the value of retryCount
		* @param retryCount Number The new value.
		*/
		setRetryCount?( retryCount?:number ): void;
	}
}
declare namespace Ext.dom {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}
}
declare namespace Ext {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}
}
declare namespace Ext.dom {
	export interface ICompositeElementLite extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an Array of DOM elements to add, or another Composite object who's elements should be added.
		* @param root HTMLElement/String The root element of the query or id of the root.
		* @returns Ext.dom.CompositeElementLite This Composite object.
		*/
		add?( els?:any, root?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element
		* @param names String The CSS class(es) to add to this element.
		* @param prefix String Prefix to prepend to each class.
		* @param suffix String Suffix to append to each class.
		* @returns Ext.dom.Element this
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight
		* @param eventName Object
		* @param handler Object
		* @param scope Object
		* @param opt Object
		* @returns Ext.dom.CompositeElementLite this
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element
		* @param element HTMLElement/Ext.dom.Element a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendChild?( element?:any ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendTo?( el?:any ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification.
		* @returns Ext.dom.Element this
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true)
		*/
		child?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
		* @returns Boolean
		*/
		contains?( el?:any ): boolean;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.
		* @param insertBefore HTMLElement a child element of this element.
		* @param returnDom Boolean true to return the dom node instead of creating an Element.
		* @returns Ext.dom.Element The new child element.
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true).
		*/
		down?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Calls the passed function for each element in this composite
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element.
		* @returns Ext.dom.CompositeElementLite this
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an array of DOM elements, or another Composite from which to fill this Composite.
		* @returns Ext.dom.CompositeElementLite this
		*/
		fill?( els?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector
		* @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments:
		* @returns Ext.dom.CompositeElementLite this
		*/
		filter?( selector?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 50 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParent?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Gets the x y coordinates to align this element with another element
		* @param element Mixed The element to align to.
		* @param position String The position to align to.
		* @param offsets Array Offset the positioning by [x, y].
		* @returns Array [x, y]
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element
		* @param anchor String The specified anchor position.
		* @param local Boolean true to get the local (element top/left-relative) anchor position instead of page coordinates.
		* @param size Object An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size)
		* @returns Array [x, y] An array containing the element's x and y coordinates.
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node
		* @param name String The attribute name.
		* @param namespace String The namespace in which to look for the attribute.
		* @returns String The attribute value.
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width.
		* @returns Number The width of the sides passed added together
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param contentBox Boolean If true a box for the content of the element is returned.
		* @param local Boolean If true the element's left and top are returned instead of page x/y.
		* @returns Object An object in the format
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;
		/** [Method] Returns the number of elements in this Composite
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHTML?(): string;
		/** [Method] Returns the offset height of the element
		* @param contentHeight Boolean true to get the height minus borders and padding.
		* @returns Number The element's height.
		*/
		getHeight?( contentHeight?:boolean ): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHtml?(): string;
		/** [Method] Gets the left X coordinate
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		* @returns Object/Number
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element
		* @param element Mixed The element to get the offsets from.
		* @returns Array The XY page offsets (e.g. [100, -200])
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right.
		* @returns Number The padding of the sides passed added together.
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param asRegion Boolean If true an Ext.util.Region will be returned.
		* @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY.
		*/
		getPageBox?( asRegion?:boolean ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element
		* @param contentSize Boolean true to get the width/size minus borders and padding.
		* @returns Object An object containing the element's size:
		*/
		getSize?( contentSize?:boolean ): any;
		/** [Method] Normalizes currentStyle and computedStyle
		* @param prop String The style property whose value is returned.
		* @returns String The current value of the style property for this element.
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate
		* @returns Number
		*/
		getTop?(): number;
		/** [Method] Returns the value of the value attribute
		* @param asNumber Boolean true to parse the value as a number.
		* @returns String/Number
		*/
		getValue?( asNumber?:boolean ): any;
		/** [Method] Returns the dimensions of the element available to lay content out in
		* @returns Object Object describing width and height:
		*/
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element
		* @param contentWidth Boolean true to get the width minus borders and padding.
		* @returns Number The element's width.
		*/
		getWidth?( contentWidth?:boolean ): number;
		/** [Method] Gets the current X position of the element based on page coordinates
		* @returns Number The X position of the element
		*/
		getX?(): number;
		/** [Method] Gets the current position of the element based on page coordinates
		* @returns Array The XY position of the element
		*/
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates
		* @returns Number The Y position of the element
		*/
		getY?(): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node
		* @param name String The CSS class to check for.
		* @returns Boolean true if the class exists, else false.
		*/
		hasCls?( name?:string ): boolean;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection.
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
		*/
		indexOf?( el?:any ): number;
		/** [Method] Inserts this element after the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element
		* @param element String/HTMLElement/Ext.dom.Element The id or element to insert.
		* @returns Ext.dom.Element this
		*/
		insertFirst?( element?:any ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element
		* @param where String Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details.
		* @param html String The HTML fragment
		* @param returnEl Boolean true to return an Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted).
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those.
		* @param where String 'before' or 'after'.
		* @param returnDom Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns Ext.dom.Element The inserted Element. If an array is passed, the last inserted element is returned.
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g
		* @param selector String The simple selector to test.
		* @returns Boolean true if this element matches the selector, else false.
		*/
		is?( selector?:string ): boolean;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value
		* @param style String property whose value is returned.
		* @param value String to check against.
		* @returns Boolean true for when the current value equals the given value.
		*/
		isStyle?( style?:string, value?:string ): boolean;
		/** [Method] Returns true if the value of the given property is visually transparent
		* @param prop String The style property whose value is to be tested.
		* @returns Boolean true if the style property is visually transparent.
		*/
		isTransparent?( prop?:string ): boolean;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index
		* @param index Number
		* @returns Ext.dom.Element
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The next sibling or null.
		*/
		next?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector
		* @param selector String Find a parent node that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The parent node or null.
		*/
		parent?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the previous sibling skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element
		* @returns Ext.dom.Element/HTMLElement/null The previous sibling or null.
		*/
		prev?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @returns HTMLElement[] An array of the matched nodes.
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings
		* @param className String/String[] The CSS class to add, or an array of classes.
		* @returns Ext.dom.Element this
		*/
		radioCls?( className?:any ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element
		* @param names String The CSS class(es) to remove from this element.
		* @param prefix String Prefix to prepend to each class to be removed.
		* @param suffix String Suffix to append to each class to be removed.
		* @returns Ext.dom.Element this
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those.
		* @param removeDom Boolean true to also remove the element from the document
		* @returns Ext.dom.CompositeElementLite this
		*/
		removeElement?( el?:any, removeDom?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element
		* @returns Ext.dom.Element this
		*/
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element
		* @param element String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		replace?( element?:any ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another
		* @param oldName String The CSS class to replace.
		* @param newName String The replacement CSS class.
		* @param prefix String Prefix to prepend to each class to be replaced.
		* @param suffix String Suffix to append to each class to be replaced.
		* @returns Ext.dom.Element this
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace.
		* @param replacement String/Ext.Element The id of an element or the Element itself.
		* @param domReplace Boolean true to remove and replace the element in the document too.
		* @returns Ext.dom.CompositeElementLite this
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create.
		* @returns Ext.dom.Element This element.
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function
		* @param attributes Object The object with the attributes.
		* @param useSet Boolean false to override the default setAttribute to use expandos.
		* @returns Ext.dom.Element this
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style
		* @param bottom String The bottom CSS property value.
		* @returns Ext.dom.Element this
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box
		* @param box Object The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... }
		* @returns Ext.dom.Element this
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node
		* @param className String/Array The CSS class to set on this element.
		*/
		setCls?( className?:any ): void;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element
		* @param height Number/String The new height.
		* @returns Ext.dom.Element this
		*/
		setHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX
		* @param left String The left CSS property value.
		* @returns Ext.dom.Element this
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element
		* @param height Number/String The new maximum height.
		* @returns Ext.dom.Element this
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element
		* @param width Number/String The new maximum width.
		* @returns Ext.dom.Element this
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element
		* @param height Number/String The new minimum height.
		* @returns Ext.dom.Element this
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element
		* @param width Number/String The new minimum width.
		* @returns Ext.dom.Element this
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style
		* @param right String The right CSS property value.
		* @returns Ext.dom.Element this
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.
		* @returns Ext.dom.Element this
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles
		* @param property String/Object The style property to be set, or an object of multiple styles.
		* @param value String The value to apply to the given property, or null if an object was passed.
		* @returns Ext.dom.Element this
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY
		* @param top String The top CSS property value.
		* @returns Ext.dom.Element this
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS
		* @param mode Object
		* @returns Ext.dom.Element this
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details
		* @param visible Boolean Whether the element is visible.
		* @returns Ext.Element this
		*/
		setVisible?( visible?:boolean ): Ext.IElement;
		/** [Method] Set the width of this Element
		* @param width Number/String The new width.
		* @returns Ext.dom.Element this
		*/
		setWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates
		* @param x Number The X position of the element
		* @returns Ext.dom.Element this
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based).
		* @returns Ext.dom.Element this
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates
		* @param y Number The Y position of the element.
		* @returns Ext.dom.Element this
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it
		* @param className String The CSS class to toggle.
		* @returns Ext.dom.Element this
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element
		* @param x Number/Array The page x or an array containing [x, y].
		* @param y Number The page y, required if x is not an array.
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}.
		*/
		translatePoints?( x?:any, y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g
		* @param simpleSelector String The simple selector to test
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @returns Ext.dom.Element/null The matching DOM node (or null if no match was found).
		*/
		up?( simpleSelector?:string, maxDepth?:any ): any;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div
		* @param domNode Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element.
		*/
		wrap?( config?:any, domNode?:boolean ): any;
	}
}
declare namespace Ext {
	export interface ICompositeElementLite extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an Array of DOM elements to add, or another Composite object who's elements should be added.
		* @param root HTMLElement/String The root element of the query or id of the root.
		* @returns Ext.dom.CompositeElementLite This Composite object.
		*/
		add?( els?:any, root?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element
		* @param names String The CSS class(es) to add to this element.
		* @param prefix String Prefix to prepend to each class.
		* @param suffix String Suffix to append to each class.
		* @returns Ext.dom.Element this
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight
		* @param eventName Object
		* @param handler Object
		* @param scope Object
		* @param opt Object
		* @returns Ext.dom.CompositeElementLite this
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element
		* @param element HTMLElement/Ext.dom.Element a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendChild?( element?:any ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendTo?( el?:any ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification.
		* @returns Ext.dom.Element this
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true)
		*/
		child?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
		* @returns Boolean
		*/
		contains?( el?:any ): boolean;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.
		* @param insertBefore HTMLElement a child element of this element.
		* @param returnDom Boolean true to return the dom node instead of creating an Element.
		* @returns Ext.dom.Element The new child element.
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true).
		*/
		down?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Calls the passed function for each element in this composite
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element.
		* @returns Ext.dom.CompositeElementLite this
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an array of DOM elements, or another Composite from which to fill this Composite.
		* @returns Ext.dom.CompositeElementLite this
		*/
		fill?( els?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector
		* @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments:
		* @returns Ext.dom.CompositeElementLite this
		*/
		filter?( selector?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 50 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParent?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Gets the x y coordinates to align this element with another element
		* @param element Mixed The element to align to.
		* @param position String The position to align to.
		* @param offsets Array Offset the positioning by [x, y].
		* @returns Array [x, y]
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element
		* @param anchor String The specified anchor position.
		* @param local Boolean true to get the local (element top/left-relative) anchor position instead of page coordinates.
		* @param size Object An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size)
		* @returns Array [x, y] An array containing the element's x and y coordinates.
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node
		* @param name String The attribute name.
		* @param namespace String The namespace in which to look for the attribute.
		* @returns String The attribute value.
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width.
		* @returns Number The width of the sides passed added together
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param contentBox Boolean If true a box for the content of the element is returned.
		* @param local Boolean If true the element's left and top are returned instead of page x/y.
		* @returns Object An object in the format
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;
		/** [Method] Returns the number of elements in this Composite
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHTML?(): string;
		/** [Method] Returns the offset height of the element
		* @param contentHeight Boolean true to get the height minus borders and padding.
		* @returns Number The element's height.
		*/
		getHeight?( contentHeight?:boolean ): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHtml?(): string;
		/** [Method] Gets the left X coordinate
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		* @returns Object/Number
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element
		* @param element Mixed The element to get the offsets from.
		* @returns Array The XY page offsets (e.g. [100, -200])
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right.
		* @returns Number The padding of the sides passed added together.
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param asRegion Boolean If true an Ext.util.Region will be returned.
		* @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY.
		*/
		getPageBox?( asRegion?:boolean ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element
		* @param contentSize Boolean true to get the width/size minus borders and padding.
		* @returns Object An object containing the element's size:
		*/
		getSize?( contentSize?:boolean ): any;
		/** [Method] Normalizes currentStyle and computedStyle
		* @param prop String The style property whose value is returned.
		* @returns String The current value of the style property for this element.
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate
		* @returns Number
		*/
		getTop?(): number;
		/** [Method] Returns the value of the value attribute
		* @param asNumber Boolean true to parse the value as a number.
		* @returns String/Number
		*/
		getValue?( asNumber?:boolean ): any;
		/** [Method] Returns the dimensions of the element available to lay content out in
		* @returns Object Object describing width and height:
		*/
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element
		* @param contentWidth Boolean true to get the width minus borders and padding.
		* @returns Number The element's width.
		*/
		getWidth?( contentWidth?:boolean ): number;
		/** [Method] Gets the current X position of the element based on page coordinates
		* @returns Number The X position of the element
		*/
		getX?(): number;
		/** [Method] Gets the current position of the element based on page coordinates
		* @returns Array The XY position of the element
		*/
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates
		* @returns Number The Y position of the element
		*/
		getY?(): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node
		* @param name String The CSS class to check for.
		* @returns Boolean true if the class exists, else false.
		*/
		hasCls?( name?:string ): boolean;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection.
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
		*/
		indexOf?( el?:any ): number;
		/** [Method] Inserts this element after the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element
		* @param element String/HTMLElement/Ext.dom.Element The id or element to insert.
		* @returns Ext.dom.Element this
		*/
		insertFirst?( element?:any ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element
		* @param where String Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details.
		* @param html String The HTML fragment
		* @param returnEl Boolean true to return an Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted).
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those.
		* @param where String 'before' or 'after'.
		* @param returnDom Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns Ext.dom.Element The inserted Element. If an array is passed, the last inserted element is returned.
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g
		* @param selector String The simple selector to test.
		* @returns Boolean true if this element matches the selector, else false.
		*/
		is?( selector?:string ): boolean;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value
		* @param style String property whose value is returned.
		* @param value String to check against.
		* @returns Boolean true for when the current value equals the given value.
		*/
		isStyle?( style?:string, value?:string ): boolean;
		/** [Method] Returns true if the value of the given property is visually transparent
		* @param prop String The style property whose value is to be tested.
		* @returns Boolean true if the style property is visually transparent.
		*/
		isTransparent?( prop?:string ): boolean;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index
		* @param index Number
		* @returns Ext.dom.Element
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The next sibling or null.
		*/
		next?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector
		* @param selector String Find a parent node that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The parent node or null.
		*/
		parent?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the previous sibling skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element
		* @returns Ext.dom.Element/HTMLElement/null The previous sibling or null.
		*/
		prev?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @returns HTMLElement[] An array of the matched nodes.
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings
		* @param className String/String[] The CSS class to add, or an array of classes.
		* @returns Ext.dom.Element this
		*/
		radioCls?( className?:any ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element
		* @param names String The CSS class(es) to remove from this element.
		* @param prefix String Prefix to prepend to each class to be removed.
		* @param suffix String Suffix to append to each class to be removed.
		* @returns Ext.dom.Element this
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those.
		* @param removeDom Boolean true to also remove the element from the document
		* @returns Ext.dom.CompositeElementLite this
		*/
		removeElement?( el?:any, removeDom?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element
		* @returns Ext.dom.Element this
		*/
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element
		* @param element String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		replace?( element?:any ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another
		* @param oldName String The CSS class to replace.
		* @param newName String The replacement CSS class.
		* @param prefix String Prefix to prepend to each class to be replaced.
		* @param suffix String Suffix to append to each class to be replaced.
		* @returns Ext.dom.Element this
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace.
		* @param replacement String/Ext.Element The id of an element or the Element itself.
		* @param domReplace Boolean true to remove and replace the element in the document too.
		* @returns Ext.dom.CompositeElementLite this
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create.
		* @returns Ext.dom.Element This element.
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function
		* @param attributes Object The object with the attributes.
		* @param useSet Boolean false to override the default setAttribute to use expandos.
		* @returns Ext.dom.Element this
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style
		* @param bottom String The bottom CSS property value.
		* @returns Ext.dom.Element this
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box
		* @param box Object The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... }
		* @returns Ext.dom.Element this
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node
		* @param className String/Array The CSS class to set on this element.
		*/
		setCls?( className?:any ): void;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element
		* @param height Number/String The new height.
		* @returns Ext.dom.Element this
		*/
		setHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX
		* @param left String The left CSS property value.
		* @returns Ext.dom.Element this
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element
		* @param height Number/String The new maximum height.
		* @returns Ext.dom.Element this
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element
		* @param width Number/String The new maximum width.
		* @returns Ext.dom.Element this
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element
		* @param height Number/String The new minimum height.
		* @returns Ext.dom.Element this
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element
		* @param width Number/String The new minimum width.
		* @returns Ext.dom.Element this
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style
		* @param right String The right CSS property value.
		* @returns Ext.dom.Element this
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.
		* @returns Ext.dom.Element this
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles
		* @param property String/Object The style property to be set, or an object of multiple styles.
		* @param value String The value to apply to the given property, or null if an object was passed.
		* @returns Ext.dom.Element this
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY
		* @param top String The top CSS property value.
		* @returns Ext.dom.Element this
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS
		* @param mode Object
		* @returns Ext.dom.Element this
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details
		* @param visible Boolean Whether the element is visible.
		* @returns Ext.Element this
		*/
		setVisible?( visible?:boolean ): Ext.IElement;
		/** [Method] Set the width of this Element
		* @param width Number/String The new width.
		* @returns Ext.dom.Element this
		*/
		setWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates
		* @param x Number The X position of the element
		* @returns Ext.dom.Element this
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based).
		* @returns Ext.dom.Element this
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates
		* @param y Number The Y position of the element.
		* @returns Ext.dom.Element this
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it
		* @param className String The CSS class to toggle.
		* @returns Ext.dom.Element this
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element
		* @param x Number/Array The page x or an array containing [x, y].
		* @param y Number The page y, required if x is not an array.
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}.
		*/
		translatePoints?( x?:any, y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g
		* @param simpleSelector String The simple selector to test
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @returns Ext.dom.Element/null The matching DOM node (or null if no match was found).
		*/
		up?( simpleSelector?:string, maxDepth?:any ): any;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div
		* @param domNode Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element.
		*/
		wrap?( config?:any, domNode?:boolean ): any;
	}
}
declare namespace Ext {
	export interface ICompositeElement extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an Array of DOM elements to add, or another Composite object who's elements should be added.
		* @param root HTMLElement/String The root element of the query or id of the root.
		* @returns Ext.dom.CompositeElementLite This Composite object.
		*/
		add?( els?:any, root?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element
		* @param names String The CSS class(es) to add to this element.
		* @param prefix String Prefix to prepend to each class.
		* @param suffix String Suffix to append to each class.
		* @returns Ext.dom.Element this
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight
		* @param eventName Object
		* @param handler Object
		* @param scope Object
		* @param opt Object
		* @returns Ext.dom.CompositeElementLite this
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element
		* @param element HTMLElement/Ext.dom.Element a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendChild?( element?:any ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendTo?( el?:any ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification.
		* @returns Ext.dom.Element this
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true)
		*/
		child?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
		* @returns Boolean
		*/
		contains?( el?:any ): boolean;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.
		* @param insertBefore HTMLElement a child element of this element.
		* @param returnDom Boolean true to return the dom node instead of creating an Element.
		* @returns Ext.dom.Element The new child element.
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true).
		*/
		down?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Calls the passed function for each element in this composite
		* @param fn Function The function to call.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element.
		* @returns Ext.dom.CompositeElementLite this
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an array of DOM elements, or another Composite from which to fill this Composite.
		* @returns Ext.dom.CompositeElementLite this
		*/
		fill?( els?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector
		* @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments:
		* @returns Ext.dom.CompositeElementLite this
		*/
		filter?( selector?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 50 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParent?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Gets the x y coordinates to align this element with another element
		* @param element Mixed The element to align to.
		* @param position String The position to align to.
		* @param offsets Array Offset the positioning by [x, y].
		* @returns Array [x, y]
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element
		* @param anchor String The specified anchor position.
		* @param local Boolean true to get the local (element top/left-relative) anchor position instead of page coordinates.
		* @param size Object An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size)
		* @returns Array [x, y] An array containing the element's x and y coordinates.
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node
		* @param name String The attribute name.
		* @param namespace String The namespace in which to look for the attribute.
		* @returns String The attribute value.
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width.
		* @returns Number The width of the sides passed added together
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param contentBox Boolean If true a box for the content of the element is returned.
		* @param local Boolean If true the element's left and top are returned instead of page x/y.
		* @returns Object An object in the format
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;
		/** [Method] Returns the number of elements in this Composite
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHTML?(): string;
		/** [Method] Returns the offset height of the element
		* @param contentHeight Boolean true to get the height minus borders and padding.
		* @returns Number The element's height.
		*/
		getHeight?( contentHeight?:boolean ): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHtml?(): string;
		/** [Method] Gets the left X coordinate
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		* @returns Object/Number
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element
		* @param element Mixed The element to get the offsets from.
		* @returns Array The XY page offsets (e.g. [100, -200])
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right.
		* @returns Number The padding of the sides passed added together.
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param asRegion Boolean If true an Ext.util.Region will be returned.
		* @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY.
		*/
		getPageBox?( asRegion?:boolean ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element
		* @param contentSize Boolean true to get the width/size minus borders and padding.
		* @returns Object An object containing the element's size:
		*/
		getSize?( contentSize?:boolean ): any;
		/** [Method] Normalizes currentStyle and computedStyle
		* @param prop String The style property whose value is returned.
		* @returns String The current value of the style property for this element.
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate
		* @returns Number
		*/
		getTop?(): number;
		/** [Method] Returns the value of the value attribute
		* @param asNumber Boolean true to parse the value as a number.
		* @returns String/Number
		*/
		getValue?( asNumber?:boolean ): any;
		/** [Method] Returns the dimensions of the element available to lay content out in
		* @returns Object Object describing width and height:
		*/
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element
		* @param contentWidth Boolean true to get the width minus borders and padding.
		* @returns Number The element's width.
		*/
		getWidth?( contentWidth?:boolean ): number;
		/** [Method] Gets the current X position of the element based on page coordinates
		* @returns Number The X position of the element
		*/
		getX?(): number;
		/** [Method] Gets the current position of the element based on page coordinates
		* @returns Array The XY position of the element
		*/
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates
		* @returns Number The Y position of the element
		*/
		getY?(): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node
		* @param name String The CSS class to check for.
		* @returns Boolean true if the class exists, else false.
		*/
		hasCls?( name?:string ): boolean;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection.
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
		*/
		indexOf?( el?:any ): number;
		/** [Method] Inserts this element after the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element
		* @param element String/HTMLElement/Ext.dom.Element The id or element to insert.
		* @returns Ext.dom.Element this
		*/
		insertFirst?( element?:any ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element
		* @param where String Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details.
		* @param html String The HTML fragment
		* @param returnEl Boolean true to return an Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted).
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those.
		* @param where String 'before' or 'after'.
		* @param returnDom Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns Ext.dom.Element The inserted Element. If an array is passed, the last inserted element is returned.
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g
		* @param selector String The simple selector to test.
		* @returns Boolean true if this element matches the selector, else false.
		*/
		is?( selector?:string ): boolean;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value
		* @param style String property whose value is returned.
		* @param value String to check against.
		* @returns Boolean true for when the current value equals the given value.
		*/
		isStyle?( style?:string, value?:string ): boolean;
		/** [Method] Returns true if the value of the given property is visually transparent
		* @param prop String The style property whose value is to be tested.
		* @returns Boolean true if the style property is visually transparent.
		*/
		isTransparent?( prop?:string ): boolean;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index
		* @param index Number
		* @returns Ext.dom.Element
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The next sibling or null.
		*/
		next?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector
		* @param selector String Find a parent node that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The parent node or null.
		*/
		parent?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the previous sibling skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element
		* @returns Ext.dom.Element/HTMLElement/null The previous sibling or null.
		*/
		prev?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @returns HTMLElement[] An array of the matched nodes.
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings
		* @param className String/String[] The CSS class to add, or an array of classes.
		* @returns Ext.dom.Element this
		*/
		radioCls?( className?:any ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element
		* @param names String The CSS class(es) to remove from this element.
		* @param prefix String Prefix to prepend to each class to be removed.
		* @param suffix String Suffix to append to each class to be removed.
		* @returns Ext.dom.Element this
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those.
		* @param removeDom Boolean true to also remove the element from the document
		* @returns Ext.dom.CompositeElementLite this
		*/
		removeElement?( el?:any, removeDom?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element
		* @returns Ext.dom.Element this
		*/
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element
		* @param element String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		replace?( element?:any ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another
		* @param oldName String The CSS class to replace.
		* @param newName String The replacement CSS class.
		* @param prefix String Prefix to prepend to each class to be replaced.
		* @param suffix String Suffix to append to each class to be replaced.
		* @returns Ext.dom.Element this
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element
		* @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace.
		* @param replacement String/Ext.Element The id of an element or the Element itself.
		* @param domReplace Boolean true to remove and replace the element in the document too.
		* @returns Ext.dom.CompositeElementLite this
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create.
		* @returns Ext.dom.Element This element.
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function
		* @param attributes Object The object with the attributes.
		* @param useSet Boolean false to override the default setAttribute to use expandos.
		* @returns Ext.dom.Element this
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style
		* @param bottom String The bottom CSS property value.
		* @returns Ext.dom.Element this
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box
		* @param box Object The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... }
		* @returns Ext.dom.Element this
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node
		* @param className String/Array The CSS class to set on this element.
		*/
		setCls?( className?:any ): void;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element
		* @param height Number/String The new height.
		* @returns Ext.dom.Element this
		*/
		setHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX
		* @param left String The left CSS property value.
		* @returns Ext.dom.Element this
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element
		* @param height Number/String The new maximum height.
		* @returns Ext.dom.Element this
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element
		* @param width Number/String The new maximum width.
		* @returns Ext.dom.Element this
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element
		* @param height Number/String The new minimum height.
		* @returns Ext.dom.Element this
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element
		* @param width Number/String The new minimum width.
		* @returns Ext.dom.Element this
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style
		* @param right String The right CSS property value.
		* @returns Ext.dom.Element this
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.
		* @returns Ext.dom.Element this
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles
		* @param property String/Object The style property to be set, or an object of multiple styles.
		* @param value String The value to apply to the given property, or null if an object was passed.
		* @returns Ext.dom.Element this
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY
		* @param top String The top CSS property value.
		* @returns Ext.dom.Element this
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS
		* @param mode Object
		* @returns Ext.dom.Element this
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details
		* @param visible Boolean Whether the element is visible.
		* @returns Ext.Element this
		*/
		setVisible?( visible?:boolean ): Ext.IElement;
		/** [Method] Set the width of this Element
		* @param width Number/String The new width.
		* @returns Ext.dom.Element this
		*/
		setWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates
		* @param x Number The X position of the element
		* @returns Ext.dom.Element this
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based).
		* @returns Ext.dom.Element this
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates
		* @param y Number The Y position of the element.
		* @returns Ext.dom.Element this
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it
		* @param className String The CSS class to toggle.
		* @returns Ext.dom.Element this
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element
		* @param x Number/Array The page x or an array containing [x, y].
		* @param y Number The page y, required if x is not an array.
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}.
		*/
		translatePoints?( x?:any, y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g
		* @param simpleSelector String The simple selector to test
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @returns Ext.dom.Element/null The matching DOM node (or null if no match was found).
		*/
		up?( simpleSelector?:string, maxDepth?:any ): any;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div
		* @param domNode Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element.
		*/
		wrap?( config?:any, domNode?:boolean ): any;
	}
}
declare namespace Ext.dom {
	export interface IElement extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (Number) */
		DISPLAY?: number;
		/** [Property] (Number) */
		OFFSETS?: number;
		/** [Property] (Number) */
		VISIBILITY?: number;
		/** [Property] (String) */
		defaultUnit?: string;
		/** [Property] (HTMLElement) */
		dom?: HTMLElement;
		/** [Property] (String) */
		id?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the given CSS class es to this Element
		* @param names String The CSS class(es) to add to this element.
		* @param prefix String Prefix to prepend to each class.
		* @param suffix String Suffix to append to each class.
		* @returns Ext.dom.Element this
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends the passed element s to this element
		* @param element HTMLElement/Ext.dom.Element a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendChild?( element?:any ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendTo?( el?:any ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification.
		* @returns Ext.dom.Element this
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true)
		*/
		child?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Returns true if this element is an ancestor of the passed element
		* @param element HTMLElement/String The element to check.
		* @returns Boolean true if this element is an ancestor of el, else false.
		*/
		contains?( element?:any ): boolean;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.
		* @param insertBefore HTMLElement a child element of this element.
		* @param returnDom Boolean true to return the dom node instead of creating an Element.
		* @returns Ext.dom.Element The new child element.
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true).
		*/
		down?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 50 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParent?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Gets the first child skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The first child or null.
		*/
		first?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the x y coordinates to align this element with another element
		* @param element Mixed The element to align to.
		* @param position String The position to align to.
		* @param offsets Array Offset the positioning by [x, y].
		* @returns Array [x, y]
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element
		* @param anchor String The specified anchor position.
		* @param local Boolean true to get the local (element top/left-relative) anchor position instead of page coordinates.
		* @param size Object An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size)
		* @returns Array [x, y] An array containing the element's x and y coordinates.
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node
		* @param name String The attribute name.
		* @param namespace String The namespace in which to look for the attribute.
		* @returns String The attribute value.
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width.
		* @returns Number The width of the sides passed added together
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param contentBox Boolean If true a box for the content of the element is returned.
		* @param local Boolean If true the element's left and top are returned instead of page x/y.
		* @returns Object An object in the format
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHTML?(): string;
		/** [Method] Returns the offset height of the element
		* @param contentHeight Boolean true to get the height minus borders and padding.
		* @returns Number The element's height.
		*/
		getHeight?( contentHeight?:boolean ): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHtml?(): string;
		/** [Method] Gets the left X coordinate
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		* @returns Object/Number
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element
		* @param element Mixed The element to get the offsets from.
		* @returns Array The XY page offsets (e.g. [100, -200])
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right.
		* @returns Number The padding of the sides passed added together.
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param asRegion Boolean If true an Ext.util.Region will be returned.
		* @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY.
		*/
		getPageBox?( asRegion?:boolean ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element
		* @param contentSize Boolean true to get the width/size minus borders and padding.
		* @returns Object An object containing the element's size:
		*/
		getSize?( contentSize?:boolean ): any;
		/** [Method] Normalizes currentStyle and computedStyle
		* @param prop String The style property whose value is returned.
		* @returns String The current value of the style property for this element.
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate
		* @returns Number
		*/
		getTop?(): number;
		/** [Method] Returns the value of the value attribute
		* @param asNumber Boolean true to parse the value as a number.
		* @returns String/Number
		*/
		getValue?( asNumber?:boolean ): any;
		/** [Method] Returns the dimensions of the element available to lay content out in
		* @returns Object Object describing width and height:
		*/
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element
		* @param contentWidth Boolean true to get the width minus borders and padding.
		* @returns Number The element's width.
		*/
		getWidth?( contentWidth?:boolean ): number;
		/** [Method] Gets the current X position of the element based on page coordinates
		* @returns Number The X position of the element
		*/
		getX?(): number;
		/** [Method] Gets the current position of the element based on page coordinates
		* @returns Array The XY position of the element
		*/
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates
		* @returns Number The Y position of the element
		*/
		getY?(): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node
		* @param name String The CSS class to check for.
		* @returns Boolean true if the class exists, else false.
		*/
		hasCls?( name?:string ): boolean;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Inserts this element after the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element
		* @param element String/HTMLElement/Ext.dom.Element The id or element to insert.
		* @returns Ext.dom.Element this
		*/
		insertFirst?( element?:any ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element
		* @param where String Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details.
		* @param html String The HTML fragment
		* @param returnEl Boolean true to return an Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted).
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those.
		* @param where String 'before' or 'after'.
		* @param returnDom Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns Ext.dom.Element The inserted Element. If an array is passed, the last inserted element is returned.
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g
		* @param selector String The simple selector to test.
		* @returns Boolean true if this element matches the selector, else false.
		*/
		is?( selector?:string ): boolean;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value
		* @param style String property whose value is returned.
		* @param value String to check against.
		* @returns Boolean true for when the current value equals the given value.
		*/
		isStyle?( style?:string, value?:string ): boolean;
		/** [Method] Returns true if the value of the given property is visually transparent
		* @param prop String The style property whose value is to be tested.
		* @returns Boolean true if the style property is visually transparent.
		*/
		isTransparent?( prop?:string ): boolean;
		/** [Method] Gets the last child skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The last child or null.
		*/
		last?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Gets the next sibling skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The next sibling or null.
		*/
		next?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector
		* @param selector String Find a parent node that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The parent node or null.
		*/
		parent?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the previous sibling skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element
		* @returns Ext.dom.Element/HTMLElement/null The previous sibling or null.
		*/
		prev?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @returns HTMLElement[] An array of the matched nodes.
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings
		* @param className String/String[] The CSS class to add, or an array of classes.
		* @returns Ext.dom.Element this
		*/
		radioCls?( className?:any ): Ext.dom.IElement;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Element
		* @param names String The CSS class(es) to remove from this element.
		* @param prefix String Prefix to prepend to each class to be removed.
		* @param suffix String Suffix to append to each class to be removed.
		* @returns Ext.dom.Element this
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Forces the browser to repaint this element
		* @returns Ext.dom.Element this
		*/
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element
		* @param element String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		replace?( element?:any ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another
		* @param oldName String The CSS class to replace.
		* @param newName String The replacement CSS class.
		* @param prefix String Prefix to prepend to each class to be replaced.
		* @param suffix String Suffix to append to each class to be replaced.
		* @returns Ext.dom.Element this
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces this element with the passed element
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create.
		* @returns Ext.dom.Element This element.
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function
		* @param attributes Object The object with the attributes.
		* @param useSet Boolean false to override the default setAttribute to use expandos.
		* @returns Ext.dom.Element this
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style
		* @param bottom String The bottom CSS property value.
		* @returns Ext.dom.Element this
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box
		* @param box Object The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... }
		* @returns Ext.dom.Element this
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the specified CSS class on this element s DOM node
		* @param className String/Array The CSS class to set on this element.
		*/
		setCls?( className?:any ): void;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element
		* @param height Number/String The new height.
		* @returns Ext.dom.Element this
		*/
		setHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX
		* @param left String The left CSS property value.
		* @returns Ext.dom.Element this
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Set the maximum height of this Element
		* @param height Number/String The new maximum height.
		* @returns Ext.dom.Element this
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element
		* @param width Number/String The new maximum width.
		* @returns Ext.dom.Element this
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element
		* @param height Number/String The new minimum height.
		* @returns Ext.dom.Element this
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element
		* @param width Number/String The new minimum width.
		* @returns Ext.dom.Element this
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style
		* @param right String The right CSS property value.
		* @returns Ext.dom.Element this
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.
		* @returns Ext.dom.Element this
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles
		* @param property String/Object The style property to be set, or an object of multiple styles.
		* @param value String The value to apply to the given property, or null if an object was passed.
		* @returns Ext.dom.Element this
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY
		* @param top String The top CSS property value.
		* @returns Ext.dom.Element this
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS
		* @param mode Object
		* @returns Ext.dom.Element this
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details
		* @param visible Boolean Whether the element is visible.
		* @returns Ext.Element this
		*/
		setVisible?( visible?:boolean ): Ext.IElement;
		/** [Method] Set the width of this Element
		* @param width Number/String The new width.
		* @returns Ext.dom.Element this
		*/
		setWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates
		* @param x Number The X position of the element
		* @returns Ext.dom.Element this
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based).
		* @returns Ext.dom.Element this
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates
		* @param y Number The Y position of the element.
		* @returns Ext.dom.Element this
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it
		* @param className String The CSS class to toggle.
		* @returns Ext.dom.Element this
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element
		* @param x Number/Array The page x or an array containing [x, y].
		* @param y Number The page y, required if x is not an array.
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}.
		*/
		translatePoints?( x?:any, y?:number ): any;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g
		* @param simpleSelector String The simple selector to test
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @returns Ext.dom.Element/null The matching DOM node (or null if no match was found).
		*/
		up?( simpleSelector?:string, maxDepth?:any ): any;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div
		* @param domNode Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element.
		*/
		wrap?( config?:any, domNode?:boolean ): any;
	}
	export class Element {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element
		* @param element String/HTMLElement The DOM node or id.
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global").
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found).
		*/
		static fly( element?:any, named?:string ): Ext.dom.IElement;
		/** [Method] Returns the top Element that is located at the passed coordinates
		* @param x Number The x coordinate
		* @param y Number The y coordinate
		* @returns String The found Element
		*/
		static fromPoint( x?:number, y?:number ): string;
		/** [Method] Retrieves Ext dom Element objects
		* @param element String/HTMLElement/Ext.Element The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element The Element object (or null if no matching element was found).
		*/
		static get( element?:any ): Ext.dom.IElement;
		/** [Method] Retrieves the document height
		* @returns Number documentHeight
		*/
		static getDocumentHeight(): number;
		/** [Method] Retrieves the document width
		* @returns Number documentWidth
		*/
		static getDocumentWidth(): number;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Retrieves the current orientation of the window
		* @returns String Orientation of window: 'portrait' or 'landscape'
		*/
		static getOrientation(): string;
		/** [Method] Retrieves the viewport size of the window
		* @returns Object object containing width and height properties
		*/
		static getViewSize(): any;
		/** [Method] Retrieves the viewport height of the window
		* @returns Number viewportHeight
		*/
		static getViewportHeight(): number;
		/** [Method] Retrieves the viewport width of the window
		* @returns Number viewportWidth
		*/
		static getViewportWidth(): number;
		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax
		* @param prop String The property to normalize
		* @returns String The normalized string
		*/
		static normalize( prop?:string ): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
		/** [Method] Parses a number or string representing margin sizes into an object
		* @param box Number/String The encoded margins
		* @returns Object An object with margin sizes for top, right, bottom and left containing the unit
		*/
		static parseBox( box?:any ): any;
		/** [Method] Converts a CSS string into an object with a property for each style
		* @param styles String A CSS string
		* @returns Object styles
		*/
		static parseStyles( styles?:string ): any;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @param root HTMLElement/String The root element of the query or id of the root
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		static select( selector?:any, composite?:boolean, root?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		static serializeForm( form?:any ): string;
		/** [Method] Serializes a DOM element and its children recursively into a string
		* @param node Object DOM element to serialize.
		* @returns String
		*/
		static serializeNode( node?:any ): string;
		/** [Method] Parses a number or string representing margin sizes into an object
		* @param box Number/String The encoded margins
		* @param units String The type of units to add
		* @returns String An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		*/
		static unitizeBox( box?:any, units?:string ): string;
	}
}
declare namespace Ext {
	export interface IElement extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (Number) */
		DISPLAY?: number;
		/** [Property] (Number) */
		OFFSETS?: number;
		/** [Property] (Number) */
		VISIBILITY?: number;
		/** [Property] (String) */
		defaultUnit?: string;
		/** [Property] (HTMLElement) */
		dom?: HTMLElement;
		/** [Property] (String) */
		id?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the given CSS class es to this Element
		* @param names String The CSS class(es) to add to this element.
		* @param prefix String Prefix to prepend to each class.
		* @param suffix String Suffix to append to each class.
		* @returns Ext.dom.Element this
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends the passed element s to this element
		* @param element HTMLElement/Ext.dom.Element a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendChild?( element?:any ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		appendTo?( el?:any ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification.
		* @returns Ext.dom.Element this
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true)
		*/
		child?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Returns true if this element is an ancestor of the passed element
		* @param element HTMLElement/String The element to check.
		* @returns Boolean true if this element is an ancestor of el, else false.
		*/
		contains?( element?:any ): boolean;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes.
		* @param insertBefore HTMLElement a child element of this element.
		* @param returnDom Boolean true to return the dom node instead of creating an Element.
		* @returns Ext.dom.Element The new child element.
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont
		* @param selector String The CSS selector.
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true).
		*/
		down?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 50 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParent?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g
		* @param simpleSelector String The simple selector to test.
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement/null The matching DOM node (or null if no match was found).
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:any, returnEl?:boolean ): any;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Gets the first child skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The first child or null.
		*/
		first?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the x y coordinates to align this element with another element
		* @param element Mixed The element to align to.
		* @param position String The position to align to.
		* @param offsets Array Offset the positioning by [x, y].
		* @returns Array [x, y]
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element
		* @param anchor String The specified anchor position.
		* @param local Boolean true to get the local (element top/left-relative) anchor position instead of page coordinates.
		* @param size Object An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size)
		* @returns Array [x, y] An array containing the element's x and y coordinates.
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node
		* @param name String The attribute name.
		* @param namespace String The namespace in which to look for the attribute.
		* @returns String The attribute value.
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width.
		* @returns Number The width of the sides passed added together
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param contentBox Boolean If true a box for the content of the element is returned.
		* @param local Boolean If true the element's left and top are returned instead of page x/y.
		* @returns Object An object in the format
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHTML?(): string;
		/** [Method] Returns the offset height of the element
		* @param contentHeight Boolean true to get the height minus borders and padding.
		* @returns Number The element's height.
		*/
		getHeight?( contentHeight?:boolean ): number;
		/** [Method] Returns the innerHTML of an element
		* @returns String
		*/
		getHtml?(): string;
		/** [Method] Gets the left X coordinate
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides.
		* @returns Object/Number
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element
		* @param element Mixed The element to get the offsets from.
		* @returns Array The XY page offsets (e.g. [100, -200])
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right.
		* @returns Number The padding of the sides passed added together.
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
		* @param asRegion Boolean If true an Ext.util.Region will be returned.
		* @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY.
		*/
		getPageBox?( asRegion?:boolean ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element
		* @param contentSize Boolean true to get the width/size minus borders and padding.
		* @returns Object An object containing the element's size:
		*/
		getSize?( contentSize?:boolean ): any;
		/** [Method] Normalizes currentStyle and computedStyle
		* @param prop String The style property whose value is returned.
		* @returns String The current value of the style property for this element.
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate
		* @returns Number
		*/
		getTop?(): number;
		/** [Method] Returns the value of the value attribute
		* @param asNumber Boolean true to parse the value as a number.
		* @returns String/Number
		*/
		getValue?( asNumber?:boolean ): any;
		/** [Method] Returns the dimensions of the element available to lay content out in
		* @returns Object Object describing width and height:
		*/
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element
		* @param contentWidth Boolean true to get the width minus borders and padding.
		* @returns Number The element's width.
		*/
		getWidth?( contentWidth?:boolean ): number;
		/** [Method] Gets the current X position of the element based on page coordinates
		* @returns Number The X position of the element
		*/
		getX?(): number;
		/** [Method] Gets the current position of the element based on page coordinates
		* @returns Array The XY position of the element
		*/
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates
		* @returns Number The Y position of the element
		*/
		getY?(): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node
		* @param name String The CSS class to check for.
		* @returns Boolean true if the class exists, else false.
		*/
		hasCls?( name?:string ): boolean;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Inserts this element after the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element
		* @param element String/HTMLElement/Ext.dom.Element The id or element to insert.
		* @returns Ext.dom.Element this
		*/
		insertFirst?( element?:any ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element
		* @param where String Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details.
		* @param html String The HTML fragment
		* @param returnEl Boolean true to return an Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted).
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those.
		* @param where String 'before' or 'after'.
		* @param returnDom Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns Ext.dom.Element The inserted Element. If an array is passed, the last inserted element is returned.
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g
		* @param selector String The simple selector to test.
		* @returns Boolean true if this element matches the selector, else false.
		*/
		is?( selector?:string ): boolean;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value
		* @param style String property whose value is returned.
		* @param value String to check against.
		* @returns Boolean true for when the current value equals the given value.
		*/
		isStyle?( style?:string, value?:string ): boolean;
		/** [Method] Returns true if the value of the given property is visually transparent
		* @param prop String The style property whose value is to be tested.
		* @returns Boolean true if the style property is visually transparent.
		*/
		isTransparent?( prop?:string ): boolean;
		/** [Method] Gets the last child skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The last child or null.
		*/
		last?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Gets the next sibling skipping text nodes
		* @param selector String Find the next sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The next sibling or null.
		*/
		next?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector
		* @param selector String Find a parent node that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element.
		* @returns Ext.dom.Element/HTMLElement/null The parent node or null.
		*/
		parent?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Gets the previous sibling skipping text nodes
		* @param selector String Find the previous sibling that matches the passed simple selector.
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element
		* @returns Ext.dom.Element/HTMLElement/null The previous sibling or null.
		*/
		prev?( selector?:string, returnDom?:boolean ): any;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id
		* @param selector String The CSS selector.
		* @returns HTMLElement[] An array of the matched nodes.
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings
		* @param className String/String[] The CSS class to add, or an array of classes.
		* @returns Ext.dom.Element this
		*/
		radioCls?( className?:any ): Ext.dom.IElement;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Element
		* @param names String The CSS class(es) to remove from this element.
		* @param prefix String Prefix to prepend to each class to be removed.
		* @param suffix String Suffix to append to each class to be removed.
		* @returns Ext.dom.Element this
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Forces the browser to repaint this element
		* @returns Ext.dom.Element this
		*/
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element
		* @param element String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element This element.
		*/
		replace?( element?:any ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another
		* @param oldName String The CSS class to replace.
		* @param newName String The replacement CSS class.
		* @param prefix String Prefix to prepend to each class to be replaced.
		* @param suffix String Suffix to append to each class to be replaced.
		* @returns Ext.dom.Element this
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces this element with the passed element
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create.
		* @returns Ext.dom.Element This element.
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function
		* @param attributes Object The object with the attributes.
		* @param useSet Boolean false to override the default setAttribute to use expandos.
		* @returns Ext.dom.Element this
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style
		* @param bottom String The bottom CSS property value.
		* @returns Ext.dom.Element this
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box
		* @param box Object The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... }
		* @returns Ext.dom.Element this
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the specified CSS class on this element s DOM node
		* @param className String/Array The CSS class to set on this element.
		*/
		setCls?( className?:any ): void;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element
		* @param height Number/String The new height.
		* @returns Ext.dom.Element this
		*/
		setHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX
		* @param left String The left CSS property value.
		* @returns Ext.dom.Element this
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Set the maximum height of this Element
		* @param height Number/String The new maximum height.
		* @returns Ext.dom.Element this
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element
		* @param width Number/String The new maximum width.
		* @returns Ext.dom.Element this
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element
		* @param height Number/String The new minimum height.
		* @returns Ext.dom.Element this
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element
		* @param width Number/String The new minimum width.
		* @returns Ext.dom.Element this
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style
		* @param right String The right CSS property value.
		* @returns Ext.dom.Element this
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.
		* @returns Ext.dom.Element this
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles
		* @param property String/Object The style property to be set, or an object of multiple styles.
		* @param value String The value to apply to the given property, or null if an object was passed.
		* @returns Ext.dom.Element this
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY
		* @param top String The top CSS property value.
		* @returns Ext.dom.Element this
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS
		* @param mode Object
		* @returns Ext.dom.Element this
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details
		* @param visible Boolean Whether the element is visible.
		* @returns Ext.Element this
		*/
		setVisible?( visible?:boolean ): Ext.IElement;
		/** [Method] Set the width of this Element
		* @param width Number/String The new width.
		* @returns Ext.dom.Element this
		*/
		setWidth?( width?:any ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates
		* @param x Number The X position of the element
		* @returns Ext.dom.Element this
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based).
		* @returns Ext.dom.Element this
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates
		* @param y Number The Y position of the element.
		* @returns Ext.dom.Element this
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it
		* @param className String The CSS class to toggle.
		* @returns Ext.dom.Element this
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element
		* @param x Number/Array The page x or an array containing [x, y].
		* @param y Number The page y, required if x is not an array.
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}.
		*/
		translatePoints?( x?:any, y?:number ): any;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g
		* @param simpleSelector String The simple selector to test
		* @param maxDepth Number/String/HTMLElement/Ext.Element The max depth to search as a number or element (defaults to 10 || document.body).
		* @returns Ext.dom.Element/null The matching DOM node (or null if no match was found).
		*/
		up?( simpleSelector?:string, maxDepth?:any ): any;
		/** [Method] Sets the innerHTML of this element
		* @param html String The new HTML.
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div
		* @param domNode Boolean true to return the raw DOM element instead of Ext.dom.Element.
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element.
		*/
		wrap?( config?:any, domNode?:boolean ): any;
	}
	export class Element {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element
		* @param element String/HTMLElement The DOM node or id.
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global").
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found).
		*/
		static fly( element?:any, named?:string ): Ext.dom.IElement;
		/** [Method] Returns the top Element that is located at the passed coordinates
		* @param x Number The x coordinate
		* @param y Number The y coordinate
		* @returns String The found Element
		*/
		static fromPoint( x?:number, y?:number ): string;
		/** [Method] Retrieves Ext dom Element objects
		* @param element String/HTMLElement/Ext.Element The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element The Element object (or null if no matching element was found).
		*/
		static get( element?:any ): Ext.dom.IElement;
		/** [Method] Retrieves the document height
		* @returns Number documentHeight
		*/
		static getDocumentHeight(): number;
		/** [Method] Retrieves the document width
		* @returns Number documentWidth
		*/
		static getDocumentWidth(): number;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Retrieves the current orientation of the window
		* @returns String Orientation of window: 'portrait' or 'landscape'
		*/
		static getOrientation(): string;
		/** [Method] Retrieves the viewport size of the window
		* @returns Object object containing width and height properties
		*/
		static getViewSize(): any;
		/** [Method] Retrieves the viewport height of the window
		* @returns Number viewportHeight
		*/
		static getViewportHeight(): number;
		/** [Method] Retrieves the viewport width of the window
		* @returns Number viewportWidth
		*/
		static getViewportWidth(): number;
		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax
		* @param prop String The property to normalize
		* @returns String The normalized string
		*/
		static normalize( prop?:string ): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
		/** [Method] Parses a number or string representing margin sizes into an object
		* @param box Number/String The encoded margins
		* @returns Object An object with margin sizes for top, right, bottom and left containing the unit
		*/
		static parseBox( box?:any ): any;
		/** [Method] Converts a CSS string into an object with a property for each style
		* @param styles String A CSS string
		* @returns Object styles
		*/
		static parseStyles( styles?:string ): any;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @param root HTMLElement/String The root element of the query or id of the root
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		static select( selector?:any, composite?:boolean, root?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string
		* @param form Object The form
		* @returns String The url encoded form
		*/
		static serializeForm( form?:any ): string;
		/** [Method] Serializes a DOM element and its children recursively into a string
		* @param node Object DOM element to serialize.
		* @returns String
		*/
		static serializeNode( node?:any ): string;
		/** [Method] Parses a number or string representing margin sizes into an object
		* @param box Number/String The encoded margins
		* @param units String The type of units to add
		* @returns String An string with unitized (px if units is not specified) metrics for top, right, bottom and left
		*/
		static unitizeBox( box?:any, units?:string ): string;
	}
}
declare namespace Ext.dom {
	export interface IQuery extends Ext.IBase {
		/** [Method] Returns true if the passed element s match the passed simple selector e g
		* @param el String/HTMLElement/Array An element id, element or array of elements
		* @param selector String The simple selector to test
		* @returns Boolean
		*/
		is?( el?:any, selector?:string ): boolean;
		/** [Method] Selects a group of elements
		* @param selector String The selector/xpath query (can be a comma separated list of selectors)
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
		*/
		select?( selector?:string, root?:any ): HTMLElement[];
		/** [Method] Selects a single element
		* @param selector String The selector/xpath query
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement The DOM element which matched the selector.
		*/
		selectNode?( selector?:string, root?:any ): HTMLElement;
	}
}
declare namespace Ext {
	export interface IDomHelper {
		/** [Method] Creates new DOM element s and appends them to el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		append?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Applies a style specification to an element
		* @param el String/HTMLElement The element to apply styles to
		* @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification.
		*/
		applyStyles?( el?:any, styles?:any ): void;
		/** [Method] Creates a new Ext Template from the DOM object spec
		* @param o Object The DOM object spec (and children)
		* @returns Ext.Template The new template
		*/
		createTemplate?( o?:any ): Ext.ITemplate;
		/** [Method] Converts the styles from the given object to text
		* @param styles Object The object describing the styles.
		* @param buffer String[] The output buffer.
		* @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned.
		*/
		generateStyles?( styles?:any, buffer?:string[] ): any;
		/** [Method] Creates new DOM element s and inserts them after el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object The DOM object spec (and children)
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertAfter?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Creates new DOM element s and inserts them before el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertBefore?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Creates new DOM element s and inserts them as the first child of el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertFirst?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Inserts an HTML fragment into the DOM
		* @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;
		* @param el HTMLElement/TextNode The context element
		* @param html String The HTML fragment
		* @returns HTMLElement The new node
		*/
		insertHtml?( where?:string, el?:any, html?:string ): HTMLElement;
		/** [Method] Returns the markup for the passed Element s config
		* @param spec Object The DOM object spec (and children).
		* @returns String
		*/
		markup?( spec?:any ): string;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		overwrite?( el?:any, o?:any, returnElement?:boolean ): any;
	}
}
declare namespace Ext.dom {
	export interface IHelper {
		/** [Method] Creates new DOM element s and appends them to el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		append?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Applies a style specification to an element
		* @param el String/HTMLElement The element to apply styles to
		* @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification.
		*/
		applyStyles?( el?:any, styles?:any ): void;
		/** [Method] Creates a new Ext Template from the DOM object spec
		* @param o Object The DOM object spec (and children)
		* @returns Ext.Template The new template
		*/
		createTemplate?( o?:any ): Ext.ITemplate;
		/** [Method] Converts the styles from the given object to text
		* @param styles Object The object describing the styles.
		* @param buffer String[] The output buffer.
		* @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned.
		*/
		generateStyles?( styles?:any, buffer?:string[] ): any;
		/** [Method] Creates new DOM element s and inserts them after el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object The DOM object spec (and children)
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertAfter?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Creates new DOM element s and inserts them before el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertBefore?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Creates new DOM element s and inserts them as the first child of el
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		insertFirst?( el?:any, o?:any, returnElement?:boolean ): any;
		/** [Method] Inserts an HTML fragment into the DOM
		* @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;
		* @param el HTMLElement/TextNode The context element
		* @param html String The HTML fragment
		* @returns HTMLElement The new node
		*/
		insertHtml?( where?:string, el?:any, html?:string ): HTMLElement;
		/** [Method] Returns the markup for the passed Element s config
		* @param spec Object The DOM object spec (and children).
		* @returns String
		*/
		markup?( spec?:any ): string;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them
		* @param el String/HTMLElement/Ext.Element The context element
		* @param o Object/String The DOM object spec (and children) or raw HTML blob
		* @param returnElement Boolean true to return a Ext.Element
		* @returns HTMLElement/Ext.Element The new node
		*/
		overwrite?( el?:any, o?:any, returnElement?:boolean ): any;
	}
}
declare namespace Ext {
	export interface IDomQuery extends Ext.dom.IQuery {
	}
	export class DomQuery {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns true if the passed element s match the passed simple selector e g
		* @param el String/HTMLElement/Array An element id, element or array of elements
		* @param selector String The simple selector to test
		* @returns Boolean
		*/
		static is( el?:any, selector?:string ): boolean;
		/** [Method] Selects a group of elements
		* @param selector String The selector/xpath query (can be a comma separated list of selectors)
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
		*/
		static select( selector?:string, root?:any ): HTMLElement[];
		/** [Method] Selects a single element
		* @param selector String The selector/xpath query
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement The DOM element which matched the selector.
		*/
		static selectNode( selector?:string, root?:any ): HTMLElement;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.core {
	export interface IDomQuery extends Ext.dom.IQuery {
	}
	export class DomQuery {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns true if the passed element s match the passed simple selector e g
		* @param el String/HTMLElement/Array An element id, element or array of elements
		* @param selector String The simple selector to test
		* @returns Boolean
		*/
		static is( el?:any, selector?:string ): boolean;
		/** [Method] Selects a group of elements
		* @param selector String The selector/xpath query (can be a comma separated list of selectors)
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
		*/
		static select( selector?:string, root?:any ): HTMLElement[];
		/** [Method] Selects a single element
		* @param selector String The selector/xpath query
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement The DOM element which matched the selector.
		*/
		static selectNode( selector?:string, root?:any ): HTMLElement;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw {
	export interface IAnimator extends Ext.IBase {
	}
	export class Animator {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Adds an animated object to the animation pool
		* @param animation Object The animation descriptor to add to the pool.
		*/
		static add( animation?:any ): void;
		/** [Method] Register a recursive callback that will be called at every frame
		* @param callback Function
		* @param scope Object
		* @returns String
		*/
		static addFrameCallback( callback?:any, scope?:any ): string;
		/** [Method] Cross platform animationTime implementation
		* @returns Number
		*/
		static animationTime(): number;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Cancel a registered one time callback
		* @param id String
		*/
		static cancel( id?:string ): void;
		/** [Method] Returns true or false whether it contains the given animation or not
		* @param animation Object The animation to check for.
		* @returns Boolean
		*/
		static contains( animation?:any ): boolean;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns true or false whether the pool is empty or not
		* @returns Boolean
		*/
		static empty(): boolean;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Removes an animation from the pool
		* @param animation Object The animation to remove from the pool.
		*/
		static remove( animation?:any ): void;
		/** [Method] Unregister a recursive callback
		* @param id String
		*/
		static removeFrameCallback( id?:string ): void;
		/** [Method] Register an one time callback that will be called at the next frame
		* @param callback Function
		* @param scope Object
		* @returns String
		*/
		static schedule( callback?:any, scope?:any ): string;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Given a frame time it will filter out finished animations from the pool
		* @param frameTime Number The frame's start time, in milliseconds.
		*/
		static step( frameTime?:number ): void;
	}
}
declare namespace Ext.draw {
	export interface IColor extends Ext.IBase {
		/** [Config Option] (Number) */
		lightnessFactor?: number;
		/** [Method] Return a new color that is darker than this color
		* @param factor Number Darker factor (0..1).
		* @returns Ext.draw.Color
		*/
		createDarker?( factor?:number ): Ext.draw.IColor;
		/** [Method] Return a new color that is lighter than this color
		* @param factor Number Lighter factor (0..1).
		* @returns Ext.draw.Color
		*/
		createLighter?( factor?:number ): Ext.draw.IColor;
		/** [Method] Returns the gray value 0 to 255 of the color
		* @returns Number
		*/
		getGrayscale?(): number;
		/** [Method] Get the equivalent HSL components of the color
		* @param target Array Optional array to receive the values.
		* @returns Array
		*/
		getHSL?( target?:any[] ): any[];
		/** [Method] Parse the string and set current color
		* @param str String Color in string.
		* @returns Object this
		*/
		setFromString?( str?:string ): any;
		/** [Method] Set current color based on the specified HSL values
		* @param h Number Hue component (0..359)
		* @param s Number Saturation component (0..1)
		* @param l Number Lightness component (0..1)
		* @returns Object this
		*/
		setHSL?( h?:number, s?:number, l?:number ): any;
		/** [Method] Convert a color to hexadecimal format
		* @param color String/Array The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff'). Can also be an Array, in this case the function handles the first member.
		* @returns String The color in hexadecimal format.
		*/
		toHex?( color?:any ): string;
		/** [Method] Return the color in the hex format i e
		* @returns String
		*/
		toString?(): string;
	}
	export class Color {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Convenience method for creating a color
		* @param red Ext.draw.Color/String/Number[]/Number Red component (0..255), CSS color string or array of all components.
		* @param green Number Green component (0..255)
		* @param blue Number Blue component (0..255)
		* @param alpha Number Alpha component (0..1)
		* @returns Ext.draw.Color
		*/
		static create( red?:any, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Returns a flyweight instance of Ext draw Color
		* @param red Number/String Red component (0..255) or CSS color string.
		* @param green Number Green component (0..255)
		* @param blue Number Blue component (0..255)
		* @param alpha Number Alpha component (0..1)
		* @returns Ext.draw.Color
		*/
		static fly( red?:any, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		/** [Method] Create a new color based on the specified HSL values
		* @param h Number Hue component (0..359)
		* @param s Number Saturation component (0..1)
		* @param l Number Lightness component (0..1)
		* @returns Ext.draw.Color
		*/
		static fromHSL( h?:number, s?:number, l?:number ): Ext.draw.IColor;
		/** [Method] Parse the string and create a new color
		* @param string String Color in string.
		* @returns Ext.draw.Color
		*/
		static fromString( string?:string ): Ext.draw.IColor;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.draw {
	export interface IComponent extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		autoSize?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		fitSurface?: boolean;
		/** [Config Option] (Object[]) */
		gradients?: any[];
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Boolean) */
		viewBox?: boolean;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of autoSize
		* @returns Boolean
		*/
		getAutoSize?(): boolean;
		/** [Method] Returns the value of background
		* @returns Object
		*/
		getBackground?(): any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of fitSurface
		* @returns Boolean
		*/
		getFitSurface?(): boolean;
		/** [Method] Returns the value of gradients
		* @returns Object[]
		*/
		getGradients?(): any[];
		/** [Method] Returns the value of resizeHandler
		* @returns Function
		*/
		getResizeHandler?(): any;
		/** [Method] Returns the value of sprites
		* @returns Object
		*/
		getSprites?(): any;
		/** [Method] Get a surface by the given id or create one if it doesn t exist
		* @param id String
		* @returns Ext.draw.Surface
		*/
		getSurface?( id?:string ): Ext.draw.ISurface;
		/** [Method] Returns the value of viewBox
		* @returns Boolean
		*/
		getViewBox?(): boolean;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Render all the surfaces in the component  */
		renderFrame?(): void;
		/** [Method] Sets the value of autoSize
		* @param autoSize Boolean The new value.
		*/
		setAutoSize?( autoSize?:boolean ): void;
		/** [Method] Sets the value of background
		* @param background Object The new value.
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of fitSurface
		* @param fitSurface Boolean The new value.
		*/
		setFitSurface?( fitSurface?:boolean ): void;
		/** [Method] Sets the value of gradients
		* @param gradients Object[] The new value.
		*/
		setGradients?( gradients?:any[] ): void;
		/** [Method] Sets the value of resizeHandler
		* @param resizeHandler Function The new value.
		*/
		setResizeHandler?( resizeHandler?:any ): void;
		/** [Method] Sets the value of sprites
		* @param sprites Object The new value.
		*/
		setSprites?( sprites?:any ): void;
		/** [Method] Sets the value of viewBox
		* @param viewBox Boolean The new value.
		*/
		setViewBox?( viewBox?:boolean ): void;
	}
}
declare namespace Ext.draw {
	export interface IDraw extends Ext.IBase {
	}
	export class Draw {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Converting radians to degrees
		* @param radian Number
		* @returns Number
		*/
		static degrees( radian?:number ): number;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method]
		* @param bbox1 Object
		* @param bbox2 Object
		* @param padding Number
		* @returns Boolean
		*/
		static isBBoxIntersect( bbox1?:any, bbox2?:any, padding?:number ): boolean;
		/** [Method] Converting degrees to radians
		* @param degrees Number
		* @returns Number
		*/
		static rad( degrees?:number ): number;
		/** [Method] Function that returns its first element
		* @param a Mixed
		* @returns Mixed
		*/
		static reflectFn( a?:any ): any;
		/** [Method] Given coordinates of the points calculates coordinates of a Bezier curve that goes through them
		* @param dataX Object x-coordinates of the points.
		* @param dataY Object y-coordinates of the points.
		* @param value Object A value to control the smoothness of the curve.
		* @returns Object Object holding two arrays, for x and y coordinates of the curve.
		*/
		static smooth( dataX?:any, dataY?:any, value?:any ): any;
		/** [Method] Natural cubic spline interpolation
		* @param points Array Array of numbers.
		*/
		static spline( points?:any[] ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw.engine {
	export interface ICanvas extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;
		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection  */
		destroy?(): void;
		/** [Method] Returns the value of highPrecision
		* @returns Boolean
		*/
		getHighPrecision?(): boolean;
		/** [Method] Initialize the canvas element  */
		initElement?(): void;
		/** [Method] Sets the value of highPrecision
		* @param highPrecision Boolean The new value.
		*/
		setHighPrecision?( highPrecision?:boolean ): void;
	}
}
declare namespace Ext.draw.engine {
	export interface ISvg extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;
		/** [Method] Creates a DOM element under the SVG namespace of the given type
		* @param type String The type of the SVG DOM element.
		* @returns * The created element.
		*/
		createSvgNode?( type?:string ): any;
		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection
		* @param path Object
		* @param matrix Object
		* @param band Object
		*/
		destroy?( path?:any, matrix?:any, band?:any ): void;
		/** [Method] Returns the value of highPrecision
		* @returns Boolean
		*/
		getHighPrecision?(): boolean;
		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process
		* @param sprite Object
		* @param destroySprite Object
		*/
		remove?( sprite?:any, destroySprite?:any ): void;
		/** [Method] Renders a single sprite into the surface
		* @param sprite Ext.draw.sprite.Sprite The Sprite to be rendered.
		* @returns Boolean returns false to stop the rendering to continue.
		*/
		renderSprite?( sprite?:Ext.draw.sprite.ISprite ): boolean;
		/** [Method] Sets the value of highPrecision
		* @param highPrecision Boolean The new value.
		*/
		setHighPrecision?( highPrecision?:boolean ): void;
	}
}
declare namespace Ext.draw.engine.svgcontext {
	export interface IGradient extends Ext.IBase {
		/** [Method] Adds a color stop with the given color to the gradient at the given offset
		* @param offset Number
		* @param color String
		*/
		addColorStop?( offset?:number, color?:string ): void;
	}
}
declare namespace Ext.draw.engine {
	export interface ISvgContext extends Ext.IBase {
		/** [Method] Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments
		* @param x Number
		* @param y Number
		* @param radius Number
		* @param startAngle Number
		* @param endAngle Number
		* @param anticlockwise Number
		*/
		arc?( x?:number, y?:number, radius?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;
		/** [Method] Arc command using svg parameters
		* @param r1 Number
		* @param r2 Number
		* @param rotation Number
		* @param large Number
		* @param swipe Number
		* @param x2 Number
		* @param y2 Number
		*/
		arcSvg?( r1?:number, r2?:number, rotation?:number, large?:number, swipe?:number, x2?:number, y2?:number ): void;
		/** [Method] Adds an arc with the given control points and radius to the current subpath connected to the previous point by a str
		* @param x1 Number
		* @param y1 Number
		* @param x2 Number
		* @param y2 Number
		* @param radiusX Number
		* @param radiusY Number
		* @param rotation Number
		*/
		arcTo?( x1?:number, y1?:number, x2?:number, y2?:number, radiusX?:number, radiusY?:number, rotation?:number ): void;
		/** [Method] Resets the current default path  */
		beginPath?(): void;
		/** [Method] Adds the given point to the current subpath connected to the previous one by a cubic B zier curve with the given con
		* @param x1 Number
		* @param y1 Number
		* @param x2 Number
		* @param y2 Number
		* @param x3 Number
		* @param y3 Number
		*/
		bezierCurveTo?( x1?:number, y1?:number, x2?:number, y2?:number, x3?:number, y3?:number ): void;
		/** [Method] Clears the context  */
		clear?(): void;
		/** [Method] Marks the current subpath as closed and starts a new subpath with a point the same as the start and end of the newly  */
		closePath?(): void;
		/** [Method] Returns an object that represents a linear gradient that paints along the line given by the coordinates represented b
		* @param x0 Number
		* @param y0 Number
		* @param x1 Number
		* @param y1 Number
		* @returns Ext.draw.engine.SvgContext.Gradient
		*/
		createLinearGradient?( x0?:number, y0?:number, x1?:number, y1?:number ): Ext.draw.engine.svgcontext.IGradient;
		/** [Method] Returns a CanvasGradient object that represents a radial gradient that paints along the cone given by the circles rep
		* @param x0 Number
		* @param y0 Number
		* @param r0 Number
		* @param x1 Number
		* @param y1 Number
		* @param r1 Number
		* @returns Ext.draw.engine.SvgContext.Gradient
		*/
		createRadialGradient?( x0?:number, y0?:number, r0?:number, x1?:number, y1?:number, r1?:number ): Ext.draw.engine.svgcontext.IGradient;
		/** [Method] Draws the given image onto the canvas
		* @param image HTMLElement
		* @param sx Number
		* @param sy Number
		* @param sw Number
		* @param sh Number
		* @param dx Number
		* @param dy Number
		* @param dw Number
		* @param dh Number
		*/
		drawImage?( image?:HTMLElement, sx?:number, sy?:number, sw?:number, sh?:number, dx?:number, dy?:number, dw?:number, dh?:number ): void;
		/** [Method] Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments
		* @param x Number
		* @param y Number
		* @param radiusX Number
		* @param radiusY Number
		* @param rotation Number
		* @param startAngle Number
		* @param endAngle Number
		* @param anticlockwise Number
		*/
		ellipse?( x?:number, y?:number, radiusX?:number, radiusY?:number, rotation?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;
		/** [Method] Fills the subpaths of the current default path or the given path with the current fill style  */
		fill?(): void;
		/** [Method] Paints the given rectangle onto the canvas using the current fill style
		* @param x Number
		* @param y Number
		* @param width Number
		* @param height Number
		*/
		fillRect?( x?:number, y?:number, width?:number, height?:number ): void;
		/** [Method] Note After the method guarantees the transform matrix will be inverted
		* @param attr Object The attribute object
		* @param transformFillStroke Boolean Indicate whether to transform fill and stroke. If this is not given, then uses attr.transformFillStroke instead.
		*/
		fillStroke?( attr?:any, transformFillStroke?:boolean ): void;
		/** [Method] Fills the given text at the given position
		* @param text String
		* @param x Number
		* @param y Number
		*/
		fillText?( text?:string, x?:number, y?:number ): void;
		/** [Method] Adds the given point to the current subpath connected to the previous one by a straight line
		* @param x Number
		* @param y Number
		*/
		lineTo?( x?:number, y?:number ): void;
		/** [Method] Creates a new subpath with the given point
		* @param x Number
		* @param y Number
		*/
		moveTo?( x?:number, y?:number ): void;
		/** [Method] Adds a new closed subpath to the path representing the given rectangle
		* @param x Number
		* @param y Number
		* @param width Number
		* @param height Number
		*/
		rect?( x?:number, y?:number, width?:number, height?:number ): void;
		/** [Method] Pops the state stack and restores the state  */
		restore?(): void;
		/** [Method] Pushes the context state to the state stack  */
		save?(): void;
		/** [Method] Changes the transformation matrix to the matrix given by the arguments as described below
		* @param xx Number
		* @param yx Number
		* @param xy Number
		* @param yy Number
		* @param dx Number
		* @param dy Number
		*/
		setTransform?( xx?:number, yx?:number, xy?:number, yy?:number, dx?:number, dy?:number ): void;
		/** [Method] Strokes the subpaths of the current default path or the given path with the current stroke style  */
		stroke?(): void;
		/** [Method] Paints the box that outlines the given rectangle onto the canvas using the current stroke style
		* @param x Number
		* @param y Number
		* @param width Number
		* @param height Number
		*/
		strokeRect?( x?:number, y?:number, width?:number, height?:number ): void;
		/** [Method] Strokes the given text at the given position
		* @param text String
		* @param x Number
		* @param y Number
		*/
		strokeText?( text?:string, x?:number, y?:number ): void;
		/** [Method] Changes the transformation matrix to apply the matrix given by the arguments as described below
		* @param xx Number
		* @param yx Number
		* @param xy Number
		* @param yy Number
		* @param dx Number
		* @param dy Number
		*/
		transform?( xx?:number, yx?:number, xy?:number, yy?:number, dx?:number, dy?:number ): void;
	}
}
declare namespace Ext.draw.gradient {
	export interface IGradient extends Ext.IBase,Ext.mixin.IIdentifiable {
		/** [Config Option] (Array/Object) */
		Defines?: any;
		/** [Method] Generates the gradient for the given context
		* @param ctx Ext.draw.engine.SvgContext The context.
		* @param bbox Object
		* @returns Object
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		getId?(): string;
	}
}
declare namespace Ext.draw.gradient {
	export interface ILinear extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Number) */
		The?: number;
		/** [Method] Generates the gradient for the given context
		* @param ctx Ext.draw.engine.SvgContext The context.
		* @param bbox Object
		* @returns Object
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;
	}
}
declare namespace Ext.draw.gradient {
	export interface IRadial extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Object) */
		end?: any;
		/** [Config Option] (Object) */
		start?: any;
		/** [Method] Generates the gradient for the given context
		* @param ctx Ext.draw.engine.SvgContext The context.
		* @param bbox Object
		* @returns Object
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;
		/** [Method] Returns the value of end
		* @returns Object
		*/
		getEnd?(): any;
		/** [Method] Returns the value of start
		* @returns Object
		*/
		getStart?(): any;
		/** [Method] Sets the value of end
		* @param end Object The new value.
		*/
		setEnd?( end?:any ): void;
		/** [Method] Sets the value of start
		* @param start Object The new value.
		*/
		setStart?( start?:any ): void;
	}
}
declare namespace Ext.draw {
	export interface IGroup extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Add sprite to group
		* @param sprite Ext.draw.sprite.Sprite
		*/
		add?( sprite?:Ext.draw.sprite.ISprite ): void;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Add a list of sprites to group
		* @param sprites Array|Ext.draw.sprite.Sprite
		*/
		addAll?( sprites?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Clear the group
		* @param destroySprite Boolean
		*/
		clear?( destroySprite?:boolean ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Destroy the group and remove it from surface  */
		destroy?(): void;
		/** [Method] Iterate all sprites with specific function
		* @param fn Function Function to iterate.
		*/
		each?( fn?:any ): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Get the sprite with id or index
		* @param id String|Number
		* @returns Ext.draw.sprite.Sprite
		*/
		get?( id?:any ): Ext.draw.sprite.ISprite;
		/** [Method] Get the i th sprite of the group
		* @param index Number
		* @returns Ext.draw.sprite.Sprite
		*/
		getAt?( index?:number ): Ext.draw.sprite.ISprite;
		/** [Method] Return the minimal bounding box that contains all the sprites bounding boxes in this group
		* @param isWithTransform Object
		*/
		getBBox?( isWithTransform?:any ): void;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of surface
		* @returns Object
		*/
		getSurface?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Hide all sprites in the group
		* @param o Boolean Whether to re-render the frame.
		*/
		hide?( o?:boolean ): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remote sprite from group
		* @param sprite Ext.draw.sprite.Sprite
		* @param destroySprite Boolean
		*/
		remove?( sprite?:Ext.draw.sprite.ISprite, destroySprite?:boolean ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Set attributes to all sprites in the group
		* @param o Object Sprite attribute options just like in Ext.draw.sprite.Sprite.
		*/
		setAttributes?( o?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Set dirty flag for all sprites in the group */
		setDirty?(): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of surface
		* @param surface Object The new value.
		*/
		setSurface?( surface?:any ): void;
		/** [Method] Display all sprites in the group
		* @param o Boolean Whether to re-render the frame.
		*/
		show?( o?:boolean ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.draw {
	export interface ILimitedCache extends Ext.IBase {
		/** [Config Option] (Function) */
		feeder?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Method] Clear all the objects  */
		clear?(): void;
		/** [Method] Get a cached object
		* @param id String
		* @param args Mixed... Arguments appended to feeder.
		* @returns Object
		*/
		get?( id:string, ...args:any[] ): any;
		/** [Method] Returns the value of feeder
		* @returns Function
		*/
		getFeeder?(): any;
		/** [Method] Returns the value of limit
		* @returns Number
		*/
		getLimit?(): number;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Sets the value of feeder
		* @param feeder Function The new value.
		* @returns Number
		*/
		setFeeder?( feeder?:any ): number;
		/** [Method] Sets the value of limit
		* @param limit Number The new value.
		*/
		setLimit?( limit?:number ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
	}
}
declare namespace Ext.draw {
	export interface IMatrix extends Ext.IBase {
		/** [Property] (Number) */
		a?: number;
		/** [Method] Postpend a matrix onto the current
		* @param xx Number Coefficient from x to x.
		* @param xy Number Coefficient from x to y.
		* @param yx Number Coefficient from y to x.
		* @param yy Number Coefficient from y to y.
		* @param dx Number Offset of x.
		* @param dy Number Offset of y.
		* @returns Ext.draw.Matrix this
		*/
		append?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;
		/** [Method] Postpend a matrix onto the current
		* @param matrix Ext.draw.Matrix
		* @returns Ext.draw.Matrix this
		*/
		appendMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Clone this matrix
		* @returns Ext.draw.Matrix
		*/
		clone?(): Ext.draw.IMatrix;
		/** [Method] Determines if this matrix has the same values as another matrix
		* @param matrix Ext.draw.Matrix
		* @returns Boolean
		*/
		equals?( matrix?:Ext.draw.IMatrix ): boolean;
		/** [Method] Horizontally flip the matrix
		* @returns Ext.draw.Matrix this
		*/
		flipX?(): Ext.draw.IMatrix;
		/** [Method] Vertically flip the matrix
		* @returns Ext.draw.Matrix this
		*/
		flipY?(): Ext.draw.IMatrix;
		/** [Method] Get offset x component of the matrix
		* @returns Number
		*/
		getDX?(): number;
		/** [Method] Get offset y component of the matrix
		* @returns Number
		*/
		getDY?(): number;
		/** [Method] Get the x scale of the matrix
		* @returns Number
		*/
		getScaleX?(): number;
		/** [Method] Get the y scale of the matrix
		* @returns Number
		*/
		getScaleY?(): number;
		/** [Method] Get x to x component of the matrix
		* @returns Number
		*/
		getXX?(): number;
		/** [Method] Get x to y component of the matrix
		* @returns Number
		*/
		getXY?(): number;
		/** [Method] Get y to x component of the matrix
		* @returns Number
		*/
		getYX?(): number;
		/** [Method] Get y to y component of the matrix
		* @returns Number
		*/
		getYY?(): number;
		/** [Method] Return a new matrix represents the opposite transformation of the current one
		* @param target Ext.draw.Matrix A target matrix. If present, it will receive the result of inversion to avoid creating a new object.
		* @returns Ext.draw.Matrix
		*/
		inverse?( target?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Determines whether this matrix is an identity matrix no transform
		* @returns Boolean
		*/
		isIdentity?(): boolean;
		/** [Method] Postpend a matrix onto the current
		* @param matrix Ext.draw.Matrix
		* @returns Ext.draw.Matrix this
		*/
		multiply?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Prepend a matrix onto the current
		* @param xx Number Coefficient from x to x.
		* @param xy Number Coefficient from x to y.
		* @param yx Number Coefficient from y to x.
		* @param yy Number Coefficient from y to y.
		* @param dx Number Offset of x.
		* @param dy Number Offset of y.
		* @returns Ext.draw.Matrix this
		*/
		prepend?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;
		/** [Method] Prepend a matrix onto the current
		* @param matrix Ext.draw.Matrix
		* @returns Ext.draw.Matrix this
		*/
		prependMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Reset the matrix to identical
		* @returns Ext.draw.Matrix this
		*/
		reset?(): Ext.draw.IMatrix;
		/** [Method] Rotate the matrix
		* @param angle Number Radians to rotate
		* @param rcx Number|null Center of rotation.
		* @param rcy Number|null Center of rotation.
		* @param prepend Boolean If true, this will transformation be prepended to the matrix.
		* @returns Ext.draw.Matrix this
		*/
		rotate?( angle?:number, rcx?:any, rcy?:any, prepend?:boolean ): Ext.draw.IMatrix;
		/** [Method] Rotate the matrix by the angle of a vector
		* @param x Number
		* @param y Number
		* @param prepend Boolean If true, this will transformation be prepended to the matrix.
		* @returns Ext.draw.Matrix this
		*/
		rotateFromVector?( x?:number, y?:number, prepend?:boolean ): Ext.draw.IMatrix;
		/** [Method] Scale the matrix
		* @param sx Number
		* @param sy Number
		* @param scx Number
		* @param scy Number
		* @param prepend Boolean If true, this will transformation be prepended to the matrix.
		* @returns Ext.draw.Matrix this
		*/
		scale?( sx?:number, sy?:number, scx?:number, scy?:number, prepend?:boolean ): Ext.draw.IMatrix;
		/** [Method] Set the elements of a Matrix
		* @param xx Number
		* @param xy Number
		* @param yx Number
		* @param yy Number
		* @param dx Number
		* @param dy Number
		* @returns Ext.draw.Matrix this
		*/
		set?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;
		/** [Method] Skew the matrix
		* @param angle Number
		* @returns Ext.draw.Matrix this
		*/
		skewX?( angle?:number ): Ext.draw.IMatrix;
		/** [Method] Skew the matrix
		* @param angle Number
		* @returns Ext.draw.Matrix this
		*/
		skewY?( angle?:number ): Ext.draw.IMatrix;
		/** [Method] Split matrix into Translate Scale Shear and Rotate
		* @returns Object
		*/
		split?(): any;
		/** [Method] Create an array of elements by horizontal order xx yx dx yx yy dy
		* @returns Array
		*/
		toArray?(): any[];
		/** [Method] Apply the matrix to a drawing context
		* @param ctx Object
		* @returns Ext.draw.Matrix this
		*/
		toContext?( ctx?:any ): Ext.draw.IMatrix;
		/** [Method] Get an array of elements
		* @returns Array
		*/
		toString?(): any[];
		/** [Method] Return a string that can be used as transform attribute in SVG
		* @returns String
		*/
		toSvg?(): string;
		/** [Method] Create an array of elements by vertical order xx xy yx yy dx dy
		* @returns Array|String
		*/
		toVerticalArray?(): any;
		/** [Method]
		* @param bbox Object Given as {x: Number, y: Number, width: Number, height: Number}.
		* @param radius Number
		* @param target Object Optional target object to recieve the result. Recommended to use it for better gc.
		* @returns Object Object with x, y, width and height.
		*/
		transformBBox?( bbox?:any, radius?:number, target?:any ): any;
		/** [Method] Transform a list for points
		* @param list Array
		* @returns Array list
		*/
		transformList?( list?:any[] ): any[];
		/** [Method] Transform a point to a new array
		* @param point Array
		* @returns Array
		*/
		transformPoint?( point?:any[] ): any[];
		/** [Method] Translate the matrix
		* @param x Number
		* @param y Number
		* @param prepend Boolean If true, this will transformation be prepended to the matrix.
		* @returns Ext.draw.Matrix this
		*/
		translate?( x?:number, y?:number, prepend?:boolean ): Ext.draw.IMatrix;
		/** [Method] Transform point returning the x component of the result
		* @param x Number
		* @param y Number
		* @returns Number x component of the result.
		*/
		x?( x?:number, y?:number ): number;
		/** [Method] Transform point returning the y component of the result
		* @param x Number
		* @param y Number
		* @returns Number y component of the result.
		*/
		y?( x?:number, y?:number ): number;
	}
	export class Matrix {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a matrix from mat
		* @param mat Mixed
		* @returns Ext.draw.Matrix
		*/
		static create( mat?:any ): Ext.draw.IMatrix;
		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p
		* @param x0 Number
		* @param y0 Number
		* @param x1 Number
		* @param y1 Number
		* @param x0p Number
		* @param y0p Number
		* @param x1p Number
		* @param y1p Number
		*/
		static createAffineMatrixFromTwoPair( x0?:number, y0?:number, x1?:number, y1?:number, x0p?:number, y0p?:number, x1p?:number, y1p?:number ): void;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p
		* @param x0 Number
		* @param y0 Number
		* @param x1 Number
		* @param y1 Number
		* @param x0p Number
		* @param y0p Number
		* @param x1p Number
		* @param y1p Number
		*/
		static createPanZoomFromTwoPair( x0?:number, y0?:number, x1?:number, y1?:number, x0p?:number, y0p?:number, x1p?:number, y1p?:number ): void;
		/** [Method] Create a flyweight to wrap the given array
		* @param elements Array
		* @returns Ext.draw.Matrix
		*/
		static fly( elements?:any[] ): Ext.draw.IMatrix;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.draw.modifier {
	export interface IAnimation extends Ext.draw.modifier.IModifier,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		customDuration?: any;
		/** [Config Option] (Object) */
		customEasings?: any;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Function) */
		easing?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Remove special easings on the given attributes
		* @param attrs Object The source attributes.
		*/
		clearDurationOn?( attrs?:any ): void;
		/** [Method] Remove special easings on the given attributes
		* @param attrs String/Array The source attribute(s).
		*/
		clearEasingOn?( attrs?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of customDuration
		* @returns Object
		*/
		getCustomDuration?(): any;
		/** [Method] Returns the value of customEasings
		* @returns Object
		*/
		getCustomEasings?(): any;
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of easing
		* @returns Function
		*/
		getEasing?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Invoked when changes need to be popped up to the top
		* @param attributes Object The source attributes.
		* @param changes Object The changes to be popped up.
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used.
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to be pushed down to the sprite
		* @param attr Object The source attributes.
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method.
		* @returns Mixed
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of customDuration
		* @param customDuration Object The new value.
		*/
		setCustomDuration?( customDuration?:any ): void;
		/** [Method] Sets the value of customEasings
		* @param customEasings Object The new value.
		*/
		setCustomEasings?( customEasings?:any ): void;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Set special duration on the given attributes
		* @param attrs String/Array The source attributes.
		* @param duration Number The special duration.
		*/
		setDurationOn?( attrs?:any, duration?:number ): void;
		/** [Method] Sets the value of easing
		* @param easing Function The new value.
		*/
		setEasing?( easing?:any ): void;
		/** [Method] Set special easings on the given attributes
		* @param attrs String/Array The source attribute(s).
		* @param easing String The special easings.
		*/
		setEasingOn?( attrs?:any, easing?:string ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Stop all animations effected by this modifier */
		stop?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.draw.modifier {
	export interface IHighlight extends Ext.draw.modifier.IModifier {
		/** [Config Option] (Boolean) */
		enabled?: boolean;
		/** [Config Option] (Object) */
		highlightStyle?: any;
		/** [Method] Filter modifier changes if overriding source attributes
		* @param attr Object The source attributes.
		* @param changes Object The modifier changes.
		* @returns * The filtered changes.
		*/
		filterChanges?( attr?:any, changes?:any ): any;
		/** [Method] Returns the value of enabled
		* @returns Boolean
		*/
		getEnabled?(): boolean;
		/** [Method] Returns the value of highlightStyle
		* @returns Object
		*/
		getHighlightStyle?(): any;
		/** [Method] Invoked when changes need to be popped up to the top
		* @param attributes Object The source attributes.
		* @param changes Object The changes to be popped up.
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used.
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to be pushed down to the sprite
		* @param attr Object The source attributes.
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method.
		* @returns Mixed
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Sets the value of enabled
		* @param enabled Boolean The new value.
		*/
		setEnabled?( enabled?:boolean ): void;
		/** [Method] Sets the value of highlightStyle
		* @param highlightStyle Object The new value.
		*/
		setHighlightStyle?( highlightStyle?:any ): void;
	}
}
declare namespace Ext.draw.modifier {
	export interface IModifier extends Ext.IBase {
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		next?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		previous?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.sprite.Sprite) */
		sprite?: Ext.draw.sprite.ISprite;
		/** [Method] Returns the value of next
		* @returns Ext.draw.modifier.Modifier
		*/
		getNext?(): Ext.draw.modifier.IModifier;
		/** [Method] Returns the value of previous
		* @returns Ext.draw.modifier.Modifier
		*/
		getPrevious?(): Ext.draw.modifier.IModifier;
		/** [Method] Returns the value of sprite
		* @returns Ext.draw.sprite.Sprite
		*/
		getSprite?(): Ext.draw.sprite.ISprite;
		/** [Method] Invoked when changes need to be popped up to the top
		* @param attributes Object The source attributes.
		* @param changes Object The changes to be popped up.
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used.
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to be pushed down to the sprite
		* @param attr Object The source attributes.
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method.
		* @returns Mixed
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Sets the value of next
		* @param next Ext.draw.modifier.Modifier The new value.
		*/
		setNext?( next?:Ext.draw.modifier.IModifier ): void;
		/** [Method] Sets the value of previous
		* @param previous Ext.draw.modifier.Modifier The new value.
		*/
		setPrevious?( previous?:Ext.draw.modifier.IModifier ): void;
		/** [Method] Sets the value of sprite
		* @param sprite Ext.draw.sprite.Sprite The new value.
		*/
		setSprite?( sprite?:Ext.draw.sprite.ISprite ): void;
	}
}
declare namespace Ext.draw.modifier {
	export interface ITarget extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top
		* @param attributes Object The source attributes.
		* @param changes Object The changes to be popped up.
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used.
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to be pushed down to the sprite
		* @param attr Object The source attributes.
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method.
		* @returns Mixed
		*/
		pushDown?( attr?:any, changes?:any ): any;
	}
}
declare namespace Ext.draw {
	export interface IPath extends Ext.IBase {
		/** [Method] Create an circular arc
		* @param x Number
		* @param y Number
		* @param radius Number
		* @param startAngle Number
		* @param endAngle Number
		* @param anticlockwise Number
		*/
		arc?( x?:number, y?:number, radius?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;
		/** [Method] http  www w3 org TR SVG implnote html ArcImplementationNotes
		* @param rx Number
		* @param ry Number
		* @param rotation Number Differ from svg spec, this is radian.
		* @param fA Number
		* @param fS Number
		* @param x2 Number
		* @param y2 Number
		*/
		arcSvg?( rx?:number, ry?:number, rotation?:number, fA?:number, fS?:number, x2?:number, y2?:number ): void;
		/** [Method] Create a elliptic arc curve compatible with SVG s arc to instruction
		* @param x1 Number
		* @param y1 Number
		* @param x2 Number
		* @param y2 Number
		* @param rx Number
		* @param ry Number
		* @param rotation Number
		*/
		arcTo?( x1?:number, y1?:number, x2?:number, y2?:number, rx?:number, ry?:number, rotation?:number ): void;
		/** [Method] A cubic bezier curve to a position
		* @param cx1 Number
		* @param cy1 Number
		* @param cx2 Number
		* @param cy2 Number
		* @param x Number
		* @param y Number
		*/
		bezierCurveTo?( cx1?:number, cy1?:number, cx2?:number, cy2?:number, x?:number, y?:number ): void;
		/** [Method] Clear the path  */
		clear?(): void;
		/** [Method] Clone this path
		* @returns Ext.draw.Path
		*/
		clone?(): Ext.draw.IPath;
		/** [Method] Close this path with a straight line  */
		closePath?(): void;
		/** [Method] Create an elliptic arc
		* @param cx Number
		* @param cy Number
		* @param radiusX Number
		* @param radiusY Number
		* @param rotation Number
		* @param startAngle Number
		* @param endAngle Number
		* @param anticlockwise Number
		*/
		ellipse?( cx?:number, cy?:number, radiusX?:number, radiusY?:number, rotation?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;
		/** [Method] Reconstruct path from cubic bezier curve stripes
		* @param stripes Array
		*/
		fromStripes?( stripes?:any[] ): void;
		/** [Method] Feed the path from svg path string
		* @param pathString String
		*/
		fromSvgString?( pathString?:string ): void;
		/** [Method] Get the bounding box of this matrix
		* @param target Object Optional object to receive the result.
		* @returns Object Object with x, y, width and height
		*/
		getDimension?( target?:any ): any;
		/** [Method] Get the bounding box as if the path is transformed by a matrix
		* @param matrix Ext.draw.Matrix
		* @param target Object Optional object to receive the result.
		* @returns Object An object with x, y, width and height.
		*/
		getDimensionWithTransform?( matrix?:Ext.draw.IMatrix, target?:any ): any;
		/** [Method] Test whether the given point is on or inside the path
		* @param x Number
		* @param y Number
		* @returns Boolean
		*/
		isPointInPath?( x?:number, y?:number ): boolean;
		/** [Method] A straight line to a position
		* @param x Number
		* @param y Number
		*/
		lineTo?( x?:number, y?:number ): void;
		/** [Method] Move to a position
		* @param x Number
		* @param y Number
		*/
		moveTo?( x?:number, y?:number ): void;
		/** [Method] A quadratic bezier curve to a position
		* @param cx Number
		* @param cy Number
		* @param x Number
		* @param y Number
		*/
		quadraticCurveTo?( cx?:number, cy?:number, x?:number, y?:number ): void;
		/** [Method] Draw a rectangle and close it
		* @param x Number
		* @param y Number
		* @param width Number
		* @param height Number
		*/
		rect?( x?:number, y?:number, width?:number, height?:number ): void;
		/** [Method] Return an svg path string for this path
		* @returns String
		*/
		toString?(): string;
		/** [Method] Convert path to bezier curve stripes
		* @param target Array The optional array to receive the result.
		* @returns Array
		*/
		toStripes?( target?:any[] ): any[];
		/** [Method] Transform the current path by a matrix
		* @param matrix Ext.draw.Matrix
		*/
		transform?( matrix?:Ext.draw.IMatrix ): void;
	}
}
declare namespace Ext.draw {
	export interface ISegmentTree extends Ext.IBase {
		/** [Method] Returns the minimum range of data that fits the given range and step size
		* @param min Number
		* @param max Number
		* @param estStep Number
		* @returns Object The aggregation information.
		*/
		getAggregation?( min?:number, max?:number, estStep?:number ): any;
		/** [Method] Returns the value of strategy
		* @returns String
		*/
		getStrategy?(): string;
		/** [Method] Sets the data of the segment tree
		* @param dataX Number
		* @param dataOpen Number
		* @param dataHigh Number
		* @param dataLow Number
		* @param dataClose Number
		*/
		setData?( dataX?:number, dataOpen?:number, dataHigh?:number, dataLow?:number, dataClose?:number ): void;
		/** [Method] Sets the value of strategy
		* @param strategy String The new value.
		*/
		setStrategy?( strategy?:string ): void;
	}
}
declare namespace Ext.draw {
	export interface ISolver extends Ext.IBase {
	}
	export class Solver {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Returns the function f x a  x3  b  x2  c  x  d and solver for f x y
		* @param a Number
		* @param b Number
		* @param c Number
		* @param d Number
		*/
		static cubicFunction( a?:number, b?:number, c?:number, d?:number ): void;
		/** [Method] Cubic root of number
		* @param number Number
		*/
		static cubicRoot( number?:number ): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns the function f x a  x  b and solver for f x y
		* @param a Number
		* @param b Number
		*/
		static linearFunction( a?:number, b?:number ): void;
		/** [Method] Returns the function f x a  x  2  b  x  c and solver for f x y
		* @param a Number
		* @param b Number
		* @param c Number
		*/
		static quadraticFunction( a?:number, b?:number, c?:number ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw.sprite {
	export interface IAnimationParser extends Ext.IBase {
	}
	export class AnimationParser {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw.sprite {
	export interface IArc extends Ext.draw.sprite.ICircle {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IAttributeDefinition extends Ext.IBase {
		/** [Config Option] (Object) */
		aliases?: any;
		/** [Config Option] (Object) */
		animationProcessors?: any;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Object) */
		dirty?: any;
		/** [Config Option] (Object) */
		processors?: any;
		/** [Config Option] (Object) */
		updaters?: any;
		/** [Method] Returns the value of aliases
		* @returns Object
		*/
		getAliases?(): any;
		/** [Method] Returns the value of animationProcessors
		* @returns Object
		*/
		getAnimationProcessors?(): any;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		getDefaults?(): any;
		/** [Method] Returns the value of processors
		* @returns Object
		*/
		getProcessors?(): any;
		/** [Method] Returns the value of updaters
		* @returns Object
		*/
		getUpdaters?(): any;
		/** [Method] Normalizes the changes given via their processors before they are applied as attributes
		* @param changes Object The changes given.
		* @returns Object The normalized values.
		*/
		normalize?( changes?:any ): any;
		/** [Method] Sets the value of aliases
		* @param aliases Object The new value.
		*/
		setAliases?( aliases?:any ): void;
		/** [Method] Sets the value of animationProcessors
		* @param animationProcessors Object The new value.
		*/
		setAnimationProcessors?( animationProcessors?:any ): void;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of processors
		* @param processors Object The new value.
		*/
		setProcessors?( processors?:any ): void;
		/** [Method] Sets the value of updaters
		* @param updaters Object The new value.
		*/
		setUpdaters?( updaters?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IAttributeParser extends Ext.IBase {
	}
	export class AttributeParser {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw.sprite {
	export interface ICircle extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		r?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IComposite extends Ext.draw.sprite.ISprite {
		/** [Method] Adds a sprite to the composite
		* @param sprite Object
		*/
		add?( sprite?:any ): void;
		/** [Method] Renders all sprites contained in the composite to the surface
		* @param surface Object
		* @param ctx Object
		* @param region Object
		*/
		render?( surface?:any, ctx?:any, region?:any ): void;
		/** [Method] Updates the bounding box of the composite which contains the bounding box of all sprites in the composite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IEllipse extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		axisRotation?: number;
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		rx?: number;
		/** [Config Option] (Number) */
		ry?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IEllipticalArc extends Ext.draw.sprite.IEllipse {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IImage extends Ext.draw.sprite.IRect {
		/** [Config Option] (String) */
		src?: string;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any ): any;
	}
}
declare namespace Ext.draw.sprite {
	export interface IInstancing extends Ext.draw.sprite.ISprite {
		/** [Config Option] (Object) */
		template?: any;
		/** [Method] Creates a new sprite instance
		* @param config Object The configuration of the instance.
		* @param data Object
		* @param bypassNormalization Boolean 'true' to bypass attribute normalization.
		* @param avoidCopy Boolean 'true' to avoid copying.
		* @returns Object The attributes of the instance.
		*/
		createInstance?( config?:any, data?:any, bypassNormalization?:boolean, avoidCopy?:boolean ): any;
		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;
		/** [Method] Not supported
		* @returns null
		*/
		getBBox?(): any;
		/** [Method] Returns the bounding box for the instance at the given index
		* @param index Number The index of the instance.
		* @param isWithoutTransform Boolean 'true' to not apply sprite transforms to the bounding box.
		* @returns Object The bounding box for the instance.
		*/
		getBBoxFor?( index?:number, isWithoutTransform?:boolean ): any;
		/** [Method] Returns the value of template
		* @returns Object
		*/
		getTemplate?(): any;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @param clipRegion Object
		* @param region Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any, region?:any ): any;
		/** [Method] Sets the attributes for the instance at the given index
		* @param index Number the index of the instance
		* @param changes Object the attributes to change
		* @param bypassNormalization Boolean 'true' to avoid attribute normalization
		*/
		setAttributesFor?( index?:number, changes?:any, bypassNormalization?:boolean ): void;
		/** [Method] Sets the value of template
		* @param template Object The new value.
		*/
		setTemplate?( template?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IPath extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		path?: string;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any ): any;
		/** [Method] Update the path
		* @param path Ext.draw.Path An empty path to draw on using path API.
		* @param attr Object The attribute object. Note: DO NOT use the sprite.attr instead of this if you want to work with instancing.
		*/
		updatePath?( path?:Ext.draw.IPath, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IRect extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object
		* @param plain Object
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface ISector extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method] Update the path
		* @param path Object
		* @param attr Object
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface ISprite extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Number) */
		A?: number;
		/** [Config Option] (Array) */
		An?: any[];
		/** [Config Option] (Number) */
		fillOpacity?: number;
		/** [Config Option] (String) */
		fillStyle?: string;
		/** [Config Option] (Number) */
		globalAlpha?: number;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		lineCap?: string;
		/** [Config Option] (String) */
		lineJoin?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (Number) */
		miterLimit?: number;
		/** [Config Option] (Number) */
		rotationCenterX?: number;
		/** [Config Option] (Number) */
		rotationCenterY?: number;
		/** [Config Option] (Number) */
		rotationRads?: number;
		/** [Config Option] (Number) */
		scalingCenterX?: number;
		/** [Config Option] (Number) */
		scalingCenterY?: number;
		/** [Config Option] (Number) */
		scalingX?: number;
		/** [Config Option] (Number) */
		scalingY?: number;
		/** [Config Option] (Number) */
		shadowBlur?: number;
		/** [Config Option] (String) */
		shadowColor?: string;
		/** [Config Option] (Number) */
		shadowOffsetX?: number;
		/** [Config Option] (Number) */
		shadowOffsetY?: number;
		/** [Config Option] (Number) */
		strokeOpacity?: number;
		/** [Config Option] (String) */
		strokeStyle?: string;
		/** [Config Option] (Boolean) */
		transformFillStroke?: boolean;
		/** [Config Option] (Number) */
		translationX?: number;
		/** [Config Option] (Number) */
		translationY?: number;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Property] (Object) */
		attr?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine
		* @param isWithoutTransform Boolean Whether to calculate the bounding box with the current transforms or not.
		*/
		getBBox?( isWithoutTransform?:boolean ): void;
		/** [Method] Subclass can rewrite this function to gain better performance
		* @param isWithoutTransform Boolean
		* @returns Array
		*/
		getBBoxCenter?( isWithoutTransform?:boolean ): any[];
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of parent
		* @returns Object
		*/
		getParent?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Hide the sprite
		* @returns Ext.draw.sprite.Sprite this
		*/
		hide?(): Ext.draw.sprite.ISprite;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Called before rendering  */
		preRender?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Render method
		* @param surface Ext.draw.Surface The surface.
		* @param ctx Object A context object compatible with CanvasRenderingContext2D.
		* @param region Array The clip region (or called dirty rect) of the current rendering. Not be confused with surface.getRegion().
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:Ext.draw.ISurface, ctx?:any, region?:any[] ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Set attributes of the sprite
		* @param changes Object The content of the change.
		* @param bypassNormalization Boolean true to avoid normalization of the given changes.
		* @param avoidCopy Boolean true to avoid copying the changes object. The content of object may be destroyed.
		*/
		setAttributes?( changes?:any, bypassNormalization?:boolean, avoidCopy?:boolean ): void;
		/** [Method] Set attributes of the sprite assuming the names and values have already been normalized
		* @param changes Object The content of the change.
		* @param avoidCopy Boolean true to avoid copying the changes object. The content of object may be destroyed.
		*/
		setAttributesBypassingNormalization?( changes?:any, avoidCopy?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of parent
		* @param parent Object The new value.
		*/
		setParent?( parent?:any ): void;
		/** [Method] Show the sprite
		* @returns Ext.draw.sprite.Sprite this
		*/
		show?(): Ext.draw.sprite.ISprite;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object Target object.
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite
		* @param transform Object Target object.
		* @param plain Object Auxiliary object providing information of plain object.
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;
		/** [Method] Applies sprite s attributes to the given context
		* @param ctx Object Context to apply sprite's attributes to.
		* @param region Array The region of the context to be affected by gradients.
		*/
		useAttributes?( ctx?:any, region?:any[] ): void;
	}
}
declare namespace Ext.draw.sprite {
	export interface IText extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		font?: string;
		/** [Config Option] (String) */
		fontFamily?: string;
		/** [Config Option] (String/Number) */
		fontSize?: any;
		/** [Config Option] (String) */
		fontStyle?: string;
		/** [Config Option] (String) */
		fontVariant?: string;
		/** [Config Option] (String) */
		fontWeight?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		textBaseline?: string;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Render method
		* @param surface Object
		* @param ctx Object
		* @returns * returns false to stop rendering in this frame. All the sprite haven't been rendered will have their dirty flag untouched.
		*/
		render?( surface?:any, ctx?:any ): any;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite
		* @param plain Object
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare namespace Ext.draw {
	export interface ISurface extends Ext.IComponent {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean) */
		dirty?: boolean;
		/** [Config Option] (Array) */
		groups?: any[];
		/** [Config Option] (Ext.draw.Group) */
		items?: Ext.draw.IGroup;
		/** [Config Option] (Array) */
		region?: any[];
		/** [Property] (Object) */
		devicePixelRatio?: any;
		/** [Method] Add a Sprite to the surface  */
		add?(): void;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Destroys the surface  */
		destroy?(): void;
		/** [Method]
		* @param sprite Ext.draw.sprite.Sprite
		* @param isWithoutTransform Boolean
		* @returns Object
		*/
		getBBox?( sprite?:Ext.draw.sprite.ISprite, isWithoutTransform?:boolean ): any;
		/** [Method] Returns the value of background
		* @returns Object
		*/
		getBackground?(): any;
		/** [Method] Returns true if the surface is dirty
		* @returns Boolean 'true' if the surface is dirty
		*/
		getDirty?(): boolean;
		/** [Method]
		* @param id String The unique identifier of the group.
		* @returns Ext.draw.Group The group.
		*/
		getGroup?( id?:string ): Ext.draw.IGroup;
		/** [Method] Returns the value of groups
		* @returns Array
		*/
		getGroups?(): any[];
		/** [Method] Returns the value of items
		* @returns Ext.draw.Group
		*/
		getItems?(): Ext.draw.IGroup;
		/** [Method] Returns the value of region
		* @returns Array
		*/
		getRegion?(): any[];
		/** [Method] Invoked when a sprite is adding to the surface
		* @param sprite Ext.draw.sprite.Sprite The sprite to be added.
		*/
		onAdd?( sprite?:Ext.draw.sprite.ISprite ): void;
		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process
		* @param sprite Ext.draw.sprite.Sprite
		* @param destroySprite Boolean
		*/
		remove?( sprite?:Ext.draw.sprite.ISprite, destroySprite?:boolean ): void;
		/** [Method] Remove all sprites from the surface optionally destroying the sprites in the process  */
		removeAll?(): void;
		/** [Method] Triggers the re rendering of the canvas  */
		renderFrame?(): void;
		/** [Method] Force the element to redraw  */
		repaint?(): void;
		/** [Method] Reset the matrix of the surface  */
		resetTransform?(): void;
		/** [Method] Round the number to align to the pixels on device
		* @param num Number The number to align.
		* @returns Number The resultant alignment.
		*/
		roundPixel?( num?:number ): number;
		/** [Method] Sets the value of background
		* @param background Object The new value.
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of groups
		* @param groups Array The new value.
		*/
		setGroups?( groups?:any[] ): void;
		/** [Method] Sets the value of items
		* @param items Ext.draw.Group The new value.
		*/
		setItems?( items?:Ext.draw.IGroup ): void;
		/** [Method] Sets the value of region
		* @param region Array The new value.
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Mark the surface to render after another surface is updated
		* @param surface Ext.draw.Surface The surface to wait for.
		*/
		waitFor?( surface?:Ext.draw.ISurface ): void;
	}
	export class Surface {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
		/** [Method] Stably sort the list of sprites by their zIndex
		* @param list Array
		*/
		static stableSort( list?:any[] ): void;
	}
}
declare namespace Ext.draw {
	export interface ITextMeasurer extends Ext.IBase {
	}
	export class TextMeasurer {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Measure a text with specific font
		* @param text String
		* @param font String
		* @returns Object An object with width, height and sizes properties.
		*/
		static measureText( text?:string, font?:string ): any;
		/** [Method] Measure a single line text with specific font
		* @param text String
		* @param font String
		* @returns Object An object with width and height properties.
		*/
		static measureTextSingleLine( text?:string, font?:string ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.draw {
	export interface ITimingFunctions extends Ext.IBase {
	}
	export class TimingFunctions {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.env {
	export interface IBrowser extends Ext.IBase {
		/** [Property] (String) */
		engineName?: string;
		/** [Property] (Ext.Version) */
		engineVersion?: Ext.IVersion;
		/** [Property] (Boolean) */
		isSecure?: boolean;
		/** [Property] (Boolean) */
		isStrict?: boolean;
		/** [Property] (String) */
		name?: string;
		/** [Property] (String) */
		userAgent?: string;
		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;
		/** [Method] A hybrid property can be either accessed as a method call for example  if Ext browser is IE
		* @param value String The OS name to check.
		* @returns Boolean
		*/
		is?( value?:string ): boolean;
	}
}
declare namespace Ext.env {
	export interface IFeature extends Ext.IBase {
	}
}
declare namespace Ext.env {
	export interface IOS extends Ext.IBase {
		/** [Property] (String) */
		name?: string;
		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;
		/** [Method] A hybrid property can be either accessed as a method call i e  if Ext os is Android
		* @param value String The OS name to check.
		* @returns Boolean
		*/
		is?( value?:string ): boolean;
	}
}
declare namespace Ext.event {
	export interface IController extends Ext.IBase {
	}
}
declare namespace Ext.event {
	export interface IDispatcher extends Ext.IBase {
		/** [Method] Returns the value of publishers
		* @returns Object
		*/
		getPublishers?(): any;
		/** [Method] Sets the value of publishers
		* @param publishers Object The new value.
		*/
		setPublishers?( publishers?:any ): void;
	}
}
declare namespace Ext.event {
	export interface IDom {
		/** [Property] (Number) */
		distance?: number;
		/** [Property] (Number) */
		pageX?: number;
		/** [Property] (Number) */
		pageY?: number;
		/** [Property] (HTMLElement) */
		target?: HTMLElement;
		/** [Method] Gets the x coordinate of the event
		* @returns Number
		*/
		getPageX?(): number;
		/** [Method] Gets the y coordinate of the event
		* @returns Number
		*/
		getPageY?(): number;
		/** [Method] Gets the target for the event
		* @param selector String A simple selector to filter the target or look for an ancestor of the target
		* @param maxDepth Number/Mixed The max depth to search as a number or element (defaults to 10 || document.body)
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node.
		* @returns HTMLElement
		*/
		getTarget?( selector?:string, maxDepth?:any, returnEl?:boolean ): HTMLElement;
		/** [Method] Returns the time of the event
		* @returns Date
		*/
		getTime?(): any;
		/** [Method] Gets the X and Y coordinates of the event
		* @returns Array
		*/
		getXY?(): any[];
		/** [Method] Prevents the browsers default handling of the event  */
		preventDefault?(): void;
	}
}
declare namespace Ext.event {
	export interface IEvent extends Ext.IBase,Ext.event.ITouch {
		/** [Property] (Number) */
		angle?: number;
		/** [Property] (Number) */
		direction?: number;
		/** [Property] (Number) */
		duration?: number;
		/** [Property] (Number) */
		rotation?: number;
		/** [Property] (Number) */
		scale?: number;
		/** [Method] Stop the event preventDefault and stopPropagation
		* @returns Ext.event.Event this
		*/
		stopEvent?(): Ext.event.IEvent;
		/** [Method] Cancels bubbling of the event
		* @returns Ext.event.Event this
		*/
		stopPropagation?(): Ext.event.IEvent;
	}
}
declare namespace Ext {
	export interface IEventObject extends Ext.IBase,Ext.event.ITouch {
		/** [Property] (Number) */
		angle?: number;
		/** [Property] (Number) */
		direction?: number;
		/** [Property] (Number) */
		duration?: number;
		/** [Property] (Number) */
		rotation?: number;
		/** [Property] (Number) */
		scale?: number;
		/** [Method] Stop the event preventDefault and stopPropagation
		* @returns Ext.event.Event this
		*/
		stopEvent?(): Ext.event.IEvent;
		/** [Method] Cancels bubbling of the event
		* @returns Ext.event.Event this
		*/
		stopPropagation?(): Ext.event.IEvent;
	}
}
declare namespace Ext.event {
	export interface IListenerStack extends Ext.IBase {
	}
}
declare namespace Ext.event.publisher {
	export interface IComponentDelegation extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IComponentPaint extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IComponentSize extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IDom extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IElementPaint extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IElementSize extends Ext.event.publisher.IPublisher {
	}
}
declare namespace Ext.event.publisher {
	export interface IPublisher extends Ext.IBase {
	}
}
declare namespace Ext.event.publisher {
	export interface ITouchGesture extends Ext.event.publisher.IDom {
		/** [Method] Returns the value of moveThrottle
		* @returns Number
		*/
		getMoveThrottle?(): number;
		/** [Method] Returns the value of recognizers
		* @returns Object
		*/
		getRecognizers?(): any;
		/** [Method] Sets the value of moveThrottle
		* @param moveThrottle Number The new value.
		*/
		setMoveThrottle?( moveThrottle?:number ): void;
		/** [Method] Sets the value of recognizers
		* @param recognizers Object The new value.
		*/
		setRecognizers?( recognizers?:any ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IDoubleTap extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of maxDuration
		* @returns Number
		*/
		getMaxDuration?(): number;
		/** [Method] Sets the value of maxDuration
		* @param maxDuration Number The new value.
		*/
		setMaxDuration?( maxDuration?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IDrag extends Ext.event.recognizer.ISingleTouch {
		/** [Config Option] (Number) */
		minDistance?: number;
		/** [Method] Returns the value of minDistance
		* @returns Number
		*/
		getMinDistance?(): number;
		/** [Method] Sets the value of minDistance
		* @param minDistance Number The new value.
		*/
		setMinDistance?( minDistance?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IEdgeSwipe extends Ext.event.recognizer.ISwipe {
		/** [Method] Returns the value of minDistance
		* @returns Number
		*/
		getMinDistance?(): number;
		/** [Method] Sets the value of minDistance
		* @param minDistance Number The new value.
		*/
		setMinDistance?( minDistance?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IHorizontalSwipe extends Ext.event.recognizer.ISwipe {
	}
}
declare namespace Ext.event.recognizer {
	export interface ILongPress extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of minDuration
		* @returns Number
		*/
		getMinDuration?(): number;
		/** [Method] Sets the value of minDuration
		* @param minDuration Number The new value.
		*/
		setMinDuration?( minDuration?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IMultiTouch extends Ext.event.recognizer.ITouch {
	}
}
declare namespace Ext.event.recognizer {
	export interface IPinch extends Ext.event.recognizer.IMultiTouch {
	}
}
declare namespace Ext.event.recognizer {
	export interface IRecognizer extends Ext.IBase,Ext.mixin.IIdentifiable {
		/** [Method] Returns the value of callbackScope
		* @returns Object
		*/
		getCallbackScope?(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		getId?(): string;
		/** [Method] Returns the value of onFailed
		* @returns Object
		*/
		getOnFailed?(): any;
		/** [Method] Returns the value of onRecognized
		* @returns Object
		*/
		getOnRecognized?(): any;
		/** [Method] Sets the value of callbackScope
		* @param callbackScope Object The new value.
		*/
		setCallbackScope?( callbackScope?:any ): void;
		/** [Method] Sets the value of onFailed
		* @param onFailed Object The new value.
		*/
		setOnFailed?( onFailed?:any ): void;
		/** [Method] Sets the value of onRecognized
		* @param onRecognized Object The new value.
		*/
		setOnRecognized?( onRecognized?:any ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface IRotate extends Ext.event.recognizer.IMultiTouch {
	}
}
declare namespace Ext.event.recognizer {
	export interface ISingleTouch extends Ext.event.recognizer.ITouch {
	}
}
declare namespace Ext.event.recognizer {
	export interface ISwipe extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of maxDuration
		* @returns Number
		*/
		getMaxDuration?(): number;
		/** [Method] Returns the value of maxOffset
		* @returns Number
		*/
		getMaxOffset?(): number;
		/** [Method] Returns the value of minDistance
		* @returns Number
		*/
		getMinDistance?(): number;
		/** [Method] Sets the value of maxDuration
		* @param maxDuration Number The new value.
		*/
		setMaxDuration?( maxDuration?:number ): void;
		/** [Method] Sets the value of maxOffset
		* @param maxOffset Number The new value.
		*/
		setMaxOffset?( maxOffset?:number ): void;
		/** [Method] Sets the value of minDistance
		* @param minDistance Number The new value.
		*/
		setMinDistance?( minDistance?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface ITap extends Ext.event.recognizer.ISingleTouch {
		/** [Config Option] (Number) */
		moveDistance?: number;
		/** [Method] Returns the value of moveDistance
		* @returns Number
		*/
		getMoveDistance?(): number;
		/** [Method] Sets the value of moveDistance
		* @param moveDistance Number The new value.
		*/
		setMoveDistance?( moveDistance?:number ): void;
	}
}
declare namespace Ext.event.recognizer {
	export interface ITouch extends Ext.event.recognizer.IRecognizer {
	}
}
declare namespace Ext.event.recognizer {
	export interface IVerticalSwipe extends Ext.event.recognizer.ISwipe {
	}
}
declare namespace Ext.event {
	export interface ITouch extends Ext.event.IDom {
	}
}
declare namespace Ext {
	export interface IEvented extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext {
	export interface IEventedBase extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext {
	export interface IEventManager {
	}
	export class EventManager {
		/** [Method] Appends an event handler to an element
		* @param el String/HTMLElement The HTML element or id to assign the event handler to.
		* @param eventName String The name of the event to listen for.
		* @param handler Function The handler function the event invokes. This function is passed the following parameters:
		* @param scope Object The scope (this reference) in which the handler function is executed. Defaults to the Element.
		* @param options Object An object containing handler configuration properties. This may contain any of the following properties:
		*/
		static addListener( el?:any, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		/** [Method] Appends an event handler to an element
		* @param el String/HTMLElement The html element or id to assign the event handler to.
		* @param eventName String The name of the event to listen for.
		* @param handler Function The handler function the event invokes.
		* @param scope Object (this reference) in which the handler function executes. Defaults to the Element.
		* @param options Object An object containing standard addListener options
		*/
		static on( el?:any, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		/** [Method] Adds a listener to be notified when the document is ready before onload and before images are loaded */
		static onDocumentReady(): void;
		/** [Method] Adds a listener to be notified when the browser window is resized and provides resize event buffering 50 millisecond
		* @param fn Function The handler function the window resize event invokes.
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window.
		* @param options Boolean Options object as passed to Ext.Element.addListener
		*/
		static onWindowResize( fn?:any, scope?:any, options?:boolean ): void;
		/** [Method] Removes all event handers from an element
		* @param el String/HTMLElement The id or html element from which to remove all event handlers.
		*/
		static removeAll( el?:any ): void;
		/** [Method] Removes an event handler from an element
		* @param el String/HTMLElement The id or html element from which to remove the listener.
		* @param eventName String The name of the event.
		* @param fn Function The handler function to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
		*/
		static removeListener( el?:any, eventName?:string, fn?:any, scope?:any ): void;
		/** [Method] Removes an event handler from an element
		* @param el String/HTMLElement The id or html element from which to remove the listener.
		* @param eventName String The name of the event.
		* @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
		* @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
		*/
		static un( el?:any, eventName?:string, fn?:any, scope?:any ): void;
	}
}
declare namespace Ext {
	export interface IFeature extends Ext.env.IFeature {
	}
	export class Feature {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Verifies if a browser feature exists or not on the current device
		* @param value String The feature name to check.
		* @returns Boolean
		*/
		static has( value?:string ): boolean;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.field {
	export interface ICheckbox extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Method] Set the checked state of the checkbox to true
		* @returns Ext.field.Checkbox This checkbox.
		*/
		check?(): Ext.field.ICheckbox;
		/** [Method] Method called when this Ext field Checkbox has been checked  */
		doChecked?(): void;
		/** [Method] Method called when this Ext field Checkbox has been unchecked  */
		doUnChecked?(): void;
		/** [Method] Returns the field checked value
		* @returns Mixed The field value.
		*/
		getChecked?(): any;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns an array of values from the checkboxes in the group that are checked
		* @returns Array
		*/
		getGroupValues?(): any[];
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms
		* @returns Boolean/String value The value of value or true, if checked.
		*/
		getSubmitValue?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns String
		*/
		getValue?(): string;
		/** [Method] Returns the checked state of the checkbox
		* @returns Boolean true if checked, false otherwise.
		*/
		isChecked?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the status of all matched checkboxes in the same group to checked
		* @returns Ext.field.Checkbox This checkbox.
		*/
		resetGroupValues?(): Ext.field.ICheckbox;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the status of all matched checkboxes in the same group to checked
		* @param values Array An array of values.
		* @returns Ext.field.Checkbox This checkbox.
		*/
		setGroupValues?( values?:any[] ): Ext.field.ICheckbox;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value String The new value.
		*/
		setValue?( value?:string ): void;
		/** [Method] Set the checked state of the checkbox to false
		* @returns Ext.field.Checkbox This checkbox.
		*/
		uncheck?(): Ext.field.ICheckbox;
	}
}
declare namespace Ext.form {
	export interface ICheckbox extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Method] Set the checked state of the checkbox to true
		* @returns Ext.field.Checkbox This checkbox.
		*/
		check?(): Ext.field.ICheckbox;
		/** [Method] Method called when this Ext field Checkbox has been checked  */
		doChecked?(): void;
		/** [Method] Method called when this Ext field Checkbox has been unchecked  */
		doUnChecked?(): void;
		/** [Method] Returns the field checked value
		* @returns Mixed The field value.
		*/
		getChecked?(): any;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns an array of values from the checkboxes in the group that are checked
		* @returns Array
		*/
		getGroupValues?(): any[];
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms
		* @returns Boolean/String value The value of value or true, if checked.
		*/
		getSubmitValue?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns String
		*/
		getValue?(): string;
		/** [Method] Returns the checked state of the checkbox
		* @returns Boolean true if checked, false otherwise.
		*/
		isChecked?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the status of all matched checkboxes in the same group to checked
		* @returns Ext.field.Checkbox This checkbox.
		*/
		resetGroupValues?(): Ext.field.ICheckbox;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the status of all matched checkboxes in the same group to checked
		* @param values Array An array of values.
		* @returns Ext.field.Checkbox This checkbox.
		*/
		setGroupValues?( values?:any[] ): Ext.field.ICheckbox;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value String The new value.
		*/
		setValue?( value?:string ): void;
		/** [Method] Set the checked state of the checkbox to false
		* @returns Ext.field.Checkbox This checkbox.
		*/
		uncheck?(): Ext.field.ICheckbox;
	}
}
declare namespace Ext.field {
	export interface IDatePicker extends Ext.field.ISelect {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Boolean) */
		destroyPickerOnHide?: boolean;
		/** [Config Option] (Object/Ext.picker.Date) */
		picker?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Method] Returns the value of dateFormat
		* @returns String
		*/
		getDateFormat?(): string;
		/** [Method]  */
		getDatePicker?(): void;
		/** [Method] Returns the value of destroyPickerOnHide
		* @returns Boolean
		*/
		getDestroyPickerOnHide?(): boolean;
		/** [Method] Returns the value of the field formatted using the specified format
		* @param format String The format to be returned.
		* @returns String The formatted date.
		*/
		getFormattedValue?( format?:string ): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the Date value of this field
		* @returns Date The date selected
		*/
		getValue?(): any;
		/** [Method] Override this or change event will be fired twice  */
		onChange?(): void;
		/** [Method] Resets the Select field to the value of the first record in the store
		* @returns Ext.field.Select this
		*/
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of dateFormat
		* @param dateFormat String The new value.
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of destroyPickerOnHide
		* @param destroyPickerOnHide Boolean The new value.
		*/
		setDestroyPickerOnHide?( destroyPickerOnHide?:boolean ): void;
		/** [Method] Sets the value of picker
		* @param picker Object/Ext.picker.Date The new value.
		*/
		setPicker?( picker?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value Object/Date The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IDatePicker extends Ext.field.ISelect {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Boolean) */
		destroyPickerOnHide?: boolean;
		/** [Config Option] (Object/Ext.picker.Date) */
		picker?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Method] Returns the value of dateFormat
		* @returns String
		*/
		getDateFormat?(): string;
		/** [Method]  */
		getDatePicker?(): void;
		/** [Method] Returns the value of destroyPickerOnHide
		* @returns Boolean
		*/
		getDestroyPickerOnHide?(): boolean;
		/** [Method] Returns the value of the field formatted using the specified format
		* @param format String The format to be returned.
		* @returns String The formatted date.
		*/
		getFormattedValue?( format?:string ): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the Date value of this field
		* @returns Date The date selected
		*/
		getValue?(): any;
		/** [Method] Override this or change event will be fired twice  */
		onChange?(): void;
		/** [Method] Resets the Select field to the value of the first record in the store
		* @returns Ext.field.Select this
		*/
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of dateFormat
		* @param dateFormat String The new value.
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of destroyPickerOnHide
		* @param destroyPickerOnHide Boolean The new value.
		*/
		setDestroyPickerOnHide?( destroyPickerOnHide?:boolean ): void;
		/** [Method] Sets the value of picker
		* @param picker Object/Ext.picker.Date The new value.
		*/
		setPicker?( picker?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value Object/Date The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.field {
	export interface IEmail extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IEmail extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.field {
	export interface IField extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		clearIcon?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		inputCls?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Config Option] (Boolean) */
		labelWrap?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		required?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		useClearIcon?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isField?: boolean;
		/** [Property] (Ext.Element) */
		labelEl?: Ext.IElement;
		/** [Property] (Mixed) */
		originalValue?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of clearIcon
		* @returns Boolean
		*/
		getClearIcon?(): boolean;
		/** [Method] Returns the value of inputCls
		* @returns String
		*/
		getInputCls?(): string;
		/** [Method] Returns the value of inputType
		* @returns String
		*/
		getInputType?(): string;
		/** [Method] Returns the value of label
		* @returns String
		*/
		getLabel?(): string;
		/** [Method] Returns the value of labelAlign
		* @returns String
		*/
		getLabelAlign?(): string;
		/** [Method] Returns the value of labelCls
		* @returns String
		*/
		getLabelCls?(): string;
		/** [Method] Returns the value of labelWidth
		* @returns Number/String
		*/
		getLabelWidth?(): any;
		/** [Method] Returns the value of labelWrap
		* @returns Boolean
		*/
		getLabelWrap?(): boolean;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of required
		* @returns Boolean
		*/
		getRequired?(): boolean;
		/** [Method] Returns the value of requiredCls
		* @returns String
		*/
		getRequiredCls?(): string;
		/** [Method] Returns the value of tabIndex
		* @returns Number
		*/
		getTabIndex?(): number;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearIcon
		* @param clearIcon Boolean The new value.
		*/
		setClearIcon?( clearIcon?:boolean ): void;
		/** [Method] Sets the value of inputCls
		* @param inputCls String The new value.
		*/
		setInputCls?( inputCls?:string ): void;
		/** [Method] Sets the value of inputType
		* @param inputType String The new value.
		*/
		setInputType?( inputType?:string ): void;
		/** [Method] Sets the value of label
		* @param label String The new value.
		*/
		setLabel?( label?:string ): void;
		/** [Method] Sets the value of labelAlign
		* @param labelAlign String The new value.
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of labelCls
		* @param labelCls String The new value.
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of labelWidth
		* @param labelWidth Number/String The new value.
		*/
		setLabelWidth?( labelWidth?:any ): void;
		/** [Method] Sets the value of labelWrap
		* @param labelWrap Boolean The new value.
		*/
		setLabelWrap?( labelWrap?:boolean ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of required
		* @param required Boolean The new value.
		*/
		setRequired?( required?:boolean ): void;
		/** [Method] Sets the value of requiredCls
		* @param requiredCls String The new value.
		*/
		setRequiredCls?( requiredCls?:string ): void;
		/** [Method] Sets the value of tabIndex
		* @param tabIndex Number The new value.
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of value
		* @param value Mixed The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IField extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		clearIcon?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		inputCls?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Config Option] (Boolean) */
		labelWrap?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		required?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		useClearIcon?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isField?: boolean;
		/** [Property] (Ext.Element) */
		labelEl?: Ext.IElement;
		/** [Property] (Mixed) */
		originalValue?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of clearIcon
		* @returns Boolean
		*/
		getClearIcon?(): boolean;
		/** [Method] Returns the value of inputCls
		* @returns String
		*/
		getInputCls?(): string;
		/** [Method] Returns the value of inputType
		* @returns String
		*/
		getInputType?(): string;
		/** [Method] Returns the value of label
		* @returns String
		*/
		getLabel?(): string;
		/** [Method] Returns the value of labelAlign
		* @returns String
		*/
		getLabelAlign?(): string;
		/** [Method] Returns the value of labelCls
		* @returns String
		*/
		getLabelCls?(): string;
		/** [Method] Returns the value of labelWidth
		* @returns Number/String
		*/
		getLabelWidth?(): any;
		/** [Method] Returns the value of labelWrap
		* @returns Boolean
		*/
		getLabelWrap?(): boolean;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of required
		* @returns Boolean
		*/
		getRequired?(): boolean;
		/** [Method] Returns the value of requiredCls
		* @returns String
		*/
		getRequiredCls?(): string;
		/** [Method] Returns the value of tabIndex
		* @returns Number
		*/
		getTabIndex?(): number;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearIcon
		* @param clearIcon Boolean The new value.
		*/
		setClearIcon?( clearIcon?:boolean ): void;
		/** [Method] Sets the value of inputCls
		* @param inputCls String The new value.
		*/
		setInputCls?( inputCls?:string ): void;
		/** [Method] Sets the value of inputType
		* @param inputType String The new value.
		*/
		setInputType?( inputType?:string ): void;
		/** [Method] Sets the value of label
		* @param label String The new value.
		*/
		setLabel?( label?:string ): void;
		/** [Method] Sets the value of labelAlign
		* @param labelAlign String The new value.
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of labelCls
		* @param labelCls String The new value.
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of labelWidth
		* @param labelWidth Number/String The new value.
		*/
		setLabelWidth?( labelWidth?:any ): void;
		/** [Method] Sets the value of labelWrap
		* @param labelWrap Boolean The new value.
		*/
		setLabelWrap?( labelWrap?:boolean ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of required
		* @param required Boolean The new value.
		*/
		setRequired?( required?:boolean ): void;
		/** [Method] Sets the value of requiredCls
		* @param requiredCls String The new value.
		*/
		setRequiredCls?( requiredCls?:string ): void;
		/** [Method] Sets the value of tabIndex
		* @param tabIndex Number The new value.
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of value
		* @param value Mixed The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.field {
	export interface IFile extends Ext.field.IField {
		/** [Config Option] (String) */
		accept?: string;
		/** [Config Option] (String) */
		capture?: string;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Boolean) */
		multiple?: boolean;
		/** [Method] Returns the value of accept
		* @returns String
		*/
		getAccept?(): string;
		/** [Method] Returns the value of capture
		* @returns String
		*/
		getCapture?(): string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of multiple
		* @returns Boolean
		*/
		getMultiple?(): boolean;
		/** [Method] Sets the value of accept
		* @param accept String The new value.
		*/
		setAccept?( accept?:string ): void;
		/** [Method] Sets the value of capture
		* @param capture String The new value.
		*/
		setCapture?( capture?:string ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of multiple
		* @param multiple Boolean The new value.
		*/
		setMultiple?( multiple?:boolean ): void;
	}
}
declare namespace Ext.field {
	export interface IFileInput extends Ext.field.IInput {
		/** [Config Option] (Function) */
		me?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Function) */
		newValue?: any;
		/** [Config Option] (String) */
		type?: string;
		/** [Config Option] (Function) */
		value?: any;
		/** [Method] Updated the capture attribute with the  ink capture configuration
		* @param value Object
		*/
		applyCapture?( value?:any ): void;
		/** [Method] Returns the value of accept
		* @returns Object
		*/
		getAccept?(): any;
		/** [Method] Returns the value of capture
		* @returns Object
		*/
		getCapture?(): any;
		/** [Method] Returns the field files
		* @returns FileList List of the files selected.
		*/
		getFiles?(): FileList;
		/** [Method] Returns the value of multiple
		* @returns Boolean
		*/
		getMultiple?(): boolean;
		/** [Method] Returns the value of type
		* @returns String
		*/
		getType?(): string;
		/** [Method] Returns the field data value
		* @returns String value The field value.
		*/
		getValue?(): string;
		/** [Method] Sets the value of accept
		* @param accept Object The new value.
		*/
		setAccept?( accept?:any ): void;
		/** [Method] Sets the value of capture
		* @param capture Object The new value.
		*/
		setCapture?( capture?:any ): void;
		/** [Method] Sets the value of multiple
		* @param multiple Boolean The new value.
		*/
		setMultiple?( multiple?:boolean ): void;
		/** [Method] Sets the value of name
		* @param name Object The new value.
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of type
		* @param type String The new value.
		*/
		setType?( type?:string ): void;
		/** [Method] Called when the multiple property is updated  */
		updateMultiple?(): void;
	}
}
declare namespace Ext.field {
	export interface IHidden extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.form {
	export interface IHidden extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.field {
	export interface IInput extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Boolean) */
		autoComplete?: boolean;
		/** [Config Option] (Boolean) */
		autoCorrect?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		fastFocus?: boolean;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		pattern?: string;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Mixed) */
		startValue?: any;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		type?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isFocused?: boolean;
		/** [Method] Attempts to forcefully blur input focus for the field
		* @returns Ext.field.Input this
		*/
		blur?(): Ext.field.IInput;
		/** [Method] Attempts to set the field as the active input focus
		* @returns Ext.field.Input this
		*/
		focus?(): Ext.field.IInput;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of autoComplete
		* @returns Boolean
		*/
		getAutoComplete?(): boolean;
		/** [Method] Returns the value of autoCorrect
		* @returns Boolean
		*/
		getAutoCorrect?(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the checked value of this field
		* @returns Mixed value The field value
		*/
		getChecked?(): any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		getDisabled?(): boolean;
		/** [Method] Returns the value of fastFocus
		* @returns Boolean
		*/
		getFastFocus?(): boolean;
		/** [Method] Returns the value of focusCls
		* @returns String
		*/
		getFocusCls?(): string;
		/** [Method] Returns the value of maxLength
		* @returns Number
		*/
		getMaxLength?(): number;
		/** [Method] Returns the value of maxRows
		* @returns Number
		*/
		getMaxRows?(): number;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of pattern
		* @returns String
		*/
		getPattern?(): string;
		/** [Method] Returns the value of placeHolder
		* @returns String
		*/
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the value of startValue
		* @returns Mixed
		*/
		getStartValue?(): any;
		/** [Method] Returns the value of stepValue
		* @returns Number
		*/
		getStepValue?(): number;
		/** [Method] Returns the value of tabIndex
		* @returns Number
		*/
		getTabIndex?(): number;
		/** [Method] Returns the value of type
		* @returns String
		*/
		getType?(): string;
		/** [Method] Returns the field data value
		* @returns Mixed value The field value.
		*/
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its original value
		* @returns Boolean
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value to the original value  */
		reset?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field
		* @returns Ext.field.Input this
		*/
		select?(): Ext.field.IInput;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of autoComplete
		* @param autoComplete Boolean The new value.
		*/
		setAutoComplete?( autoComplete?:boolean ): void;
		/** [Method] Sets the value of autoCorrect
		* @param autoCorrect Boolean The new value.
		*/
		setAutoCorrect?( autoCorrect?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		setDisabled?( disabled?:boolean ): void;
		/** [Method] Sets the value of fastFocus
		* @param fastFocus Boolean The new value.
		*/
		setFastFocus?( fastFocus?:boolean ): void;
		/** [Method] Sets the value of focusCls
		* @param focusCls String The new value.
		*/
		setFocusCls?( focusCls?:string ): void;
		/** [Method] Sets the value of maxLength
		* @param maxLength Number The new value.
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of maxRows
		* @param maxRows Number The new value.
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of pattern
		* @param pattern String The new value.
		*/
		setPattern?( pattern?:string ): void;
		/** [Method] Sets the value of placeHolder
		* @param placeHolder String The new value.
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of startValue
		* @param startValue Mixed The new value.
		*/
		setStartValue?( startValue?:any ): void;
		/** [Method] Sets the value of stepValue
		* @param stepValue Number The new value.
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of tabIndex
		* @param tabIndex Number The new value.
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of type
		* @param type String The new value.
		*/
		setType?( type?:string ): void;
		/** [Method] Updates the cls configuration
		* @param newCls Object
		* @param oldCls Object
		*/
		updateCls?( newCls?:any, oldCls?:any ): void;
		/** [Method] Updates the useMask configuration
		* @param newUseMask Object
		*/
		updateUseMask?( newUseMask?:any ): void;
	}
}
declare namespace Ext.field {
	export interface INumber extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue
		* @returns Number
		*/
		getStepValue?(): number;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue
		* @param stepValue Number The new value.
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.form {
	export interface INumber extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue
		* @returns Number
		*/
		getStepValue?(): number;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue
		* @param stepValue Number The new value.
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.field {
	export interface IPassword extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IPassword extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.field {
	export interface IRadio extends Ext.field.ICheckbox {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the selected value if this radio is part of a group other radio fields with the same name in the same FormP
		* @returns String
		*/
		getGroupValue?(): string;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms
		* @returns Boolean/String value The value of value or true, if checked.
		*/
		getSubmitValue?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns String
		*/
		getValue?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the matched radio field s status that has the same value as the given string to checked
		* @param value String The value of the radio field to check.
		* @returns Ext.field.Radio The field that is checked.
		*/
		setGroupValue?( value?:string ): Ext.field.IRadio;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value Object
		* @returns Ext.field.Radio this
		*/
		setValue?( value?:any ): Ext.field.IRadio;
	}
}
declare namespace Ext.form {
	export interface IRadio extends Ext.field.ICheckbox {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the selected value if this radio is part of a group other radio fields with the same name in the same FormP
		* @returns String
		*/
		getGroupValue?(): string;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms
		* @returns Boolean/String value The value of value or true, if checked.
		*/
		getSubmitValue?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns String
		*/
		getValue?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the matched radio field s status that has the same value as the given string to checked
		* @param value String The value of the radio field to check.
		* @returns Ext.field.Radio The field that is checked.
		*/
		setGroupValue?( value?:string ): Ext.field.IRadio;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value Object
		* @returns Ext.field.Radio this
		*/
		setValue?( value?:any ): Ext.field.IRadio;
	}
}
declare namespace Ext.field {
	export interface ISearch extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.form {
	export interface ISearch extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.field {
	export interface ISelect extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Object) */
		defaultPhonePickerConfig?: any;
		/** [Config Option] (Object) */
		defaultTabletPickerConfig?: any;
		/** [Config Option] (String/Number) */
		displayField?: any;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Ext.data.Store/Object/String) */
		store?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String/Boolean) */
		usePicker?: any;
		/** [Config Option] (String/Number) */
		valueField?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoSelect
		* @returns Boolean
		*/
		getAutoSelect?(): boolean;
		/** [Method] Returns the value of defaultPhonePickerConfig
		* @returns Object
		*/
		getDefaultPhonePickerConfig?(): any;
		/** [Method] Returns the value of defaultTabletPickerConfig
		* @returns Object
		*/
		getDefaultTabletPickerConfig?(): any;
		/** [Method] Returns the value of displayField
		* @returns String/Number
		*/
		getDisplayField?(): any;
		/** [Method] Returns the value of hiddenName
		* @returns String
		*/
		getHiddenName?(): string;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of options
		* @returns Array
		*/
		getOptions?(): any[];
		/** [Method] Returns the current selected record instance selected in this field
		* @returns Ext.data.Model the record.
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of store
		* @returns Ext.data.Store/Object/String
		*/
		getStore?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of usePicker
		* @returns String/Boolean
		*/
		getUsePicker?(): any;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns the value of valueField
		* @returns String/Number
		*/
		getValueField?(): any;
		/** [Method] Called when the internal store s data has changed
		* @param store Object
		*/
		onStoreDataChanged?( store?:any ): void;
		/** [Method] Resets the Select field to the value of the first record in the store
		* @returns Ext.field.Select this
		*/
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of autoSelect
		* @param autoSelect Boolean The new value.
		*/
		setAutoSelect?( autoSelect?:boolean ): void;
		/** [Method] Sets the value of defaultPhonePickerConfig
		* @param defaultPhonePickerConfig Object The new value.
		*/
		setDefaultPhonePickerConfig?( defaultPhonePickerConfig?:any ): void;
		/** [Method] Sets the value of defaultTabletPickerConfig
		* @param defaultTabletPickerConfig Object The new value.
		*/
		setDefaultTabletPickerConfig?( defaultTabletPickerConfig?:any ): void;
		/** [Method] Sets the value of displayField
		* @param displayField String/Number The new value.
		*/
		setDisplayField?( displayField?:any ): void;
		/** [Method] Sets the value of hiddenName
		* @param hiddenName String The new value.
		*/
		setHiddenName?( hiddenName?:string ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of options
		* @param options Array The new value.
		*/
		setOptions?( options?:any[] ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.Store/Object/String The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of usePicker
		* @param usePicker String/Boolean The new value.
		*/
		setUsePicker?( usePicker?:any ): void;
		/** [Method] Sets the value of valueField
		* @param valueField String/Number The new value.
		*/
		setValueField?( valueField?:any ): void;
		/** [Method] Shows the picker for the select field whether that is a Ext picker Picker or a simple list  */
		showPicker?(): void;
		/** [Method] Updates the underlying lt options gt list with new values
		* @param newOptions Array An array of options configurations to insert or append. selectBox.setOptions([  {text: 'First Option', value: 'first'},  {text: 'Second Option', value: 'second'},  {text: 'Third Option', value: 'third'} ]).setValue('third');  Note: option object member names should correspond with defined valueField and displayField values.
		* @returns Ext.field.Select this
		*/
		updateOptions?( newOptions?:any[] ): Ext.field.ISelect;
	}
}
declare namespace Ext.form {
	export interface ISelect extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Object) */
		defaultPhonePickerConfig?: any;
		/** [Config Option] (Object) */
		defaultTabletPickerConfig?: any;
		/** [Config Option] (String/Number) */
		displayField?: any;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Ext.data.Store/Object/String) */
		store?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String/Boolean) */
		usePicker?: any;
		/** [Config Option] (String/Number) */
		valueField?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoSelect
		* @returns Boolean
		*/
		getAutoSelect?(): boolean;
		/** [Method] Returns the value of defaultPhonePickerConfig
		* @returns Object
		*/
		getDefaultPhonePickerConfig?(): any;
		/** [Method] Returns the value of defaultTabletPickerConfig
		* @returns Object
		*/
		getDefaultTabletPickerConfig?(): any;
		/** [Method] Returns the value of displayField
		* @returns String/Number
		*/
		getDisplayField?(): any;
		/** [Method] Returns the value of hiddenName
		* @returns String
		*/
		getHiddenName?(): string;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of options
		* @returns Array
		*/
		getOptions?(): any[];
		/** [Method] Returns the current selected record instance selected in this field
		* @returns Ext.data.Model the record.
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of store
		* @returns Ext.data.Store/Object/String
		*/
		getStore?(): any;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of usePicker
		* @returns String/Boolean
		*/
		getUsePicker?(): any;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns the value of valueField
		* @returns String/Number
		*/
		getValueField?(): any;
		/** [Method] Called when the internal store s data has changed
		* @param store Object
		*/
		onStoreDataChanged?( store?:any ): void;
		/** [Method] Resets the Select field to the value of the first record in the store
		* @returns Ext.field.Select this
		*/
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of autoSelect
		* @param autoSelect Boolean The new value.
		*/
		setAutoSelect?( autoSelect?:boolean ): void;
		/** [Method] Sets the value of defaultPhonePickerConfig
		* @param defaultPhonePickerConfig Object The new value.
		*/
		setDefaultPhonePickerConfig?( defaultPhonePickerConfig?:any ): void;
		/** [Method] Sets the value of defaultTabletPickerConfig
		* @param defaultTabletPickerConfig Object The new value.
		*/
		setDefaultTabletPickerConfig?( defaultTabletPickerConfig?:any ): void;
		/** [Method] Sets the value of displayField
		* @param displayField String/Number The new value.
		*/
		setDisplayField?( displayField?:any ): void;
		/** [Method] Sets the value of hiddenName
		* @param hiddenName String The new value.
		*/
		setHiddenName?( hiddenName?:string ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of options
		* @param options Array The new value.
		*/
		setOptions?( options?:any[] ): void;
		/** [Method] Sets the value of store
		* @param store Ext.data.Store/Object/String The new value.
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of usePicker
		* @param usePicker String/Boolean The new value.
		*/
		setUsePicker?( usePicker?:any ): void;
		/** [Method] Sets the value of valueField
		* @param valueField String/Number The new value.
		*/
		setValueField?( valueField?:any ): void;
		/** [Method] Shows the picker for the select field whether that is a Ext picker Picker or a simple list  */
		showPicker?(): void;
		/** [Method] Updates the underlying lt options gt list with new values
		* @param newOptions Array An array of options configurations to insert or append. selectBox.setOptions([  {text: 'First Option', value: 'first'},  {text: 'Second Option', value: 'second'},  {text: 'Third Option', value: 'third'} ]).setValue('third');  Note: option object member names should correspond with defined valueField and displayField values.
		* @returns Ext.field.Select this
		*/
		updateOptions?( newOptions?:any[] ): Ext.field.ISelect;
	}
}
declare namespace Ext.field {
	export interface ISlider extends Ext.field.IField {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of increment
		* @returns Number
		*/
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the value of value
		* @returns Number/Number[]
		*/
		getValue?(): any;
		/** [Method] Convenience method
		* @returns Object
		*/
		getValues?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of increment
		* @param increment Number The new value.
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of tabIndex
		* @param tabIndex Object The new value.
		*/
		setTabIndex?( tabIndex?:any ): void;
		/** [Method] Sets the value of value
		* @param value Number/Number[] The new value.
		*/
		setValue?( value?:any ): void;
		/** [Method] Convenience method
		* @param value Object
		*/
		setValues?( value?:any ): void;
	}
}
declare namespace Ext.form {
	export interface ISlider extends Ext.field.IField {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of increment
		* @returns Number
		*/
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the value of value
		* @returns Number/Number[]
		*/
		getValue?(): any;
		/** [Method] Convenience method
		* @returns Object
		*/
		getValues?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of increment
		* @param increment Number The new value.
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of tabIndex
		* @param tabIndex Object The new value.
		*/
		setTabIndex?( tabIndex?:any ): void;
		/** [Method] Sets the value of value
		* @param value Number/Number[] The new value.
		*/
		setValue?( value?:any ): void;
		/** [Method] Convenience method
		* @param value Object
		*/
		setValues?( value?:any ): void;
	}
}
declare namespace Ext.field {
	export interface ISpinner extends Ext.field.INumber {
		/** [Config Option] (Boolean) */
		accelerateOnTapHold?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Boolean) */
		cycle?: boolean;
		/** [Config Option] (Number) */
		defaultValue?: number;
		/** [Config Option] (Boolean) */
		groupButtons?: boolean;
		/** [Config Option] (String) */
		increment?: string;
		/** [Config Option] (String) */
		incrementValue?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Method] Returns the value of accelerateOnTapHold
		* @returns Boolean
		*/
		getAccelerateOnTapHold?(): boolean;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of cycle
		* @returns Boolean
		*/
		getCycle?(): boolean;
		/** [Method] Returns the value of defaultValue
		* @returns Number
		*/
		getDefaultValue?(): number;
		/** [Method] Returns the value of groupButtons
		* @returns Boolean
		*/
		getGroupButtons?(): boolean;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue
		* @returns Number
		*/
		getStepValue?(): number;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of accelerateOnTapHold
		* @param accelerateOnTapHold Boolean The new value.
		*/
		setAccelerateOnTapHold?( accelerateOnTapHold?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of cycle
		* @param cycle Boolean The new value.
		*/
		setCycle?( cycle?:boolean ): void;
		/** [Method] Sets the value of defaultValue
		* @param defaultValue Number The new value.
		*/
		setDefaultValue?( defaultValue?:number ): void;
		/** [Method] Sets the value of groupButtons
		* @param groupButtons Boolean The new value.
		*/
		setGroupButtons?( groupButtons?:boolean ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue
		* @param stepValue Number The new value.
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Updates the component configuration
		* @param newComponent Object
		*/
		updateComponent?( newComponent?:any ): void;
	}
}
declare namespace Ext.form {
	export interface ISpinner extends Ext.field.INumber {
		/** [Config Option] (Boolean) */
		accelerateOnTapHold?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Boolean) */
		cycle?: boolean;
		/** [Config Option] (Number) */
		defaultValue?: number;
		/** [Config Option] (Boolean) */
		groupButtons?: boolean;
		/** [Config Option] (String) */
		increment?: string;
		/** [Config Option] (String) */
		incrementValue?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Method] Returns the value of accelerateOnTapHold
		* @returns Boolean
		*/
		getAccelerateOnTapHold?(): boolean;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of cycle
		* @returns Boolean
		*/
		getCycle?(): boolean;
		/** [Method] Returns the value of defaultValue
		* @returns Number
		*/
		getDefaultValue?(): number;
		/** [Method] Returns the value of groupButtons
		* @returns Boolean
		*/
		getGroupButtons?(): boolean;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue
		* @returns Number
		*/
		getStepValue?(): number;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of accelerateOnTapHold
		* @param accelerateOnTapHold Boolean The new value.
		*/
		setAccelerateOnTapHold?( accelerateOnTapHold?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of cycle
		* @param cycle Boolean The new value.
		*/
		setCycle?( cycle?:boolean ): void;
		/** [Method] Sets the value of defaultValue
		* @param defaultValue Number The new value.
		*/
		setDefaultValue?( defaultValue?:number ): void;
		/** [Method] Sets the value of groupButtons
		* @param groupButtons Boolean The new value.
		*/
		setGroupButtons?( groupButtons?:boolean ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue
		* @param stepValue Number The new value.
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Updates the component configuration
		* @param newComponent Object
		*/
		updateComponent?( newComponent?:any ): void;
	}
}
declare namespace Ext.field {
	export interface IText extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Boolean) */
		autoComplete?: boolean;
		/** [Config Option] (Boolean) */
		autoCorrect?: boolean;
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Boolean) */
		clearIcon?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Property] (String/Number) */
		startValue?: any;
		/** [Method] Attempts to forcefully blur input focus for the field
		* @returns Ext.field.Text This field
		*/
		blur?(): Ext.field.IText;
		/** [Method] Attempts to set the field as the active input focus
		* @returns Ext.field.Text This field
		*/
		focus?(): Ext.field.IText;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of autoComplete
		* @returns Boolean
		*/
		getAutoComplete?(): boolean;
		/** [Method] Returns the value of autoCorrect
		* @returns Boolean
		*/
		getAutoCorrect?(): boolean;
		/** [Method] Returns the value of clearIcon
		* @returns Boolean
		*/
		getClearIcon?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxLength
		* @returns Number
		*/
		getMaxLength?(): number;
		/** [Method] Returns the value of placeHolder
		* @returns String
		*/
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field
		* @returns Ext.field.Text this
		*/
		select?(): Ext.field.IText;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of autoComplete
		* @param autoComplete Boolean The new value.
		*/
		setAutoComplete?( autoComplete?:boolean ): void;
		/** [Method] Sets the value of autoCorrect
		* @param autoCorrect Boolean The new value.
		*/
		setAutoCorrect?( autoCorrect?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents Array The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any[] ): void;
		/** [Method] Sets the value of clearIcon
		* @param clearIcon Boolean The new value.
		*/
		setClearIcon?( clearIcon?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxLength
		* @param maxLength Number The new value.
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of placeHolder
		* @param placeHolder String The new value.
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.form {
	export interface IText extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Boolean) */
		autoComplete?: boolean;
		/** [Config Option] (Boolean) */
		autoCorrect?: boolean;
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Boolean) */
		clearIcon?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Property] (String/Number) */
		startValue?: any;
		/** [Method] Attempts to forcefully blur input focus for the field
		* @returns Ext.field.Text This field
		*/
		blur?(): Ext.field.IText;
		/** [Method] Attempts to set the field as the active input focus
		* @returns Ext.field.Text This field
		*/
		focus?(): Ext.field.IText;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of autoComplete
		* @returns Boolean
		*/
		getAutoComplete?(): boolean;
		/** [Method] Returns the value of autoCorrect
		* @returns Boolean
		*/
		getAutoCorrect?(): boolean;
		/** [Method] Returns the value of clearIcon
		* @returns Boolean
		*/
		getClearIcon?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxLength
		* @returns Number
		*/
		getMaxLength?(): number;
		/** [Method] Returns the value of placeHolder
		* @returns String
		*/
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns Mixed
		*/
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue
		* @returns Boolean true if this field has been changed from its original value (and is not disabled), false otherwise.
		*/
		isDirty?(): boolean;
		/** [Method] Resets the current field value back to the original value on this field when it was created
		* @returns Ext.field.Field this
		*/
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field
		* @returns Ext.field.Text this
		*/
		select?(): Ext.field.IText;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of autoComplete
		* @param autoComplete Boolean The new value.
		*/
		setAutoComplete?( autoComplete?:boolean ): void;
		/** [Method] Sets the value of autoCorrect
		* @param autoCorrect Boolean The new value.
		*/
		setAutoCorrect?( autoCorrect?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents Array The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any[] ): void;
		/** [Method] Sets the value of clearIcon
		* @param clearIcon Boolean The new value.
		*/
		setClearIcon?( clearIcon?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxLength
		* @param maxLength Number The new value.
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of placeHolder
		* @param placeHolder String The new value.
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.field {
	export interface ITextArea extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxRows
		* @returns Number
		*/
		getMaxRows?(): number;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxRows
		* @param maxRows Number The new value.
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.form {
	export interface ITextArea extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Returns the value of maxRows
		* @returns Number
		*/
		getMaxRows?(): number;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxRows
		* @param maxRows Number The new value.
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.field {
	export interface ITextAreaInput extends Ext.field.IInput {
	}
}
declare namespace Ext.field {
	export interface IToggle extends Ext.field.ISlider {
		/** [Config Option] (String) */
		activeLabel?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		inactiveLabel?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Method] Returns the value of activeLabel
		* @returns String
		*/
		getActiveLabel?(): string;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of inactiveLabel
		* @returns String
		*/
		getInactiveLabel?(): string;
		/** [Method] Returns the value of labelAlign
		* @returns String
		*/
		getLabelAlign?(): string;
		/** [Method] Returns the value of maxValueCls
		* @returns String
		*/
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls
		* @returns String
		*/
		getMinValueCls?(): string;
		/** [Method] Returns the value of value
		* @returns Number/Number[]
		*/
		getValue?(): any;
		/** [Method] Sets the value of activeLabel
		* @param activeLabel String The new value.
		*/
		setActiveLabel?( activeLabel?:string ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of inactiveLabel
		* @param inactiveLabel String The new value.
		*/
		setInactiveLabel?( inactiveLabel?:string ): void;
		/** [Method] Sets the value of labelAlign
		* @param labelAlign String The new value.
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of maxValueCls
		* @param maxValueCls String The new value.
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls
		* @param minValueCls String The new value.
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of the toggle
		* @param newValue Number 1 for toggled, 0 for untoggled.
		* @returns Object this
		*/
		setValue?( newValue?:number ): any;
		/** [Method] Toggles the value of this toggle field
		* @returns Object this
		*/
		toggle?(): any;
	}
}
declare namespace Ext.form {
	export interface IToggle extends Ext.field.ISlider {
		/** [Config Option] (String) */
		activeLabel?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		inactiveLabel?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Method] Returns the value of activeLabel
		* @returns String
		*/
		getActiveLabel?(): string;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of inactiveLabel
		* @returns String
		*/
		getInactiveLabel?(): string;
		/** [Method] Returns the value of labelAlign
		* @returns String
		*/
		getLabelAlign?(): string;
		/** [Method] Returns the value of maxValueCls
		* @returns String
		*/
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls
		* @returns String
		*/
		getMinValueCls?(): string;
		/** [Method] Returns the value of value
		* @returns Number/Number[]
		*/
		getValue?(): any;
		/** [Method] Sets the value of activeLabel
		* @param activeLabel String The new value.
		*/
		setActiveLabel?( activeLabel?:string ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of inactiveLabel
		* @param inactiveLabel String The new value.
		*/
		setInactiveLabel?( inactiveLabel?:string ): void;
		/** [Method] Sets the value of labelAlign
		* @param labelAlign String The new value.
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of maxValueCls
		* @param maxValueCls String The new value.
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls
		* @param minValueCls String The new value.
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of the toggle
		* @param newValue Number 1 for toggled, 0 for untoggled.
		* @returns Object this
		*/
		setValue?( newValue?:number ): any;
		/** [Method] Toggles the value of this toggle field
		* @returns Object this
		*/
		toggle?(): any;
	}
}
declare namespace Ext.field {
	export interface IUrl extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IUrl extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: boolean;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize
		* @returns Boolean
		*/
		getAutoCapitalize?(): boolean;
		/** [Method] Returns the value of component
		* @returns Object
		*/
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize
		* @param autoCapitalize Boolean The new value.
		*/
		setAutoCapitalize?( autoCapitalize?:boolean ): void;
		/** [Method] Sets the value of component
		* @param component Object The new value.
		*/
		setComponent?( component?:any ): void;
	}
}
declare namespace Ext.form {
	export interface IFieldSet extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		instructions?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] A convenient method to disable all fields in this FieldSet
		* @param newDisabled Object
		* @returns Ext.form.FieldSet This FieldSet
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IFieldSet;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of instructions
		* @param instructions String The new value.
		*/
		setInstructions?( instructions?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
	}
}
declare namespace Ext.form {
	export interface IPanel extends Ext.IPanel {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Boolean) */
		enableSubmissionForm?: boolean;
		/** [Config Option] (Object) */
		enctype?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Boolean) */
		multipartDetection?: boolean;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Object) */
		submitOnAction?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.dom.Element) */
		waitMsgTarget?: Ext.dom.IElement;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		waitTpl?: any;
		/** [Method] A convenient method to disable all fields in this form
		* @param newDisabled Object
		* @returns Ext.form.Panel This form.
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IPanel;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of baseParams
		* @returns Object
		*/
		getBaseParams?(): any;
		/** [Method] Returns the value of enableSubmissionForm
		* @returns Boolean
		*/
		getEnableSubmissionForm?(): boolean;
		/** [Method] Returns the value of enctype
		* @returns Object
		*/
		getEnctype?(): any;
		/** [Method] Returns the value of method
		* @returns String
		*/
		getMethod?(): string;
		/** [Method] Returns the value of multipartDetection
		* @returns Boolean
		*/
		getMultipartDetection?(): boolean;
		/** [Method] Returns the value of paramOrder
		* @returns String/String[]
		*/
		getParamOrder?(): any;
		/** [Method] Returns the value of paramsAsHash
		* @returns Boolean
		*/
		getParamsAsHash?(): boolean;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of standardSubmit
		* @returns Boolean
		*/
		getStandardSubmit?(): boolean;
		/** [Method] Returns the value of submitOnAction
		* @returns Object
		*/
		getSubmitOnAction?(): any;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Returns the value of trackResetOnLoad
		* @returns Boolean
		*/
		getTrackResetOnLoad?(): boolean;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns an object containing the value of each field in the form keyed to the field s name
		* @param enabled Boolean true to return only enabled fields.
		* @param all Boolean true to return all fields even if they don't have a name configured.
		* @returns Object Object mapping field name to its value.
		*/
		getValues?( enabled?:boolean, all?:boolean ): any;
		/** [Method] Hides a previously shown wait mask See showMask
		* @returns Ext.form.Panel this
		*/
		hideMask?(): Ext.form.IPanel;
		/** [Method] Performs an Ajax or Ext Direct call to load values for this form
		* @param options Object The configuration when loading this form. The following are the configurations when loading via Ajax only:
		* @returns Ext.data.Connection The request object.
		*/
		load?( options?:any ): Ext.data.IConnection;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		loadModel?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Resets all fields in the form back to their original values
		* @returns Ext.form.Panel This form.
		*/
		reset?(): Ext.form.IPanel;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of baseParams
		* @param baseParams Object The new value.
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of enableSubmissionForm
		* @param enableSubmissionForm Boolean The new value.
		*/
		setEnableSubmissionForm?( enableSubmissionForm?:boolean ): void;
		/** [Method] Sets the value of enctype
		* @param enctype Object The new value.
		*/
		setEnctype?( enctype?:any ): void;
		/** [Method] Sets the value of method
		* @param method String The new value.
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets the value of multipartDetection
		* @param multipartDetection Boolean The new value.
		*/
		setMultipartDetection?( multipartDetection?:boolean ): void;
		/** [Method] Sets the value of paramOrder
		* @param paramOrder String/String[] The new value.
		*/
		setParamOrder?( paramOrder?:any ): void;
		/** [Method] Sets the value of paramsAsHash
		* @param paramsAsHash Boolean The new value.
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		setRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Sets the value of standardSubmit
		* @param standardSubmit Boolean The new value.
		*/
		setStandardSubmit?( standardSubmit?:boolean ): void;
		/** [Method] Sets the value of submitOnAction
		* @param submitOnAction Object The new value.
		*/
		setSubmitOnAction?( submitOnAction?:any ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of trackResetOnLoad
		* @param trackResetOnLoad Boolean The new value.
		*/
		setTrackResetOnLoad?( trackResetOnLoad?:boolean ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the values of form fields in bulk
		* @param values Object field name => value mapping object.
		* @returns Ext.form.Panel This form.
		*/
		setValues?( values?:any ): Ext.form.IPanel;
		/** [Method] Shows a generic custom mask over a designated Element
		* @param cfg String/Object Either a string message or a configuration object supporting the following options: {  message : 'Please Wait',  cls : 'form-mask' }
		* @param target Object
		* @returns Ext.form.Panel This form
		*/
		showMask?( cfg?:any, target?:any ): Ext.form.IPanel;
		/** [Method] Performs a Ajax based submission of form values if standardSubmit is false or otherwise executes a standard HTML Fo
		* @param options Object The configuration when submitting this form. The following are the configurations when submitting via Ajax only:
		* @returns Ext.data.Connection The request object if the standardSubmit config is false. If the standardSubmit config is true, then the return value is undefined.
		*/
		submit?( options?:any ): Ext.data.IConnection;
	}
}
declare namespace Ext.form {
	export interface IFormPanel extends Ext.IPanel {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Boolean) */
		enableSubmissionForm?: boolean;
		/** [Config Option] (Object) */
		enctype?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Boolean) */
		multipartDetection?: boolean;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Object) */
		submitOnAction?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.dom.Element) */
		waitMsgTarget?: Ext.dom.IElement;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		waitTpl?: any;
		/** [Method] A convenient method to disable all fields in this form
		* @param newDisabled Object
		* @returns Ext.form.Panel This form.
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IPanel;
		/** [Method] Returns the value of api
		* @returns Object
		*/
		getApi?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of baseParams
		* @returns Object
		*/
		getBaseParams?(): any;
		/** [Method] Returns the value of enableSubmissionForm
		* @returns Boolean
		*/
		getEnableSubmissionForm?(): boolean;
		/** [Method] Returns the value of enctype
		* @returns Object
		*/
		getEnctype?(): any;
		/** [Method] Returns the value of method
		* @returns String
		*/
		getMethod?(): string;
		/** [Method] Returns the value of multipartDetection
		* @returns Boolean
		*/
		getMultipartDetection?(): boolean;
		/** [Method] Returns the value of paramOrder
		* @returns String/String[]
		*/
		getParamOrder?(): any;
		/** [Method] Returns the value of paramsAsHash
		* @returns Boolean
		*/
		getParamsAsHash?(): boolean;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of standardSubmit
		* @returns Boolean
		*/
		getStandardSubmit?(): boolean;
		/** [Method] Returns the value of submitOnAction
		* @returns Object
		*/
		getSubmitOnAction?(): any;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Returns the value of trackResetOnLoad
		* @returns Boolean
		*/
		getTrackResetOnLoad?(): boolean;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns an object containing the value of each field in the form keyed to the field s name
		* @param enabled Boolean true to return only enabled fields.
		* @param all Boolean true to return all fields even if they don't have a name configured.
		* @returns Object Object mapping field name to its value.
		*/
		getValues?( enabled?:boolean, all?:boolean ): any;
		/** [Method] Hides a previously shown wait mask See showMask
		* @returns Ext.form.Panel this
		*/
		hideMask?(): Ext.form.IPanel;
		/** [Method] Performs an Ajax or Ext Direct call to load values for this form
		* @param options Object The configuration when loading this form. The following are the configurations when loading via Ajax only:
		* @returns Ext.data.Connection The request object.
		*/
		load?( options?:any ): Ext.data.IConnection;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		loadModel?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Resets all fields in the form back to their original values
		* @returns Ext.form.Panel This form.
		*/
		reset?(): Ext.form.IPanel;
		/** [Method] Sets the value of api
		* @param api Object The new value.
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of baseParams
		* @param baseParams Object The new value.
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of enableSubmissionForm
		* @param enableSubmissionForm Boolean The new value.
		*/
		setEnableSubmissionForm?( enableSubmissionForm?:boolean ): void;
		/** [Method] Sets the value of enctype
		* @param enctype Object The new value.
		*/
		setEnctype?( enctype?:any ): void;
		/** [Method] Sets the value of method
		* @param method String The new value.
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets the value of multipartDetection
		* @param multipartDetection Boolean The new value.
		*/
		setMultipartDetection?( multipartDetection?:boolean ): void;
		/** [Method] Sets the value of paramOrder
		* @param paramOrder String/String[] The new value.
		*/
		setParamOrder?( paramOrder?:any ): void;
		/** [Method] Sets the value of paramsAsHash
		* @param paramsAsHash Boolean The new value.
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;
		/** [Method] Loads matching fields from a model instance into this form
		* @param record Ext.data.Model The model instance.
		* @returns Ext.form.Panel This form.
		*/
		setRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Sets the value of standardSubmit
		* @param standardSubmit Boolean The new value.
		*/
		setStandardSubmit?( standardSubmit?:boolean ): void;
		/** [Method] Sets the value of submitOnAction
		* @param submitOnAction Object The new value.
		*/
		setSubmitOnAction?( submitOnAction?:any ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of trackResetOnLoad
		* @param trackResetOnLoad Boolean The new value.
		*/
		setTrackResetOnLoad?( trackResetOnLoad?:boolean ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the values of form fields in bulk
		* @param values Object field name => value mapping object.
		* @returns Ext.form.Panel This form.
		*/
		setValues?( values?:any ): Ext.form.IPanel;
		/** [Method] Shows a generic custom mask over a designated Element
		* @param cfg String/Object Either a string message or a configuration object supporting the following options: {  message : 'Please Wait',  cls : 'form-mask' }
		* @param target Object
		* @returns Ext.form.Panel This form
		*/
		showMask?( cfg?:any, target?:any ): Ext.form.IPanel;
		/** [Method] Performs a Ajax based submission of form values if standardSubmit is false or otherwise executes a standard HTML Fo
		* @param options Object The configuration when submitting this form. The following are the configurations when submitting via Ajax only:
		* @returns Ext.data.Connection The request object if the standardSubmit config is false. If the standardSubmit config is true, then the return value is undefined.
		*/
		submit?( options?:any ): Ext.data.IConnection;
	}
}
declare namespace Ext {
	export interface IFunction {
	}
	export class Function {
		/** [Method] Create an alias to the provided method property with name methodName of object
		* @param object Object/Function
		* @param methodName String
		* @returns Function aliasFn
		*/
		static alias( object?:any, methodName?:string ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
		* @param fn Function The function to delegate.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function The new function.
		*/
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Create a clone of the provided method
		* @param method Function
		* @returns Function cloneFn
		*/
		static clone( method?:any ): any;
		/** [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu
		* @param fn Function The function to invoke on a buffered timer.
		* @param buffer Number The number of milliseconds by which to buffer the invocation of the function.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
		* @param args Array Override arguments for the call. Defaults to the arguments passed by the caller.
		* @returns Function A function which invokes the passed function after buffering for the specified time.
		*/
		static createBuffered( fn?:any, buffer?:number, scope?:any, args?:any[] ): any;
		/** [Method] Creates a delegate callback which when called executes after a specific delay
		* @param fn Function The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified.
		* @param delay Number The number of milliseconds to defer execution by whenever called.
		* @param scope Object The scope (this reference) used by the function at execution time.
		* @param args Array Override arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function A function which, when called, executes the original function after the specified delay.
		*/
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
		* @param fn Function The function to delegate.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function The new function.
		*/
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Creates an interceptor function
		* @param origFn Function The original function.
		* @param newFn Function The function to call before the original.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
		* @param returnValue Object The value to return if the passed function return false.
		* @returns Function The new function.
		*/
		static createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Create a combined function call sequence of the original function  the passed function
		* @param originalFn Function The original function.
		* @param newFn Function The function to sequence.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
		* @returns Function The new function.
		*/
		static createSequence( originalFn?:any, newFn?:any, scope?:any ): any;
		/** [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func
		* @param fn Function The function to execute at a regular time interval.
		* @param interval Number The interval, in milliseconds, on which the passed function is executed.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
		* @returns Function A function which invokes the passed function at the specified interval.
		*/
		static createThrottled( fn?:any, interval?:number, scope?:any ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope
		* @param fn Function The function to defer.
		* @param millis Number The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller.
		* @param appendArgs Boolean/Number if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Number The timeout id that can be used with clearTimeout().
		*/
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;
		/** [Method] A very commonly used method throughout the framework
		* @param fn Function
		* @returns Function flexSetter
		*/
		static flexSetter( fn?:any ): any;
		/** [Method] Adds behavior to an existing method that is executed after the original behavior of the function
		* @param object Object The target object
		* @param methodName String Name of the method to override
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
		* @param scope Object The scope to execute the interceptor function. Defaults to the object.
		* @returns Function The new function just created.
		*/
		static interceptAfter( object?:any, methodName?:string, fn?:any, scope?:any ): any;
		/** [Method] Adds behavior to an existing method that is executed before the original behavior of the function
		* @param object Object The target object
		* @param methodName String Name of the method to override
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
		* @param scope Object The scope to execute the interceptor function. Defaults to the object.
		* @returns Function The new function just created.
		*/
		static interceptBefore( object?:any, methodName?:string, fn?:any, scope?:any ): any;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args
		* @param fn Function The original function.
		* @param args Array The arguments to pass to new callback.
		* @param scope Object The scope (this reference) in which the function is executed.
		* @returns Function The new callback function.
		*/
		static pass( fn?:any, args?:any[], scope?:any ): any;
	}
}
declare namespace Ext.util {
	export interface IFunctions {
	}
	export class Functions {
		/** [Method] Create an alias to the provided method property with name methodName of object
		* @param object Object/Function
		* @param methodName String
		* @returns Function aliasFn
		*/
		static alias( object?:any, methodName?:string ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
		* @param fn Function The function to delegate.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function The new function.
		*/
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Create a clone of the provided method
		* @param method Function
		* @returns Function cloneFn
		*/
		static clone( method?:any ): any;
		/** [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu
		* @param fn Function The function to invoke on a buffered timer.
		* @param buffer Number The number of milliseconds by which to buffer the invocation of the function.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
		* @param args Array Override arguments for the call. Defaults to the arguments passed by the caller.
		* @returns Function A function which invokes the passed function after buffering for the specified time.
		*/
		static createBuffered( fn?:any, buffer?:number, scope?:any, args?:any[] ): any;
		/** [Method] Creates a delegate callback which when called executes after a specific delay
		* @param fn Function The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified.
		* @param delay Number The number of milliseconds to defer execution by whenever called.
		* @param scope Object The scope (this reference) used by the function at execution time.
		* @param args Array Override arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function A function which, when called, executes the original function after the specified delay.
		*/
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
		* @param fn Function The function to delegate.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function The new function.
		*/
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Creates an interceptor function
		* @param origFn Function The original function.
		* @param newFn Function The function to call before the original.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
		* @param returnValue Object The value to return if the passed function return false.
		* @returns Function The new function.
		*/
		static createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Create a combined function call sequence of the original function  the passed function
		* @param originalFn Function The original function.
		* @param newFn Function The function to sequence.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
		* @returns Function The new function.
		*/
		static createSequence( originalFn?:any, newFn?:any, scope?:any ): any;
		/** [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func
		* @param fn Function The function to execute at a regular time interval.
		* @param interval Number The interval, in milliseconds, on which the passed function is executed.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
		* @returns Function A function which invokes the passed function at the specified interval.
		*/
		static createThrottled( fn?:any, interval?:number, scope?:any ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope
		* @param fn Function The function to defer.
		* @param millis Number The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller.
		* @param appendArgs Boolean/Number if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Number The timeout id that can be used with clearTimeout().
		*/
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;
		/** [Method] A very commonly used method throughout the framework
		* @param fn Function
		* @returns Function flexSetter
		*/
		static flexSetter( fn?:any ): any;
		/** [Method] Adds behavior to an existing method that is executed after the original behavior of the function
		* @param object Object The target object
		* @param methodName String Name of the method to override
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
		* @param scope Object The scope to execute the interceptor function. Defaults to the object.
		* @returns Function The new function just created.
		*/
		static interceptAfter( object?:any, methodName?:string, fn?:any, scope?:any ): any;
		/** [Method] Adds behavior to an existing method that is executed before the original behavior of the function
		* @param object Object The target object
		* @param methodName String Name of the method to override
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
		* @param scope Object The scope to execute the interceptor function. Defaults to the object.
		* @returns Function The new function just created.
		*/
		static interceptBefore( object?:any, methodName?:string, fn?:any, scope?:any ): any;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args
		* @param fn Function The original function.
		* @param args Array The arguments to pass to new callback.
		* @param scope Object The scope (this reference) in which the function is executed.
		* @returns Function The new callback function.
		*/
		static pass( fn?:any, args?:any[], scope?:any ): any;
	}
}
declare namespace Ext.fx.animation {
	export interface IAbstract extends Ext.IEvented {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of delay
		* @returns Number
		*/
		getDelay?(): number;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of iteration
		* @returns Number
		*/
		getIteration?(): number;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of onBeforeEnd
		* @returns Object
		*/
		getOnBeforeEnd?(): any;
		/** [Method] Returns the value of onBeforeStart
		* @returns Object
		*/
		getOnBeforeStart?(): any;
		/** [Method] Returns the value of onEnd
		* @returns Object
		*/
		getOnEnd?(): any;
		/** [Method] Returns the value of preserveEndState
		* @returns Boolean
		*/
		getPreserveEndState?(): boolean;
		/** [Method] Returns the value of replacePrevious
		* @returns Boolean
		*/
		getReplacePrevious?(): boolean;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of delay
		* @param delay Number The new value.
		*/
		setDelay?( delay?:number ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of iteration
		* @param iteration Number The new value.
		*/
		setIteration?( iteration?:number ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of onBeforeEnd
		* @param onBeforeEnd Object The new value.
		*/
		setOnBeforeEnd?( onBeforeEnd?:any ): void;
		/** [Method] Sets the value of onBeforeStart
		* @param onBeforeStart Object The new value.
		*/
		setOnBeforeStart?( onBeforeStart?:any ): void;
		/** [Method] Sets the value of onEnd
		* @param onEnd Object The new value.
		*/
		setOnEnd?( onEnd?:any ): void;
		/** [Method] Sets the value of preserveEndState
		* @param preserveEndState Boolean The new value.
		*/
		setPreserveEndState?( preserveEndState?:boolean ): void;
		/** [Method] Sets the value of replacePrevious
		* @param replacePrevious Boolean The new value.
		*/
		setReplacePrevious?( replacePrevious?:boolean ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface ICube extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		direction?: string;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IFade extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IFadeIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IFadeOut extends Ext.fx.animation.IFade {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IFlip extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of half
		* @returns Boolean
		*/
		getHalf?(): boolean;
		/** [Method] Returns the value of out
		* @returns Object
		*/
		getOut?(): any;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of half
		* @param half Boolean The new value.
		*/
		setHalf?( half?:boolean ): void;
		/** [Method] Sets the value of out
		* @param out Object The new value.
		*/
		setOut?( out?:any ): void;
	}
}
declare namespace Ext.fx {
	export interface IAnimation extends Ext.IBase {
		/** [Config Option] (String) */
		type?: string;
	}
}
declare namespace Ext.fx.animation {
	export interface IPop extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IPopIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after
		* @returns Object
		*/
		getAfter?(): any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Sets the value of after
		* @param after Object The new value.
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IPopOut extends Ext.fx.animation.IPop {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before
		* @returns Object
		*/
		getBefore?(): any;
		/** [Method] Sets the value of before
		* @param before Object The new value.
		*/
		setBefore?( before?:any ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface ISlide extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of isElementBoxFit
		* @returns Boolean
		*/
		getIsElementBoxFit?(): boolean;
		/** [Method] Returns the value of offset
		* @returns Number
		*/
		getOffset?(): number;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Returns the value of useCssTransform
		* @returns Boolean
		*/
		getUseCssTransform?(): boolean;
		/** [Method] Sets the value of containerBox
		* @param containerBox String The new value.
		*/
		setContainerBox?( containerBox?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of elementBox
		* @param elementBox String The new value.
		*/
		setElementBox?( elementBox?:string ): void;
		/** [Method] Sets the value of isElementBoxFit
		* @param isElementBoxFit Boolean The new value.
		*/
		setIsElementBoxFit?( isElementBoxFit?:boolean ): void;
		/** [Method] Sets the value of offset
		* @param offset Number The new value.
		*/
		setOffset?( offset?:number ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
		/** [Method] Sets the value of useCssTransform
		* @param useCssTransform Boolean The new value.
		*/
		setUseCssTransform?( useCssTransform?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface ISlideIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of isElementBoxFit
		* @returns Boolean
		*/
		getIsElementBoxFit?(): boolean;
		/** [Method] Returns the value of offset
		* @returns Number
		*/
		getOffset?(): number;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Returns the value of useCssTransform
		* @returns Boolean
		*/
		getUseCssTransform?(): boolean;
		/** [Method] Sets the value of containerBox
		* @param containerBox String The new value.
		*/
		setContainerBox?( containerBox?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of elementBox
		* @param elementBox String The new value.
		*/
		setElementBox?( elementBox?:string ): void;
		/** [Method] Sets the value of isElementBoxFit
		* @param isElementBoxFit Boolean The new value.
		*/
		setIsElementBoxFit?( isElementBoxFit?:boolean ): void;
		/** [Method] Sets the value of offset
		* @param offset Number The new value.
		*/
		setOffset?( offset?:number ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
		/** [Method] Sets the value of useCssTransform
		* @param useCssTransform Boolean The new value.
		*/
		setUseCssTransform?( useCssTransform?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface ISlideOut extends Ext.fx.animation.ISlide {
	}
}
declare namespace Ext.fx.animation {
	export interface IWipe extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IWipeIn extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of easing
		* @returns String
		*/
		getEasing?(): string;
		/** [Method] Returns the value of out
		* @returns Boolean
		*/
		getOut?(): boolean;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing
		* @param easing String The new value.
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of out
		* @param out Boolean The new value.
		*/
		setOut?( out?:boolean ): void;
	}
}
declare namespace Ext.fx.animation {
	export interface IWipeOut extends Ext.fx.animation.IWipe {
	}
}
declare namespace Ext.fx.easing {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of startTime
		* @returns Number
		*/
		getStartTime?(): number;
		/** [Method] Returns the value of startValue
		* @returns Number
		*/
		getStartValue?(): number;
		/** [Method] Sets the value of startTime
		* @param startTime Number The new value.
		*/
		setStartTime?( startTime?:number ): void;
		/** [Method] Sets the value of startValue
		* @param startValue Number The new value.
		*/
		setStartValue?( startValue?:number ): void;
	}
}
declare namespace Ext.fx.easing {
	export interface IBounce extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration
		* @returns Number
		*/
		getAcceleration?(): number;
		/** [Method] Returns the value of springTension
		* @returns Number
		*/
		getSpringTension?(): number;
		/** [Method] Returns the value of startVelocity
		* @returns Number
		*/
		getStartVelocity?(): number;
		/** [Method] Sets the value of acceleration
		* @param acceleration Number The new value.
		*/
		setAcceleration?( acceleration?:number ): void;
		/** [Method] Sets the value of springTension
		* @param springTension Number The new value.
		*/
		setSpringTension?( springTension?:number ): void;
		/** [Method] Sets the value of startVelocity
		* @param startVelocity Number The new value.
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare namespace Ext.fx.easing {
	export interface IBoundMomentum extends Ext.fx.easing.IAbstract {
		/** [Config Option] (Object) */
		bounce?: any;
		/** [Config Option] (Number) */
		minVelocity?: number;
		/** [Config Option] (Object) */
		momentum?: any;
		/** [Config Option] (Number) */
		startVelocity?: number;
		/** [Method] Returns the value of bounce
		* @returns Object
		*/
		getBounce?(): any;
		/** [Method] Returns the value of maxMomentumValue
		* @returns Number
		*/
		getMaxMomentumValue?(): number;
		/** [Method] Returns the value of minMomentumValue
		* @returns Number
		*/
		getMinMomentumValue?(): number;
		/** [Method] Returns the value of minVelocity
		* @returns Number
		*/
		getMinVelocity?(): number;
		/** [Method] Returns the value of momentum
		* @returns Object
		*/
		getMomentum?(): any;
		/** [Method] Returns the value of startVelocity
		* @returns Number
		*/
		getStartVelocity?(): number;
		/** [Method] Sets the value of bounce
		* @param bounce Object The new value.
		*/
		setBounce?( bounce?:any ): void;
		/** [Method] Sets the value of maxMomentumValue
		* @param maxMomentumValue Number The new value.
		*/
		setMaxMomentumValue?( maxMomentumValue?:number ): void;
		/** [Method] Sets the value of minMomentumValue
		* @param minMomentumValue Number The new value.
		*/
		setMinMomentumValue?( minMomentumValue?:number ): void;
		/** [Method] Sets the value of minVelocity
		* @param minVelocity Number The new value.
		*/
		setMinVelocity?( minVelocity?:number ): void;
		/** [Method] Sets the value of momentum
		* @param momentum Object The new value.
		*/
		setMomentum?( momentum?:any ): void;
		/** [Method] Sets the value of startVelocity
		* @param startVelocity Number The new value.
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare namespace Ext.fx.easing {
	export interface IEaseIn extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of exponent
		* @returns Number
		*/
		getExponent?(): number;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of exponent
		* @param exponent Number The new value.
		*/
		setExponent?( exponent?:number ): void;
	}
}
declare namespace Ext.fx.easing {
	export interface IEaseOut extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of exponent
		* @returns Number
		*/
		getExponent?(): number;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of exponent
		* @param exponent Number The new value.
		*/
		setExponent?( exponent?:number ): void;
	}
}
declare namespace Ext.fx {
	export interface IEasing extends Ext.IBase {
	}
}
declare namespace Ext.fx.easing {
	export interface ILinear extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of endValue
		* @returns Number
		*/
		getEndValue?(): number;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of endValue
		* @param endValue Number The new value.
		*/
		setEndValue?( endValue?:number ): void;
	}
}
declare namespace Ext.fx.easing {
	export interface IMomentum extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration
		* @returns Number
		*/
		getAcceleration?(): number;
		/** [Method] Returns the value of friction
		* @returns Number
		*/
		getFriction?(): number;
		/** [Method] Returns the value of startVelocity
		* @returns Number
		*/
		getStartVelocity?(): number;
		/** [Method] Sets the value of acceleration
		* @param acceleration Number The new value.
		*/
		setAcceleration?( acceleration?:number ): void;
		/** [Method] Sets the value of friction
		* @param friction Number The new value.
		*/
		setFriction?( friction?:number ): void;
		/** [Method] Sets the value of startVelocity
		* @param startVelocity Number The new value.
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IAbstract extends Ext.IEvented {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of duration
		* @returns Object
		*/
		getDuration?(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of duration
		* @param duration Object The new value.
		*/
		setDuration?( duration?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface ICover extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface ICube extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IFade extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse
		* @returns Object
		*/
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse
		* @param reverse Object The new value.
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IFlip extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare namespace Ext.fx.layout {
	export interface ICard extends Ext.IBase {
	}
}
declare namespace Ext.fx.layout.card {
	export interface IPop extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IReveal extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IScroll extends Ext.fx.layout.card.IAbstract {
		/** [Method] Returns the value of duration
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Sets the value of duration
		* @param duration Number The new value.
		*/
		setDuration?( duration?:number ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IScrollCover extends Ext.fx.layout.card.IScroll {
	}
}
declare namespace Ext.fx.layout.card {
	export interface IScrollReveal extends Ext.fx.layout.card.IScroll {
	}
}
declare namespace Ext.fx.layout.card {
	export interface ISlide extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare namespace Ext.fx.layout.card {
	export interface IStyle extends Ext.fx.layout.card.IAbstract {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of inAnimation
		* @returns Object
		*/
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation
		* @returns Object
		*/
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation
		* @param inAnimation Object The new value.
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation
		* @param outAnimation Object The new value.
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare namespace Ext.fx.runner {
	export interface ICss extends Ext.IEvented {
	}
}
declare namespace Ext.fx.runner {
	export interface ICssAnimation extends Ext.fx.runner.ICss {
	}
}
declare namespace Ext.fx.runner {
	export interface ICssTransition extends Ext.fx.runner.ICss {
	}
}
declare namespace Ext.fx {
	export interface IRunner extends Ext.IBase {
	}
}
declare namespace Ext.fx {
	export interface IState extends Ext.IBase {
	}
}
declare namespace Ext {
	export interface IImg extends Ext.IComponent {
		/** [Config Option] (String) */
		backgroundCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		imageCls?: string;
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (String) */
		src?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of backgroundCls
		* @returns String
		*/
		getBackgroundCls?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of imageCls
		* @returns String
		*/
		getImageCls?(): string;
		/** [Method] Returns the value of mode
		* @returns String
		*/
		getMode?(): string;
		/** [Method] Returns the value of src
		* @returns String
		*/
		getSrc?(): string;
		/** [Method] Hides this Component optionally using an animation
		* @returns Ext.Component
		*/
		hide?(): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of backgroundCls
		* @param backgroundCls String The new value.
		*/
		setBackgroundCls?( backgroundCls?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of imageCls
		* @param imageCls String The new value.
		*/
		setImageCls?( imageCls?:string ): void;
		/** [Method] Sets the value of mode
		* @param mode String The new value.
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of src
		* @param src String The new value.
		*/
		setSrc?( src?:string ): void;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		show?(): Ext.IComponent;
	}
}
declare namespace Ext {
	export interface IIs {
	}
}
declare namespace Ext {
	export interface IItemCollection extends Ext.util.IMixedCollection {
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey
		* @param item Object
		* @returns Object The key for the passed item.
		*/
		getKey?( item?:any ): any;
	}
}
declare namespace Ext {
		/** [Property] (Boolean) */
		export var SSL_SECURE_URL: boolean;
		/** [Property] (Function) */
		export var emptyFn: any;
		/** [Property] (Boolean) */
		export var enableGarbageCollector: boolean;
		/** [Property] (Boolean) */
		export var enableListenerCollection: boolean;
		/** [Property] (String[]) */
		export var enumerables: string[];
		/** [Property] (Object) */
		export var frameStartTime: any;
		/** [Property] (Boolean) */
		export var isSecure: boolean;
		/** [Property] (String) */
		export var version: string;
		/** [Method] Loads Ext app Application class and starts it up with given configuration after the page is ready
		* @param config Object An object with the following config options:
		*/
		export function application( config?:any ): void;
		/** [Method] Copies all the properties of config to the specified object
		* @param object Object The receiver of the properties.
		* @param config Object The source of the properties.
		* @param defaults Object A different object that will also be applied for default values.
		* @returns Object returns obj
		*/
		export function apply( object?:any, config?:any, defaults?:any ): any;
		/** [Method] Copies all the properties of config to object if they don t already exist
		* @param object Object The receiver of the properties.
		* @param config Object The source of the properties.
		* @returns Object returns obj
		*/
		export function applyIf( object?:any, config?:any ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
		* @param fn Function The function to delegate.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
		* @param appendArgs Boolean/Number if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Function The new function.
		*/
		export function bind( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;
		/** [Method] Calls function after specified delay or right away when delay 0
		* @param callback Function The callback to execute.
		* @param scope Object The scope to execute in.
		* @param args Array The arguments to pass to the function.
		* @param delay Number Pass a number to delay the call by a number of milliseconds.
		*/
		export function callback( callback?:any, scope?:any, args?:any[], delay?:number ): void;
		/** [Method] Old alias to Ext Array clean
		* @param array Array
		* @returns Array results
		*/
		export function clean( array?:any[] ): any[];
		/** [Method] Clone almost any type of variable including array object DOM nodes and Date without keeping the old reference
		* @param item Object The variable to clone.
		* @returns Object clone
		*/
		export function clone( item?:any ): any;
		/** [Method] Copies a set of named properties from the source object to the destination object
		* @param dest Object The destination object.
		* @param source Object The source object.
		* @param names String/String[] Either an Array of property names, or a comma-delimited list of property names to copy.
		* @param usePrototypeKeys Boolean Pass true to copy keys off of the prototype as well as the instance.
		* @returns Object The modified object.
		*/
		export function copyTo( dest?:any, source?:any, names?:any, usePrototypeKeys?:boolean ): any;
		/** [Method] Instantiate a class by either full name alias or alternate name
		* @param name String
		* @param args Mixed Additional arguments after the name will be passed to the class' constructor.
		* @returns Object instance
		*/
		export function create( name?:string, args?:any ): any;
		/** [Method] Convenient shorthand see Ext ClassManager instantiateByAlias
		* @param alias String
		* @param args Mixed... Additional arguments after the alias will be passed to the class constructor.
		* @returns Object instance
		*/
		export function createByAlias( alias:string, ...args:any[] ): any;
		/** [Method] Creates an interceptor function
		* @param origFn Function The original function.
		* @param newFn Function The function to call before the original.
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
		* @param returnValue Object The value to return if the passed function return false.
		* @returns Function The new function.
		*/
		export function createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Old name for widget  */
		export function createWidget(): void;
		/** [Method] Shorthand for Ext JSON decode
		* @param json String The JSON string.
		* @param safe Boolean Whether to return null or throw an exception if the JSON is invalid.
		* @returns Object/null The resulting object.
		*/
		export function decode( json?:string, safe?:boolean ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope
		* @param fn Function The function to defer.
		* @param millis Number The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately.
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller.
		* @param appendArgs Boolean/Number if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
		* @returns Number The timeout id that can be used with clearTimeout().
		*/
		export function defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;
		/** [Method] Defines a class or override
		* @param className String The class name to create in string dot-namespaced format, for example: 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager' It is highly recommended to follow this simple convention: - The root and the class name are 'CamelCased' - Everything else is lower-cased
		* @param data Object The key - value pairs of properties to apply to this class. Property names can be of any valid strings, except those in the reserved listed below:  mixins statics config alias xtype (for Ext.Components only) self singleton alternateClassName override
		* @param createdFn Function Optional callback to execute after the class (or override) is created. The execution scope (this) will be the newly created class itself.
		* @returns Ext.Base
		*/
		export function define( className?:string, data?:any, createdFn?:any ): Ext.IBase;
		/** [Method] Attempts to destroy any objects passed to it by removing all event listeners removing them from the DOM if applicab
		* @param args Mixed... An Ext.Element, Ext.Component, or an Array of either of these to destroy.
		*/
		export function destroy( ...args:any[] ): void;
		/** [Method] Dispatches a request to a controller action  */
		export function dispatch(): void;
		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item
		* @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once.
		* @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index.
		* @param scope Object The scope (this reference) in which the specified function is executed.
		* @param reverse Boolean Reverse the iteration order (loop from the end to the beginning).
		* @returns Boolean See description for the fn parameter.
		*/
		export function each( iterable?:any, fn?:any, scope?:any, reverse?:boolean ): boolean;
		/** [Method] Shorthand for Ext JSON encode
		* @param o Object The variable to encode.
		* @returns String The JSON string.
		*/
		export function encode( o?:any ): string;
		/** [Method] Convenient shortcut to Ext Loader exclude
		* @param excludes Array
		* @returns Object object contains require method for chaining.
		*/
		export function exclude( excludes?:any[] ): any;
		/** [Method] This method deprecated
		* @param superclass Function
		* @param overrides Object
		* @returns Function The subclass constructor from the overrides parameter, or a generated one if not provided.
		*/
		export function extend( superclass?:any, overrides?:any ): any;
		/** [Method] A global factory method to instantiate a class from a config object
		* @param config Object The config object to instantiate or update an instance with.
		* @param classReference String The class to instantiate from.
		* @param instance Object The instance to update.
		* @param aliasNamespace String
		*/
		export function factory( config?:any, classReference?:string, instance?:any, aliasNamespace?:string ): void;
		/** [Method] Old alias to Ext Array flatten
		* @param array Array The array to flatten
		* @returns Array The 1-d array.
		*/
		export function flatten( array?:any[] ): any[];
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element
		* @param element String/HTMLElement The DOM node or id.
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global").
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found).
		*/
		export function fly( element?:any, named?:string ): Ext.dom.IElement;
		/** [Method] Retrieves Ext dom Element objects
		* @param element String/HTMLElement/Ext.Element The id of the node, a DOM Node or an existing Element.
		* @returns Ext.dom.Element The Element object (or null if no matching element was found).
		*/
		export function get( element?:any ): Ext.dom.IElement;
		/** [Method] Returns the current document body as an Ext Element
		* @returns Ext.Element The document body.
		*/
		export function getBody(): Ext.IElement;
		/** [Method] Convenient shorthand see Ext ClassManager getClass  */
		export function getClass(): void;
		/** [Method] Convenient shorthand for Ext ClassManager getName
		* @param object Ext.Class/Object
		* @returns String className
		*/
		export function getClassName( object?:any ): string;
		/** [Method] This is shorthand reference to Ext ComponentMgr get
		* @param id String The component id
		* @returns Ext.Component The Component, undefined if not found, or null if a Class was found.
		*/
		export function getCmp( id?:string ): Ext.IComponent;
		/** [Method] Returns the display name for object
		* @param object Mixed The object who's display name to determine.
		* @returns String The determined display name, or "Anonymous" if none found.
		*/
		export function getDisplayName( object?:any ): string;
		/** [Method] Returns the current HTML document object as an Ext Element
		* @returns Ext.Element The document.
		*/
		export function getDoc(): Ext.IElement;
		/** [Method] Return the dom node for the passed String id  dom node or Ext Element
		* @param el Mixed
		* @returns HTMLElement
		*/
		export function getDom( el?:any ): HTMLElement;
		/** [Method] Returns the current document head as an Ext Element
		* @returns Ext.Element The document head.
		*/
		export function getHead(): Ext.IElement;
		/** [Method] Returns the current orientation of the mobile device  */
		export function getOrientation(): void;
		/** [Method] Shortcut to Ext data StoreManager lookup
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration.
		* @returns Ext.data.Store
		*/
		export function getStore( store?:any ): Ext.data.IStore;
		/** [Method] Old alias to Ext String htmlDecode
		* @param value String The string to decode.
		* @returns String The decoded text.
		*/
		export function htmlDecode( value?:string ): string;
		/** [Method] Old alias to Ext String htmlEncode
		* @param value String The string to encode.
		* @returns String The encoded text.
		*/
		export function htmlEncode( value?:string ): string;
		/** [Method] Generates unique ids
		* @param el Mixed The element to generate an id for.
		* @param prefix String The id prefix.
		* @returns String The generated id.
		*/
		export function id( el?:any, prefix?:string ): string;
		/** [Method] Returns true if the passed value is a JavaScript Array false otherwise
		* @param target Object The target to test.
		* @returns Boolean
		*/
		export function isArray( target?:any ): boolean;
		/** [Method] Returns true if the passed value is a Boolean
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isBoolean( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a JavaScript Date object false otherwise
		* @param object Object The object to test.
		* @returns Boolean
		*/
		export function isDate( object?:any ): boolean;
		/** [Method] Returns true if the passed value is defined
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isDefined( value?:any ): boolean;
		/** [Method] Returns true if the passed value is an HTMLElement
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isElement( value?:any ): boolean;
		/** [Method] Returns true if the passed value is empty false otherwise
		* @param value Object The value to test.
		* @param allowEmptyString Boolean true to allow empty strings.
		* @returns Boolean
		*/
		export function isEmpty( value?:any, allowEmptyString?:boolean ): boolean;
		/** [Method] Returns true if the passed value is a JavaScript Function false otherwise
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isFunction( value?:any ): boolean;
		/** [Method] Returns true if the passed value is iterable false otherwise
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isIterable( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a String that matches the MS Date JSON encoding format
		* @param value String The string to test
		* @returns Boolean
		*/
		export function isMSDate( value?:string ): boolean;
		/** [Method] Returns true if the passed value is a number
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isNumber( value?:any ): boolean;
		/** [Method] Validates that a value is numeric
		* @param value Object Examples: 1, '1', '2.34'
		* @returns Boolean true if numeric, false otherwise.
		*/
		export function isNumeric( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a JavaScript Object false otherwise
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isObject( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a JavaScript primitive  a string number or Boolean
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isPrimitive( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a string
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isString( value?:any ): boolean;
		/** [Method] Returns true if the passed value is a TextNode
		* @param value Object The value to test.
		* @returns Boolean
		*/
		export function isTextNode( value?:any ): boolean;
		/** [Method] Iterates either an array or an object
		* @param object Object/Array The object or array to be iterated.
		* @param fn Function The function to be called for each iteration. See and Ext.Array.each and Ext.Object.each for detailed lists of arguments passed to this function depending on the given object type that is being iterated.
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to the object being iterated itself.
		*/
		export function iterate( object?:any, fn?:any, scope?:any ): void;
		/** [Method] Old alias to Ext Array max
		* @param array Array/NodeList The Array from which to select the maximum value.
		* @param comparisonFn Function a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1
		* @returns Object maxValue The maximum value
		*/
		export function max( array?:any, comparisonFn?:any ): any;
		/** [Method] Old alias to Ext Array mean
		* @param array Array The Array to calculate the mean value of.
		* @returns Number The mean.
		*/
		export function mean( array?:any[] ): number;
		/** [Method] A convenient alias method for Ext Object merge  */
		export function merge(): void;
		/** [Method] Old alias to Ext Array min
		* @param array Array/NodeList The Array from which to select the minimum value.
		* @param comparisonFn Function a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1
		* @returns Object minValue The minimum value.
		*/
		export function min( array?:any, comparisonFn?:any ): any;
		/** [Method] Creates namespaces to be used for scoping variables and classes so that they are not global
		* @param namespace1 String
		* @param namespace2 String
		* @param etc String
		* @returns Object The namespace object. If multiple arguments are passed, this will be the last namespace created.
		*/
		export function namespace( namespace1?:string, namespace2?:string, etc?:string ): any;
		/** [Method] Convenient alias for Ext namespace  */
		export function ns(): void;
		/** [Method] This method is deprecated please use Ext Number from instead */
		export function num(): void;
		/** [Method] Adds a listener to be notified when the document is ready and all dependencies are loaded
		* @param fn Function The method the event invokes.
		* @param scope Object The scope in which the handler function executes. Defaults to the browser window.
		* @param options Boolean Options object as passed to Ext.Element.addListener. It is recommended that the options {single: true} be used so that the handler is removed on first invocation.
		*/
		export function onReady( fn?:any, scope?:any, options?:boolean ): void;
		/** [Method] Proxy to Ext Base override
		* @param cls Object The class to override
		* @param overrides Object The properties to add to origClass. This should be specified as an object literal containing one or more properties.
		*/
		export function override( cls?:any, overrides?:any ): void;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args
		* @param fn Function The original function.
		* @param args Array The arguments to pass to new callback.
		* @param scope Object The scope (this reference) in which the function is executed.
		* @returns Function The new callback function.
		*/
		export function pass( fn?:any, args?:any[], scope?:any ): any;
		/** [Method] Old alias to Ext Array pluck
		* @param array Array/NodeList The Array of items to pluck the value from.
		* @param propertyName String The property name to pluck from each element.
		* @returns Array The value from each item in the Array.
		*/
		export function pluck( array?:any, propertyName?:string ): any[];
		/** [Method] Registers a new ptype  */
		export function preg(): void;
		/** [Method] Shorthand of Ext dom Query select
		* @param selector String The selector/xpath query (can be a comma separated list of selectors)
		* @param root HTMLElement/String The start of the query (defaults to document).
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
		*/
		export function query( selector?:string, root?:any ): HTMLElement[];
		/** [Method] Dispatches a request to a controller action adding to the History stack and updating the page url as necessary  */
		export function redirect(): void;
		/** [Method] Registers a new xtype  */
		export function reg(): void;
		/** [Method] Creates a new Application class from the specified config object  */
		export function regApplication(): void;
		/** [Method] Creates a new Controller class from the specified config object  */
		export function regController(): void;
		/** [Method] Registers new layout type  */
		export function regLayout(): void;
		/** [Method] Old way for creating Model classes
		* @param name String Name of the Model class.
		* @param config Object A configuration object for the Model you wish to create.
		* @returns Ext.data.Model The newly registered Model.
		*/
		export function regModel( name?:string, config?:any ): Ext.data.IModel;
		/** [Method] Creates a new store for the given id and config then registers it with the Store Manager
		* @param id String The id to set on the new store.
		* @param config Object The store config.
		*/
		export function regStore( id?:string, config?:any ): void;
		/** [Method] Removes this element from the document removes all DOM event listeners and deletes the cache reference
		* @param node HTMLElement The node to remove.
		*/
		export function removeNode( node?:HTMLElement ): void;
		/** [Method] Repaints the whole page  */
		export function repaint(): void;
		/** [Method] Convenient alias of Ext Loader require
		* @param expressions String/Array Can either be a string or an array of string.
		* @param fn Function The callback function.
		* @param scope Object The execution scope (this) of the callback function.
		* @param excludes String/Array Classes to be excluded, useful when being used with expressions.
		*/
		export function require( expressions?:any, fn?:any, scope?:any, excludes?:any ): void;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
		* @param selector String/HTMLElement[] The CSS selector or an array of elements
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false.
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement
		*/
		export function select( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;
		/** [Method] Ext setup  is the entry point to initialize a Sencha Touch application
		* @param config Object An object with the following config options:
		*/
		export function setup( config?:any ): void;
		/** [Method] Old alias to Ext Array sum
		* @param array Array The Array to calculate the sum value of.
		* @returns Number The sum.
		*/
		export function sum( array?:any[] ): number;
		/** [Method] Synchronous version of require convenient alias of Ext Loader syncRequire
		* @param expressions String/Array Can either be a string or an array of string
		* @param fn Function The callback function
		* @param scope Object The execution scope (this) of the callback function
		* @param excludes String/Array Classes to be excluded, useful when being used with expressions
		*/
		export function syncRequire( expressions?:any, fn?:any, scope?:any, excludes?:any ): void;
		/** [Method] Converts any iterable numeric indices and a length property into a true array
		* @param iterable Object the iterable object to be turned into a true Array.
		* @param start Number a zero-based index that specifies the start of extraction.
		* @param end Number a zero-based index that specifies the end of extraction.
		* @returns Array
		*/
		export function toArray( iterable?:any, start?:number, end?:number ): any[];
		/** [Method] Old alias to typeOf
		* @param value Object
		* @returns String
		*/
		export function type( value?:any ): string;
		/** [Method] Returns the type of the given variable in string format
		* @param value Object
		* @returns String
		*/
		export function typeOf( value?:any ): string;
		/** [Method] Old alias to Ext Array unique
		* @param array Array
		* @returns Array results
		*/
		export function unique( array?:any[] ): any[];
		/** [Method] Old alias to Ext String urlAppend
		* @param url String The URL to append to.
		* @param string String The content to append to the URL.
		* @returns String The resulting URL.
		*/
		export function urlAppend( url?:string, string?:string ): string;
		/** [Method] A convenient alias method for Ext Object fromQueryString  */
		export function urlDecode(): void;
		/** [Method] A convenient alias method for Ext Object toQueryString  */
		export function urlEncode(): void;
		/** [Method] Returns the given value itself if it s not empty as described in isEmpty returns the default value second argument
		* @param value Object The value to test.
		* @param defaultValue Object The value to return if the original value is empty.
		* @param allowBlank Boolean true to allow zero length strings to qualify as non-empty.
		* @returns Object value, if non-empty, else defaultValue.
		*/
		export function valueFrom( value?:any, defaultValue?:any, allowBlank?:boolean ): any;
		/** [Method] Convenient shorthand to create a widget by its xtype also see Ext ClassManager instantiateByAlias var button  Ext
		* @param name String
		* @returns Object instance
		*/
		export function widget( name?:string ): any;
}
declare namespace Ext {
	export interface IJSON {
	}
	export class JSON {
		/** [Method] Decodes parses a JSON string to an object
		* @param json String The JSON string.
		* @param safe Boolean Whether to return null or throw an exception if the JSON is invalid.
		* @returns Object/null The resulting object.
		*/
		static decode( json?:string, safe?:boolean ): any;
		/** [Method] Encodes an Object Array or other value
		* @param o Object The variable to encode.
		* @returns String The JSON string.
		*/
		static encode( o?:any ): string;
		/** [Method] Encodes a Date
		* @param d Date The Date to encode.
		* @returns String The string literal to use in a JSON string.
		*/
		static encodeDate( d?:any ): string;
	}
}
declare namespace Ext {
	export interface ILabel extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		html?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare namespace Ext.layout {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.layout {
	export interface IBox extends Ext.layout.IDefault {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		pack?: string;
		/** [Method] Returns the value of align
		* @returns String
		*/
		getAlign?(): string;
		/** [Method] Returns the value of orient
		* @returns String
		*/
		getOrient?(): string;
		/** [Method] Returns the value of pack
		* @returns String
		*/
		getPack?(): string;
		/** [Method]
		* @param item Object
		* @param isInner Object
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of align
		* @param align String The new value.
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the value of orient
		* @param orient String The new value.
		*/
		setOrient?( orient?:string ): void;
		/** [Method] Sets the value of pack
		* @param pack String The new value.
		*/
		setPack?( pack?:string ): void;
	}
}
declare namespace Ext.layout {
	export interface ICard extends Ext.layout.IDefault {
		/** [Method]  */
		destroy?(): void;
		/** [Method]
		* @param item Object
		* @param isInner Object
		* @param destroying Object
		*/
		onItemInnerStateChange?( item?:any, isInner?:any, destroying?:any ): void;
	}
}
declare namespace Ext.layout {
	export interface IDefault extends Ext.layout.IAbstract {
		/** [Config Option] (Ext.fx.layout.Card) */
		animation?: Ext.fx.layout.ICard;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of animation
		* @returns Ext.fx.layout.Card
		*/
		getAnimation?(): Ext.fx.layout.ICard;
		/** [Method]
		* @param item Ext.Component
		* @param isInner Boolean
		* @param destroying Boolean
		*/
		onItemInnerStateChange?( item?:Ext.IComponent, isInner?:boolean, destroying?:boolean ): void;
		/** [Method] Sets the value of animation
		* @param animation Ext.fx.layout.Card The new value.
		*/
		setAnimation?( animation?:Ext.fx.layout.ICard ): void;
	}
}
declare namespace Ext.layout {
	export interface IFit extends Ext.layout.IDefault {
		/** [Method]
		* @param item Object
		* @param isInner Object
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
	}
}
declare namespace Ext.layout {
	export interface IFlexBox extends Ext.layout.IBox {
		/** [Config Option] (String) */
		align?: string;
		/** [Method] Returns the value of align
		* @returns String
		*/
		getAlign?(): string;
		/** [Method]
		* @param item Object
		* @param isInner Object
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of align
		* @param align String The new value.
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the flex of an item in this box layout
		* @param item Ext.Component The item of this layout which you want to update the flex of.
		* @param flex Number The flex to set on this method
		*/
		setItemFlex?( item?:Ext.IComponent, flex?:number ): void;
	}
}
declare namespace Ext.layout {
	export interface IFloat extends Ext.layout.IDefault {
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method]
		* @param item Object
		* @param isInner Object
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
	}
}
declare namespace Ext.layout {
	export interface IHBox extends Ext.layout.IFlexBox {
	}
}
declare namespace Ext.layout {
	export interface IVBox extends Ext.layout.IFlexBox {
		/** [Method] Returns the value of orient
		* @returns String
		*/
		getOrient?(): string;
		/** [Method] Sets the value of orient
		* @param orient String The new value.
		*/
		setOrient?( orient?:string ): void;
	}
}
declare namespace Ext.layout.wrapper {
	export interface IBoxDock extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of bodyElement
		* @returns Object
		*/
		getBodyElement?(): any;
		/** [Method] Returns the value of container
		* @returns Object
		*/
		getContainer?(): any;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of innerWrapper
		* @returns Object
		*/
		getInnerWrapper?(): any;
		/** [Method] Returns the value of sizeState
		* @returns Boolean
		*/
		getSizeState?(): boolean;
		/** [Method] Sets the value of bodyElement
		* @param bodyElement Object The new value.
		*/
		setBodyElement?( bodyElement?:any ): void;
		/** [Method] Sets the value of container
		* @param container Object The new value.
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of innerWrapper
		* @param innerWrapper Object The new value.
		*/
		setInnerWrapper?( innerWrapper?:any ): void;
		/** [Method] Sets the value of sizeState
		* @param sizeState Boolean The new value.
		*/
		setSizeState?( sizeState?:boolean ): void;
	}
}
declare namespace Ext.layout.wrapper {
	export interface IDock extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of bodyElement
		* @returns Object
		*/
		getBodyElement?(): any;
		/** [Method] Returns the value of container
		* @returns Object
		*/
		getContainer?(): any;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of innerWrapper
		* @returns Object
		*/
		getInnerWrapper?(): any;
		/** [Method] Returns the value of sizeState
		* @returns Boolean
		*/
		getSizeState?(): boolean;
		/** [Method] Sets the value of bodyElement
		* @param bodyElement Object The new value.
		*/
		setBodyElement?( bodyElement?:any ): void;
		/** [Method] Sets the value of container
		* @param container Object The new value.
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of innerWrapper
		* @param innerWrapper Object The new value.
		*/
		setInnerWrapper?( innerWrapper?:any ): void;
		/** [Method] Sets the value of sizeState
		* @param sizeState Boolean The new value.
		*/
		setSizeState?( sizeState?:boolean ): void;
	}
}
declare namespace Ext.layout.wrapper {
	export interface IInner extends Ext.IBase {
		/** [Method] Returns the value of container
		* @returns Object
		*/
		getContainer?(): any;
		/** [Method] Returns the value of sizeState
		* @returns Object
		*/
		getSizeState?(): any;
		/** [Method] Sets the value of container
		* @param container Object The new value.
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of sizeState
		* @param sizeState Object The new value.
		*/
		setSizeState?( sizeState?:any ): void;
	}
}
declare namespace Ext {
	export interface ILoader {
	}
	export class Loader {
		/** [Config Option] (Boolean) */
		static disableCaching: boolean;
		/** [Config Option] (String) */
		static disableCachingParam: string;
		/** [Config Option] (Boolean) */
		static enabled: boolean;
		/** [Config Option] (Object) */
		static paths: any;
		/** [Property] (Array) */
		static history: any[];
		/** [Method] Sets a batch of path entries
		* @param paths Object a set of className: path mappings
		* @returns Ext.Loader this
		*/
		static addClassPathMappings( paths?:Object ): Ext.ILoader;
		/** [Method] Explicitly exclude files from being loaded
		* @param excludes Array
		* @returns Object object contains require method for chaining.
		*/
		static exclude( excludes?:any[] ): any;
		/** [Method] Get the config value corresponding to the specified name
		* @param name String The config property name.
		* @returns Object/Mixed
		*/
		static getConfig( name?:string ): any;
		/** [Method] Translates a className to a file path by adding the the proper prefix and converting the  s to  s
		* @param className String
		* @returns String path
		*/
		static getPath( className?:string ): string;
		/** [Method] Add a new listener to be executed when all required scripts are fully loaded
		* @param fn Function The function callback to be executed.
		* @param scope Object The execution scope (this) of the callback function.
		* @param withDomReady Boolean Whether or not to wait for document DOM ready as well.
		*/
		static onReady( fn?:any, scope?:any, withDomReady?:boolean ): void;
		/** [Method] Loads all classes by the given names and all their direct dependencies optionally executes the given callback functi
		* @param expressions String/Array Can either be a string or an array of string.
		* @param fn Function The callback function.
		* @param scope Object The execution scope (this) of the callback function.
		* @param excludes String/Array Classes to be excluded, useful when being used with expressions.
		*/
		static require( expressions?:any, fn?:any, scope?:any, excludes?:any ): void;
		/** [Method] Set the configuration for the loader
		* @param name Object/String The config object to override the default values or name of a single config setting when also passing the second parameter.
		* @param value Mixed The value for the config setting.
		* @returns Ext.Loader this
		*/
		static setConfig( name?:any, value?:any ): Ext.ILoader;
		/** [Method] Sets the path of a namespace
		* @param name String/Object See flexSetter
		* @param path String See flexSetter
		* @returns Ext.Loader this
		*/
		static setPath( name?:any, path?:string ): Ext.ILoader;
		/** [Method] Synchronously loads all classes by the given names and all their direct dependencies optionally executes the given c
		* @param expressions String/Array Can either be a string or an array of string
		* @param fn Function The callback function
		* @param scope Object The execution scope (this) of the callback function
		* @param excludes String/Array Classes to be excluded, useful when being used with expressions
		*/
		static syncRequire( expressions?:any, fn?:any, scope?:any, excludes?:any ): void;
	}
}
declare namespace Ext {
	export interface ILoadMask extends Ext.IMask {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		indicator?: boolean;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (String) */
		messageCls?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (String) */
		msgCls?: string;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Method] Changes the data store bound to this LoadMask
		* @param store Ext.data.Store The store to bind to this LoadMask
		*/
		bindStore?( store?:Ext.data.IStore ): void;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of indicator
		* @returns Boolean
		*/
		getIndicator?(): boolean;
		/** [Method] Returns the value of message
		* @returns String
		*/
		getMessage?(): string;
		/** [Method] Returns the value of messageCls
		* @returns String
		*/
		getMessageCls?(): string;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of indicator
		* @param indicator Boolean The new value.
		*/
		setIndicator?( indicator?:boolean ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of messageCls
		* @param messageCls String The new value.
		*/
		setMessageCls?( messageCls?:string ): void;
	}
}
declare namespace Ext {
	export interface ILogger {
	}
	export class Logger {
		/** [Method] Convenience method for log with priority deprecate */
		static deprecate(): void;
		/** [Method] Convenience method for log with priority error */
		static error(): void;
		/** [Method] Convenience method for log with priority info */
		static info(): void;
		/** [Method] Logs a message to help with debugging
		* @param message String Message to log.
		* @param priority Number Priority of the log message.
		* @returns Ext.Logger this
		*/
		static log( message?:string, priority?:number ): Ext.ILogger;
		/** [Method] Convenience method for log with priority verbose */
		static verbose(): void;
		/** [Method] Convenience method for log with priority warn */
		static warn(): void;
	}
}
declare namespace Ext {
	export interface IMap extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Ext.util.Geolocation) */
		geo?: Ext.util.IGeolocation;
		/** [Config Option] (google.maps.Map) */
		map?: any;
		/** [Config Option] (Object) */
		mapListeners?: any;
		/** [Config Option] (Object) */
		mapOptions?: any;
		/** [Config Option] (Boolean) */
		maskMap?: boolean;
		/** [Config Option] (String) */
		maskMapCls?: string;
		/** [Config Option] (Boolean/Ext.util.Geolocation) */
		useCurrentLocation?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of geo
		* @returns Ext.util.Geolocation
		*/
		getGeo?(): Ext.util.IGeolocation;
		/** [Method] Returns the value of map
		* @returns google.maps.Map
		*/
		getMap?(): any;
		/** [Method] Returns the value of mapListeners
		* @returns Object
		*/
		getMapListeners?(): any;
		/** [Method] Returns the state of the Map
		* @returns Object mapOptions
		*/
		getState?(): any;
		/** [Method] Returns the value of useCurrentLocation
		* @returns Boolean/Ext.util.Geolocation
		*/
		getUseCurrentLocation?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of geo
		* @param geo Ext.util.Geolocation The new value.
		*/
		setGeo?( geo?:Ext.util.IGeolocation ): void;
		/** [Method] Sets the value of map
		* @param map google.maps.Map The new value.
		*/
		setMap?( map?:any ): void;
		/** [Method] Moves the map center to the designated coordinates hash of the form  latitude 37 381592 longitude  122 135672
		* @param coordinates Object/google.maps.LatLng Object representing the desired Latitude and longitude upon which to center the map.
		*/
		setMapCenter?( coordinates?:any ): void;
		/** [Method] Sets the value of mapListeners
		* @param mapListeners Object The new value.
		*/
		setMapListeners?( mapListeners?:any ): void;
		/** [Method] Sets the value of mapOptions
		* @param mapOptions Object The new value.
		*/
		setMapOptions?( mapOptions?:any ): void;
		/** [Method] Sets the value of useCurrentLocation
		* @param useCurrentLocation Boolean/Ext.util.Geolocation The new value.
		*/
		setUseCurrentLocation?( useCurrentLocation?:any ): void;
		/** [Method] Moves the map center to the designated coordinates hash of the form  latitude 37 381592 longitude  122 135672
		* @param coordinates Object/google.maps.LatLng Object representing the desired Latitude and longitude upon which to center the map.
		*/
		update?( coordinates?:any ): void;
	}
}
declare namespace Ext {
	export interface IMask extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		transparent?: boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of transparent
		* @returns Boolean
		*/
		getTransparent?(): boolean;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of transparent
		* @param transparent Boolean The new value.
		*/
		setTransparent?( transparent?:boolean ): void;
	}
}
declare namespace Ext {
	export interface IMedia extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoPause?: boolean;
		/** [Config Option] (Boolean) */
		autoResume?: boolean;
		/** [Config Option] (Boolean) */
		enableControls?: boolean;
		/** [Config Option] (Boolean) */
		loop?: boolean;
		/** [Config Option] (Ext.Element) */
		media?: Ext.IElement;
		/** [Config Option] (Boolean) */
		muted?: boolean;
		/** [Config Option] (Boolean) */
		preload?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Number) */
		volume?: number;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoPause
		* @returns Boolean
		*/
		getAutoPause?(): boolean;
		/** [Method] Returns the value of autoResume
		* @returns Boolean
		*/
		getAutoResume?(): boolean;
		/** [Method] Returns the current time of the media in seconds
		* @returns Number
		*/
		getCurrentTime?(): number;
		/** [Method] Returns the duration of the media in seconds
		* @returns Number
		*/
		getDuration?(): number;
		/** [Method] Returns the value of enableControls
		* @returns Boolean
		*/
		getEnableControls?(): boolean;
		/** [Method] Returns the value of loop
		* @returns Boolean
		*/
		getLoop?(): boolean;
		/** [Method] Returns the value of media
		* @returns Ext.Element
		*/
		getMedia?(): Ext.IElement;
		/** [Method] Returns the value of muted
		* @returns Boolean
		*/
		getMuted?(): boolean;
		/** [Method] Returns the value of preload
		* @returns Boolean
		*/
		getPreload?(): boolean;
		/** [Method] Returns the value of url
		* @returns String
		*/
		getUrl?(): string;
		/** [Method] Returns the value of volume
		* @returns Number
		*/
		getVolume?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns if the media is currently playing
		* @returns Boolean playing true if the media is playing.
		*/
		isPlaying?(): boolean;
		/** [Method] Pauses media playback  */
		pause?(): void;
		/** [Method] Starts or resumes media playback  */
		play?(): void;
		/** [Method] Sets the value of autoPause
		* @param autoPause Boolean The new value.
		*/
		setAutoPause?( autoPause?:boolean ): void;
		/** [Method] Sets the value of autoResume
		* @param autoResume Boolean The new value.
		*/
		setAutoResume?( autoResume?:boolean ): void;
		/** [Method] Sets the value of enableControls
		* @param enableControls Boolean The new value.
		*/
		setEnableControls?( enableControls?:boolean ): void;
		/** [Method] Sets the value of loop
		* @param loop Boolean The new value.
		*/
		setLoop?( loop?:boolean ): void;
		/** [Method] Sets the value of media
		* @param media Ext.Element The new value.
		*/
		setMedia?( media?:Ext.IElement ): void;
		/** [Method] Sets the value of muted
		* @param muted Boolean The new value.
		*/
		setMuted?( muted?:boolean ): void;
		/** [Method] Sets the value of preload
		* @param preload Boolean The new value.
		*/
		setPreload?( preload?:boolean ): void;
		/** [Method] Sets the value of url
		* @param url String The new value.
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of volume
		* @param volume Number The new value.
		*/
		setVolume?( volume?:number ): void;
		/** [Method] Stops media playback and returns to the beginning  */
		stop?(): void;
		/** [Method] Toggles the media playback state  */
		toggle?(): void;
		/** [Method] Updates the controls of the video element
		* @param enableControls Object
		*/
		updateEnableControls?( enableControls?:any ): void;
		/** [Method] Updates the loop setting of the media element
		* @param loop Object
		*/
		updateLoop?( loop?:any ): void;
		/** [Method] Sets the URL of the media element
		* @param newUrl Object
		*/
		updateUrl?( newUrl?:any ): void;
	}
}
declare namespace Ext {
	export interface IMenu extends Ext.ISheet {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Method] Only fire the hide event if it is initialized */
		doSetHidden?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of height
		* @returns String
		*/
		getHeight?(): string;
		/** [Method] Returns the value of left
		* @returns Number
		*/
		getLeft?(): number;
		/** [Method] Returns the value of right
		* @returns Number
		*/
		getRight?(): number;
		/** [Method] Returns the value of width
		* @returns String
		*/
		getWidth?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number The new value.
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of height
		* @param height String The new value.
		*/
		setHeight?( height?:string ): void;
		/** [Method] Sets the value of left
		* @param left Number The new value.
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right
		* @param right Number The new value.
		*/
		setRight?( right?:number ): void;
		/** [Method] Sets the value of width
		* @param width String The new value.
		*/
		setWidth?( width?:string ): void;
	}
}
declare namespace Ext {
	export interface IMessageBox extends Ext.ISheet {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Array/Object) */
		buttons?: any;
		/** [Config Option] (Number) */
		defaultTextHeight?: number;
		/** [Config Option] (Object) */
		hideAnimation?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (Object) */
		prompt?: any;
		/** [Config Option] (Object) */
		showAnimation?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt
		* @param title String The title bar text.
		* @param message String The message box body text.
		* @param fn Function A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to: the browser window
		* @returns Ext.MessageBox this
		*/
		alert?( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm
		* @param title String The title bar text.
		* @param message String The message box body text.
		* @param fn Function A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to: the browser window
		* @returns Ext.MessageBox this
		*/
		confirm?( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of buttons
		* @returns Array/Object
		*/
		getButtons?(): any;
		/** [Method] Returns the value of defaultTextHeight
		* @returns Number
		*/
		getDefaultTextHeight?(): number;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of prompt
		* @returns Object
		*/
		getPrompt?(): any;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of zIndex
		* @returns Number
		*/
		getZIndex?(): number;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of buttons
		* @param buttons Array/Object The new value.
		*/
		setButtons?( buttons?:any ): void;
		/** [Method] Sets the value of defaultTextHeight
		* @param defaultTextHeight Number The new value.
		*/
		setDefaultTextHeight?( defaultTextHeight?:number ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation Object The new value.
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets icon
		* @param iconCls String A CSS class name or empty string to clear the icon.
		* @returns Ext.MessageBox this
		*/
		setIcon?( iconCls?:string ): Ext.IMessageBox;
		/** [Method] Sets the value of iconCls
		* @param iconCls String The new value.
		*/
		setIconCls?( iconCls?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of prompt
		* @param prompt Object The new value.
		*/
		setPrompt?( prompt?:any ): void;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation Object The new value.
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of zIndex
		* @param zIndex Number The new value.
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Displays the Ext MessageBox with a specified configuration
		* @param config Object An object with the following config options:
		* @returns Ext.MessageBox this
		*/
		show?( config?:any ): Ext.IMessageBox;
		/** [Method] Sets the value of message
		* @param message String The new value.
		* @returns Ext.MessageBox this
		*/
		updateText?( message?:string ): Ext.IMessageBox;
	}
}
declare namespace Ext.mixin {
	export interface IBindable extends Ext.mixin.IMixin {
	}
}
declare namespace Ext.mixin {
	export interface IFilterable extends Ext.mixin.IMixin {
		/** [Config Option] (String) */
		filterRoot?: string;
		/** [Config Option] (Array) */
		filters?: any[];
		/** [Property] (Object) */
		currentSortFn?: any;
		/** [Property] (Boolean) */
		dirtyFilterFn?: boolean;
		/** [Property] (Boolean) */
		filtered?: boolean;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		addFilter?( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Array An array with filters. A filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		addFilters?( filters?:any[] ): any;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param data Array The array you want to have sorted.
		* @returns Array The array you passed after it is sorted.
		*/
		filter?( data?:any[] ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		getFilterFn?(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		getFilterRoot?(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		getFilters?(): any[];
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		insertFilter?( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		insertFilters?( index?:number, filters?:any[] ): any[];
		/** [Method] This method removes all the filters in a passed array
		* @param filters Array Each value in the array can be a string (property name), function (sorterFn), an object containing a property and value keys or Sorter instance.
		*/
		removeFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		setFilterRoot?( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		setFilters?( filters?:any[] ): void;
	}
}
declare namespace Ext.mixin {
	export interface IIdentifiable extends Ext.IBase {
		/** [Method] Retrieves the id of this component
		* @returns any id
		*/
		getId?(): any;
	}
}
declare namespace Ext.mixin {
	export interface IMixin extends Ext.IBase {
	}
}
declare namespace Ext.mixin {
	export interface IObservable extends Ext.mixin.IMixin,Ext.mixin.IIdentifiable {
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Retrieves the id of this component
		* @returns any id
		*/
		getId?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IObservable extends Ext.mixin.IMixin,Ext.mixin.IIdentifiable {
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Retrieves the id of this component
		* @returns any id
		*/
		getId?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.mixin {
	export interface IProgressable extends Ext.mixin.IMixin {
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (Number) */
		maxProgressInput?: number;
		/** [Config Option] (Number) */
		maxProgressOutput?: number;
		/** [Config Option] (Number) */
		minProgressInput?: number;
		/** [Config Option] (Number) */
		minProgressOutput?: number;
		/** [Config Option] (String) */
		state?: string;
		/** [Method] Returns the value of dynamic
		* @returns Boolean
		*/
		getDynamic?(): boolean;
		/** [Method] Returns the value of maxProgressInput
		* @returns Number
		*/
		getMaxProgressInput?(): number;
		/** [Method] Returns the value of maxProgressOutput
		* @returns Number
		*/
		getMaxProgressOutput?(): number;
		/** [Method] Returns the value of minProgressInput
		* @returns Number
		*/
		getMinProgressInput?(): number;
		/** [Method] Returns the value of minProgressOutput
		* @returns Number
		*/
		getMinProgressOutput?(): number;
		/** [Method] Returns the value of state
		* @returns String
		*/
		getState?(): string;
		/** [Method] Sets the value of dynamic
		* @param dynamic Boolean The new value.
		*/
		setDynamic?( dynamic?:boolean ): void;
		/** [Method] Sets the value of maxProgressInput
		* @param maxProgressInput Number The new value.
		*/
		setMaxProgressInput?( maxProgressInput?:number ): void;
		/** [Method] Sets the value of maxProgressOutput
		* @param maxProgressOutput Number The new value.
		*/
		setMaxProgressOutput?( maxProgressOutput?:number ): void;
		/** [Method] Sets the value of minProgressInput
		* @param minProgressInput Number The new value.
		*/
		setMinProgressInput?( minProgressInput?:number ): void;
		/** [Method] Sets the value of minProgressOutput
		* @param minProgressOutput Number The new value.
		*/
		setMinProgressOutput?( minProgressOutput?:number ): void;
		/** [Method] Sets the value of state
		* @param state String The new value.
		*/
		setState?( state?:string ): void;
	}
}
declare namespace Ext.mixin {
	export interface ISelectable extends Ext.mixin.IMixin {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (String) */
		mode?: string;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Deselects the given record s
		* @param records Number/Array/Ext.data.Model The record(s) to deselect. Can also be a number to reference by index.
		* @param suppressEvent Boolean If true the deselect event will not be fired.
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Deselects all records
		* @param supress Object
		*/
		deselectAll?( supress?:any ): void;
		/** [Method] Deselects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param suppressEvent Boolean Set to false to not fire a deselect event.
		*/
		doDeselect?( records?:any, suppressEvent?:boolean ): void;
		/** [Method] Selects a record instance by record instance or index
		* @param records Ext.data.Model/Number An array of records or an index.
		* @param keepExisting Boolean
		* @param suppressEvent Boolean Set to false to not fire a select event.
		*/
		doSelect?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Returns the value of allowDeselect
		* @returns Boolean
		*/
		getAllowDeselect?(): boolean;
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getCount?(): number;
		/** [Method] Returns the value of deselectOnContainerClick
		* @returns Boolean
		*/
		getDeselectOnContainerClick?(): boolean;
		/** [Method] Returns the value of disableSelection
		* @returns Boolean
		*/
		getDisableSelection?(): boolean;
		/** [Method] Returns the array of previously selected items
		* @returns Array The previous selection.
		*/
		getLastSelected?(): any[];
		/** [Method] Returns the value of mode
		* @returns String
		*/
		getMode?(): string;
		/** [Method] Returns an array of the currently selected records
		* @returns Array An array of selected records.
		*/
		getSelection?(): any[];
		/** [Method] Returns the number of selections
		* @returns Number
		*/
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable
		* @returns String The current mode.
		*/
		getSelectionMode?(): string;
		/** [Method] Returns true if there is a selected record
		* @returns Boolean
		*/
		hasSelection?(): boolean;
		/** [Method] Returns true if the Selectable is currently locked
		* @returns Boolean True if currently locked
		*/
		isLocked?(): boolean;
		/** [Method] Returns true if the specified row is selected
		* @param record Ext.data.Model/Number The record or index of the record to check.
		* @returns Boolean
		*/
		isSelected?( record?:any ): boolean;
		/** [Method] Adds the given records to the currently selected set
		* @param records Ext.data.Model/Array/Number The records to select.
		* @param keepExisting Boolean If true, the existing selection will be added to (if not, the old selection is replaced).
		* @param suppressEvent Boolean If true, the select event will not be fired.
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;
		/** [Method] Selects all records
		* @param silent Boolean true to suppress all select events.
		*/
		selectAll?( silent?:boolean ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked
		* @param startRecord Number The index of the first row in the range.
		* @param endRecord Number The index of the last row in the range.
		* @param keepExisting Boolean true to retain existing selections.
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:boolean ): void;
		/** [Method] Sets the value of allowDeselect
		* @param allowDeselect Boolean The new value.
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;
		/** [Method] Sets the value of deselectOnContainerClick
		* @param deselectOnContainerClick Boolean The new value.
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:boolean ): void;
		/** [Method] Sets the value of disableSelection
		* @param disableSelection Boolean The new value.
		*/
		setDisableSelection?( disableSelection?:boolean ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of mode
		* @param mode String The new value.
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets a record as the last focused record
		* @param newRecord Ext.data.Record
		* @param oldRecord Ext.data.Record
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare namespace Ext.mixin {
	export interface ISortable extends Ext.mixin.IMixin {
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (String) */
		sortRoot?: string;
		/** [Config Option] (Array) */
		sorters?: any[];
		/** [Property] (Object) */
		currentSortFn?: any;
		/** [Property] (Boolean) */
		dirtySortFn?: boolean;
		/** [Property] (Boolean) */
		sorted?: boolean;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		addSorter?( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		addSorters?( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		findInsertionIndex?( items?:any[], item?:any ): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		getDefaultSortDirection?(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		getSortFn?(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		getSortRoot?(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		getSorters?(): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		insertSorter?( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @param index Number The index at which to insert the sorters.
		* @param sorters Array Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		insertSorters?( index?:number, sorters?:any[], defaultDirection?:string ): void;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		removeSorter?( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Array Each value in the array can be a string (property name), function (sorterFn) or Sorter instance.
		*/
		removeSorters?( sorters?:any[] ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		setDefaultSortDirection?( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		setSortRoot?( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param data Array The array you want to have sorted.
		* @returns Array The array you passed after it is sorted.
		*/
		sort?( data?:any[] ): any[];
	}
}
declare namespace Ext.mixin {
	export interface ITemplatable extends Ext.mixin.IMixin {
	}
}
declare namespace Ext.mixin {
	export interface ITraversable extends Ext.mixin.IMixin {
	}
}
declare namespace Ext {
	export interface IMsg extends Ext.IMessageBox {
	}
	export class Msg {
		/** [Property] (Ext.util.MixedCollection) */
		static items: Ext.util.IMixedCollection;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Adds one or more Components to this Container
		* @param newItems Object/Object[]/Ext.Component/Ext.Component[] The new items to add to the Container.
		* @returns Ext.Component The last item added to the Container from the newItems array.
		*/
		static add( newItems?:any ): Ext.IComponent;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an array of Components to this Container
		* @param items Array The array of items to add to this container.
		* @returns Array The array of items after they have been added.
		*/
		static addAll( items?:any[] ): any[];
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds a CSS class or classes to this Component s rendered element
		* @param cls String The CSS class to add.
		* @param prefix String Optional prefix to add to each class.
		* @param suffix String Optional suffix to add to each class.
		*/
		static addCls( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt
		* @param title String The title bar text.
		* @param message String The message box body text.
		* @param fn Function A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to: the browser window
		* @returns Ext.MessageBox this
		*/
		static alert( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method] Animates to the supplied activeItem with a specified animation
		* @param activeItem Object/Number The item or item index to make active.
		* @param animation Object/Ext.fx.layout.Card Card animation configuration or instance.
		*/
		static animateActiveItem( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask
		* @returns Object
		*/
		static applyMasked( masked?:any ): any;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		static child( selector?:string ): Ext.IComponent;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm
		* @param title String The title bar text.
		* @param message String The message box body text.
		* @param fn Function A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to: the browser window
		* @returns Ext.MessageBox this
		*/
		static confirm( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Disables this Component */
		static disable(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		static down( selector?:string ): Ext.IComponent;
		/** [Method] Enables this Component */
		static enable(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		static getActiveItem(): any;
		/** [Method] Prepares information on aligning this to component using alignment
		* @param component Object
		* @param alignment Object
		*/
		static getAlignmentInfo( component?:any, alignment?:any ): void;
		/** [Method] Returns the Component for a given index in the Container s items
		* @param index Number The index of the Component to return.
		* @returns Ext.Component The item at the specified index, if found.
		*/
		static getAt( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy
		* @returns Boolean
		*/
		static getAutoDestroy(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		static getBaseCls(): string;
		/** [Method] Returns the value of bodyBorder
		* @returns Number/Boolean/String
		*/
		static getBodyBorder(): any;
		/** [Method] Returns the value of bodyMargin
		* @returns Number/Boolean/String
		*/
		static getBodyMargin(): any;
		/** [Method] Returns the value of bodyPadding
		* @returns Number/Boolean/String
		*/
		static getBodyPadding(): any;
		/** [Method] Returns the value of border
		* @returns Number/String
		*/
		static getBorder(): any;
		/** [Method] Returns the value of bottom
		* @returns Number/String
		*/
		static getBottom(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Returns the value of buttons
		* @returns Array/Object
		*/
		static getButtons(): any;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		static getCentered(): boolean;
		/** [Method] Returns the value of cls
		* @returns String/String[]
		*/
		static getCls(): any;
		/** [Method] Examines this container s items property and gets a direct child component of this container
		* @param component String/Number This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get.
		* @returns Ext.Component The component (if found).
		*/
		static getComponent( component?:any ): Ext.IComponent;
		/** [Method] Returns the value of contentEl
		* @returns Ext.Element/HTMLElement/String
		*/
		static getContentEl(): any;
		/** [Method] Returns the value of control
		* @returns Object
		*/
		static getControl(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		static getData(): any;
		/** [Method] Returns the value of defaultTextHeight
		* @returns Number
		*/
		static getDefaultTextHeight(): number;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		static getDefaultType(): string;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		static getDefaults(): any;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		static getDisabled(): boolean;
		/** [Method] Returns the value of disabledCls
		* @returns String
		*/
		static getDisabledCls(): string;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		static getDocked(): string;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems
		* @param component String/Number The id or index of the component to find.
		* @returns Ext.Component/Boolean The docked component, if found.
		*/
		static getDockedComponent( component?:any ): any;
		/** [Method] Returns all the Ext Component docked items in this container
		* @returns Array The docked items of this container.
		*/
		static getDockedItems(): any[];
		/** [Method] Retrieves the top level element representing this component
		* @returns Ext.dom.Element
		*/
		static getEl(): Ext.dom.IElement;
		/** [Method] Returns the value of enter
		* @returns String
		*/
		static getEnter(): string;
		/** [Method] Returns the value of enterAnimation
		* @returns String/Mixed
		*/
		static getEnterAnimation(): any;
		/** [Method] Returns the value of exit
		* @returns String
		*/
		static getExit(): string;
		/** [Method] Returns the value of exitAnimation
		* @returns String/Mixed
		*/
		static getExitAnimation(): any;
		/** [Method] Returns the value of flex
		* @returns Number
		*/
		static getFlex(): number;
		/** [Method] Returns the value of floatingCls
		* @returns String
		*/
		static getFloatingCls(): string;
		/** [Method] Returns the value of height
		* @returns Number/String
		*/
		static getHeight(): any;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		static getHidden(): boolean;
		/** [Method] Returns the value of hiddenCls
		* @returns String
		*/
		static getHiddenCls(): string;
		/** [Method] Returns the value of hideAnimation
		* @returns Object
		*/
		static getHideAnimation(): any;
		/** [Method] Returns the value of hideOnMaskTap
		* @returns Boolean
		*/
		static getHideOnMaskTap(): boolean;
		/** [Method] Returns the value of html
		* @returns String/Ext.Element/HTMLElement
		*/
		static getHtml(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns all inner items of this container
		* @returns Array The inner items of this container.
		*/
		static getInnerItems(): any[];
		/** [Method] Returns the value of itemId
		* @returns String
		*/
		static getItemId(): string;
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		static getItems(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		static getLayout(): any;
		/** [Method] Returns the value of left
		* @returns Number/String
		*/
		static getLeft(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns the value of margin
		* @returns Number/String
		*/
		static getMargin(): any;
		/** [Method] Returns the value of masked
		* @returns Boolean/Object/Ext.Mask/Ext.LoadMask
		*/
		static getMasked(): any;
		/** [Method] Returns the value of maxHeight
		* @returns Number/String
		*/
		static getMaxHeight(): any;
		/** [Method] Returns the value of maxWidth
		* @returns Number/String
		*/
		static getMaxWidth(): any;
		/** [Method] Returns the value of minHeight
		* @returns Number/String
		*/
		static getMinHeight(): any;
		/** [Method] Returns the value of minWidth
		* @returns Number/String
		*/
		static getMinWidth(): any;
		/** [Method] Returns the value of padding
		* @returns Number/String
		*/
		static getPadding(): any;
		/** [Method] Returns the parent of this component if it has one
		* @returns Ext.Component The parent of this component.
		*/
		static getParent(): Ext.IComponent;
		/** [Method] Returns the value of plugins
		* @returns Object/Array
		*/
		static getPlugins(): any;
		/** [Method] Returns the value of prompt
		* @returns Object
		*/
		static getPrompt(): any;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		static getRecord(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo
		* @returns Ext.Element
		*/
		static getRenderTo(): Ext.IElement;
		/** [Method] Returns the value of right
		* @returns Number/String
		*/
		static getRight(): any;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class
		* @returns Ext.scroll.View The scroll view.
		*/
		static getScrollable(): Ext.scroll.IView;
		/** [Method] Returns the value of showAnimation
		* @returns Object
		*/
		static getShowAnimation(): any;
		/** [Method] Returns the height and width of the Component
		* @returns Object The current height and width of the Component.
		*/
		static getSize(): any;
		/** [Method] Returns the value of stretchX
		* @returns Boolean
		*/
		static getStretchX(): boolean;
		/** [Method] Returns the value of stretchY
		* @returns Boolean
		*/
		static getStretchY(): boolean;
		/** [Method] Returns the value of style
		* @returns String/Object
		*/
		static getStyle(): any;
		/** [Method] Returns the value of styleHtmlCls
		* @returns String
		*/
		static getStyleHtmlCls(): string;
		/** [Method] Returns the value of styleHtmlContent
		* @returns Boolean
		*/
		static getStyleHtmlContent(): boolean;
		/** [Method] Returns the value of title
		* @returns String
		*/
		static getTitle(): string;
		/** [Method] Returns the value of top
		* @returns Number/String
		*/
		static getTop(): any;
		/** [Method] Returns the value of tpl
		* @returns String/String[]/Ext.Template/Ext.XTemplate[]
		*/
		static getTpl(): any;
		/** [Method] Returns the value of tplWriteMode
		* @returns String
		*/
		static getTplWriteMode(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		static getUi(): string;
		/** [Method] Returns the value of width
		* @returns Number/String
		*/
		static getWidth(): any;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string
		* @returns String The xtype hierarchy string.
		*/
		static getXTypes(): string;
		/** [Method] Returns the value of zIndex
		* @returns Number
		*/
		static getZIndex(): number;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Returns true if this component has a parent
		* @returns Boolean true if this component has a parent.
		*/
		static hasParent(): boolean;
		/** [Method] Hides this Component optionally using an animation
		* @returns Ext.Component
		*/
		static hide(): Ext.IComponent;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		static initialize(): void;
		/** [Method] Adds a child Component at the given index
		* @param index Number The index to insert the Component at.
		* @param item Object The Component to insert.
		*/
		static insert( index?:number, item?:any ): void;
		/** [Method] Returns true if this Component is currently disabled
		* @returns Boolean true if currently disabled.
		*/
		static isDisabled(): boolean;
		/** [Method] Returns true if this Component is currently hidden
		* @returns Boolean true if currently hidden.
		*/
		static isHidden(): boolean;
		/** [Method] Tests whether or not this Component is of a specific xtype
		* @param xtype String The xtype to check for this Component.
		* @param shallow Boolean false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype.
		* @returns Boolean true if this component descends from the specified xtype, false otherwise.
		*/
		static isXType( xtype?:string, shallow?:boolean ): boolean;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask
		* @param mask Object
		*/
		static mask( mask?:any ): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p
		* @param title String The title bar text.
		* @param message String The message box body text.
		* @param fn Function A callback function which is called when the dialog is dismissed by clicking on the configured buttons.
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to: the browser window.
		* @param multiLine Boolean/Number true to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox.
		* @param value String Default value of the text input element.
		* @param prompt Object The configuration for the prompt. See the prompt documentation in Ext.MessageBox for more information.
		* @returns Ext.MessageBox this
		*/
		static prompt( title?:string, message?:string, fn?:any, scope?:any, multiLine?:any, value?:string, prompt?:any ): Ext.IMessageBox;
		/** [Method] Retrieves all descendant components which match the passed selector
		* @param selector String Selector complying to an Ext.ComponentQuery selector.
		* @returns Array Ext.Component's which matched the selector.
		*/
		static query( selector?:string ): any[];
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes an item from this Container optionally destroying it
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		static remove( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items currently in the Container optionally destroying them all
		* @param destroy Boolean If true, destroys each removed Component.
		* @param everything Boolean If true, completely remove all items including docked / centered and floating items.
		* @returns Ext.Component this
		*/
		static removeAll( destroy?:boolean, everything?:boolean ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		static removeAt( index?:number ): Ext.IContainer;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Component s rendered element
		* @param cls String The class(es) to remove.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		static removeCls( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Removes a docked item from this Container
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		static removeDocked( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		static removeInnerAt( index?:number ): Ext.IContainer;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Replaces specified classes with the newly specified classes
		* @param oldCls String The class(es) to remove.
		* @param newCls String The class(es) to add.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		static replaceCls( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		static resetFloating(): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		static setActiveItem( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy
		* @param autoDestroy Boolean The new value.
		*/
		static setAutoDestroy( autoDestroy?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		static setBaseCls( baseCls?:string ): void;
		/** [Method] Sets the value of bodyBorder
		* @param bodyBorder Number/Boolean/String The new value.
		*/
		static setBodyBorder( bodyBorder?:any ): void;
		/** [Method] Sets the value of bodyMargin
		* @param bodyMargin Number/Boolean/String The new value.
		*/
		static setBodyMargin( bodyMargin?:any ): void;
		/** [Method] Sets the value of bodyPadding
		* @param bodyPadding Number/Boolean/String The new value.
		*/
		static setBodyPadding( bodyPadding?:any ): void;
		/** [Method] Sets the value of border
		* @param border Number/String The new value.
		*/
		static setBorder( border?:any ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number/String The new value.
		*/
		static setBottom( bottom?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of buttons
		* @param buttons Array/Object The new value.
		*/
		static setButtons( buttons?:any ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		static setCentered( centered?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String/String[] The new value.
		*/
		static setCls( cls?:any ): void;
		/** [Method] Sets the value of contentEl
		* @param contentEl Ext.Element/HTMLElement/String The new value.
		*/
		static setContentEl( contentEl?:any ): void;
		/** [Method] Sets the value of control
		* @param control Object The new value.
		*/
		static setControl( control?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		static setData( data?:any ): void;
		/** [Method] Sets the value of defaultTextHeight
		* @param defaultTextHeight Number The new value.
		*/
		static setDefaultTextHeight( defaultTextHeight?:number ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		static setDefaultType( defaultType?:string ): void;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		static setDefaults( defaults?:any ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		static setDisabled( disabled?:boolean ): void;
		/** [Method] Sets the value of disabledCls
		* @param disabledCls String The new value.
		*/
		static setDisabledCls( disabledCls?:string ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		static setDocked( docked?:string ): void;
		/** [Method] Sets the value of draggable
		* @param draggable Object The new value.
		*/
		static setDraggable( draggable?:any ): void;
		/** [Method] Sets the value of enter
		* @param enter String The new value.
		*/
		static setEnter( enter?:string ): void;
		/** [Method] Sets the value of enterAnimation
		* @param enterAnimation String/Mixed The new value.
		*/
		static setEnterAnimation( enterAnimation?:any ): void;
		/** [Method] Sets the value of exit
		* @param exit String The new value.
		*/
		static setExit( exit?:string ): void;
		/** [Method] Sets the value of exitAnimation
		* @param exitAnimation String/Mixed The new value.
		*/
		static setExitAnimation( exitAnimation?:any ): void;
		/** [Method] Sets the value of flex
		* @param flex Number The new value.
		*/
		static setFlex( flex?:number ): void;
		/** [Method] Used to update the floating state of this component
		* @param floating Boolean true if you want to float this component.
		*/
		static setFloating( floating?:boolean ): void;
		/** [Method] Sets the value of floatingCls
		* @param floatingCls String The new value.
		*/
		static setFloatingCls( floatingCls?:string ): void;
		/** [Method] Sets the value of height
		* @param height Number/String The new value.
		*/
		static setHeight( height?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		static setHidden( hidden?:boolean ): void;
		/** [Method] Sets the value of hiddenCls
		* @param hiddenCls String The new value.
		*/
		static setHiddenCls( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation Object The new value.
		*/
		static setHideAnimation( hideAnimation?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap
		* @param hideOnMaskTap Boolean The new value.
		*/
		static setHideOnMaskTap( hideOnMaskTap?:boolean ): void;
		/** [Method] Sets the value of html
		* @param html String/Ext.Element/HTMLElement The new value.
		*/
		static setHtml( html?:any ): void;
		/** [Method] Sets icon
		* @param iconCls String A CSS class name or empty string to clear the icon.
		* @returns Ext.MessageBox this
		*/
		static setIcon( iconCls?:string ): Ext.IMessageBox;
		/** [Method] Sets the value of iconCls
		* @param iconCls String The new value.
		*/
		static setIconCls( iconCls?:string ): void;
		/** [Method] Sets the value of itemId
		* @param itemId String The new value.
		*/
		static setItemId( itemId?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		static setItems( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		static setLayout( layout?:any ): void;
		/** [Method] Sets the value of left
		* @param left Number/String The new value.
		*/
		static setLeft( left?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Sets the value of margin
		* @param margin Number/String The new value.
		*/
		static setMargin( margin?:any ): void;
		/** [Method] Sets the value of masked
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask The new value.
		*/
		static setMasked( masked?:any ): void;
		/** [Method] Sets the value of maxHeight
		* @param maxHeight Number/String The new value.
		*/
		static setMaxHeight( maxHeight?:any ): void;
		/** [Method] Sets the value of maxWidth
		* @param maxWidth Number/String The new value.
		*/
		static setMaxWidth( maxWidth?:any ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		*/
		static setMessage( message?:string ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight Number/String The new value.
		*/
		static setMinHeight( minHeight?:any ): void;
		/** [Method] Sets the value of minWidth
		* @param minWidth Number/String The new value.
		*/
		static setMinWidth( minWidth?:any ): void;
		/** [Method] Sets the value of padding
		* @param padding Number/String The new value.
		*/
		static setPadding( padding?:any ): void;
		/** [Method] Sets the value of plugins
		* @param plugins Object/Array The new value.
		*/
		static setPlugins( plugins?:any ): void;
		/** [Method] Sets the value of prompt
		* @param prompt Object The new value.
		*/
		static setPrompt( prompt?:any ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		static setRecord( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo
		* @param renderTo Ext.Element The new value.
		*/
		static setRenderTo( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right
		* @param right Number/String The new value.
		*/
		static setRight( right?:any ): void;
		/** [Method] Sets the value of scrollable
		* @param scrollable Boolean/String/Object The new value.
		* @returns Ext.scroll.View The scroll view.
		*/
		static setScrollable( scrollable?:any ): Ext.scroll.IView;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation Object The new value.
		*/
		static setShowAnimation( showAnimation?:any ): void;
		/** [Method] Sets the size of the Component
		* @param width Number The new width for the Component.
		* @param height Number The new height for the Component.
		*/
		static setSize( width?:number, height?:number ): void;
		/** [Method] Sets the value of stretchX
		* @param stretchX Boolean The new value.
		*/
		static setStretchX( stretchX?:boolean ): void;
		/** [Method] Sets the value of stretchY
		* @param stretchY Boolean The new value.
		*/
		static setStretchY( stretchY?:boolean ): void;
		/** [Method] Sets the value of style
		* @param style String/Object The new value.
		*/
		static setStyle( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls
		* @param styleHtmlCls String The new value.
		*/
		static setStyleHtmlCls( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent
		* @param styleHtmlContent Boolean The new value.
		*/
		static setStyleHtmlContent( styleHtmlContent?:boolean ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		static setTitle( title?:string ): void;
		/** [Method] Sets the value of top
		* @param top Number/String The new value.
		*/
		static setTop( top?:any ): void;
		/** [Method] Sets the value of tpl
		* @param tpl String/String[]/Ext.Template/Ext.XTemplate[] The new value.
		*/
		static setTpl( tpl?:any ): void;
		/** [Method] Sets the value of tplWriteMode
		* @param tplWriteMode String The new value.
		*/
		static setTplWriteMode( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		static setUi( ui?:string ): void;
		/** [Method] Sets the value of width
		* @param width Number/String The new value.
		*/
		static setWidth( width?:any ): void;
		/** [Method] Sets the value of zIndex
		* @param zIndex Number The new value.
		*/
		static setZIndex( zIndex?:number ): void;
		/** [Method] Displays the Ext MessageBox with a specified configuration
		* @param config Object An object with the following config options:
		* @returns Ext.MessageBox this
		*/
		static show( config?:any ): Ext.IMessageBox;
		/** [Method] Shows this component by another component
		* @param component Ext.Component The target component to show this component by.
		* @param alignment String The specific alignment.
		*/
		static showBy( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		static unmask(): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector
		* @param selector String The simple selector to test.
		* @returns Ext.Container The matching ancestor Container (or undefined if no match was found).
		*/
		static up( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		static update(): void;
		/** [Method] Updates the styleHtmlCls configuration
		* @param newHtmlCls Object
		* @param oldHtmlCls Object
		*/
		static updateStyleHtmlCls( newHtmlCls?:any, oldHtmlCls?:any ): void;
		/** [Method] Sets the value of message
		* @param message String The new value.
		* @returns Ext.MessageBox this
		*/
		static updateText( message?:string ): Ext.IMessageBox;
	}
}
declare namespace Ext.navigation {
	export interface IBar extends Ext.ITitleBar {
		/** [Config Option] (Boolean) */
		androidAnimation?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of androidAnimation
		* @returns Boolean
		*/
		getAndroidAnimation?(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Sets the value of androidAnimation
		* @param androidAnimation Boolean The new value.
		*/
		setAndroidAnimation?( androidAnimation?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext.navigation {
	export interface IView extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultBackButtonText?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Boolean/Object) */
		navigationBar?: any;
		/** [Config Option] (Boolean) */
		useTitleForBackButtonText?: boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultBackButtonText
		* @returns String
		*/
		getDefaultBackButtonText?(): string;
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		getItems?(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of navigationBar
		* @returns Boolean/Object
		*/
		getNavigationBar?(): any;
		/** [Method] Returns the previous item if one exists
		* @returns Mixed The previous view
		*/
		getPreviousItem?(): any;
		/** [Method] Returns the value of useTitleForBackButtonText
		* @returns Boolean
		*/
		getUseTitleForBackButtonText?(): boolean;
		/** [Method] Removes the current active view from the stack and sets the previous view using the default animation of this view
		* @param count Number/String/Object If a Number, the number of views you want to pop. If a String, the pops to a matching component query. If an Object, the pops to a matching view instance.
		* @returns Ext.Component The new active item
		*/
		pop?( count?:any ): Ext.IComponent;
		/** [Method] Pushes a new view into this navigation view using the default animation that this view has
		* @param view Object The view to push.
		* @returns Ext.Component The new item you just pushed.
		*/
		push?( view?:any ): Ext.IComponent;
		/** [Method] Resets the view by removing all items between the first and last item
		* @returns Ext.Component The view that is now active
		*/
		reset?(): Ext.IComponent;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultBackButtonText
		* @param defaultBackButtonText String The new value.
		*/
		setDefaultBackButtonText?( defaultBackButtonText?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of navigationBar
		* @param navigationBar Boolean/Object The new value.
		*/
		setNavigationBar?( navigationBar?:any ): void;
		/** [Method] Sets the value of useTitleForBackButtonText
		* @param useTitleForBackButtonText Boolean The new value.
		*/
		setUseTitleForBackButtonText?( useTitleForBackButtonText?:boolean ): void;
	}
}
declare namespace Ext {
	export interface INavigationView extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultBackButtonText?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Boolean/Object) */
		navigationBar?: any;
		/** [Config Option] (Boolean) */
		useTitleForBackButtonText?: boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultBackButtonText
		* @returns String
		*/
		getDefaultBackButtonText?(): string;
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		getItems?(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of navigationBar
		* @returns Boolean/Object
		*/
		getNavigationBar?(): any;
		/** [Method] Returns the previous item if one exists
		* @returns Mixed The previous view
		*/
		getPreviousItem?(): any;
		/** [Method] Returns the value of useTitleForBackButtonText
		* @returns Boolean
		*/
		getUseTitleForBackButtonText?(): boolean;
		/** [Method] Removes the current active view from the stack and sets the previous view using the default animation of this view
		* @param count Number/String/Object If a Number, the number of views you want to pop. If a String, the pops to a matching component query. If an Object, the pops to a matching view instance.
		* @returns Ext.Component The new active item
		*/
		pop?( count?:any ): Ext.IComponent;
		/** [Method] Pushes a new view into this navigation view using the default animation that this view has
		* @param view Object The view to push.
		* @returns Ext.Component The new item you just pushed.
		*/
		push?( view?:any ): Ext.IComponent;
		/** [Method] Resets the view by removing all items between the first and last item
		* @returns Ext.Component The view that is now active
		*/
		reset?(): Ext.IComponent;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultBackButtonText
		* @param defaultBackButtonText String The new value.
		*/
		setDefaultBackButtonText?( defaultBackButtonText?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of navigationBar
		* @param navigationBar Boolean/Object The new value.
		*/
		setNavigationBar?( navigationBar?:any ): void;
		/** [Method] Sets the value of useTitleForBackButtonText
		* @param useTitleForBackButtonText Boolean The new value.
		*/
		setUseTitleForBackButtonText?( useTitleForBackButtonText?:boolean ): void;
	}
}
declare namespace Ext {
	export interface INumber {
	}
	export class Number {
		/** [Method] Checks whether or not the passed number is within a desired range
		* @param number Number The number to check
		* @param min Number The minimum number in the range
		* @param max Number The maximum number in the range
		* @returns Number The constrained value if outside the range, otherwise the current value
		*/
		static constrain( number?:number, min?:number, max?:number ): number;
		/** [Method] Validate that a value is numeric and convert it to a number if necessary
		* @param value Object
		* @param defaultValue Number The value to return if the original value is non-numeric
		* @returns Number value, if numeric, defaultValue otherwise
		*/
		static from( value?:any, defaultValue?:number ): number;
		/** [Method] Snaps the passed number between stopping points based upon a passed increment value
		* @param value Number The unsnapped value.
		* @param increment Number The increment by which the value must move.
		* @param minValue Number The minimum value to which the returned value must be constrained. Overrides the increment..
		* @param maxValue Number The maximum value to which the returned value must be constrained. Overrides the increment..
		* @returns Number The value of the nearest snap target.
		*/
		static snap( value?:number, increment?:number, minValue?:number, maxValue?:number ): number;
		/** [Method] Formats a number using fixed point notation
		* @param value Number The number to format
		* @param precision Number The number of digits to show after the decimal point
		*/
		static toFixed( value?:number, precision?:number ): void;
	}
}
declare namespace Ext {
	export interface IObject {
	}
	export class Object {
		/** [Method] Returns a new object with the given object as the prototype chain
		* @param object Object The prototype chain for the new object.
		*/
		static chain( object?:any ): void;
		/** [Method] Iterate through an object and invoke the given callback function for each iteration
		* @param object Object The object to iterate
		* @param fn Function The callback function.
		* @param scope Object The execution scope (this) of the callback function
		*/
		static each( object?:any, fn?:any, scope?:any ): void;
		/** [Method] Converts a query string back into an object
		* @param queryString String The query string to decode.
		* @param recursive Boolean Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar.
		* @returns Object
		*/
		static fromQueryString( queryString?:string, recursive?:boolean ): any;
		/** [Method] Returns the first matching key corresponding to the given value
		* @param object Object
		* @param value Object The value to find
		*/
		static getKey( object?:any, value?:any ): void;
		/** [Method] Gets all keys of the given object as an array
		* @param object Object
		* @returns String[] An array of keys from the object.
		*/
		static getKeys( object?:any ): string[];
		/** [Method] Gets the total number of this object s own properties
		* @param object Object
		* @returns Number size
		*/
		static getSize( object?:any ): number;
		/** [Method] Gets all values of the given object as an array
		* @param object Object
		* @returns Array An array of values from the object.
		*/
		static getValues( object?:any ): any[];
		/** [Method] Merges any number of objects recursively without referencing them or their children
		* @param source Object The first object into which to merge the others.
		* @param objs Object... One or more objects to be merged into the first.
		* @returns Object The object that is created as a result of merging all the objects passed in.
		*/
		static merge( source:any, ...objs:any[] ): any;
		/** [Method]
		* @param source Object
		*/
		static mergeIf( source?:any ): void;
		/** [Method] Convert a name  value pair to an array of objects with support for nested structures useful to construct query stri
		* @param name String
		* @param value Object
		* @param recursive Boolean true to recursively encode any sub-objects.
		* @returns Object[] Array of objects with name and value fields.
		*/
		static toQueryObjects( name?:string, value?:any, recursive?:boolean ): any[];
		/** [Method] Takes an object and converts it to an encoded query string
		* @param object Object The object to encode.
		* @param recursive Boolean Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar).
		* @returns String queryString
		*/
		static toQueryString( object?:any, recursive?:boolean ): string;
	}
}
declare namespace Ext {
	export interface IOs extends Ext.env.IOS {
	}
	export class Os {
		/** [Property] (String) */
		static deviceType: string;
		/** [Property] (String) */
		static name: string;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Property] (Ext.Version) */
		static version: Ext.IVersion;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] A hybrid property can be either accessed as a method call i e  if Ext os is Android
		* @param value String The OS name to check.
		* @returns Boolean
		*/
		static is( value?:string ): boolean;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/Boolean/String) */
		bodyBorder?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyMargin?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyPadding?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bodyBorder
		* @returns Number/Boolean/String
		*/
		getBodyBorder?(): any;
		/** [Method] Returns the value of bodyMargin
		* @returns Number/Boolean/String
		*/
		getBodyMargin?(): any;
		/** [Method] Returns the value of bodyPadding
		* @returns Number/Boolean/String
		*/
		getBodyPadding?(): any;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bodyBorder
		* @param bodyBorder Number/Boolean/String The new value.
		*/
		setBodyBorder?( bodyBorder?:any ): void;
		/** [Method] Sets the value of bodyMargin
		* @param bodyMargin Number/Boolean/String The new value.
		*/
		setBodyMargin?( bodyMargin?:any ): void;
		/** [Method] Sets the value of bodyPadding
		* @param bodyPadding Number/Boolean/String The new value.
		*/
		setBodyPadding?( bodyPadding?:any ): void;
	}
}
declare namespace Ext.lib {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/Boolean/String) */
		bodyBorder?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyMargin?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyPadding?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bodyBorder
		* @returns Number/Boolean/String
		*/
		getBodyBorder?(): any;
		/** [Method] Returns the value of bodyMargin
		* @returns Number/Boolean/String
		*/
		getBodyMargin?(): any;
		/** [Method] Returns the value of bodyPadding
		* @returns Number/Boolean/String
		*/
		getBodyPadding?(): any;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bodyBorder
		* @param bodyBorder Number/Boolean/String The new value.
		*/
		setBodyBorder?( bodyBorder?:any ): void;
		/** [Method] Sets the value of bodyMargin
		* @param bodyMargin Number/Boolean/String The new value.
		*/
		setBodyMargin?( bodyMargin?:any ): void;
		/** [Method] Sets the value of bodyPadding
		* @param bodyPadding Number/Boolean/String The new value.
		*/
		setBodyPadding?( bodyPadding?:any ): void;
	}
}
declare namespace Ext.picker {
	export interface IDate extends Ext.picker.IPicker {
		/** [Config Option] (String) */
		dayText?: string;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (String) */
		monthText?: string;
		/** [Config Option] (Array) */
		slotOrder?: any[];
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Config Option] (Number) */
		yearFrom?: number;
		/** [Config Option] (String) */
		yearText?: string;
		/** [Config Option] (Number) */
		yearTo?: number;
		/** [Method] Returns the value of dayText
		* @returns String
		*/
		getDayText?(): string;
		/** [Method] Returns the value of doneButton
		* @returns String/Mixed
		*/
		getDoneButton?(): any;
		/** [Method] Returns the value of monthText
		* @returns String
		*/
		getMonthText?(): string;
		/** [Method] Returns the value of slotOrder
		* @returns Array
		*/
		getSlotOrder?(): any[];
		/** [Method] Returns the values of each of the pickers slots
		* @param useDom Object
		* @returns Object The values of the pickers slots
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the value of yearFrom
		* @returns Number
		*/
		getYearFrom?(): number;
		/** [Method] Returns the value of yearText
		* @returns String
		*/
		getYearText?(): string;
		/** [Method] Returns the value of yearTo
		* @returns Number
		*/
		getYearTo?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of dayText
		* @param dayText String The new value.
		*/
		setDayText?( dayText?:string ): void;
		/** [Method] Sets the value of doneButton
		* @param doneButton String/Mixed The new value.
		*/
		setDoneButton?( doneButton?:any ): void;
		/** [Method] Sets the value of monthText
		* @param monthText String The new value.
		*/
		setMonthText?( monthText?:string ): void;
		/** [Method] Sets the value of slotOrder
		* @param slotOrder Array The new value.
		*/
		setSlotOrder?( slotOrder?:any[] ): void;
		/** [Method] Sets the values of the pickers slots
		* @param value Object
		* @param animated Object
		* @returns Ext.Picker this This picker.
		*/
		setValue?( value?:any, animated?:any ): Ext.IPicker;
		/** [Method] Sets the value of yearFrom
		* @param yearFrom Number The new value.
		*/
		setYearFrom?( yearFrom?:number ): void;
		/** [Method] Sets the value of yearText
		* @param yearText String The new value.
		*/
		setYearText?( yearText?:string ): void;
		/** [Method] Sets the value of yearTo
		* @param yearTo Number The new value.
		*/
		setYearTo?( yearTo?:number ): void;
		/** [Method] Updates the dayText configuration
		* @param newDayText Object
		* @param oldDayText Object
		*/
		updateDayText?( newDayText?:any, oldDayText?:any ): void;
		/** [Method] Updates the monthText configuration
		* @param newMonthText Object
		* @param oldMonthText Object
		*/
		updateMonthText?( newMonthText?:any, oldMonthText?:any ): void;
		/** [Method] Updates the yearFrom configuration */
		updateYearFrom?(): void;
		/** [Method] Updates the yearText configuration
		* @param yearText Object
		*/
		updateYearText?( yearText?:any ): void;
		/** [Method] Updates the yearTo configuration */
		updateYearTo?(): void;
	}
}
declare namespace Ext {
	export interface IDatePicker extends Ext.picker.IPicker {
		/** [Config Option] (String) */
		dayText?: string;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (String) */
		monthText?: string;
		/** [Config Option] (Array) */
		slotOrder?: any[];
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Config Option] (Number) */
		yearFrom?: number;
		/** [Config Option] (String) */
		yearText?: string;
		/** [Config Option] (Number) */
		yearTo?: number;
		/** [Method] Returns the value of dayText
		* @returns String
		*/
		getDayText?(): string;
		/** [Method] Returns the value of doneButton
		* @returns String/Mixed
		*/
		getDoneButton?(): any;
		/** [Method] Returns the value of monthText
		* @returns String
		*/
		getMonthText?(): string;
		/** [Method] Returns the value of slotOrder
		* @returns Array
		*/
		getSlotOrder?(): any[];
		/** [Method] Returns the values of each of the pickers slots
		* @param useDom Object
		* @returns Object The values of the pickers slots
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the value of yearFrom
		* @returns Number
		*/
		getYearFrom?(): number;
		/** [Method] Returns the value of yearText
		* @returns String
		*/
		getYearText?(): string;
		/** [Method] Returns the value of yearTo
		* @returns Number
		*/
		getYearTo?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of dayText
		* @param dayText String The new value.
		*/
		setDayText?( dayText?:string ): void;
		/** [Method] Sets the value of doneButton
		* @param doneButton String/Mixed The new value.
		*/
		setDoneButton?( doneButton?:any ): void;
		/** [Method] Sets the value of monthText
		* @param monthText String The new value.
		*/
		setMonthText?( monthText?:string ): void;
		/** [Method] Sets the value of slotOrder
		* @param slotOrder Array The new value.
		*/
		setSlotOrder?( slotOrder?:any[] ): void;
		/** [Method] Sets the values of the pickers slots
		* @param value Object
		* @param animated Object
		* @returns Ext.Picker this This picker.
		*/
		setValue?( value?:any, animated?:any ): Ext.IPicker;
		/** [Method] Sets the value of yearFrom
		* @param yearFrom Number The new value.
		*/
		setYearFrom?( yearFrom?:number ): void;
		/** [Method] Sets the value of yearText
		* @param yearText String The new value.
		*/
		setYearText?( yearText?:string ): void;
		/** [Method] Sets the value of yearTo
		* @param yearTo Number The new value.
		*/
		setYearTo?( yearTo?:number ): void;
		/** [Method] Updates the dayText configuration
		* @param newDayText Object
		* @param oldDayText Object
		*/
		updateDayText?( newDayText?:any, oldDayText?:any ): void;
		/** [Method] Updates the monthText configuration
		* @param newMonthText Object
		* @param oldMonthText Object
		*/
		updateMonthText?( newMonthText?:any, oldMonthText?:any ): void;
		/** [Method] Updates the yearFrom configuration */
		updateYearFrom?(): void;
		/** [Method] Updates the yearText configuration
		* @param yearText Object
		*/
		updateYearText?( yearText?:any ): void;
		/** [Method] Updates the yearTo configuration */
		updateYearTo?(): void;
	}
}
declare namespace Ext.picker {
	export interface IPicker extends Ext.ISheet {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String/Mixed) */
		cancelButton?: any;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Array) */
		slots?: any[];
		/** [Config Option] (Ext.TitleBar/Ext.Toolbar/Object) */
		toolbar?: any;
		/** [Config Option] (Boolean) */
		useTitles?: boolean;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Method] Updates the cancelButton configuration
		* @param config Object
		* @returns Object
		*/
		applyCancelButton?( config?:any ): any;
		/** [Method] Updates the doneButton configuration
		* @param config Object
		* @returns Object
		*/
		applyDoneButton?( config?:any ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Returns the value of cancelButton
		* @returns String/Mixed
		*/
		getCancelButton?(): any;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		getCard?(): any;
		/** [Method] Returns the value of doneButton
		* @returns String/Mixed
		*/
		getDoneButton?(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of slots
		* @returns Array
		*/
		getSlots?(): any[];
		/** [Method] Returns the value of toolbar
		* @returns Ext.TitleBar/Ext.Toolbar/Object
		*/
		getToolbar?(): any;
		/** [Method] Returns the value of toolbarPosition
		* @returns String
		*/
		getToolbarPosition?(): string;
		/** [Method] Returns the value of useTitles
		* @returns Boolean
		*/
		getUseTitles?(): boolean;
		/** [Method] Returns the values of each of the pickers slots
		* @param useDom Object
		* @returns Object The values of the pickers slots
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the values of each of the pickers slots
		* @returns Object The values of the pickers slots.
		*/
		getValues?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number The new value.
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of cancelButton
		* @param cancelButton String/Mixed The new value.
		*/
		setCancelButton?( cancelButton?:any ): void;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		setCard?( activeItem?:any ): void;
		/** [Method] Sets the value of doneButton
		* @param doneButton String/Mixed The new value.
		*/
		setDoneButton?( doneButton?:any ): void;
		/** [Method] Sets the value of height
		* @param height Number The new value.
		*/
		setHeight?( height?:number ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of left
		* @param left Number The new value.
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right
		* @param right Number The new value.
		*/
		setRight?( right?:number ): void;
		/** [Method] Sets the value of slots
		* @param slots Array The new value.
		*/
		setSlots?( slots?:any[] ): void;
		/** [Method] Sets the value of toolbar
		* @param toolbar Ext.TitleBar/Ext.Toolbar/Object The new value.
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of toolbarPosition
		* @param toolbarPosition String The new value.
		*/
		setToolbarPosition?( toolbarPosition?:string ): void;
		/** [Method] Sets the value of useTitles
		* @param useTitles Boolean The new value.
		*/
		setUseTitles?( useTitles?:boolean ): void;
		/** [Method] Sets the values of the pickers slots
		* @param values Object The values in a {name:'value'} format.
		* @param animated Boolean true to animate setting the values.
		* @returns Ext.Picker this This picker.
		*/
		setValue?( values?:any, animated?:boolean ): Ext.IPicker;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		show?(): Ext.IComponent;
	}
}
declare namespace Ext {
	export interface IPicker extends Ext.ISheet {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String/Mixed) */
		cancelButton?: any;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Array) */
		slots?: any[];
		/** [Config Option] (Ext.TitleBar/Ext.Toolbar/Object) */
		toolbar?: any;
		/** [Config Option] (Boolean) */
		useTitles?: boolean;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Method] Updates the cancelButton configuration
		* @param config Object
		* @returns Object
		*/
		applyCancelButton?( config?:any ): any;
		/** [Method] Updates the doneButton configuration
		* @param config Object
		* @returns Object
		*/
		applyDoneButton?( config?:any ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom
		* @returns Number
		*/
		getBottom?(): number;
		/** [Method] Returns the value of cancelButton
		* @returns String/Mixed
		*/
		getCancelButton?(): any;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		getCard?(): any;
		/** [Method] Returns the value of doneButton
		* @returns String/Mixed
		*/
		getDoneButton?(): any;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of slots
		* @returns Array
		*/
		getSlots?(): any[];
		/** [Method] Returns the value of toolbar
		* @returns Ext.TitleBar/Ext.Toolbar/Object
		*/
		getToolbar?(): any;
		/** [Method] Returns the value of toolbarPosition
		* @returns String
		*/
		getToolbarPosition?(): string;
		/** [Method] Returns the value of useTitles
		* @returns Boolean
		*/
		getUseTitles?(): boolean;
		/** [Method] Returns the values of each of the pickers slots
		* @param useDom Object
		* @returns Object The values of the pickers slots
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the values of each of the pickers slots
		* @returns Object The values of the pickers slots.
		*/
		getValues?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number The new value.
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of cancelButton
		* @param cancelButton String/Mixed The new value.
		*/
		setCancelButton?( cancelButton?:any ): void;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		setCard?( activeItem?:any ): void;
		/** [Method] Sets the value of doneButton
		* @param doneButton String/Mixed The new value.
		*/
		setDoneButton?( doneButton?:any ): void;
		/** [Method] Sets the value of height
		* @param height Number The new value.
		*/
		setHeight?( height?:number ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of left
		* @param left Number The new value.
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right
		* @param right Number The new value.
		*/
		setRight?( right?:number ): void;
		/** [Method] Sets the value of slots
		* @param slots Array The new value.
		*/
		setSlots?( slots?:any[] ): void;
		/** [Method] Sets the value of toolbar
		* @param toolbar Ext.TitleBar/Ext.Toolbar/Object The new value.
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of toolbarPosition
		* @param toolbarPosition String The new value.
		*/
		setToolbarPosition?( toolbarPosition?:string ): void;
		/** [Method] Sets the value of useTitles
		* @param useTitles Boolean The new value.
		*/
		setUseTitles?( useTitles?:boolean ): void;
		/** [Method] Sets the values of the pickers slots
		* @param values Object The values in a {name:'value'} format.
		* @param animated Boolean true to animate setting the values.
		* @returns Ext.Picker this This picker.
		*/
		setValue?( values?:any, animated?:boolean ): Ext.IPicker;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		show?(): Ext.IComponent;
	}
}
declare namespace Ext.picker {
	export interface ISlot extends Ext.dataview.IDataView {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		itemTpl?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Method] Looks at the data configuration and turns it into store
		* @param data Object
		* @returns Object
		*/
		applyData?( data?:any ): any;
		/** [Method] Sets the title for this dataview by creating element
		* @param title String
		* @returns String
		*/
		applyTitle?( title?:string ): string;
		/** [Method] Returns the value of align
		* @returns String
		*/
		getAlign?(): string;
		/** [Method] Returns the value of displayField
		* @returns String
		*/
		getDisplayField?(): string;
		/** [Method] Returns the value of name
		* @returns String
		*/
		getName?(): string;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Returns the value of valueField
		* @returns String
		*/
		getValueField?(): string;
		/** [Method] Sets the value of align
		* @param align String The new value.
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the value of displayField
		* @param displayField String The new value.
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of itemTpl
		* @param itemTpl String The new value.
		*/
		setItemTpl?( itemTpl?:string ): void;
		/** [Method] Sets the value of name
		* @param name String The new value.
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of valueField
		* @param valueField String The new value.
		*/
		setValueField?( valueField?:string ): void;
		/** [Method] Updates the align configuration
		* @param newAlign Object
		* @param oldAlign Object
		*/
		updateAlign?( newAlign?:any, oldAlign?:any ): void;
	}
}
declare namespace Ext.plugin {
	export interface IBufferedList extends Ext.IBase,Ext.mixin.IBindable {
		/** [Method] Returns the value of list
		* @returns Object
		*/
		getList?(): any;
		/** [Method] Sets the value of list
		* @param list Object The new value.
		*/
		setList?( list?:any ): void;
	}
}
declare namespace Ext.plugin {
	export interface IListPaging extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoPaging?: boolean;
		/** [Config Option] (String) */
		loadMoreText?: string;
		/** [Config Option] (String) */
		noMoreRecordsText?: string;
		/** [Method] Returns the value of autoPaging
		* @returns Boolean
		*/
		getAutoPaging?(): boolean;
		/** [Method] Returns the value of loadMoreText
		* @returns String
		*/
		getLoadMoreText?(): string;
		/** [Method] Returns the value of noMoreRecordsText
		* @returns String
		*/
		getNoMoreRecordsText?(): string;
		/** [Method] Sets the value of autoPaging
		* @param autoPaging Boolean The new value.
		*/
		setAutoPaging?( autoPaging?:boolean ): void;
		/** [Method] Sets the value of loadMoreText
		* @param loadMoreText String The new value.
		*/
		setLoadMoreText?( loadMoreText?:string ): void;
		/** [Method] Sets the value of noMoreRecordsText
		* @param noMoreRecordsText String The new value.
		*/
		setNoMoreRecordsText?( noMoreRecordsText?:string ): void;
	}
}
declare namespace Ext.plugin {
	export interface IPullRefresh extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoSnapBack?: boolean;
		/** [Config Option] (String) */
		lastUpdatedDateFormat?: string;
		/** [Config Option] (String) */
		lastUpdatedText?: string;
		/** [Config Option] (Ext.dataview.List) */
		list?: Ext.dataview.IList;
		/** [Config Option] (String) */
		loadedText?: string;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Number) */
		overpullSnapBackDuration?: number;
		/** [Config Option] (String) */
		pullRefreshText?: string;
		/** [Config Option] (String) */
		pullReleaseText?: string;
		/** [Config Option] (String) */
		pullText?: string;
		/** [Config Option] (Ext.XTemplate/String/Array) */
		pullTpl?: any;
		/** [Config Option] (String) */
		releaseText?: string;
		/** [Config Option] (Boolean) */
		scrollerAutoRefresh?: boolean;
		/** [Config Option] (Number) */
		snappingAnimationDuration?: number;
		/** [Method] Returns the value of autoSnapBack
		* @returns Boolean
		*/
		getAutoSnapBack?(): boolean;
		/** [Method] Returns the value of lastUpdatedDateFormat
		* @returns String
		*/
		getLastUpdatedDateFormat?(): string;
		/** [Method] Returns the value of lastUpdatedText
		* @returns String
		*/
		getLastUpdatedText?(): string;
		/** [Method] Returns the value of list
		* @returns Ext.dataview.List
		*/
		getList?(): Ext.dataview.IList;
		/** [Method] Returns the value of loadedText
		* @returns String
		*/
		getLoadedText?(): string;
		/** [Method] Returns the value of loadingText
		* @returns String
		*/
		getLoadingText?(): string;
		/** [Method] Returns the value of overpullSnapBackDuration
		* @returns Number
		*/
		getOverpullSnapBackDuration?(): number;
		/** [Method] Returns the value of pullText
		* @returns String
		*/
		getPullText?(): string;
		/** [Method] Returns the value of pullTpl
		* @returns Ext.XTemplate/String/Array
		*/
		getPullTpl?(): any;
		/** [Method] Returns the value of releaseText
		* @returns String
		*/
		getReleaseText?(): string;
		/** [Method] Returns the value of scrollerAutoRefresh
		* @returns Boolean
		*/
		getScrollerAutoRefresh?(): boolean;
		/** [Method] Returns the value of snappingAnimationDuration
		* @returns Number
		*/
		getSnappingAnimationDuration?(): number;
		/** [Method] Returns the value of translatable
		* @returns Boolean
		*/
		getTranslatable?(): boolean;
		/** [Method] Sets the value of autoSnapBack
		* @param autoSnapBack Boolean The new value.
		*/
		setAutoSnapBack?( autoSnapBack?:boolean ): void;
		/** [Method] Sets the value of lastUpdatedDateFormat
		* @param lastUpdatedDateFormat String The new value.
		*/
		setLastUpdatedDateFormat?( lastUpdatedDateFormat?:string ): void;
		/** [Method] Sets the value of lastUpdatedText
		* @param lastUpdatedText String The new value.
		*/
		setLastUpdatedText?( lastUpdatedText?:string ): void;
		/** [Method] Sets the value of list
		* @param list Ext.dataview.List The new value.
		*/
		setList?( list?:Ext.dataview.IList ): void;
		/** [Method] Sets the value of loadedText
		* @param loadedText String The new value.
		*/
		setLoadedText?( loadedText?:string ): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String The new value.
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of overpullSnapBackDuration
		* @param overpullSnapBackDuration Number The new value.
		*/
		setOverpullSnapBackDuration?( overpullSnapBackDuration?:number ): void;
		/** [Method] Updates the PullRefreshText
		* @param text String
		*/
		setPullRefreshText?( text?:string ): void;
		/** [Method] Sets the value of pullText
		* @param pullText String The new value.
		*/
		setPullText?( pullText?:string ): void;
		/** [Method] Sets the value of pullTpl
		* @param pullTpl Ext.XTemplate/String/Array The new value.
		*/
		setPullTpl?( pullTpl?:any ): void;
		/** [Method] Updates the ReleaseRefreshText
		* @param text String
		*/
		setReleaseRefreshText?( text?:string ): void;
		/** [Method] Sets the value of releaseText
		* @param releaseText String The new value.
		*/
		setReleaseText?( releaseText?:string ): void;
		/** [Method] Sets the value of scrollerAutoRefresh
		* @param scrollerAutoRefresh Boolean The new value.
		*/
		setScrollerAutoRefresh?( scrollerAutoRefresh?:boolean ): void;
		/** [Method] Sets the value of snappingAnimationDuration
		* @param snappingAnimationDuration Number The new value.
		*/
		setSnappingAnimationDuration?( snappingAnimationDuration?:number ): void;
		/** [Method] Sets the value of translatable
		* @param translatable Boolean The new value.
		*/
		setTranslatable?( translatable?:boolean ): void;
		/** [Method] Snaps the List back to the top after a pullrefresh is complete
		* @param force Boolean Force the snapback to occur regardless of state {optional}
		*/
		snapBack?( force?:boolean ): void;
	}
}
declare namespace Ext.plugin {
	export interface ISortableList extends Ext.IComponent,Ext.mixin.IBindable {
		/** [Method] Returns the value of handleSelector
		* @returns String
		*/
		getHandleSelector?(): string;
		/** [Method] Returns the value of list
		* @returns Object
		*/
		getList?(): any;
		/** [Method] Sets the value of handleSelector
		* @param handleSelector String The new value.
		*/
		setHandleSelector?( handleSelector?:string ): void;
		/** [Method] Sets the value of list
		* @param list Object The new value.
		*/
		setList?( list?:any ): void;
	}
}
declare namespace Ext {
	export interface IProgressIndicator extends Ext.IContainer,Ext.mixin.IProgressable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		centered?: boolean;
		/** [Config Option] (String/Object) */
		fallbackText?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (String/Ext.XTemplate/Object) */
		loadingText?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (Object) */
		monitoredStates?: any;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		getCentered?(): boolean;
		/** [Method] Returns the value of dynamic
		* @returns Boolean
		*/
		getDynamic?(): boolean;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		getHidden?(): boolean;
		/** [Method] Returns the value of hideAnimation
		* @returns Object
		*/
		getHideAnimation?(): any;
		/** [Method] Returns the value of maxProgressInput
		* @returns Number
		*/
		getMaxProgressInput?(): number;
		/** [Method] Returns the value of minProgressInput
		* @returns Number
		*/
		getMinProgressInput?(): number;
		/** [Method] Returns the value of modal
		* @returns Boolean
		*/
		getModal?(): boolean;
		/** [Method] Returns the value of monitoredStates
		* @returns Object
		*/
		getMonitoredStates?(): any;
		/** [Method] Returns the value of showAnimation
		* @returns Object
		*/
		getShowAnimation?(): any;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		setCentered?( centered?:boolean ): void;
		/** [Method] Sets the value of dynamic
		* @param dynamic Boolean The new value.
		*/
		setDynamic?( dynamic?:boolean ): void;
		/** [Method] Sets the value of fallbackText
		* @param fallbackText String/Object The new value.
		*/
		setFallbackText?( fallbackText?:any ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		setHidden?( hidden?:boolean ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation Object The new value.
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets the value of loadingText
		* @param loadingText String/Ext.XTemplate/Object The new value.
		*/
		setLoadingText?( loadingText?:any ): void;
		/** [Method] Sets the value of maxProgressInput
		* @param maxProgressInput Number The new value.
		*/
		setMaxProgressInput?( maxProgressInput?:number ): void;
		/** [Method] Sets the value of minProgressInput
		* @param minProgressInput Number The new value.
		*/
		setMinProgressInput?( minProgressInput?:number ): void;
		/** [Method] Sets the value of modal
		* @param modal Boolean The new value.
		*/
		setModal?( modal?:boolean ): void;
		/** [Method] Sets the value of monitoredStates
		* @param monitoredStates Object The new value.
		*/
		setMonitoredStates?( monitoredStates?:any ): void;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation Object The new value.
		*/
		setShowAnimation?( showAnimation?:any ): void;
	}
}
declare namespace Ext {
	export interface IPromise extends Ext.IBase {
	}
}
declare namespace Ext {
	export interface IRouter {
	}
	export class Router {
		/** [Method] Application s onDependenciesLoaded has a deprecated wrapped line that calls this
		* @param app Object
		*/
		static setAppInstance( app?:any ): void;
	}
}
declare namespace Ext.scroll.indicator {
	export interface IAbstract extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoHide?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of active
		* @returns Boolean
		*/
		getActive?(): boolean;
		/** [Method] Returns the value of autoHide
		* @returns Boolean
		*/
		getAutoHide?(): boolean;
		/** [Method] Returns the value of axis
		* @returns String
		*/
		getAxis?(): string;
		/** [Method] Returns the value of barCls
		* @returns String
		*/
		getBarCls?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		getHidden?(): boolean;
		/** [Method] Returns the value of length
		* @returns Object
		*/
		getLength?(): any;
		/** [Method] Returns the value of minLength
		* @returns Number
		*/
		getMinLength?(): number;
		/** [Method] Returns the value of ratio
		* @returns Number
		*/
		getRatio?(): number;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Returns the value of value
		* @returns Object
		*/
		getValue?(): any;
		/** [Method] Sets the value of active
		* @param active Boolean The new value.
		*/
		setActive?( active?:boolean ): void;
		/** [Method] Sets the value of autoHide
		* @param autoHide Boolean The new value.
		*/
		setAutoHide?( autoHide?:boolean ): void;
		/** [Method] Sets the value of axis
		* @param axis String The new value.
		*/
		setAxis?( axis?:string ): void;
		/** [Method] Sets the value of barCls
		* @param barCls String The new value.
		*/
		setBarCls?( barCls?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		setHidden?( hidden?:boolean ): void;
		/** [Method] Sets the value of length
		* @param length Object The new value.
		*/
		setLength?( length?:any ): void;
		/** [Method] Sets the value of minLength
		* @param minLength Number The new value.
		*/
		setMinLength?( minLength?:number ): void;
		/** [Method] Sets the value of ratio
		* @param ratio Number The new value.
		*/
		setRatio?( ratio?:number ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value
		* @param value Object The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.scroll.indicator {
	export interface ICssTransform extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
	}
}
declare namespace Ext.scroll {
	export interface IIndicator extends Ext.IBase {
	}
}
declare namespace Ext.util {
	export interface IIndicator extends Ext.IBase {
	}
}
declare namespace Ext.scroll.indicator {
	export interface IRounded extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
	}
}
declare namespace Ext.scroll.indicator {
	export interface IScrollPosition extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
	}
}
declare namespace Ext.scroll {
	export interface IScroller extends Ext.IEvented {
		/** [Config Option] (Number) */
		acceleration?: number;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		directionLock?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Number) */
		friction?: number;
		/** [Config Option] (Object/Number) */
		initialOffset?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Number/Object) */
		slotSnapSize?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of directionLock
		* @returns Boolean
		*/
		getDirectionLock?(): boolean;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		getDisabled?(): boolean;
		/** [Method] Returns the value of initialOffset
		* @returns Object/Number
		*/
		getInitialOffset?(): any;
		/** [Method] Returns the value of momentumEasing
		* @returns Object
		*/
		getMomentumEasing?(): any;
		/** [Method] Returns the value of slotSnapEasing
		* @returns Object
		*/
		getSlotSnapEasing?(): any;
		/** [Method] Returns the value of slotSnapSize
		* @returns Number/Object
		*/
		getSlotSnapSize?(): any;
		/** [Method] Returns the value of translatable
		* @returns Object
		*/
		getTranslatable?(): any;
		/** [Method] Returns true if a specified axis is enabled
		* @param axis String The axis to check (x or y).
		* @returns Boolean true if the axis is enabled.
		*/
		isAxisEnabled?( axis?:string ): boolean;
		/** [Method] Change the scroll offset by the given amount
		* @param x Number The offset to scroll by on the x axis.
		* @param y Number The offset to scroll by on the y axis.
		* @param animation Boolean/Object Whether or not to animate the scrolling to the new position.
		* @returns Ext.scroll.Scroller this
		*/
		scrollBy?( x?:number, y?:number, animation?:any ): Ext.scroll.IScroller;
		/** [Method] Scrolls to the given location
		* @param x Number The scroll position on the x axis.
		* @param y Number The scroll position on the y axis.
		* @param animation Boolean/Object Whether or not to animate the scrolling to the new position.
		* @returns Ext.scroll.Scroller this
		*/
		scrollTo?( x?:number, y?:number, animation?:any ): Ext.scroll.IScroller;
		/** [Method] Scrolls to the end of the scrollable view
		* @param animation Object
		* @returns Ext.scroll.Scroller this
		*/
		scrollToEnd?( animation?:any ): Ext.scroll.IScroller;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock
		* @param directionLock Boolean The new value.
		*/
		setDirectionLock?( directionLock?:boolean ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		setDisabled?( disabled?:boolean ): void;
		/** [Method] Sets the value of initialOffset
		* @param initialOffset Object/Number The new value.
		*/
		setInitialOffset?( initialOffset?:any ): void;
		/** [Method] Sets the value of momentumEasing
		* @param momentumEasing Object The new value.
		*/
		setMomentumEasing?( momentumEasing?:any ): void;
		/** [Method] Sets the offset of this scroller
		* @param offset Object The offset to move to.
		* @returns Ext.scroll.Scroller this
		*/
		setOffset?( offset?:any ): Ext.scroll.IScroller;
		/** [Method] Sets the value of slotSnapEasing
		* @param slotSnapEasing Object The new value.
		*/
		setSlotSnapEasing?( slotSnapEasing?:any ): void;
		/** [Method] Sets the value of slotSnapSize
		* @param slotSnapSize Number/Object The new value.
		*/
		setSlotSnapSize?( slotSnapSize?:any ): void;
		/** [Method] Sets the value of translatable
		* @param translatable Object The new value.
		*/
		setTranslatable?( translatable?:any ): void;
		/** [Method] Updates the boundary information for this scroller
		* @returns Ext.scroll.Scroller this
		*/
		updateBoundary?(): Ext.scroll.IScroller;
	}
}
declare namespace Ext.scroll {
	export interface IView extends Ext.IEvented {
		/** [Config Option] (String) */
		indicatorsUi?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of indicators
		* @returns Object
		*/
		getIndicators?(): any;
		/** [Method] Returns the value of indicatorsHidingDelay
		* @returns Number
		*/
		getIndicatorsHidingDelay?(): number;
		/** [Method] Returns the value of indicatorsUi
		* @returns String
		*/
		getIndicatorsUi?(): string;
		/** [Method] Returns the scroller instance in this view
		* @returns Ext.scroll.View The scroller
		*/
		getScroller?(): Ext.scroll.IView;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of indicators
		* @param indicators Object The new value.
		*/
		setIndicators?( indicators?:any ): void;
		/** [Method] Sets the value of indicatorsHidingDelay
		* @param indicatorsHidingDelay Number The new value.
		*/
		setIndicatorsHidingDelay?( indicatorsHidingDelay?:number ): void;
		/** [Method] Sets the value of indicatorsUi
		* @param indicatorsUi String The new value.
		*/
		setIndicatorsUi?( indicatorsUi?:string ): void;
		/** [Method] Sets the value of scroller
		* @param scroller Object The new value.
		*/
		setScroller?( scroller?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IScrollView extends Ext.IEvented {
		/** [Config Option] (String) */
		indicatorsUi?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of indicators
		* @returns Object
		*/
		getIndicators?(): any;
		/** [Method] Returns the value of indicatorsHidingDelay
		* @returns Number
		*/
		getIndicatorsHidingDelay?(): number;
		/** [Method] Returns the value of indicatorsUi
		* @returns String
		*/
		getIndicatorsUi?(): string;
		/** [Method] Returns the scroller instance in this view
		* @returns Ext.scroll.View The scroller
		*/
		getScroller?(): Ext.scroll.IView;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of indicators
		* @param indicators Object The new value.
		*/
		setIndicators?( indicators?:any ): void;
		/** [Method] Sets the value of indicatorsHidingDelay
		* @param indicatorsHidingDelay Number The new value.
		*/
		setIndicatorsHidingDelay?( indicatorsHidingDelay?:number ): void;
		/** [Method] Sets the value of indicatorsUi
		* @param indicatorsUi String The new value.
		*/
		setIndicatorsUi?( indicatorsUi?:string ): void;
		/** [Method] Sets the value of scroller
		* @param scroller Object The new value.
		*/
		setScroller?( scroller?:any ): void;
	}
}
declare namespace Ext {
	export interface ISegmentedButton extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (Boolean) */
		allowMultiple?: boolean;
		/** [Config Option] (Boolean) */
		allowToggle?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Array) */
		pressedButtons?: any[];
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Method] We override initItems so we can check for the pressed config  */
		applyItems?(): void;
		/** [Method] Returns the value of allowDepress
		* @returns Boolean
		*/
		getAllowDepress?(): boolean;
		/** [Method] Returns the value of allowMultiple
		* @returns Boolean
		*/
		getAllowMultiple?(): boolean;
		/** [Method] Returns the value of allowToggle
		* @returns Boolean
		*/
		getAllowToggle?(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Gets the currently pressed button s */
		getPressed?(): void;
		/** [Method] Returns the value of pressedButtons
		* @returns Array
		*/
		getPressedButtons?(): any[];
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns true if a specified Ext Button is pressed
		* @param button Ext.Button The button to check if pressed.
		* @returns Boolean pressed
		*/
		isPressed?( button?:Ext.IButton ): boolean;
		/** [Method] Sets the value of allowDepress
		* @param allowDepress Boolean The new value.
		*/
		setAllowDepress?( allowDepress?:boolean ): void;
		/** [Method] Sets the value of allowMultiple
		* @param allowMultiple Boolean The new value.
		*/
		setAllowMultiple?( allowMultiple?:boolean ): void;
		/** [Method] Sets the value of allowToggle
		* @param allowToggle Boolean The new value.
		*/
		setAllowToggle?( allowToggle?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Activates a button
		* @param button Number/String/Ext.Button The button to activate.
		* @param pressed Boolean If defined, sets the pressed state of the button, otherwise the pressed state is toggled.
		* @param suppressEvents Boolean true to suppress toggle events during the action. If allowMultiple is true, then setPressed will toggle the button state.
		*/
		setPressed?( button?:any, pressed?:boolean, suppressEvents?:boolean ): void;
		/** [Method] Sets the value of pressedButtons
		* @param pressedButtons Array The new value.
		*/
		setPressedButtons?( pressedButtons?:any[] ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
	}
}
declare namespace Ext {
	export interface ISheet extends Ext.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		centered?: boolean;
		/** [Config Option] (String) */
		enter?: string;
		/** [Config Option] (String) */
		exit?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stretchX?: boolean;
		/** [Config Option] (Boolean) */
		stretchY?: boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		getCentered?(): boolean;
		/** [Method] Returns the value of enter
		* @returns String
		*/
		getEnter?(): string;
		/** [Method] Returns the value of exit
		* @returns String
		*/
		getExit?(): string;
		/** [Method] Returns the value of modal
		* @returns Boolean
		*/
		getModal?(): boolean;
		/** [Method] Returns the value of stretchX
		* @returns Boolean
		*/
		getStretchX?(): boolean;
		/** [Method] Returns the value of stretchY
		* @returns Boolean
		*/
		getStretchY?(): boolean;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		setCentered?( centered?:boolean ): void;
		/** [Method] Sets the value of enter
		* @param enter String The new value.
		*/
		setEnter?( enter?:string ): void;
		/** [Method] Sets the value of exit
		* @param exit String The new value.
		*/
		setExit?( exit?:string ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation Object The new value.
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets the value of modal
		* @param modal Boolean The new value.
		*/
		setModal?( modal?:boolean ): void;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation Object The new value.
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the value of stretchX
		* @param stretchX Boolean The new value.
		*/
		setStretchX?( stretchX?:boolean ): void;
		/** [Method] Sets the value of stretchY
		* @param stretchY Boolean The new value.
		*/
		setStretchY?( stretchY?:boolean ): void;
	}
}
declare namespace Ext.slider {
	export interface ISlider extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowThumbsOverlapping?: boolean;
		/** [Config Option] (Boolean/Object) */
		animation?: any;
		/** [Config Option] (Boolean) */
		animationDuration?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Object) */
		thumbConfig?: any;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Sets the increment configuration
		* @param increment Number
		* @returns Number
		*/
		applyIncrement?( increment?:number ): number;
		/** [Method] Returns the value of allowThumbsOverlapping
		* @returns Boolean
		*/
		getAllowThumbsOverlapping?(): boolean;
		/** [Method] Returns the value of animation
		* @returns Boolean/Object
		*/
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of increment
		* @returns Number
		*/
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue
		* @returns Number
		*/
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue
		* @returns Number
		*/
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly
		* @returns Boolean
		*/
		getReadOnly?(): boolean;
		/** [Method] Returns the Thumb instance bound to this Slider
		* @param index Number The index of Thumb to return.
		* @returns Ext.slider.Thumb The thumb instance
		*/
		getThumb?( index?:number ): Ext.slider.IThumb;
		/** [Method] Returns the value of thumbConfig
		* @returns Object
		*/
		getThumbConfig?(): any;
		/** [Method] Returns the Thumb instances bound to this Slider
		* @returns Ext.slider.Thumb[] The thumb instances
		*/
		getThumbs?(): Ext.slider.IThumb[];
		/** [Method] Returns the value of value
		* @returns Number/Number[]
		*/
		getValue?(): any;
		/** [Method] Convenience method
		* @returns Object
		*/
		getValues?(): any;
		/** [Method] Sets the value of allowThumbsOverlapping
		* @param allowThumbsOverlapping Boolean The new value.
		*/
		setAllowThumbsOverlapping?( allowThumbsOverlapping?:boolean ): void;
		/** [Method] Sets the value of animation
		* @param animation Boolean/Object The new value.
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of increment
		* @param increment Number The new value.
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue
		* @param maxValue Number The new value.
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue
		* @param minValue Number The new value.
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly
		* @param readOnly Boolean The new value.
		*/
		setReadOnly?( readOnly?:boolean ): void;
		/** [Method] Sets the value of thumbConfig
		* @param thumbConfig Object The new value.
		*/
		setThumbConfig?( thumbConfig?:any ): void;
		/** [Method] Sets the value of value
		* @param value Number/Number[] The new value.
		*/
		setValue?( value?:any ): void;
		/** [Method] Convenience method
		* @param value Object
		*/
		setValues?( value?:any ): void;
		/** [Method] Updates the sliders thumbs with their new value s
		* @param newValue Object
		* @param oldValue Object
		*/
		updateValue?( newValue?:any, oldValue?:any ): void;
	}
}
declare namespace Ext.slider {
	export interface IThumb extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		draggable?: any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of draggable
		* @returns Object
		*/
		getDraggable?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of draggable
		* @param draggable Object The new value.
		*/
		setDraggable?( draggable?:any ): void;
	}
}
declare namespace Ext.slider {
	export interface IToggle extends Ext.slider.ISlider {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Method] Sets the increment configuration
		* @returns Number
		*/
		applyIncrement?(): number;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of maxValueCls
		* @returns String
		*/
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls
		* @returns String
		*/
		getMinValueCls?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of maxValueCls
		* @param maxValueCls String The new value.
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls
		* @param minValueCls String The new value.
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of value
		* @param newValue Object
		* @param oldValue Object
		*/
		setValue?( newValue?:any, oldValue?:any ): void;
	}
}
declare namespace Ext {
	export interface ISpacer extends Ext.IComponent {
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] Returns the value of flex
		* @returns Number
		*/
		getFlex?(): number;
		/** [Method] Sets the value of flex
		* @param flex Number The new value.
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Sets the value of width
		* @param width Number The new value.
		*/
		setWidth?( width?:number ): void;
	}
}
declare namespace Ext {
	export interface IString {
	}
	export class String {
		/** [Method] Capitalize the given string
		* @param string String
		* @returns String
		*/
		static capitalize( string?:string ): string;
		/** [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length
		* @param value String The string to truncate.
		* @param length Number The maximum length to allow before truncating.
		* @param word Boolean true to try to find a common word break.
		* @returns String The converted text.
		*/
		static ellipsis( value?:string, length?:number, word?:boolean ): string;
		/** [Method] Escapes the passed string for  and
		* @param string String The string to escape.
		* @returns String The escaped string.
		*/
		static escape( string?:string ): string;
		/** [Method] Escapes the passed string for use in a regular expression
		* @param string String
		* @returns String
		*/
		static escapeRegex( string?:string ): string;
		/** [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens
		* @param string String The tokenized string to be formatted.
		* @param values String... First param value to replace token {0}, then next param to replace {1} etc.
		* @returns String The formatted string.
		*/
		static format( string:string, ...values:any[] ): string;
		/** [Method] Convert certain characters  amp lt and from their HTML character equivalents
		* @param value String The string to decode.
		* @returns String The decoded text.
		*/
		static htmlDecode( value?:string ): string;
		/** [Method] Convert certain characters  amp lt and to their HTML character equivalents for literal display in web pages
		* @param value String The string to encode.
		* @returns String The encoded text.
		*/
		static htmlEncode( value?:string ): string;
		/** [Method] Pads the left side of a string with a specified character
		* @param string String The original string.
		* @param size Number The total length of the output string.
		* @param character String The character with which to pad the original string (defaults to empty string " ").
		* @returns String The padded string.
		*/
		static leftPad( string?:string, size?:number, character?:string ): string;
		/** [Method] Returns a string with a specified number of repetitions a given string pattern
		* @param pattern String The pattern to repeat.
		* @param count Number The number of times to repeat the pattern (may be 0).
		* @param sep String An option string to separate each pattern.
		*/
		static repeat( pattern?:string, count?:number, sep?:string ): void;
		/** [Method] Utility function that allows you to easily switch a string between two alternating values
		* @param string String The current string.
		* @param value String The value to compare to the current string.
		* @param other String The new value to use if the string already equals the first value passed in.
		* @returns String The new value.
		*/
		static toggle( string?:string, value?:string, other?:string ): string;
		/** [Method] Trims whitespace from either end of a string leaving spaces within the string intact
		* @param string String The string to escape
		* @returns String The trimmed string
		*/
		static trim( string?:string ): string;
		/** [Method] Appends content to the query string of a URL handling logic for whether to place a question mark or ampersand
		* @param url String The URL to append to.
		* @param string String The content to append to the URL.
		* @returns String The resulting URL.
		*/
		static urlAppend( url?:string, string?:string ): string;
	}
}
declare namespace Ext {
	export interface ISupports {
		/** [Property] (Object) */
		AudioTag?: any;
		/** [Property] (Object) */
		GeoLocation?: any;
		/** [Property] (Object) */
		SVG?: any;
		/** [Property] (Object) */
		Transitions?: any;
		/** [Property] (Object) */
		VML?: any;
	}
}
declare namespace Ext.tab {
	export interface IBar extends Ext.IToolbar {
		/** [Config Option] (Number/String/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Returns the value of activeTab
		* @returns Number/String/Ext.Component
		*/
		getActiveTab?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of activeTab
		* @param activeTab Number/String/Ext.Component The new value.
		*/
		setActiveTab?( activeTab?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare namespace Ext {
	export interface ITabBar extends Ext.IToolbar {
		/** [Config Option] (Number/String/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Returns the value of activeTab
		* @returns Number/String/Ext.Component
		*/
		getActiveTab?(): any;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of activeTab
		* @param activeTab Number/String/Ext.Component The new value.
		*/
		setActiveTab?( activeTab?:any ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare namespace Ext.tab {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Boolean) */
		tabBarDock?: boolean;
		/** [Config Option] (String) */
		tabBarPosition?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Updates this container with the new active item
		* @param tabBar Object
		* @param newTab Object
		* @returns Boolean
		*/
		doTabChange?( tabBar?:any, newTab?:any ): boolean;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of tabBar
		* @returns Object
		*/
		getTabBar?(): any;
		/** [Method] Returns the value of tabBarPosition
		* @returns String
		*/
		getTabBarPosition?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of tabBar
		* @param tabBar Object The new value.
		*/
		setTabBar?( tabBar?:any ): void;
		/** [Method] Sets the value of tabBarPosition
		* @param tabBarPosition String The new value.
		*/
		setTabBarPosition?( tabBarPosition?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Updates the Ui for this component and the tabBar
		* @param newUi Object
		* @param oldUi Object
		*/
		updateUi?( newUi?:any, oldUi?:any ): void;
	}
}
declare namespace Ext {
	export interface ITabPanel extends Ext.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Boolean) */
		tabBarDock?: boolean;
		/** [Config Option] (String) */
		tabBarPosition?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Updates this container with the new active item
		* @param tabBar Object
		* @param newTab Object
		* @returns Boolean
		*/
		doTabChange?( tabBar?:any, newTab?:any ): boolean;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of layout
		* @returns Object
		*/
		getLayout?(): any;
		/** [Method] Returns the value of tabBar
		* @returns Object
		*/
		getTabBar?(): any;
		/** [Method] Returns the value of tabBarPosition
		* @returns String
		*/
		getTabBarPosition?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout Object The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of tabBar
		* @param tabBar Object The new value.
		*/
		setTabBar?( tabBar?:any ): void;
		/** [Method] Sets the value of tabBarPosition
		* @param tabBarPosition String The new value.
		*/
		setTabBarPosition?( tabBarPosition?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Updates the Ui for this component and the tabBar
		* @param newUi Object
		* @param oldUi Object
		*/
		updateUi?( newUi?:any, oldUi?:any ): void;
	}
}
declare namespace Ext.tab {
	export interface ITab extends Ext.IButton {
		/** [Config Option] (Boolean) */
		active?: boolean;
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of active
		* @returns Boolean
		*/
		getActive?(): boolean;
		/** [Method] Returns the value of activeCls
		* @returns String
		*/
		getActiveCls?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Sets the value of active
		* @param active Boolean The new value.
		*/
		setActive?( active?:boolean ): void;
		/** [Method] Sets the value of activeCls
		* @param activeCls String The new value.
		*/
		setActiveCls?( activeCls?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
	}
}
declare namespace Ext {
	export interface ITab extends Ext.IButton {
		/** [Config Option] (Boolean) */
		active?: boolean;
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of active
		* @returns Boolean
		*/
		getActive?(): boolean;
		/** [Method] Returns the value of activeCls
		* @returns String
		*/
		getActiveCls?(): string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of pressedCls
		* @returns String
		*/
		getPressedCls?(): string;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Sets the value of active
		* @param active Boolean The new value.
		*/
		setActive?( active?:boolean ): void;
		/** [Method] Sets the value of activeCls
		* @param activeCls String The new value.
		*/
		setActiveCls?( activeCls?:string ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of pressedCls
		* @param pressedCls String The new value.
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
	}
}
declare namespace Ext {
	export interface ITaskQueue extends Ext.IBase {
	}
	export class TaskQueue {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext {
	export interface ITemplate extends Ext.IBase {
		/** [Config Option] (Boolean) */
		compiled?: boolean;
		/** [Config Option] (Boolean) */
		disableFormats?: boolean;
		/** [Property] (Boolean) */
		isTemplate?: boolean;
		/** [Method] Applies the supplied values to the template and appends the new node s to the specified el
		* @param el String/HTMLElement/Ext.Element The context element.
		* @param values Object/Array The template values. See applyTemplate for details.
		* @param returnElement Boolean true to return an Ext.Element.
		* @returns HTMLElement/Ext.Element The new node or Element.
		*/
		append?( el?:any, values?:any, returnElement?:boolean ): any;
		/** [Method] Returns an HTML fragment of this template with the specified values applied
		* @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});
		* @returns String The HTML fragment.
		*/
		apply?( values?:any ): string;
		/** [Method] Appends the result of this template to the provided output array
		* @param values Object/Array The template values. See apply.
		* @param out Array The array to which output is pushed.
		* @returns Array The given out array.
		*/
		applyOut?( values?:any, out?:any[] ): any[];
		/** [Method] Alias for apply
		* @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});
		* @returns String The HTML fragment.
		*/
		applyTemplate?( values?:any ): string;
		/** [Method] Compiles the template into an internal function eliminating the RegEx overhead
		* @returns Ext.Template this
		*/
		compile?(): Ext.ITemplate;
		/** [Method] Applies the supplied values to the template and inserts the new node s after el
		* @param el String/HTMLElement/Ext.Element The context element.
		* @param values Object/Array The template values. See applyTemplate for details.
		* @param returnElement Boolean true to return a Ext.Element.
		* @returns HTMLElement/Ext.Element The new node or Element.
		*/
		insertAfter?( el?:any, values?:any, returnElement?:boolean ): any;
		/** [Method] Applies the supplied values to the template and inserts the new node s before el
		* @param el String/HTMLElement/Ext.Element The context element.
		* @param values Object/Array The template values. See applyTemplate for details.
		* @param returnElement Boolean true to return an Ext.Element.
		* @returns HTMLElement/Ext.Element The new node or Element
		*/
		insertBefore?( el?:any, values?:any, returnElement?:boolean ): any;
		/** [Method] Applies the supplied values to the template and inserts the new node s as the first child of el
		* @param el String/HTMLElement/Ext.Element The context element.
		* @param values Object/Array The template values. See applyTemplate for details.
		* @param returnElement Boolean true to return a Ext.Element.
		* @returns HTMLElement/Ext.Element The new node or Element.
		*/
		insertFirst?( el?:any, values?:any, returnElement?:boolean ): any;
		/** [Method] Applies the supplied values to the template and overwrites the content of el with the new node s
		* @param el String/HTMLElement/Ext.Element The context element.
		* @param values Object/Array The template values. See applyTemplate for details.
		* @param returnElement Boolean true to return a Ext.Element.
		* @returns HTMLElement/Ext.Element The new node or Element.
		*/
		overwrite?( el?:any, values?:any, returnElement?:boolean ): any;
		/** [Method] Sets the HTML used as the template and optionally compiles it
		* @param html String
		* @param compile Boolean true to compile the template.
		* @returns Ext.Template this
		*/
		set?( html?:string, compile?:boolean ): Ext.ITemplate;
	}
	export class Template {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML
		* @param el String/HTMLElement A DOM element or its id.
		* @param config Object Config object.
		* @returns Ext.Template The created template.
		*/
		static from( el?:any, config?:any ): Ext.ITemplate;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext {
	export interface ITitle extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
	}
}
declare namespace Ext {
	export interface ITitleBar extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (String) */
		maxButtonWidth?: string;
		/** [Config Option] (String) */
		minHeight?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		getItems?(): any;
		/** [Method] Returns the value of maxButtonWidth
		* @returns String
		*/
		getMaxButtonWidth?(): string;
		/** [Method] Returns the value of title
		* @returns String
		*/
		getTitle?(): string;
		/** [Method] Returns the value of titleAlign
		* @returns String
		*/
		getTitleAlign?(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of maxButtonWidth
		* @param maxButtonWidth String The new value.
		*/
		setMaxButtonWidth?( maxButtonWidth?:string ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight String The new value.
		*/
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Sets the value of title
		* @param title String The new value.
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of titleAlign
		* @param titleAlign String The new value.
		*/
		setTitleAlign?( titleAlign?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
	}
}
declare namespace Ext {
	export interface IToolbar extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (String) */
		minHeight?: string;
		/** [Config Option] (String/Ext.Title) */
		title?: any;
		/** [Config Option] (Boolean) */
		titleCls?: boolean;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		getDefaultType?(): string;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		getDocked?(): string;
		/** [Method] Returns the value of layout
		* @returns Object/String
		*/
		getLayout?(): any;
		/** [Method] Returns an Ext Title component
		* @returns Ext.Title
		*/
		getTitle?(): Ext.ITitle;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		getUi?(): string;
		/** [Method] Hides the title if it exists  */
		hideTitle?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of layout
		* @param layout Object/String The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight String The new value.
		*/
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Use this to update the title configuration
		* @param title String/Ext.Title You can either pass a String, or a config/instance of Ext.Title.
		*/
		setTitle?( title?:any ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		setUi?( ui?:string ): void;
		/** [Method] Shows the title if it exists  */
		showTitle?(): void;
	}
}
declare namespace Ext.util {
	export interface IAbstractMixedCollection extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		allowFunctions?: boolean;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param obj Object The item to add.
		* @returns Object The item added.
		*/
		add?( key?:string, obj?:any ): any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true.
		*/
		addAll?( objs?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items from the collection  */
		clear?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		clone?(): Ext.util.IMixedCollection;
		/** [Method] Collects unique values of a particular property in this MixedCollection
		* @param property String The property to collect on.
		* @param root String Optional 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the data object.
		* @param allowNull Boolean Pass true to allow null, undefined, or empty string values.
		* @returns Array The unique values.
		*/
		collect?( property?:string, root?:string, allowNull?:boolean ): any[];
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param o Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		contains?( o?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		containsKey?( key?:string ): boolean;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		eachKey?( fn?:any, scope?:any ): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property.
		* @param anyMatch Boolean true to match any part of the string, not just the beginning
		* @param caseSensitive Boolean true for case sensitive comparison.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		filter?( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;
		/** [Method] Filter by a function
		* @param fn Function The function to be called, it will receive the args o (the object), k (the key)
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection.
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		findBy?( fn?:any, scope?:any ): any;
		/** [Method] Finds the index of the first matching object in this collection by a specific property value
		* @param property String The name of a property on your objects.
		* @param value String/RegExp A string that the property values. should start with or a RegExp to test against the property.
		* @param start Number The index to start searching at.
		* @param anyMatch Boolean true to match any part of the string, not just the beginning.
		* @param caseSensitive Boolean true for case sensitive comparison.
		* @returns Number The matched index or -1.
		*/
		findIndex?( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called, it will receive the args o (the object), k (the key).
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index or -1.
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection..
		*/
		first?(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		get?( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		getAt?( index?:number ): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		getByKey?( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		getCount?(): number;
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey
		* @param item Object The item for which to find the key.
		* @returns Object The key for the passed item.
		*/
		getKey?( item?:any ): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index.
		* @returns Array An array of items
		*/
		getRange?( start?:number, end?:number ): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Returns index within the collection of the passed Object
		* @param o Object The item to find the index of.
		* @returns Number index of the item. Returns -1 if not found.
		*/
		indexOf?( o?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number The index of the key.
		*/
		indexOfKey?( key?:string ): number;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param obj Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		insert?( index?:number, key?:string, obj?:any ): any;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection..
		*/
		last?(): any;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remove an item from the collection
		* @param o Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		remove?( o?:any ): any;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		removeAll?( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		removeAt?( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		removeAtKey?( key?:string ): any;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Replaces an item in the collection
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param o Object If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		replace?( key?:string, o?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Collects all of the values of the given property and returns their sum
		* @param property String The property to sum by.
		* @param root String Optional 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the data object
		* @param start Number The record index to start at.
		* @param end Number The record index to end at.
		* @returns Number The total
		*/
		sum?( property?:string, root?:string, start?:number, end?:number ): number;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IAudio extends Ext.IBase {
	}
	export class Audio {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.util {
	export interface IBufferedCollection extends Ext.util.ICollection,Ext.util.IObservable {
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		getAutoFilter?(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		getAutoSort?(): boolean;
		/** [Method] Returns the value of pageSize
		* @returns Number
		*/
		getPageSize?(): number;
		/** [Method] Returns the value of totalCount
		* @returns Number
		*/
		getTotalCount?(): number;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		setAutoFilter?( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		setAutoSort?( autoSort?:boolean ): void;
		/** [Method] Sets the value of pageSize
		* @param pageSize Number The new value.
		*/
		setPageSize?( pageSize?:number ): void;
		/** [Method] Sets the value of totalCount
		* @param totalCount Number The new value.
		*/
		setTotalCount?( totalCount?:number ): void;
	}
}
declare namespace Ext.util {
	export interface ICollection extends Ext.IBase,Ext.mixin.ISortable,Ext.mixin.IFilterable {
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Property] (Array) */
		all?: any[];
		/** [Property] (Object) */
		indices?: any;
		/** [Property] (Array) */
		items?: any[];
		/** [Property] (Array) */
		keys?: any[];
		/** [Property] (Number) */
		length?: number;
		/** [Property] (Object) */
		map?: any;
		/** [Method] Adds an item to the collection
		* @param key String The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
		* @param item Object The item to add.
		* @returns Object The item added.
		*/
		add?( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection
		* @param addItems Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true.
		*/
		addAll?( addItems?:any ): void;
		/** [Method] This method adds a filter
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		*/
		addFilter?( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array
		* @param filters Object
		* @returns Object
		*/
		addFilters?( filters?:any ): any;
		/** [Method] This method adds a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		addSorter?( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array
		* @param sorters Array An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		addSorters?( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Removes all items from the collection  */
		clear?(): void;
		/** [Method] Creates a shallow copy of this collection
		* @returns Ext.util.MixedCollection
		*/
		clone?(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item
		* @param item Object The Object to look for in the collection.
		* @returns Boolean true if the collection contains the Object as an item.
		*/
		contains?( item?:any ): boolean;
		/** [Method] Returns true if the collection contains the passed Object as a key
		* @param key String The key to look for in the collection.
		* @returns Boolean true if the collection contains the Object as a key.
		*/
		containsKey?( key?:string ): boolean;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for every item in the collection
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
		* @param fn Function The function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		*/
		eachKey?( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters
		* @param property Object
		* @param value Object
		* @param anyMatch Object
		* @param caseSensitive Object
		* @returns Array
		*/
		filter?( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @returns Ext.util.MixedCollection The new filtered collection
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
		* @param fn Function The selection function to execute for each item.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
		* @returns Object The first item in the collection which returned true from the selection function.
		*/
		findBy?( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function
		* @param fn Function The function to be called.
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
		* @param start Number The index to start searching at.
		* @returns Number The matched index, or -1 if the item was not found.
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters
		* @param items Array The array that you want to insert the item into.
		* @param item Mixed The item that you want to insert into the items array.
		* @returns Number The index for the given item in the given array based on the current sorters.
		*/
		findInsertionIndex?( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection
		* @returns Object the first item in the collection.
		*/
		first?(): any;
		/** [Method] Returns the item associated with the passed key OR index
		* @param key String/Number The key or index of the item.
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
		*/
		get?( key?:any ): any;
		/** [Method] Returns the item at the specified index
		* @param index Number The index of the item.
		* @returns Object The item at the specified index.
		*/
		getAt?( index?:number ): any;
		/** [Method] Returns the value of autoFilter
		* @returns Boolean
		*/
		getAutoFilter?(): boolean;
		/** [Method] Returns the value of autoSort
		* @returns Boolean
		*/
		getAutoSort?(): boolean;
		/** [Method] Returns the item associated with the passed key
		* @param key String/Number The key of the item.
		* @returns Object The item associated with the passed key.
		*/
		getByKey?( key?:any ): any;
		/** [Method] Returns the number of items in the collection
		* @returns Number the number of items in the collection.
		*/
		getCount?(): number;
		/** [Method] Returns the value of defaultSortDirection
		* @returns String
		*/
		getDefaultSortDirection?(): string;
		/** [Method] Returns an up to date sort function
		* @returns Function sortFn The sort function.
		*/
		getFilterFn?(): any;
		/** [Method] Returns the value of filterRoot
		* @returns String
		*/
		getFilterRoot?(): string;
		/** [Method] Returns the value of filters
		* @returns Array
		*/
		getFilters?(): any[];
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey
		* @param item Object The item for which to find the key.
		* @returns Object The key for the passed item.
		*/
		getKey?( item?:any ): any;
		/** [Method] Returns a range of items in this collection
		* @param start Number The starting index.
		* @param end Number The ending index. Defaults to the last item.
		* @returns Array An array of items.
		*/
		getRange?( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function
		* @returns Function The sort function.
		*/
		getSortFn?(): any;
		/** [Method] Returns the value of sortRoot
		* @returns String
		*/
		getSortRoot?(): string;
		/** [Method] Returns the value of sorters
		* @returns Array
		*/
		getSorters?(): any[];
		/** [Method] Returns index within the collection of the passed Object
		* @param item Object The item to find the index of.
		* @returns Number Index of the item. Returns -1 if not found.
		*/
		indexOf?( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key
		* @param key String The key to find the index of.
		* @returns Number Index of the key.
		*/
		indexOfKey?( key?:string ): number;
		/** [Method] Inserts an item at the specified index in the collection
		* @param index Number The index to insert the item at.
		* @param key String The key to associate with the new item, or the item itself.
		* @param item Object If the second parameter was a key, the new item.
		* @returns Object The item inserted.
		*/
		insert?( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index
		* @param index Number The index at which to insert the filter.
		* @param filter Ext.util.Sorter/Function/Object Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Object
		*/
		insertFilter?( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index
		* @param index Number The index at which to insert the filters.
		* @param filters Array Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function.
		* @returns Array
		*/
		insertFilters?( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index
		* @param index Number The index at which to insert the sorter.
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		* @param defaultDirection String The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'.
		*/
		insertSorter?( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index
		* @returns Ext.util.Collection this
		*/
		insertSorters?(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection
		* @returns Object the last item in the collection.
		*/
		last?(): any;
		/** [Method] Remove an item from the collection
		* @param item Object The item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		remove?( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection
		* @param items Array An array of items to be removed.
		* @returns Ext.util.MixedCollection this object
		*/
		removeAll?( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection
		* @param index Number The index within the collection of the item to remove.
		* @returns Object The item removed or false if no item was removed.
		*/
		removeAt?( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection
		* @param key String The key of the item to remove.
		* @returns Object/Boolean The item removed or false if no item was removed.
		*/
		removeAtKey?( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array
		* @param filters Object
		* @returns Ext.util.Collection this
		*/
		removeFilters?( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter
		* @param sorter Ext.util.Sorter/String/Function/Object Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function.
		*/
		removeSorter?( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array
		* @param sorters Object
		* @returns Ext.util.Collection this
		*/
		removeSorters?( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection
		* @param oldKey String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
		* @param item Object {Object} item (optional) If the first parameter passed was a key, the item to associate with that key.
		* @returns Object The new item.
		*/
		replace?( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter
		* @param autoFilter Boolean The new value.
		*/
		setAutoFilter?( autoFilter?:boolean ): void;
		/** [Method] Sets the value of autoSort
		* @param autoSort Boolean The new value.
		*/
		setAutoSort?( autoSort?:boolean ): void;
		/** [Method] Sets the value of defaultSortDirection
		* @param defaultSortDirection String The new value.
		*/
		setDefaultSortDirection?( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot
		* @param filterRoot String The new value.
		*/
		setFilterRoot?( filterRoot?:string ): void;
		/** [Method] Sets the value of filters
		* @param filters Array The new value.
		*/
		setFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot
		* @param sortRoot String The new value.
		*/
		setSortRoot?( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters
		* @param sorters Array The new value.
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters
		* @param sorters Object
		* @param defaultDirection Object
		* @returns Array The array you passed after it is sorted.
		*/
		sort?( sorters?:any, defaultDirection?:any ): any[];
	}
}
declare namespace Ext.util {
	export interface IDelayedTask extends Ext.IBase {
		/** [Method] Cancel the last queued timeout */
		cancel?(): void;
		/** [Method] Cancels any pending timeout and queues a new one
		* @param delay Number The milliseconds to delay
		* @param newFn Function Overrides the original function passed when instantiated.
		* @param newScope Object Overrides the original scope passed when instantiated. Remember that if no scope is specified, this will refer to the browser window.
		* @param newArgs Array Overrides the original args passed when instantiated.
		*/
		delay?( delay?:number, newFn?:any, newScope?:any, newArgs?:any[] ): void;
		/** [Method] Returns the value of args
		* @returns Object
		*/
		getArgs?(): any;
		/** [Method] Returns the value of delay
		* @returns Object
		*/
		getDelay?(): any;
		/** [Method] Returns the value of fn
		* @returns Object
		*/
		getFn?(): any;
		/** [Method] Returns the value of interval
		* @returns Object
		*/
		getInterval?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Sets the value of args
		* @param args Object The new value.
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of delay
		* @param delay Object The new value.
		*/
		setDelay?( delay?:any ): void;
		/** [Method] Sets the value of fn
		* @param fn Object The new value.
		*/
		setFn?( fn?:any ): void;
		/** [Method] Sets the value of interval
		* @param interval Object The new value.
		*/
		setInterval?( interval?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IDraggable extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Object/Number) */
		initialOffset?: any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Disable the Draggable
		* @returns Ext.util.Draggable This Draggable instance
		*/
		disable?(): Ext.util.IDraggable;
		/** [Method] Enable the Draggable
		* @returns Ext.util.Draggable This Draggable instance
		*/
		enable?(): Ext.util.IDraggable;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of cls
		* @returns String
		*/
		getCls?(): string;
		/** [Method] Returns the value of constraint
		* @returns String
		*/
		getConstraint?(): string;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of disabled
		* @returns Object
		*/
		getDisabled?(): any;
		/** [Method] Returns the value of draggingCls
		* @returns String
		*/
		getDraggingCls?(): string;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of initialOffset
		* @returns Object/Number
		*/
		getInitialOffset?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of translatable
		* @returns Object
		*/
		getTranslatable?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of cls
		* @param cls String The new value.
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of constraint
		* @param constraint String The new value.
		*/
		setConstraint?( constraint?:string ): void;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Object The new value.
		*/
		setDisabled?( disabled?:any ): void;
		/** [Method] Sets the value of draggingCls
		* @param draggingCls String The new value.
		*/
		setDraggingCls?( draggingCls?:string ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of initialOffset
		* @param initialOffset Object/Number The new value.
		*/
		setInitialOffset?( initialOffset?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of translatable
		* @param translatable Object The new value.
		*/
		setTranslatable?( translatable?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IDroppable extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		group?: string;
		/** [Config Option] (String) */
		hoverCls?: string;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		validDropMode?: string;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Disable the Droppable target  */
		disable?(): void;
		/** [Method] Enable the Droppable target  */
		enable?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Method to determine whether this Component is currently disabled
		* @returns Boolean the disabled state of this Component.
		*/
		isDisabled?(): boolean;
		/** [Method] Method to determine whether this Droppable is currently monitoring drag operations of Draggables
		* @returns Boolean the monitoring state of this Droppable
		*/
		isMonitoring?(): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IFilter extends Ext.IBase {
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		exactMatch?: boolean;
		/** [Config Option] (Function) */
		filterFn?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (RegExp/Mixed) */
		value?: any;
		/** [Method] Returns the value of anyMatch
		* @returns Boolean
		*/
		getAnyMatch?(): boolean;
		/** [Method] Returns the value of caseSensitive
		* @returns Boolean
		*/
		getCaseSensitive?(): boolean;
		/** [Method] Returns the value of exactMatch
		* @returns Boolean
		*/
		getExactMatch?(): boolean;
		/** [Method] Returns the value of filterFn
		* @returns Function
		*/
		getFilterFn?(): any;
		/** [Method] Returns the value of id
		* @returns String
		*/
		getId?(): string;
		/** [Method] Returns the value of property
		* @returns String
		*/
		getProperty?(): string;
		/** [Method] Returns the value of root
		* @returns String
		*/
		getRoot?(): string;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Returns the value of value
		* @returns RegExp/Mixed
		*/
		getValue?(): any;
		/** [Method] Sets the value of anyMatch
		* @param anyMatch Boolean The new value.
		*/
		setAnyMatch?( anyMatch?:boolean ): void;
		/** [Method] Sets the value of caseSensitive
		* @param caseSensitive Boolean The new value.
		*/
		setCaseSensitive?( caseSensitive?:boolean ): void;
		/** [Method] Sets the value of exactMatch
		* @param exactMatch Boolean The new value.
		*/
		setExactMatch?( exactMatch?:boolean ): void;
		/** [Method] Sets the value of filterFn
		* @param filterFn Function The new value.
		*/
		setFilterFn?( filterFn?:any ): void;
		/** [Method] Sets the value of id
		* @param id String The new value.
		*/
		setId?( id?:string ): void;
		/** [Method] Sets the value of property
		* @param property String The new value.
		*/
		setProperty?( property?:string ): void;
		/** [Method] Sets the value of root
		* @param root String The new value.
		*/
		setRoot?( root?:string ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of value
		* @param value RegExp/Mixed The new value.
		*/
		setValue?( value?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IFormat extends Ext.IBase {
	}
	export class Format {
		/** [Property] (String) */
		static defaultDateFormat: string;
		/** [Property] (Array) */
		static potentialUndefinedKeys: any[];
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Parse a value into a formatted date using the specified format pattern
		* @param value String/Date The value to format. Strings must conform to the format expected by the JavaScript Date object's parse() method.
		* @param format String Any valid date format string.
		* @returns String The formatted date string.
		*/
		static date( value?:any, format?:string ): string;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length
		* @param value String The string to truncate.
		* @param length Number The maximum length to allow before truncating.
		* @param word Boolean True to try to find a common word break.
		* @returns String The converted text.
		*/
		static ellipsis( value?:string, length?:number, word?:boolean ): string;
		/** [Method] Escapes the passed string for  and
		* @param string String The string to escape.
		* @returns String The escaped string.
		*/
		static escape( string?:string ): string;
		/** [Method] Escapes the passed string for use in a regular expression
		* @param str String
		* @returns String
		*/
		static escapeRegex( str?:string ): string;
		/** [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens
		* @param string String The tokenized string to be formatted.
		* @param values String... The values to replace token {0}, {1}, etc.
		* @returns String The formatted string.
		*/
		static format( string:string, ...values:any[] ): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Convert certain characters  amp lt and from their HTML character equivalents
		* @param value String The string to decode.
		* @returns String The decoded text.
		*/
		static htmlDecode( value?:string ): string;
		/** [Method] Convert certain characters  amp lt and to their HTML character equivalents for literal display in web pages
		* @param value String The string to encode.
		* @returns String The encoded text.
		*/
		static htmlEncode( value?:string ): string;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Pads the left side of a string with a specified character
		* @param string String The original string.
		* @param size Number The total length of the output string.
		* @param char String The character with which to pad the original string.
		* @returns String The padded string.
		*/
		static leftPad( string?:string, size?:number, char?:string ): string;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Utility function that allows you to easily switch a string between two alternating values
		* @param string String The current string
		* @param value String The value to compare to the current string
		* @param other String The new value to use if the string already equals the first value passed in
		* @returns String The new value
		*/
		static toggle( string?:string, value?:string, other?:string ): string;
		/** [Method] Trims whitespace from either end of a string leaving spaces within the string intact
		* @param string String The string to escape
		* @returns String The trimmed string
		*/
		static trim( string?:string ): string;
	}
}
declare namespace Ext.util {
	export interface IGeolocation extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		allowHighAccuracy?: boolean;
		/** [Config Option] (Boolean) */
		autoUpdate?: boolean;
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Config Option] (Number) */
		maximumAge?: number;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Property] (Number) */
		accuracy?: number;
		/** [Property] (Number) */
		altitude?: number;
		/** [Property] (Number) */
		altitudeAccuracy?: number;
		/** [Property] (Number) */
		heading?: number;
		/** [Property] (Number) */
		latitude?: number;
		/** [Property] (Number) */
		longitude?: number;
		/** [Property] (Number) */
		speed?: number;
		/** [Property] (Date) */
		timestamp?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of allowHighAccuracy
		* @returns Boolean
		*/
		getAllowHighAccuracy?(): boolean;
		/** [Method] Returns the value of autoUpdate
		* @returns Boolean
		*/
		getAutoUpdate?(): boolean;
		/** [Method] Returns the value of frequency
		* @returns Number
		*/
		getFrequency?(): number;
		/** [Method] Returns the value of maximumAge
		* @returns Number
		*/
		getMaximumAge?(): number;
		/** [Method] Returns the value of timeout
		* @returns Number
		*/
		getTimeout?(): number;
		/** [Method] Sets the value of allowHighAccuracy
		* @param allowHighAccuracy Boolean The new value.
		*/
		setAllowHighAccuracy?( allowHighAccuracy?:boolean ): void;
		/** [Method] Sets the value of autoUpdate
		* @param autoUpdate Boolean The new value.
		*/
		setAutoUpdate?( autoUpdate?:boolean ): void;
		/** [Method] Sets the value of frequency
		* @param frequency Number The new value.
		*/
		setFrequency?( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge
		* @param maximumAge Number The new value.
		*/
		setMaximumAge?( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout
		* @param timeout Number The new value.
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Executes a onetime location update operation raising either a locationupdate or locationerror event
		* @param callback Function A callback method to be called when the location retrieval has been completed. Will be called on both success and failure. The method will be passed one parameter, Ext.util.Geolocation (this reference), set to null on failure. geo.updateLocation(function (geo) {  alert('Latitude: ' + (geo !== null ? geo.latitude : 'failed')); });
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		*/
		updateLocation?( callback?:any, scope?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IGrouper extends Ext.util.ISorter {
		/** [Config Option] (Function) */
		groupFn?: any;
		/** [Config Option] (String) */
		sortProperty?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Method] Returns the value of groupFn
		* @returns Function
		*/
		getGroupFn?(): any;
		/** [Method] Returns the value of sortProperty
		* @returns String
		*/
		getSortProperty?(): string;
		/** [Method] Returns the value of sorterFn
		* @returns Function
		*/
		getSorterFn?(): any;
		/** [Method] Sets the value of groupFn
		* @param groupFn Function The new value.
		*/
		setGroupFn?( groupFn?:any ): void;
		/** [Method] Sets the value of sortProperty
		* @param sortProperty String The new value.
		*/
		setSortProperty?( sortProperty?:string ): void;
		/** [Method] Sets the value of sorterFn
		* @param sorterFn Function The new value.
		*/
		setSorterFn?( sorterFn?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IHashMap extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Function) */
		keyFn?: any;
		/** [Method] Add a new item to the hash
		* @param key String The key of the new item.
		* @param value Object The value of the new item.
		* @returns Object The value of the new item added.
		*/
		add?( key?:string, value?:any ): any;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items from the hash
		* @param initial Object
		* @returns Ext.util.HashMap this
		*/
		clear?( initial?:any ): Ext.util.IHashMap;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Performs a shallow copy on this hash
		* @returns Ext.util.HashMap The new hash object.
		*/
		clone?(): Ext.util.IHashMap;
		/** [Method] Checks whether a value exists in the hash
		* @param value Object The value to check for.
		* @returns Boolean true if the value exists in the dictionary.
		*/
		contains?( value?:any ): boolean;
		/** [Method] Checks whether a key exists in the hash
		* @param key String The key to check for.
		* @returns Boolean true if they key exists in the hash.
		*/
		containsKey?( key?:string ): boolean;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for each item in the hash
		* @param fn Function The function to execute.
		* @param scope Object The scope to execute in.
		* @returns Ext.util.HashMap this
		*/
		each?( fn?:any, scope?:any ): Ext.util.IHashMap;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Retrieves an item with a particular key
		* @param key String The key to lookup.
		* @returns Object The value at that key. If it doesn't exist, undefined is returned.
		*/
		get?( key?:string ): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Gets the number of items in the hash
		* @returns Number The number of items in the hash.
		*/
		getCount?(): number;
		/** [Method] Return all of the keys in the hash
		* @returns Array An array of keys.
		*/
		getKeys?(): any[];
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Return all of the values in the hash
		* @returns Array An array of values.
		*/
		getValues?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remove an item from the hash
		* @param o Object The value of the item to remove.
		* @returns Boolean true if the item was successfully removed.
		*/
		remove?( o?:any ): boolean;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Remove an item from the hash
		* @param key String The key to remove.
		* @returns Boolean true if the item was successfully removed.
		*/
		removeByKey?( key?:string ): boolean;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Replaces an item in the hash
		* @param key String The key of the item.
		* @param value Object The new value for the item.
		* @returns Object The new value of the item.
		*/
		replace?( key?:string, value?:any ): any;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IInflector extends Ext.IBase {
	}
	export class Inflector {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Returns the correct Model name for a given string
		* @param word String The word to classify
		* @returns String The classified version of the word
		*/
		static classify( word?:string ): string;
		/** [Method] Removes all registered pluralization rules */
		static clearPlurals(): void;
		/** [Method] Removes all registered singularization rules */
		static clearSingulars(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Returns true if the given word is transnumeral the word is its own singular and plural form  e g
		* @param word String The word to test
		* @returns Boolean True if the word is transnumeral
		*/
		static isTransnumeral( word?:string ): boolean;
		/** [Method] Ordinalizes a given number by adding a prefix such as st nd rd or th based on the last digit of the number
		* @param number Number The number to ordinalize
		* @returns String The ordinalized number
		*/
		static ordinalize( number?:number ): string;
		/** [Method] Adds a new pluralization rule to the Inflector
		* @param matcher RegExp The matcher regex
		* @param replacer String The replacement string, which can reference matches from the matcher argument
		*/
		static plural( matcher?:RegExp, replacer?:string ): void;
		/** [Method] Returns the pluralized form of a word e g
		* @param word String The word to pluralize
		* @returns String The pluralized form of the word
		*/
		static pluralize( word?:string ): string;
		/** [Method] Adds a new singularization rule to the Inflector
		* @param matcher RegExp The matcher regex
		* @param replacer String The replacement string, which can reference matches from the matcher argument
		*/
		static singular( matcher?:RegExp, replacer?:string ): void;
		/** [Method] Returns the singularized form of a word e g
		* @param word String The word to singularize
		* @returns String The singularized form of the word
		*/
		static singularize( word?:string ): string;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.util {
	export interface IInputBlocker extends Ext.IBase {
	}
	export class InputBlocker {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.util {
	export interface ILineSegment extends Ext.IBase {
		/** [Method] Returns the point where two lines intersect
		* @param lineSegment Ext.util.LineSegment The line to intersect with.
		* @returns Ext.util.Point
		*/
		intersects?( lineSegment?:Ext.util.ILineSegment ): Ext.util.IPoint;
		/** [Method] Returns string representation of the line
		* @returns String For example Point[12,8] Point[0,0]
		*/
		toString?(): string;
	}
}
declare namespace Ext.util {
	export interface IMixedCollection extends Ext.util.IAbstractMixedCollection,Ext.util.ISortable {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Performs initialization of this mixin  */
		initSortable?(): void;
		/** [Method] Reorders each of the items based on a mapping from old index to new index
		* @param mapping Object Mapping from old item index to new item index.
		*/
		reorder?( mapping?:any ): void;
		/** [Method] Sorts the data in the Store by one or more of its properties
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations.
		* @param direction String The overall direction to sort the data by.
		* @param where String
		* @param doSort Boolean
		* @returns Ext.util.Sorter[]
		*/
		sort?( sorters?:any, direction?:string, where?:string, doSort?:boolean ): Ext.util.ISorter[];
		/** [Method] Sorts the collection by a single sorter function
		* @param sorterFn Function The function to sort by.
		*/
		sortBy?( sorterFn?:any ): void;
		/** [Method] Sorts this collection by keys
		* @param dir String Sorting direction: 'ASC' or 'DESC'.
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string.
		*/
		sortByKey?( dir?:string, fn?:any ): void;
	}
}
declare namespace Ext.util {
	export interface IOffset extends Ext.IBase {
	}
}
declare namespace Ext.util.paintmonitor {
	export interface IAbstract extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of args
		* @returns Array
		*/
		getArgs?(): any[];
		/** [Method] Returns the value of callback
		* @returns Object
		*/
		getCallback?(): any;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Sets the value of args
		* @param args Array The new value.
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of callback
		* @param callback Object The new value.
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
	}
}
declare namespace Ext.util.paintmonitor {
	export interface ICssAnimation extends Ext.util.paintmonitor.IAbstract {
	}
}
declare namespace Ext.util {
	export interface IPaintMonitor extends Ext.IBase {
	}
}
declare namespace Ext.util.paintmonitor {
	export interface IOverflowChange extends Ext.util.paintmonitor.IAbstract {
	}
}
declare namespace Ext.util {
	export interface IPoint extends Ext.IBase {
		/** [Method] Copy a new instance of this point
		* @returns Ext.util.Point The new point.
		*/
		clone?(): Ext.util.IPoint;
		/** [Method] Clones this Point
		* @returns Ext.util.Point The new point.
		*/
		copy?(): Ext.util.IPoint;
		/** [Method] Copy the x and y values of another point  object to this point itself
		* @param point Ext.util.Point/Object .
		* @returns Ext.util.Point This point.
		*/
		copyFrom?( point?:any ): Ext.util.IPoint;
		/** [Method] Compare this point and another point
		* @param point Ext.util.Point/Object The point to compare with, either an instance of Ext.util.Point or an object with x and y properties.
		* @returns Boolean Returns whether they are equivalent.
		*/
		equals?( point?:any ): boolean;
		/** [Method] Whether the given point is not away from this point within the given threshold amount
		* @param point Ext.util.Point/Object The point to check with, either an instance of Ext.util.Point or an object with x and y properties.
		* @param threshold Object/Number Can be either an object with x and y properties or a number.
		* @returns Boolean
		*/
		isCloseTo?( point?:any, threshold?:any ): boolean;
		/** [Method] Returns true if this point is close to another one
		* @returns Boolean
		*/
		isWithin?(): boolean;
		/** [Method] Compare this point with another point when the x and y values of both points are rounded
		* @param point Ext.util.Point/Object The point to compare with, either an instance of Ext.util.Point or an object with x and y properties.
		* @returns Boolean
		*/
		roundedEquals?( point?:any ): boolean;
		/** [Method] Returns a human eye friendly string that represents this point useful for debugging
		* @returns String For example Point[12,8].
		*/
		toString?(): string;
		/** [Method] Translate this point by the given amounts
		* @param x Number Amount to translate in the x-axis.
		* @param y Number Amount to translate in the y-axis.
		* @returns Boolean
		*/
		translate?( x?:number, y?:number ): boolean;
	}
	export class Point {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Returns a new point from an object that has x and y properties if that object is not an instance of Ext util Point
		* @param object Object
		* @returns Ext.util.Point
		*/
		static from( object?:any ): Ext.util.IPoint;
		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given event
		* @param e Event The event.
		* @returns Ext.util.Point
		*/
		static fromEvent( e?:Event ): Ext.util.IPoint;
		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given touch
		* @param touch Event
		* @returns Ext.util.Point
		*/
		static fromTouch( touch?:Event ): Ext.util.IPoint;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.util {
	export interface IPositionMap extends Ext.IBase {
		/** [Method] Returns the value of minimumHeight
		* @returns Number
		*/
		getMinimumHeight?(): number;
		/** [Method] Sets the value of minimumHeight
		* @param minimumHeight Number The new value.
		*/
		setMinimumHeight?( minimumHeight?:number ): void;
	}
}
declare namespace Ext.util {
	export interface IRegion extends Ext.IBase {
		/** [Method] Modifies the current region to be adjusted by offsets
		* @param top Number Top offset
		* @param right Number Right offset
		* @param bottom Number Bottom offset
		* @param left Number Left offset
		* @returns Ext.util.Region this
		*/
		adjust?( top?:number, right?:number, bottom?:number, left?:number ): Ext.util.IRegion;
		/** [Method] Modifies the current region to be constrained to the targetRegion
		* @param targetRegion Ext.util.Region
		* @returns Ext.util.Region this
		*/
		constrainTo?( targetRegion?:Ext.util.IRegion ): Ext.util.IRegion;
		/** [Method] Checks if this region completely contains the region that is passed in
		* @param region Ext.util.Region
		* @returns Boolean
		*/
		contains?( region?:Ext.util.IRegion ): boolean;
		/** [Method] Copy a new instance
		* @returns Ext.util.Region
		*/
		copy?(): Ext.util.IRegion;
		/** [Method] Check whether this region is equivalent to the given region
		* @param region Ext.util.Region The region to compare with.
		* @returns Boolean
		*/
		equals?( region?:Ext.util.IRegion ): boolean;
		/** [Method] Get the offset amount of a point outside the region
		* @param axis String/Object optional.
		* @param p Ext.util.Point The point.
		* @returns Ext.util.Region
		*/
		getOutOfBoundOffset?( axis?:any, p?:Ext.util.IPoint ): Ext.util.IRegion;
		/** [Method] Get the offset amount on the x axis
		* @param p Number The offset.
		* @returns Number
		*/
		getOutOfBoundOffsetX?( p?:number ): number;
		/** [Method] Get the offset amount on the y axis
		* @param p Number The offset.
		* @returns Number
		*/
		getOutOfBoundOffsetY?( p?:number ): number;
		/** [Method] Checks if this region intersects the region passed in
		* @param region Ext.util.Region
		* @returns Ext.util.Region/Boolean Returns the intersected region or false if there is no intersection.
		*/
		intersect?( region?:Ext.util.IRegion ): any;
		/** [Method] Check whether the point  offset is out of bounds
		* @param axis String optional
		* @param p Ext.util.Point/Number The point / offset.
		* @returns Boolean
		*/
		isOutOfBound?( axis?:string, p?:any ): boolean;
		/** [Method] Check whether the offset is out of bound in the x axis
		* @param p Number The offset.
		* @returns Boolean
		*/
		isOutOfBoundX?( p?:number ): boolean;
		/** [Method] Check whether the offset is out of bound in the y axis
		* @param p Number The offset.
		* @returns Boolean
		*/
		isOutOfBoundY?( p?:number ): boolean;
		/** [Method] Round all the properties of this region
		* @returns Ext.util.Region This Region.
		*/
		round?(): Ext.util.IRegion;
		/** [Method] Dump this to an eye friendly string great for debugging
		* @returns String For example Region[0,1,3,2].
		*/
		toString?(): string;
		/** [Method] Translate this region by the given offset amount
		* @param offset Object
		* @returns Ext.util.Region This Region.
		*/
		translateBy?( offset?:any ): Ext.util.IRegion;
		/** [Method] Returns the smallest region that contains the current AND targetRegion
		* @param region Ext.util.Region
		* @returns Ext.util.Region
		*/
		union?( region?:Ext.util.IRegion ): Ext.util.IRegion;
	}
	export class Region {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Creates new Region from an object  Ext util Region from top 0 right 5 bottom 3 left  1  the above is eq
		* @param o Object An object with top, right, bottom, and left properties.
		* @returns Ext.util.Region The region constructed based on the passed object.
		*/
		static from( o?:any ): Ext.util.IRegion;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Retrieves an Ext util Region for a particular element
		* @param el String/HTMLElement/Ext.Element The element or its ID.
		* @returns Ext.util.Region region
		*/
		static getRegion( el?:any ): Ext.util.IRegion;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext.util.sizemonitor {
	export interface IAbstract extends Ext.IBase,Ext.mixin.ITemplatable {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of args
		* @returns Array
		*/
		getArgs?(): any[];
		/** [Method] Returns the value of callback
		* @returns Object
		*/
		getCallback?(): any;
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Returns the value of scope
		* @returns Object
		*/
		getScope?(): any;
		/** [Method] Sets the value of args
		* @param args Array The new value.
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of callback
		* @param callback Object The new value.
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of scope
		* @param scope Object The new value.
		*/
		setScope?( scope?:any ): void;
	}
}
declare namespace Ext.util.sizemonitor {
	export interface IDefault extends Ext.util.sizemonitor.IAbstract {
	}
}
declare namespace Ext.util {
	export interface ISizeMonitor extends Ext.IBase {
	}
}
declare namespace Ext.util.sizemonitor {
	export interface IOverflowChange extends Ext.util.sizemonitor.IAbstract {
	}
}
declare namespace Ext.util.sizemonitor {
	export interface IScroll extends Ext.util.sizemonitor.IAbstract {
	}
}
declare namespace Ext.util {
	export interface ISortable extends Ext.mixin.IMixin {
		/** [Property] (String) */
		defaultSortDirection?: string;
		/** [Property] (Boolean) */
		isSortable?: boolean;
		/** [Property] (String) */
		sortRoot?: string;
		/** [Property] (Ext.util.MixedCollection) */
		sorters?: Ext.util.IMixedCollection;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Performs initialization of this mixin  */
		initSortable?(): void;
		/** [Method] Sorts the data in the Store by one or more of its properties
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations.
		* @param direction String The overall direction to sort the data by.
		* @param where String
		* @param doSort Boolean
		* @returns Ext.util.Sorter[]
		*/
		sort?( sorters?:any, direction?:string, where?:string, doSort?:boolean ): Ext.util.ISorter[];
	}
}
declare namespace Ext.util {
	export interface ISorter extends Ext.IBase {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Mixed) */
		id?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Config Option] (Function) */
		transform?: any;
		/** [Method] Returns the value of direction
		* @returns String
		*/
		getDirection?(): string;
		/** [Method] Returns the value of id
		* @returns Mixed
		*/
		getId?(): any;
		/** [Method] Returns the value of property
		* @returns String
		*/
		getProperty?(): string;
		/** [Method] Returns the value of root
		* @returns String
		*/
		getRoot?(): string;
		/** [Method] Returns the value of sorterFn
		* @returns Function
		*/
		getSorterFn?(): any;
		/** [Method] Returns the value of transform
		* @returns Function
		*/
		getTransform?(): any;
		/** [Method] Sets the value of direction
		* @param direction String The new value.
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of id
		* @param id Mixed The new value.
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of property
		* @param property String The new value.
		*/
		setProperty?( property?:string ): void;
		/** [Method] Sets the value of root
		* @param root String The new value.
		*/
		setRoot?( root?:string ): void;
		/** [Method] Sets the value of sorterFn
		* @param sorterFn Function The new value.
		*/
		setSorterFn?( sorterFn?:any ): void;
		/** [Method] Sets the value of transform
		* @param transform Function The new value.
		*/
		setTransform?( transform?:any ): void;
		/** [Method] Toggles the direction of this Sorter  */
		toggle?(): void;
	}
}
declare namespace Ext.util {
	export interface ITapRepeater extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		enableBubble?( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of accelerate
		* @returns Boolean
		*/
		getAccelerate?(): boolean;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		getBubbleEvents?(): any;
		/** [Method] Returns the value of delay
		* @returns Number
		*/
		getDelay?(): number;
		/** [Method] Returns the value of el
		* @returns Object
		*/
		getEl?(): any;
		/** [Method] Returns the value of interval
		* @returns Number
		*/
		getInterval?(): number;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		getListeners?(): any;
		/** [Method] Returns the value of pressCls
		* @returns Object
		*/
		getPressCls?(): any;
		/** [Method] Returns the value of preventDefault
		* @returns Boolean
		*/
		getPreventDefault?(): boolean;
		/** [Method] Returns the value of stopDefault
		* @returns Boolean
		*/
		getStopDefault?(): boolean;
		/** [Method] Returns the value of timer
		* @returns Number
		*/
		getTimer?(): number;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		hasListener?( eventName?:string ): boolean;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		resumeEvents?( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of accelerate
		* @param accelerate Boolean The new value.
		*/
		setAccelerate?( accelerate?:boolean ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		setBubbleEvents?( bubbleEvents?:any ): void;
		/** [Method] Sets the value of delay
		* @param delay Number The new value.
		*/
		setDelay?( delay?:number ): void;
		/** [Method] Sets the value of el
		* @param el Object The new value.
		*/
		setEl?( el?:any ): void;
		/** [Method] Sets the value of interval
		* @param interval Number The new value.
		*/
		setInterval?( interval?:number ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of pressCls
		* @param pressCls Object The new value.
		*/
		setPressCls?( pressCls?:any ): void;
		/** [Method] Sets the value of preventDefault
		* @param preventDefault Boolean The new value.
		*/
		setPreventDefault?( preventDefault?:boolean ): void;
		/** [Method] Sets the value of stopDefault
		* @param stopDefault Boolean The new value.
		*/
		setStopDefault?( stopDefault?:boolean ): void;
		/** [Method] Sets the value of timer
		* @param timer Number The new value.
		*/
		setTimer?( timer?:number ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;
	}
}
declare namespace Ext.util.translatable {
	export interface IAbstract extends Ext.IEvented {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of easing
		* @returns Object
		*/
		getEasing?(): any;
		/** [Method] Returns the value of easingX
		* @returns Object
		*/
		getEasingX?(): any;
		/** [Method] Returns the value of easingY
		* @returns Object
		*/
		getEasingY?(): any;
		/** [Method] Returns the value of useWrapper
		* @returns Object
		*/
		getUseWrapper?(): any;
		/** [Method] Sets the value of easing
		* @param easing Object The new value.
		*/
		setEasing?( easing?:any ): void;
		/** [Method] Sets the value of easingX
		* @param easingX Object The new value.
		*/
		setEasingX?( easingX?:any ): void;
		/** [Method] Sets the value of easingY
		* @param easingY Object The new value.
		*/
		setEasingY?( easingY?:any ): void;
		/** [Method] Sets the value of useWrapper
		* @param useWrapper Object The new value.
		*/
		setUseWrapper?( useWrapper?:any ): void;
	}
}
declare namespace Ext.util.translatable {
	export interface ICssPosition extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
	}
}
declare namespace Ext.util.translatable {
	export interface ICssTransform extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
	}
}
declare namespace Ext.util.translatable {
	export interface IDom extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of element
		* @returns Object
		*/
		getElement?(): any;
		/** [Method] Sets the value of element
		* @param element Object The new value.
		*/
		setElement?( element?:any ): void;
	}
}
declare namespace Ext.util {
	export interface ITranslatable extends Ext.IBase {
	}
}
declare namespace Ext.util.translatable {
	export interface IScrollPosition extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of useWrapper
		* @returns Boolean
		*/
		getUseWrapper?(): boolean;
		/** [Method] Sets the value of useWrapper
		* @param useWrapper Boolean The new value.
		*/
		setUseWrapper?( useWrapper?:boolean ): void;
	}
}
declare namespace Ext.util {
	export interface ITranslatableGroup extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of activeIndex
		* @returns Number
		*/
		getActiveIndex?(): number;
		/** [Method] Returns the value of itemLength
		* @returns Object
		*/
		getItemLength?(): any;
		/** [Method] Returns the value of items
		* @returns Array
		*/
		getItems?(): any[];
		/** [Method] Sets the value of activeIndex
		* @param activeIndex Number The new value.
		*/
		setActiveIndex?( activeIndex?:number ): void;
		/** [Method] Sets the value of itemLength
		* @param itemLength Object The new value.
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of items
		* @param items Array The new value.
		*/
		setItems?( items?:any[] ): void;
	}
}
declare namespace Ext.util {
	export interface ITranslatableList extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of items
		* @returns Array
		*/
		getItems?(): any[];
		/** [Method] Sets the value of items
		* @param items Array The new value.
		*/
		setItems?( items?:any[] ): void;
	}
}
declare namespace Ext.util {
	export interface IWrapper extends Ext.IBase,Ext.mixin.IBindable {
		/** [Method]  */
		destroy?(): void;
	}
}
declare namespace Ext.ux {
	export interface IActionOverFlowMenuButton extends Ext.ux.IMenuButton {
		/** [Property] () */
		menuItems?: any;
	}
}
declare namespace Ext.ux {
	export interface IApplicationMenu extends Ext.IMenu {
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		getDefaults?(): any;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		setDefaults?( defaults?:any ): void;
	}
}
declare namespace Ext.ux {
	export interface IContextMenu extends Ext.IMenu {
	}
}
declare namespace Ext.ux.device.analytics {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of accountID
		* @returns Object
		*/
		getAccountID?(): any;
		/** [Method] Registers yur Google Analytics account
		* @param accountID String Your Google Analytics account ID
		*/
		registerAccount?( accountID?:string ): void;
		/** [Method] Sets the value of accountID
		* @param accountID Object The new value.
		*/
		setAccountID?( accountID?:any ): void;
		/** [Method] Track an event in your application
		* @param config Object
		*/
		trackEvent?( config?:any ): void;
		/** [Method] Track an pageview in your application
		* @param config String The page you want to track (must start with a slash).
		*/
		trackPageview?( config?:string ): void;
	}
}
declare namespace Ext.ux.device.analytics {
	export interface ICordova extends Ext.ux.device.analytics.IAbstract {
		/** [Method] Track an event in your application
		* @param config Object
		*/
		trackEvent?( config?:any ): void;
		/** [Method] Track an pageview in your application
		* @param page Object
		*/
		trackPageview?( page?:any ): void;
	}
}
declare namespace Ext.ux.device {
	export interface IAnalytics extends Ext.IBase,Ext.ux.device.analytics.IAbstract {
	}
	export class Analytics {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the value of accountID
		* @returns Object
		*/
		static getAccountID(): any;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Registers yur Google Analytics account
		* @param accountID String Your Google Analytics account ID
		*/
		static registerAccount( accountID?:string ): void;
		/** [Method] Sets the value of accountID
		* @param accountID Object The new value.
		*/
		static setAccountID( accountID?:any ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Track an event in your application
		* @param config Object
		*/
		static trackEvent( config?:any ): void;
		/** [Method] Track an pageview in your application
		* @param config String The page you want to track (must start with a slash).
		*/
		static trackPageview( config?:string ): void;
	}
}
declare namespace Ext.ux.device.twitter {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Pops up a Twitter compose sheet view with your specified tweet
		* @param config Object An object which contains the following config options:
		*/
		compose?( config?:any ): void;
		/** [Method] Gets Tweets from Twitter Mentions
		* @param config Object An object which contains the following config options:
		*/
		getMentions?( config?:any ): void;
		/** [Method] Gets Tweets from Twitter Timeline
		* @param config Object An object which contains the following config options:
		*/
		getPublicTimeline?( config?:any ): void;
		/** [Method] Gets a specific Twitter user info
		* @param config Object An object which contains the following config options:
		*/
		getTwitterRequest?( config?:any ): void;
		/** [Method] Gets a specific Twitter user info
		* @param config Object An object which contains the following config options:
		*/
		getTwitterUsername?( config?:any ): void;
	}
}
declare namespace Ext.ux.device.twitter {
	export interface ICordova extends Ext.IBase {
	}
}
declare namespace Ext.ux.device {
	export interface ITwitter extends Ext.IBase,Ext.ux.device.twitter.IAbstract {
	}
	export class Twitter {
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Pops up a Twitter compose sheet view with your specified tweet
		* @param config Object An object which contains the following config options:
		*/
		static compose( config?:any ): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Gets Tweets from Twitter Mentions
		* @param config Object An object which contains the following config options:
		*/
		static getMentions( config?:any ): void;
		/** [Method] Gets Tweets from Twitter Timeline
		* @param config Object An object which contains the following config options:
		*/
		static getPublicTimeline( config?:any ): void;
		/** [Method] Gets a specific Twitter user info
		* @param config Object An object which contains the following config options:
		*/
		static getTwitterRequest( config?:any ): void;
		/** [Method] Gets a specific Twitter user info
		* @param config Object An object which contains the following config options:
		*/
		static getTwitterUsername( config?:any ): void;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
	}
}
declare namespace Ext.ux {
	export interface IMenuButton extends Ext.IButton {
		/** [Method] Returns the value of menuItems
		* @returns Array
		*/
		getMenuItems?(): any[];
		/** [Method] Sets the value of menuItems
		* @param menuItems Array The new value.
		*/
		setMenuItems?( menuItems?:any[] ): void;
	}
}
declare namespace Ext.ux {
	export interface ITabMenuButton extends Ext.ux.IMenuButton {
		/** [Property] () */
		menuItems?: any;
	}
}
declare namespace Ext {
	export interface IVersion {
		/** [Method] Create a closure for deprecated code
		* @param packageName String The package name.
		* @param since String The last version before it's deprecated.
		* @param closure Function The callback function to be executed with the specified version is less than the current version.
		* @param scope Object The execution scope (this) if the closure
		*/
		deprecate?( packageName?:string, since?:string, closure?:any, scope?:any ): void;
		/** [Method] Returns whether this version equals to the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version equals to the target, false otherwise.
		*/
		equals?( target?:any ): boolean;
		/** [Method] Returns the build component value
		* @returns Number build
		*/
		getBuild?(): number;
		/** [Method] Returns the major component value
		* @returns Number major
		*/
		getMajor?(): number;
		/** [Method] Returns the minor component value
		* @returns Number minor
		*/
		getMinor?(): number;
		/** [Method] Returns the patch component value
		* @returns Number patch
		*/
		getPatch?(): number;
		/** [Method] Returns the release component value
		* @returns Number release
		*/
		getRelease?(): number;
		/** [Method] Returns shortVersion version without dots and release
		* @returns String
		*/
		getShortVersion?(): string;
		/** [Method] Get the version number of the supplied package name will return the last registered version last Ext setVersion  c
		* @param packageName String The package name, for example: 'core', 'touch', 'extjs'.
		* @returns Ext.Version The version.
		*/
		getVersion?( packageName?:string ): Ext.IVersion;
		/** [Method] Convenient alias to isGreaterThan
		* @param target String/Number
		* @returns Boolean
		*/
		gt?( target?:any ): boolean;
		/** [Method] Convenient alias to isGreaterThanOrEqual
		* @param target String/Number
		* @returns Boolean
		*/
		gtEq?( target?:any ): boolean;
		/** [Method] Returns whether this version if greater than the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version if greater than the target, false otherwise.
		*/
		isGreaterThan?( target?:any ): boolean;
		/** [Method] Returns whether this version if greater than or equal to the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version if greater than or equal to the target, false otherwise.
		*/
		isGreaterThanOrEqual?( target?:any ): boolean;
		/** [Method] Returns whether this version if smaller than the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version if smaller than the target, false otherwise.
		*/
		isLessThan?( target?:any ): boolean;
		/** [Method] Returns whether this version if less than or equal to the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version if less than or equal to the target, false otherwise.
		*/
		isLessThanOrEqual?( target?:any ): boolean;
		/** [Method] Convenient alias to isLessThan
		* @param target String/Number
		* @returns Boolean
		*/
		lt?( target?:any ): boolean;
		/** [Method] Convenient alias to isLessThanOrEqual
		* @param target String/Number
		* @returns Boolean
		*/
		ltEq?( target?:any ): boolean;
		/** [Method] Returns whether this version matches the supplied argument
		* @param target String/Number The version to compare with.
		* @returns Boolean true if this version matches the target, false otherwise.
		*/
		match?( target?:any ): boolean;
		/** [Method] Set version number for the given package name
		* @param packageName String The package name, for example: 'core', 'touch', 'extjs'.
		* @param version String/Ext.Version The version, for example: '1.2.3alpha', '2.4.0-dev'.
		* @returns any
		*/
		setVersion?( packageName?:string, version?:any ): any;
		/** [Method] Returns this format  major minor patch build release
		* @returns Number[]
		*/
		toArray?(): number[];
		/** [Method]
		* @param value Number
		* @returns Number
		*/
		toNumber?( value?:number ): number;
	}
	export class Version {
		/** [Method] Compare 2 specified versions starting from left to right
		* @param current String The current version to compare to.
		* @param target String The target version to compare to.
		* @returns Number Returns -1 if the current version is smaller than the target version, 1 if greater, and 0 if they're equivalent.
		*/
		static compare( current?:string, target?:string ): number;
		/** [Method] Converts a version component to a comparable value
		* @param value Object The value to convert
		* @returns Object
		*/
		static getComponentValue( value?:any ): any;
	}
}
declare namespace Ext {
	export interface IVideo extends Ext.IMedia {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		posterUrl?: string;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		getBaseCls?(): string;
		/** [Method] Returns the value of posterUrl
		* @returns String
		*/
		getPosterUrl?(): string;
		/** [Method] Returns the value of url
		* @returns string
		*/
		getUrl?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of posterUrl
		* @param posterUrl String The new value.
		*/
		setPosterUrl?( posterUrl?:string ): void;
		/** [Method] Sets the value of url
		* @param url String/Array The new value.
		*/
		setUrl?( url?:any ): void;
		/** [Method] Updates the URL to the poster even if it is rendered
		* @param newUrl Object
		*/
		updatePosterUrl?( newUrl?:any ): void;
		/** [Method] Sets the URL of the media element
		* @param newUrl Object
		*/
		updateUrl?( newUrl?:any ): void;
	}
}
declare namespace Ext.viewport {
	export interface IAndroid extends Ext.viewport.IDefault {
		/** [Method] Returns the value of translatable
		* @returns Object
		*/
		getTranslatable?(): any;
		/** [Method] Retrieves the document height
		* @returns Number height in pixels.
		*/
		getWindowHeight?(): number;
		/** [Method] Retrieves the document width
		* @returns Number width in pixels.
		*/
		getWindowWidth?(): number;
		/** [Method] Sets the value of translatable
		* @param translatable Object The new value.
		*/
		setTranslatable?( translatable?:any ): void;
	}
}
declare namespace Ext.viewport {
	export interface IDefault extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		autoMaximize?: boolean;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean) */
		preventPanning?: boolean;
		/** [Config Option] (Boolean) */
		preventZooming?: boolean;
		/** [Property] (Boolean) */
		isReady?: boolean;
		/** [Method] Returns the value of autoMaximize
		* @returns Boolean
		*/
		getAutoMaximize?(): boolean;
		/** [Method] Returns the value of layout
		* @returns Object/String
		*/
		getLayout?(): any;
		/** [Method] Returns the current orientation
		* @returns String portrait or landscape
		*/
		getOrientation?(): string;
		/** [Method] Returns the value of preventPanning
		* @returns Boolean
		*/
		getPreventPanning?(): boolean;
		/** [Method] Returns the value of preventZooming
		* @returns Boolean
		*/
		getPreventZooming?(): boolean;
		/** [Method] Returns the height and width of the Component
		* @returns Object The current height and width of the Component.
		*/
		getSize?(): any;
		/** [Method] Returns the value of useBodyElement
		* @returns Boolean
		*/
		getUseBodyElement?(): boolean;
		/** [Method] Retrieves the document height
		* @returns Number height in pixels.
		*/
		getWindowHeight?(): number;
		/** [Method] Retrieves the document width
		* @returns Number width in pixels.
		*/
		getWindowWidth?(): number;
		/** [Method] Hides all visible menus
		* @param animation Object
		*/
		hideAllMenus?( animation?:any ): void;
		/** [Method] Hides a menu specified by the menu s side
		* @param side String The side which the menu is placed.
		*/
		hideMenu?( side?:string ): void;
		/** [Method] Hides all menus except for the side specified
		* @param side String Side(s) not to hide
		* @param animation String Animation to hide with
		*/
		hideOtherMenus?( side?:string, animation?:string ): void;
		/** [Method] Removes a menu from a specified side
		* @param side String The side to remove the menu from
		*/
		removeMenu?( side?:string ): void;
		/** [Method] Sets the value of autoMaximize
		* @param autoMaximize Boolean The new value.
		*/
		setAutoMaximize?( autoMaximize?:boolean ): void;
		/** [Method] Sets the value of layout
		* @param layout Object/String The new value.
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets a menu for a given side of the Viewport
		* @param menu Ext.Menu The menu to assign to the viewport
		* @param config Object The configuration for the menu.
		*/
		setMenu?( menu?:Ext.IMenu, config?:any ): void;
		/** [Method] Sets the value of preventPanning
		* @param preventPanning Boolean The new value.
		*/
		setPreventPanning?( preventPanning?:boolean ): void;
		/** [Method] Sets the value of preventZooming
		* @param preventZooming Boolean The new value.
		*/
		setPreventZooming?( preventZooming?:boolean ): void;
		/** [Method] Sets the value of useBodyElement
		* @param useBodyElement Boolean The new value.
		*/
		setUseBodyElement?( useBodyElement?:boolean ): void;
		/** [Method] Shows a menu specified by the menu s side
		* @param side String The side which the menu is placed.
		*/
		showMenu?( side?:string ): void;
		/** [Method] Toggles the menu specified by side
		* @param side String The side which the menu is placed.
		*/
		toggleMenu?( side?:string ): void;
	}
}
declare namespace Ext.viewport {
	export interface IIos extends Ext.viewport.IDefault {
	}
}
declare namespace Ext {
	export interface IViewport extends Ext.viewport.IDefault {
	}
	export class Viewport {
		/** [Property] (Boolean) */
		static isReady: boolean;
		/** [Property] (Ext.util.MixedCollection) */
		static items: Ext.util.IMixedCollection;
		/** [Property] (Ext.Class) */
		static self: Ext.IClass;
		/** [Method] Adds one or more Components to this Container
		* @param newItems Object/Object[]/Ext.Component/Ext.Component[] The new items to add to the Container.
		* @returns Ext.Component The last item added to the Container from the newItems array.
		*/
		static add( newItems?:any ): Ext.IComponent;
		/** [Method] Appends an after event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an array of Components to this Container
		* @param items Array The array of items to add to this container.
		* @returns Array The array of items after they have been added.
		*/
		static addAll( items?:any[] ): any[];
		/** [Method] Appends a before event handler
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds a CSS class or classes to this Component s rendered element
		* @param cls String The CSS class to add.
		* @param prefix String Optional prefix to add to each class.
		* @param suffix String Optional suffix to add to each class.
		*/
		static addCls( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire
		* @param eventNames Object/String... Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters.
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Animates to the supplied activeItem with a specified animation
		* @param activeItem Object/Number The item or item index to make active.
		* @param animation Object/Ext.fx.layout.Card Card animation configuration or instance.
		*/
		static animateActiveItem( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask
		* @returns Object
		*/
		static applyMasked( masked?:any ): any;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
		* @returns Object Returns the result of calling the overridden method
		*/
		static callOverridden( args?:any ): any;
		/** [Method] Call the parent method of the current method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
		* @returns Object Returns the result of calling the parent method
		*/
		static callParent( args?:any ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
		* @returns Object Returns the result of calling the superclass method
		*/
		static callSuper( args?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		static child( selector?:string ): Ext.IComponent;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Disables this Component */
		static disable(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector
		* @param selector String An Ext.ComponentQuery selector.
		* @returns Ext.Component
		*/
		static down( selector?:string ): Ext.IComponent;
		/** [Method] Enables this Component */
		static enable(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
		* @param events String/String[] The event name to bubble, or an Array of event names.
		*/
		static enableBubble( events?:any ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste
		* @param eventName String The name of the event to fire.
		* @param args Array Arguments to pass to handers.
		* @param fn Function Action.
		* @param scope Object Scope of fn.
		* @returns Object
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
		* @param eventName String The name of the event to fire.
		* @param args Object... Variable number of parameters are passed to handlers.
		* @returns Boolean Returns false if any of the handlers return false.
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;
		/** [Method] Returns the value of activeItem
		* @returns Object/String/Number
		*/
		static getActiveItem(): any;
		/** [Method] Prepares information on aligning this to component using alignment
		* @param component Object
		* @param alignment Object
		*/
		static getAlignmentInfo( component?:any, alignment?:any ): void;
		/** [Method] Returns the Component for a given index in the Container s items
		* @param index Number The index of the Component to return.
		* @returns Ext.Component The item at the specified index, if found.
		*/
		static getAt( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy
		* @returns Boolean
		*/
		static getAutoDestroy(): boolean;
		/** [Method] Returns the value of autoMaximize
		* @returns Boolean
		*/
		static getAutoMaximize(): boolean;
		/** [Method] Returns the value of baseCls
		* @returns String
		*/
		static getBaseCls(): string;
		/** [Method] Returns the value of border
		* @returns Number/String
		*/
		static getBorder(): any;
		/** [Method] Returns the value of bottom
		* @returns Number/String
		*/
		static getBottom(): any;
		/** [Method] Returns the value of bubbleEvents
		* @returns String/String[]
		*/
		static getBubbleEvents(): any;
		/** [Method] Returns the value of centered
		* @returns Boolean
		*/
		static getCentered(): boolean;
		/** [Method] Returns the value of cls
		* @returns String/String[]
		*/
		static getCls(): any;
		/** [Method] Examines this container s items property and gets a direct child component of this container
		* @param component String/Number This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get.
		* @returns Ext.Component The component (if found).
		*/
		static getComponent( component?:any ): Ext.IComponent;
		/** [Method] Returns the value of contentEl
		* @returns Ext.Element/HTMLElement/String
		*/
		static getContentEl(): any;
		/** [Method] Returns the value of control
		* @returns Object
		*/
		static getControl(): any;
		/** [Method] Returns the value of data
		* @returns Object
		*/
		static getData(): any;
		/** [Method] Returns the value of defaultType
		* @returns String
		*/
		static getDefaultType(): string;
		/** [Method] Returns the value of defaults
		* @returns Object
		*/
		static getDefaults(): any;
		/** [Method] Returns the value of disabled
		* @returns Boolean
		*/
		static getDisabled(): boolean;
		/** [Method] Returns the value of disabledCls
		* @returns String
		*/
		static getDisabledCls(): string;
		/** [Method] Returns the value of docked
		* @returns String
		*/
		static getDocked(): string;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems
		* @param component String/Number The id or index of the component to find.
		* @returns Ext.Component/Boolean The docked component, if found.
		*/
		static getDockedComponent( component?:any ): any;
		/** [Method] Returns all the Ext Component docked items in this container
		* @returns Array The docked items of this container.
		*/
		static getDockedItems(): any[];
		/** [Method] Retrieves the top level element representing this component
		* @returns Ext.dom.Element
		*/
		static getEl(): Ext.dom.IElement;
		/** [Method] Returns the value of enterAnimation
		* @returns String/Mixed
		*/
		static getEnterAnimation(): any;
		/** [Method] Returns the value of exitAnimation
		* @returns String/Mixed
		*/
		static getExitAnimation(): any;
		/** [Method] Returns the value of flex
		* @returns Number
		*/
		static getFlex(): number;
		/** [Method] Returns the value of floatingCls
		* @returns String
		*/
		static getFloatingCls(): string;
		/** [Method] Returns the value of hidden
		* @returns Boolean
		*/
		static getHidden(): boolean;
		/** [Method] Returns the value of hiddenCls
		* @returns String
		*/
		static getHiddenCls(): string;
		/** [Method] Returns the value of hideAnimation
		* @returns String/Mixed
		*/
		static getHideAnimation(): any;
		/** [Method] Returns the value of hideOnMaskTap
		* @returns Boolean
		*/
		static getHideOnMaskTap(): boolean;
		/** [Method] Returns the value of html
		* @returns String/Ext.Element/HTMLElement
		*/
		static getHtml(): any;
		/** [Method] Retrieves the id of this component
		* @returns String id
		*/
		static getId(): string;
		/** [Method] Returns the initial configuration passed to constructor
		* @param name String When supplied, value for particular configuration option is returned, otherwise the full config object is returned.
		* @returns Object/Mixed
		*/
		static getInitialConfig( name?:string ): any;
		/** [Method] Returns all inner items of this container
		* @returns Array The inner items of this container.
		*/
		static getInnerItems(): any[];
		/** [Method] Returns the value of itemId
		* @returns String
		*/
		static getItemId(): string;
		/** [Method] Returns the value of items
		* @returns Array/Object
		*/
		static getItems(): any;
		/** [Method] Returns the value of layout
		* @returns Object/String
		*/
		static getLayout(): any;
		/** [Method] Returns the value of left
		* @returns Number/String
		*/
		static getLeft(): any;
		/** [Method] Returns the value of listeners
		* @returns Object
		*/
		static getListeners(): any;
		/** [Method] Returns the value of margin
		* @returns Number/String
		*/
		static getMargin(): any;
		/** [Method] Returns the value of masked
		* @returns Boolean/Object/Ext.Mask/Ext.LoadMask
		*/
		static getMasked(): any;
		/** [Method] Returns the value of maxHeight
		* @returns Number/String
		*/
		static getMaxHeight(): any;
		/** [Method] Returns the value of maxWidth
		* @returns Number/String
		*/
		static getMaxWidth(): any;
		/** [Method] Returns the value of minHeight
		* @returns Number/String
		*/
		static getMinHeight(): any;
		/** [Method] Returns the value of minWidth
		* @returns Number/String
		*/
		static getMinWidth(): any;
		/** [Method] Returns the value of modal
		* @returns Boolean
		*/
		static getModal(): boolean;
		/** [Method] Returns the current orientation
		* @returns String portrait or landscape
		*/
		static getOrientation(): string;
		/** [Method] Returns the value of padding
		* @returns Number/String
		*/
		static getPadding(): any;
		/** [Method] Returns the parent of this component if it has one
		* @returns Ext.Component The parent of this component.
		*/
		static getParent(): Ext.IComponent;
		/** [Method] Returns the value of plugins
		* @returns Object/Array
		*/
		static getPlugins(): any;
		/** [Method] Returns the value of preventPanning
		* @returns Boolean
		*/
		static getPreventPanning(): boolean;
		/** [Method] Returns the value of preventZooming
		* @returns Boolean
		*/
		static getPreventZooming(): boolean;
		/** [Method] Returns the value of record
		* @returns Ext.data.Model
		*/
		static getRecord(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo
		* @returns Ext.Element
		*/
		static getRenderTo(): Ext.IElement;
		/** [Method] Returns the value of right
		* @returns Number/String
		*/
		static getRight(): any;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class
		* @returns Ext.scroll.View The scroll view.
		*/
		static getScrollable(): Ext.scroll.IView;
		/** [Method] Returns the value of showAnimation
		* @returns String/Mixed
		*/
		static getShowAnimation(): any;
		/** [Method] Returns the height and width of the Component
		* @returns Object The current height and width of the Component.
		*/
		static getSize(): any;
		/** [Method] Returns the value of style
		* @returns String/Object
		*/
		static getStyle(): any;
		/** [Method] Returns the value of styleHtmlCls
		* @returns String
		*/
		static getStyleHtmlCls(): string;
		/** [Method] Returns the value of styleHtmlContent
		* @returns Boolean
		*/
		static getStyleHtmlContent(): boolean;
		/** [Method] Returns the value of top
		* @returns Number/String
		*/
		static getTop(): any;
		/** [Method] Returns the value of tpl
		* @returns String/String[]/Ext.Template/Ext.XTemplate[]
		*/
		static getTpl(): any;
		/** [Method] Returns the value of tplWriteMode
		* @returns String
		*/
		static getTplWriteMode(): string;
		/** [Method] Returns the value of ui
		* @returns String
		*/
		static getUi(): string;
		/** [Method] Returns the value of useBodyElement
		* @returns Boolean
		*/
		static getUseBodyElement(): boolean;
		/** [Method] Retrieves the document height
		* @returns Number height in pixels.
		*/
		static getWindowHeight(): number;
		/** [Method] Retrieves the document width
		* @returns Number width in pixels.
		*/
		static getWindowWidth(): number;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string
		* @returns String The xtype hierarchy string.
		*/
		static getXTypes(): string;
		/** [Method] Returns the value of zIndex
		* @returns Number
		*/
		static getZIndex(): number;
		/** [Method] Checks to see if this object has any listeners for a specified event
		* @param eventName String The name of the event to check for
		* @returns Boolean True if the event is being listened for, else false
		*/
		static hasListener( eventName?:string ): boolean;
		/** [Method] Returns true if this component has a parent
		* @returns Boolean true if this component has a parent.
		*/
		static hasParent(): boolean;
		/** [Method] Hides this Component optionally using an animation
		* @returns Ext.Component
		*/
		static hide(): Ext.IComponent;
		/** [Method] Hides all visible menus
		* @param animation Object
		*/
		static hideAllMenus( animation?:any ): void;
		/** [Method] Hides a menu specified by the menu s side
		* @param side String The side which the menu is placed.
		*/
		static hideMenu( side?:string ): void;
		/** [Method] Hides all menus except for the side specified
		* @param side String Side(s) not to hide
		* @param animation String Animation to hide with
		*/
		static hideOtherMenus( side?:string, animation?:string ): void;
		/** [Method] Initialize configuration for this class
		* @param instanceConfig Object
		* @returns Object mixins The mixin prototypes as key - value pairs
		*/
		static initConfig( instanceConfig?:any ): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		static initialize(): void;
		/** [Method] Adds a child Component at the given index
		* @param index Number The index to insert the Component at.
		* @param item Object The Component to insert.
		*/
		static insert( index?:number, item?:any ): void;
		/** [Method] Returns true if this Component is currently disabled
		* @returns Boolean true if currently disabled.
		*/
		static isDisabled(): boolean;
		/** [Method] Returns true if this Component is currently hidden
		* @returns Boolean true if currently hidden.
		*/
		static isHidden(): boolean;
		/** [Method] Tests whether or not this Component is of a specific xtype
		* @param xtype String The xtype to check for this Component.
		* @param shallow Boolean false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype.
		* @returns Boolean true if this component descends from the specified xtype, false otherwise.
		*/
		static isXType( xtype?:string, shallow?:boolean ): boolean;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask
		* @param mask Object
		*/
		static mask( mask?:any ): void;
		/** [Method] Alias for addManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		* @param options Object If the eventName parameter was an event name, this is the addListener options.
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener
		* @param eventName String/String[]/Object The name of the event to listen for. May also be an object who's property names are event names.
		* @param fn Function/String The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below.
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
		* @param options Object An object containing handler configuration.  This object may contain any of the following properties:
		* @param order String The order of when the listener should be added into the listener queue. Possible values are before, current and after.
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener
		* @param eventName String/String[]/Object The name of the event to listen for.
		* @param fn Function/String The method the event invokes.
		* @param scope Object The scope for fn.
		* @param options Object An object containing handler configuration.
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Retrieves all descendant components which match the passed selector
		* @param selector String Selector complying to an Ext.ComponentQuery selector.
		* @returns Array Ext.Component's which matched the selector.
		*/
		static query( selector?:string ): any[];
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this
		* @param object Object The Observable whose events this object is to relay.
		* @param events String/Array/Object Array of event names to relay.
		* @returns Ext.mixin.Observable this
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes an item from this Container optionally destroying it
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		static remove( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items currently in the Container optionally destroying them all
		* @param destroy Boolean If true, destroys each removed Component.
		* @param everything Boolean If true, completely remove all items including docked / centered and floating items.
		* @returns Ext.Component this
		*/
		static removeAll( destroy?:boolean, everything?:boolean ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		static removeAt( index?:number ): Ext.IContainer;
		/** [Method] Removes a before event handler
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Component s rendered element
		* @param cls String The class(es) to remove.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		static removeCls( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Removes a docked item from this Container
		* @param item Object The item to remove.
		* @param destroy Boolean Calls the Component's destroy method if true.
		* @returns Ext.Component this
		*/
		static removeDocked( item?:any, destroy?:boolean ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in
		* @param index Number The index of the Component to remove.
		* @returns Ext.Container this
		*/
		static removeInnerAt( index?:number ): Ext.IContainer;
		/** [Method] Removes an event handler
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed
		* @param object Ext.mixin.Observable/HTMLElement The item to which to add a listener/listeners.
		* @param eventName Object/String The event name, or an object containing event name properties.
		* @param fn Function If the eventName parameter was an event name, this is the handler function.
		* @param scope Object If the eventName parameter was an event name, this is the scope in which the handler function is executed.
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Removes a menu from a specified side
		* @param side String The side to remove the menu from
		*/
		static removeMenu( side?:string ): void;
		/** [Method] Replaces specified classes with the newly specified classes
		* @param oldCls String The class(es) to remove.
		* @param newCls String The class(es) to add.
		* @param prefix String Optional prefix to prepend before each class.
		* @param suffix String Optional suffix to append to each class.
		*/
		static replaceCls( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		static resetFloating(): void;
		/** [Method] Resumes firing events see suspendEvents
		* @param discardQueuedEvents Boolean Pass as true to discard any queued events.
		*/
		static resumeEvents( discardQueuedEvents?:boolean ): void;
		/** [Method] Sets the value of activeItem
		* @param activeItem Object/String/Number The new value.
		*/
		static setActiveItem( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy
		* @param autoDestroy Boolean The new value.
		*/
		static setAutoDestroy( autoDestroy?:boolean ): void;
		/** [Method] Sets the value of autoMaximize
		* @param autoMaximize Boolean The new value.
		*/
		static setAutoMaximize( autoMaximize?:boolean ): void;
		/** [Method] Sets the value of baseCls
		* @param baseCls String The new value.
		*/
		static setBaseCls( baseCls?:string ): void;
		/** [Method] Sets the value of border
		* @param border Number/String The new value.
		*/
		static setBorder( border?:any ): void;
		/** [Method] Sets the value of bottom
		* @param bottom Number/String The new value.
		*/
		static setBottom( bottom?:any ): void;
		/** [Method] Sets the value of bubbleEvents
		* @param bubbleEvents String/String[] The new value.
		*/
		static setBubbleEvents( bubbleEvents?:any ): void;
		/** [Method] Sets the value of centered
		* @param centered Boolean The new value.
		*/
		static setCentered( centered?:boolean ): void;
		/** [Method] Sets the value of cls
		* @param cls String/String[] The new value.
		*/
		static setCls( cls?:any ): void;
		/** [Method] Sets the value of contentEl
		* @param contentEl Ext.Element/HTMLElement/String The new value.
		*/
		static setContentEl( contentEl?:any ): void;
		/** [Method] Sets the value of control
		* @param control Object The new value.
		*/
		static setControl( control?:any ): void;
		/** [Method] Sets the value of data
		* @param data Object The new value.
		*/
		static setData( data?:any ): void;
		/** [Method] Sets the value of defaultType
		* @param defaultType String The new value.
		*/
		static setDefaultType( defaultType?:string ): void;
		/** [Method] Sets the value of defaults
		* @param defaults Object The new value.
		*/
		static setDefaults( defaults?:any ): void;
		/** [Method] Sets the value of disabled
		* @param disabled Boolean The new value.
		*/
		static setDisabled( disabled?:boolean ): void;
		/** [Method] Sets the value of disabledCls
		* @param disabledCls String The new value.
		*/
		static setDisabledCls( disabledCls?:string ): void;
		/** [Method] Sets the value of docked
		* @param docked String The new value.
		*/
		static setDocked( docked?:string ): void;
		/** [Method] Sets the value of draggable
		* @param draggable Object The new value.
		*/
		static setDraggable( draggable?:any ): void;
		/** [Method] Sets the value of enterAnimation
		* @param enterAnimation String/Mixed The new value.
		*/
		static setEnterAnimation( enterAnimation?:any ): void;
		/** [Method] Sets the value of exitAnimation
		* @param exitAnimation String/Mixed The new value.
		*/
		static setExitAnimation( exitAnimation?:any ): void;
		/** [Method] Sets the value of flex
		* @param flex Number The new value.
		*/
		static setFlex( flex?:number ): void;
		/** [Method] Used to update the floating state of this component
		* @param floating Boolean true if you want to float this component.
		*/
		static setFloating( floating?:boolean ): void;
		/** [Method] Sets the value of floatingCls
		* @param floatingCls String The new value.
		*/
		static setFloatingCls( floatingCls?:string ): void;
		/** [Method] Sets the value of hidden
		* @param hidden Boolean The new value.
		*/
		static setHidden( hidden?:boolean ): void;
		/** [Method] Sets the value of hiddenCls
		* @param hiddenCls String The new value.
		*/
		static setHiddenCls( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation
		* @param hideAnimation String/Mixed The new value.
		*/
		static setHideAnimation( hideAnimation?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap
		* @param hideOnMaskTap Boolean The new value.
		*/
		static setHideOnMaskTap( hideOnMaskTap?:boolean ): void;
		/** [Method] Sets the value of html
		* @param html String/Ext.Element/HTMLElement The new value.
		*/
		static setHtml( html?:any ): void;
		/** [Method] Sets the value of itemId
		* @param itemId String The new value.
		*/
		static setItemId( itemId?:string ): void;
		/** [Method] Sets the value of items
		* @param items Array/Object The new value.
		*/
		static setItems( items?:any ): void;
		/** [Method] Sets the value of layout
		* @param layout Object/String The new value.
		*/
		static setLayout( layout?:any ): void;
		/** [Method] Sets the value of left
		* @param left Number/String The new value.
		*/
		static setLeft( left?:any ): void;
		/** [Method] Sets the value of listeners
		* @param listeners Object The new value.
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Sets the value of margin
		* @param margin Number/String The new value.
		*/
		static setMargin( margin?:any ): void;
		/** [Method] Sets the value of masked
		* @param masked Boolean/Object/Ext.Mask/Ext.LoadMask The new value.
		*/
		static setMasked( masked?:any ): void;
		/** [Method] Sets the value of maxHeight
		* @param maxHeight Number/String The new value.
		*/
		static setMaxHeight( maxHeight?:any ): void;
		/** [Method] Sets the value of maxWidth
		* @param maxWidth Number/String The new value.
		*/
		static setMaxWidth( maxWidth?:any ): void;
		/** [Method] Sets a menu for a given side of the Viewport
		* @param menu Ext.Menu The menu to assign to the viewport
		* @param config Object The configuration for the menu.
		*/
		static setMenu( menu?:Ext.IMenu, config?:any ): void;
		/** [Method] Sets the value of minHeight
		* @param minHeight Number/String The new value.
		*/
		static setMinHeight( minHeight?:any ): void;
		/** [Method] Sets the value of minWidth
		* @param minWidth Number/String The new value.
		*/
		static setMinWidth( minWidth?:any ): void;
		/** [Method] Sets the value of modal
		* @param modal Boolean The new value.
		*/
		static setModal( modal?:boolean ): void;
		/** [Method] Sets the value of padding
		* @param padding Number/String The new value.
		*/
		static setPadding( padding?:any ): void;
		/** [Method] Sets the value of plugins
		* @param plugins Object/Array The new value.
		*/
		static setPlugins( plugins?:any ): void;
		/** [Method] Sets the value of preventPanning
		* @param preventPanning Boolean The new value.
		*/
		static setPreventPanning( preventPanning?:boolean ): void;
		/** [Method] Sets the value of preventZooming
		* @param preventZooming Boolean The new value.
		*/
		static setPreventZooming( preventZooming?:boolean ): void;
		/** [Method] Sets the value of record
		* @param record Ext.data.Model The new value.
		*/
		static setRecord( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo
		* @param renderTo Ext.Element The new value.
		*/
		static setRenderTo( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right
		* @param right Number/String The new value.
		*/
		static setRight( right?:any ): void;
		/** [Method] Sets the value of scrollable
		* @param scrollable Boolean/String/Object The new value.
		* @returns Ext.scroll.View The scroll view.
		*/
		static setScrollable( scrollable?:any ): Ext.scroll.IView;
		/** [Method] Sets the value of showAnimation
		* @param showAnimation String/Mixed The new value.
		*/
		static setShowAnimation( showAnimation?:any ): void;
		/** [Method] Sets the size of the Component
		* @param width Number The new width for the Component.
		* @param height Number The new height for the Component.
		*/
		static setSize( width?:number, height?:number ): void;
		/** [Method] Sets the value of style
		* @param style String/Object The new value.
		*/
		static setStyle( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls
		* @param styleHtmlCls String The new value.
		*/
		static setStyleHtmlCls( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent
		* @param styleHtmlContent Boolean The new value.
		*/
		static setStyleHtmlContent( styleHtmlContent?:boolean ): void;
		/** [Method] Sets the value of top
		* @param top Number/String The new value.
		*/
		static setTop( top?:any ): void;
		/** [Method] Sets the value of tpl
		* @param tpl String/String[]/Ext.Template/Ext.XTemplate[] The new value.
		*/
		static setTpl( tpl?:any ): void;
		/** [Method] Sets the value of tplWriteMode
		* @param tplWriteMode String The new value.
		*/
		static setTplWriteMode( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui
		* @param ui String The new value.
		*/
		static setUi( ui?:string ): void;
		/** [Method] Sets the value of useBodyElement
		* @param useBodyElement Boolean The new value.
		*/
		static setUseBodyElement( useBodyElement?:boolean ): void;
		/** [Method] Sets the value of zIndex
		* @param zIndex Number The new value.
		*/
		static setZIndex( zIndex?:number ): void;
		/** [Method] Shows this component optionally using an animation
		* @returns Ext.Component
		*/
		static show(): Ext.IComponent;
		/** [Method] Shows this component by another component
		* @param component Ext.Component The target component to show this component by.
		* @param alignment String The specific alignment.
		*/
		static showBy( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Shows a menu specified by the menu s side
		* @param side String The side which the menu is placed.
		*/
		static showMenu( side?:string ): void;
		/** [Method] Get the reference to the class from which this object was instantiated
		* @returns Ext.Class
		*/
		static statics(): Ext.IClass;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Toggles the menu specified by side
		* @param side String The side which the menu is placed.
		*/
		static toggleMenu( side?:string ): void;
		/** [Method] Alias for removeListener
		* @param eventName String/String[]/Object The type of event the handler was associated with.
		* @param fn Function/String The handler to remove. This must be a reference to the function passed into the addListener call.
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed.
		* @param options Object Extra options object. See addListener for details.
		* @param order String The order of the listener to remove. Possible values are before, current and after.
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener
		* @param eventName String/String[]/Object The name of the event the handler was associated with.
		* @param fn Function/String The handler to remove.
		* @param scope Object The scope originally specified for fn.
		* @param options Object Extra options object.
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		static unmask(): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector
		* @param selector String The simple selector to test.
		* @returns Ext.Container The matching ancestor Container (or undefined if no match was found).
		*/
		static up( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		static update(): void;
		/** [Method] Updates the styleHtmlCls configuration
		* @param newHtmlCls Object
		* @param oldHtmlCls Object
		*/
		static updateStyleHtmlCls( newHtmlCls?:any, oldHtmlCls?:any ): void;
	}
}
declare namespace Ext.viewport {
	export interface IViewport extends Ext.IBase {
	}
}
declare namespace Ext.viewport {
	export interface IWindowsPhone extends Ext.viewport.IDefault {
		/** [Method] Returns the value of translatable
		* @returns Object
		*/
		getTranslatable?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of translatable
		* @param translatable Object The new value.
		*/
		setTranslatable?( translatable?:any ): void;
	}
}
declare namespace Ext.viewport {
	export interface IWP extends Ext.viewport.IDefault {
		/** [Method] Returns the value of translatable
		* @returns Object
		*/
		getTranslatable?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of translatable
		* @param translatable Object The new value.
		*/
		setTranslatable?( translatable?:any ): void;
	}
}
declare namespace Ext {
	export interface IXTemplate extends Ext.ITemplate {
		/** [Method] Appends the result of this template to the provided output array
		* @param values Object/Array The template values. See apply.
		* @param out Array The array to which output is pushed.
		* @param parent Object
		* @returns Array The given out array.
		*/
		applyOut?( values?:any, out?:any[], parent?:any ): any[];
	}
	export class XTemplate {
		/** [Method] Add methods  properties to the prototype of this class
		* @param members Object
		*/
		static addMembers( members?:any ): void;
		/** [Method] Add  override static properties of this class
		* @param members Object
		* @returns Ext.Base this
		*/
		static addStatics( members?:any ): Ext.IBase;
		/** [Method]
		* @param args Object
		*/
		static callParent( args?:any ): void;
		/** [Method] Create a new instance of this Class
		* @returns Object the created instance.
		*/
		static create(): any;
		/** [Method] Create aliases for existing prototype methods
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
		* @param origin String/Object The original method name
		*/
		static createAlias( alias?:any, origin?:any ): void;
		/** [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML
		* @param el String/HTMLElement A DOM element or its id.
		* @param config Object Config object.
		* @returns Ext.Template The created template.
		*/
		static from( el?:any, config?:any ): Ext.ITemplate;
		/** [Method] Get the current class name in string format
		* @returns String className
		*/
		static getName(): string;
		/** [Method] Gets an XTemplate from an object an instance of an Ext define d class
		* @param instance Object The object from which to get the XTemplate (must be an instance of an Ext.define'd class).
		* @param name String The name of the property by which to get the XTemplate.
		* @returns Ext.XTemplate The XTemplate instance or null if not found.
		*/
		static getTpl( instance?:any, name?:string ): Ext.IXTemplate;
		/** [Method] Override members of this class
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
		* @returns Ext.Base this class
		*/
		static override( members?:any ): Ext.IBase;
	}
}
declare namespace Ext {
	export interface IXTemplateCompiler extends Ext.IXTemplateParser {
		/** [Method] This method is called to process lt tpl case action gt
		* @param action Object
		*/
		doCase?( action?:any ): void;
		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;
		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;
		/** [Method] This method is called to process lt tpl elseif action gt
		* @param action Object
		* @param actions Object
		*/
		doElseIf?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl gt
		* @param type Object
		* @param actions Object
		*/
		doEnd?( type?:any, actions?:any ): void;
		/** [Method] This method is called to process text
		* @param text Object
		*/
		doEval?( text?:any ): void;
		/** [Method] This method is called to process lt tpl exec action gt
		* @param action Object
		* @param actions Object
		*/
		doExec?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process expressions like  expr
		* @param expr Object
		*/
		doExpr?( expr?:any ): void;
		/** [Method] This method is called to process lt tpl for action gt
		* @param action Object
		* @param actions Object
		*/
		doFor?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl if action gt
		* @param action Object
		* @param actions Object
		*/
		doIf?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl switch action gt
		* @param action Object
		*/
		doSwitch?( action?:any ): void;
		/** [Method] This method is called to process simple tags like tag
		* @param tag Object
		*/
		doTag?( tag?:any ): void;
		/** [Method] This method is called to process a piece of raw text from the tpl
		* @param text Object
		*/
		doText?( text?:any ): void;
	}
}
declare namespace Ext {
	export interface IXTemplateParser extends Ext.IBase {
		/** [Property] (Number) */
		level?: number;
		/** [Method] This method is called to process lt tpl case action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name (such as 'exec').
		*/
		doCase?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;
		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;
		/** [Method] This method is called to process lt tpl elseif action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name (such as 'exec').
		*/
		doElseIf?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl gt
		* @param type String The type of action that is being ended.
		* @param actions Object The other actions keyed by the attribute name (such as 'exec').
		*/
		doEnd?( type?:string, actions?:any ): void;
		/** [Method] This method is called to process text
		* @param text String
		*/
		doEval?( text?:string ): void;
		/** [Method] This method is called to process lt tpl exec action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name.
		*/
		doExec?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process expressions like  expr
		* @param expr String The body of the expression (inside "{[" and "]}").
		*/
		doExpr?( expr?:string ): void;
		/** [Method] This method is called to process lt tpl for action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name (such as 'exec').
		*/
		doFor?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl if action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name (such as 'exec').
		*/
		doIf?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl switch action gt
		* @param action String
		* @param actions Object Other actions keyed by the attribute name (such as 'exec').
		*/
		doSwitch?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process simple tags like tag
		* @param tag String
		*/
		doTag?( tag?:string ): void;
		/** [Method] This method is called to process a piece of raw text from the tpl
		* @param text String
		*/
		doText?( text?:string ): void;
		/** [Method] This method is called to process an empty lt tpl gt */
		doTpl?(): void;
	}
}
