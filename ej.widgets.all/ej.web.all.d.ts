// Type definitions for ej.web.all v14.1.0.41
// Project: http://help.syncfusion.com/js/typescript
// Definitions by: Syncfusion <https://github.com/syncfusion/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/*!
*  filename: ej.web.all.d.ts
*  version : 14.1.0.41
*  Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
declare module ej {
	
	var dataUtil: dataUtil;
    function isMobile(): boolean;
    function isIOS(): boolean;
    function isAndroid(): boolean;
    function isFlat(): boolean;
    function isWindows(): boolean;
    function isCssCalc(): boolean;
    function getCurrentPage(): JQuery;
    function isLowerResolution(): boolean;
    function browserInfo(): browserInfoOptions;
    function isTouchDevice(): boolean;
    function addPrefix(style: string): string;
    function animationEndEvent(): string;
    function blockDefaultActions(e: Object): void;
    function buildTag(tag: string, innerHtml: string, styles: Object, attrs: Object): JQuery;
    function cancelEvent(): string;
    function copyObject(): string;
    function createObject(nameSpace: string, value: Object, initIn: string): JQuery;
    function defineClass(className: string, constructor:any, proto: Object, replace: boolean): Object;
    function destroyWidgets(element: Object): void;
    function endEvent(): string;
    function event(type: string, data: any, eventProp: Object): Object;
    function getAndroidVersion(): Object;
    function getAttrVal(ele: Object, val: string, option: Object): Object;
    function getBooleanVal(ele: Object, val: string, option: Object): Object;
    function getClearString(): string;
    function getDimension(element: Object, method: string): Object;
    function getFontString(fontObj: Object): string;
    function getFontStyle(style: string): string;
    function getMaxZindex(): number;
    function getNameSpace(className: string): string;
    function getObject(nameSpace: string): Object;
    function getOffset(ele: string): Object;
    function getRenderMode(): string;
    function getScrollableParents(element: Object): void;
    function getTheme(): string;
    function getZindexPartial(element: Object, popupEle: string): number;
    function hasRenderMode(element: string): void;
    function hasStyle(prop: string): boolean;
    function hasTheme(element: string): string;
    function hexFromRGB(color: string): string;
    function ieClearRemover(element: string): void;
    function isAndroidWebView(): string;
    function isDevice(): boolean;
    function isIOS7(): boolean;
    function isIOSWebView(): boolean;
    function isLowerAndroid(): boolean;
    function isNullOrUndefined(value: Object): boolean;
    function isPlainObject(): JQuery;
    function isPortrait(): any;
    function isTablet(): boolean;
    function isWindowsWebView(): string;
    function listenEvents(selectors:any, eventTypes: any, handlers: any, remove?: any, pluginObj?: any, disableMouse?: boolean): void;
    function listenTouchEvent(selectors:any, eventTypes: any, handlers: any, remove?: any, pluginObj?: any, disableMouse?: boolean): void;
    function logBase(val: string, base: string): number;
    function measureText(text: string, maxwidth: number, font: string): string;
    function moveEvent(): string;
    function print(element: string): void;
    function proxy(fn: Object, context: string, arg: string): boolean;
    function round(value: string, div: string, up: string): any;
    function sendAjaxRequest(ajaxOptions: Object): void;
    function setCaretToPos(nput: string, pos1: string, pos2: string): void;
    function setRenderMode(element: string): void;
    function setTheme(): Object;
    function startEvent(): string;
    function tapEvent(): string;
    function tapHoldEvent(): string;
    function throwError(): Object;
    function transitionEndEvent(): Object;
    function userAgent(): boolean;
    function widget(pluginName: string, className: string, proto: Object): Object;
    function avg(json: Object, filedName: string): any;
    function getGuid(prefix: string): number;
    function group(jsonArray: any, field: string, agg: string, level: number, groupDs: string): Object;
    function isJson(jsonData: string): string;
    function max(jsonArray: any, fieldName: string, comparer: string): any;
    function min(jsonArray: any, fieldName: string, comparer: string): any;
    function merge(first: string, second: string): any;
    function mergeshort(jsonArray: any, fieldName: string, comparer: string): any;
    function parseJson(jsonText: string): string;
    function parseTable(table: number, headerOption: string, headerRowIndex: string): Object;
    function select(jsonArray: any, fields: string): any;
    function setTransition(): boolean;
    function sum(json: string, fieldName: string): string;
    function swap(array: any, x: string, y: string): any; 
    var cssUA: string;
    var serverTimezoneOffset: number;
    var transform: string;
    var transformOrigin: string;
    var transformStyle: string;
    var transition: string;
    var transitionDelay: string;
    var transitionDuration: string;
    var transitionProperty: string;
    var transitionTimingFunction: string;
    export module device {
        function isAndroid(): boolean;
        function isIOS(): boolean;
        function isFlat(): boolean;
        function isIOS7(): boolean;
        function isWindows(): boolean;
    }
    export module widget {
        var autoInit: boolean;
        var registeredInstances: Array<any>;
        var registeredWidgets: Array<any>;
        function register(pluginName: string, className: string, prototype: any): void;
        function destroyAll(elements: Element): void;
        function init(element: Element): void;
        function registerInstance(element: Element, pluginName: string, className: string, prototype: any):void;
    } 
	
	interface browserInfoOptions {
		name: string;
		version: string;
		culture: Object;
		isMSPointerEnabled: boolean;
	}
	class WidgetBase {
        destroy(): void;
        element: JQuery;
        setModel(options: Object, forceSet?: boolean):any;
        option(prop?: Object, value?: Object, forceSet?: boolean): any;
        persistState(): void;
        restoreState(silent: boolean): void;
    }

    class Widget extends WidgetBase {
        constructor(pluginName: string, className: string, proto: any);
        static fn: Widget;
        static extend(widget: Widget): any;
        register(pluginName: string, className: string, prototype: any): void;
        destroyAll(elements: Element): void;      
        model: any;     
    }


    interface BaseEvent {
        cancel: boolean;
        type: string;       
    }
    class DataManager {
        constructor(dataSource?: any, query?: ej.Query, adaptor?: any); 
        setDefaultQuery(query: ej.Query): void;
        executeQuery(query?: ej.Query, done?: any, fail?: any, always?: any): JQueryPromise<any>;
        executeLocal(query?: ej.Query): ej.DataManager;
        saveChanges(changes?: Changes, key?: string, tableName?: string): JQueryDeferred<any>;
        insert(data: Object, tableName: string): JQueryPromise<any>;
        remove(keyField: string, value: any, tableName: string): Object;
        update(keyField: string, value: any, tableName: string): Object;
    }    

    class Query {
        constructor();
        static fn: Query;
        static extend(prototype: Object): Query;
        key(field: string): ej.Query;
        using(dataManager: ej.DataManager): ej.Query;
        execute(dataManager: ej.DataManager, done: any, fail?: string, always?: string): any;
        executeLocal(dataManager: ej.DataManager): ej.DataManager;
        clone(): ej.Query;
        from(tableName: any): ej.Query;
        addParams(key: string, value: string): ej.Query;
        expand(tables: any): ej.Query;
        where(fieldName: string, operator: ej.FilterOperators, value: string, ignoreCase?: boolean): ej.Query;
		where(predicate:ej.Predicate):ej.Query;
        search(searchKey: any, fieldNames?:  any, operator?: string, ignoreCase?: boolean): ej.Query;
        sortBy(fieldName: string, comparer?: ej.SortOrder, isFromGroup?: boolean): ej.Query;
        sortByDesc(fieldName: string): ej.Query;
        group(fieldName: string): ej.Query;
        page(pageIndex: number, pageSize: number): ej.Query;
        take(nos: number): ej.Query;
        skip(nos: number): ej.Query;
        select(fieldNames: any): ej.Query;
        hierarchy(query: ej.Query, selectorFn: any): ej.Query;
        foreignKey(key: string): ej.Query;
        requiresCount(): ej.Query;
        range(start:number, end:number): ej.Query;
    }

    class Adaptor {
        constructor(ds: any);
        pvt: Object;
        type: ej.Adaptor;
        options: AdaptorOptions;
        extend(overrides: any): ej.Adaptor;
        processQuery(dm: ej.DataManager, query: ej.Query):any;
        processResponse(data: Object, ds: any, query: ej.Query, xhr: JQueryXHR, request?: Object, changes?: Changes): Object;
        convertToQueryString(req: any, query: ej.Query, dm: ej.DataManager): JQueryParam;
    }

    interface AdaptorOptions {
        from?: string;
        requestType?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        group?: string;
        take?: string;
        search?: string;
        count?: string;
        where?: string;
        aggregates?: string;
    }

    class UrlAdaptor extends ej.Adaptor {
        constructor();
        processQuery(dm: ej.DataManager, query: ej.Query, hierarchyFilters?: Object): {
            type: string; url: string; ejPvtData: Object; contentType?: string; data?: Object;
        }
        convertToQueryString(req: Object, query: ej.Query, dm: ej.DataManager): JQueryParam;
        processResponse(data: Object, ds: any, query: ej.Query, xhr: JQueryXHR, request?: Object, changes?: Changes): Object;
        onGroup(e: any): void;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): void;
        beforeSend(dm: ej.DataManager, request: any, settings?:any): void;
        insert(dm: ej.DataManager, data: Object, tableName: string): { url: string; data: any };
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data?: any };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data: any };
        getFiltersFrom(data: Object, query: ej.Query): ej.Predicate;
    }

    class ODataAdaptor extends ej.UrlAdaptor {
        constructor();
        options: UrlAdaptorOptions;
        onEachWhere(filter: any, requiresCast: boolean): any;
        onPredicate(pred: ej.Predicate, query: ej.Query, requiresCast: boolean): string;
        onComplexPredicate(pred: ej.Predicate, requiresCast: boolean): string;
        onWhere(filters: Array<string>): string;
        onEachSearch(e: Object): void;
        onSearch(e: Object): string;
        onEachSort(e: Object): string;
        onSortBy(e: Object): string;
        onGroup(e: Object): string;
        onSelect(e: Object): string;
        onCount(e: Object): string;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processResponse(data: Object, ds: Object, query: ej.Query, xhr:any, request: any, changes: Changes): {
            result: Object; count: number
        };
        convertToQueryString(req: Object, query: ej.Query, dm: ej.DataManager): JQueryParam;
        insert(dm: ej.DataManager, data: Object, tableName: string): { url: string; data: Object; }
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { url: string; type: string; }
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { url: string; type: string; data: Object; accept: string; }
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): { url: string; type: string; data: Object; contentType: string; }
        generateDeleteRequest(arr: Array<any>, e: any): string;
        generateInsertRequest(arr: Array<any>, e: any): string;
        generateUpdateRequest(arr: Array<any>, e: any): string;
    }
    interface UrlAdaptorOptions {
        requestType?: string;
        accept?: string;
        multipartAccept?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        take?: string;
        count?: string;
        where?: string;
        expand?: string;
        batch?: string;
        changeSet?: string;
        batchPre?: string;
        contentId?: string;
        batchContent?: string;
        changeSetContent?: string;
        batchChangeSetContentType?: string;
    }

    class ODataV4Adaptor extends ej.ODataAdaptor {
        constructor();
        options: ODataAdaptorOptions;
        onCount(e: Object): string;
        onEachSearch(e: Object): void;
        onSearch(e: Object): string; 
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processResponse(data: Object, ds: Object, query: ej.Query, xhr:any, request: any, changes: Changes): {
            result: Object; count: number
        };
        
    }
    interface ODataAdaptorOptions {
        requestType?: string;
        accept?: string;
        multipartAccept?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        take?: string;
        count?: string;
        search?: string;
        where?: string;
        expand?: string;
        batch?: string;
        changeSet?: string;
        batchPre?: string;
        contentId?: string;
        batchContent?: string;
        changeSetContent?: string;
        batchChangeSetContentType?: string;
    }

    class JsonAdaptor extends ej.Adaptor {
        constructor();
        processQuery(ds: Object, query: ej.Query): string;
        batchRequest(dm: ej.DataManager, changes: Changes, e:any): Changes;
        onWhere(ds: Object, e: any): any;
        onSearch(ds: Object, e: any): any
        onSortBy(ds: Object, e: any, query: ej.Query): Object;
        onGroup(ds: Object, e: any, query: ej.Query): Object;
        onPage(ds: Object, e: any, query: ej.Query): Object;
        onRange(ds: Object, e: any): Object;
        onTake(ds: Object, e: any): Object;
        onSkip(ds: Object, e: any): Object;
        onSelect(ds: Object, e: any): Object;
        insert(dm: ej.DataManager, data: any): Object;
        remove(dm: ej.DataManager, keyField: string, value:any, tableName: string): Object;
        update(dm: ej.DataManager, keyField: string, value:any, tableName: string): Object;
    }
    class TableModel {
        constructor(name: string, jsonArray: Array<any>, dataManager: ej.DataManager, modelComputed: any);
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        setDataManager(dataManager: DataManager): void;
        saveChanges(): void;
        rejectChanges(): void;
        insert(json: any): void;
        update(value: any): void;
        remove(key: string): void;
        isDirty(): boolean;
        getChanges(): Changes;
        toArray(): Array<any>;
        setDirty(dirty:any, model:any): void;
        get(index: number): void;
        length(): number;
        bindTo(element: any): void;
    }
    class Model {
        constructor(json: any, table: string, name: string);
        formElements: Array<string>;
        computes(value: any): void;
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        set(field: string, value: any): void;
        get(field: string): any;
        revert(suspendEvent: any): void;
        save(dm: ej.DataManager, key: string): void;
        markCommit(): void;
        markDelete(): void;
        changeState(state: boolean, args: any): void;
        properties(): any;
        bindTo(element: any): void;
        unbind(element: any): void;
    }
    interface Changes {
        changed?: Array<any>;
        added?: Array<any>;
        deleted?: Array<any>;
    }
    class Predicate {
        constructor(field: string, operator: ej.FilterOperators, value: any, ignoreCase: boolean);
        and(field: string, operator: any, value:any, ignoreCase:boolean): void;
        or(field: string, operator: any, value: any, ignoreCase: boolean): void;
        validate(record: Object): boolean;
        toJSON(): {
            isComplex: boolean;
            field: string;
            operator: string;
            value: any;
            ignoreCase: boolean;
            condition: string;
            predicates: any;
        };
    }
    interface dataUtil { 
        swap(array: Array<any>, x: number, y: number): void;
        mergeSort(jsonArray: Array<any>, fieldName: string, comparer:any): Array<any>;
        max(jsonArray: Array<any>, fieldName: string, comparer: string): Array<any>;
        min(jsonArray: Array<any>, fieldName: string, comparer: string): Array<any>;
        distinct(jsonArray: Array<any>, fieldName: string, requiresCompleteRecord:any): Array<any>;
        sum(json:any, fieldName: string): number;
        avg(json:any, fieldName: string): number;
        select(jsonArray: Array<any>, fieldName: string, fields:string): Array<any>;
        group(jsonArray: Array<any>, field: string, /* internal */ level: number): Array<any>;
        parseTable(table: string, headerOption: ej.headerOption, headerRowIndex: number): Object;
    }
    interface AjaxSettings {
        type?: string;
        cache: boolean;
        data?: any;
        dataType?: string;
        contentType?: any;
        async?: boolean;
    }
	enum FilterOperators {
		contains,
		endsWith,
		equal,
		greaterThan,
		greaterThanOrEqual,
		lessThan,
		lessThanOrEqual,
		notEqual,
		startsWith
	}

	enum MatrixDefaults {
		m11,
		m12,
		m21,
		m22,
		offsetX,
		offsetY,
		type
	}
	enum MatrixTypes {
		Identity,
		Scaling,
		Translation,
		Unknown
	}

	enum Orientation {
		Horizontal,
		Vertical
	}

	enum SliderType {
		Default,
		MinRange,
		Range
	}

	enum eventType {
		click,
		mouseDown,
		mouseLeave,
		mouseMove,
		mouseUp
	}
	enum headerOption {
		row,
		tHead
	}
		
	enum filterType{
		StartsWith,
		Contains,
		EndsWith,
		LessThan,
		GreaterThan,
		LessThanOrEqual ,
		GreaterThanOrEqual,
		Equal,
		NotEqual
	}
	enum Animation{
		Fade,
		None,
		Slide
	} 
	enum Type{
		Overlay,
		Slide
	}
class Draggable extends ej.Widget {
    static fn: Draggable;
    constructor(element: JQuery, options?: DraggableOptions);
    constructor(element: Element, options?: DraggableOptions);
    model: DraggableOptions;
}

interface DraggableOptions {
    scope?: string;
    handle?: Object;
    dragArea?: Object;
    clone?: boolean;
    distance?: number;
    helper?: any;
    cursorAt?: DragAtPositon;
    destroy? (e: DraggableEvent): void;
    drag? (e: DraggableDragEvent): void;
    dragStart? (e: DraggableDragStartEvent): void;
    dragStop? (e: DraggableDragStopEvent): void;
    
}

interface DragAtPositon {
    top?: number;
    left?: number;
}

interface DraggableEvent extends ej.BaseEvent {
    model: DraggableOptions;
}
interface DraggableDragStartEvent extends ej.BaseEvent, DraggableEvent {
    element: Object;
    target: Object;
}
interface DraggableDragStopEvent extends ej.BaseEvent, DraggableEvent {
    element: Object;
    target: Object;
}
interface DraggableDragEvent extends ej.BaseEvent, DraggableEvent {
    element: Object;
    target: Object;
}
class Droppable extends ej.Widget {
    static fn: Droppable;
    constructor(element: JQuery, options?: DroppableOptions);
    constructor(element: Element, options?: DroppableOptions);
    model: DroppableOptions;
}

interface DroppableOptions {
    scope?: string;
    accept?: Object;
    drop? (e: DroppableDropEvent): void;
    over? (e: DroppableOverEvent): void;
    out? (e: DroppableOutEvent): void;
}

interface DroppableEvent extends ej.BaseEvent {
    model: DroppableOptions;
}
interface DroppableDropEvent extends ej.BaseEvent, DraggableEvent {
    targetElement: Object;
}
interface DroppableOverEvent extends ej.BaseEvent, DraggableEvent {
    targetElement: Object;
}
interface DroppableOutEvent extends ej.BaseEvent, DraggableEvent {
    targetElement: Object;
}
class Resizable extends ej.Widget {
    static fn: Resizable;
    constructor(element: JQuery, options?: ResizableOptions);
    constructor(element: Element, options?: ResizableOptions);
    model: ResizableOptions;
}

interface ResizableOptions {
    scope?: string;
    handle?: Object;
    distance?: number;
    cursorAt?: resizeAtPositon;
    helper?: any;
    maxHeight?: (number|string);
    maxWidth?: (number|string);
    minHeight?: (number|string);
    minWidth?: (number|string);
    destroy? (e: ResizeEvent): void;
    resizeStart? (e: ResizableStartEvent): void;
    resize? (e: ResizableEvent): void;
    resizeStop? (e: ResizableStopEvent): void;
}

interface resizeAtPositon {
    top?: number;
    left?: number;
}

interface ResizeEvent extends ej.BaseEvent {
    model: ResizableOptions;
}
interface ResizableStartEvent extends ej.BaseEvent, ResizeEvent {
    targetElement: Object;
}
interface ResizableEvent extends ej.BaseEvent, ResizeEvent {
    targetElement: Object;
}
interface ResizableStopEvent extends ej.BaseEvent, ResizeEvent {
    targetElement: Object;
}

		var globalize:globalize;
		var cultures:culture;
		function addCulture(name: string, culture ?: any): void;
    	function preferredCulture(culture ?: string): culture;
    	function format(value: any, format: string, culture ?: string): string;
    	function parseInt(value: string, radix?: any, culture ?: string): number;
    	function parseFloat(value: string, radix?: any, culture ?: string): number;
    	function parseDate(value: string, format: string, culture ?: string): Date;
    	function getLocalizedConstants(controlName: string, culture ?: string): any;

interface globalize {  
        addCulture(name: string, culture?: any): void;
        preferredCulture(culture?: string): culture;
        format(value: any, format: string, culture?: string): string; 
        parseInt(value: string, radix?: any, culture?: string): number;
        parseFloat(value: string, radix?: any, culture?: string): number;
        parseDate(value: string, format: string, culture?: string): Date;
        getLocalizedConstants(controlName: string, culture?: string): any;
    }
    interface culture {
        name?: string;
        englishName?: string;
        namtiveName?: string;
        language?: string;
        isRTL: boolean;
        numberFormat?: formatSettings;
        calendars?: calendarsSettings;
    }
    interface formatSettings {
        pattern: Array<string>;
        decimals: number;
        groupSizes: Array<number>;
        percent: percentSettings;
        currency: currencySettings;
    }
    interface percentSettings {
        pattern: Array<string>;
        decimals: number;
        groupSizes: Array<number>;
        symbol: string;
    }
    interface currencySettings {
        pattern: Array<string>;
        decimals: number;
        groupSizes: Array<number>;
        symbol: string;
    }
    interface calendarsSettings {
        standard: standardSettings;
    }
    interface standardSettings {
        firstDay: number;
        days: daySettings;
        months: monthSettings;
        AM: Array<string>;
        PM: Array<string>;
        twoDigitYearMax: number;
        patterns: patternSettings;
    }
    interface daySettings {
        names: Array<string>;
        namesAbbr: Array<string>;
        namesShort: Array<string>;
    }
    interface monthSettings {
        names: Array<string>;
        namesAbbr: Array<string>;
    }
    interface patternSettings {
        d: string;
        D: string;
        t: string;
        T: string;
        f: string;
        F: string;
        M: string;
        Y: string;
        S: string;
    } 
class Scroller extends ej.Widget {
	static fn: Scroller;
	constructor(element: JQuery, options?: Scroller.Model);
	constructor(element: Element, options?: Scroller.Model);
	model:Scroller.Model;
	defaults:Scroller.Model;

	/** destroy the Scroller control, unbind the all ej control related events automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** User disables the Scroller control at any time.
	* @returns {void}
	*/
	disable(): void;

	/** User enables the Scroller control at any time.
	* @returns {void}
	*/
	enable(): void;

	/** Returns true if horizontal scrollbar is shown, else return false.
	* @returns {boolean}
	*/
	isHScroll(): boolean;

	/** Returns true if vertical scrollbar is shown, else return false.
	* @returns {boolean}
	*/
	isVScroll(): boolean;

	/** User refreshes the Scroller control at any time.
	* @returns {void}
	*/
	refresh(): void;

	/** Scroller moves to given pixel in X (left) position. We can also specify the animation speed,in which the scroller has to move while re-positioning it.
	* @returns {void}
	*/
	scrollX(): void;

	/** Scroller moves to given pixel in Y (top) position. We can also specify the animation speed,in which the scroller has to move while re-positioning it.
	* @returns {void}
	*/
	scrollY(): void;
}
export module Scroller{

export interface Model {

	/**Set true to hides the scrollbar, when mouseout the content area.
	* @Default {false}
	*/
	autoHide?: boolean;

	/**Specifies the height and width of button in the scrollbar.
	* @Default {18}
	*/
	buttonSize?: number;

	/**Specifies to enable or disable the scroller
	* @Default {true}
	*/
	enabled?: boolean;

	/**Save current model value to browser cookies for state maintenance. While refresh the page Rating control values are retained.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Indicates the Right to Left direction to scroller
	* @Default {undefined}
	*/
	enableRTL?: boolean;

	/**Enables or Disable the touch Scroll
	* @Default {true}
	*/
	enableTouchScroll?: boolean;

	/**Specifies the height of Scroll panel and scrollbars.
	* @Default {250}
	*/
	height?: number;

	/**If the scrollbar has vertical it set as width, else it will set as height of the handler.
	* @Default {18}
	*/
	scrollerSize?: number;

	/**The Scroller content and scrollbars move left with given value.
	* @Default {0}
	*/
	scrollLeft?: number;

	/**While press on the arrow key the scrollbar position added to the given pixel value.
	* @Default {57}
	*/
	scrollOneStepBy?: number;

	/**The Scroller content and scrollbars move to top position with specified value.
	* @Default {0}
	*/
	scrollTop?: number;

	/**Indicates the target area to which scroller have to appear.
	* @Default {null}
	*/
	targetPane?: string;

	/**Specifies the width of Scroll panel and scrollbars.
	* @Default {0}
	*/
	width?: number;

	/**Fires when Scroller control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when Scroller control is destroyed.*/
	destroy? (e: DestroyEventArgs): void;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the scroller model
	*/
	model?: ej.Scroller.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the scroller model
	*/
	model?: ej.Scroller.Model;

	/**returns the name of the event.
	*/
	type?: string;
}
}

class Accordion extends ej.Widget {
	static fn: Accordion;
	constructor(element: JQuery, options?: Accordion.Model);
	constructor(element: Element, options?: Accordion.Model);
	model:Accordion.Model;
	defaults:Accordion.Model;

	/** AddItem method is used to add the panel in dynamically. It receives the following parameters
	* @param {string} specify the name of the header
	* @param {string} content of the new panel
	* @param {number} insertion place of the new panel
	* @param {boolean} Enable or disable the ajax request to the added panel
	* @returns {void}
	*/
	addItem(header_name: string, content: string, index: number, isAjaxReq: boolean): void;

	/** This method used to collapse the all the expanded items in accordion at a time.
	* @returns {void}
	*/
	collapseAll(): void;

	/** destroy the Accordion widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Disables the accordion widget includes all the headers and content panels.
	* @returns {void}
	*/
	disable(): void;

	/** Disable the accordion widget item based on specified header index.
	* @param {Array<any>} index values to disable the panels
	* @returns {void}
	*/
	disableItems(index: Array<any>): void;

	/** Enable the accordion widget includes all the headers and content panels.
	* @returns {void}
	*/
	enable(): void;

	/** Enable the accordion widget item based on specified header index.
	* @param {Array<any>} index values to enable the panels
	* @returns {void}
	*/
	enableItems(index: Array<any>): void;

	/** To expand all the accordion widget items.
	* @returns {void}
	*/
	expandAll(): void;

	/** Returns the total number of panels in the control.
	* @returns {number}
	*/
	getItemsCount(): number;

	/** Hides the visible Accordion control.
	* @returns {void}
	*/
	hide(): void;

	/** The refresh method is used to adjust the control size based on the parent element dimension.
	* @returns {void}
	*/
	refresh(): void;

	/** RemoveItem method is used to remove the specified index panel.It receives the parameter as number.
	* @param {number} specify the index value for remove the accordion panel.
	* @returns {void}
	*/
	removeItem( index : number): void;

	/** Shows the hidden Accordion control.
	* @returns {void}
	*/
	show(): void;
}
export module Accordion{

export interface Model {

	/**Specifies the ajaxSettings option to load the content to the accordion control.
	* @Default {null}
	*/
	ajaxSettings?: AjaxSettings;

	/**Accordion headers can be expanded and collapsed on keyboard action.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**To set the Accordion headers Collapse Speed.
	* @Default {300}
	*/
	collapseSpeed?: number;

	/**Specifies the collapsible state of accordion control.
	* @Default {false}
	*/
	collapsible?: boolean;

	/**Sets the root CSS class for Accordion theme, which is used customize.
	*/
	cssClass?: string;

	/**Allows you to set the custom header Icon. It accepts two key values â€œheaderâ€, â€selectedHeaderâ€.
	* @Default {{ header: e-collapse, selectedHeader: e-expand }}
	*/
	customIcon?: CustomIcon;

	/**Disables the specified indexed items in accordion.
	* @Default {[]}
	*/
	disabledItems?: number[];

	/**Specifies the animation behavior in accordion.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**With this enabled property, you can enable or disable the Accordion.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Used to enable the disabled items in accordion.
	* @Default {[]}
	*/
	enabledItems?: number[];

	/**Multiple content panels to activate at a time.
	* @Default {false}
	*/
	enableMultipleOpen?: boolean;

	/**Save current model value to browser cookies for maintaining states. When refreshing the accordion control page, the model value is applied from browser cookies or HTML 5local storage.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Display headers and panel text from right-to-left.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**The events API binds the action for activating the accordion header. Users can activate the header by using mouse actions such as mouse-over, mouse-up, mouse-down, and soon.
	* @Default {click}
	*/
	events?: string;

	/**To set the Accordion headers Expand Speed.
	* @Default {300}
	*/
	expandSpeed?: number;

	/**Sets the height for Accordion items header.
	*/
	headerSize?: number|string;

	/**Specifies height of the accordion.
	* @Default {null}
	*/
	height?: number|string;

	/**Adjusts the content panel height based on the given option (content, auto, or fill). By default, the panel heights are adjusted based on the content.
	* @Default {content}
	*/
	heightAdjustMode?: ej.Accordion.HeightAdjustMode|string;

	/**It allows to define the characteristics of the Accordion control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**The given index header will activate (open). If collapsible is set to true, and a negative value is given, then all headers are collapsed. Otherwise, the first panel isactivated.
	* @Default {0}
	*/
	selectedItemIndex?: number|string;

	/**Activate the specified indexed items of the accordion
	* @Default {[0]}
	*/
	selectedItems?: number[];

	/**Used to determines the close button visibility an each accordion items. This close button helps to remove the accordion item from the control.
	* @Default {false}
	*/
	showCloseButton?: boolean;

	/**Displays rounded corner borders on the Accordion control's panels and headers.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies width of the accordion.
	* @Default {null}
	*/
	width?: number|string;

	/**Triggered after a Accordion item is active or inactive. Argument values are activeIndex, activeHeader, inActiveHeader, inActiveIndex and current model value.*/
	activate? (e: ActivateEventArgs): void;

	/**Triggered before the AJAX content is loaded in a content panel. Arguments have location of the content (URL) and current model value.*/
	ajaxBeforeLoad? (e: AjaxBeforeLoadEventArgs): void;

	/**Triggered after AJAX load failed action. Arguments have URL, error message, and current model value.*/
	ajaxError? (e: AjaxErrorEventArgs): void;

	/**Triggered after the AJAX content loads. Arguments have current model values.*/
	ajaxLoad? (e: AjaxLoadEventArgs): void;

	/**Triggered after AJAX success action. Arguments have URL, content, and current model values.*/
	ajaxSuccess? (e: AjaxSuccessEventArgs): void;

	/**Triggered before a tab item is active. Arguments have active index and model values.*/
	beforeActivate? (e: BeforeActivateEventArgs): void;

	/**Triggered after a Accordion item is active or inactive. Argument values are activeIndex, activeHeader, inActiveHeader, inActiveIndex and current model value.*/
	beforeInactivate? (e: BeforeInactivateEventArgs): void;

	/**Triggered after Accordion control creation.*/
	create? (e: CreateEventArgs): void;

	/**Triggered after Accordion control destroy.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggered after a Accordion item is active or inactive. Argument values are activeIndex, activeHeader, inActiveHeader, inActiveIndex and current model value.*/
	inActivate? (e: InActivateEventArgs): void;
}

export interface ActivateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns active index
	*/
	 activeIndex ?: number;

	/**returns current active header
	*/
	 activeHeader ?: any;

	/**returns true when the Accordion index activated by user interaction otherwise returns false
	*/
	 isInteraction ?: boolean;
}

export interface AjaxBeforeLoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns current ajax content location
	*/
	 url ?: string;
}

export interface AjaxErrorEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns current ajax content location
	*/
	 url ?: string;

	/**returns the failed data sent.
	*/
	 data ?: string;
}

export interface AjaxLoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the name of the url
	*/
	 url ?: string;
}

export interface AjaxSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns current ajax content location
	*/
	 url ?: string;

	/**returns the successful data sent.
	*/
	 data ?: string;

	/**returns the ajax content.
	*/
	 content ?: string;
}

export interface BeforeActivateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns active index
	*/
	 activeIndex ?: number;

	/**returns true when the Accordion index activated by user interaction otherwise returns false
	*/
	 isInteraction ?: boolean;
}

export interface BeforeInactivateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns active index
	*/
	 inActiveIndex ?: number;

	/**returns true when the Accordion index activated by user interaction otherwise returns false
	*/
	 isInteraction ?: boolean;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;
}

export interface InActivateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the accordion model
	*/
	 model ?: ej.Accordion.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns active index
	*/
	 inActiveIndex ?: number;

	/**returns in active element
	*/
	 inActiveHeader ?: any;

	/**returns true when the Accordion index activated by user interaction otherwise returns false
	*/
	 isInteraction ?: boolean;
}

export interface AjaxSettings {

	/**It specifies, whether to enable or disable asynchronous request.
	*/
	async?: boolean;

	/**It specifies the page will be cached in the web browser.
	*/
	cache?: boolean;

	/**It specifies the type of data is send in the query string.
	*/
	contentType?: string;

	/**It specifies the data as an object, will be passed in the query string.
	*/
	data?: any;

	/**It specifies the type of data that you're expecting back from the response.
	*/
	dataType?: string;

	/**It specifies the HTTP request type.
	*/
	type?: string;
}

export interface CustomIcon {

	/**This class name set to collapsing header.
	*/
	header?: string;

	/**This class name set to expanded (active) header.
	*/
	selectedHeader?: string;
}

enum HeightAdjustMode{

	///Height fit to the content in the panel
	Content,

	///Height set to the largest content in the panel
	Auto,

	///Height filled to the content of the panel
	Fill
}

}

class Autocomplete extends ej.Widget {
	static fn: Autocomplete;
	constructor(element: JQuery, options?: Autocomplete.Model);
	constructor(element: Element, options?: Autocomplete.Model);
	model:Autocomplete.Model;
	defaults:Autocomplete.Model;

	/** Clears the text in the Autocomplete textbox.
	* @returns {void}
	*/
	clearText(): void;

	/** Destroys the Autocomplete widget.
	* @returns {void}
	*/
	destroy(): void;

	/** Disables the autocomplete widget.
	* @returns {void}
	*/
	disable(): void;

	/** Enables the autocomplete widget.
	* @returns {void}
	*/
	enable(): void;

	/** Returns objects (data object) of all the selected items in the autocomplete textbox.
	* @returns {void}
	*/
	getSelectedItems(): void;

	/** Returns the current selected value from the Autocomplete textbox.
	* @returns {void}
	*/
	getValue(): void;

	/** Search the entered text and show it in the suggestion list if available.
	* @returns {void}
	*/
	search(): void;

	/** Open up the autocomplete suggestion popup with all list items.
	* @returns {void}
	*/
	open(): void;

	/** Sets the value of the Autocomplete textbox based on the given key value.
	* @param {string} The key value of the specific suggestion item.
	* @returns {void}
	*/
	selectValueByKey(Key: string): void;

	/** Sets the value of the Autocomplete textbox based on the given input text value.
	* @param {string} The text (label) value of the specific suggestion item.
	* @returns {void}
	*/
	selectValueByText(Text: string): void;
}
export module Autocomplete{

export interface Model {

	/**Customize &quot;Add New&quot; text (label) to be added in the autocomplete popup list for the entered text when there are no suggestions for it.
	* @Default {Add New}
	*/
	addNewText?: boolean;

	/**Allows new values to be added to the autocomplete input other than the values in the suggestion list. Normally, when there are no suggestions it will display â€œNo suggestionsâ€ label in the popup.
	* @Default {false}
	*/
	allowAddNew?: boolean;

	/**Enables or disables the sorting of suggestion list item. The default sort order is ascending order. You customize sort order.
	* @Default {true}
	*/
	allowSorting?: boolean;

	/**To focus the items in the suggestion list when the popup is shown. By default first item will be focused.
	* @Default {false}
	*/
	autoFocus?: boolean;

	/**Enables or disables the case sensitive search.
	* @Default {false}
	*/
	caseSensitiveSearch?: boolean;

	/**The root class for the Autocomplete textbox widget which helps in customizing its theme.
	* @Default {â€â€}
	*/
	cssClass?: string;

	/**The data source contains the list of data for the suggestions list. It can be a string array or json array.
	* @Default {null}
	*/
	dataSource?: any|Array<any>;

	/**The time delay (in milliseconds) after which the suggestion popup will be shown.
	* @Default {200}
	*/
	delaySuggestionTimeout?: number;

	/**The special character which acts as a separator for the given words for multi-mode search i.e. the text after the delimiter are considered as a separate word or query for search operation.
	* @Default {â€™,â€™}
	*/
	delimiterChar?: string;

	/**The text to be displayed in the popup when there are no suggestions available for the entered text.
	* @Default {â€œNo suggestionsâ€}
	*/
	emptyResultText?: string;

	/**Fills the autocomplete textbox with the first matched item from the suggestion list automatically based on the entered text when enabled.
	* @Default {false}
	*/
	enableAutoFill?: boolean;

	/**Enables or disables the Autocomplete textbox widget.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Enables or disables displaying the duplicate names present in the search result.
	* @Default {false}
	*/
	enableDistinct?: boolean;

	/**Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true. While refreshing the page, it retains the model value from browser cookies or local storage.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Displays the Autocomplete widgetâ€™s content from right to left when enabled.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Mapping fields for the suggestion items of the Autocomplete textbox widget.
	* @Default {null}
	*/
	fields?: any;

	/**Specifies the search filter type. There are several types of search filter available such as â€˜startswithâ€™, â€˜containsâ€™, â€˜endswithâ€™, â€˜lessthanâ€™, â€˜lessthanorequalâ€™, â€˜greaterthanâ€™, â€˜greaterthanorequalâ€™, â€˜equalâ€™, â€˜notequalâ€™.
	* @Default {ej.filterType.StartsWith}
	*/
	filterType?: string;

	/**The height of the Autocomplete textbox.
	* @Default {null}
	*/
	height?: string;

	/**The search text can be highlighted in the AutoComplete suggestion list when enabled.
	* @Default {false}
	*/
	highlightSearch?: boolean;

	/**Number of items to be displayed in the suggestion list.
	* @Default {0}
	*/
	itemsCount?: number;

	/**Minimum number of character to be entered in the Autocomplete textbox to show the suggestion list.
	* @Default {1}
	*/
	minCharacter?: number;

	/**Enables or disables selecting multiple values from the suggestion list. Multiple values can be selected through either of the following options,
	* @Default {ej.MultiSelectMode.None}
	*/
	multiSelectMode?: ej.Autocomplete.MultiSelectMode|string;

	/**The height of the suggestion list.
	* @Default {â€œ152pxâ€}
	*/
	popupHeight?: string;

	/**The width of the suggestion list.
	* @Default {â€œautoâ€}
	*/
	popupWidth?: string;

	/**The query to retrieve the data from the data source.
	* @Default {null}
	*/
	query?: ej.Query|string;

	/**Indicates that the autocomplete textbox values can only be readable.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Enables or disables showing the message when there are no suggestions for the entered text.
	* @Default {true}
	*/
	showEmptyResultText?: boolean;

	/**Enables or disables the loading icon to intimate the searching operation. The loading icon is visible when there is a time delay to perform the search.
	* @Default {true}
	*/
	showLoadingIcon?: boolean;

	/**Enables the showPopup button in autocomplete textbox. When the Showpopup button is clicked, it displays all the available data from the data source.
	* @Default {false}
	*/
	showPopupButton?: boolean;

	/**Enables or disables rounded corner.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Sort order specifies whether the suggestion list values has to be displayed in ascending or descending order.
	* @Default {ej.SortOrder.Ascending}
	*/
	sortOrder?: ej.Autocomplete.SortOrder|string;

	/**The template to display the suggestion list items with customized appearance.
	* @Default {null}
	*/
	template?: string;

	/**The jQuery validation error message to be displayed on form validation.
	* @Default {null}
	*/
	validationMessage?: any;

	/**The jQuery validation rules for form validation.
	* @Default {null}
	*/
	validationRules?: any;

	/**The value to be displayed in the autocomplete textbox.
	* @Default {null}
	*/
	value?: string;

	/**Enables or disables the visibility of the autocomplete textbox.
	* @Default {true}
	*/
	visible?: boolean;

	/**The text to be displayed when the value of the autocomplete textbox is empty.
	* @Default {null}
	*/
	watermarkText?: string;

	/**The width of the Autocomplete textbox.
	* @Default {null}
	*/
	width?: string;

	/**Triggers when the data requested from AJAX will get successfully loaded in the Autocomplete widget.*/
	actionSuccess? (e: ActionSuccessEventArgs): void;

	/**Triggers when the AJAX requests complete. The request may get failed or succeed.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggers when the data requested from AJAX get failed.*/
	actionFailure? (e: ActionFailureEventArgs): void;

	/**Triggers when the text box value is changed.*/
	change? (e: ChangeEventArgs): void;

	/**Triggers after the suggestion popup is closed.*/
	close? (e: CloseEventArgs): void;

	/**Triggers when Autocomplete widget is created.*/
	create? (e: CreateEventArgs): void;

	/**Triggers after the Autocomplete widget is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggers after the autocomplete textbox is focused.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Triggers after the Autocomplete textbox gets out of the focus.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Triggers after the suggestion list is opened.*/
	open? (e: OpenEventArgs): void;

	/**Triggers when an item has been selected from the suggestion list.*/
	select? (e: SelectEventArgs): void;
}

export interface ActionSuccessEventArgs {
}

export interface ActionCompleteEventArgs {
}

export interface ActionFailureEventArgs {
}

export interface ChangeEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Value of the autocomplete textbox.
	*/
	value?: string;
}

export interface CloseEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface FocusInEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Value of the autocomplete textbox.
	*/
	value?: string;
}

export interface FocusOutEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Value of the autocomplete textbox.
	*/
	value?: string;
}

export interface OpenEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface SelectEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the autocomplete model object.
	*/
	model?: ej.Autocomplete.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Value of the autocomplete textbox.
	*/
	value?: string;

	/**Text of the selected item.
	*/
	text?: string;

	/**Key of the selected item.
	*/
	key?: string;

	/**Data object of the selected item.
	*/
	Item?: ej.Autocomplete.Model;
}

enum MultiSelectMode{

	///Multiple values are separated using a given special character.
	Delimiter,

	///Each values are displayed in separate box with close button.
	VisualMode
}


enum SortOrder{

	///Items to be displayed in the suggestion list in ascending order.
	Ascending,

	///Items to be displayed in the suggestion list in descending order.
	Descending
}

}

class Button extends ej.Widget {
	static fn: Button;
	constructor(element: JQuery, options?: Button.Model);
	constructor(element: Element, options?: Button.Model);
	model:Button.Model;
	defaults:Button.Model;

	/** destroy the button widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To disable the button
	* @returns {void}
	*/
	disable(): void;

	/** To enable the button
	* @returns {void}
	*/
	enable(): void;
}
export module Button{

export interface Model {

	/**Specifies the contentType of the Button. See below to know available ContentType
	* @Default {ej.ContentType.TextOnly}
	*/
	contentType?: ej.ContentType|string;

	/**Sets the root CSS class for Button theme, which is used customize.
	*/
	cssClass?: string;

	/**Specifies the button control state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specify the Right to Left direction to button
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the height of the Button.
	* @Default {28}
	*/
	height?: number;

	/**It allows to define the characteristics of the Button control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the image position of the Button. This image position is applicable only with the textandimage contentType property. The images can be positioned in both imageLeft and imageRight options. See below to know about available ImagePosition
	* @Default {ej.ImagePosition.ImageLeft}
	*/
	imagePosition?: ej.ImagePosition|string;

	/**Specifies the primary icon for Button. This icon will be displayed from the left margin of the button.
	* @Default {null}
	*/
	prefixIcon?: string;

	/**Convert the button as repeat button. It raises the 'Click' event repeatedly from the it is pressed until it is released.
	* @Default {false}
	*/
	repeatButton?: boolean;

	/**Displays the Button with rounded corners.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies the size of the Button. See below to know available ButtonSize
	* @Default {ej.ButtonSize.Normal}
	*/
	size?: ej.ButtonSize|string;

	/**Specifies the secondary icon for Button. This icon will be displayed from the right margin of the button.
	* @Default {null}
	*/
	suffixIcon?: string;

	/**Specifies the text content for Button.
	* @Default {null}
	*/
	text?: string;

	/**Specified the time interval between two consecutive 'click' event on the button.
	* @Default {150}
	*/
	timeInterval?: string;

	/**Specifies the Type of the Button. See below to know available ButtonType
	* @Default {ej.ButtonType.Submit}
	*/
	type?: ej.ButtonType|string;

	/**Specifies the width of the Button.
	* @Default {100}
	*/
	width?: number;

	/**Fires when Button control is clicked successfully.Consider the scenario to perform any validation,modification of content or any other operations click on button,we can make use of this click event to achieve the scenario.*/
	click? (e: ClickEventArgs): void;

	/**Fires after Button control is created.If the user want to perform any operation after the button control creation then the user can make use of this create event.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the button is destroyed successfully.If the user want to perform any operation after the destroy button control then the user can make use of this destroy event.*/
	destroy? (e: DestroyEventArgs): void;
}

export interface ClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the button model
	*/
	model?: ej.Button.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return the button state
	*/
	status?: boolean;

	/**return the event model for sever side processing. 
	*/
	e?: any;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the button model
	*/
	model?: ej.Button.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the button model
	*/
	model?: ej.Button.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}
enum ContentType
{
//To display the text content only in button
TextOnly,
//To display the image only in button
ImageOnly,
//Supports to display  image for both ends of the button
ImageBoth,
//Supports to display image with the text content
TextAndImage,
//Supports to display  image with both ends of the text
ImageTextImage,
}
enum ImagePosition
{
//support for aligning text in left and image in right
ImageRight,
//support for aligning text in right and image in left
ImageLeft,
//support for aligning text in bottom and image in top.
ImageTop,
//support for aligning text in top and image in bottom
ImageBottom,
}
enum ButtonSize
{
//Creates button with inbuilt default size height, width specified
Normal,
//Creates button with inbuilt mini size height, width specified
Mini,
//Creates button with inbuilt small size height, width specified
Small,
//Creates button with inbuilt medium size height, width specified 
Medium,
//Creates button with inbuilt large size height, width specified 
Large,
}
enum ButtonType
{
//Creates button with inbuilt button type specified
Button,
//Creates button with inbuilt reset type specified 
Reset,
//Creates button with inbuilt submit type specified
Submit,
}

class Captcha extends ej.Widget {
	static fn: Captcha;
	constructor(element: JQuery, options?: Captcha.Model);
	constructor(element: Element, options?: Captcha.Model);
	model:Captcha.Model;
	defaults:Captcha.Model;
}
export module Captcha{

export interface Model {

	/**Specifies the character set of the Captcha that will be used to generate captcha text randomly.
	*/
	characterSet?: string;

	/**Specifies the error message to be displayed when the Captcha mismatch.
	*/
	customErrorMessage?: string;

	/**Set the Captcha validation automatically.
	*/
	enableAutoValidation?: boolean;

	/**Specifies the case sensitivity for the characters typed in the Captcha.
	*/
	enableCaseSensitivity?: boolean;

	/**Specifies the background patterns for the Captcha.
	*/
	enablePattern?: boolean;

	/**Sets the Captcha direction as right to left alignment.
	*/
	enableRTL?: boolean;

	/**Specifies the background apperance for the captcha.
	*/
	hatchStyle?: ej.HatchStyle|string;

	/**Specifies the height of the Captcha.
	*/
	height?: number;

	/**Specifies the method with values to be mapped in the Captcha.
	*/
	mapper?: string;

	/**Specifies the maximum number of characters used in the Captcha.
	*/
	maximumLength?: number;

	/**Specifies the minimum number of characters used in the Captcha.
	*/
	minimumLength?: number;

	/**Specifies the method to map values to Captcha.
	*/
	requestMapper?: string;

	/**Sets the Captcha with audio support, that enables to dictate the captcha text.
	*/
	showAudioButton?: boolean;

	/**Sets the Captcha with a refresh button.
	*/
	showRefreshButton?: boolean;

	/**Specifies the target button of the Captcha to validate the entered text and captcha text.
	*/
	targetButton?: string;

	/**Specifies the target input element that will verify the Captcha.
	*/
	targetInput?: string;

	/**Specifies the width of the Captcha.
	*/
	width?: number;

	/**Fires when captch refresh begins.*/
	refreshBegin? (e: RefreshBeginEventArgs): void;

	/**Fires after captch refresh completed.*/
	refreshComplete? (e: RefreshCompleteEventArgs): void;

	/**Fires when captch refresh fails to load.*/
	refreshFailure? (e: RefreshFailureEventArgs): void;

	/**Fires after captch refresh succeeded.*/
	refreshSuccess? (e: RefreshSuccessEventArgs): void;
}

export interface RefreshBeginEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Captcha model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface RefreshCompleteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Captcha model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface RefreshFailureEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Captcha model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface RefreshSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Captcha model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}
}
enum HatchStyle
{
//Set background as None to Captcha
None,
//Set background as BackwardDiagonal to Captcha
BackwardDiagonal,
//Set background as Cross to Captcha
Cross,
//Set background as DarkDownwardDiagonal to Captcha
DarkDownwardDiagonal,
//Set background as DarkHorizontal to Captcha
DarkHorizontal,
//Set background as DarkUpwardDiagonal to Captcha
DarkUpwardDiagonal,
//Set background as DarkVertical to Captcha
DarkVertical,
//Set background as DashedDownwardDiagonal to Captcha
DashedDownwardDiagonal,
//Set background as DashedHorizontal to Captcha
DashedHorizontal,
//Set background as DashedUpwardDiagonal to Captcha
DashedUpwardDiagonal,
//Set background as DashedVertical to Captcha
DashedVertical,
//Set background as DiagonalBrick to Captcha
DiagonalBrick,
//Set background as DiagonalCross to Captcha
DiagonalCross,
//Set background as Divot to Captcha
Divot,
//Set background as DottedDiamond to Captcha
DottedDiamond,
//Set background as DottedGrid to Captcha
DottedGrid,
//Set background as ForwardDiagonal to Captcha
ForwardDiagonal,
//Set background as Horizontal to Captcha
Horizontal,
//Set background as HorizontalBrick to Captcha
HorizontalBrick,
//Set background as LargeCheckerBoard to Captcha
LargeCheckerBoard,
//Set background as LargeConfetti to Captcha
LargeConfetti,
//Set background as LargeGrid to Captcha
LargeGrid,
//Set background as LightDownwardDiagonal to Captcha
LightDownwardDiagonal,
//Set background as LightHorizontal to Captcha
LightHorizontal,
//Set background as LightUpwardDiagonal to Captcha
LightUpwardDiagonal,
//Set background as LightVertical to Captcha
LightVertical,
//Set background as Max to Captcha
Max,
//Set background as Min to Captcha
Min,
//Set background as NarrowHorizontal to Captcha
NarrowHorizontal,
//Set background as NarrowVertical to Captcha
NarrowVertical,
//Set background as OutlinedDiamond to Captcha
OutlinedDiamond,
//Set background as Percent90 to Captcha
Percent90,
//Set background as Wave to Captcha
Wave,
//Set background as Weave to Captcha
Weave,
//Set background as WideDownwardDiagonal to Captcha
WideDownwardDiagonal,
//Set background as WideUpwardDiagonal to Captcha
WideUpwardDiagonal,
//Set background as ZigZag to Captcha
ZigZag,
}

class ListBox extends ej.Widget {
	static fn: ListBox;
	constructor(element: JQuery, options?: ListBox.Model);
	constructor(element: Element, options?: ListBox.Model);
	model:ListBox.Model;
	defaults:ListBox.Model;

	/** Adds a given list items in the ListBox widget at a specified index. It accepts two parameters.
	* @param {any|string} This can be a list item object (for JSON binding) or a string (for UL and LI rendering). Also we can the specify this as an array of list item object or an array of strings to add multiple items.
	* @param {number} The index value to add the given items at the specified index. If index is not specified, the given items will be added at the end of the list.
	* @returns {void}
	*/
	addItem(listItem: any|string, index: number): void;

	/** Checks all the list items in the ListBox widget. It is dependent on showCheckbox property.
	* @returns {void}
	*/
	checkAll(): void;

	/** Checks a list item by using its index. It is dependent on showCheckbox property.
	* @param {number} Index of the listbox item to be checked. If index is not specified, the given items will be added at the end of the list.
	* @returns {void}
	*/
	checkItemByIndex(index: number): void;

	/** Checks multiple list items by using its index values. It is dependent on showCheckbox property.
	* @param {number[]} Index/Indices of the listbox items to be checked. If index is not specified, the given items will be added at the end of the list.
	* @returns {void}
	*/
	checkItemsByIndices(indices: number[]): void;

	/** Disables the ListBox widget.
	* @returns {void}
	*/
	disable(): void;

	/** Disables a list item by passing the item text as parameter.
	* @param {string} Text of the listbox item to be disabled.
	* @returns {void}
	*/
	disableItem(text: string): void;

	/** Disables a list Item using its index value.
	* @param {number} Index of the listbox item to be disabled.
	* @returns {void}
	*/
	disableItemByIndex(index: number): void;

	/** Disables set of list Items using its index values.
	* @param {number[]|string} Indices of the listbox items to be disabled.
	* @returns {void}
	*/
	disableItemsByIndices(Indices: number[]|string): void;

	/** Enables the ListBox widget when it is disabled.
	* @returns {void}
	*/
	enable(): void;

	/** Enables a list Item using its item text value.
	* @param {string} Text of the listbox item to be enabled.
	* @returns {void}
	*/
	enableItem(text: string): void;

	/** Enables a list item using its index value.
	* @param {number} Index of the listbox item to be enabled.
	* @returns {void}
	*/
	enableItemByIndex(index: number): void;

	/** Enables a set of list Items using its index values.
	* @param {number[]|string} Indices of the listbox items to be enabled.
	* @returns {void}
	*/
	enableItemsByIndices(indices: number[]|string): void;

	/** Returns the list of checked items in the ListBox widget. It is dependent on showCheckbox property.
	* @returns {any}
	*/
	getCheckedItems(): any;

	/** Returns the list of selected items in the ListBox widget.
	* @returns {any}
	*/
	getSelectedItems(): any;

	/** Returns an itemâ€™s index based on the given text.
	* @param {string} The list item text (label)
	* @returns {number}
	*/
	getIndexByText(text: string): number;

	/** Returns an itemâ€™s index based on the value given.
	* @param {string} The list itemâ€™s value
	* @returns {number}
	*/
	getIndexByValue(indices: string): number;

	/** Returns an itemâ€™s text (label) based on the index given.
	* @returns {string}
	*/
	getTextByIndex(): string;

	/** Returns a list itemâ€™s object using its index.
	* @returns {any}
	*/
	getItemByIndex(): any;

	/** Returns a list itemâ€™s object based on the text given.
	* @param {string} The list item text.
	* @returns {any}
	*/
	getItemByText(text: string): any;

	/** Merges the given data with the existing data items in the listbox.
	* @param {Array<any>} Data to merge in listbox.
	* @returns {void}
	*/
	mergeData(data: Array<any>): void;

	/** Selects the next item based on the current selection.
	* @returns {void}
	*/
	moveDown(): void;

	/** Selects the previous item based on the current selection.
	* @returns {void}
	*/
	moveUp(): void;

	/** Refreshes the ListBox widget.
	* @param {boolean} Refreshes both the datasource and the dimensions of the ListBox widget when the parameter is passed as true, otherwise only the ListBox dimensions will be refreshed.
	* @returns {void}
	*/
	refresh(refreshData: boolean): void;

	/** Removes all the list items from listbox.
	* @returns {void}
	*/
	removeAll(): void;

	/** Removes the selected list items from the listbox.
	* @returns {void}
	*/
	removeSelectedItems(): void;

	/** Removes a list item by using its text.
	* @param {string} Text of the listbox item to be removed. 
	* @returns {void}
	*/
	removeItemByText(text: string): void;

	/** Removes a list item by using its index value.
	* @param {number} Index of the listbox item to be removed.
	* @returns {void}
	*/
	removeItemByIndex(index: number): void;

	/** 
	* @returns {void}
	*/
	selectAll(): void;

	/** Selects the list tem using its text value.
	* @param {string} Text of the listbox item to be selected.
	* @returns {void}
	*/
	selectItemByText(text: string): void;

	/** Selects list tem using its value property.
	* @param {string} Value of the listbox item to be selected.
	* @returns {void}
	*/
	selectItemByValue(value: string): void;

	/** Selects list item using its index value.
	* @param {number} Index of the listbox item to be selected.
	* @returns {void}
	*/
	selectItemByIndex(index: number): void;

	/** Selects a set of list items through its index values.
	* @param {number|number[]} Index/Indices of the listbox item to be selected.
	* @returns {void}
	*/
	selectItemsByIndices(Indices: number|number[]): void;

	/** Unchecks all the checked list items in the ListBox widget. To use this method showCheckbox property to be set as true.
	* @returns {void}
	*/
	uncheckAll(): void;

	/** Unchecks a checked list item using its index value. To use this method showCheckbox property to be set as true.
	* @param {number} Index of the listbox item to be unchecked.
	* @returns {void}
	*/
	uncheckItemByIndex(index: number): void;

	/** Unchecks the set of checked list items using its index values. To use this method showCheckbox property must be set to true.
	* @param {number[]|string} Indices of the listbox item to be unchecked.
	* @returns {void}
	*/
	uncheckItemsByIndices(indices: number[]|string): void;

	/** 
	* @returns {void}
	*/
	unselectAll(): void;

	/** Unselects a selected list item using its index value
	* @param {number} Index of the listbox item to be unselected.
	* @returns {void}
	*/
	unselectItemByIndex(index: number): void;

	/** Unselects a selected list item using its text value.
	* @param {string} Text of the listbox item to be unselected.
	* @returns {void}
	*/
	unselectItemByText(text: string): void;

	/** Unselects a selected list item using its value.
	* @param {string} Value of the listbox item to be unselected.
	* @returns {void}
	*/
	unselectItemByValue(value: string): void;

	/** Unselects a set of list items using its index values.
	* @param {number[]|string} Indices of the listbox item to be unselected.
	* @returns {void}
	*/
	unselectItemsByIndices(indices: number[]|string): void;

	/** Hides all the checked items in the listbox.
	* @returns {void}
	*/
	hideCheckedItems (): void;

	/** Shows a set of hidden list Items using its index values.
	* @param {number[]|string} Indices of the listbox items to be shown.
	* @returns {void}
	*/
	showItemByIndices(indices: number[]|string): void;

	/** Hides a set of list Items using its index values.
	* @param {number[]|string} Indices of the listbox items to be hidden.
	* @returns {void}
	*/
	hideItemsByIndices(indices: number[]|string): void;

	/** Shows the hidden list items using its values.
	* @param {Array<any>} Values of the listbox items to be shown.
	* @returns {void}
	*/
	showItemsByValues(values: Array<any>): void;

	/** Hides the list item using its values.
	* @param {Array<any>} Values of the listbox items to be hidden.
	* @returns {void}
	*/
	hideItemsByValues(values: Array<any>): void;

	/** Shows a hidden list item using its value.
	* @param {string} Value of the listbox item to be shown.
	* @returns {void}
	*/
	showItemByValue(value: string): void;

	/** Hide a list item using its value.
	* @param {string} Value of the listbox item to be hidden.
	* @returns {void}
	*/
	hideItemByValue(value: string): void;

	/** Shows a hidden list item using its index value.
	* @param {number} Index of the listbox item to be shown.
	* @returns {void}
	*/
	showItemByIndex(index: number): void;

	/** Hides a list item using its index value.
	* @param {number} Index of the listbox item to be hidden.
	* @returns {void}
	*/
	hideItemByIndex (index: number): void;

	/** 
	* @returns {void}
	*/
	show(): void;

	/** Hides the listbox.
	* @returns {void}
	*/
	hide(): void;

	/** Hides all the listbox items in the listbox.
	* @returns {void}
	*/
	hideAllItems(): void;

	/** Shows all the listbox items in the listbox.
	* @returns {void}
	*/
	showAllItems(): void;
}
export module ListBox{

export interface Model {

	/**Enables/disables the dragging behavior of the items in ListBox widget.
	* @Default {false}
	*/
	allowDrag?: boolean;

	/**Accepts the items which are dropped in to it, when it is set to true.
	* @Default {false}
	*/
	allowDrop?: boolean;

	/**Enables or disables multiple selection.
	* @Default {false}
	*/
	allowMultiSelection?: boolean;

	/**Loads the list data on demand via scrolling behavior to improve the applicationâ€™s performance. There are two ways to load data which can be defined using â€œvirtualScrollModeâ€ property.
	* @Default {false}
	*/
	allowVirtualScrolling?: boolean;

	/**Enables or disables the case sensitive search for list item by typing the text (search) value.
	* @Default {false}
	*/
	caseSensitiveSearch?: boolean;

	/**Dynamically populate data of a list box while selecting an item in another list box i.e. rendering child list box based on the item selection in parent list box. This property accepts the id of the child ListBox widget to populate the data.
	* @Default {null}
	*/
	cascadeTo?: string;

	/**Set of list items to be checked by default using its index. It works only when the showCheckbox property is set to true.
	* @Default {null}
	*/
	checkedIndices?: string;

	/**The root class for the ListBox widget to customize the existing theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Contains the list of data for generating the list items.
	* @Default {null}
	*/
	dataSource?: any;

	/**Enables or disables the ListBox widget.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Enables or disables the search behavior to find the specific list item by typing the text value.
	* @Default {false}
	*/
	enableIncrementalSearch?: boolean;

	/**Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Displays the ListBox widgetâ€™s content from right to left when enabled.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Mapping fields for the data items of the ListBox widget.
	* @Default {null}
	*/
	fields?: any;

	/**Defines the height of the ListBox widget.
	* @Default {null}
	*/
	height?: string;

	/**The number of list items to be shown in the ListBox widget. The remaining list items will be scrollable.
	* @Default {null}
	*/
	itemsCount?: number;

	/**The total number of list items to be rendered in the ListBox widget.
	* @Default {null}
	*/
	totalItemsCount?: number;

	/**The number of list items to be loaded in the list box while enabling virtual scrolling and when virtualScrollMode is set to continuous.
	* @Default {5}
	*/
	itemRequestCount?: number;

	/**Loads data for the listbox by default (i.e. on initialization) when it is set to true. It creates empty ListBox if it is set to false.
	*/
	loadDataOnInit?: boolean;

	/**The query to retrieve required data from the data source.
	* @Default {ej.Query()}
	*/
	query?: ej.Query|string;

	/**The list item to be selected by default using its index.
	* @Default {null}
	*/
	selectedIndex?: number;

	/**The list items to be selected by default using its indices. To use this property allowMultiSelection should be enabled.
	* @Default {[]}
	*/
	selectedIndices?: Array<any>;

	/**Enables/Disables the multi selection option with the help of checkbox control.
	* @Default {false}
	*/
	showCheckbox?: boolean;

	/**To display the ListBox container with rounded corners.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**The template to display the ListBox widget with customized appearance.
	* @Default {null}
	*/
	template?: string;

	/**Holds the selected items values and used to bind value to the list item using angular and knockout.
	* @Default {â€œâ€}
	*/
	value?: number;

	/**Specifies the virtual scroll mode to load the list data on demand via scrolling behavior. There are two types of mode.
	*/
	virtualScrollMode?: ej.VirtualScrollMode|string;

	/**Defines the width of the ListBox widget.
	* @Default {null}
	*/
	width?: string;

	/**Specifies the targetID for the listbox items.
	*/
	targetID?: string;

	/**Triggers before the AJAX request begins to load data in the ListBox widget.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggers after the data requested via AJAX is successfully loaded in the ListBox widget.*/
	actionSuccess? (e: ActionSuccessEventArgs): void;

	/**Triggers when the AJAX requests complete. The request may get failed or succeed.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggers when the data requested from AJAX get failed.*/
	actionFailure? (e: ActionFailureEventArgs): void;

	/**Event will be triggered before the requested data via AJAX once loaded in successfully.*/
	actionBeforeSuccess? (e: ActionBeforeSuccessEventArgs): void;

	/**Triggers when the item selection is changed.*/
	change? (e: ChangeEventArgs): void;

	/**Triggers when the list item is checked or unchecked.*/
	checkChange? (e: CheckChangeEventArgs): void;

	/**Triggers when the ListBox widget is created successfully.*/
	create? (e: CreateEventArgs): void;

	/**Triggers when the ListBox widget is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggers when focus the listbox items.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Triggers when focus out from listbox items.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Triggers when the list item is being dragged.*/
	itemDrag? (e: ItemDragEventArgs): void;

	/**Triggers when the list item is ready to be dragged.*/
	itemDragStart? (e: ItemDragStartEventArgs): void;

	/**Triggers when the list item stops dragging.*/
	itemDragStop? (e: ItemDragStopEventArgs): void;

	/**Triggers when the list item is dropped.*/
	itemDrop? (e: ItemDropEventArgs): void;

	/**Triggers when a list item gets selected.*/
	select? (e: SelectEventArgs): void;

	/**Triggers when a list item gets unselected.*/
	unselect? (e: UnselectEventArgs): void;
}

export interface ActionBeginEventArgs {
}

export interface ActionSuccessEventArgs {
}

export interface ActionCompleteEventArgs {
}

export interface ActionFailureEventArgs {
}

export interface ActionBeforeSuccessEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**List of actual object.
	*/
	actual?: any;

	/**Object of ListBox widget which contains DataManager arguments
	*/
	request?: any;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**List of array object
	*/
	result?: Array<any>;

	/**ExcuteQuery object of DataManager
	*/
	xhr?: any;
}

export interface ChangeEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**List item object.
	*/
	item?: any;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface CheckChangeEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**List item object.
	*/
	item?: any;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface CreateEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: ej.ListBox.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;
}

export interface DestroyEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;
}

export interface FocusInEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;
}

export interface FocusOutEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;
}

export interface ItemDragEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on whether the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface ItemDragStartEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on whether the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface ItemDragStopEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on whether the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface ItemDropEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on whether the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface SelectEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**List item object.
	*/
	item?: any;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}

export interface UnselectEventArgs {

	/**Instance of the listbox model object.
	*/
	model?: any;

	/**Name of the event.
	*/
	type?: string;

	/**List item object.
	*/
	item?: any;

	/**The Datasource of the listbox.
	*/
	data?: any;

	/**List itemâ€™s index.
	*/
	index?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Boolean value based on whether the list item is checked or not.
	*/
	isChecked?: boolean;

	/**Boolean value based on whether the list item is selected or not.
	*/
	isSelected?: boolean;

	/**Boolean value based on the list item is enabled or not.
	*/
	isEnabled?: boolean;

	/**List itemâ€™s text (label).
	*/
	text?: string;

	/**List itemâ€™s value.
	*/
	value?: string;
}
}

class Calculate extends ej.Widget {
	static fn: Calculate;
	constructor(element: JQuery, options?: Calculate.Model);
	constructor(element: Element, options?: Calculate.Model);
	model:Calculate.Model;
	defaults:Calculate.Model;

	/** Add the custom formuls with function in CalcEngine library
	* @param {string} pass the formula name
	* @param {string} pass the custom function name to call
	* @returns {void}
	*/
	addCustomFunction(FormulaName: string, FunctionName: string): void;

	/** Adds a named range to the NamedRanges collection
	* @param {string} pass the namedRange's name
	* @param {string} pass the cell range of NamedRange
	* @returns {void}
	*/
	addNamedRange(Name: string, cellRange: string): void;

	/** Accepts a possible parsed formula and returns the calculated value without quotes.
	* @param {string} pass the cell range to adjust its range
	* @returns {string}
	*/
	adjustRangeArg(Name: string): string;

	/** When a formula cell changes, call this method to clear it from its dependent cells.
	* @param {string} pass the changed cell address
	* @returns {void}
	*/
	clearFormulaDependentCells(Cell: string): void;

	/** Call this method to clear whether an exception was raised during the computation of a library function.
	* @returns {void}
	*/
	clearLibraryComputationException(): void;

	/** Get the column index from a cell reference passed in.
	* @param {string} pass the cell address
	* @returns {void}
	*/
	colIndex(Cell: string): void;

	/** Evaluates a parsed formula.
	* @param {string} pass the parsed formula
	* @returns {string}
	*/
	computedValue(Formula: string): string;

	/** Evaluates a parsed formula.
	* @param {string} pass the parsed formula
	* @returns {string}
	*/
	computeFormula(Formula: string): string;
}
export module Calculate{

export interface Model {
}
}

class CheckBox extends ej.Widget {
	static fn: CheckBox;
	constructor(element: JQuery, options?: CheckBox.Model);
	constructor(element: Element, options?: CheckBox.Model);
	model:CheckBox.Model;
	defaults:CheckBox.Model;

	/** Destroy the CheckBox widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Disable the CheckBox to prevent all user interactions.
	* @returns {void}
	*/
	disable(): void;

	/** To enable the CheckBox
	* @returns {void}
	*/
	enable(): void;

	/** To Check the status of CheckBox
	* @returns {boolean}
	*/
	isChecked(): boolean;
}
export module CheckBox{

export interface Model {

	/**Specifies whether CheckBox has to be in checked or not. We can also specify array of string as value for this property. If any of the value in the specified array matches the value of the textbox, then it will be considered as checked. It will be useful in MVVM binding, specify array type to identify the values of the checked CheckBoxes.
	* @Default {false}
	*/
	checked?: boolean|string[];

	/**Specifies the State of CheckBox.See below to get available CheckState
	* @Default {null}
	*/
	checkState?: ej.CheckState|string;

	/**Sets the root CSS class for CheckBox theme, which is used customize.
	*/
	cssClass?: string;

	/**Specifies the checkbox control state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies the persist property for CheckBox while initialization. The persist API save current model value to browser cookies for state maintains. While refreshing the CheckBox control page the model value apply from browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specify the Right to Left direction to Checkbox
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the enable or disable Tri-State for checkbox control.
	* @Default {false}
	*/
	enableTriState?: boolean;

	/**It allows to define the characteristics of the CheckBox control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specified value to be added an id attribute of the CheckBox.
	* @Default {null}
	*/
	id?: string;

	/**Specify the prefix value of id to be added before the current id of the CheckBox.
	* @Default {ej}
	*/
	idPrefix?: string;

	/**Specifies the name attribute of the CheckBox.
	* @Default {null}
	*/
	name?: string;

	/**Displays rounded corner borders to CheckBox
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies the size of the CheckBox.See below to know available CheckboxSize
	* @Default {small}
	*/
	size?: ej.CheckboxSize|string;

	/**Specifies the text content to be displayed for CheckBox.
	*/
	text?: string;

	/**Set the jQuery validation error message in CheckBox.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Set the jQuery validation rules in CheckBox.
	* @Default {null}
	*/
	validationRules?: any;

	/**Specifies the value attribute of the CheckBox.
	* @Default {null}
	*/
	value?: string;

	/**Fires before the CheckBox is going to changed its state successfully*/
	beforeChange? (e: BeforeChangeEventArgs): void;

	/**Fires when the CheckBox state is changed successfully*/
	change? (e: ChangeEventArgs): void;

	/**Fires when the CheckBox state is created successfully*/
	create? (e: CreateEventArgs): void;

	/**Fires when the CheckBox state is destroyed successfully*/
	destroy? (e: DestroyEventArgs): void;
}

export interface BeforeChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the CheckBox model
	*/
	model?: ej.CheckBox.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the event model values
	*/
	event?: any;

	/**returns the status whether the element is checked or not.
	*/
	isChecked?: boolean;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the CheckBox model
	*/
	model?: ej.CheckBox.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the event arguments
	*/
	event?: any;

	/**returns the status whether the element is checked or not.
	*/
	isChecked?: boolean;

	/**returns the state of the checkbox
	*/
	checkState?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the CheckBox model
	*/
	model?: ej.CheckBox.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the CheckBox model
	*/
	model?: ej.CheckBox.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}
enum CheckState
{
//string
Uncheck,
//string
Check,
//string
Indeterminate,
}
enum CheckboxSize
{
//Displays the CheckBox in medium size
Medium,
//Displays the CheckBox in small size
Small,
}

class ColorPicker extends ej.Widget {
	static fn: ColorPicker;
	constructor(element: JQuery, options?: ColorPicker.Model);
	constructor(element: Element, options?: ColorPicker.Model);
	model:ColorPicker.Model;
	defaults:ColorPicker.Model;

	/** Disables the color picker control
	* @returns {void}
	*/
	disable(): void;

	/** Enable the color picker control
	* @returns {void}
	*/
	enable(): void;

	/** Gets the selected color in RGB format
	* @returns {any}
	*/
	getColor(): any;

	/** Gets the selected color value as string
	* @returns {string}
	*/
	getValue(): string;

	/** To Convert color value from hexCode to RGB
	* @returns {any}
	*/
	hexCodeToRGB(): any;

	/** Hides the ColorPicker popup, if in opened state.
	* @returns {void}
	*/
	hide(): void;

	/** Convert color value from HSV to RGB
	* @returns {any}
	*/
	HSVToRGB(): any;

	/** Convert color value from RGB to HEX
	* @returns {string}
	*/
	RGBToHEX(): string;

	/** Convert color value from RGB to HSV
	* @returns {any}
	*/
	RGBToHSV(): any;

	/** Open the ColorPicker popup.
	* @returns {void}
	*/
	show(): void;
}
export module ColorPicker{

export interface Model {

	/**The ColorPicker control allows to define the customized text to displayed in button elements. Using the property to achieve the customized culture values.
	* @Default {buttonText.apply= Apply, buttonText.cancel= Cancel,buttonText.swatches=Swatches}
	*/
	buttonText?: any;

	/**Allows to change the mode of the button. Please refer below to know available button mode
	* @Default {ej.ButtonMode.Split}
	*/
	buttonMode?: ej.ButtonMode|string;

	/**Specifies the number of columns to be displayed color palette model.
	* @Default {10}
	*/
	columns?: number;

	/**This property allows you to customize its appearance using user-defined CSS and custom skin options such as colors and backgrounds.
	*/
	cssClass?: string;

	/**This property allows to define the custom colors in the palette model.Custom palettes are created by passing a comma delimited string of HEX values or an array of colors.
	* @Default {empty}
	*/
	custom?: Array<any>;

	/**This property allows to embed the popup in the order of DOM element flow . When we set the value as true, the color picker popup is always in visible state.
	* @Default {false}
	*/
	displayInline?: boolean;

	/**This property allows to change the control in enabled or disabled state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**This property allows to enable or disable the opacity slider in the color picker control
	* @Default {true}
	*/
	enableOpacity?: boolean;

	/**It allows to define the characteristics of the ColorPicker control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the model type to be rendered initially in the color picker control. See below to get available ModelType
	* @Default {ej.ColorPicker.ModelType.Default}
	*/
	modelType?: ej.ColorPicker.ModelType|string;

	/**This property allows to change the opacity value .The selected color opacity will be adjusted by using this opacity value.
	* @Default {100}
	*/
	opacityValue?: number;

	/**Specifies the palette type to be displayed at initial time in palette model.There two types of palette model available in ColorPicker control. See below available Palette
	* @Default {ej.ColorPicker.Palette.BasicPalette}
	*/
	palette?: ej.ColorPicker.Palette|string;

	/**This property allows to define the preset model to be rendered initially in palette type.It consists of 12 different types of presets. Each presets have 50 colors. See below available Presets
	* @Default {ej.ColorPicker.Presets.Basic}
	*/
	presetType?: ej.ColorPicker.Presets|string;

	/**Allows to show/hides the apply and cancel buttons in ColorPicker control
	* @Default {true}
	*/
	showApplyCancel?: boolean;

	/**Allows to show/hides the clear button in ColorPicker control
	* @Default {true}
	*/
	showClearButton?: boolean;

	/**This property allows to provides live preview support for current cursor selection color and selected color.
	* @Default {true}
	*/
	showPreview?: boolean;

	/**This property allows to store the color values in custom list.The ColorPicker will keep up to 11 colors in a custom list.By clicking the add button, the selected color from picker or palette will get added in the recent color list.
	* @Default {false}
	*/
	showRecentColors?: boolean;

	/**This property allows to shows tooltip to notify the slider value in color picker control.
	* @Default {false}
	*/
	showTooltip?: boolean;

	/**Specifies the toolIcon to be displayed in dropdown control color area.
	* @Default {null}
	*/
	toolIcon?: string;

	/**This property allows to define the customized text or content to displayed when mouse over the following elements. This property also allows to use the culture values.
	* @Default {tooltipText: { switcher: Switcher, addbutton: Add Color, basic: Basic, monochrome: Mono Chrome, flatcolors: Flat Color, seawolf: Sea Wolf, webcolors: Web Colors, sandy: Sandy, pinkshades: Pink Shades, misty: Misty, citrus: Citrus, vintage: Vintage, moonlight: Moon Light, candycrush: Candy Crush, currentcolor: Current Color, selectedcolor: Selected Color }}
	*/
	tooltipText?: any;

	/**Specifies the color value for color picker control, the value is in hexadecimal form with prefix of &quot;#&quot;.
	* @Default {null}
	*/
	value?: string;

	/**Fires after Color value has been changed successfully.If the user want to perform any operation after the color value changed then the user can make use of this change event.*/
	change? (e: ChangeEventArgs): void;

	/**Fires after closing the color picker popup.*/
	close? (e: CloseEventArgs): void;

	/**Fires after Color picker control is created. If the user want to perform any operation after the color picker control creation then the user can make use of this create event.*/
	create? (e: CreateEventArgs): void;

	/**Fires after Color picker control is destroyed. If the user want to perform any operation after the color picker control destroyed then the user can make use of this destroy event.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires after opening the color picker popup*/
	open? (e: OpenEventArgs): void;

	/**Fires after Color value has been selected successfully. If the user want to perform any operation after the color value selected then the user can make use of this select event.*/
	select? (e: SelectEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: ej.ColorPicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return the changed color value
	*/
	value?: string;
}

export interface CloseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: ej.ColorPicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: ej.ColorPicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface OpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: ej.ColorPicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface SelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the color picker model
	*/
	model?: ej.ColorPicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return the selected color value
	*/
	value?: string;
}

enum ModelType{

	///support palette type mode in color picker.
	Palette,

	///support palette type mode in color picker.
	Picker
}


enum Palette{

	///used to show the basic palette
	BasicPalette,

	///used to show the custompalette
	CustomPalette
}


enum Presets{

	///used to show the basic presets
	Basic,

	///used to show the CandyCrush colors presets
	CandyCrush,

	///used to show the Citrus colors presets
	Citrus,

	///used to show the FlatColors presets
	FlatColors,

	///used to show the Misty presets
	Misty,

	///used to show the MoonLight presets
	MoonLight,

	///used to show the PinkShades presets
	PinkShades,

	///used to show the Sandy presets
	Sandy,

	///used to show the Seawolf presets
	SeaWolf,

	///used to show the Vintage presets
	Vintage,

	///used to show the WebColors presets
	WebColors
}

}
enum ButtonMode
{
//Displays the button in split mode 
Split,
//Displays the button in Dropdown mode
Dropdown,
}

class FileExplorer extends ej.Widget {
	static fn: FileExplorer;
	constructor(element: JQuery, options?: FileExplorer.Model);
	constructor(element: Element, options?: FileExplorer.Model);
	model:FileExplorer.Model;
	defaults:FileExplorer.Model;

	/** Refresh the size of FileExplorer control.
	* @returns {void}
	*/
	adjustSize(): void;

	/** Disable the particular context menu item.
	* @param {string|HTMLElement} Id of the menu item/ Menu element to be disabled 
	* @returns {void}
	*/
	disableMenuItem(item: string|HTMLElement): void;

	/** Disable the particular toolbar item.
	* @param {string|HTMLElement} Id of the toolbar item/ Tool item element to be disabled 
	* @returns {void}
	*/
	disableToolbarItem(item: string|HTMLElement): void;

	/** Enable the particular context menu item.
	* @param {string|HTMLElement} Id of the menu item/ Menu element to be Enabled 
	* @returns {void}
	*/
	enableMenuItem(item: string|HTMLElement): void;

	/** Enable the particular toolbar item
	* @param {string|HTMLElement} Id of the tool item/ Tool item element to be Enabled 
	* @returns {void}
	*/
	enableToolbarItem(item: string|HTMLElement): void;

	/** Refresh the content of the selected folder in FileExplorer control.
	* @returns {void}
	*/
	refresh(): void;

	/** Remove the particular toolbar item.
	* @param {string|HTMLElement} Id of the tool item/ tool item element to be removed 
	* @returns {void}
	*/
	removeToolbarItem(item: string|HTMLElement): void;
}
export module FileExplorer{

export interface Model {

	/**Sets the URL of server side ajax handling method that handles file operation like Read, Remove, Rename, Create, Upload, Download, Copy and Move in File Explorer.
	*/
	ajaxAction?: string;

	/**Specifies the data type of server side ajax handling method.
	* @Default {json}
	*/
	ajaxDataType?: string;

	/**By using ajaxSettings property, you can customize the ajax configurations. Normally you can customize the following option in ajax handling data, url, type, async, contentType, dataType and success. For upload, download and getImage API, you can only customize url.
	* @Default {{ read: {}, createFolder: {}, remove: {}, rename: {}, paste: {}, getDetails: {}, download: {}, upload: {}, getImage: {}}}
	*/
	ajaxSettings?: any;

	/**The FileExplorer allows to select multiple files by enabling the allowMultiSelection property. You can perform multi selection by pressing the Ctrl key or Shift key.
	* @Default {true}
	*/
	allowMultiSelection?: boolean;

	/**Sets the root class for FileExplorer theme. This cssClass API allows to use custom skinning option for File Explorer control. By defining the root class by using this API, you have to include this root class in CSS.
	*/
	cssClass?: string;

	/**Enables or disables the resize support in FileExplorer control.
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Enables or disables the Right to Left alignment support in FileExplorer control.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Allows specified type of files only to display in FileExplorer control.
	* @Default {.}
	*/
	fileTypes?: string;

	/**By using filterSettings property, you can customize the search functionality of the search bar in FileExplorer control.
	*/
	filterSettings?: FilterSettings;

	/**By using the gridSettings property, you can customize the grid behavior in the FileExplorer control.
	*/
	gridSettings?: GridSettings;

	/**Specifies the height of FileExplorer control.
	* @Default {400}
	*/
	height?: string|number;

	/**Enables or disables the responsive support for FileExplorer control during the window resizing time.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Sets the file view type. There are two view types available, such as grid, tile. See layoutType.
	* @Default {ej.FileExplorer.layoutType.Grid}
	*/
	layout?: ej.FileExplorer.layoutType|string;

	/**Sets the culture in FileExplorer.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the maximum height of FileExplorer control.
	* @Default {null}
	*/
	maxHeight?: string|number;

	/**Sets the maximum width of FileExplorer control.
	* @Default {null}
	*/
	maxWidth?: string|number;

	/**Sets the minimum height of FileExplorer control.
	* @Default {250}
	*/
	minHeight?: string|number;

	/**Sets the minimum width of FileExplorer control.
	* @Default {400}
	*/
	minWidth?: string|number;

	/**The property path denotes the filesystem path that are to be explored. The path for the filesystem can be physical path or relative path, but it has to be relevant to where the Web API is hosted.
	*/
	path?: string;

	/**The selectedFolder is used to select the specified folder of FileExplorer control.
	*/
	selectedFolder?: string;

	/**The selectedItems is used to select the specified items (file, folder) of FileExplorer control.
	*/
	selectedItems?: string|Array<any>;

	/**Enables or disables the context menu option in FileExplorer control.
	* @Default {true}
	*/
	showContextMenu?: boolean;

	/**Enables or disables the footer in FileExplorer control. The footer element displays the details of the current selected files and folders. And also the footer having the switcher to change the layout view.
	* @Default {true}
	*/
	showFooter?: boolean;

	/**Shows or disables the toolbar in FileExplorer control.
	* @Default {true}
	*/
	showToolbar?: boolean;

	/**Enables or disables the navigation pane in FileExplorer control. The navigation pane contains a tree view element that displays all the folders from the filesystem in a hierarchical manner. This is useful to a quick navigation of any folder in the filesystem.
	* @Default {true}
	*/
	showNavigationPane?: boolean;

	/**The tools property is used to configure and group required toolbar items in FileExplorer control.
	* @Default {{ creation:[NewFolder, Open], navigation: [Back, Forward, Upward], addressBar: [Addressbar], editing: [Refresh, Upload, Delete, Rename, Download], copyPaste: [Cut, Copy, Paste], getProperties: [Details], searchBar: [Searchbar] }}
	*/
	tools?: any;

	/**The toolsList property is used to arrange the toolbar items in the FileExplorer control.
	* @Default {[creation, navigation, addressBar, editing, copyPaste, getProperties, searchBar]}
	*/
	toolsList?: Array<any>;

	/**Gets or sets an object that indicates whether to customize the upload behavior in the FileExplorer.
	*/
	uploadSettings?: UploadSettings;

	/**Specifies the width of FileExplorer control.
	* @Default {850}
	*/
	width?: string|number;

	/**Fires before the ajax request is performed.*/
	beforeAjaxRequest? (e: BeforeAjaxRequestEventArgs): void;

	/**Fires before downloading the files.*/
	beforeDownload? (e: BeforeDownloadEventArgs): void;

	/**Fires before files or folders open.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Fires before uploading the files.*/
	beforeUpload? (e: BeforeUploadEventArgs): void;

	/**Fires when file or folder is copied successfully.*/
	copy? (e: CopyEventArgs): void;

	/**Fires when new folder is created successfully in file system.*/
	createFolder? (e: CreateFolderEventArgs): void;

	/**Fires when file or folder is cut successfully.*/
	cut? (e: CutEventArgs): void;

	/**Fires when the file view type is changed.*/
	layoutChange? (e: LayoutChangeEventArgs): void;

	/**Fires when files are successfully opened.*/
	open? (e: OpenEventArgs): void;

	/**Fires when a file or folder is pasted successfully.*/
	paste? (e: PasteEventArgs): void;

	/**Fires when file or folder is deleted successfully.*/
	remove? (e: RemoveEventArgs): void;

	/**Fires when resizing is performed for FileExplorer.*/
	resize? (e: ResizeEventArgs): void;

	/**Fires when resizing is started for FileExplorer.*/
	resizeStart? (e: ResizeStartEventArgs): void;

	/**Fires this event when the resizing is stopped for FileExplorer.*/
	resizeStop? (e: ResizeStopEventArgs): void;

	/**Fires when the items from grid view or tile view of FileExplorer control is selected.*/
	select? (e: SelectEventArgs): void;
}

export interface BeforeAjaxRequestEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ajax response data
	*/
	data?: any;

	/**returns the FileExplorer model
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface BeforeDownloadEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the downloaded file names.
	*/
	files?: string[];

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the path of currently opened item.
	*/
	path?: string;

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface BeforeOpenEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the opened item type.
	*/
	itemType?: string;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the path of currently opened item.
	*/
	path?: string;

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface BeforeUploadEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the path of currently opened item.
	*/
	path?: string;

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CopyEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of copied file/folder.
	*/
	name?: string[];

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the source path.
	*/
	sourcePath?: string;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CreateFolderEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ajax response data
	*/
	data?: any;

	/**returns the FileExplorer model
	*/
	model?: ej.FileExplorer.Model;

	/**returns the selected item details
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CutEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of moved file or folder.
	*/
	name?: string[];

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the source path.
	*/
	sourcePath?: string;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface LayoutChangeEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the current view type.
	*/
	layoutType?: string;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface OpenEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the opened item type.
	*/
	itemType?: any;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the path of currently opened item.
	*/
	path?: string;

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface PasteEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of moved file or folder.
	*/
	name?: string[];

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the target folder item details.
	*/
	targetFolder?: any;

	/**returns the target path.
	*/
	targetPath?: string;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RemoveEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ajax response data.
	*/
	data?: any;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the names of deleted items.
	*/
	name?: string;

	/**returns the path of deleted item.
	*/
	path?: string;

	/**returns the selected item details.
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ResizeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mouse move event args.
	*/
	event?: any;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ResizeStartEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the mouse down event args.
	*/
	event?: any;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ResizeStopEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the mouse leave event args.
	*/
	event?: any;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface SelectEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the FileExplorer model.
	*/
	model?: ej.FileExplorer.Model;

	/**returns the name of clicked item.
	*/
	name?: string;

	/**returns the path of clicked item.
	*/
	path?: string;

	/**returns the selected item details
	*/
	selectedItems?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface FilterSettings {

	/**Enables or disables to perform the filter operation with case sensitive.
	* @Default {false}
	*/
	caseSensitiveSearch?: boolean;

	/**Sets the search filter type. There are several filter types available, such as &quot;startswith&quot;, &quot;contains&quot;, &quot;endswith&quot;. See filterType
	* @Default {ej.FileExplorer.filterType.Contains}
	*/
	filterType?: ej.FilterType|string;
}

export interface GridSettings {

	/**Gets or sets a value that indicates whether to enable the dynamic sorting behavior on grid data. Sorting can be done through clicking on particular column header.
	* @Default {true}
	*/
	allowSorting?: boolean;

	/**Gets or sets an object that indicates to render the grid with specified columns. You can use this property same as the column property in Grid control.
	* @Default {[{ field: name, headerText: Name, width: 25% }, { field: type, headerText: Type, width: 20% }, { field: dateModified, headerText: Date Modified, width: 35% }, { field: size, headerText: Size, width: 15%, textAlign: right, headerTextAlign: left }]}
	*/
	columns?: Array<any>;
}

export interface UploadSettings {

	/**Specifies the maximum file size allowed to upload. It accepts the value in bytes.
	* @Default {31457280}
	*/
	maxFileSize?: number;

	/**Enables or disables the multiple files upload. When it is enabled, you can upload multiple files at a time and when disabled, you can upload only one file at a time.
	* @Default {true}
	*/
	allowMultipleFile?: boolean;

	/**Enables or disables the auto upload option while uploading files in FileExplorer control.
	* @Default {false}
	*/
	autoUpload?: boolean;
}

enum layoutType{

	///Supports to display files in tile view
	Tile,

	///Supports to display files in grid view 
	Grid,

	///Supports to display files as large icons
	LargeIcons
}

}

class DatePicker extends ej.Widget {
	static fn: DatePicker;
	constructor(element: JQuery, options?: DatePicker.Model);
	constructor(element: Element, options?: DatePicker.Model);
	model:DatePicker.Model;
	defaults:DatePicker.Model;

	/** Disables the DatePicker control.
	* @returns {void}
	*/
	disable(): void;

	/** Enable the DatePicker control, if it is in disabled state.
	* @returns {void}
	*/
	enable(): void;

	/** Returns the current date value in the DatePicker control.
	* @returns {string}
	*/
	getValue(): string;

	/** Close the DatePicker popup, if it is in opened state.
	* @returns {void}
	*/
	hide(): void;

	/** Opens the DatePicker popup.
	* @returns {void}
	*/
	show(): void;
}
export module DatePicker{

export interface Model {

	/**Used to allow or restrict the editing in DatePicker input field directly. By setting false to this API, You can only pick the date from DatePicker popup.
	* @Default {true}
	*/
	allowEdit?: boolean;

	/**allow or restrict the drill down to multiple levels of view (month/year/decade) in DatePicker calendar
	* @Default {true}
	*/
	allowDrillDown?: boolean;

	/**Sets the specified text value to the today button in the DatePicker calendar.
	* @Default {Today}
	*/
	buttonText?: string;

	/**Sets the root CSS class for Accordion theme, which is used customize.
	*/
	cssClass?: string;

	/**Formats the value of the DatePicker in to the specified date format. If this API is not specified, dateFormat will be set based on the current culture of DatePicker.
	* @Default {MM/dd/yyyy}
	*/
	dateFormat?: string;

	/**Specifies the header format of days in DatePicker calendar. See below to get available Headers options
	* @Default {ej.DatePicker.Header.Min}
	*/
	dayHeaderFormat?: string | ej.DatePicker.Header;

	/**Specifies the navigation depth level in DatePicker calendar. This option is not applied when start level view option is lower than depth level view. See below to know available levels in DatePicker Calendar
	*/
	depthLevel?: string | ej.DatePicker.Level;

	/**Allows to embed the DatePicker calendar in the page. Also associates DatePicker with div element instead of input.
	* @Default {false}
	*/
	displayInline?: boolean;

	/**Enables or disables the animation effect with DatePicker calendar.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Enable or disable the DatePicker control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Sustain the entire widget model of DatePicker even after form post or browser refresh
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Displays DatePicker calendar along with DatePicker input field in Right to Left direction.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Allows to enter valid or invalid date in input textbox and indicate as error if it is invalid value, when this API value is set to true. For false value, invalid date is not allowed to input field and corrected to valid date automatically, even if invalid date is given.
	* @Default {false}
	*/
	enableStrictMode?: boolean;

	/**Used  the required fields for special Dates in DatePicker in order to customize the special dates in a calendar.
	* @Default {null}
	*/
	fields?: Fields;

	/**Specifies the header format to be displayed in the DatePicker calendar.
	* @Default {MMMM yyyy}
	*/
	headerFormat?: string;

	/**Specifies the height of the DatePicker input text.
	* @Default {28px}
	*/
	height?: string;

	/**HighlightSection is used to highlight currently selected date's month/week/workdays. See below to get available HighlightSection options
	* @Default {none}
	*/
	highlightSection?: string | ej.DatePicker.HighlightSection;

	/**Weekend  dates will be highlighted when this property is set to true.
	* @Default {false}
	*/
	highlightWeekend?: boolean;

	/**Specifies the HTML Attributes of the DatePicker.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Change the DatePicker calendar and date format based on given culture.
	* @Default {en-US}
	*/
	locale?: string;

	/**Specifies the maximum date in the calendar that the user can select.
	* @Default {new Date(2099, 11, 31)}
	*/
	maxDate?: string|Date;

	/**Specifies the minimum date in the calendar that the user can select.
	* @Default {new Date(1900, 00, 01)}
	*/
	minDate?: string|Date;

	/**Allows to toggles the read only state of the DatePicker. When the widget is readOnly, it doesn't allow your input.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**It allows to display footer in DatePicker calendar.
	* @Default {true}
	*/
	showFooter?: boolean;

	/**It allows to display/hides the other months days from the current month calendar in a DatePicker.
	* @Default {true}
	*/
	showOtherMonths?: boolean;

	/**Shows/hides the date icon button at right side of textbox, which is used to open or close the DatePicker calendar popup.
	* @Default {true}
	*/
	showPopupButton?: boolean;

	/**DatePicker input is displayed with rounded corner when this property is set to true.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Used to show the tooltip when hovering on the days in the DatePicker calendar.
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**Specifies the special dates in DatePicker.
	* @Default {null}
	*/
	specialDates?: any;

	/**Specifies the start day of the week in DatePicker calendar.
	* @Default {0}
	*/
	startDay?: number;

	/**Specifies the start level view in DatePicker calendar. See below available Levels
	* @Default {ej.DatePicker.Level.Month}
	*/
	startLevel?: string | ej.DatePicker.Level;

	/**Specifies the number of months to be navigate for one click of next and previous button in a DatePicker Calendar.
	* @Default {1}
	*/
	stepMonths?: number;

	/**Provides option to customize the tooltip format.
	* @Default {ddd MMM dd yyyy}
	*/
	tooltipFormat?: string;

	/**Sets the jQuery validation support to DatePicker Date value. See validation
	* @Default {null}
	*/
	validationMessage?: any;

	/**Sets the jQuery validation custom rules to the DatePicker. see validation
	* @Default {null}
	*/
	validationRules?: any;

	/**sets or returns the current value of DatePicker
	* @Default {null}
	*/
	value?: string|Date;

	/**Specifies the water mark text to be displayed in input text.
	* @Default {Select date}
	*/
	watermarkText?: string;

	/**Specifies the width of the DatePicker input text.
	* @Default {160px}
	*/
	width?: string;

	/**Fires before closing the DatePicker popup.*/
	beforeClose? (e: BeforeCloseEventArgs): void;

	/**Fires when each date is created in the DatePicker popup calendar.*/
	beforeDateCreate? (e: BeforeDateCreateEventArgs): void;

	/**Fires before opening the DatePicker popup.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Fires when the DatePicker input value is changed.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when DatePicker popup is closed.*/
	close? (e: CloseEventArgs): void;

	/**Fires when the DatePicker is created successfully.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the DatePicker is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**NameTypeDescriptioncancelbooleanSet to true when the event has to be canceled, else false.modelobjectreturns the DatePicker model.typestringreturns the name of the event.valuestringreturns the currently selected date value.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Fires when DatePicker input loses the focus.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Fires when DatePicker popup is opened.*/
	open? (e: OpenEventArgs): void;

	/**Fires when a date is selected from the DatePicker popup.*/
	select? (e: SelectEventArgs): void;
}

export interface BeforeCloseEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the event parameters from DatePicker.
	*/
	events?: any;

	/**returns the DatePicker popup.
	*/
	element?: HTMLElement;
}

export interface BeforeDateCreateEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the currently created date object.
	*/
	date?: any;

	/**returns the current DOM object of the date from the Calendar.
	*/
	element?: HTMLElement;
}

export interface BeforeOpenEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the event parameters from DatePicker.
	*/
	events?: any;

	/**returns the DatePicker popup.
	*/
	element?: HTMLElement;
}

export interface ChangeEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the DatePicker input value.
	*/
	value?: string;

	/**returns the previously selected value.
	*/
	prevDate?: string;
}

export interface CloseEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the current date value.
	*/
	value?: string;

	/**returns the previously selected value.
	*/
	prevDate?: string;
}

export interface CreateEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface FocusInEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the currently selected date value.
	*/
	value?: string;
}

export interface FocusOutEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the currently selected date value.
	*/
	value?: string;

	/**returns the previously selected date value.
	*/
	prevDate?: string;
}

export interface OpenEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the current date value.
	*/
	value?: string;

	/**returns the previously selected value.
	*/
	prevDate?: string;
}

export interface SelectEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the DatePicker model.
	*/
	model?: ej.DatePicker.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the current date value.
	*/
	value?: string;

	/**returns the previously selected value.
	*/
	prevDate?: string;

	/**returns whether the  currently selected date is special date or not.
	*/
	isSpecialDay?: string;
}

export interface Fields {

	/**Specifies the specials dates
	*/
	date?: string;

	/**Specifies the icon class to special dates.
	*/
	iconClass?: string;

	/**Specifies the tooltip to special dates.
	*/
	tooltip?: string;
}

enum Header{

	///Removes day header in DatePicker
	None,

	///sets  the short format of day name (like Sun) in header in DatePicker
	Short,

	///sets  the Min format of day name (like su) in header format DatePicker
	Min
}


enum Level{

	///allow  navigation upto year level in  DatePicker
	Year,

	///allow  navigation upto decade level in  DatePicker
	Decade,

	///allow  navigation upto Century level in  DatePicker
	Century
}


enum HighlightSection{

	///Highlight the week of the currently  selected date in DatePicker popup calendar  
	Week,

	///Highlight the workdays in a currently  selected date's week in DatePicker popup calendar 
	WorkDays,

	///Nothing will be highlighted, remove highlights from DatePicker popup calendar if already exists
	None
}

}

class DateTimePicker extends ej.Widget {
	static fn: DateTimePicker;
	constructor(element: JQuery, options?: DateTimePicker.Model);
	constructor(element: Element, options?: DateTimePicker.Model);
	model:DateTimePicker.Model;
	defaults:DateTimePicker.Model;

	/** Disables the DateTimePicker control.
	* @returns {void}
	*/
	disable(): void;

	/** Enables the DateTimePicker control.
	* @returns {void}
	*/
	enable(): void;

	/** Returns the current datetime value in the DateTimePicker.
	* @returns {string}
	*/
	getValue(): string;

	/** Hides or closes the DateTimePicker popup.
	* @returns {void}
	*/
	hide(): void;

	/** Updates the current system date value and time value to the DateTimePicker.
	* @returns {void}
	*/
	setCurrentDateTime(): void;

	/** Shows or opens the DateTimePicker popup.
	* @returns {void}
	*/
	show(): void;
}
export module DateTimePicker{

export interface Model {

	/**Displays the custom text for the buttons inside the DateTimePicker popup. when the culture value changed, we can change the buttons text based on the culture.
	* @Default {{ today: Today, timeNow: Time Now, done: Done, timeTitle: Time }}
	*/
	buttonText?: ButtonText;

	/**Set the root class for DateTimePicker theme. This cssClass API helps to use custom skinning option for DateTimePicker control.
	*/
	cssClass?: string;

	/**Defines the datetime format displayed in the DateTimePicker. The value should be a combination of date format and time format.
	* @Default {M/d/yyyy h:mm tt}
	*/
	dateTimeFormat?: string;

	/**Specifies the header format of the datepicker inside the DateTimePicker popup. See DatePicker.Header
	* @Default {ej.DatePicker.Header.Min}
	*/
	dayHeaderFormat?: ej.DatePicker.Header|string;

	/**Specifies the drill down level in datepicker inside the DateTimePicker popup. See ej.DatePicker.Level
	*/
	depthLevel?: ej.DatePicker.Level|string;

	/**Enable or disable the animation effect in DateTimePicker.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**When this property is set to false, it disables the DateTimePicker control.
	* @Default {false}
	*/
	enabled?: boolean;

	/**Enables or disables the state maintenance of DateTimePicker.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Sets the DateTimePicker direction as right to left alignment.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**When enableStrictMode true it allows the value outside of the range also but it highlights the textbox with error class, otherwise it internally changed to the correct value.
	* @Default {false}
	*/
	enableStrictMode?: boolean;

	/**Specifies the header format to be displayed in the DatePicker calendar inside the DateTimePicker popup.
	* @Default {MMMM yyyy}
	*/
	headerFormat?: string;

	/**Defines the height of the DateTimePicker textbox.
	* @Default {30}
	*/
	height?: string|number;

	/**Specifies the HTML Attributes of the ejDateTimePicker
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Sets the time interval between the two adjacent time values in the time popup.
	* @Default {30}
	*/
	interval?: number;

	/**Defines the localization culture for DateTimePicker.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the maximum value to the DateTimePicker. Beyond the maximum value an error class is added to the wrapper element when we set true to enableStrictMode.
	* @Default {new Date(12/31/2099 11:59:59 PM)}
	*/
	maxDateTime?: string|Date;

	/**Sets the minimum value to the DateTimePicker. Behind the minimum value an error class is added to the wrapper element.
	* @Default {new Date(1/1/1900 12:00:00 AM)}
	*/
	minDateTime?: string|Date;

	/**Specifies the popup position of DateTimePicker.See below to know available popup positions
	* @Default {ej.DateTimePicker.Bottom}
	*/
	popupPosition?: string | ej.popupPosition;

	/**Indicates that the DateTimePicker value can only be read and canâ€™t change.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**It allows showing days in other months of DatePicker calendar inside the DateTimePicker popup.
	* @Default {true}
	*/
	showOtherMonths?: boolean;

	/**Shows or hides the arrow button from the DateTimePicker textbox. When the button disabled, the DateTimePicker popup opens while focus in the textbox and hides while focus out from the textbox.
	* @Default {true}
	*/
	showPopupButton?: boolean;

	/**Changes the sharped edges into rounded corner for the DateTimePicker textbox and popup.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies the start day of the week in datepicker inside the DateTimePicker popup.
	* @Default {1}
	*/
	startDay?: number;

	/**Specifies the start level view in datepicker inside the DateTimePicker popup. See DatePicker.Level
	* @Default {ej.DatePicker.Level.Month or month}
	*/
	startLevel?: ej.DatePicker.Level|string;

	/**Specifies the number of months to navigate at one click of next and previous button in datepicker inside the DateTimePicker popup.
	* @Default {1}
	*/
	stepMonths?: number;

	/**Defines the time format displayed in the time dropdown inside the DateTimePicker popup.
	* @Default {h:mm tt}
	*/
	timeDisplayFormat?: string;

	/**We can drill down up to time interval on selected date with meridian details.
	* @Default {{ enabled: false, interval: 5, showMeridian: false, autoClose: true }}
	*/
	timeDrillDown?: TimeDrillDown;

	/**Defines the width of the time dropdown inside the DateTimePicker popup.
	* @Default {100}
	*/
	timePopupWidth?: string|number;

	/**Set the jquery validation error message in DateTimePicker.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Set the jquery validation rules in DateTimePicker.
	* @Default {null}
	*/
	validationRules?: any;

	/**Sets the DateTime value to the control.
	*/
	value?: string|Date;

	/**Defines the width of the DateTimePicker textbox.
	* @Default {143}
	*/
	width?: string|number;

	/**Fires when the datetime value changed in the DateTimePicker textbox.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when DateTimePicker popup closes.*/
	close? (e: CloseEventArgs): void;

	/**Fires after DateTimePicker control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the DateTimePicker is destroyed successfully*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when the focus-in happens in the DateTimePicker textbox.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Fires when the focus-out happens in the DateTimePicker textbox.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Fires when DateTimePicker popup opens.*/
	open? (e: OpenEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the current value is valid or not
	*/
	isValidState?: boolean;

	/**returns the modified datetime value
	*/
	value?: string;

	/**returns the previously selected date time value
	*/
	prevDateTime?: string;

	/**returns true if change event triggered by interaction, otherwise returns false
	*/
	isInteraction?: boolean;
}

export interface CloseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the modified datetime value
	*/
	value?: string;

	/**returns the previously selected date time value
	*/
	prevDateTime?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DateTimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DateTimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface FocusInEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the datetime value, which is in text box
	*/
	value?: string;
}

export interface FocusOutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the datetime value, which is in text box
	*/
	value?: string;
}

export interface OpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.DateTimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the modified datetime value
	*/
	value?: string;

	/**returns the previously selected date time value
	*/
	prevDateTime?: string;
}

export interface ButtonText {

	/**Sets the text for the Done button inside the datetime popup.
	*/
	done?: string;

	/**Sets the text for the Now button inside the datetime popup.
	*/
	timeNow?: string;

	/**Sets the header text for the Time dropdown.
	*/
	timeTitle?: string;

	/**Sets the text for the Today button inside the datetime popup.
	*/
	today?: string;
}

export interface TimeDrillDown {

	/**This is the field to show/hide the timeDrillDown in DateTimePicker.
	*/
	enabled?: boolean;

	/**Sets the interval time of minutes on selected date.
	*/
	interval?: number;

	/**Allows the user to show or hide the meridian with time in DateTimePicker.
	*/
	showMeridian?: boolean;

	/**After choosing the time, the popup will close automatically if we set it as true, otherwise we focus out the DateTimePicker or choose timeNow button for closing the popup.
	*/
	autoClose?: boolean;
}
}
enum popupPosition
{
//Opens the DateTimePicker popup below to the DateTimePicker input box
Bottom,
//Opens the DateTimePicker popup above to the DateTimePicker input box 
Top,
}

class Dialog extends ej.Widget {
	static fn: Dialog;
	constructor(element: JQuery, options?: Dialog.Model);
	constructor(element: Element, options?: Dialog.Model);
	model:Dialog.Model;
	defaults:Dialog.Model;

	/** Closes the dialog widget dynamically.
	* @returns {void}
	*/
	close(): void;

	/** Collapses the content area when it is expanded.
	* @returns {void}
	*/
	collapse(): void;

	/** Destroys the Dialog widget.
	* @returns {void}
	*/
	destroy(): void;

	/** Expands the content area when it is collapsed.
	* @returns {void}
	*/
	expand(): void;

	/** Checks whether the Dialog widget is opened or not. This methods returns Boolean value.
	* @returns {void}
	*/
	isOpen(): void;

	/** Maximizes the Dialog widget.
	* @returns {void}
	*/
	maximize(): void;

	/** Minimizes the Dialog widget.
	* @returns {void}
	*/
	minimize(): void;

	/** Opens the Dialog widget.
	* @returns {void}
	*/
	open(): void;

	/** Pins the dialog in its current position.
	* @returns {void}
	*/
	pin(): void;

	/** Restores the dialog.
	* @returns {void}
	*/
	restore(): void;

	/** Unpins the Dialog widget.
	* @returns {void}
	*/
	unpin(): void;

	/** Sets the title for the Dialog widget.
	* @param {string} The title for the dialog widget.
	* @returns {void}
	*/
	setTitle(Title: string): void;

	/** Sets the content for the Dialog widget dynamically.
	* @param {string} The content for the dialog widget. It accepts both string and html string.
	* @returns {void}
	*/
	setContent(content: string): void;

	/** Sets the focus on the Dialog widget.
	* @returns {void}
	*/
	focus(): void;
}
export module Dialog{

export interface Model {

	/**Adds action buttons like close, minimize, pin, maximize in the dialog header.
	*/
	actionButtons?: string[];

	/**Enables or disables draggable.
	*/
	allowDraggable?: boolean;

	/**Enables or disables keyboard interaction.
	*/
	allowKeyboardNavigation?: boolean;

	/**Customizes the Dialog widget animations. The Dialog widget can be animated while opening and closing the dialog. In order to customize animation effects, you need to set â€œenableAnimationâ€ as true. It contains the following sub properties.
	*/
	animation?: any;

	/**The tooltip text for the dialog close button.
	*/
	closeIconTooltip?: string;

	/**Closes the dialog widget on pressing the ESC key when it is set to true.
	*/
	closeOnEscape?: boolean;

	/**The selector for the container element. If the property is set, then dialog will append to the selected element and it is restricted to move only within the specified container element.
	*/
	containment?: string;

	/**The content type to load the dialog content at run time. The possible values are null, ajax, iframe and image. When it is null (default value), the content inside dialog element will be displayed as content and when it is not null, the content will be loaded from the URL specified in the contentUrl property.
	*/
	contentType?: string;

	/**The URL to load the dialog content (such as AJAX, image, and iframe). In order to load content from URL, you need to set contentType as â€˜ajaxâ€™ or â€˜iframeâ€™ or â€˜imageâ€™.
	*/
	contentUrl?: string;

	/**The root class for the Dialog widget to customize the existing theme.
	*/
	cssClass?: string;

	/**Enable or disables animation when the dialog is opened or closed.
	*/
	enableAnimation?: boolean;

	/**Enables or disables the Dialog widget.
	*/
	enabled?: boolean;

	/**Enable or disables modal dialog. The modal dialog acts like a child window that is displayed on top of the main window/screen and disables the main window interaction until it is closed.
	*/
	enableModal?: boolean;

	/**Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true.
	*/
	enablePersistence?: boolean;

	/**Allows the dialog to be resized. The dialog cannot be resized less than the minimum height, width values and greater than the maximum height and width.
	*/
	enableResize?: boolean;

	/**Displays dialog content from right to left when set to true.
	*/
	enableRTL?: boolean;

	/**The CSS class name to display the favicon in the dialog header. In order to display favicon, you need to setÂ showHeaderÂ as true since the favicon will be displayed in the dialog header.
	*/
	faviconCSS?: string;

	/**Sets the height for the dialog widget. It accepts both string and integer values. For example, it can accepts values like â€œautoâ€, â€œ100%â€, â€œ100pxâ€ as string type and â€œ100â€, â€œ500â€ as integer type. The unit of integer type value is â€œpxâ€.
	*/
	height?: string|number;

	/**Enable or disables responsive behavior.
	*/
	isResponsive?: boolean;

	/**Default Value:{:.param}â€œen-USâ€
	*/
	locale?: number;

	/**Sets the maximum height for the dialog widget.
	*/
	maxHeight?: number;

	/**Sets the maximum width for the dialog widget.
	*/
	maxWidth?: number;

	/**Sets the minimum height for the dialog widget.
	*/
	minHeight?: number;

	/**Sets the minimum width for the dialog widget.
	*/
	minWidth?: number;

	/**Displays the Dialog widget at the given X and Y position.
	*/
	position?: any;

	/**Shows or hides the dialog header.
	*/
	showHeader?: boolean;

	/**The Dialog widget can be opened by default i.e. on initialization, when it is set to true.
	*/
	showOnInit?: boolean;

	/**Enables or disables the rounder corner.
	*/
	showRoundedCorner?: boolean;

	/**The selector for the container element. If this property is set, the dialog will be displayed (positioned) based on its container.
	*/
	target?: string;

	/**The title text to be displayed in the dialog header. In order to set title, you need to set showHeader as true since the title will be displayed in the dialog header.
	*/
	title?: string;

	/**Add or configure the tooltip text for actionButtons in the dialog header.
	*/
	tooltip?: any;

	/**Sets the height for the dialog widget. It accepts both string and integer values. For example, it can accepts values like â€œautoâ€, â€œ100%â€, â€œ100pxâ€ as string type and â€œ100â€, â€œ500â€ as integer type. The unit of integer type value is â€œpxâ€.
	*/
	width?: string|number;

	/**Sets the z-index value for the Dialog widget.
	*/
	zIndex?: number;

	/**This event is triggered before the dialog widgets gets open.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**This event is triggered whenever the Ajax request fails to retrieve the dialog content.*/
	ajaxError? (e: AjaxErrorEventArgs): void;

	/**This event is triggered whenever the Ajax request to retrieve the dialog content, gets succeed.*/
	ajaxSuccess? (e: AjaxSuccessEventArgs): void;

	/**This event is triggered before the dialog widgets get closed.*/
	beforeClose? (e: BeforeCloseEventArgs): void;

	/**This event is triggered after the dialog widget is closed.*/
	close? (e: CloseEventArgs): void;

	/**Triggered after the dialog content is loaded in DOM.*/
	contentLoad? (e: ContentLoadEventArgs): void;

	/**Triggered after the dialog is created successfully*/
	create? (e: CreateEventArgs): void;

	/**Triggered after the dialog widget is destroyed successfully*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggered while the dialog is dragged.*/
	drag? (e: DragEventArgs): void;

	/**Triggered when the user starts dragging the dialog.*/
	dragStart? (e: DragStartEventArgs): void;

	/**Triggered when the user stops dragging the dialog.*/
	dragStop? (e: DragStopEventArgs): void;

	/**Triggered after the dialog is opened.*/
	open? (e: OpenEventArgs): void;

	/**Triggered while the dialog is resized.*/
	resize? (e: ResizeEventArgs): void;

	/**Triggered when the user starts resizing the dialog.*/
	resizeStart? (e: ResizeStartEventArgs): void;

	/**Triggered when the user stops resizing the dialog.*/
	resizeStop? (e: ResizeStopEventArgs): void;

	/**Triggered when the dialog content is expanded.*/
	expand? (e: ExpandEventArgs): void;

	/**Triggered when the dialog content is collapsed.*/
	collapse? (e: CollapseEventArgs): void;
}

export interface BeforeOpenEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event
	*/
	type?: string;
}

export interface AjaxErrorEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**URL of the content.
	*/
	url?: string;

	/**Error page content.
	*/
	responseText?: string;

	/**Error code.
	*/
	status?: number;

	/**The corresponding error description.
	*/
	statusText?: string;
}

export interface AjaxSuccessEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**URL of the content.
	*/
	url?: string;

	/**Response content.
	*/
	data?: string;
}

export interface BeforeCloseEventArgs {

	/**Current event object.
	*/
	event?: any;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface CloseEventArgs {

	/**Current event object.
	*/
	event?: any;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event
	*/
	type?: string;
}

export interface ContentLoadEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**URL of the content.
	*/
	url?: string;

	/**Content type
	*/
	contentType?: any;
}

export interface CreateEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface DragEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface DragStartEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface DragStopEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface OpenEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface ResizeEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface ResizeStartEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface ResizeStopEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event
	*/
	type?: string;

	/**Current event object.
	*/
	event?: any;
}

export interface ExpandEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}

export interface CollapseEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the dialog model object.
	*/
	model?: ej.Dialog.Model;

	/**Name of the event.
	*/
	type?: string;
}
}

class DropDownList extends ej.Widget {
	static fn: DropDownList;
	constructor(element: JQuery, options?: DropDownList.Model);
	constructor(element: Element, options?: DropDownList.Model);
	model:DropDownList.Model;
	defaults:DropDownList.Model;

	/** Adding a single item or an array of items into the DropDownList allows you to specify all the field attributes such as value, template, image URL, and html attributes for those items.
	* @param {any|Array<any>}  this parameter should have field attributes with respect to mapped field attributes and it's corresponding values to fields
	* @returns {void}
	*/
	addItem(data: any|Array<any>): void;

	/** This method is used to select all the items in the DropDownList.
	* @returns {void}
	*/
	checkAll(): void;

	/** Clears the text in the DropDownList textbox.
	* @returns {void}
	*/
	clearText(): void;

	/** Destroys the DropDownList widget.
	* @returns {void}
	*/
	destroy(): void;

	/** This property is used to disable the DropDownList widget.
	* @returns {void}
	*/
	disable(): void;

	/** This property disables the set of items in the DropDownList.
	* @param {string|number|Array<any>}  disable the given index list items
	* @returns {void}
	*/
	disableItemsByIndices(index: string|number|Array<any>): void;

	/** This property enables the DropDownList control.
	* @returns {void}
	*/
	enable(): void;

	/** Enables an Item or set of Items that are disabled in the DropDownList
	* @param {string|number|Array<any>}  enable the given index list items if it's disabled
	* @returns {void}
	*/
	enableItemsByIndices(index: string|number|Array<any>): void;

	/** This method retrieves the items using given value.
	* @param {string|number|any}  Return the whole object of data based on given value
	* @returns {any}
	*/
	getItemDataByValue(value: string|number|any): any;

	/** This method is used to retrieve the items that are bound with the DropDownList.
	* @returns {any}
	*/
	getListData(): any;

	/** This method is used to get the selected items in the DropDownList.
	* @returns {HTMLElement}
	*/
	getSelectedItem(): HTMLElement;

	/** This method is used to retrieve the items value that are selected in the DropDownList.
	* @returns {string}
	*/
	getSelectedValue(): string;

	/** This method hides the suggestion popup in the DropDownList.
	* @returns {void}
	*/
	hidePopup(): void;

	/** This method is used to select the list of items in the DropDownList through the Index of the items.
	* @param {string|number|Array<any>}  select the given index list items
	* @returns {void}
	*/
	selectItemsByIndices(index: string|number|Array<any>): void;

	/** This method is used to select an item in the DropDownList by using the given text value.
	* @param {string|number|Array<any>}  select the list items relates to given text
	* @returns {void}
	*/
	selectItemByText(index: string|number|Array<any>): void;

	/** This method is used to select an item in the DropDownList by using the given value.
	* @param {string|number|Array<any>}  select the list items relates to given values
	* @returns {void}
	*/
	selectItemByValue(index: string|number|Array<any>): void;

	/** This method shows the DropDownList control with the suggestion popup.
	* @returns {void}
	*/
	showPopup(): void;

	/** This method is used to unselect all the items in the DropDownList.
	* @returns {void}
	*/
	unCheckAll(): void;

	/** This method is used to unselect the list of items in the DropDownList through Index of the items.
	* @param {string|number|Array<any>}  unselect the given index list items
	* @returns {void}
	*/
	unselectItemsByIndices(index: string|number|Array<any>): void;

	/** This method is used to unselect an item in the DropDownList by using the given text value.
	* @param {string|number|Array<any>}  unselect the list items realtes to given text
	* @returns {void}
	*/
	unselectItemByText(index: string|number|Array<any>): void;

	/** This method is used to unselect an item in the DropDownList by using the given value.
	* @param {string|number|Array<any>}  unselect the list items realtes to given values
	* @returns {void}
	*/
	unselectItemByValue(index: string|number|Array<any>): void;
}
export module DropDownList{

export interface Model {

	/**The cascading DropDownLists is a series of two or more DropDownLists in which each DropDownList is filtered according to the previous DropDownListâ€™s value.
	* @Default {null}
	*/
	cascadeTo?: string;

	/**Sets the case sensitivity of the search operation. It supports both enableFilterSearch and enableIncrementalSearch property.
	* @Default {false}
	*/
	caseSensitiveSearch?: boolean;

	/**Dropdown widget's style and appearance can be controlled based on 13 different default built-in themes.You can customize the appearance of the dropdown by using the cssClass property. You need to specify a class name in the cssClass property and the same class name is used before the class definitions wherever the custom styles are applied.
	*/
	cssClass?: string;

	/**This property is used to serve data from the data services based on the query provided. To bind the data to the dropdown widget, the dataSource property is assigned with the instance of the ej.DataManager.
	* @Default {null}
	*/
	dataSource?: any;

	/**Sets the separator when the multiSelectMode with delimiter option or checkbox is enabled with the dropdown. When you enter the delimiter value, the texts after the delimiter are considered as a separate word or query. The delimiter string is a single character and must be a symbol. Mostly, the delimiter symbol is used as comma (,) or semi-colon (;) or any other special character.
	* @Default {','}
	*/
	delimiterChar?: string;

	/**The enabled Animation property uses the easeOutQuad animation to SlideDown and SlideUp the Popup list in 200 and 100 milliseconds, respectively.
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**This property is used to indicate whether the DropDownList control responds to the user interaction or not. By default, the control is in the enabled mode and you can disable it by setting it to false.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies to perform incremental search for the selection of items from the DropDownList with the help of this property. This helps in selecting the item by using the typed character.
	* @Default {true}
	*/
	enableIncrementalSearch?: boolean;

	/**This property selects the item in the DropDownList when the item is entered in the Search textbox.
	* @Default {false}
	*/
	enableFilterSearch?: boolean;

	/**Saves the current model value to the browser cookies for state maintenance. While refreshing the DropDownList control page, it retains the model value and it is applied from the browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**This enables the resize handler to resize the popup to any size.
	* @Default {false}
	*/
	enablePopupResize?: boolean;

	/**Sets the DropDownList textbox direction from right to left align.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**This property is used to sort the Items in the DropDownList. By default, it sorts the items in an ascending order.
	* @Default {false}
	*/
	enableSorting?: boolean;

	/**Specifies the mapping fields for the data items of the DropDownList.
	* @Default {null}
	*/
	fields?: Fields;

	/**When the enableFilterSearch property value is set to true, the values in the DropDownList shows the items starting with or containing the key word/letter typed in the Search textbox.
	* @Default {ej.FilterType.Contains}
	*/
	filterType?: ej.FilterType|string;

	/**Used to create visualized header for dropdown items
	* @Default {null}
	*/
	headerTemplate?: string;

	/**Defines the height of the DropDownList textbox.
	* @Default {null}
	*/
	height?: string|number;

	/**It sets the given HTML attributes for the DropDownList control such as ID, name, disabled, etc.
	* @Default {null}
	*/
	htmlAttributes?: any;

	/**Data can be fetched in the DropDownList control by using the DataSource, specifying the number of items.
	* @Default {5}
	*/
	itemsCount?: number;

	/**Defines the maximum height of the suggestion box. This property restricts the maximum height of the popup when resize is enabled.
	* @Default {null}
	*/
	maxPopupHeight?: string|number;

	/**Defines the minimum height of the suggestion box. This property restricts the minimum height of the popup when resize is enabled.
	* @Default {null}
	*/
	minPopupHeight?: string|number;

	/**Defines the maximum width of the suggestion box. This property restricts the maximum width of the popup when resize is enabled.
	* @Default {null}
	*/
	maxPopupWidth?: string|number;

	/**Defines the minimum height of the suggestion box. This property restricts the minimum height of the popup when resize is enabled.
	* @Default {0}
	*/
	minPopupWidth?: string|number;

	/**With the help of this property, you can make a single or multi selection with the DropDownList and display the text in two modes, delimiter and visual mode. In delimiter mode, you can separate the items by using the delimiter character such as comma (,) or semi-colon (;) or any other special character. In the visual mode, the items are showcased like boxes with close icon in the textbox.
	* @Default {ej.MultiSelectMode.None}
	*/
	multiSelectMode?: ej.MultiSelectMode|string;

	/**Defines the height of the suggestion popup box in the DropDownList control.
	* @Default {152px}
	*/
	popupHeight?: string|number;

	/**Defines the width of the suggestion popup box in the DropDownList control.
	* @Default {auto}
	*/
	popupWidth?: string|number;

	/**Specifies the query to retrieve the data from the DataSource.
	* @Default {null}
	*/
	query?: any;

	/**Specifies that the DropDownList textbox values should be read-only.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Specifies an item to be selected in the DropDownList.
	* @Default {null}
	*/
	selectedIndex?: number;

	/**Specifies the selectedItems for the DropDownList.
	* @Default {[]}
	*/
	selectedIndices?: Array<any>;

	/**Selects multiple items in the DropDownList with the help of the checkbox control. To achieve this, enable the showCheckbox option to true.
	* @Default {false}
	*/
	showCheckbox?: boolean;

	/**DropDownList control is displayed with the popup seen.
	* @Default {false}
	*/
	showPopupOnLoad?: boolean;

	/**DropDownList textbox displayed with the rounded corner style.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**When the enableSorting property value is set to true, this property helps to sort the items either in ascending or descending order
	* @Default {ej.sortOrder.Ascending}
	*/
	sortOrder?: ej.SortOrder|string;

	/**Specifies the targetID for the DropDownListâ€™s items.
	* @Default {null}
	*/
	targetID?: string;

	/**By default, you can add any text or image to the DropDownList item. To customize the item layout or to create your own visualized elements, you can use this template support.
	* @Default {null}
	*/
	template?: string;

	/**Defines the text value that is displayed in the DropDownList textbox.
	* @Default {null}
	*/
	text?: string;

	/**Sets the jQuery validation error message in the DropDownList
	* @Default {null}
	*/
	validationMessage?: any;

	/**Sets the jquery validation rules in the Dropdownlist.
	* @Default {null}
	*/
	validationRules?: any;

	/**Specifies the value (text content) for the DropDownList control.
	* @Default {null}
	*/
	value?: string;

	/**Specifies a short hint that describes the expected value of the DropDownList control.
	* @Default {null}
	*/
	watermarkText?: string;

	/**Defines the width of the DropDownList textbox.
	* @Default {null}
	*/
	width?: string|number;

	/**The Virtual Scrolling feature is used to display a large amount of records in the DropDownList, that is, when scrolling, an Ajax request is sent to fetch some amount of data from the server dynamically. To achieve this scenario with DropDownList, set the allowVirtualScrolling to true. You can set the itemsCount property that represents the number of items to be fetched from the server on every Ajax request.
	* @Default {normal}
	*/
	virtualScrollMode?: ej.VirtualScrollMode|string;

	/**Fires the action before the XHR request.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Fires the action when the list of items is bound to the DropDownList by xhr post calling*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Fires the action when the xhr post calling failed on remote data binding with the DropDownList control.*/
	actionFailure? (e: ActionFailureEventArgs): void;

	/**Fires the action when the xhr post calling succeed on remote data binding with the DropDownList control*/
	actionSuccess? (e: ActionSuccessEventArgs): void;

	/**Fires the action before the popup is ready to hide.*/
	beforePopupHide? (e: BeforePopupHideEventArgs): void;

	/**Fires the action before the popup is ready to be displayed.*/
	beforePopupShown? (e: BeforePopupShownEventArgs): void;

	/**Fires when the cascading happens between two DropDownList exactly after the value changes in the first dropdown and before filtering in the second Dropdown.*/
	cascade? (e: CascadeEventArgs): void;

	/**Fires the action when the DropDownList controlâ€™s value is changed.*/
	change? (e: ChangeEventArgs): void;

	/**Fires the action when the list item checkbox value is changed.*/
	checkChange? (e: CheckChangeEventArgs): void;

	/**Fires the action once the DropDownList is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires the action when the list items is bound to the DropDownList.*/
	dataBound? (e: DataBoundEventArgs): void;

	/**Fires the action when the DropDownList is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires the action, once the popup is closed*/
	popupHide? (e: PopupHideEventArgs): void;

	/**Fires the action, when the popup is resized.*/
	popupResize? (e: PopupResizeEventArgs): void;

	/**Fires the action, once the popup is opened.*/
	popupShown? (e: PopupShownEventArgs): void;

	/**Fires the action, when resizing a popup starts.*/
	popupResizeStart? (e: PopupResizeStartEventArgs): void;

	/**Fires the action, when the popup resizing is stopped.*/
	popupResizeStop? (e: PopupResizeStopEventArgs): void;

	/**Fires the action before filtering the list items that starts in the DropDownList when the enableFilterSearch is enabled.*/
	search? (e: SearchEventArgs): void;

	/**Fires the action, when the list of item is selected.*/
	select? (e: SelectEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ActionCompleteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns number of times trying to fetch the data
	*/
	count?: number;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the query for data retrieval 
	*/
	query?: any;

	/**Returns the query for data retrieval from the Database 
	*/
	request?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the number of items fetched from remote data
	*/
	result?: Array<any>;

	/**Returns the requested data
	*/
	xhr?: any;
}

export interface ActionFailureEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the error message
	*/
	error?: any;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the query for data retrieval 
	*/
	query?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ActionSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns number of times trying to fetch the data
	*/
	count?: number;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the query for data retrieval 
	*/
	query?: any;

	/**Returns the query for data retrieval from the Database 
	*/
	request?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the number of items fetched from remote data
	*/
	result?: Array<any>;

	/**Returns the requested data
	*/
	xhr?: any;
}

export interface BeforePopupHideEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the selected text
	*/
	text?: string;

	/**returns the selected value
	*/
	value?: string;
}

export interface BeforePopupShownEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the selected text
	*/
	text?: string;

	/**returns the selected value
	*/
	value?: string;
}

export interface CascadeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the cascading dropdown model.
	*/
	cascadeModel?: any;

	/**returns the current selected value in first dropdown.
	*/
	cascadeValue?: string;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the default filter action for second dropdown data should happen or not.
	*/
	requiresDefaultFilter?: boolean;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the selected item with checkbox checked or not.
	*/
	isChecked?: boolean;

	/**Returns the selected item ID.
	*/
	itemId?: string;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the selected item text.
	*/
	selectedText?: string;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the selected text.
	*/
	text?: string;

	/**Returns the selected value.
	*/
	value?: string;
}

export interface CheckChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the selected item with checkbox checked or not.
	*/
	isChecked?: boolean;

	/**Returns the selected item ID.
	*/
	itemId?: string;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the selected item text.
	*/
	selectedText?: string;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the selected text.
	*/
	text?: string;

	/**Returns the selected value.
	*/
	value?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DataBoundEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the data that is bound to DropDownList
	*/
	data?: any;
}

export interface DestroyEventArgs {

	/**its value is set as true,if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface PopupHideEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the selected text
	*/
	text?: string;

	/**returns the selected value
	*/
	value?: string;
}

export interface PopupResizeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the data from the resizable plugin.
	*/
	event?: any;
}

export interface PopupShownEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the selected text
	*/
	text?: string;

	/**returns the selected value
	*/
	value?: string;
}

export interface PopupResizeStartEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the data from the resizable plugin.
	*/
	event?: any;
}

export interface PopupResizeStopEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the DropDownList model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the data from the resizable plugin.
	*/
	event?: any;
}

export interface SearchEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the data bound to the DropDownList.
	*/
	items?: any;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the selected item text.
	*/
	selectedText?: string;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the search string typed in search box.
	*/
	searchString?: string;
}

export interface SelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the selected item with checkbox checked or not.
	*/
	isChecked?: boolean;

	/**Returns the selected item ID.
	*/
	itemId?: string;

	/**returns the DropDownList model
	*/
	model?: any;

	/**Returns the selected item text.
	*/
	selectedText?: string;

	/**returns the name of the event
	*/
	type?: string;

	/**Returns the selected text.
	*/
	text?: string;

	/**Returns the selected value.
	*/
	value?: string;
}

export interface Fields {

	/**Used to group the items.
	*/
	groupBy?: string;

	/**Defines the HTML attributes such as ID, class, and styles for the item.
	*/
	htmlAttributes?: any;

	/**Defines the ID for the tag.
	*/
	id?: string;

	/**Defines the image attributes such as height, width, styles, and so on.
	*/
	imageAttributes?: string;

	/**Defines the imageURL for the image location.
	*/
	imageUrl?: string;

	/**Defines the tag value to be selected initially.
	*/
	selected?: boolean;

	/**Defines the sprite css for the image tag.
	*/
	spriteCssClass?: string;

	/**Defines the table name for tag value or display text while rendering remote data.
	*/
	tableName?: string;

	/**Defines the text content for the tag.
	*/
	text?: string;

	/**Defines the tag value.
	*/
	value?: string;
}
}
enum FilterType
{
//filter the data wherever contains search key 
Contains,
//filter the data based on search key present at start position
StartsWith,
}
enum MultiSelectMode
{
// can select only single item in DropDownList 
None,
//can select multiple items and it's seperated by delimiterChar
Delimiter,
// can select multiple items and it's show's like visual box in textbox
VisualMode,
}
enum SortOrder
{
// Sort the data in ascending order
Ascending,
//Sort the data in descending order
Descending,
}
enum VirtualScrollMode
{
// The data is loaded only to the corresponding page (display items). When scrolling some other position, it enables the load on demand with the DropDownList.
Normal,
//The data items are loaded from the remote when scroll handle reaches the end of the scrollbar like infinity scrolling.
Continuous,
}

class Editor extends ej.Widget {
	static fn: Editor;
	constructor(element: JQuery, options?: Editor.Model);
	constructor(element: Element, options?: Editor.Model);
	model:Editor.Model;
	defaults:Editor.Model;

	/** destroy the editor widgets all events are unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To disable the corresponding Editors
	* @returns {void}
	*/
	disable(): void;

	/** To enable the corresponding Editors
	* @returns {void}
	*/
	enable(): void;

	/** To get value from corresponding Editors
	* @returns {number}
	*/
	getValue(): number;
}

 class NumericTextbox extends Editor{
}

 class CurrencyTextbox extends Editor{
}

 class PercentageTextbox extends Editor{
}
export module Editor{

export interface Model {

	/**Sets the root CSS class for Accordion theme, which is used customize.
	*/
	cssClass?: string;

	/**DecimalPlaces declares the number of digits to be displayed right side of the value.
	* @Default {0}
	*/
	decimalPlaces?: number;

	/**Specify the editor control state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specify the enablePersistence to editor to save current model value to browser cookies for state maintains
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specify the Right to Left Direction to editor.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Strict mode option to restrict entering values defined outside the range in the editor.
	* @Default {false}
	*/
	enableStrictMode?: boolean;

	/**It provides the options to get the customized character to separate the digits. If not set, the separator defined by the current culture.
	* @Default {null}
	*/
	groupSeparator?: string;

	/**Specifies the height of the editor.
	* @Default {30}
	*/
	height?: number|string;

	/**It allows to define the characteristics of the Editors control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**The Editor value increment or decrement based an increment step value.
	* @Default {1}
	*/
	incrementStep?: number;

	/**Specifies the Localization info used by the editor.
	* @Default {en-US}
	*/
	locale?: string;

	/**Specifies the maximum value of the editor.
	* @Default {Number.MAX_VALUE}
	*/
	maxValue?: number;

	/**Specifies the minimum value of the editor.
	* @Default {-(Number.MAX_VALUE) and 0 for Currency Textbox.}
	*/
	minValue?: number;

	/**Specifies the name of the editor.
	* @Default {Sets id as name if it is null.}
	*/
	name?: string;

	/**Toggles the readonly state of the editor. When the Editor is readonly it doesn't allow user interactions.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Specify the rounded corner to editor
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies whether the up and down spin buttons should be displayed in editor.
	* @Default {true}
	*/
	showSpinButton?: boolean;

	/**Enables decimal separator position validation on type .
	* @Default {false}
	*/
	validateOnType?: boolean;

	/**Set the jQuery validation error message in editor.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Set the jQuery validation rules to the editor.
	* @Default {null}
	*/
	validationRules?: any;

	/**Specifies the value of the editor.
	* @Default {null}
	*/
	value?: number|string;

	/**Specify the watermark text to editor.
	*/
	watermarkText?: string;

	/**Specifies the width of the editor.
	* @Default {143}
	*/
	width?: number|string;

	/**Fires after Editor control value is changed.*/
	change? (e: ChangeEventArgs): void;

	/**Fires after Editor control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the Editor is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires after Editor control is focused.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Fires after Editor control is loss the focus.*/
	focusOut? (e: FocusOutEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the corresponding editor model.
	*/
	  model ?: ej.Editor.Model;

	/**returns the name of the event.
	*/
	  type?: string;

	/**returns the corresponding editor control value.
	*/
	  value ?: number;

	/**returns true when the value changed by user interaction otherwise returns false
	*/
	  isInteraction ?: boolean;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the editor model
	*/
	  model ?: ej.Editor.Model;

	/**returns the name of the event
	*/
	  type ?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the editor model
	*/
	  model ?: ej.Editor.Model;

	/**returns the name of the event
	*/
	  type ?: string;
}

export interface FocusInEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel?: boolean;

	/**returns the corresponding editor model.
	*/
	 model?: ej.Editor.Model;

	/**returns the name of the event.
	*/
	 type?: string;

	/**returns the corresponding editor control value.
	*/
	 value?: number;
}

export interface FocusOutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel?: boolean;

	/**returns the corresponding editor model.
	*/
	 model?: ej.Editor.Model;

	/**returns the name of the event.
	*/
	 type?: string;

	/**returns the corresponding editor control value.
	*/
	 value?: number;
}
}

class ListView extends ej.Widget {
	static fn: ListView;
	constructor(element: JQuery, options?: ListView.Model);
	constructor(element: Element, options?: ListView.Model);
	model:ListView.Model;
	defaults:ListView.Model;

	/** To add item in the given index.
	* @param {string} Specifies the item to be added in ListView
	* @param {number} Specifies the index where item to be added
	* @returns {void}
	*/
	addItem(item: string, index: number): void;

	/** To check all the items.
	* @returns {void}
	*/
	checkAllItem(): void;

	/** To check item in the given index.
	* @param {number} Specifies the index of the item to be checked
	* @returns {void}
	*/
	checkItem(index: number): void;

	/** To clear all the list item in the control before updating with new datasource.
	* @returns {void}
	*/
	clear(): void;

	/** To make the item in the given index to be default state.
	* @param {number} Specifies the index to make the item to be in default state.
	* @returns {void}
	*/
	deActive(index: number): void;

	/** To disable item in the given index.
	* @param {number} Specifies the index value to be disabled.
	* @returns {void}
	*/
	disableItem(index: number): void;

	/** To enable item in the given index.
	* @param {number} Specifies the index value to be enabled.
	* @returns {void}
	*/
	enableItem(index: number): void;

	/** To get the active item.
	* @returns {HTMLElement}
	*/
	getActiveItem(): HTMLElement;

	/** To get the text of the active item.
	* @returns {string}
	*/
	getActiveItemText(): string;

	/** To get all the checked items.
	* @returns {Array<any>}
	*/
	getCheckedItems(): Array<any>;

	/** To get the text of all the checked items.
	* @returns {Array<any>}
	*/
	getCheckedItemsText(): Array<any>;

	/** To get the total item count.
	* @returns {number}
	*/
	getItemsCount(): number;

	/** To get the text of the item in the given index.
	* @param {string|number} Specifies the index value to get the textvalue.
	* @returns {string}
	*/
	getItemText(index: string|number): string;

	/** To check whether the item in the given index has child item.
	* @param {number} Specifies the index value to check the item has child or not.
	* @returns {boolean}
	*/
	hasChild(index: number): boolean;

	/** To hide the list.
	* @returns {void}
	*/
	hide(): void;

	/** To hide item in the given index.
	* @param {number} Specifies the index value to hide the item.
	* @returns {void}
	*/
	hideItem(index: number): void;

	/** To check whether item in the given index is checked.
	* @returns {boolean}
	*/
	isChecked(): boolean;

	/** To load the ajax content while selecting the item.
	* @param {string} Specifies the item to load the ajax content.
	* @returns {void}
	*/
	loadAjaxContent(item: string): void;

	/** To remove the check mark either for specific item in the given index or for all items.
	* @param {number} Specifies the index value to remove the checkbox.
	* @returns {void}
	*/
	removeCheckMark(index: number): void;

	/** To remove item in the given index.
	* @param {number} Specifies the index value to remove the item.
	* @returns {void}
	*/
	removeItem(index: number): void;

	/** To select item in the given index.
	* @param {number} Specifies the index value to select the item.
	* @returns {void}
	*/
	selectItem(index: number): void;

	/** To make the item in the given index to be active state.
	* @param {number} Specifies the index value to make the item in active state.
	* @returns {void}
	*/
	setActive(index: number): void;

	/** To show the list.
	* @returns {void}
	*/
	show(): void;

	/** To show item in the given index.
	* @param {number} Specifies the index value to show the hided item.
	* @returns {void}
	*/
	showItem(index: number): void;

	/** To uncheck all the items.
	* @returns {void}
	*/
	unCheckAllItem(): void;

	/** To uncheck item in the given index.
	* @param {number} Specifies the index value to uncheck the item.
	* @returns {void}
	*/
	unCheckItem(index: number): void;
}
export module ListView{

export interface Model {

	/**Sets the root class for ListView theme. This cssClass API helps to use custom skinning option for ListView control. By defining the root class using this API, we need to include this root class in CSS.
	*/
	cssClass?: string;

	/**Contains the list of data for generating the ListView items.
	* @Default {[]}
	*/
	dataSource?: Array<any>;

	/**Specifies whether to load ajax content while selecting item.
	* @Default {false}
	*/
	enableAjax?: boolean;

	/**Specifies whether to enable caching the content.
	* @Default {false}
	*/
	enableCache?: boolean;

	/**Specifies whether to enable check mark for the item.
	* @Default {false}
	*/
	enableCheckMark?: boolean;

	/**Specifies whether to enable the filtering feature to filter the item.
	* @Default {false}
	*/
	enableFiltering?: boolean;

	/**Specifies whether to group the list item.
	* @Default {false}
	*/
	enableGroupList?: boolean;

	/**Specifies to maintain the current model value to browser cookies for state maintenance. While refresh the page, the model value will get apply to the control from browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specifies the field settings to map the datasource.
	*/
	fieldSettings?: any;

	/**Specifies the text of the back button in the header.
	* @Default {null}
	*/
	headerBackButtonText?: string;

	/**Specifies the title of the header.
	* @Default {Title}
	*/
	headerTitle?: string;

	/**Specifies the height.
	* @Default {null}
	*/
	height?: number;

	/**Specifies whether to retain the selection of the item.
	* @Default {false}
	*/
	persistSelection?: boolean;

	/**Specifies whether to prevent the selection of the item.
	* @Default {false}
	*/
	preventSelection?: boolean;

	/**Specifies the query to execute with the datasource.
	* @Default {null}
	*/
	query?: any;

	/**Specifies whether need to render the control with the template contents.
	* @Default {false}
	*/
	renderTemplate?: boolean;

	/**Specifies the index of item which need to be in selected state initially while loading.
	* @Default {0}
	*/
	selectedItemIndex?: number;

	/**Specifies whether to show the header.
	* @Default {true}
	*/
	showHeader?: boolean;

	/**Specifies ID of the element contains template contents.
	* @Default {false}
	*/
	templateId?: boolean;

	/**Specifies the width.
	* @Default {null}
	*/
	width?: number;

	/**Event triggers before the ajax request happens.*/
	ajaxBeforeLoad? (e: AjaxBeforeLoadEventArgs): void;

	/**Event triggers after the ajax content loaded completely.*/
	ajaxComplete? (e: AjaxCompleteEventArgs): void;

	/**Event triggers when the ajax request failed.*/
	ajaxError? (e: AjaxErrorEventArgs): void;

	/**Event triggers after the ajax content loaded successfully.*/
	ajaxSuccess? (e: AjaxSuccessEventArgs): void;

	/**Event triggers before the items loaded.*/
	load? (e: LoadEventArgs): void;

	/**Event triggers after the items loaded.*/
	loadComplete? (e: LoadCompleteEventArgs): void;

	/**Event triggers when mouse down happens on the item.*/
	mouseDown? (e: MouseDownEventArgs): void;

	/**Event triggers when mouse up happens on the item.*/
	mouseUP? (e: MouseUPEventArgs): void;
}

export interface AjaxBeforeLoadEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;

	/**returns the ajax settings.
	*/
	ajaxData?: any;
}

export interface AjaxCompleteEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;
}

export interface AjaxErrorEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;

	/**returns the error thrown in the ajax post.
	*/
	errorThrown?: any;

	/**returns the status.
	*/
	textStatus?: any;

	/**returns the current list item.
	*/
	item?: any;

	/**returns the current item text.
	*/
	text?: string;

	/**returns the current item index.
	*/
	index?: number;
}

export interface AjaxSuccessEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;

	/**returns the ajax current content.
	*/
	content?: string;

	/**returns the current list item.
	*/
	item?: any;

	/**returns the current item text.
	*/
	text?: string;

	/**returns the current item index.
	*/
	index?: number;

	/**returns the current url of the ajax post.
	*/
	url?: string;
}

export interface LoadEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;
}

export interface LoadCompleteEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;
}

export interface MouseDownEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;

	/**If the child element exist return true; otherwise, false.
	*/
	hasChild?: boolean;

	/**returns the current list item.
	*/
	item?: string;

	/**returns the current text of item.
	*/
	text?: string;

	/**returns the current Index of the item.
	*/
	index?: number;

	/**If checked return true; otherwise, false.
	*/
	isChecked?: boolean;

	/**returns the list of checked items.
	*/
	checkedItems?: number;

	/**returns the current checked item text.
	*/
	checkedItemsText?: string;
}

export interface MouseUPEventArgs {

	/**returns true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the model value of the control.
	*/
	model?: any;

	/**If the child element exist return true; otherwise, false.
	*/
	hasChild?: boolean;

	/**returns the current list item.
	*/
	item?: string;

	/**returns the current text of item.
	*/
	text?: string;

	/**returns the current Index of the item.
	*/
	index?: number;

	/**If checked return true; otherwise, false.
	*/
	isChecked?: boolean;

	/**returns the list of checked items.
	*/
	checkedItems?: number;

	/**returns the current checked item text.
	*/
	checkedItemsText?: string;
}
}

class MaskEdit extends ej.Widget {
	static fn: MaskEdit;
	constructor(element: JQuery, options?: MaskEdit.Model);
	constructor(element: Element, options?: MaskEdit.Model);
	model:MaskEdit.Model;
	defaults:MaskEdit.Model;

	/** To clear the text in mask edit textbox control.
	* @returns {void}
	*/
	clear(): void;

	/** To disable the mask edit textbox control.
	* @returns {void}
	*/
	disable(): void;

	/** To enable the mask edit textbox control.
	* @returns {void}
	*/
	enable(): void;

	/** To obtained the pure value of the text value, removes all the symbols in mask edit textbox control.
	* @returns {string}
	*/
	get_StrippedValue(): string;

	/** To obtained the textbox value as such that, Just replace all '_' to ' '(space) in mask edit textbox control.
	* @returns {string}
	*/
	get_UnstrippedValue(): string;
}
export module MaskEdit{

export interface Model {

	/**Specify the cssClass to achieve custom theme.
	* @Default {null}
	*/
	cssClass?: string;

	/**Specify the custom character allowed to entered in mask edit textbox control.
	* @Default {null}
	*/
	customCharacter?: string;

	/**Specify the state of the mask edit textbox control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specify the enablePersistence to mask edit textbox to save current model value to browser cookies for state maintains.
	*/
	enablePersistence?: boolean;

	/**Specifies the height for the mask edit textbox control.
	* @Default {28 px}
	*/
	height?: string;

	/**Specifies whether hide the prompt characters with spaces on blur. Prompt chars will be shown again on focus the textbox.
	* @Default {false}
	*/
	hidePromptOnLeave?: boolean;

	/**Specifies the list of html attributes to be added to mask edit textbox.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specify the inputMode for mask edit textbox control. See InputMode
	* @Default {ej.InputMode.Text}
	*/
	inputMode?: ej.InputMode|string;

	/**Specifies the input mask.
	* @Default {null}
	*/
	maskFormat?: string;

	/**Specifies the name attribute value for the mask edit textbox.
	* @Default {null}
	*/
	name?: string;

	/**Toggles the readonly state of the mask edit textbox. When the mask edit textbox is readonly, it doesn't allow your input.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Specifies whether the error will show until correct value entered in the mask edit textbox control.
	* @Default {false}
	*/
	showError?: boolean;

	/**MaskEdit input is displayed in rounded corner style when this property is set to true.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specify the text alignment for mask edit textbox control.See TextAlign
	* @Default {left}
	*/
	textAlign?: ej.TextAlign|string;

	/**Sets the jQuery validation error message in mask edit. This property works when the widget is present inside the form. Include jquery.validate.min.js plugin additionally.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Sets the jQuery validation rules to the MaskEdit. This property works when the widget is present inside the form. Include jquery.validate.min.js plugin additionally.
	* @Default {null}
	*/
	validationRules?: any;

	/**Specifies the value for the mask edit textbox control.
	* @Default {null}
	*/
	value?: string;

	/**Specifies the water mark text to be displayed in input text.
	* @Default {null}
	*/
	watermarkText?: string;

	/**Specifies the width for the mask edit textbox control.
	* @Default {143pixel}
	*/
	width?: string;

	/**Fires when value changed in mask edit textbox control.*/
	change? (e: ChangeEventArgs): void;

	/**Fires after MaskEdit control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the MaskEdit is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when focused in mask edit textbox control.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Fires when focused out in mask edit textbox control.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Fires when keydown in mask edit textbox control.*/
	keydown? (e: KeydownEventArgs): void;

	/**Fires when key press in mask edit textbox control.*/
	keyPress? (e: KeyPressEventArgs): void;

	/**Fires when keyup in mask edit textbox control.*/
	keyup? (e: KeyupEventArgs): void;

	/**Fires when mouse out in mask edit textbox control.*/
	mouseout? (e: MouseoutEventArgs): void;

	/**Fires when mouse over in mask edit textbox control.*/
	mouseover? (e: MouseoverEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the MaskEdit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the MaskEdit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface FocusInEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface FocusOutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface KeydownEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface KeyPressEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface KeyupEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface MouseoutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}

export interface MouseoverEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the mask edit model
	*/
	model?: ej.MaskEdit.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mask edit value
	*/
	value?: number;

	/**returns unstripped value in mask edit textbox control.
	*/
	unmaskedValue?: string;
}
}
enum InputMode
{
//string
Password,
//string
Text,
}
enum TextAlign
{
//string
Center,
//string
Justify,
//string
Left,
//string
Right,
}

class Menu extends ej.Widget {
	static fn: Menu;
	constructor(element: JQuery, options?: Menu.Model);
	constructor(element: Element, options?: Menu.Model);
	model:Menu.Model;
	defaults:Menu.Model;

	/** Disables the Menu control.
	* @returns {void}
	*/
	disable(): void;

	/** Specifies the Menu Item to be disabled by using the Menu Item Text.
	* @param {string} Specifies the Menu Item Text to be disabled.
	* @returns {void}
	*/
	disableItem(itemtext: string): void;

	/** Specifies the Menu Item to be disabled by using the Menu Item Id.
	* @param {string|number} Specifies the Menu Item id to be disabled
	* @returns {void}
	*/
	disableItembyID(itemid: string|number): void;

	/** Enables the Menu control.
	* @returns {void}
	*/
	enable(): void;

	/** Specifies the Menu Item to be enabled by using the Menu Item Text.
	* @param {string} Specifies the Menu Item Text to be enabled.
	* @returns {void}
	*/
	enableItem(itemtext: string): void;

	/** Specifies the Menu Item to be enabled by using the Menu Item Id.
	* @param {string|number} Specifies the Menu Item id to be enabled.
	* @returns {void}
	*/
	enableItembyID(itemid: string|number): void;

	/** Hides the Context Menu control.
	* @returns {void}
	*/
	hide(): void;

	/** Insert the menu item as child of target node.
	* @param {any} Information about Menu item.
	* @param {string|any} Selector of target node or Object of target node.
	* @returns {void}
	*/
	insert(item: any, target: string|any): void;

	/** Insert the menu item after the target node.
	* @param {any} Information about Menu item.
	* @param {string|any} Selector of target node or Object of target node.
	* @returns {void}
	*/
	insertAfter(item: any, target: string|any): void;

	/** Insert the menu item before the target node.
	* @param {any} Information about Menu item.
	* @param {string|any} Selector of target node or Object of target node.
	* @returns {void}
	*/
	insertBefore(item: any, target: string|any): void;

	/** Remove Menu item.
	* @param {any|Array<any>} Selector of target node or Object of target node.
	* @returns {void}
	*/
	remove(target: any|Array<any>): void;

	/** To show the Menu control.
	* @param {number} x co-ordinate position of context menu.
	* @param {number} y co-ordinate position of context menu.
	* @param {any} target element
	* @param {any} name of the event
	* @returns {void}
	*/
	show(locationX: number, locationY: number, targetElement: any, event: any): void;
}
export module Menu{

export interface Model {

	/**To enable or disable the Animation while hover or click an menu items.See AnimationType
	* @Default {ej.AnimationType.Default}
	*/
	animationType?: ej.AnimationType|string;

	/**Specifies the target id of context menu. On right clicking the specified contextTarget element, context menu gets shown.
	* @Default {null}
	*/
	contextMenuTarget?: string;

	/**Specify the CSS class to achieve custom theme.
	*/
	cssClass?: string;

	/**To enable or disable the Animation effect while hover or click an menu items.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Specifies the root menu items to be aligned center in horizontal menu.
	* @Default {false}
	*/
	enableCenterAlign?: boolean;

	/**Enable / Disable the Menu control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies the menu items to be displayed in right to left direction.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**When this property sets to false, the menu items is displayed without any separators.
	* @Default {true}
	*/
	enableSeparator?: boolean;

	/**Specifies the target which needs to be excluded. i.e., The context menu will not be displayed in those specified targets.
	* @Default {null}
	*/
	excludeTarget?: string;

	/**Fields used to bind the data source and it includes following field members to make databind easier.
	* @Default {null}
	*/
	fields?: Fields;

	/**Specifies the height of the root menu.
	* @Default {auto}
	*/
	height?: string|number;

	/**Specifies the list of html attributes to be added to menu control.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the type of the menu. Essential JavaScript Menu consists of two type of menu, they are Normal Menu and Context Menu mode.See MenuType
	* @Default {ej.MenuType.NormalMenu}
	*/
	menuType?: string|ej.MenuType;

	/**Specifies the sub menu items to be show or open only on click.
	* @Default {false}
	*/
	openOnClick?: boolean;

	/**Specifies the orientation of normal menu. Normal menu can rendered in horizontal or vertical direction by using this API. See Orientation
	* @Default {ej.Orientation.Horizontal}
	*/
	orientation?: string|ej.Orientation;

	/**Specifies the main menu items arrows only to be shown if it contains child items.
	* @Default {true}
	*/
	showRooltLevelArrows?: boolean;

	/**Specifies the sub menu items arrows only to be shown if it contains child items.
	* @Default {true}
	*/
	showSubLevelArrows?: boolean;

	/**Specifies position of pulldown submenus that will appear on mouse over.See Direction
	* @Default {ej.Direction.Right}
	*/
	subMenuDirection?: string|ej.Direction;

	/**Specifies the title to responsive menu.
	* @Default {Menu}
	*/
	titleText?: string;

	/**Specifies the width of the main menu.
	* @Default {auto}
	*/
	width?: string|number;

	/**Fires before context menu gets open.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Fires when mouse click on menu items.*/
	click? (e: ClickEventArgs): void;

	/**Fire when context menu on close.*/
	close? (e: CloseEventArgs): void;

	/**Fires when context menu on open.*/
	open? (e: OpenEventArgs): void;

	/**Fires to create menu items.*/
	create? (e: CreateEventArgs): void;

	/**Fires to destroy menu items.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when key down on menu items.*/
	keydown? (e: KeydownEventArgs): void;

	/**Fires when mouse out from menu items.*/
	mouseout? (e: MouseoutEventArgs): void;

	/**Fires when mouse over the Menu items.*/
	mouseover? (e: MouseoverEventArgs): void;
}

export interface BeforeOpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target element
	*/
	target?: any;
}

export interface ClickEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns clicked menu item text
	*/
	text?: string;

	/**returns clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;

	/**returns the selected item
	*/
	selectedItem?: number;
}

export interface CloseEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target element
	*/
	target?: any;
}

export interface OpenEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target element
	*/
	target?: any;
}

export interface CreateEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface KeydownEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns clicked menu item text
	*/
	menuText?: string;

	/**returns clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;
}

export interface MouseoutEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns clicked menu item text
	*/
	text?: string;

	/**returns clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;
}

export interface MouseoverEventArgs {

	/**returns the menu model
	*/
	model?: ej.Menu.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns clicked menu item text
	*/
	text?: string;

	/**returns clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;
}

export interface Fields {

	/**It receives the child data for the inner level.
	*/
	child?: any;

	/**It receives datasource as Essential DataManager object and JSON object.
	*/
	dataSource?: any;

	/**Specifies the html attributes to â€œliâ€ item list.
	*/
	htmlAttribute?: string;

	/**Specifies the id to menu items list
	*/
	id?: string;

	/**Specifies the image attribute to â€œimgâ€ tag inside items list.
	*/
	imageAttribute?: string;

	/**Specifies the image URL to â€œimgâ€ tag inside item list.
	*/
	imageUrl?: string;

	/**Adds custom attributes like &quot;target&quot; to the anchor tag of the menu items.
	*/
	linkAttribute?: string;

	/**Specifies the parent id of the table.
	*/
	parentId?: string;

	/**It receives query to retrieve data from the table (query is same as SQL).
	*/
	query?: any;

	/**Specifies the sprite CSS class to â€œliâ€ item list.
	*/
	spriteCssClass?: string;

	/**It receives table name to execute query on the corresponding table.
	*/
	tableName?: string;

	/**Specifies the text of menu items list.
	*/
	text?: string;

	/**Specifies the url to the anchor tag in menu item list.
	*/
	url?: string;
}
}
enum AnimationType
{
//string
Default,
//string
None,
}
enum MenuType
{
//string
ContextMenu,
//string
NormalMenu,
}
enum Direction
{
//string
Left,
//string
None,
//string
Right,
}

class Pager extends ej.Widget {
	static fn: Pager;
	constructor(element: JQuery, options?: Pager.Model);
	constructor(element: Element, options?: Pager.Model);
	model:Pager.Model;
	defaults:Pager.Model;

	/** Send a paging request to specified page through the pagerControl.
	* @returns {void}
	*/
	gotoPage(): void;
}
export module Pager{

export interface Model {

	/**Gets or sets a value that indicates whether to define the number of records displayed per page.
	* @Default {12}
	*/
	pageSize?: number;

	/**Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation.
	* @Default {10}
	*/
	pageCount?: number;

	/**Gets or sets a value that indicates whether to define which page to display currently in pager.
	* @Default {1}
	*/
	currentPage?: number;

	/**Get or sets a value of total number of pages in the pager. The totalPages value is calculated based on pagesize and totalrecords.
	* @Default {null}
	*/
	totalPages?: number;

	/**Get the value of total number of records which is bound to a data item.
	* @Default {null}
	*/
	totalRecordsCount?: number;

	/**Gets or sets a value that indicates whether to pass the current page information as a query string along with the url while navigating to other page.
	* @Default {false}
	*/
	enableQueryString?: boolean;

	/**Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to a particular country or region.
	* @Default {en-US}
	*/
	locale?: string;

	/**Align content in the pager control from right to left by setting the property as true.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Triggered when pager numeric item is clicked in pager control.*/
	click? (e: ClickEventArgs): void;
}

export interface ClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current page index.
	*/
	currentPage?: number;

	/**Returns the pager model.
	*/
	model?: any;

	/**Returns the name of event
	*/
	type?: string;

	/**Returns current action event type and its target.
	*/
	event?: any;
}
}

class ProgressBar extends ej.Widget {
	static fn: ProgressBar;
	constructor(element: JQuery, options?: ProgressBar.Model);
	constructor(element: Element, options?: ProgressBar.Model);
	model:ProgressBar.Model;
	defaults:ProgressBar.Model;

	/** Destroy the progressbar widget
	* @returns {void}
	*/
	destroy(): void;

	/** Disables the progressbar control
	* @returns {void}
	*/
	disable(): void;

	/** Enables the progressbar control
	* @returns {void}
	*/
	enable(): void;

	/** Returns the current progress value in percent.
	* @returns {number}
	*/
	getPercentage(): number;

	/** Returns the current progress value
	* @returns {number}
	*/
	getValue(): number;
}
export module ProgressBar{

export interface Model {

	/**Sets the root CSS class for ProgressBar theme, which is used customize.
	* @Default {null}
	*/
	cssClass?: string;

	/**When this property sets to false, it disables the ProgressBar control
	* @Default {true}
	*/
	enabled?: boolean;

	/**Save current model value to browser cookies for state maintains. While refresh the progressBar control page retains the model value apply from browser cookies
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Sets the ProgressBar direction as right to left alignment.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Defines the height of the ProgressBar.
	* @Default {null}
	*/
	height?: number|string;

	/**It allows to define the characteristics of the progressBar control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Sets the maximum value of the ProgressBar.
	* @Default {100}
	*/
	maxValue?: number;

	/**Sets the minimum value of the ProgressBar.
	* @Default {0}
	*/
	minValue?: number;

	/**Sets the ProgressBar value in percentage. The value should be in between 0 to 100.
	* @Default {0}
	*/
	percentage?: number;

	/**Displays rounded corner borders on the progressBar control.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Sets the custom text for the ProgressBar. The text placed in the middle of the ProgressBar and it can be customizable using the class 'e-progress-text'.
	* @Default {null}
	*/
	text?: string;

	/**Sets the ProgressBar value. The value should be in between min and max values.
	* @Default {0}
	*/
	value?: number;

	/**Defines the width of the ProgressBar.
	* @Default {null}
	*/
	width?: number|string;

	/**Event triggers when the progress value changed*/
	change? (e: ChangeEventArgs): void;

	/**Event triggers when the process completes (at 100%)*/
	complete? (e: CompleteEventArgs): void;

	/**Event triggers when the progressbar are created*/
	create? (e: CreateEventArgs): void;

	/**Event triggers when the progressbar are destroyed*/
	destroy? (e: DestroyEventArgs): void;

	/**Event triggers when the process starts (from 0%)*/
	start? (e: StartEventArgs): void;
}

export interface ChangeEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the ProgressBar model
	*/
	model?: ej.ProgressBar.Model;

	/**returns the current progress percentage
	*/
	percentage?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the current progress value
	*/
	value?: string;
}

export interface CompleteEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the ProgressBar model
	*/
	model?: ej.ProgressBar.Model;

	/**returns the current progress percentage
	*/
	percentage?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the current progress value
	*/
	value?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the progressbar model
	*/
	model?: ej.ProgressBar.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the progressbar model
	*/
	model?: ej.ProgressBar.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface StartEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the ProgressBar model
	*/
	model?: ej.ProgressBar.Model;

	/**returns the current progress percentage
	*/
	percentage?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the current progress value
	*/
	value?: string;
}
}

class RadioButton extends ej.Widget {
	static fn: RadioButton;
	constructor(element: JQuery, options?: RadioButton.Model);
	constructor(element: Element, options?: RadioButton.Model);
	model:RadioButton.Model;
	defaults:RadioButton.Model;

	/** To disable the RadioButton
	* @returns {void}
	*/
	disable(): void;

	/** To enable the RadioButton
	* @returns {void}
	*/
	enable(): void;
}
export module RadioButton{

export interface Model {

	/**Specifies the check attribute of the Radio Button.
	* @Default {false}
	*/
	checked?: boolean;

	/**Specify the CSS class to RadioButton to achieve custom theme.
	*/
	cssClass?: string;

	/**Specifies the RadioButton control state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies the enablePersistence property for RadioButton while initialization. The enablePersistence API save current model value to browser cookies for state maintains. While refreshing the radio button control page the model value apply from browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specify the Right to Left direction to RadioButton
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the HTML Attributes of the Checkbox
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the id attribute for the Radio Button while initialization.
	* @Default {null}
	*/
	id?: string;

	/**Specify the idPrefix value to be added before the current id of the RadioButton.
	* @Default {ej}
	*/
	idPrefix?: string;

	/**Specifies the name attribute for the Radio Button while initialization.
	* @Default {Sets id as name if it is null}
	*/
	name?: string;

	/**Specifies the size of the RadioButton.
	* @Default {small}
	*/
	size?: ej.RadioButtonSize|string;

	/**Specifies the text content for RadioButton.
	*/
	text?: string;

	/**Set the jquery validation error message in radio button.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Set the jquery validation rules in radio button.
	* @Default {null}
	*/
	validationRules?: any;

	/**Specifies the value attribute of the Radio Button.
	* @Default {null}
	*/
	value?: string;

	/**Fires before the RadioButton is going to changed its state successfully*/
	beforeChange? (e: BeforeChangeEventArgs): void;

	/**Fires when the RadioButton state is changed successfully*/
	change? (e: ChangeEventArgs): void;

	/**Fires when the RadioButton created successfully*/
	create? (e: CreateEventArgs): void;

	/**Fires when the RadioButton destroyed successfully*/
	destroy? (e: DestroyEventArgs): void;
}

export interface BeforeChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the RadioButton model
	*/
	model?: ej.RadioButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns true if element is checked, otherwise returns false
	*/
	isChecked?: boolean;

	/**returns true if change event triggered by interaction, otherwise returns false
	*/
	isInteraction?: boolean;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the RadioButton model
	*/
	model?: ej.RadioButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns true if element is checked, otherwise returns false
	*/
	isChecked?: boolean;

	/**returns true if change event triggered by interaction, otherwise returns false
	*/
	isInteraction?: boolean;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the RadioButton model
	*/
	model?: ej.RadioButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the RadioButton model
	*/
	model?: ej.RadioButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}
enum RadioButtonSize
{
//Shows small size radio button
Small,
//Shows medium size radio button
Medium,
}

class Rating extends ej.Widget {
	static fn: Rating;
	constructor(element: JQuery, options?: Rating.Model);
	constructor(element: Element, options?: Rating.Model);
	model:Rating.Model;
	defaults:Rating.Model;

	/** Destroy the Rating widget all events bound will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To get the current value of rating control.
	* @returns {number}
	*/
	getValue(): number;

	/** To hide the rating control.
	* @returns {void}
	*/
	hide(): void;

	/** User can refresh the rating control to identify changes.
	* @returns {void}
	*/
	refresh(): void;

	/** To reset the rating value.
	* @returns {void}
	*/
	reset(): void;

	/** To set the rating value.
	* @param {string|number} Specifies the rating value.
	* @returns {void}
	*/
	setValue(value: string|number): void;

	/** To show the rating control
	* @returns {void}
	*/
	show(): void;
}
export module Rating{

export interface Model {

	/**Enables the rating control with reset button.It can be used to reset the rating control value.
	* @Default {true}
	*/
	allowReset?: boolean;

	/**Specify the CSS class to achieve custom theme.
	*/
	cssClass?: string;

	/**When this property is set to false, it disables the rating control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Save current model value to browser cookies for state maintenance. While refresh the page Rating control values are retained.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specifies the height of the Rating control wrapper.
	* @Default {null}
	*/
	height?: string;

	/**Specifies the value to be increased while navigating between shapes(stars) in Rating control.
	* @Default {1}
	*/
	incrementStep?: number;

	/**Allow to render the maximum number of Rating shape(star).
	* @Default {5}
	*/
	maxValue?: number;

	/**Allow to render the minimum number of Rating shape(star).
	* @Default {0}
	*/
	minValue?: number;

	/**Specifies the orientation of Rating control. See Orientation
	* @Default {ej.Rating.Orientation.Horizontal}
	*/
	orientation?: ej.Orientation|string;

	/**Helps to provide more precise ratings.Rating control supports three precision modes - full, half, and exact. See Precision
	* @Default {full}
	*/
	precision?: ej.Rating.Precision|string;

	/**Interaction with Rating control can be prevented by enabling this API.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**To specify the height of each shape in Rating control.
	* @Default {23}
	*/
	shapeHeight?: number;

	/**To specify the width of each shape in Rating control.
	* @Default {23}
	*/
	shapeWidth?: number;

	/**Enables the tooltip option.Currently selected value will be displayed in tooltip.
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**To specify the number of stars to be selected while rendering.
	* @Default {1}
	*/
	value?: number;

	/**Specifies the width of the Rating control wrapper.
	* @Default {null}
	*/
	width?: string;

	/**Fires when Rating value changes.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when Rating control is clicked successfully.*/
	click? (e: ClickEventArgs): void;

	/**Fires when Rating control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when Rating control is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when mouse hover is removed from Rating control.*/
	mouseout? (e: MouseoutEventArgs): void;

	/**Fires when mouse hovered over the Rating control.*/
	mouseover? (e: MouseoverEventArgs): void;
}

export interface ChangeEventArgs {

	/**returns the current value.
	*/
	value?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mouse click event args values.
	*/
	event?: any;
}

export interface ClickEventArgs {

	/**returns the current value.
	*/
	value?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mouse click event args values.
	*/
	event?: any;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface MouseoutEventArgs {

	/**returns the current value.
	*/
	value?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mouse click event args values.
	*/
	event?: any;
}

export interface MouseoverEventArgs {

	/**returns the current value.
	*/
	value?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rating model
	*/
	model?: ej.Rating.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the mouse click event args values.
	*/
	event?: any;

	/**returns the current index value.
	*/
	index?: any;
}

enum Precision{

	///string
	Exact,

	///string
	Full,

	///string
	Half
}

}

class Ribbon extends ej.Widget {
	static fn: Ribbon;
	constructor(element: JQuery, options?: Ribbon.Model);
	constructor(element: Element, options?: Ribbon.Model);
	model:Ribbon.Model;
	defaults:Ribbon.Model;

	/** Adds contextual tab or contextual tab set dynamically in the ribbon control with contextual tabs object and index position. When index is null, ribbon contextual tab or contextual tab set is added at the last index.
	* @param {any} contextual tab or contextual tab set object.
	* @param {number} index of the contextual tab or contextual tab set, this is optional.
	* @returns {void}
	*/
	addContextualTabs(contextualTabSet: any, index: number): void;

	/** Adds tab dynamically in the ribbon control with given name, tab group array and index position. When index is null, ribbon tab is added at the last index.
	* @param {string} ribbon tab display text.
	* @param {Array<any>} groups to be displayed in ribbon tab .
	* @param {number} index of the ribbon tab,this is optional.
	* @returns {void}
	*/
	addTab(tabText: string, ribbonGroups: Array<any>, index: number): void;

	/** Adds tab group dynamically in the ribbon control with given tab index, tab group object and group index position. When group index is null, ribbon group is added at the last index.
	* @param {number} ribbon tab index.
	* @param {any} group to be displayed in ribbon tab .
	* @param {number} index of the ribbon group,this is optional.
	* @returns {void}
	*/
	addTabGroup(tabIndex: number, tabGroup: any, groupIndex: number): void;

	/** Adds group content dynamically in the ribbon control with given tab index, group index, sub group index, content and content index position. When content index is null, content is added at the last index.
	* @param {number} ribbon tab index.
	* @param {number} ribbon group index.
	* @param {number} sub group index in the ribbon group,
	* @param {any} content to be displayed in the ribbon group.
	* @param {number} ribbon content index .this is optional.
	* @returns {void}
	*/
	addTabGroupContent(tabIndex: number, groupIndex: number, subGroupIndex: number, content: any, contentIndex: number): void;

	/** Hides the ribbon backstage page.
	* @returns {void}
	*/
	hideBackstage(): void;

	/** Collapses the ribbon tab content.
	* @returns {void}
	*/
	collapse(): void;

	/** Destroys the ribbon widget. All the events bound using this._on are unbound automatically and the ribbon control is moved to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Expands the ribbon tab content.
	* @returns {void}
	*/
	expand(): void;

	/** Gets text of the given index tab in the ribbon control.
	* @param {number} index of the tab item.
	* @returns {string}
	*/
	getTabText(index: number): string;

	/** Hides the given text tab in the ribbon control.
	* @param {string} text of the tab item.
	* @returns {void}
	*/
	hideTab(string: string): void;

	/** Checks whether the given text tab in the ribbon control is enabled or not.
	* @param {string} text of the tab item.
	* @returns {boolean}
	*/
	isEnable(string: string): boolean;

	/** Checks whether the given text tab in the ribbon control is visible or not.
	* @param {string} text of the tab item.
	* @returns {boolean}
	*/
	isVisible(string: string): boolean;

	/** Removes the given index tab item from the ribbon control.
	* @param {number} index of tab item.
	* @returns {void}
	*/
	removeTab(index: number): void;

	/** Sets new text to the given text tab in the ribbon control.
	* @param {string} current text of the tab item.
	* @param {string} new text of the tab item.
	* @returns {void}
	*/
	setTabText(tabText: string, newText: string): void;

	/** Displays the ribbon backstage page.
	* @returns {void}
	*/
	showBackstage(): void;

	/** Displays the given text tab in the ribbon control.
	* @param {string} text of the tab item.
	* @returns {void}
	*/
	showTab(string: string): void;
}
export module Ribbon{

export interface Model {

	/**Enables the ribbon resize feature.
	* @Default {false}
	*/
	allowResizing?: boolean;

	/**Specifies the height, width, enableRTL, showRoundedCorner,enabled,cssClass property to the controls in the ribbon commonly andit will work only when those properties are not defined in buttonSettings and content defaults.
	* @Default {object}
	*/
	buttonDefaults?: any;

	/**Property to enable the ribbon quick access toolbar.
	* @Default {false}
	*/
	showQAT?: boolean;

	/**Sets custom setting to the collapsible pin in the ribbon.
	* @Default {Object}
	*/
	collapsePinSettings?: CollapsePinSettings;

	/**Sets custom setting to the expandable pin in the ribbon.
	* @Default {Object}
	*/
	expandPinSettings?: ExpandPinSettings;

	/**Specifies the application tab to contain application menu or backstage page in the ribbon control.
	* @Default {Object}
	*/
	applicationTab?: ApplicationTab;

	/**Specifies the contextual tabs and tab set to the ribbon control with the background color and border color. Refer to the tabs section for adding tabs into the contextual tab and contextual tab set.
	* @Default {array}
	*/
	contextualTabs?: Array<ContextualTabs>;

	/**Specifies the index or indexes to disable the given index tab or indexes tabs in the ribbon control.
	* @Default {0}
	*/
	disabledItemIndex?: Array<any>;

	/**Specifies the index or indexes to enable the given index tab or indexes tabs in the ribbon control.
	* @Default {null}
	*/
	enabledItemIndex?: Array<any>;

	/**Specifies the index of the ribbon tab to select the given index tab item in the ribbon control.
	* @Default {1}
	*/
	selectedItemIndex?: number;

	/**Specifies the tabs and its groups. Also specifies the control details that has to be placed in the tab area in the ribbon control.
	* @Default {array}
	*/
	tabs?: Array<Tabs>;

	/**Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to a particular country or region and  it will need to use the user's preference.
	* @Default {en-US}
	*/
	locale?: string;

	/**Specifies the width to the ribbon control. You can set width in string or number format.
	* @Default {null}
	*/
	width?: string|number;

	/**Triggered before the ribbon tab item is removed.*/
	beforeTabRemove? (e: BeforeTabRemoveEventArgs): void;

	/**Triggered before the ribbon control is created.*/
	create? (e: CreateEventArgs): void;

	/**Triggered before the ribbon control is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggered when the control in the group is clicked successfully.*/
	groupClick? (e: GroupClickEventArgs): void;

	/**Triggered when the groupexpander in the group is clicked successfully.*/
	groupExpand? (e: GroupExpandEventArgs): void;

	/**Triggered when an item in the Gallery control is clicked successfully.*/
	galleryItemClick? (e: GalleryItemClickEventArgs): void;

	/**Triggered when a tab or button in the backstage page is clicked successfully.*/
	backstageItemClick? (e: BackstageItemClickEventArgs): void;

	/**Triggered when the ribbon control is collapsed.*/
	collapse? (e: CollapseEventArgs): void;

	/**Triggered when the ribbon control is expanded.*/
	expand? (e: ExpandEventArgs): void;

	/**Triggered after adding the new ribbon tab item.*/
	tabAdd? (e: TabAddEventArgs): void;

	/**Triggered when tab is clicked successfully in the ribbon control.*/
	tabClick? (e: TabClickEventArgs): void;

	/**Triggered before the ribbon tab is created.*/
	tabCreate? (e: TabCreateEventArgs): void;

	/**Triggered after the tab item is removed from the ribbon control.*/
	tabRemove? (e: TabRemoveEventArgs): void;

	/**Triggered after the ribbon tab item is selected in the ribbon control.*/
	tabSelect? (e: TabSelectEventArgs): void;

	/**Triggered when the expand/collapse button is clicked successfully .*/
	toggleButtonClick? (e: ToggleButtonClickEventArgs): void;

	/**Triggered when the QAT menu item is clicked successfully .*/
	qatMenuItemClick? (e: QatMenuItemClickEventArgs): void;
}

export interface BeforeTabRemoveEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns current tab item index in the ribbon control.
	*/
	index?: number;
}

export interface CreateEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Set to true when the event has to be cancelled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns current ribbon tab item index
	*/
	deleteIndex?: number;
}

export interface GroupClickEventArgs {

	/**Set to true when the event has to be cancelled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the control clicked in the group.
	*/
	target?: number;
}

export interface GroupExpandEventArgs {

	/**Set to true when the event has to be cancelled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the clicked groupexpander.
	*/
	target?: number;
}

export interface GalleryItemClickEventArgs {

	/**Set to true when the event has to be cancelled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the gallery model.
	*/
	galleryModel?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the item clicked in the gallery.
	*/
	target?: number;
}

export interface BackstageItemClickEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the item clicked in the gallery.
	*/
	target?: number;

	/**returns the id of the target item.
	*/
	id?: string;

	/**returns the text of the target item.
	*/
	text?: string;
}

export interface CollapseEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ExpandEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface TabAddEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns new added tab header.
	*/
	tabHeader?: any;

	/**returns new added tab content panel.
	*/
	tabContent?: any;
}

export interface TabClickEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: any;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: any;

	/**returns current active index.
	*/
	activeIndex?: number;
}

export interface TabCreateEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns current ribbon tab item index
	*/
	deleteIndex?: number;
}

export interface TabRemoveEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the removed index.
	*/
	removedIndex?: number;
}

export interface TabSelectEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: any;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: any;

	/**returns current active index.
	*/
	activeIndex?: number;
}

export interface ToggleButtonClickEventArgs {

	/**Set to true when the event has to be canceled, else false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the expand/collapse button.
	*/
	target?: number;
}

export interface QatMenuItemClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the ribbon model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the clicked menu item text.
	*/
	text?: string;
}

export interface CollapsePinSettings {

	/**Sets tooltip for the collapse pin .
	* @Default {null}
	*/
	toolTip?: string;

	/**Specifies the custom tooltip for collapse pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
	* @Default {Object}
	*/
	customToolTip?: any;
}

export interface ExpandPinSettings {

	/**Sets tooltip for the expand pin.
	* @Default {null}
	*/
	toolTip?: string;

	/**Specifies the custom tooltip for expand pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
	* @Default {Object}
	*/
	customToolTip?: any;
}

export interface ApplicationTabBackstageSettingsPages {

	/**Specifies the id for ribbon backstage page's tab and button elements.
	* @Default {null}
	*/
	id?: string;

	/**Specifies the text for ribbon backstage page's tab header and button elements.
	* @Default {null}
	*/
	text?: string;

	/**Specifies the type for ribbon backstage page's contents. Set &quot;ej.Ribbon.backStageItemType.tab&quot; to render the tab or &quot;ej.Ribbon.backStageItemType.button&quot; to render the button.
	* @Default {ej.Ribbon.itemType.tab}
	*/
	itemType?: ej.Ribbon.itemType|string;

	/**Specifies the id of html elements like div, ul, etc., as ribbon backstage page's tab content.
	* @Default {null}
	*/
	contentID?: string;

	/**Specifies the separator between backstage page's tab and button elements.
	* @Default {false}
	*/
	enableSeparator?: boolean;
}

export interface ApplicationTabBackstageSettings {

	/**Specifies the display text of application tab.
	* @Default {null}
	*/
	text?: string;

	/**Specifies the height of ribbon backstage page.
	* @Default {null}
	*/
	height?: string|number;

	/**Specifies the width of ribbon backstage page.
	* @Default {null}
	*/
	width?: string|number;

	/**Specifies the ribbon backstage page with its tab and button elements.
	* @Default {array}
	*/
	pages?: Array<ApplicationTabBackstageSettingsPages>;

	/**Specifies the width of backstage page header that contains tabs and buttons.
	* @Default {null}
	*/
	headerWidth?: string|number;
}

export interface ApplicationTab {

	/**Specifies the ribbon backstage page items.
	* @Default {object}
	*/
	backstageSettings?: ApplicationTabBackstageSettings;

	/**Specifies the ID of 'ul' list to create application menu in the ribbon control.
	* @Default {null}
	*/
	menuItemID?: string;

	/**Specifies the menu members, events by using the menu settings for the menu in the application tab.
	* @Default {object}
	*/
	menuSettings?: any;

	/**Specifies the application menu or backstage page. Specify the type of application tab as &quot;ej.Ribbon.applicationTabType.menu&quot; to render the application menu or &quot;ej.Ribbon.applicationTabType.backstage&quot; to render backstage page in the ribbon control.
	* @Default {ej.Ribbon.applicationTabType.menu}
	*/
	type?: ej.Ribbon.applicationTabType|string;
}

export interface ContextualTabs {

	/**Specifies the backgroundColor of the contextual tabs and tab set in the ribbon control.
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the borderColor of the contextual tabs and tab set in the ribbon control.
	* @Default {null}
	*/
	borderColor?: string;

	/**Specifies the tabs to present in the contextual tabs and tab set. Refer to the tabs section for adding tabs into the contextual tabs and tab set.
	* @Default {array}
	*/
	tabs?: Array<any>;
}

export interface TabsGroupsContentGroupsCustomGalleryItems {

	/**Specifies the syncfusion button members, events by using buttonSettings.
	* @Default {object}
	*/
	buttonSettings?: any;

	/**Specifies the type as ej.Ribbon.customItemType.menu or ej.Ribbon.customItemType.button to render Syncfusion button and menu.
	* @Default {ej.Ribbon.customItemType.button}
	*/
	customItemType?: ej.Ribbon.customItemType|string;

	/**Specifies the custom tooltip for gallery extra item's button. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
	* @Default {object}
	*/
	customToolTip?: any;

	/**Specifies the UL list id to render menu as gallery extra item.
	* @Default {null}
	*/
	menuId?: string;

	/**Specifies the Syncfusion menu members, events by using menuSettings.
	* @Default {object}
	*/
	menuSettings?: any;

	/**Specifies the text for gallery extra item's button.
	* @Default {null}
	*/
	text?: string;

	/**Specifies the tooltip for gallery extra item's button.
	* @Default {null}
	*/
	toolTip?: string;
}

export interface TabsGroupsContentGroupsCustomToolTip {

	/**Sets content to the custom tooltip. Text and html support are provided for content.
	* @Default {null}
	*/
	content?: string;

	/**Sets icon to the custom tooltip content.
	* @Default {null}
	*/
	prefixIcon?: string;

	/**Sets title to the custom tooltip. Text and html support are provided for title and the title is in bold for text format.
	* @Default {null}
	*/
	title?: string;
}

export interface TabsGroupsContentGroupsGalleryItems {

	/**Specifies the Syncfusion button members, events by using buttonSettings.
	* @Default {object}
	*/
	buttonSettings?: any;

	/**Specifies the custom tooltip for gallery content. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
	* @Default {object}
	*/
	customToolTip?: any;

	/**Sets text for the gallery content.
	* @Default {null}
	*/
	text?: string;

	/**Sets tooltip for the gallery content.
	* @Default {null}
	*/
	toolTip?: string;
}

export interface TabsGroupsContentGroups {

	/**Specifies the Syncfusion button members, events by using this buttonSettings.
	* @Default {object}
	*/
	buttonSettings?: any;

	/**It is used to set the count of gallery contents in a row.
	* @Default {null}
	*/
	columns?: number;

	/**Specifies the custom items such as div, table, controls as custom controls with the type &quot;ej.Ribbon.type.custom&quot; in the groups.
	* @Default {null}
	*/
	contentID?: string;

	/**Specifies the css class property to apply styles to the button, split, dropdown controls in the groups.
	* @Default {null}
	*/
	cssClass?: string;

	/**Specifies the Syncfusion button and menu as gallery extra items.
	* @Default {array}
	*/
	customGalleryItems?: Array<TabsGroupsContentGroupsCustomGalleryItems>;

	/**Provides custom tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups. Text and html support are also provided for title and content.
	* @Default {Object}
	*/
	customToolTip?: TabsGroupsContentGroupsCustomToolTip;

	/**Specifies the Syncfusion dropdown list members, events by using this dropdownSettings.
	* @Default {object}
	*/
	dropdownSettings?: any;

	/**Specifies the separator to the control that is in row type group. The separator separates the control from the next control in the group. Set &quot;true&quot; to enable the separator.
	* @Default {false}
	*/
	enableSeparator?: boolean;

	/**Sets the count of gallery contents in a row, when the gallery is in expanded state.
	* @Default {null}
	*/
	expandedColumns?: number;

	/**Defines each gallery content.
	* @Default {array}
	*/
	galleryItems?: Array<TabsGroupsContentGroupsGalleryItems>;

	/**Specifies the Id for button, split button, dropdown list, toggle button, gallery, custom controls in the sub groups.
	* @Default {null}
	*/
	id?: string;

	/**Specifies the size for button, split button controls. Set &quot;true&quot; for big size and &quot;false&quot; for small size.
	* @Default {null}
	*/
	isBig?: boolean;

	/**Sets the height of each gallery content.
	* @Default {null}
	*/
	itemHeight?: string|number;

	/**Sets the width of each gallery content.
	* @Default {null}
	*/
	itemWidth?: string|number;

	/**Specifies the Syncfusion split button members, events by using this splitButtonSettings.
	* @Default {object}
	*/
	splitButtonSettings?: any;

	/**Specifies the text for button, split button, toggle button controls in the sub groups.
	* @Default {null}
	*/
	text?: string;

	/**Specifies the Syncfusion toggle button members, events by using toggleButtonSettings.
	* @Default {object}
	*/
	toggleButtonSettings?: any;

	/**Specifies the tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups.
	* @Default {null}
	*/
	toolTip?: string;

	/**To add,show and hide controls in Quick Access toolbar.
	* @Default {ej.Ribbon.quickAccessMode.none}
	*/
	quickAccessMode?: ej.Ribbon.quickAccessMode|string;

	/**Specifies the type as &quot;ej.Ribbon.type.button&quot; or &quot;ej.Ribbon.type.splitButton&quot; or &quot;ej.Ribbon.type.dropDownList&quot; or &quot;ej.Ribbon.type.toggleButton&quot; or &quot;ej.Ribbon.type.custom&quot; or &quot;ej.Ribbon.type.gallery&quot; to render button, split, dropdown, toggle button, gallery, custom controls.
	* @Default {ej.Ribbon.type.button}
	*/
	type?: ej.Ribbon.type|string;
}

export interface TabsGroupsContent {

	/**Specifies the height, width, type, isBig property to the controls in the group commonly.
	* @Default {object}
	*/
	defaults?: any;

	/**Specifies the controls such as Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls in the subgroup of the ribbon tab .
	* @Default {array}
	*/
	groups?: Array<TabsGroupsContentGroups>;
}

export interface TabsGroupsGroupExpanderSettings {

	/**Sets tooltip for the group expander of the group.
	* @Default {null}
	*/
	toolTip?: string;

	/**Specifies the custom tooltip for group expander.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
	* @Default {Object}
	*/
	customToolTip?: any;
}

export interface TabsGroups {

	/**Specifies the alignment of controls in the groups in 'row' type or 'column' type. Value for row type is &quot;ej.Ribbon.alignType.rows&quot; and for column type is &quot;ej.Ribbon.alignType.columns&quot;.
	* @Default {ej.Ribbon.alignType.rows}
	*/
	alignType?: ej.Ribbon.alignType|string;

	/**Specifies the Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls to the groups in the ribbon control.
	* @Default {array}
	*/
	content?: Array<TabsGroupsContent>;

	/**Specifies the ID of custom items to be placed in the groups.
	* @Default {null}
	*/
	contentID?: string;

	/**Specifies the HTML contents to place into the groups.
	* @Default {null}
	*/
	customContent?: string;

	/**Specifies the group expander for groups in the ribbon control. Set &quot;true&quot; to enable the group expander.
	* @Default {false}
	*/
	enableGroupExpander?: boolean;

	/**Sets custom setting to the groups in the ribbon control.
	* @Default {Object}
	*/
	groupExpanderSettings?: TabsGroupsGroupExpanderSettings;

	/**Specifies the text to the groups in the ribbon control.
	* @Default {null}
	*/
	text?: string;

	/**Specifies the custom items such as div, table, controls by using the &quot;custom&quot; type.
	* @Default {null}
	*/
	type?: string;
}

export interface Tabs {

	/**Specifies single group or multiple groups and its contents to each tab in the ribbon control.
	* @Default {array}
	*/
	groups?: Array<TabsGroups>;

	/**Specifies the ID for each tab's content panel.
	* @Default {null}
	*/
	id?: string;

	/**Specifies the text of the tab in the ribbon control.
	* @Default {null}
	*/
	text?: string;
}

enum itemType{

	///To render the button for ribbon backstage pageâ€™s contents
	Button,

	///To render the tab for ribbon backstage pageâ€™s contents
	Tab
}


enum applicationTabType{

	///applicationTab display as menu
	Menu,

	///applicationTab display as backstage
	Backstage
}


enum alignType{

	///To align the group content's in row
	Rows,

	///To align group content's in columns
	Columns
}


enum customItemType{

	///Specifies the button type in customGalleryItems
	Button,

	///Specifies the menu type in customGalleryItems
	Menu
}


enum quickAccessMode{

	///Controls are hidden in Quick Access toolbar 
	None,

	///Add controls in toolBar
	ToolBar,

	///Add controls in menu
	Menu
}


enum type{

	///Specifies the button control
	Button,

	///Specifies the split button
	SplitButton,

	///Specifies the dropDown
	DropDownList,

	///To append external element's
	Custom,

	///Specifies the toggle button
	ToggleButton,

	///Specifies the ribbon gallery
	Gallery
}

}

class Kanban extends ej.Widget {
	static fn: Kanban;
	constructor(element: JQuery, options?: Kanban.Model);
	constructor(element: Element, options?: Kanban.Model);
	model:Kanban.Model;
	defaults:Kanban.Model;

	/** Add a new card in kanban control.If parameters are not given default dialog will be open
	* @param {string} Pass the primary key field Name of the column
	* @param {Array<any>} Pass the edited json data of card need to be add.
	* @returns {void}
	*/
	addCard(primaryKey: string, card: Array<any>): void;

	/** Method used for send a clear search request to kanban.
	* @returns {void}
	*/
	clearSearch(): void;

	/** It is used to clear all the card selection.
	* @returns {void}
	*/
	clearSelection(): void;

	/** Collapse all the swimlane rows in kanban.
	* @returns {void}
	*/
	collapseAll(): void;

	/** Add or remove columns in kanban columns collections
	* @param {Array<any>|string} Pass array of columns or string of headerText to add/remove the column in kanban
	* @param {Array<any>|string} Pass array of columns or string of keyvalue to add/remove the column in kanban
	* @param {string} optional Pass add/remove action to be performed. By default "add" action will perform
	* @returns {void}
	*/
	columns(columndetails: Array<any>|string, keyvalue: Array<any>|string, action: string): void;

	/** Send a cancel request of add/edit card in kanban
	* @returns {void}
	*/
	cancelEdit(): void;

	/** Destroy the kanban widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Delete a card in kanban control.
	* @param {string|number} Pass the key of card to be delete
	* @returns {void}
	*/
	deleteCard(Key: string|number): void;

	/** Refresh the kanban with new data source.
	* @param {Array<any>} Pass new data source to the kanban
	* @returns {void}
	*/
	dataSource(datasource: Array<any>): void;

	/** Send a save request in kanban when any card is in edit/new add card state.
	* @returns {void}
	*/
	endEdit(): void;

	/** toggleColumn based on the headerText in kanban.
	* @param {any} Pass the header text of the column to get the corresponding column object
	* @returns {void}
	*/
	toggleColumn(    headerText    : any): void;

	/** Expand or collapse the card based on the state of target &quot;div&quot;
	* @param {string|number} Pass the key of card to be toggle 
	* @returns {void}
	*/
	toggleCard(    key    : string|number): void;

	/** Expand or collapse the swimlane row based on the state of target &quot;div&quot;
	* @param {any} Pass the div object to toggleSwimlane row based on its row state
	* @returns {void}
	*/
	toggleSwimlane(    $div     : any): void;

	/** Expand all the swimlane rows in kanban.
	* @returns {void}
	*/
	expandAll(): void;

	/** used for get the names of all the visible column name collections in kanban.
	* @returns {void}
	*/
	getVisibleColumnNames(): void;

	/** Get the scroller object of kanban.
	* @returns {void}
	*/
	getScrollObject(): void;

	/** Get the column details based on the given header text in kanban.
	* @param {string} Pass the header text of the column to get the corresponding column object
	* @returns {string}
	*/
	getColumnByHeaderText(    headerText    : string): string;

	/** Hide columns from the kanban based on the header text
	* @param {Array<any>|string} you can pass either array of header text of various columns or a header text of a column to hide
	* @returns {void}
	*/
	hideColumns(    headerText    : Array<any>|string): void;

	/** Refresh the template of the kanban
	* @returns {void}
	*/
	refreshTemplate(): void;

	/** Refresh the kanban contents.The template refreshment is based on the argument passed along with this method
	* @param {boolean} optional When templateRefresh is set true, template and kanban contents both are refreshed in kanban else only kanban content is refreshed
	* @returns {void}
	*/
	refresh(    templateRefresh    : boolean): void;

	/** send a search request to kanban with specified string passed in it.
	* @param {string} Pass the string to search in Kanban card
	* @returns {void}
	*/
	searchCards(    searchString: string): void;

	/** Method used for set validation to a field during editing.
	* @param {string} Specify the name of the column to set validation rules
	* @param {any} Specify the validation rules for the field
	* @returns {void}
	*/
	setValidationToField(name: string, rules: any): void;

	/** Send an edit card request in kanban.Parameter will be Html element or primary key
	* @param {any} Pass the div selected row element to be edited in kanban
	* @returns {void}
	*/
	startEdit(    $div    : any): void;

	/** Show columns in the kanban based on the header text.
	* @param {Array<any>|string} You can pass either array of header text of various columns or a header text of a column to show
	* @returns {void}
	*/
	showColumns(    headerText    : Array<any>|string): void;

	/** Update a card in kanban control based on key and json data given.
	* @param {string} Pass the key field Name of the column
	* @param {Array<any>} Pass the edited json data of card need to be update.
	* @returns {void}
	*/
	updateCard(    key    : string,     data    : Array<any>): void;
}
export module Kanban{

export interface Model {

	/**Gets or sets a value that indicates whether to enable allowDragAndDrop behavior on kanban.
	* @Default {true}
	*/
	allowDragAndDrop?: boolean;

	/**To enable or disable the title of the card.
	* @Default {false}
	*/
	allowTitle?: boolean;

	/**Customize the settings for swimlane.
	* @Default {Object}
	*/
	swimlaneSettings?: SwimlaneSettings;

	/**To enable or disable the column expand /collapse.
	* @Default {false}
	*/
	allowToggleColumn?: boolean;

	/**To enable Searching operation in kanban.
	* @Default {false}
	*/
	allowSearching?: boolean;

	/**Gets or sets a value that indicates whether to enable allowSelection behavior on kanban.User can select card and the selected card will be highlighted on kanban.
	* @Default {true}
	*/
	allowSelection?: boolean;

	/**Gets or sets a value that indicates whether to allow card hover actions.
	* @Default {true}
	*/
	allowHover?: boolean;

	/**To allow keyboard navigation actions.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Gets or sets a value that indicates whether to enable the scrollbar in the kanban and view the card by scroll through the kanban manually.
	* @Default {false}
	*/
	allowScrolling?: boolean;

	/**Gets or sets an object that indicates whether to customize the context menu behavior of the kanban.
	* @Default {Object}
	*/
	contextMenuSettings?: ContextMenuSettings;

	/**Gets or sets an object that indicates to render the kanban with specified columns.
	* @Default {array}
	*/
	columns?: Array<Columns>;

	/**Gets or sets an object that indicates whether to Customize the card based on the Mapping Fields.
	* @Default {Object}
	*/
	cardSettings?: CardSettings;

	/**Gets or sets a value that indicates to render the kanban with custom theme.
	* @Default {null}
	*/
	cssClass?: string;

	/**Gets or sets the data to render the kanban with card.
	* @Default {Object}
	*/
	dataSource?: any;

	/**Align content in the kanban control from right to left by setting the property as true.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**To show Total count of cards in each column
	* @Default {true}
	*/
	enableTotalCount?: boolean;

	/**Gets or sets a value that indicates whether to enablehover support for performing card hover actions.
	* @Default {true}
	*/
	enableHover?: boolean;

	/**Get or sets an object that indicates whether to customize the editing behavior of the kanban.
	* @Default {Object}
	*/
	editSettings?: EditSettings;

	/**To customize field mappings for card , editing title and control key parameters
	* @Default {Object}
	*/
	fields?: Fields;

	/**To map datasource field for column values mapping
	* @Default {null}
	*/
	keyField?: string;

	/**Gets or sets a value that indicates whether the kanban design has be to made responsive.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Gets or sets a value that indicates whether to set the minimum width of the responsive kanban while isResponsive property is true and enableResponsiveRow property is set as false.
	* @Default {null}
	*/
	minWidth?: number;

	/**To customize the filtering behavior based on queries given.
	* @Default {array}
	*/
	filterSettings?: Array<FilterSettings>;

	/**The primarykey field is get as property of kanban. And this will used for Drag and drop and editing mainly
	* @Default {null}
	*/
	primaryKeyField?: string;

	/**ej Query to query database of kanban.
	* @Default {Object}
	*/
	query?: any;

	/**To change the key in keyboard interaction to kanban control.
	* @Default {Object}
	*/
	keySettings?: KeySettings;

	/**Gets or sets an object that indicates whether to customize the scrolling behavior of the kanban.
	* @Default {Object}
	*/
	scrollSettings?: any;

	/**To customize the searching behavior of the kanban.
	* @Default {Object}
	*/
	searchSettings?: SearchSettings;

	/**To allow customize selection type. Accepting types are &quot;single&quot; and &quot;multiple&quot;.
	* @Default {ej.Kanban.SelectionType.Single}
	*/
	selectionType?: ej.Kanban.SelectionType|string;

	/**Gets or sets an object that indicates to managing the collection of stacked header rows for the kanban.
	* @Default {Array}
	*/
	stackedHeaderRows?: Array<StackedHeaderRows>;

	/**The tooltip allows to display card details in a tooltip while hovering on it.
	*/
	tooltipSettings?: TooltipSettings;

	/**Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to a particular country or region.
	* @Default {en-US}
	*/
	locale?: string;

	/**Triggered for every kanban action before its starts.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**tiggered for every kanban action success event.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggered for every kanban action server failure event.*/
	actionFailure? (e: ActionFailureEventArgs): void;

	/**Triggered before the task is going to be edited.*/
	beginEdit? (e: BeginEditEventArgs): void;

	/**Triggered before the task is going to be added*/
	beginAdd? (e: BeginAddEventArgs): void;

	/**triggered before the card is going to be selecting.*/
	beforeCardSelect? (e: BeforeCardSelectEventArgs): void;

	/**Trigger after the card is clicked.*/
	cardClick? (e: CardClickEventArgs): void;

	/**Triggered when the card is being dragged.*/
	cardDrag? (e: CardDragEventArgs): void;

	/**Triggered when card dragging start.*/
	cardDragStart? (e: CardDragStartEventArgs): void;

	/**triggered when card dragging stops.*/
	cardDragStop? (e: CardDragStopEventArgs): void;

	/**Triggered when the card is Drop.*/
	cardDrop? (e: CardDropEventArgs): void;

	/**Triggered after the card is select.*/
	cardSelect? (e: CardSelectEventArgs): void;

	/**Triggered when card is double clicked.*/
	cardDoubleClick? (e: CardDoubleClickEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current action event type.
	*/
	originalEventType?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the edited row index.
	*/
	rowIndex?: number;

	/**Returns the card object (JSON).
	*/
	data?: any;

	/**Returns current filtering object field name.
	*/
	currentFilteringobject?: any;

	/**Returns filter details.
	*/
	filterCollection?: any;
}

export interface ActionCompleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns current action event type.
	*/
	originalEventType?: string;

	/**Returns primary key.
	*/
	primaryKey?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns kanban element.
	*/
	target?: any;

	/**Returns the card object (JSON).
	*/
	data?: any;

	/**Returns the selectedRow index.
	*/
	selectedRow?: number;

	/**Returns current filtering column field name.
	*/
	currentFilteringColumn?: string;

	/**Returns filter details.
	*/
	filterCollection?: any;
}

export interface ActionFailureEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the error return by server.
	*/
	error?: any;

	/**Returns current action event type.
	*/
	originalEventType?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns kanban element.
	*/
	target?: any;

	/**Returns the card object (JSON).
	*/
	data?: any;

	/**Returns current filtering column field name.
	*/
	currentFilteringColumn?: string;

	/**Returns filter details.
	*/
	filterCollection?: any;
}

export interface BeginEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns beginedit data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface BeginAddEventArgs {

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns beginAdd data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface BeforeCardSelectEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the select cell index value.
	*/
	cellIndex?: number;

	/**Returns the select card index value.
	*/
	cardIndex?: number;

	/**Returns the select cell element
	*/
	currentCell?: any;

	/**Returns the previously select the card element
	*/
	previousCard?: any;

	/**Returns the previously select card indexes
	*/
	previousRowcellindex?: Array<any>;

	/**Returns the Target item.
	*/
	Target?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns select card data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the current card to the kanban.
	*/
	currentCard?: string;

	/**Returns kanban element.
	*/
	target?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns the Header text of the column corresponding to the selected card.
	*/
	columnName?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardDragEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns drag data.
	*/
	data?: any;

	/**Returns drag start element.
	*/
	dragtarget?: any;

	/**Returns dragged element.
	*/
	draggedElement?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardDragStartEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns carddragstart data.
	*/
	data?: any;

	/**Returns dragged element.
	*/
	draggedElement?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns drag start element.
	*/
	dragtarget?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardDragStopEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns dragged element.
	*/
	draggedElement?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns drag stop element.
	*/
	droptarget?: any;

	/**Returns dragg stop data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardDropEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns dragged element.
	*/
	draggedElement?: any;

	/**Returns dragged data.
	*/
	data?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns drop element.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardSelectEventArgs {

	/**Returns the select cell index value.
	*/
	cellIndex?: number;

	/**Returns the select card index value.
	*/
	cardIndex?: number;

	/**Returns the select cell element
	*/
	currentCell?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the previously select the card element
	*/
	previousCard?: any;

	/**Returns the previously select card indexes
	*/
	previousRowcellindex?: Array<any>;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the kanban model.
	*/
	model?: any;

	/**Returns select card data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CardDoubleClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current card object (JSON).
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface SwimlaneSettings {

	/**To enable or disable items count in swimlane
	* @Default {true}
	*/
	showCount?: boolean;
}

export interface ContextMenuSettingsCustomMenuItems {

	/**Sets context menu to target element.
	* @Default {ej.Kanban.Target.All}
	*/
	target?: ej.Kanban.Target|string;

	/**Gets the name to custom menu.
	* @Default {null}
	*/
	text?: string;

	/**Gets the template to render custom menu.
	* @Default {null}
	*/
	template?: string;
}

export interface ContextMenuSettings {

	/**To enable Context menu , All default context menu will show.
	* @Default {false}
	*/
	enable?: boolean;

	/**Gets or sets a value that indicates the list of items needs to be diable from default context menu
	* @Default {array}
	*/
	disableDefaultItems?: Array<any>;

	/**Gets or sets a value that indicates whether to add custom contextMenu items
	* @Default {array}
	*/
	customMenuItems?: Array<ContextMenuSettingsCustomMenuItems>;
}

export interface ColumnsConstraints {

	/**It is used to specify the type whether the constraints based on column or swimlane.
	* @Default {null}
	*/
	type?: string;

	/**It is used to specify the minimum amount of card in particular column cell or swimlane cell can hold.
	* @Default {null}
	*/
	min?: number;

	/**It is used to specify the maximum amount of card in particular column cell or swimlane cell can hold.
	* @Default {null}
	*/
	max?: number;
}

export interface Columns {

	/**Gets or sets an object that indicates to render the kanban with specified columns headertext.
	* @Default {null}
	*/
	headerText?: string;

	/**Gets or sets an object that indicates to render the kanban with specified columns key.
	* @Default {null}
	*/
	key?: string|number;

	/**To set column collape or expand state
	* @Default {false}
	*/
	isCollapsed?: boolean;

	/**To customize the column constraints whether the constraints contains minimum limit or maximum limit or both.
	* @Default {object}
	*/
	constraints?: ColumnsConstraints;

	/**Gets or sets a value that indicates to add the template within the header element.
	* @Default {null}
	*/
	headerTemplate?: string;

	/**Gets or sets an object that indicates to render the kanban with specified columns width.
	* @Default {null}
	*/
	width?: string|number;

	/**Gets or sets an object that indicates to render the kanban with specified columns visible.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface CardSettings {

	/**Gets or sets a value that indicates to add the template of card .
	* @Default {null}
	*/
	template?: string;

	/**To customize the card bordercolor based on assinged task. Colors and corresponding values defined  here will be mapped with colorField mapped data source column.
	* @Default {Object}
	*/
	colorMapping?: any;
}

export interface EditSettingsEditItems {

	/**It is used to map editing field in the card.
	* @Default {null}
	*/
	field?: string;

	/**It is used to set the particular editType in the card for editing.
	* @Default {ej.Kanban.EditingType.String}
	*/
	editType?: ej.Kanban.EditingType|string;

	/**Gets or sets a value that indicates to define constraints for saving data to the database.
	* @Default {Object}
	*/
	validationRules?: any;

	/**It is used to set the particular editparams in the card for editing.
	* @Default {Object}
	*/
	editParams?: any;

	/**It is used to specify defaultValue in the card.
	* @Default {null}
	*/
	defaultValue?: string|number;
}

export interface EditSettings {

	/**Gets or sets a value that indicates whether to enable the editing action in cards of kanban.
	* @Default {false}
	*/
	allowEditing?: boolean;

	/**Gets or sets a value that indicates whether to enable the adding action in cards behavior on kanban.
	* @Default {false}
	*/
	allowAdding?: boolean;

	/**This specifies the id of the template.which is require to be edited using the Dialog Box
	* @Default {null}
	*/
	dialogTemplate?: string;

	/**Get or sets an object that indicates whether to customize the editMode of the kanban.
	* @Default {ej.Kanban.EditMode.Dialog}
	*/
	editMode?: ej.Kanban.EditMode|string;

	/**Get or sets an object that indicates whether to customize the editing fields of kanban card.
	* @Default {Array}
	*/
	editItems?: Array<EditSettingsEditItems>;
}

export interface Fields {

	/**The primarykey field is get as property of kanban. And this will used for Drag and drop and editing mainly.
	* @Default {null}
	*/
	primaryKey?: string;

	/**To enable swimlane grouping based on the given key field.
	* @Default {null}
	*/
	swimlaneKey?: string;

	/**Priority field has been mapped data source field to maintain card priority
	* @Default {null}
	*/
	priority?: string;

	/**ContentField has been Mapped into card text.
	* @Default {null}
	*/
	content?: string;

	/**TagField has been Mapped into card tag.
	* @Default {null}
	*/
	tag?: string;

	/**TitleField has been Mapped to field in datasource for title content. If titlefield specified , card expand/collapse will be enabled with header and content section
	* @Default {null}
	*/
	title?: string;

	/**To customize the card has been Mapped into card colorfield.
	* @Default {null}
	*/
	color?: string;

	/**ImageUrlField has been Mapped into card image.
	* @Default {null}
	*/
	imageUrl?: string;
}

export interface FilterSettings {

	/**Gets or sets an object of display name to filter queries.
	* @Default {null}
	*/
	text?: string;

	/**Gets or sets an object that Queries to perform filtering
	* @Default {Object}
	*/
	query?: any;

	/**Gets or sets an object of tooltip to filter buttons.
	* @Default {null}
	*/
	description?: string;
}

export interface KeySettings {

	/**To specify the focus in kanban control.
	* @Default {Object}
	*/
	focus?: any;

	/**To specify the key value to insert the card.
	* @Default {null}
	*/
	insertCard?: string;

	/**To specify the key value to delete the card.
	* @Default {null}
	*/
	deleteCard?: string;

	/**TTo specify the key value to edit the card.
	* @Default {null}
	*/
	editCard?: string;

	/**TTo specify the key value to save request.
	* @Default {null}
	*/
	saveRequest?: string;

	/**To specify the key value to cancel request.
	* @Default {null}
	*/
	cancelRequest?: string;

	/**To specify the key value to first card selection.
	* @Default {null}
	*/
	firstCardSelection?: string;

	/**To specify the key value to last card selection.
	* @Default {null}
	*/
	lastCardSelection?: string;

	/**To specify the key value to upArrow.
	* @Default {null}
	*/
	upArrow?: string;

	/**To specify the key value to downArrow.
	* @Default {null}
	*/
	downArrow?: string;

	/**To specify the key value to rightArrow.
	* @Default {null}
	*/
	rightArrow?: string;

	/**To specify the key value to leftArrow.
	* @Default {null}
	*/
	leftArrow?: string;

	/**To specify the key value to swimlane expand all.
	* @Default {null}
	*/
	swimlaneExpandAll?: string;

	/**To specify the key value to swimlane collapse all.
	* @Default {null}
	*/
	swimlaneCollapseAll?: string;

	/**To specify the key value to selected group expand.
	* @Default {null}
	*/
	selectedGroupExpand?: string;

	/**To specify the key value to selected group collapse.
	* @Default {null}
	*/
	selectedGroupCollapse?: string;

	/**To specify the key value to selected column collapse.
	* @Default {null}
	*/
	selectedColumnCollapse?: string;

	/**To specify the key value to selected column expand.
	* @Default {null}
	*/
	selectedColumnExpand?: string;

	/**To specify the key value to multi selection by up arrow.
	* @Default {null}
	*/
	multiSelectionByUpArrow?: string;

	/**To specify the key value to multi selection by left arrow.
	* @Default {null}
	*/
	multiSelectionByLeftArrow?: string;

	/**To specify the key value to multi selection by right arrow.
	* @Default {null}
	*/
	multiSelectionByRightArrow?: string;
}

export interface SearchSettings {

	/**To customize the fields the searching operation can be perform.
	* @Default {Array}
	*/
	fields?: Array<any>;

	/**To customize the searching string.
	* @Default {null}
	*/
	key?: string;

	/**To customize the operator based on searching.
	* @Default {null}
	*/
	operator?: string;

	/**To customize the ignorecase based on searching.
	* @Default {true}
	*/
	ignoreCase?: boolean;
}

export interface StackedHeaderRowsStackedHeaderColumns {

	/**Gets or sets a value that indicates the headerText for the particular stacked header column.
	* @Default {null}
	*/
	headerText?: string;

	/**Gets or sets a value that indicates the column for the particular stacked header column.
	* @Default {null}
	*/
	column?: string;
}

export interface StackedHeaderRows {

	/**Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows.
	* @Default {Array}
	*/
	stackedHeaderColumns?: Array<StackedHeaderRowsStackedHeaderColumns>;
}

export interface TooltipSettings {

	/**To enable or disable the tooltip display.
	* @Default {false}
	*/
	enable?: boolean;

	/**To customize the tooltip display based on your requirements.
	* @Default {null}
	*/
	template?: string;
}

enum Target{

	///Sets context menu to kanban header
	Header,

	///Sets context menu to kanban content
	Content,

	///Sets context menu to kanban
	All
}


enum EditMode{

	///Creates kanban with editMode as Dialog
	Dialog,

	///Creates kanban with editMode as DialogTemplate
	DialogTemplate
}


enum EditingType{

	///Allows to set edit type as string edit type
	String,

	///Allows to set edit type as numeric edit type 
	Numeric,

	///Allows to set edit type as drop down edit type
	Dropdown,

	///Allows to set edit type as date picker edit type
	DatePicker,

	///Allows to set edit type as date time picker edit type
	DateTimePicker,

	///Allows to set edit type as text area edit type
	TextArea,

	///Allows to set edit type as RTE edit type
	RTE
}


enum SelectionType{

	///Support for Single selection in Kanban
	Single,

	///Support for multiple selections in Kanban
	Multiple
}

}

class Rotator extends ej.Widget {
	static fn: Rotator;
	constructor(element: JQuery, options?: Rotator.Model);
	constructor(element: Element, options?: Rotator.Model);
	model:Rotator.Model;
	defaults:Rotator.Model;

	/** Disables the Rotator control.
	* @returns {void}
	*/
	disable(): void;

	/** Enables the Rotator control.
	* @returns {void}
	*/
	enable(): void;

	/** This method is used to get the current slide index.
	* @returns {number}
	*/
	getIndex(): number;

	/** This method is used to move a slide to the specified index.
	* @param {number} index of an slide
	* @returns {void}
	*/
	gotoIndex(index: number): void;

	/** This method is used to pause autoplay.
	* @returns {void}
	*/
	pause(): void;

	/** This method is used to move slides continuously (or start autoplay) in the specified autoplay direction.
	* @returns {void}
	*/
	play(): void;

	/** This method is used to move to the next slide from the current slide. If the current slide is the last slide, then the first slide will be treated as the next slide.
	* @returns {void}
	*/
	slideNext(): void;

	/** This method is used to move to the previous slide from the current slide. If the current slide is the first slide, then the last slide will be treated as the previous slide.
	* @returns {void}
	*/
	slidePrevious(): void;
}
export module Rotator{

export interface Model {

	/**Turns on keyboard interaction with the Rotator items. You must set this property to true to access the following keyboard shortcuts:
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Sets the animationSpeed of slide transition.
	* @Default {600}
	*/
	animationSpeed?: string|number;

	/**Specifies the animationType type for the Rotator Item. animationType options include slide, fastSlide, slowSlide, and other custom easing animationTypes.
	* @Default {slide}
	*/
	animationType?: string;

	/**Enables the circular mode item rotation.
	* @Default {true}
	*/
	circularMode?: boolean;

	/**Specify the CSS class to Rotator to achieve custom theme.
	*/
	cssClass?: string;

	/**Specify the list of data which contains a set of data fields. Each data value is used to render an item for the Rotator.
	* @Default {null}
	*/
	dataSource?: any;

	/**Sets the delay between the Rotator Items move after the slide transition.
	* @Default {500}
	*/
	delay?: number;

	/**Specifies the number of Rotator Items to be displayed.
	* @Default {1}
	*/
	displayItemsCount?: string|number;

	/**Rotates the Rotator Items continuously without user interference.
	* @Default {false}
	*/
	enableAutoPlay?: boolean;

	/**Enables or disables the Rotator control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies right to left transition of slides.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Defines mapping fields for the data items of the Rotator.
	* @Default {null}
	*/
	fields?: Fields;

	/**Sets the space between the Rotator Items.
	*/
	frameSpace?: string|number;

	/**Resizes the Rotator when the browser is resized.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Specifies the number of Rotator Items to navigate on a single click (next/previous/play buttons). The navigateSteps property value must be less than or equal to the displayItemsCount property value.
	* @Default {1}
	*/
	navigateSteps?: string|number;

	/**Specifies the orientation for the Rotator control, that is, whether it must be rendered horizontally or vertically. See Orientation
	* @Default {ej.Orientation.Horizontal}
	*/
	orientation?: ej.Orientation|string;

	/**Specifies the position of the showPager in the Rotator Item. See PagerPosition
	* @Default {outside}
	*/
	pagerPosition?: string|ej.Rotator.PagerPosition;

	/**Retrieves data from remote data. This property is applicable only when a remote data source is used.
	* @Default {null}
	*/
	query?: string;

	/**If the Rotator Item is an image, you can specify a caption for the Rotator Item. The caption text for each Rotator Item must be set by using the title attribute of the respective tag. The caption cannot be displayed if multiple Rotator Items are present.
	* @Default {false}
	*/
	showCaption?: boolean;

	/**Turns on or off the slide buttons (next and previous) in the Rotator Items. Slide buttons are used to navigate the Rotator Items.
	* @Default {true}
	*/
	showNavigateButton?: boolean;

	/**Turns on or off the pager support in the Rotator control. The Pager is used to navigate the Rotator Items.
	* @Default {true}
	*/
	showPager?: boolean;

	/**Enable play / pause button on rotator.
	* @Default {false}
	*/
	showPlayButton?: boolean;

	/**Turns on or off thumbnail support in the Rotator control. Thumbnail is used to navigate between slides. Thumbnail supports only single slide transition You must specify the source for thumbnail elements through the thumbnailSourceID property.
	* @Default {false}
	*/
	showThumbnail?: boolean;

	/**Sets the height of a Rotator Item.
	*/
	slideHeight?: string|number;

	/**Sets the width of a Rotator Item.
	*/
	slideWidth?: string|number;

	/**Sets the index of the slide that must be displayed first.
	* @Default {0}
	*/
	startIndex?: string|number;

	/**Pause the auto play while hover on the rotator content.
	* @Default {false}
	*/
	stopOnHover?: boolean;

	/**Specifies the source for thumbnail elements.
	* @Default {null}
	*/
	thumbnailSourceID?: any;

	/**This event is fired when the Rotator slides are changed.*/
	change? (e: ChangeEventArgs): void;

	/**This event is fired when the Rotator control is initialized.*/
	create? (e: CreateEventArgs): void;

	/**This event is fired when the Rotator control is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**This event is fired when a pager is clicked.*/
	pagerClick? (e: PagerClickEventArgs): void;

	/**This event is fired when enableAutoPlay is started.*/
	start? (e: StartEventArgs): void;

	/**This event is fired when autoplay is stopped or paused.*/
	stop? (e: StopEventArgs): void;

	/**This event is fired when a thumbnail pager is clicked.*/
	thumbItemClick? (e: ThumbItemClickEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**the current rotator id.
	*/
	itemId?: string;

	/**returns the current slide index.
	*/
	activeItemIndex?: number;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface PagerClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**the current rotator id.
	*/
	itemId?: string;

	/**returns the current slide index.
	*/
	activeItemIndex?: number;
}

export interface StartEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**the current rotator id.
	*/
	itemId?: string;

	/**returns the current slide index.
	*/
	activeItemIndex?: number;
}

export interface StopEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**the current rotator id.
	*/
	itemId?: string;

	/**returns the current slide index.
	*/
	activeItemIndex?: number;
}

export interface ThumbItemClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the rotator model
	*/
	model?: ej.Rotator.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**the current rotator id.
	*/
	itemId?: string;

	/**returns the current slide index.
	*/
	activeItemIndex?: number;
}

export interface Fields {

	/**Specifies a link for the image.
	*/
	linkAttribute?: string;

	/**Specifies where to open a given link.
	*/
	targetAttribute?: string;

	/**Specifies a caption for the image.
	*/
	text?: string;

	/**Specifies a caption for the thumbnail image.
	*/
	thumbnailText?: string;

	/**Specifies the URL for an thumbnail image.
	*/
	thumbnailUrl?: string;

	/**Specifies the URL for an image.
	*/
	url?: string;
}

enum PagerPosition{

	///string
	BottomLeft,

	///string
	BottomRight,

	///string
	Outside,

	///string
	TopCenter,

	///string
	TopLeft,

	///string
	TopRight
}

}

class RTE extends ej.Widget {
	static fn: RTE;
	constructor(element: JQuery, options?: RTE.Model);
	constructor(element: Element, options?: RTE.Model);
	model:RTE.Model;
	defaults:RTE.Model;

	/** Returns the range object.
	* @returns {void}
	*/
	createRange(): void;

	/** Disables the RTE control.
	* @returns {void}
	*/
	disable(): void;

	/** Disables the corresponding tool in the RTE ToolBar.
	* @returns {void}
	*/
	disableToolbarItem(): void;

	/** Enables the RTE control.
	* @returns {void}
	*/
	enable(): void;

	/** Enables the corresponding tool in the toolbar when the tool is disabled.
	* @returns {void}
	*/
	enableToolbarItem(): void;

	/** Performs the action value based on the given command.
	* @returns {void}
	*/
	executeCommand(): void;

	/** Focuses the RTE control.
	* @returns {void}
	*/
	focus(): void;

	/** Gets the command status of the selected text based on the given comment in the RTE control.
	* @returns {void}
	*/
	getCommandStatus(): void;

	/** Gets the HTML string from the RTE control.
	* @returns {void}
	*/
	getDocument(): void;

	/** Gets the HTML string from the RTE control.
	* @returns {void}
	*/
	getHtml(): void;

	/** Gets the selected html string from the RTE control.
	* @returns {void}
	*/
	getSelectedHtml(): void;

	/** Gets the content as string from the RTE control.
	* @returns {void}
	*/
	getText(): void;

	/** Hides the RTE control.
	* @returns {void}
	*/
	hide(): void;

	/** Inserts new item to the target contextmenu node.
	* @returns {void}
	*/
	insertMenuOption(): void;

	/** This method helps to insert/paste the content at the current cursor (caret) position or the selected content to be replaced with our text by passing the value as parameter to the pasteContent method in the Editor.
	* @returns {void}
	*/
	pasteContent(): void;

	/** Refreshes the RTE control.
	* @returns {void}
	*/
	refresh(): void;

	/** Removes the target menu item from the RTE contextmenu.
	* @returns {void}
	*/
	removeMenuOption (): void;

	/** Removes the given tool from the RTE Toolbar.
	* @returns {void}
	*/
	removeToolbarItem(): void;

	/** Selects all the contents within the RTE.
	* @returns {void}
	*/
	selectAll(): void;

	/** Selects the contents in the given range.
	* @returns {void}
	*/
	selectRange(): void;

	/** Sets the color picker model type rendered initially in the RTE control.
	* @returns {void}
	*/
	setColorPickerType(): void;

	/** Sets the HTML string from the RTE control.
	* @returns {void}
	*/
	setHtml(): void;

	/** Displays the RTE control.
	* @returns {void}
	*/
	show(): void;
}
export module RTE{

export interface Model {

	/**Enables/disables the editing of the content.
	* @Default {True}
	*/
	allowEditing?: boolean;

	/**RTE control can be accessed through the keyboard shortcut keys.
	* @Default {True}
	*/
	allowKeyboardNavigation?: boolean;

	/**When the property is set to true, it focuses the RTE at the time of rendering.
	* @Default {false}
	*/
	autoFocus?: boolean;

	/**Based on the content size, its height is adjusted instead of adding the scrollbar.
	* @Default {false}
	*/
	autoHeight?: boolean;

	/**Sets the colorCode to display the color of the fontColor and backgroundColor in the font tools of the RTE.
	* @Default {[000000, FFFFFF, C4C4C4, ADADAD, 595959, 262626, 4f81bd, dbe5f1, b8cce4, 95b3d7, 366092, 244061, c0504d, f2dcdb, e5b9b7, d99694, 953734,632423, 9bbb59, ebf1dd, d7e3bc, c3d69b, 76923c, 4f6128, 8064a2, e5e0ec, ccc1d9, b2a2c7, 5f497a, 3f3151, f79646, fdeada, fbd5b5, fac08f,e36c09, 974806]}
	*/
	colorCode?: any;

	/**The number of columns given are rendered in the color palate popup.
	* @Default {6}
	*/
	colorPaletteColumns?: number;

	/**The number of rows given are rendered in the color palate popup.
	* @Default {6}
	*/
	colorPaletteRows?: number;

	/**Sets the root class for the RTE theme. This cssClass API helps the usage of custom skinning option for the RTE control by including this root class in CSS.
	*/
	cssClass?: string;

	/**Enables/disables the RTE controlâ€™s accessibility or interaction.
	* @Default {True}
	*/
	enabled?: boolean;

	/**When the property is set to true, it returns the encrypted text.
	* @Default {false}
	*/
	enableHtmlEncode?: boolean;

	/**Maintain the values of the RTE after page reload.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Shows the resize icon and enables the resize option in the RTE.
	* @Default {True}
	*/
	enableResize?: boolean;

	/**Shows the RTE in the RTL direction.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Formats the contents based on the XHTML rules.
	* @Default {false}
	*/
	enableXHTML?: boolean;

	/**Enables the tab key action with the RichTextEditor content.
	* @Default {True}
	*/
	enableTabKeyNavigation?: boolean;

	/**Load the external CSS file inside Iframe.
	* @Default {null}
	*/
	externalCSS?: string;

	/**This API allows to enable the file browser support in the RTE control to browse, create, delete and upload the files in the specified current directory.
	* @Default {null}
	*/
	fileBrowser?: FileBrowser;

	/**Sets the fontName in the RTE.
	* @Default {{text: Segoe UI, value: Segoe UI },{text: Arial, value: Arial,Helvetica,sans-serif },{text: Courier New, value: Courier New,Courier,Monospace },{text: Georgia, value: Georgia,serif },{text: Impact, value: Impact,Charcoal,sans-serif },{text: Lucida Console, value: Lucida Console,Monaco,Monospace },{text: Tahoma, value: Tahoma,Geneva,sans-serif },{text: Times New Roman, value: Times New Roman },{text: Trebuchet MS, value: Trebuchet MS,Helvetica,sans-serif },{text: Verdana, value: Verdana,Geneva,sans-serif}}
	*/
	fontName?: any;

	/**Sets the fontSize in the RTE.
	* @Default {{ text: 1, value: 1 },{ text: 2 (10pt), value: 2 },{ text: 3 (12pt), value: 3 },{ text: 4 (14pt), value: 4 },{ text: 5 (18pt), value: 5 },{ text: 6 (24pt), value: 6 },{ text: 7 (36pt), value: 7 }}
	*/
	fontSize?: any;

	/**Sets the format in the RTE.
	* @Default {{ text: Paragraph, value: &lt;p&gt;, spriteCssClass: e-paragraph },{ text: Quotation, value: &lt;blockquote&gt;, spriteCssClass: e-quotation },{ text: Heading 1, value: &lt;h1&gt;, spriteCssClass: e-h1 },{ text: Heading 2, value: &lt;h2&gt;, spriteCssClass: e-h2 },{ text: Heading 3, value: &lt;h3&gt;, spriteCssClass: e-h3 },{ text: Heading 4, value: &lt;h4&gt;, spriteCssClass: e-h4 },{ text: Heading 5, value: &lt;h5&gt;, spriteCssClass: e-h5 },{ text: Heading 6, value: &lt;h6&gt;, spriteCssClass: e-h6}}
	*/
	format?: string;

	/**Defines the height of the RTE textbox.
	* @Default {370}
	*/
	height?: string|number;

	/**Specifies the HTML Attributes of the ejRTE.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Sets the given attributes to the iframe body element.
	* @Default {{}}
	*/
	iframeAttributes?: any;

	/**This API allows the image browser to support in the RTE control to browse, create, delete, and upload the image files to the specified current directory.
	* @Default {null}
	*/
	imageBrowser?: ImageBrowser;

	/**Enables/disables responsive support for the RTE control toolbar items during the window resizing time.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Sets the culture in the RTE when you set the localization values are needs to be assigned to the corresponding text as follows.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the maximum height for the RTE outer wrapper element.
	* @Default {null}
	*/
	maxHeight?: string|number;

	/**Sets the maximum length for the RTE outer wrapper element.
	* @Default {7000}
	*/
	maxLength?: number;

	/**Sets the maximum width for the RTE outer wrapper element.
	* @Default {null}
	*/
	maxWidth?: string|number;

	/**Sets the minimum height for the RTE outer wrapper element.
	* @Default {280}
	*/
	minHeight?: string|number;

	/**Sets the minimum width for the RTE outer wrapper element.
	* @Default {400}
	*/
	minWidth?: string|number;

	/**Sets the name in the RTE. When the name value is not initialized, the ID value is assigned to the name.
	*/
	name?: string;

	/**Shows ClearAll icon in the RTE footer.
	* @Default {false}
	*/
	showClearAll?: boolean;

	/**Shows the clear format in the RTE footer.
	* @Default {true}
	*/
	showClearFormat?: boolean;

	/**Shows the Custom Table in the RTE.
	* @Default {True}
	*/
	showCustomTable?: boolean;

	/**Shows custom contextmenu with the RTE.
	* @Default {True}
	*/
	showContextMenu?: boolean;

	/**This API is used to set the default dimensions for the image and video. When this property is set to true, the image and video dialog displays the dimension option.
	* @Default {false}
	*/
	showDimensions?: boolean;

	/**Shows the FontOption in the RTE.
	* @Default {True}
	*/
	showFontOption?: boolean;

	/**Shows footer in the RTE. When the footer is enabled, it displays the html tag, word Count, character count, clear format, resize icon and clear all the content icons, by default.
	* @Default {false}
	*/
	showFooter?: boolean;

	/**Shows the HtmlSource in the RTE footer.
	* @Default {false}
	*/
	showHtmlSource?: boolean;

	/**When the cursor is placed or when the text is selected in the RTE, it displays the tag info in the footer.
	* @Default {True}
	*/
	showHtmlTagInfo?: boolean;

	/**Shows the toolbar in the RTE.
	* @Default {True}
	*/
	showToolbar?: boolean;

	/**Counts the total characters and displays it in the RTE footer.
	* @Default {True}
	*/
	showCharCount?: boolean;

	/**Counts the total words and displays it in the RTE footer.
	* @Default {True}
	*/
	showWordCount?: boolean;

	/**The given number of columns render the insert table pop.
	* @Default {10}
	*/
	tableColumns?: number;

	/**The given number of rows render the insert table pop.
	* @Default {8}
	*/
	tableRows?: number;

	/**Sets the tools in the RTE and gets the inner display order of the corresponding group element. Tools are dependent on the toolsList property.
	* @Default {formatStyle: [format],style: [bold, italic, underline, strikethrough],alignment: [justifyLeft, justifyCenter, justifyRight, justifyFull],lists: [unorderedList, orderedList],indenting: [outdent, indent],doAction: [undo, redo],links: [createLink,removeLink],images: [image],media: [video],tables: [createTable, addRowAbove, addRowBelow, addColumnLeft, addColumnRight, deleteRow, deleteColumn, deleteTable]],view:[â€œfullScreenâ€,zoomIn,zoomOut],print:[print]}
	*/
	tools?: Tools;

	/**Specifies the list of groups and order of those groups displayed in the RTE toolbar.  The toolsList property is used to get the root group order and tools property is used to get the inner order of the corresponding groups displayed. When the value is not specified, it gets its default display order and tools.
	* @Default {[formatStyle, font, style, effects, alignment, lists, indenting, clipboard, doAction, clear, links, images, media, tables, casing,view, customTools,print,edit]}
	*/
	toolsList?: Array<any>;

	/**Gets the undo stack limit.
	* @Default {50}
	*/
	undoStackLimit?: number;

	/**The given string value is displayed in the editable area.
	* @Default {null}
	*/
	value?: string;

	/**Sets the jquery validation rules to the Rich Text Editor.
	* @Default {null}
	*/
	validationRules?: any;

	/**Sets the jquery validation error message to the Rich Text Editor.
	* @Default {null}
	*/
	validationMessage?: any;

	/**Defines the width of the RTE textbox.
	* @Default {786}
	*/
	width?: string|number;

	/**Increases and decreases the contents zoom range in percentage
	* @Default {0.05}
	*/
	zoomStep?: string|number;

	/**Fires when changed successfully.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when the RTE is created successfully*/
	create? (e: CreateEventArgs): void;

	/**Fires when mouse click on menu items.*/
	contextMenuClick? (e: ContextMenuClickEventArgs): void;

	/**Fires before the RTE is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when the commands are executed successfully.*/
	execute? (e: ExecuteEventArgs): void;

	/**Fires when the keydown action is successful.*/
	keydown? (e: KeydownEventArgs): void;

	/**Fires when the keyup action is successful.*/
	keyup? (e: KeyupEventArgs): void;

	/**Fires before the RTE Edit area is rendered and after the toolbar is rendered.*/
	preRender? (e: PreRenderEventArgs): void;
}

export interface ChangeEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the RTE model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface ContextMenuClickEventArgs {

	/**returns clicked menu item text.
	*/
	text?: string;

	/**returns clicked menu item element.
	*/
	element?: any;

	/**returns the selected item.
	*/
	selectedItem?: number;
}

export interface DestroyEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface ExecuteEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface KeydownEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface KeyupEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface PreRenderEventArgs {

	/**When the event is canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**Returns the RTE model
	*/
	model?: any;

	/**Returns the name of the event
	*/
	type?: string;
}

export interface FileBrowser {

	/**This API is used to receive the server-side handler for file related operations.
	*/
	ajaxAction?: string;

	/**Specifies the file type extension shown in the file browser window.
	*/
	extensionAllow?: string;

	/**Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected files to the current directory.
	*/
	filePath?: string;
}

export interface ImageBrowser {

	/**This API is used to receive the server-side handler for the file related operations.
	*/
	ajaxAction?: string;

	/**Specifies the file type extension shown in the image browser window.
	*/
	extensionAllow?: string;

	/**Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected images to the current directory.
	*/
	filePath?: string;
}

export interface ToolsCustomOrderedList {

	/**Specifies the name for customOrderedList item.
	*/
	name?: string;

	/**Specifies the title for customOrderedList item.
	*/
	tooltip?: string;

	/**Specifies the styles for customOrderedList item.
	*/
	css?: string;

	/**Specifies the text for customOrderedList item.
	*/
	text?: string;

	/**Specifies the list style for customOrderedList item.
	*/
	listStyle?: string;

	/**Specifies the image for customOrderedList item.
	*/
	listImage?: string;
}

export interface ToolsCustomUnorderedList {

	/**Specifies the name for customUnorderedList item.
	*/
	name?: string;

	/**Specifies the title for customUnorderedList item.
	*/
	tooltip?: string;

	/**Specifies the styles for customUnorderedList item.
	*/
	css?: string;

	/**Specifies the text for customUnorderedList item.
	*/
	text?: string;

	/**Specifies the list style for customUnorderedList item.
	*/
	listStyle?: string;

	/**Specifies the image for customUnorderedList item.
	*/
	listImage?: string;
}

export interface Tools {

	/**Specifies the alignment tools and the display order of this tool in the RTE toolbar.
	*/
	alignment?: any;

	/**Specifies the casing tools and the display order of this tool in the RTE toolbar.
	*/
	casing?: Array<any>;

	/**Specifies the clear tools and the display order of this tool in the RTE toolbar.
	*/
	clear?: Array<any>;

	/**Specifies the clipboard tools and the display order of this tool in the RTE toolbar.
	*/
	clipboard?: Array<any>;

	/**Specifies the edit tools and the displays tool in the RTE toolbar.
	*/
	edit?: Array<any>;

	/**Specifies the doAction tools and the display order of this tool in the RTE toolbar.
	*/
	doAction?: Array<any>;

	/**Specifies the effect of tools and the display order of this tool in RTE toolbar.
	*/
	effects?: Array<any>;

	/**Specifies the font tools and the display order of this tool in the RTE toolbar.
	*/
	font?: Array<any>;

	/**Specifies the formatStyle tools and the display order of this tool in the RTE toolbar.
	*/
	formatStyle?: Array<any>;

	/**Specifies the image tools and the display order of this tool in the RTE toolbar.
	*/
	images?: Array<any>;

	/**Specifies the indent tools and the display order of this tool in the RTE toolbar.
	*/
	indenting?: Array<any>;

	/**Specifies the link tools and the display order of this tool in the RTE toolbar.
	*/
	links?: Array<any>;

	/**Specifies the list tools and the display order of this tool in the RTE toolbar.
	*/
	lists?: Array<any>;

	/**Specifies the media tools and the display order of this tool in the RTE toolbar.
	*/
	media?: Array<any>;

	/**Specifies the style tools and the display order of this tool in the RTE toolbar.
	*/
	style?: Array<any>;

	/**Specifies the table tools and the display order of this tool in the RTE toolbar.
	*/
	tables?: Array<any>;

	/**Specifies the view tools and the display order of this tool in the RTE toolbar.
	*/
	view?: Array<any>;

	/**Specifies the print tools and the display order of this tool in the RTE toolbar.
	*/
	print?: Array<any>;

	/**Specifies the customOrderedList tools and the display order of this tool in the RTE toolbar.
	*/
	customOrderedList?: Array<ToolsCustomOrderedList>;

	/**Specifies the customUnOrderedList tools and the display order of this tool in the RTE toolbar.
	*/
	customUnorderedList?: Array<ToolsCustomUnorderedList>;
}
}

class Slider extends ej.Widget {
	static fn: Slider;
	constructor(element: JQuery, options?: Slider.Model);
	constructor(element: Element, options?: Slider.Model);
	model:Slider.Model;
	defaults:Slider.Model;

	/** To disable the slider
	* @returns {void}
	*/
	disable(): void;

	/** To enable the slider
	* @returns {void}
	*/
	enable(): void;

	/** To get value from slider handle
	* @returns {number}
	*/
	getValue(): number;

	/** To set value to slider handle
	* @returns {void}
	*/
	setValue(): void;
}
export module Slider{

export interface Model {

	/**Specifies the animationSpeed of the slider.
	* @Default {500}
	*/
	animationSpeed?: number;

	/**Specify the CSS class to slider to achieve custom theme.
	*/
	cssClass?: string;

	/**Specifies the animation behavior of the slider.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Specifies the state of the slider.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specify the enablePersistence to slider to save current model value to browser cookies for state maintains
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specifies the Right to Left Direction of the slider.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the height of the slider.
	* @Default {14}
	*/
	height?: string;

	/**Specifies the HTML Attributes of the ejSlider.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the incremental step value of the slider.
	* @Default {1}
	*/
	incrementStep?: number;

	/**Specifies the distance between two major (large) ticks from the scale of the slider.
	* @Default {10}
	*/
	largeStep?: number;

	/**Specifies the ending value of the slider.
	* @Default {100}
	*/
	maxValue?: number;

	/**Specifies the starting value of the slider.
	* @Default {0}
	*/
	minValue?: number;

	/**Specifies the orientation of the slider.
	* @Default {ej.orientation.Horizontal}
	*/
	orientation?: ej.Orientation|string;

	/**Specifies the readOnly of the slider.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Specifies the rounded corner behavior for slider.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Shows/Hide the major (large) and minor (small) ticks in the scale of the slider.
	* @Default {false}
	*/
	showScale?: boolean;

	/**Specifies the small ticks from the scale of the slider.
	* @Default {true}
	*/
	showSmallTicks?: boolean;

	/**Specifies the showTooltip to shows the current Slider value, while moving the Slider handle or clicking on the slider handle of the slider.
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**Specifies the sliderType of the slider.
	* @Default {ej.SliderType.Default}
	*/
	sliderType?: ej.slider.sliderType|string;

	/**Specifies the distance between two minor (small) ticks from the scale of the slider.
	* @Default {1}
	*/
	smallStep?: number;

	/**Specifies the value of the slider. But it's not applicable for range slider. To range slider we can use values property.
	* @Default {0}
	*/
	value?: number;

	/**Specifies the values of the range slider. But it's not applicable for default and minRange sliders. we can use value property for default and minRange sliders.
	* @Default {[minValue,maxValue]}
	*/
	values?: Array<any>;

	/**Specifies the width of the slider.
	* @Default {100%}
	*/
	width?: string;

	/**Fires once Slider control value is changed successfully.*/
	change? (e: ChangeEventArgs): void;

	/**Fires once Slider control has been created successfully.*/
	create? (e: CreateEventArgs): void;

	/**Fires when Slider control has been destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires once Slider control is sliding successfully.*/
	slide? (e: SlideEventArgs): void;

	/**Fires once Slider control is started successfully.*/
	start? (e: StartEventArgs): void;

	/**Fires when Slider control is stopped successfully.*/
	stop? (e: StopEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns current handle number or index
	*/
	sliderIndex?: number;

	/**returns slider id.
	*/
	id?: string;

	/**returns the slider model.
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the slider value.
	*/
	value?: number;

	/**returns true if event triggered by interaction else returns false. 
	*/
	isInteraction?: boolean;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the slider model
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the slider model
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface SlideEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns current handle number or index
	*/
	sliderIndex?: number;

	/**returns slider id
	*/
	id?: string;

	/**returns the slider model
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the slider value
	*/
	value?: number;
}

export interface StartEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns current handle number or index
	*/
	sliderIndex?: number;

	/**returns slider id
	*/
	id?: string;

	/**returns the slider model
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the slider value
	*/
	value?: number;
}

export interface StopEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns current handle number or index
	*/
	sliderIndex?: number;

	/**returns slider id
	*/
	id?: string;

	/**returns the slider model
	*/
	model?: ej.Slider.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the slider value
	*/
	value?: number;
}
}
module slider
{
enum sliderType
{
//Shows default slider
Default,
//Shows minRange slider
MinRange,
//Shows Range slider
Range,
}
}

class SplitButton extends ej.Widget {
	static fn: SplitButton;
	constructor(element: JQuery, options?: SplitButton.Model);
	constructor(element: Element, options?: SplitButton.Model);
	model:SplitButton.Model;
	defaults:SplitButton.Model;

	/** destroy the split button widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To disable the split button
	* @returns {void}
	*/
	disable(): void;

	/** To Enable the split button
	* @returns {void}
	*/
	enable(): void;

	/** To Hide the list content of the split button.
	* @returns {void}
	*/
	hide(): void;

	/** To show the list content of the split button.
	* @returns {void}
	*/
	show(): void;
}
export module SplitButton{

export interface Model {

	/**Specifies the arrowPosition of the Split or Dropdown Button.See arrowPosition
	* @Default {ej.ArrowPosition.Right}
	*/
	arrowPosition?: string|ej.ArrowPosition;

	/**Specifies the buttonMode like Split or Dropdown Button.See ButtonMode
	* @Default {ej.ButtonMode.Split}
	*/
	buttonMode?: string|ej.ButtonMode;

	/**Specifies the contentType of the Split Button.See ContentType
	* @Default {ej.ContentType.TextOnly}
	*/
	contentType?: string|ej.ContentType;

	/**Set the root class for Split Button control theme
	*/
	cssClass?: string;

	/**Specifies the disabling of Split Button if enabled is set to false.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies the enableRTL property for Split Button while initialization.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the height of the Split Button.
	* @Default {â€œâ€}
	*/
	height?: string|number;

	/**Specifies the HTML Attributes of the Split Button.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the imagePosition of the Split Button.See imagePositions
	* @Default {ej.ImagePosition.ImageRight}
	*/
	imagePosition?: string|ej.ImagePosition;

	/**Specifies the image content for Split Button while initialization.
	*/
	prefixIcon?: string;

	/**Specifies the showRoundedCorner property for Split Button while initialization.
	* @Default {false}
	*/
	showRoundedCorner?: string;

	/**Specifies the size of the Button. See ButtonSize
	* @Default {ej.ButtonSize.Normal}
	*/
	size?: string|ej.ButtonSize;

	/**Specifies the image content for Split Button while initialization.
	*/
	suffixIcon?: string;

	/**Specifies the list content for Split Button while initialization
	*/
	targetID?: string;

	/**Specifies the text content for Split Button while initialization.
	*/
	text?: string;

	/**Specifies the width of the Split Button.
	* @Default {â€œâ€}
	*/
	width?: string|number;

	/**Fires before menu of the split button control is opened.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Fires when Button control is clicked successfully*/
	click? (e: ClickEventArgs): void;

	/**Fires before the list content of Button control is closed*/
	close? (e: CloseEventArgs): void;

	/**Fires after Split Button control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the Split Button is destroyed successfully*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when a menu item is Hovered out successfully*/
	itemMouseOut? (e: ItemMouseOutEventArgs): void;

	/**Fires when a menu item is Hovered in successfully*/
	itemMouseOver? (e: ItemMouseOverEventArgs): void;

	/**Fires when a menu item is clicked successfully*/
	itemSelected? (e: ItemSelectedEventArgs): void;

	/**Fires before the list content of Button control is opened*/
	open? (e: OpenEventArgs): void;
}

export interface BeforeOpenEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ClickEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target of the current object.
	*/
	target?: any;

	/**return the button state
	*/
	status?: boolean;
}

export interface CloseEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ItemMouseOutEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;
}

export interface ItemMouseOutEvent {

	/**return the menu item id
	*/
	ID?: string;

	/**return the clicked menu item text
	*/
	Text?: string;
}

export interface ItemMouseOverEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the clicked menu item element
	*/
	element?: any;

	/**returns the event
	*/
	event?: any;
}

export interface ItemMouseOverEvent {

	/**return the menu item id
	*/
	ID?: string;

	/**return the clicked menu item text
	*/
	Text?: string;
}

export interface ItemSelectedEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the clicked menu item element
	*/
	element?: any;

	/**returns the selected item
	*/
	selectedItem?: any;

	/**return the menu id
	*/
	menuId?: string;

	/**return the clicked menu item text
	*/
	menuText?: string;
}

export interface OpenEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the split button model
	*/
	model?: ej.SplitButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}
enum ArrowPosition
{
//To set Left arrowPosition of the split button
Left,
//To set Right arrowPosition of the split button
Right,
//To set Top arrowPosition of the split button
Top,
//To set Bottom arrowPosition of the split button
Bottom,
}

class Splitter extends ej.Widget {
	static fn: Splitter;
	constructor(element: JQuery, options?: Splitter.Model);
	constructor(element: Element, options?: Splitter.Model);
	model:Splitter.Model;
	defaults:Splitter.Model;

	/** To add a new pane to splitter control.
	* @param {string} content of pane.
	* @param {any} pane properties.
	* @param {number} index of pane.
	* @returns {HTMLElement}
	*/
	addItem(content: string, property: any, index: number): HTMLElement;

	/** To collapse the splitter control pane.
	* @param {number} index number of pane.
	* @returns {void}
	*/
	collapse(paneIndex: number): void;

	/** To expand the splitter control pane.
	* @param {number} index number of pane.
	* @returns {void}
	*/
	expand(paneIndex: number): void;

	/** To refresh the splitter control pane resizing.
	* @returns {void}
	*/
	refresh(): void;

	/** To remove a specified pane from the splitter control.
	* @param {number} index of pane.
	* @returns {void}
	*/
	removeItem(index: number): void;
}
export module Splitter{

export interface Model {

	/**Turns on keyboard interaction with the Splitter panes. You must set this property to true to access the keyboard shortcuts of ejSplitter.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Specify animation speed for the Splitter pane movement, while collapsing and expanding.
	* @Default {300}
	*/
	animationSpeed?: number;

	/**Specify the CSS class to splitter control to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Specifies the animation behavior of the splitter.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Specifies the splitter control to be displayed in right to left direction.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specify height for splitter control.
	* @Default {null}
	*/
	height?: string;

	/**Specifies the HTML Attributes of the Splitter.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specify window resizing behavior for splitter control.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Specify the orientation for spliter control. See orientation
	* @Default {ej.orientation.Horizontal or â€œhorizontalâ€}
	*/
	orientation?: ej.Orientation|string;

	/**Specify properties for each pane like paneSize, minSize, maxSize, collapsible, resizable.
	* @Default {[]}
	*/
	properties?: Array<any>;

	/**Specify width for splitter control.
	* @Default {null}
	*/
	width?: string;

	/**Fires before expanding / collapsing the split pane of splitter control.*/
	beforeExpandCollapse? (e: BeforeExpandCollapseEventArgs): void;

	/**Fires when splitter control pane has been created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when splitter control pane has been destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when expand / collapse operation in splitter control pane has been performed successfully.*/
	expandCollapse? (e: ExpandCollapseEventArgs): void;

	/**Fires when resize in splitter control pane.*/
	resize? (e: ResizeEventArgs): void;
}

export interface BeforeExpandCollapseEventArgs {

	/**if the event should be cancelled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns collapsed pane details.
	*/
	collapsed?: any;

	/**returns expanded pane details.
	*/
	expanded?: any;

	/**returns the splitter model.
	*/
	model?: ej.Splitter.Model;

	/**returns the current split bar index.
	*/
	splitbarIndex?: number;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**if the event should be cancelled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the splitter model.
	*/
	model?: ej.Splitter.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be cancelled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the splitter model.
	*/
	model?: ej.Splitter.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ExpandCollapseEventArgs {

	/**if the event should be cancelled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns collapsed pane details.
	*/
	collapsed?: any;

	/**returns expanded pane details.
	*/
	expanded?: any;

	/**returns the splitter model.
	*/
	model?: ej.Splitter.Model;

	/**returns the current split bar index.
	*/
	splitbarIndex?: number;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ResizeEventArgs {

	/**if the event should be cancelled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns previous pane details.
	*/
	prevPane?: any;

	/**returns next pane details.
	*/
	nextPane?: any;

	/**returns the splitter model.
	*/
	model?: ej.Splitter.Model;

	/**returns the current split bar index.
	*/
	splitbarIndex?: number;

	/**returns the name of the event.
	*/
	type?: string;
}
}

class Tab extends ej.Widget {
	static fn: Tab;
	constructor(element: JQuery, options?: Tab.Model);
	constructor(element: Element, options?: Tab.Model);
	model:Tab.Model;
	defaults:Tab.Model;

	/** Add new tab items with given name, url and given index position, if index null itâ€™s add last item.
	* @param {string} URL name / tab id.
	* @param {string} Tab Display name.
	* @param {number} Index position to placed , this is optional.
	* @param {string} specifies cssClass, this is optional.
	* @param {string} specifies id of tab, this is optional.
	* @returns {void}
	*/
	addItem(url: string, displayLabel: string, index: number, cssClass: string, id: string): void;

	/** To disable the tab control.
	* @returns {void}
	*/
	disable(): void;

	/** To enable the tab control.
	* @returns {void}
	*/
	enable(): void;

	/** This function get the number of tab rendered
	* @returns {number}
	*/
	getItemsCount(): number;

	/** This function hides the tab control.
	* @returns {void}
	*/
	hide(): void;

	/** This function hides the specified item tab in tab control.
	* @param {number} index of tab item.
	* @returns {void}
	*/
	hideItem(index: number): void;

	/** Remove the given index tab item.
	* @param {number} index of tab item.
	* @returns {void}
	*/
	removeItem(index: number): void;

	/** This function is to show the tab control.
	* @returns {void}
	*/
	show(): void;

	/** This function helps to show the specified hidden tab item in tab control.
	* @param {number} index of tab item.
	* @returns {void}
	*/
	showItem(index: number): void;
}
export module Tab{

export interface Model {

	/**Specifies the ajaxSettings option to load the content to the Tab control.
	*/
	ajaxSettings?: AjaxSettings;

	/**Tab items interaction with keyboard keys, like headers active navigation.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Allow to collapsing the active item, while click on the active header.
	* @Default {false}
	*/
	collapsible?: boolean;

	/**Set the root class for Tab theme. This cssClass API helps to use custom skinning option for Tab control.
	*/
	cssClass?: string;

	/**Disables the given tab headers and content panels.
	* @Default {[]}
	*/
	disabledItemIndex?: number[];

	/**Specifies the animation behavior of the tab.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**When this property is set to false, it disables the tab control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Enables the given tab headers and content panels.
	* @Default {[]}
	*/
	enabledItemIndex?: number[];

	/**Save current model value to browser cookies for state maintains. While refresh the Tab control page the model value apply from browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Display Right to Left direction for headers and panels text of tab.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specify to enable scrolling for Tab header.
	* @Default {false}
	*/
	enableTabScroll?: boolean;

	/**The event API to bind the action for active the tab items.
	* @Default {click}
	*/
	events?: string;

	/**Specifies the position of Tab header as top, bottom, left or right. See below to get availanle Position
	* @Default {top}
	*/
	headerPosition?: string | ej.Tab.Position;

	/**Set the height of the tab header element. Default this property value is null, so height take content height.
	* @Default {null}
	*/
	headerSize?: string|number;

	/**Height set the outer panel element. Default this property value is null, so height take content height.
	* @Default {null}
	*/
	height?: string|number;

	/**Adjust the content panel height for given option (content, auto and fill), by default panels height adjust based on the content.See below to get available HeightAdjustMode
	* @Default {content}
	*/
	heightAdjustMode?: string | ej.Tab.HeightAdjustMode;

	/**Specifies to hide a pane of Tab control.
	* @Default {[]}
	*/
	hiddenItemIndex?: Array<any>;

	/**Specifies the HTML Attributes of the Tab.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**The idPrefix property appends the given string on the added tab item idâ€™s in runtime.
	* @Default {ej-tab-}
	*/
	idPrefix?: string;

	/**Specifies the Tab header in active for given index value.
	* @Default {0}
	*/
	selectedItemIndex?: number;

	/**Display the close button for each tab items. While clicking on the close icon, particular tab item will be removed.
	* @Default {false}
	*/
	showCloseButton?: boolean;

	/**Display the Reload button for each tab items.
	* @Default {false}
	*/
	showReloadIcon?: boolean;

	/**Tab panels and headers to be displayed in rounded corner style.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Set the width for outer panel element, if not itâ€™s take parent width.
	* @Default {null}
	*/
	width?: string|number;

	/**Triggered after a tab item activated.*/
	itemActive? (e: ItemActiveEventArgs): void;

	/**Triggered before ajax content has been loaded.*/
	ajaxBeforeLoad? (e: AjaxBeforeLoadEventArgs): void;

	/**Triggered if error occurs in Ajax request.*/
	ajaxError? (e: AjaxErrorEventArgs): void;

	/**Triggered after ajax content load action.*/
	ajaxLoad? (e: AjaxLoadEventArgs): void;

	/**Triggered after a tab item activated.*/
	ajaxSuccess? (e: AjaxSuccessEventArgs): void;

	/**Triggered before a tab item activated.*/
	beforeActive? (e: BeforeActiveEventArgs): void;

	/**Triggered before a tab item remove.*/
	beforeItemRemove? (e: BeforeItemRemoveEventArgs): void;

	/**Triggered before a tab item Create.*/
	create? (e: CreateEventArgs): void;

	/**Triggered before a tab item destroy.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggered after new tab item add*/
	itemAdd? (e: ItemAddEventArgs): void;

	/**Triggered after tab item removed.*/
	itemRemove? (e: ItemRemoveEventArgs): void;
}

export interface ItemActiveEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: HTMLElement;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: HTMLElement;

	/**returns current active index.
	*/
	activeIndex?: number;

	/**returns, is it triggered by interaction or not.
	*/
	isInteraction?: boolean;
}

export interface AjaxBeforeLoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: HTMLElement;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: HTMLElement;

	/**returns current active index.
	*/
	activeIndex?: number;

	/**returns the url of ajax request
	*/
	url?: string;

	/**returns, is it triggered by interaction or not.
	*/
	isInteraction?: boolean;
}

export interface AjaxErrorEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns ajax data details.
	*/
	data?: any;

	/**returns the url of ajax request.
	*/
	url?: string;
}

export interface AjaxLoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: HTMLElement;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: HTMLElement;

	/**returns current active index.
	*/
	activeIndex?: number;

	/**returns the url of ajax request
	*/
	url?: string;

	/**returns, is it triggered by interaction or not.
	*/
	isInteraction?: boolean;
}

export interface AjaxSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**return ajax data.
	*/
	data?: any;

	/**returns ajax url
	*/
	url?: string;

	/**returns content of ajax request.
	*/
	content?: any;
}

export interface BeforeActiveEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns previous active tab header.
	*/
	prevActiveHeader?: HTMLElement;

	/**returns previous active index.
	*/
	prevActiveIndex?: number;

	/**returns current active tab header .
	*/
	activeHeader?: HTMLElement;

	/**returns current active index.
	*/
	activeIndex?: number;

	/**returns, is it triggered by interaction or not.
	*/
	isInteraction?: boolean;
}

export interface BeforeItemRemoveEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns current tab item index
	*/
	index?: number;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ItemAddEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns new added tab header.
	*/
	tabHeader?: HTMLElement;

	/**returns new added tab content panel.
	*/
	tabContent?: any;
}

export interface ItemRemoveEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tab model.
	*/
	model?: ej.Tab.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns removed tab header.
	*/
	removedTab?: HTMLElement;
}

export interface AjaxSettings {

	/**It specifies, whether to enable or disable asynchronous request.
	* @Default {true}
	*/
	async?: boolean;

	/**It specifies the page will be cached in the web browser.
	* @Default {false}
	*/
	cache?: boolean;

	/**It specifies the type of data is send in the query string.
	* @Default {html}
	*/
	contentType?: string;

	/**It specifies the data as an object, will be passed in the query string.
	* @Default {{}}
	*/
	data?: any;

	/**It specifies the type of data that you're expecting back from the response.
	* @Default {html}
	*/
	dataType?: string;

	/**It specifies the HTTP request type.
	* @Default {get}
	*/
	type?: string;
}

enum Position{

	///Tab headers display to top position
	Top,

	///Tab headers display to bottom position 
	Bottom,

	///Tab headers display to left position.
	Left,

	///Tab headers display to right position.
	Right
}


enum HeightAdjustMode{

	///string
	None,

	///string
	Content,

	///string
	Auto,

	///string
	Fill
}

}

class TagCloud extends ej.Widget {
	static fn: TagCloud;
	constructor(element: JQuery, options?: TagCloud.Model);
	constructor(element: Element, options?: TagCloud.Model);
	model:TagCloud.Model;
	defaults:TagCloud.Model;

	/** Inserts a new item into the TagCloud
	* @param {string} Insert new item into the TagCloud
	* @returns {void}
	*/
	insert(name: string): void;

	/** Inserts a new item into the TagCloud at a particular position.
	* @param {string} Inserts a new item into the TagCloud
	* @param {number} Inserts a new item into the TagCloud with the specified position
	* @returns {void}
	*/
	insertAt(name: string, position: number): void;

	/** Removes the item from the TagCloud based on the name. It removes all the tags which have the corresponding name
	* @param {string} name of the tag.
	* @returns {void}
	*/
	remove(name: string): void;

	/** Removes the item from the TagCloud based on the position. It removes the tags from the the corresponding position only.
	* @param {number} position of tag item.
	* @returns {void}
	*/
	removeAt(position: number): void;
}
export module TagCloud{

export interface Model {

	/**Specify the CSS class to button to achieve custom theme.
	*/
	cssClass?: string;

	/**The dataSource contains the list of data to display in a cloud format. Each data contains a link url, frequency to categorize the font size and a display text.
	* @Default {null}
	*/
	dataSource?: any;

	/**Sets the TagCloud and tag items direction as right to left alignment.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Defines the mapping fields for the data items of the TagCloud.
	* @Default {null}
	*/
	fields?: Fields;

	/**Defines the format for the TagCloud to display the tag items.See Format
	* @Default {ej.Format.Cloud}
	*/
	format?: string|ej.Format;

	/**Sets the maximum font size value for the tag items. The font size for the tag items will be generated in between the minimum and maximum font size values.
	* @Default {40px}
	*/
	maxFontSize?: string|number;

	/**Sets the minimum font size value for the tag items. The font size for the tag items will be generated in between the minimum and maximum font size values.
	* @Default {10px}
	*/
	minFontSize?: string|number;

	/**Define the query to retrieve the data from online server. The query is used only when the online dataSource is used.
	* @Default {null}
	*/
	query?: any;

	/**Shows or hides the TagCloud title. When this set to false, it hides the TagCloud header.
	* @Default {true}
	*/
	showTitle?: boolean;

	/**Sets the title image for the TagCloud. To show the title image, the showTitle property should be enabled.
	* @Default {null}
	*/
	titleImage?: string;

	/**Sets the title text for the TagCloud. To show the title text, the showTitle property should be enabled.
	* @Default {Title}
	*/
	titleText?: string;

	/**Event triggers when the TagCloud items are clicked*/
	click? (e: ClickEventArgs): void;

	/**Event triggers when the TagCloud are created*/
	create? (e: CreateEventArgs): void;

	/**Event triggers when the TagCloud are destroyed*/
	destroy? (e: DestroyEventArgs): void;

	/**Event triggers when the cursor leaves out from a tag item*/
	mouseout? (e: MouseoutEventArgs): void;

	/**Event triggers when the cursor hovers on a tag item*/
	mouseover? (e: MouseoverEventArgs): void;
}

export interface ClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TagCloud model
	*/
	model?: ej.TagCloud.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return current tag name
	*/
	text?: string;

	/**return current url link
	*/
	url?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TagCloud model
	*/
	model?: ej.TagCloud.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TagCloud model
	*/
	model?: ej.TagCloud.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface MouseoutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TagCloud model
	*/
	model?: ej.TagCloud.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return current tag name
	*/
	text?: string;

	/**return current url link
	*/
	url?: string;
}

export interface MouseoverEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TagCloud model
	*/
	model?: ej.TagCloud.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**return current tag name
	*/
	text?: string;

	/**return current url link
	*/
	url?: string;
}

export interface Fields {

	/**Defines the frequency number to categorize the font size.
	*/
	frequency?: number;

	/**Defines the html attributes for the anchor elements inside the each tag items.
	*/
	htmlAttributes?: any;

	/**Defines the tag value or display text.
	*/
	text?: string;

	/**Defines the url link to navigate while click the tag.
	*/
	url?: string;
}
}
enum Format
{
//To render the TagCloud items in cloud format
Cloud,
//To render the TagCloud items in list format
List,
}

class TimePicker extends ej.Widget {
	static fn: TimePicker;
	constructor(element: JQuery, options?: TimePicker.Model);
	constructor(element: Element, options?: TimePicker.Model);
	model:TimePicker.Model;
	defaults:TimePicker.Model;

	/** Allows you to disable the TimePicker.
	* @returns {void}
	*/
	disable(): void;

	/** Allows you to enable the TimePicker.
	* @returns {void}
	*/
	enable(): void;

	/** It returns the current time value.
	* @returns {string}
	*/
	getValue(): string;

	/** This method will hide the TimePicker control popup.
	* @returns {void}
	*/
	hide(): void;

	/** Updates the current system time in TimePicker.
	* @returns {void}
	*/
	setCurrentTime(): void;

	/** This method will show the TimePicker control popup.
	* @returns {void}
	*/
	show(): void;
}
export module TimePicker{

export interface Model {

	/**Sets the root CSS class for the TimePicker theme, which is used to customize.
	*/
	cssClass?: string;

	/**Specifies the animation behavior in TimePicker.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**When this property is set to false, it disables the TimePicker control.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Save current model value to browser cookies for maintaining states. When refreshing the TimePicker control page, the model value is applied from browser cookies or HTML 5local storage.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Displays the TimePicker as right to left alignment.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**When the enableStrictMode is set as true it allows the value outside of the range and also indicate with red color border, otherwise it internally changed to the min or max range value based an input value.
	* @Default {false}
	*/
	enableStrictMode?: boolean;

	/**Defines the height of the TimePicker textbox.
	*/
	height?: string|number;

	/**Sets the step value for increment an hour value through arrow keys or mouse scroll.
	* @Default {1}
	*/
	hourInterval?: number;

	/**It allows to define the characteristics of the TimePicker control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Sets the time interval between the two adjacent time values in the popup.
	* @Default {30}
	*/
	interval?: number;

	/**Defines the localization info used by the TimePicker.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the maximum time value to the TimePicker.
	* @Default {11:59:59 PM}
	*/
	maxTime?: string;

	/**Sets the minimum time value to the TimePicker.
	* @Default {12:00:00 AM}
	*/
	minTime?: string;

	/**Sets the step value for increment the minute value through arrow keys or mouse scroll.
	* @Default {1}
	*/
	minutesInterval?: number;

	/**Defines the height of the TimePicker popup.
	* @Default {191px}
	*/
	popupHeight?: string|number;

	/**Defines the width of the TimePicker popup.
	* @Default {auto}
	*/
	popupWidth?: string|number;

	/**Toggles the readonly state of the TimePicker
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Sets the step value for increment the seconds value through arrow keys or mouse scroll.
	* @Default {1}
	*/
	secondsInterval?: number;

	/**shows or hides the drop down button in TimePicker.
	* @Default {true}
	*/
	showPopupButton?: boolean;

	/**TimePicker is displayed with rounded corner when this property is set to true.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Defines the time format displayed in the TimePicker.
	* @Default {h:mm tt}
	*/
	timeFormat?: string;

	/**Sets a specified time value on the TimePicker.
	* @Default {null}
	*/
	value?: string|Date;

	/**Defines the width of the TimePicker textbox.
	*/
	width?: string|number;

	/**Fires when the time value changed in the TimePicker.*/
	beforeChange? (e: BeforeChangeEventArgs): void;

	/**Fires when the TimePicker popup before opened.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Fires when the time value changed in the TimePicker.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when the TimePicker popup closed.*/
	close? (e: CloseEventArgs): void;

	/**Fires when create TimePicker successfully.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the TimePicker is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when the TimePicker control gets focus.*/
	focusIn? (e: FocusInEventArgs): void;

	/**Fires when the TimePicker control get lost focus.*/
	focusOut? (e: FocusOutEventArgs): void;

	/**Fires when the TimePicker popup opened.*/
	open? (e: OpenEventArgs): void;

	/**Fires when the value is selected from the TimePicker dropdown list.*/
	select? (e: SelectEventArgs): void;
}

export interface BeforeChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the modified time value
	*/
	value?: string;
}

export interface BeforeOpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the time value
	*/
	value?: string;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns true when the value changed by user interaction otherwise returns false
	*/
	isInteraction?: boolean;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the modified time value
	*/
	value?: string;
}

export interface CloseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the time value
	*/
	value?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface FocusInEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the current time value
	*/
	value?: string;
}

export interface FocusOutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the current time value
	*/
	value?: string;
}

export interface OpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the time value
	*/
	value?: string;
}

export interface SelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the TimePicker model
	*/
	model?: ej.TimePicker.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the previously selected time value
	*/
	prevTime?: string;

	/**returns the selected time value
	*/
	value?: string;
}
}

class ToggleButton extends ej.Widget {
	static fn: ToggleButton;
	constructor(element: JQuery, options?: ToggleButton.Model);
	constructor(element: Element, options?: ToggleButton.Model);
	model:ToggleButton.Model;
	defaults:ToggleButton.Model;

	/** Allows you to destroy the ToggleButton widget.
	* @returns {void}
	*/
	destroy(): void;

	/** To disable the ToggleButton to prevent all user interactions.
	* @returns {void}
	*/
	disable(): void;

	/** To enable the ToggleButton.
	* @returns {void}
	*/
	enable(): void;
}
export module ToggleButton{

export interface Model {

	/**Specify the icon in active state to the toggle button and it will be aligned from left margin of the button.
	*/
	activePrefixIcon?: string;

	/**Specify the icon in active state to the toggle button and it will be aligned from right margin of the button.
	*/
	activeSuffixIcon?: string;

	/**Sets the text when ToggleButton is in active state i.e.,checked state.
	* @Default {null}
	*/
	activeText?: string;

	/**Specifies the contentType of the ToggleButton. See ContentType as below
	* @Default {ej.ContentType.TextOnly}
	*/
	contentType?: ej.ContentType|string;

	/**Specify the CSS class to the ToggleButton to achieve custom theme.
	*/
	cssClass?: string;

	/**Specify the icon in default state to the toggle button and it will be aligned from left margin of the button.
	*/
	defaultPrefixIcon?: string;

	/**Specify the icon in default state to the toggle button and it will be aligned from right margin of the button.
	*/
	defaultSuffixIcon?: string;

	/**Specifies the text of the ToggleButton, when the control is a default state. i.e., unChecked state.
	* @Default {null}
	*/
	defaultText?: string;

	/**Specifies the state of the ToggleButton.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Save current model value to browser cookies for maintaining states. When refreshing the ToggleButton control page, the model value is applied from browser cookies or HTML 5local storage.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Specify the Right to Left direction of the ToggleButton.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Specifies the height of the ToggleButton.
	* @Default {28pixel}
	*/
	height?: number|string;

	/**It allows to define the characteristics of the ToggleButton control. It will helps to extend the capability of an HTML element.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the image position of the ToggleButton.
	* @Default {ej.ImagePosition.ImageLeft}
	*/
	imagePosition?: ej.ImagePosition|string;

	/**Allows to prevents the control switched to checked (active) state.
	* @Default {false}
	*/
	preventToggle?: boolean;

	/**Displays the ToggleButton with rounded corners.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies the size of the ToggleButton. See ButtonSize as below
	* @Default {ej.ButtonSize.Normal}
	*/
	size?: ej.ButtonSize|string;

	/**It allows to define the ToggleButton state to checked(Active) or unchecked(Default) at initial time.
	* @Default {false}
	*/
	toggleState?: boolean;

	/**Specifies the type of the ToggleButton. See ButtonType as below
	* @Default {ej.ButtonType.Button}
	*/
	type?: ej.ButtonType|string;

	/**Specifies the width of the ToggleButton.
	* @Default {100pixel}
	*/
	width?: number|string;

	/**Fires when ToggleButton control state is changed successfully.*/
	change? (e: ChangeEventArgs): void;

	/**Fires when ToggleButton control is clicked successfully.*/
	click? (e: ClickEventArgs): void;

	/**Fires when ToggleButton control is created successfully.*/
	create? (e: CreateEventArgs): void;

	/**Fires when ToggleButton control is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;
}

export interface ChangeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**return the toggle button checked state
	*/
	isChecked?: boolean;

	/**returns the toggle button model
	*/
	model?: ej.ToggleButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**return the toggle button checked state
	*/
	isChecked?: boolean;

	/**returns the toggle button model
	*/
	model?: ej.ToggleButton.Model;

	/**return the toggle button state
	*/
	status?: boolean;

	/**returns the name of the event
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the toggle button model
	*/
	model?: ej.ToggleButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the toggle button model
	*/
	model?: ej.ToggleButton.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}

class Toolbar extends ej.Widget {
	static fn: Toolbar;
	constructor(element: JQuery, options?: Toolbar.Model);
	constructor(element: Element, options?: Toolbar.Model);
	model:Toolbar.Model;
	defaults:Toolbar.Model;

	/** Deselect the specified Toolbar item.
	* @param {any} The element need to be deselected
	* @returns {void}
	*/
	deselectItem(element: any): void;

	/** Deselect the Toolbar item based on specified id.
	* @param {string} The ID of the element need to be deselected
	* @returns {void}
	*/
	deselectItemByID(ID: string): void;

	/** Allows you to destroy the Toolbar widget.
	* @returns {void}
	*/
	destroy(): void;

	/** To disable all items in the Toolbar control.
	* @returns {void}
	*/
	disable(): void;

	/** Disable the specified Toolbar item.
	* @param {any} The element need to be disabled
	* @returns {void}
	*/
	disableItem(element: any): void;

	/** Disable the Toolbar item based on specified item id in the Toolbar.
	* @param {string} The ID of the element need to be disabled
	* @returns {void}
	*/
	disableItemByID(ID: string): void;

	/** Enable the Toolbar if it is in disabled state.
	* @returns {void}
	*/
	enable(): void;

	/** Enable the Toolbar item based on specified item.
	* @param {any} The element need to be enabled
	* @returns {void}
	*/
	enableItem(element: any): void;

	/** Enable the Toolbar item based on specified item id in the Toolbar.
	* @param {string} The ID of the element need to be enabled
	* @returns {void}
	*/
	enableItemByID(ID: string): void;

	/** To hide the Toolbar
	* @returns {void}
	*/
	hide(): void;

	/** Remove the item from toolbar, based on specified item.
	* @param {any} The element need to be removed
	* @returns {void}
	*/
	removeItem(element: any): void;

	/** Remove the item from toolbar, based on specified item id in the Toolbar.
	* @param {string} The ID of the element need to be removed
	* @returns {void}
	*/
	removeItemByID(ID: string): void;

	/** Selects the item from toolbar, based on specified item.
	* @param {any} The element need to be selected
	* @returns {void}
	*/
	selectItem(element: any): void;

	/** Selects the item from toolbar, based on specified item id in the Toolbar.
	* @param {string} The ID of the element need to be selected
	* @returns {void}
	*/
	selectItemByID(ID: string): void;

	/** To show the Toolbar.
	* @returns {void}
	*/
	show(): void;
}
export module Toolbar{

export interface Model {

	/**Sets the root CSS class for Toolbar control to achieve the custom theme.
	*/
	cssClass?: string;

	/**Specifies dataSource value for the Toolbar control during initialization.
	* @Default {null}
	*/
	dataSource?: any;

	/**Specifies the Toolbar control state.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Specifies enableRTL property to align the Toolbar control from right to left direction.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Allows to separate the each UL items in the Toolbar control.
	* @Default {false}
	*/
	enableSeparator?: boolean;

	/**Specifies the mapping fields for the data items of the Toolbar
	* @Default {null}
	*/
	fields?: string;

	/**Specifies the height of the Toolbar.
	* @Default {28}
	*/
	height?: number|string;

	/**Specifies whether the Toolbar control is need to be show or hide.
	* @Default {false}
	*/
	hide?: boolean;

	/**Enables/Disables the responsive support for Toolbar items during the window resizing time.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Specifies the Toolbar orientation. See orientation
	* @Default {Horizontal}
	*/
	orientation?: ej.Orientation|string;

	/**Specifies the query to retrieve the data from the online server. The query is used only when the online dataSource is used.
	* @Default {null}
	*/
	query?: any;

	/**Displays the Toolbar with rounded corners.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Specifies the width of the Toolbar.
	*/
	width?: number|string;

	/**Fires after Toolbar control is clicked.*/
	click? (e: ClickEventArgs): void;

	/**Fires after Toolbar control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the Toolbar is destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires after Toolbar control item is hovered.*/
	itemHover? (e: ItemHoverEventArgs): void;

	/**Fires after mouse leave from Toolbar control item.*/
	itemLeave? (e: ItemLeaveEventArgs): void;
}

export interface ClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Toolbar model
	*/
	model?: ej.Toolbar.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target of the current object.
	*/
	target?: any;

	/**returns the target of the current object.
	*/
	currentTarget?: any;

	/**return the Toolbar state
	*/
	status?: boolean;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Toolbar model
	*/
	model?: ej.Toolbar.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Toolbar model
	*/
	model?: ej.Toolbar.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ItemHoverEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Toolbar model
	*/
	model?: ej.Toolbar.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target of the current object.
	*/
	target?: any;

	/**returns the target of the current object.
	*/
	currentTarget?: any;

	/**return the Toolbar state
	*/
	status?: boolean;
}

export interface ItemLeaveEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Toolbar model
	*/
	model?: ej.Toolbar.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the target of the current object.
	*/
	target?: any;

	/**returns the target of the current object.
	*/
	currentTarget?: any;

	/**return the Toolbar state
	*/
	status?: boolean;
}

export interface Fields {

	/**Defines the group name for the item.
	*/
	group?: string;

	/**Defines the html attributes such as id, class, styles for the item to extend the capability.
	*/
	htmlAttributes?: any;

	/**Defines id for the tag.
	*/
	id?: string;

	/**Defines the image attributes such as height, width, styles and so on.
	*/
	imageAttributes?: string;

	/**Defines the imageURL for the image location.
	*/
	imageUrl?: string;

	/**Defines the sprite CSS for the image tag.
	*/
	spriteCssClass?: string;

	/**Defines the text content for the tag.
	*/
	text?: string;

	/**Defines the tooltip text for the tag.
	*/
	tooltipText?: string;
}
}

class TreeView extends ej.Widget {
	static fn: TreeView;
	constructor(element: JQuery, options?: TreeView.Model);
	constructor(element: Element, options?: TreeView.Model);
	model:TreeView.Model;
	defaults:TreeView.Model;

	/** To add a Node or collection of nodes in TreeView. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in TreeView.
	* @param {string|any} New node text or JSON object
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	addNode(newNodeText: string|any, target: string|any): void;

	/** To add a collection of nodes in TreeView. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in TreeView.
	* @param {any|Array<any>} New node details in JSON object
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	addNodes(collection: any|Array<any>, target : string|any): void;

	/** To check all the nodes in TreeView.
	* @returns {void}
	*/
	checkAll(): void;

	/** To check a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	checkNode( element : string|any): void;

	/** To collapse all the TreeView nodes.
	* @returns {void}
	*/
	collapseAll(): void;

	/** To collapse a particular node in TreeView.
	* @param {string|any} ID of TreeView node|object of TreeView node
	* @returns {void}
	*/
	collapseNode( element : string|any): void;

	/** To disable the node in the TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	disableNode( element : string|any): void;

	/** To enable the node in the TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	enableNode( element : string|any): void;

	/** To ensure that the TreeView node is visible in the TreeView. This method is useful if we need select a TreeView node dynamically.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	ensureVisible( element : string|any): boolean;

	/** To expand all the TreeView nodes.
	* @returns {void}
	*/
	expandAll(): void;

	/** To expandNode particular node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	expandNode( element : string|any): void;

	/** To get currently checked nodes in TreeView.
	* @returns {any}
	*/
	getCheckedNodes(): any;

	/** To get currently checked nodes indexes in TreeView.
	* @returns {Array<any>}
	*/
	getCheckedNodesIndex(): Array<any>;

	/** To get number of nodes in TreeView.
	* @returns {number}
	*/
	getNodeCount(): number;

	/** To get currently expanded nodes in TreeView.
	* @returns {any}
	*/
	getExpandedNodes(): any;

	/** To get currently expanded nodes indexes in TreeView.
	* @returns {Array<any>}
	*/
	getExpandedNodesIndex(): Array<any>;

	/** To get TreeView node by using index position in TreeView.
	* @param {number} Index position of TreeView node
	* @returns {any}
	*/
	getNodeByIndex( index : number): any;

	/** To get TreeView node data such as id, text, parentId, selected, checked, expanded, level, childs and index.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {any}
	*/
	getNode(element: string|any): any;

	/** To get current index position of TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {number}
	*/
	getNodeIndex(element : string|any): number;

	/** To get immediate parent TreeView node of particular TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {any}
	*/
	getParent(element : string|any): any;

	/** To get the currently selected node in TreeView.
	* @returns {any}
	*/
	getSelectedNode(): any;

	/** To get the index position of currently selected node in TreeView.
	* @returns {number}
	*/
	getSelectedNodeIndex(): number;

	/** To get the text of a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {string}
	*/
	getText( element : string|any): string;

	/** To get the updated datasource of TreeView after performing some operation like drag and drop, node editing, adding and removing node.
	* @returns {Array<any>}
	*/
	getTreeData(): Array<any>;

	/** To get currently visible nodes in TreeView.
	* @returns {any}
	*/
	getVisibleNodes(): any;

	/** To check a node having child or not.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	hasChildNode( element : string|any): boolean;

	/** To show nodes in TreeView.
	* @returns {void}
	*/
	hide(): void;

	/** To hide particular node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	hideNode( element : string|any): void;

	/** To add a Node or collection of nodes after the particular TreeView node.
	* @param {string|any} New node text or JSON object
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	insertAfter( newNodeText : string|any, target : string|any): void;

	/** To add a Node or collection of nodes before the particular TreeView node.
	* @param {string|any} New node text or JSON object
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	insertBefore( newNodeText : string|any,  target : string|any): void;

	/** To check the given TreeView node is checked or unchecked.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isNodeChecked( element : string|any): boolean;

	/** To check whether the child nodes are loaded of the given TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isChildLoaded( element : string|any): boolean;

	/** To check the given TreeView node is disabled or enabled.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isDisabled( element : string|any): boolean;

	/** To check the given node is exist in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isExist( element : string|any): boolean;

	/** To get the expand status of the given TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isExpanded( element : string|any): boolean;

	/** To get the select status of the given TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isSelected( element : string|any): boolean;

	/** To get the visibility status of the given TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {boolean}
	*/
	isVisible( element : string|any): boolean;

	/** To load the TreeView nodes from the particular URL. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in TreeView.
	* @param {string} URL location, the data returned from the URL will be loaded in TreeView
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	loadData( URL : string,  target : string|any): void;

	/** To move the TreeView node with in same TreeView. The new poistion of given TreeView node will be based on destionation node and index position.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @param {number} New index position of given source node
	* @returns {void}
	*/
	moveNode( sourceNode : string|any,  destinationNode : string|any,  index : number): void;

	/** To refresh the TreeView
	* @returns {void}
	*/
	refresh(): void;

	/** To remove all the nodes in TreeView.
	* @returns {void}
	*/
	removeAll(): void;

	/** To remove a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	removeNode( element : string|any): void;

	/** To select a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	selectNode( element : string|any): void;

	/** To show nodes in TreeView.
	* @returns {void}
	*/
	show(): void;

	/** To show a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	showNode( element : string|any): void;

	/** To uncheck all the nodes in TreeView.
	* @returns {void}
	*/
	unCheckAll(): void;

	/** To uncheck a node in TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	uncheckNode( element : string|any): void;

	/** To unselect the node in the TreeView.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @returns {void}
	*/
	unselectNode( element : string|any): void;

	/** To edit or update the text of the TreeView node.
	* @param {string|any} ID of TreeView node/object of TreeView node
	* @param {string} New text
	* @returns {void}
	*/
	updateText( target : string|any,  newText : string): void;
}
export module TreeView{

export interface Model {

	/**Gets or sets a value that indicates whether to enable drag and drop a node within the same tree.
	* @Default {false}
	*/
	allowDragAndDrop?: boolean;

	/**Gets or sets a value that indicates whether to enable drag and drop a node in inter ej.TreeView.
	* @Default {true}
	*/
	allowDragAndDropAcrossControl?: boolean;

	/**Gets or sets a value that indicates whether to drop a node to a sibling of particular node.
	* @Default {true}
	*/
	allowDropSibling?: boolean;

	/**Gets or sets a value that indicates whether to drop a node to a child of particular node.
	* @Default {true}
	*/
	allowDropChild?: boolean;

	/**Gets or sets a value that indicates whether to enable node editing support for TreeView.
	* @Default {false}
	*/
	allowEditing?: boolean;

	/**Gets or sets a value that indicates whether to enable keyboard support for TreeView actions like nodeSelection, nodeEditing, nodeExpand, nodeCollapse, nodeCut and Paste.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.
	* @Default {true}
	*/
	autoCheck?: boolean;

	/**Allow us to specify the parent node to be retain in checked or unchecked state instead of going for indeterminate state.
	* @Default {false}
	*/
	autoCheckParentNode?: boolean;

	/**Gets or sets a value that indicates the checkedNodes index collection as an array. The given array index position denotes the nodes, that are checked while rendering TreeView.
	* @Default {[]}
	*/
	checkedNodes?: Array<any>;

	/**Sets the root CSS class for TreeView which allow us to customize the appearance.
	*/
	cssClass?: string;

	/**Gets or sets a value that indicates whether to enable or disable the animation effect while expanding or collapsing a node.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Gets or sets a value that indicates whether a TreeView can be enabled or disabled. No actions can be performed while this property is set as false
	* @Default {true}
	*/
	enabled?: boolean;

	/**Allow us to prevent multiple nodes to be in expanded state. If it set to false, previously expanded node will be collapsed automatically, while we expand a node.
	* @Default {true}
	*/
	enableMultipleExpand?: boolean;

	/**Sets a value that indicates whether to persist the TreeView model state in page using applicable medium i.e., HTML5 localStorage or cookies
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Gets or sets a value that indicates to align content in the TreeView control from right to left by setting the property as true.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Gets or sets a array of value that indicates the expandedNodes index collection as an array. The given array index position denotes the nodes, that are expanded while rendering TreeView.
	* @Default {[]}
	*/
	expandedNodes?: Array<any>;

	/**Gets or sets a value that indicates the TreeView node can be expand or collapse by using the specified action.
	* @Default {dblclick}
	*/
	expandOn?: string;

	/**Gets or sets a fields object that allow us to map the data members with field properties in order to make the data binding easier.
	* @Default {null}
	*/
	fields?: Fields;

	/**Defines the height of the TreeView.
	* @Default {Null}
	*/
	height?: string|number;

	/**Specifies the HTML Attributes for the TreeView. Using this API we can add custom attributes in TreeView control.
	* @Default {{}}
	*/
	htmlAttributes?: any;

	/**Specifies the child nodes to be loaded on demand
	* @Default {false}
	*/
	loadOnDemand?: boolean;

	/**Gets or Sets a value that indicates the index position of a tree node. The particular index tree node will be selected while rendering the TreeView.
	* @Default {-1}
	*/
	selectedNode?: number;

	/**Gets or sets a value that indicates whether to display or hide checkbox for all TreeView nodes.
	* @Default {false}
	*/
	showCheckbox?: boolean;

	/**By using sortSettings property, you can customize the sorting option in TreeView control.
	*/
	sortSettings?: SortSettings;

	/**Allow us to use custom template in order to create TreeView.
	* @Default {null}
	*/
	template?: string;

	/**Defines the width of the TreeView.
	* @Default {Null}
	*/
	width?: string|number;

	/**Fires before adding node to TreeView.*/
	beforeAdd? (e: BeforeAddEventArgs): void;

	/**Fires before collapse a node.*/
	beforeCollapse? (e: BeforeCollapseEventArgs): void;

	/**Fires before cut node in TreeView.*/
	beforeCut? (e: BeforeCutEventArgs): void;

	/**Fires before deleting node in TreeView.*/
	beforeDelete? (e: BeforeDeleteEventArgs): void;

	/**Fires before editing the node in TreeView.*/
	beforeEdit? (e: BeforeEditEventArgs): void;

	/**Fires before expanding the node.*/
	beforeExpand? (e: BeforeExpandEventArgs): void;

	/**Fires before loading nodes to TreeView.*/
	beforeLoad? (e: BeforeLoadEventArgs): void;

	/**Fires before paste node in TreeView.*/
	beforePaste? (e: BeforePasteEventArgs): void;

	/**Fires before selecting node in TreeView.*/
	beforeSelect? (e: BeforeSelectEventArgs): void;

	/**Fires when TreeView created successfully.*/
	create? (e: CreateEventArgs): void;

	/**Fires when TreeView destroyed successfully.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires before nodeEdit Successful.*/
	inlineEditValidation? (e: InlineEditValidationEventArgs): void;

	/**Fires when key pressed successfully.*/
	keyPress? (e: KeyPressEventArgs): void;

	/**Fires when data load fails.*/
	loadError? (e: LoadErrorEventArgs): void;

	/**Fires when data loaded successfully.*/
	loadSuccess? (e: LoadSuccessEventArgs): void;

	/**Fires once node added successfully.*/
	nodeAdd? (e: NodeAddEventArgs): void;

	/**Fires once node checked successfully.*/
	nodeCheck? (e: NodeCheckEventArgs): void;

	/**Fires when node clicked successfully.*/
	nodeClick? (e: NodeClickEventArgs): void;

	/**Fires when node collapsed successfully.*/
	nodeCollapse? (e: NodeCollapseEventArgs): void;

	/**Fires when node cut successfully.*/
	nodeCut? (e: NodeCutEventArgs): void;

	/**Fires when node deleted successfully.*/
	nodeDelete? (e: NodeDeleteEventArgs): void;

	/**Fires when node dragging.*/
	nodeDrag? (e: NodeDragEventArgs): void;

	/**Fires once node drag start successfully.*/
	nodeDragStart? (e: NodeDragStartEventArgs): void;

	/**Fires before the dragged node to be dropped.*/
	nodeDragStop? (e: NodeDragStopEventArgs): void;

	/**Fires once node dropped successfully.*/
	nodeDropped? (e: NodeDroppedEventArgs): void;

	/**Fires once node edited successfully.*/
	nodeEdit? (e: NodeEditEventArgs): void;

	/**Fires once node expanded successfully.*/
	nodeExpand? (e: NodeExpandEventArgs): void;

	/**Fires once node pasted successfully.*/
	nodePaste? (e: NodePasteEventArgs): void;

	/**Fires when node selected successfully.*/
	nodeSelect? (e: NodeSelectEventArgs): void;

	/**Fires once node unchecked successfully.*/
	nodeUncheck? (e: NodeUncheckEventArgs): void;
}

export interface BeforeAddEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the given new node data
	*/
	  data ?: string|any;

	/**returns the parent element, the given new nodes to be appended to the given parent element
	*/
	  targetParent ?: any;

	/**returns the given parent node details
	*/
	  parentDetails ?: any;
}

export interface BeforeCollapseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the value of the node
	*/
	  value ?: string;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**returns the child nodes are loaded or not
	*/
	  isChildLoaded ?: boolean;

	/**returns the id of currently clicked node
	*/
	  id ?: string;

	/**returns the parent id of currently clicked node
	*/
	  parentId ?: string;

	/**returns the format asynchronous or synchronous 
	*/
	  async ?: boolean;
}

export interface BeforeCutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the target element, the given node to be cut
	*/
	  target ?: any;

	/**returns the given target node values
	*/
	  nodeDetails ?: any;

	/**returns the keypressed keycode value
	*/
	  keyCode ?: number;
}

export interface BeforeDeleteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the target element, the given node to be deleted
	*/
	  target ?: any;

	/**returns the given target node values
	*/
	  nodeDetails ?: any;

	/**returns the current parent element of the target node
	*/
	  parentElement ?: any;

	/**returns the parent node values
	*/
	  parentDetails ?: any;
}

export interface BeforeEditEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the current element of the node clicked
	*/
	 currentElement ?: any;
}

export interface BeforeExpandEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the value of the node
	*/
	  value ?: string;

	/**if the child node is ready to expanded state; otherwise, false.
	*/
	  isChildLoaded ?: boolean;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**returns the id of currently clicked node
	*/
	  id ?: string;

	/**returns the parent id of currently clicked node
	*/
	  parentId ?: string;

	/**returns the format asynchronous or synchronous 
	*/
	  async ?: boolean;
}

export interface BeforeLoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the AJAX settings object
	*/
	  ajaxOptions ?: any;
}

export interface BeforePasteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the target element, the given node to be pasted
	*/
	  target ?: any;

	/**returns the given target node values
	*/
	  nodeDetails ?: any;

	/**returns the keypressed keycode value
	*/
	  keyCode ?: number;
}

export interface BeforeSelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the target element, the given node to be selected
	*/
	  target ?: any;

	/**returns the given target node values
	*/
	  nodeDetails ?: any;
}

export interface CreateEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;
}

export interface DestroyEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;
}

export interface InlineEditValidationEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the new entered text for the node
	*/
	  newText ?: string;

	/**returns the current node element id
	*/
	  id ?: any;

	/**returns the old node text
	*/
	  oldText ?: string;
}

export interface KeyPressEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**returns the value of the node
	*/
	  value ?: string;

	/**returns node path from root element
	*/
	  path ?: string;

	/**returns the keypressed keycode value
	*/
	  keyCode ?: number;

	/**it returns when the current node is in expanded state; otherwise, false.
	*/
	  isExpanded ?: boolean;
}

export interface LoadErrorEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the AJAX error object
	*/
	  error ?: any;
}

export interface LoadSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the success data from the URL
	*/
	  data ?: any;

	/**returns the target parent element, the data returned from the URL to be appended to the given parent element, else in TreeView
	*/
	  targetParent ?: any;

	/**returns the given parent node details
	*/
	  parentDetails ?: any;
}

export interface NodeAddEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the added data, that are given initially
	*/
	  data ?: any;

	/**returns the newly added elements
	*/
	  nodes ?: any;

	/**returns the target parent element of the added element
	*/
	  parentElement ?: any;

	/**returns the given parent node details
	*/
	  parentDetails ?: any;
}

export interface NodeCheckEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the value of the node
	*/
	  value ?: string;

	/**returns the id of the current element of the node clicked
	*/
	  id ?: string;

	/**returns the id of the parent element of current element of the node clicked
	*/
	  parentId ?: string;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**it returns true when the node checkbox is checked; otherwise, false.
	*/
	  isChecked ?: boolean;

	/**it returns the currently checked node name
	*/
	  currentNode ?: Array<any>;

	/**it returns the currently checked and its child node details
	*/
	  currentCheckedNodes ?: Array<any>;
}

export interface NodeClickEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**returns the id of current element
	*/
	  id ?: string;

	/**returns the parentId of current element
	*/
	  parentId ?: string;
}

export interface NodeCollapseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the id of the current element of the node clicked
	*/
	  id ?: string;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the id of the parent element of current element of the node clicked
	*/
	  parentId ?: string;

	/**returns the value of the node
	*/
	  value ?: string;

	/**returns the current element of the node clicked
	*/
	  currentElement ?: any;

	/**returns the child nodes are loaded or not
	*/
	  isChildLoaded ?: boolean;

	/**returns the format asynchronous or synchronous 
	*/
	  async ?: boolean;
}

export interface NodeCutEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the current parent element of the cut node
	*/
	  parentElement ?: any;

	/**returns the given parent node details
	*/
	  parentDetails ?: any;

	/**returns the keypressed keycode value
	*/
	  keyCode ?: number;
}

export interface NodeDeleteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the event object
	*/
	  event ?: any;

	/**returns the current parent element of the deleted node
	*/
	  parentElement ?: any;

	/**returns the given parent node details
	*/
	  parentDetails ?: any;
}

export interface NodeDragEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the original drag target
	*/
	  dragTarget ?: any;

	/**returns the current target TreeView node
	*/
	  target ?: any;

	/**returns the current target details
	*/
	  targetElementData ?: any;

	/**returns the current parent element of the target node
	*/
	  draggedElement ?: any;

	/**returns the given parent node details
	*/
	  draggedElementData ?: any;

	/**returns the event object
	*/
	  event ?: any;
}

export interface NodeDragStartEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	  cancel ?: boolean;

	/**returns the TreeView model
	*/
	  model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	  type ?: string;

	/**returns the original drag target
	*/
	 dragTarget ?: any;

	/**returns the current dragging parent TreeView node
	*/
	 parentElement ?: any;

	/**returns the current dragging parent TreeView node details
	*/
	 parentElementData ?: any;

	/**returns the current parent element of the dragging node
	*/
	 target ?: any;

	/**returns the given parent node details
	*/
	 targetElementData ?: any;

	/**returns the event object
	*/
	 event ?: any;
}

export interface NodeDragStopEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the original drop target
	*/
	 dropTarget ?: any;

	/**returns the current dragged TreeView node
	*/
	 draggedElement ?: any;

	/**returns the current dragged TreeView node details
	*/
	 draggedElementData ?: any;

	/**returns the current parent element of the dragged node
	*/
	 target ?: any;

	/**returns the given parent node details
	*/
	 targetElementData ?: any;

	/**returns the drop position such as before, after or over
	*/
	 position ?: string;

	/**returns the event object
	*/
	 event ?: any;
}

export interface NodeDroppedEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the original drop target
	*/
	 dropTarget ?: any;

	/**returns the current dropped TreeView node
	*/
	 droppedElement ?: any;

	/**returns the current dropped TreeView node details
	*/
	 droppedElementData ?: any;

	/**returns the current parent element of the dropped node
	*/
	 target ?: any;

	/**returns the given parent node details
	*/
	 targetElementData ?: any;

	/**returns the drop position such as before, after or over
	*/
	 position ?: string;

	/**returns the event object
	*/
	 event ?: any;
}

export interface NodeEditEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the id of the element
	*/
	 id ?: string;

	/**returns the oldText of the element
	*/
	 oldText ?: string;

	/**returns the newText of the element
	*/
	 newText ?: string;

	/**returns the event object
	*/
	 event ?: any;

	/**returns the target element, the given node to be cut
	*/
	 target ?: any;

	/**returns the given target node values
	*/
	 nodeDetails ?: any;
}

export interface NodeExpandEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the value of the node
	*/
	 value ?: string;

	/**if the child node is ready to expanded state; otherwise, false.
	*/
	 isChildLoaded ?: boolean;

	/**returns the current element of the node clicked
	*/
	 currentElement ?: any;

	/**returns the id of currently clicked node
	*/
	 id ?: string;

	/**returns the parent id of currently clicked node
	*/
	 parentId ?: string;

	/**returns the format asynchronous or synchronous 
	*/
	 async ?: boolean;
}

export interface NodePasteEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the event object
	*/
	 event ?: any;

	/**returns the pasted element
	*/
	 target ?: any;

	/**returns the given target node values
	*/
	 nodeDetails ?: any;

	/**returns the keypressed keycode value
	*/
	 keyCode ?: number;
}

export interface NodeSelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the id of the current element of the node clicked
	*/
	 id ?: any;

	/**returns the id of the parent element of current element of the node clicked
	*/
	 parentId ?: any;

	/**returns the value of the node
	*/
	 value ?: string;

	/**returns the current element of the node clicked
	*/
	 currentElement ?: any;
}

export interface NodeUncheckEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	 cancel ?: boolean;

	/**returns the TreeView model
	*/
	 model ?: ej.TreeView.Model;

	/**returns the name of the event
	*/
	 type ?: string;

	/**returns the event object
	*/
	 event ?: any;

	/**returns the id of the current element of the node clicked
	*/
	 id ?: any;

	/**returns the id of the parent element of current element of the node clicked
	*/
	 parentId ?: any;

	/**returns the value of the node
	*/
	 value ?: string;

	/**returns the current element of the node clicked
	*/
	 currentElement ?: any;

	/**it returns true when the node checkbox is checked; otherwise, false.
	*/
	 isChecked ?: boolean;

	/**it returns currently unchecked node name
	*/
	 currentNode ?: string;

	/**it returns currently unchecked node and its child node details.
	*/
	 currentUncheckedNodes ?: Array<any>;
}

export interface Fields {

	/**It receives the child level or inner level data source such as Essential DataManager object and JSON object.
	*/
	child?: any;

	/**It receives Essential DataManager object and JSON object.
	*/
	dataSource?: any;

	/**Specifies the node to be in expanded state.
	*/
	expanded?: boolean;

	/**Its allow us to indicate whether the node has child or not in load on demand
	*/
	hasChild?: boolean;

	/**Specifies the html attributes to â€œliâ€ item list.
	*/
	htmlAttribute?: any;

	/**Specifies the id to TreeView node items list.
	*/
	id?: string;

	/**Specifies the image attribute to â€œimgâ€ tag inside items list
	*/
	imageAttribute?: any;

	/**Specifies the html attributes to â€œliâ€ item list.
	*/
	imageUrl?: string;

	/**If its true Checkbox node will be checked when rendered with checkbox.
	*/
	isChecked?: boolean;

	/**Specifies the link attribute to â€œaâ€ tag in item list.
	*/
	linkAttribute?: any;

	/**Specifies the parent id of the node. The nodes are listed as child nodes of the specified parent node by using its parent id.
	*/
	parentId?: string;

	/**It receives query to retrieve data from the table (query is same as SQL).
	*/
	query?: any;

	/**Allow us to specify the node to be in selected state
	*/
	selected?: boolean;

	/**Specifies the sprite CSS class to â€œliâ€ item list.
	*/
	spriteCssClass?: string;

	/**It receives the table name to execute query on the corresponding table.
	*/
	tableName?: string;

	/**Specifies the text of TreeView node items list.
	*/
	text?: string;
}

export interface SortSettings {

	/**Enables or disables the sorting option in TreeView control
	* @Default {false}
	*/
	allowSorting?: boolean;

	/**Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
	* @Default {ej.sortOrder.Ascending}
	*/
	sortOrder?: ej.sortOrder|string;
}
}
enum sortOrder
{
//Enum for Ascending sort order
Ascending,
//Enum for Descending sort order
Descending,
}

class Uploadbox extends ej.Widget {
	static fn: Uploadbox;
	constructor(element: JQuery, options?: Uploadbox.Model);
	constructor(element: Element, options?: Uploadbox.Model);
	model:Uploadbox.Model;
	defaults:Uploadbox.Model;

	/** The destroy method destroys the control and brings the control to a pre-init state. All the events of the Upload control is bound by using this._on unbinds automatically.
	* @returns {void}
	*/
	destroy(): void;

	/** Disables the Uploadbox control
	* @returns {void}
	*/
	disable(): void;

	/** Enables the Uploadbox control
	* @returns {void}
	*/
	enable(): void;
}
export module Uploadbox{

export interface Model {

	/**Enables the file drag and drop support to the Uploadbox control.
	* @Default {false}
	*/
	allowDragAndDrop?: boolean;

	/**Uploadbox supports both synchronous and asynchronous upload. This can be achieved by using the asyncUpload property.
	* @Default {true}
	*/
	asyncUpload?: boolean;

	/**Uploadbox supports auto uploading of files after the file selection is done.
	* @Default {false}
	*/
	autoUpload?: boolean;

	/**Sets the text for each action button.
	* @Default {{browse: Browse, upload: Upload, cancel: Cancel, close: Close}}
	*/
	buttonText?: ButtonText;

	/**Sets the root class for the Uploadbox control theme. This cssClass API helps to use custom skinning option for the Uploadbox button and dialog content.
	*/
	cssClass?: string;

	/**Specifies the custom file details in the dialog popup on initialization.
	* @Default {{ title:true, name:true, size:true, status:true, action:true}}
	*/
	customFileDetails?: CustomFileDetails;

	/**Specifies the actions for dialog popup while initialization.
	* @Default {{ modal:false, closeOnComplete:false, content:null, drag:true}}
	*/
	dialogAction?: DialogAction;

	/**Displays the Uploadbox dialog at the given X and Y positions. X: Dialog sets the left position value. Y: Dialog sets the top position value.
	* @Default {null}
	*/
	dialogPosition?: any;

	/**Property for applying the text to the Dialog title and content headers.
	* @Default {{ title: Upload Box, name: Name, size: Size, status: Status}}
	*/
	dialogText?: DialogText;

	/**The dropAreaText is displayed when the draganddrop support is enabled in the Uploadbox control.
	* @Default {Drop files or click to upload}
	*/
	dropAreaText?: string;

	/**Specifies the dropAreaHeight when the draganddrop support is enabled in the Uploadbox control.
	* @Default {100%}
	*/
	dropAreaHeight?: number|string;

	/**Specifies the dropAreaWidth when the draganddrop support is enabled in the Uploadbox control.
	* @Default {100%}
	*/
	dropAreaWidth?: number|string;

	/**Based on the property value, Uploadbox is enabled or disabled.
	* @Default {true}
	*/
	enabled?: boolean;

	/**Sets the right-to-left direction property for the Uploadbox control.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Only the files with the specified extension is allowed to upload. This is mentioned in the string format.
	*/
	extensionsAllow?: string;

	/**Only the files with the specified extension is denied for upload. This is mentioned in the string format.
	*/
	extensionsDeny?: string;

	/**Sets the maximum size limit for uploading the file. This is mentioned in the number format.
	* @Default {31457280}
	*/
	fileSize?: number;

	/**Sets the height of the browse button.
	* @Default {35px}
	*/
	height?: string;

	/**Configures the culture data and sets the culture to the Uploadbox.
	* @Default {en-US}
	*/
	locale?: string;

	/**Enables multiple file selection for upload.
	* @Default {true}
	*/
	multipleFilesSelection?: boolean;

	/**You can push the file to the Uploadbox in the client-side of the XHR supported browsers alone.
	* @Default {null}
	*/
	pushFile?: any;

	/**Specifies the remove action to be performed after the file uploading is completed. Here, mention the server address for removal.
	*/
	removeUrl?: string;

	/**Specifies the save action to be performed after the file is pushed for uploading. Here, mention the server address to be saved.
	*/
	saveUrl?: string;

	/**Enables the browse button support to the Uploadbox control.
	* @Default {true}
	*/
	showBrowseButton?: boolean;

	/**Specifies the file details to be displayed when selected for uploading. This can be done when the showFileDetails is set to true.
	* @Default {true}
	*/
	showFileDetails?: boolean;

	/**Sets the name for the Uploadbox control. This API helps to Map the action in code behind to retrieve the files.
	*/
	uploadName?: string;

	/**Sets the width of the browse button.
	* @Default {100px}
	*/
	width?: string;

	/**Fires when the upload progress begins.*/
	begin? (e: BeginEventArgs): void;

	/**Fires when the upload progress is cancelled.*/
	cancel? (e: CancelEventArgs): void;

	/**Fires when the file upload progress is completed.*/
	complete? (e: CompleteEventArgs): void;

	/**Fires when the file upload progress is completed.*/
	success? (e: SuccessEventArgs): void;

	/**Fires when the Uploadbox control is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when the Uploadbox control is destroyed.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires when the Upload process ends in Error.*/
	error? (e: ErrorEventArgs): void;

	/**Fires when the file is selected for upload successfully.*/
	fileSelect? (e: FileSelectEventArgs): void;

	/**Fires when the uploaded file is removed successfully.*/
	remove? (e: RemoveEventArgs): void;
}

export interface BeginEventArgs {

	/**To pass additional information to the server.
	*/
	data?: any;

	/**Selected FileList Object.
	*/
	files?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CancelEventArgs {

	/**Canceled FileList Object.
	*/
	fileStatus?: any;

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CompleteEventArgs {

	/**AJAX event argument for reference.
	*/
	e?: any;

	/**Uploaded file list.
	*/
	files?: any;

	/**response from the server.
	*/
	responseText?: string;

	/**XHR-AJAX Object for reference.
	*/
	xhr?: any;

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface SuccessEventArgs {

	/**response from the server.
	*/
	responseText?: string;

	/**AJAX event argument for reference.
	*/
	e?: any;

	/**successfully uploaded files list.
	*/
	success?: any;

	/**Uploaded file list.
	*/
	files?: any;

	/**XHR-AJAX Object for reference.
	*/
	xhr?: any;

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ErrorEventArgs {

	/**details about the error information.
	*/
	error?: string;

	/**returns the name of the event.
	*/
	type?: string;

	/**error event action details.
	*/
	action?: string;

	/**returns the file details of the file uploaded
	*/
	files?: any;
}

export interface FileSelectEventArgs {

	/**returns Selected FileList objects
	*/
	files?: any;

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RemoveEventArgs {

	/**returns the Uploadbox model
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the file details of the file object
	*/
	fileStatus?: any;
}

export interface ButtonText {

	/**Sets the text for the browse button.
	*/
	browse?: string;

	/**Sets the text for the cancel button.
	*/
	cancel?: string;

	/**Sets the text for the close button.
	*/
	Close?: string;

	/**Sets the text for the Upload button inside the dialog popup.
	*/
	upload?: string;
}

export interface CustomFileDetails {

	/**Enables the file upload interactions like remove/cancel in File details of the dialog popup.
	*/
	action?: boolean;

	/**Enables the name in the File details of the dialog popup.
	*/
	name?: boolean;

	/**Enables or disables the File size details of the dialog popup.
	*/
	size?: boolean;

	/**Enables or disables the file uploading status visibility in the dialog file details content.
	*/
	status?: boolean;

	/**Enables the title in File details for the dialog popup.
	*/
	title?: boolean;
}

export interface DialogAction {

	/**Once uploaded successfully, the dialog popup closes immediately.
	*/
	closeOnComplete?: boolean;

	/**Sets the content container option to the Uploadbox dialog popup.
	*/
	content?: string;

	/**Enables the drag option to the dialog popup.
	*/
	drag?: boolean;

	/**Enables or disables the Uploadbox dialogâ€™s modal property to the dialog popup.
	*/
	modal?: boolean;
}

export interface DialogText {

	/**Sets the uploaded fileâ€™s Name (header text) to the Dialog popup.
	*/
	name?: string;

	/**Sets the upload file Size (header text) to the dialog popup.
	*/
	size?: string;

	/**Sets the upload file Status (header text) to the dialog popup.
	*/
	status?: string;

	/**Sets the title text of the dialog popup.
	*/
	title?: string;
}
}

class WaitingPopup extends ej.Widget {
	static fn: WaitingPopup;
	constructor(element: JQuery, options?: WaitingPopup.Model);
	constructor(element: Element, options?: WaitingPopup.Model);
	model:WaitingPopup.Model;
	defaults:WaitingPopup.Model;

	/** To hide the waiting popup
	* @returns {void}
	*/
	hide(): void;

	/** Refreshes the WaitingPopup control by resetting the pop-up panel position and content position
	* @returns {void}
	*/
	refresh(): void;

	/** To show the waiting popup
	* @returns {void}
	*/
	show(): void;
}
export module WaitingPopup{

export interface Model {

	/**Sets the root class for the WaitingPopup control theme
	* @Default {null}
	*/
	cssClass?: string;

	/**Enables or disables the default loading icon.
	* @Default {true}
	*/
	showImage?: boolean;

	/**Enables the visibility of the WaitingPopup control
	* @Default {false}
	*/
	showOnInit?: boolean;

	/**Loads HTML content inside the popup panel instead of the default icon
	* @Default {null}
	*/
	template?: any;

	/**Sets the custom text in the pop-up panel to notify the waiting process
	* @Default {null}
	*/
	text?: string;

	/**Fires after Create WaitingPopup successfully*/
	create? (e: CreateEventArgs): void;

	/**Fires after Destroy WaitingPopup successfully*/
	destroy? (e: DestroyEventArgs): void;
}

export interface CreateEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the WaitingPopup model
	*/
	model?: ej.WaitingPopup.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the WaitingPopup model
	*/
	model?: ej.WaitingPopup.Model;

	/**returns the name of the event
	*/
	type?: string;
}
}

class Grid extends ej.Widget {
	static fn: Grid;
	constructor(element: JQuery, options?: Grid.Model);
	constructor(element: Element, options?: Grid.Model);
	model:Grid.Model;
	defaults:Grid.Model;

	/** Adds a grid model property which is to be ignored upon exporting.
	* @returns {void}
	*/
	addIgnoreOnExport(): void;

	/** Add a new record in grid control when allowAdding is set as true.
	* @returns {void}
	*/
	addRecord(): void;

	/** Cancel the modified changes in grid control when edit mode is &quot;batch&quot;.
	* @returns {void}
	*/
	batchCancel(): void;

	/** Save the modified changes to data source in grid control when edit mode is &quot;batch&quot;.
	* @returns {void}
	*/
	batchSave(): void;

	/** Send a cancel request in grid.
	* @returns {void}
	*/
	cancelEdit(): void;

	/** Send a cancel request to the edited cell in grid.
	* @returns {void}
	*/
	cancelEditCell(): void;

	/** It is used to clear all the cell selection.
	* @returns {boolean}
	*/
	clearCellSelection(): boolean;

	/** It is used to clear all the row selection or at specific row selection based on the index provided.
	* @param {number} optional If index of the column is specified then it will remove the selection from the particular column else it will clears all of the column selection
	* @returns {boolean}
	*/
	clearColumnSelection(index: number): boolean;

	/** It is used to clear all the filtering done.
	* @param {string}  If field of the column is specified then it will clear the  particular filtering column
	* @returns {void}
	*/
	clearFiltering(field: string): void;

	/** Clear the searching from the grid
	* @returns {void}
	*/
	clearSearching(): void;

	/** Clear all the row selection or at specific row selection based on the index provided
	* @param {number} optional If index of the row is specified then it will remove the selection from the particular row else it will clears all of the row selection
	* @returns {boolean}
	*/
	clearSelection(index: number): boolean;

	/** Clear the sorting from columns in the grid
	* @returns {void}
	*/
	clearSorting(): void;

	/** Collapse all the group caption rows in grid
	* @returns {void}
	*/
	collapseAll(): void;

	/** Collapse the group drop area in grid
	* @returns {void}
	*/
	collapseGroupDropArea(): void;

	/** Add or remove columns in grid column collections
	* @param {Array<any>|string} Pass array of columns or string of field name to add/remove the column in grid
	* @param {string} optional Pass add/remove action to be performed. By default "add" action will perform
	* @returns {void}
	*/
	columns(columnDetails: Array<any>|string, action: string): void;

	/** Refresh the grid with new data source
	* @param {Array<any>} Pass new data source to the grid
	* @returns {void}
	*/
	dataSource(datasource: Array<any>): void;

	/** Delete a record in grid control when allowDeleting is set as true
	* @param {string} Pass the primary key field Name of the column
	* @param {Array<any>} Pass the json data of record need to be delete.
	* @returns {void}
	*/
	deleteRecord(fieldName: string, data: Array<any>): void;

	/** Destroy the grid widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Edit a particular cell based on the row index and field name provided in &quot;batch&quot; edit mode.
	* @param {number} Pass row index to edit particular cell
	* @param {string} Pass the field name of the column to perform batch edit
	* @returns {void}
	*/
	editCell(index: number, fieldName: string): void;

	/** Send a save request in grid.
	* @returns {void}
	*/
	endEdit(): void;

	/** Expand all the group caption rows in grid.
	* @returns {void}
	*/
	expandAll(): void;

	/** Expand or collapse the row based on the row state in grid
	* @param {JQuery} Pass the target object to expand/collapse the row based on its row state
	* @returns {HTMLElement}
	*/
	expandCollapse($target: JQuery): HTMLElement;

	/** Expand the group drop area in grid.
	* @returns {void}
	*/
	expandGroupDropArea(): void;

	/** Export the grid content to excel, word or pdf document.
	* @param {string} Pass the controller action name corresponding to exporting
	* @param {string} optionalASP server event name corresponding to exporting
	* @param {boolean} optionalPass the multiple exporting value as true/false
	* @param {Array<any>} optionalPass the array of the gridIds to be filtered
	* @returns {void}
	*/
	export(action: string, serverEvent: string, multipleExport: boolean, gridIds: Array<any>): void;

	/** Send a filtering request to filter one column in grid.
	* @param {string} Pass the field name of the column
	* @param {string} string/integer/dateTime operator
	* @param {string|number} Pass the value to be filtered in a column
	* @param {string} Pass the predicate as and/or
	* @param {boolean} optional Pass the match case value as true/false
	* @returns {void}
	*/
	filterColumn(fieldName: string, filterOperator: string, filterValue: string|number, predicate: string, matchcase: boolean): void;

	/** Send a filtering request to filter single or multiple column in grid.
	* @param {Array<any>} Pass array of filterColumn query for performing filter operation
	* @returns {void}
	*/
	filterColumn(filterQueries: Array<any>): void;

	/** Get the batch changes of edit, delete and add operations of grid.
	* @returns {any}
	*/
	getBatchChanges(): any;

	/** Get the browser details
	* @returns {any}
	*/
	getBrowserDetails(): any;

	/** Get the column details based on the given field in grid
	* @param {string} Pass the field name of the column to get the corresponding column object
	* @returns {any}
	*/
	getColumnByField(fieldName: string): any;

	/** Get the column details based on the given header text in grid.
	* @param {string} Pass the header text of the column to get the corresponding column object
	* @returns {any}
	*/
	getColumnByHeaderText(headerText: string): any;

	/** Get the column details based on the given column index in grid
	* @param {number} Pass the index of the column to get the corresponding column object
	* @returns {any}
	*/
	getColumnByIndex(columnIndex: number): any;

	/** Get the list of field names from column collection in grid.
	* @returns {Array<any>}
	*/
	getColumnFieldNames(): Array<any>;

	/** Get the column index of the given field in grid.
	* @param {string} Pass the field name of the column to get the corresponding column index
	* @returns {number}
	*/
	getColumnIndexByField(fieldName: string): number;

	/** Get the content div element of grid.
	* @returns {HTMLElement}
	*/
	getContent(): HTMLElement;

	/** Get the content table element of grid
	* @returns {HTMLElement}
	*/
	getContentTable(): HTMLElement;

	/** Get the data of currently edited cell value in &quot;batch&quot; edit mode
	* @returns {any}
	*/
	getCurrentEditCellData(): any;

	/** Get the current page index in grid pager.
	* @returns {number}
	*/
	getCurrentIndex(): number;

	/** Get the current page data source of grid.
	* @returns {Array<any>}
	*/
	getCurrentViewData(): Array<any>;

	/** Get the column field name from the given header text in grid.
	* @param {string} Pass header text of the column to get its corresponding field name
	* @returns {string}
	*/
	getFieldNameByHeaderText(headerText: string): string;

	/** Get the filter bar of grid
	* @returns {HTMLElement}
	*/
	getFilterBar(): HTMLElement;

	/** Get the records filtered or searched in Grid
	* @returns {Array<any>}
	*/
	getFilteredRecords(): Array<any>;

	/** Get the footer content of grid.
	* @returns {HTMLElement}
	*/
	getFooterContent(): HTMLElement;

	/** Get the footer table element of grid.
	* @returns {HTMLElement}
	*/
	getFooterTable(): HTMLElement;

	/** Get the header content div element of grid.
	* @returns {HTMLElement}
	*/
	getHeaderContent(): HTMLElement;

	/** Get the header table element of grid
	* @returns {HTMLElement}
	*/
	getHeaderTable(): HTMLElement;

	/** Get the column header text from the given field name in grid.
	* @param {string} Pass field name of the column to get its corresponding header text
	* @returns {string}
	*/
	getHeaderTextByFieldName(field: string): string;

	/** Get the names of all the hidden column collections in grid.
	* @returns {Array<any>}
	*/
	getHiddenColumnNames(): Array<any>;

	/** Get the row index based on the given tr element in grid.
	* @param {JQuery} Pass the tr element in grid content to get its row index
	* @returns {number}
	*/
	getIndexByRow($tr: JQuery): number;

	/** Get the pager of grid.
	* @returns {HTMLElement}
	*/
	getPager(): HTMLElement;

	/** Get the names of primary key columns in Grid
	* @returns {Array<any>}
	*/
	getPrimaryKeyFieldNames(): Array<any>;

	/** Get the rows(tr element) from the given from and to row index in grid
	* @param {number} Pass the from index from which the rows to be returned
	* @param {number} Pass the to index to which the rows to be returned
	* @returns {HTMLElement}
	*/
	getRowByIndex(from: number, to: number): HTMLElement;

	/** Get the row height of grid.
	* @returns {number}
	*/
	getRowHeight(): number;

	/** Get the rows(tr element)of grid which is displayed in the current page.
	* @returns {HTMLElement}
	*/
	getRows(): HTMLElement;

	/** Get the scroller object of grid.
	* @returns {any}
	*/
	getScrollObject(): any;

	/** Get the selected records details in grid.
	* @returns {void}
	*/
	getSelectedRecords(): void;

	/** Get the names of all the visible column collections in grid
	* @returns {Array<any>}
	*/
	getVisibleColumnNames(): Array<any>;

	/** Send a paging request to specified page in grid
	* @param {number} Pass the page index to perform paging at specified page index
	* @returns {void}
	*/
	gotoPage(pageIndex: number): void;

	/** Send a column grouping request in grid.
	* @param {string} Pass the field Name of the column to be grouped in grid control
	* @returns {void}
	*/
	groupColumn(fieldName: string): void;

	/** Hide columns from the grid based on the header text
	* @param {Array<any>|string} you can pass either array of header text of various columns or a header text of a column to hide
	* @returns {void}
	*/
	hideColumns(headerText: Array<any>|string): void;

	/** Print the grid control
	* @returns {void}
	*/
	print(): void;

	/** It is used to refresh and reset the changes made in &quot;batch&quot; edit mode
	* @returns {void}
	*/
	refreshBatchEditChanges(): void;

	/** Refresh the grid contents. The template refreshment is based on the argument passed along with this method
	* @param {boolean} optional When templateRefresh is set true, template and grid contents both are refreshed in grid else only grid content is refreshed
	* @returns {void}
	*/
	refreshContent(templateRefresh: boolean): void;

	/** Refresh the template of the grid
	* @returns {void}
	*/
	refreshTemplate(): void;

	/** Refresh the toolbar items in grid.
	* @returns {void}
	*/
	refreshToolbar(): void;

	/** Remove a column or collection of columns from a sorted column collections in grid.
	* @param {Array<any>|string} Pass array of field names of the columns to remove a collection of sorted columns or pass a string of field name to remove a column from sorted column collections
	* @returns {void}
	*/
	removeSortedColumns(fieldName: Array<any>|string): void;

	/** Creates a grid control
	* @returns {void}
	*/
	render(): void;

	/** Re-order the column in grid
	* @param {string} Pass the from field name of the column needs to be changed
	* @param {string} Pass the to field name of the column needs to be changed
	* @returns {void}
	*/
	reorderColumns(fromFieldName: string, toFieldName: string): void;

	/** Reset the model collections like pageSettings, groupSettings, filterSettings, sortSettings and summaryRows.
	* @returns {void}
	*/
	resetModelCollections(): void;

	/** Resize the columns by giving column name and width for the corresponding one.
	* @param {string} Pass the column name that needs to be changed
	* @param {string} Pass the width to resize the particular columns
	* @returns {void}
	*/
	resizeColumns(column: string, width: string): void;

	/** Resolves row height issue when unbound column is used with FrozenColumn
	* @returns {void}
	*/
	rowHeightRefresh(): void;

	/** Save the particular edited cell in grid.
	* @returns {boolean}
	*/
	saveCell(): boolean;

	/** Set dimension for grid with corresponding to grid parent.
	* @returns {void}
	*/
	setDimension(): void;

	/** Send a request to grid to refresh the width set to columns
	* @returns {void}
	*/
	setWidthToColumns(): void;

	/** Send a search request to grid with specified string passed in it
	* @param {string} Pass the string to search in Grid records
	* @returns {void}
	*/
	search(searchString: string): void;

	/** Select cells in grid.
	* @param {any} It is used to set the starting index of row and indexes of cells for that corresponding row for selecting cells.
	* @returns {void}
	*/
	selectCells(rowCellIndexes: any): void;

	/** Select columns in grid.
	* @param {number} It is used to set the starting index of column for selecting columns.
	* @returns {void}
	*/
	selectColumns(fromIndex: number): void;

	/** Select rows in grid.
	* @param {number} It is used to set the starting index of row for selecting rows.
	* @param {number} It is used to set the ending index of row for selecting rows.
	* @returns {void}
	*/
	selectRows(fromIndex: number, toIndex: number): void;

	/** Select rows in grid.
	* @param {Array<any>} Pass array of rowIndexes for selecting rows
	* @returns {void}
	*/
	selectRows(rowIndexes: Array<any>): void;

	/** Used to update a particular cell value.Note: It will work only for Local Data.
	* @returns {void}
	*/
	setCellText(): void;

	/** Used to update a particular cell value based on specified row Index and the fieldName.
	* @param {number} It is used to set the index for selecting the row.
	* @param {string} It is used to set the field name for selecting column.
	* @param {any} It is used to set the value for the selected cell.
	* @returns {void}
	*/
	setCellValue(Index: number, fieldName: string, value: any): void;

	/** Set validation to a field during editing.
	* @param {string} Specify the field name of the column to set validation rules
	* @param {any} Specify the validation rules for the field
	* @returns {void}
	*/
	setValidationToField(fieldName: string, rules: any): void;

	/** Show columns in the grid based on the header text
	* @param {Array<any>|string} you can pass either array of header text of various columns or a header text of a column to show
	* @returns {void}
	*/
	showColumns(headerText: Array<any>|string): void;

	/** Send a sorting request in grid.
	* @param {string} Pass the field name of the column as columnName for which sorting have to be performed
	* @param {string} optional Pass the sort direction ascending/descending by which the column have to be sort. By default it is sorting in an ascending order
	* @returns {void}
	*/
	sortColumn(columnName: string, sortingDirection: string): void;

	/** Send an edit record request in grid
	* @param {JQuery} Pass the tr- selected row element to be edited in grid
	* @returns {HTMLElement}
	*/
	startEdit($tr: JQuery): HTMLElement;

	/** Un-group a column from grouped columns collection in grid
	* @param {string} Pass the field Name of the column to be ungrouped from grouped column collection
	* @returns {void}
	*/
	ungroupColumn(fieldName: string): void;

	/** Update a edited record in grid control when allowEditing is set as true.
	* @param {string} Pass the primary key field Name of the column
	* @param {Array<any>} Pass the edited json data of record need to be update.
	* @returns {void}
	*/
	updateRecord(fieldName: string, data: Array<any>): void;

	/** It adapts grid to its parent element or to the browsers window.
	* @returns {void}
	*/
	windowonresize(): void;
}
export module Grid{

export interface Model {

	/**Gets or sets a value that indicates whether to customizing cell based on our needs.
	* @Default {false}
	*/
	allowCellMerging?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic grouping behavior. Grouping can be done by drag on drop desired columns to gridâ€™s GroupDropArea. This can be further customized through â€œgroupSettingsâ€ property.
	* @Default {false}
	*/
	allowGrouping?: boolean;

	/**Gets or sets a value that indicates whether to enable keyboard support for performing grid actions. selectionType â€“ Gets or sets a value that indicates whether to enable single row or multiple rows selection behavior in grid. Multiple selection can be done through by holding CTRL and clicking the grid rows
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic filtering behavior on grid. Filtering can be used to limit the records displayed using required criteria and this can be further customized through â€œfilterSettingsâ€ property
	* @Default {false}
	*/
	allowFiltering?: boolean;

	/**Gets or sets a value that indicates whether to enable the dynamic sorting behavior on grid data. Sorting can be done through clicking on particular column header.
	* @Default {false}
	*/
	allowSorting?: boolean;

	/**Gets or sets a value that indicates whether to enable multi columns sorting behavior in grid. Sort multiple columns by holding CTRL and click on the corresponding column header.
	* @Default {false}
	*/
	allowMultiSorting?: boolean;

	/**This specifies the grid to show the paginated data. Also enables pager control at the bottom of grid for dynamic navigation through data source. Paging can be further customized through â€œpageSettingsâ€ property.
	* @Default {false}
	*/
	allowPaging?: boolean;

	/**Gets or sets a value that indicates whether to enable the columns reordering behavior in the grid. Reordering can be done through by drag and drop the particular column from one index to another index within the grid.
	* @Default {false}
	*/
	allowReordering?: boolean;

	/**Gets or sets a value that indicates whether the column is non resizable. Column width is set automatically based on the content or header text which is large.
	* @Default {false}
	*/
	allowResizeToFit?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic resizable of columns. Resize the width of the columns by simply click and move the particular column header line
	* @Default {false}
	*/
	allowResizing?: boolean;

	/**Gets or sets a value that indicates whether to enable the scrollbar in the grid and view the records by scroll through the grid manually
	* @Default {false}
	*/
	allowScrolling?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic searching behavior in grid. Currently search box can be enabled through â€œtoolbarSettingsâ€
	* @Default {false}
	*/
	allowSearching?: boolean;

	/**Gets or sets a value that indicates whether user can select rows on grid. On enabling feature, selected row will be highlighted.
	* @Default {true}
	*/
	allowSelection?: boolean;

	/**Gets or sets a value that indicates whether the Content will wrap to the next line if the content exceeds the boundary of the Column Cells.
	* @Default {false}
	*/
	allowTextWrap?: boolean;

	/**Gets or sets a value that indicates whether to enable the multiple exporting behavior on grid data.
	* @Default {false}
	*/
	allowMultipleExporting?: boolean;

	/**Gets or sets a value that indicates to define common width for all the columns in the grid.
	*/
	commonWidth?: number;

	/**Gets or sets a value that indicates to enable the visibility of the grid lines.
	* @Default {ej.Grid.GridLines.Both}
	*/
	gridLines?: ej.Grid.GridLines|string;

	/**This specifies the grid to add the grid control inside the grid row of the parent with expand/collapse options
	* @Default {null}
	*/
	childGrid?: any;

	/**Used to enable or disable static width settings for column. If the columnLayout is set as fixed, then column width will be static.
	* @Default {ej.Grid.ColumnLayout.Auto}
	*/
	columnLayout?: ej.Grid.ColumnLayout|string;

	/**Gets or sets an object that indicates to render the grid with specified columns
	* @Default {[]}
	*/
	columns?: Array<Columns>;

	/**Gets or sets an object that indicates whether to customize the context menu behavior of the grid.
	*/
	contextMenuSettings?: ContextMenuSettings;

	/**Gets or sets a value that indicates to render the grid with custom theme. allowScrolling â€“ Gets or sets a value that indicates whether to enable the scrollbar in the grid and view the records by scroll through the grid manually
	*/
	cssClass?: string;

	/**Gets or sets the data to render the grid with records
	* @Default {null}
	*/
	dataSource?: any;

	/**Default Value:
	* @Default {null}
	*/
	detailsTemplate?: string;

	/**Gets or sets an object that indicates whether to customize the editing behavior of the grid.
	*/
	editSettings?: EditSettings;

	/**Gets or sets a value that indicates whether to enable the alternative rows differentiation in the grid records based on corresponding theme.
	* @Default {true}
	*/
	enableAltRow?: boolean;

	/**Gets or sets a value that indicates whether to enable the save action in the grid through row selection
	* @Default {true}
	*/
	enableAutoSaveOnSelectionChange?: boolean;

	/**Gets or sets a value that indicates whether to enable mouse over effect on the corresponding column header cell of the grid
	* @Default {false}
	*/
	enableHeaderHover?: boolean;

	/**Gets or sets a value that indicates whether to persist the grid model state in page using applicable medium i.e., HTML5 localStorage or cookies
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Gets or sets a value that indicates whether the grid rows has to be rendered as detail view in mobile mode
	* @Default {false}
	*/
	enableResponsiveRow?: boolean;

	/**Gets or sets a value that indicates whether to enable mouse over effect on corresponding grid row.
	* @Default {true}
	*/
	enableRowHover?: boolean;

	/**Align content in the grid control from right to left by setting the property as true.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**To Disable the mouse swipe property as false.
	* @Default {true}
	*/
	enableTouch?: boolean;

	/**Gets or sets an object that indicates whether to customize the filtering behavior of the grid
	*/
	filterSettings?: FilterSettings;

	/**Gets or sets an object that indicates whether to customize the grouping behavior of the grid.
	*/
	groupSettings?: GroupSettings;

	/**Gets or sets an object that indicates whether to auto wrap the grid header or content or both
	*/
	textWrapSettings?: TextWrapSettings;

	/**Gets or sets a value that indicates whether the grid design has be to made responsive.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**This specifies to change the key in keyboard interaction to grid control
	* @Default {null}
	*/
	keySettings?: any;

	/**Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to a particular country or region.
	* @Default {en-US}
	*/
	locale?: string;

	/**Gets or sets a value that indicates whether to set the minimum width of the responsive grid while isResponsive property is true and enableResponsiveRow property is set as false.
	* @Default {0}
	*/
	minWidth?: number;

	/**Gets or sets an object that indicates whether to modify the pager default configuration.
	*/
	pageSettings?: PageSettings;

	/**Query the dataSource from the table for Grid.
	* @Default {null}
	*/
	query?: any;

	/**Gets or sets a value that indicates to render the grid with template rows. The template row must be a table row. That table row must have the JavaScript render binding format ({{:columnName}}) then the grid data source binds the data to the corresponding table row of the template.
	* @Default {null}
	*/
	rowTemplate?: string;

	/**Gets or sets an object that indicates whether to customize the scrolling behavior of the grid.
	*/
	scrollSettings?: ScrollSettings;

	/**Gets or sets an object that indicates whether to customize the searching behavior of the grid
	*/
	searchSettings?: SearchSettings;

	/**Gets a value that indicates whether the grid model to hold multiple selected records . selectedRecords can be used to displayed hold the single or multiple selected records using â€œselectedRecordsâ€ property
	* @Default {null}
	*/
	selectedRecords?: Array<any>;

	/**Gets or sets a value that indicates to select the row while initializing the grid
	* @Default {-1}
	*/
	selectedRowIndex?: number;

	/**This property is used to configure the selection behavior of the grid.
	*/
	selectionSettings?: SelectionSettings;

	/**The row selection behavior of grid. Accepting types are &quot;single&quot; and &quot;multiple&quot;.
	* @Default {ej.Grid.SelectionType.Single}
	*/
	selectionType?: ej.Grid.SelectionType|string;

	/**This specifies to add new editable row dynamically at the either top or bottom of the grid.
	* @Default {false}
	*/
	showAddNewRow?: boolean;

	/**Default Value:
	* @Default {false}
	*/
	showColumnChooser?: boolean;

	/**Default Value:
	* @Default {true}
	*/
	showInColumnChooser?: boolean;

	/**Gets or sets a value that indicates stacked header should be shown on grid layout when the property â€œstackedHeaderRowsâ€ is set.
	* @Default {false}
	*/
	showStackedHeader?: boolean;

	/**Gets or sets a value that indicates summary rows should be shown on grid layout when the property â€œsummaryRowsâ€ is set
	* @Default {false}
	*/
	showSummary?: boolean;

	/**Gets or sets a value that indicates whether to customize the sorting behavior of the grid.
	*/
	sortSettings?: SortSettings;

	/**Gets or sets an object that indicates to managing the collection of stacked header rows for the grid.
	* @Default {[]}
	*/
	stackedHeaderRows?: Array<StackedHeaderRows>;

	/**Gets or sets an object that indicates to managing the collection of summary rows for the grid.
	* @Default {[]}
	*/
	summaryRows?: Array<SummaryRows>;

	/**Gets or sets an object that indicates whether to enable the toolbar in the grid and add toolbar items
	*/
	toolbarSettings?: ToolbarSettings;

	/**Triggered for every grid action before its starts.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggered for every grid action success event.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggered for every grid action server failure event.*/
	actionFailure? (e: ActionFailureEventArgs): void;

	/**Triggered when record batch add.*/
	batchAdd? (e: BatchAddEventArgs): void;

	/**Triggered when record batch delete.*/
	batchDelete? (e: BatchDeleteEventArgs): void;

	/**Triggered before the batch add.*/
	beforeBatchAdd? (e: BeforeBatchAddEventArgs): void;

	/**Triggered before the batch delete.*/
	beforeBatchDelete? (e: BeforeBatchDeleteEventArgs): void;

	/**Triggered before the batch save.*/
	beforeBatchSave? (e: BeforeBatchSaveEventArgs): void;

	/**Triggered before the record is going to be edited.*/
	beginEdit? (e: BeginEditEventArgs): void;

	/**Triggered when record cell edit.*/
	cellEdit? (e: CellEditEventArgs): void;

	/**Triggered when record cell save.*/
	cellSave? (e: CellSaveEventArgs): void;

	/**Triggered after the cell is selected.*/
	cellSelected? (e: CellSelectedEventArgs): void;

	/**Triggered before the cell is going to be selected.*/
	cellSelecting? (e: CellSelectingEventArgs): void;

	/**Triggered when the column is being dragged.*/
	columnDrag? (e: ColumnDragEventArgs): void;

	/**Triggered when column dragging begins.*/
	columnDragStart? (e: ColumnDragStartEventArgs): void;

	/**Triggered when the column is dropped.*/
	columnDrop? (e: ColumnDropEventArgs): void;

	/**Triggered after the column is selected.*/
	columnSelected? (e: ColumnSelectedEventArgs): void;

	/**Triggered before the column is going to be selected.*/
	columnSelecting? (e: ColumnSelectingEventArgs): void;

	/**Triggered when context menu item is clicked*/
	contextClick? (e: ContextClickEventArgs): void;

	/**Triggered before the context menu is opened.*/
	contextOpen? (e: ContextOpenEventArgs): void;

	/**Triggered when the grid is rendered completely.*/
	create? (e: CreateEventArgs): void;

	/**Triggered when the grid is bound with data during initial rendering.*/
	dataBound? (e: DataBoundEventArgs): void;

	/**Triggered when grid going to destroy.*/
	destroy? (e: DestroyEventArgs): void;

	/**Triggered when detail template row is clicked to collapse.*/
	detailsCollapse? (e: DetailsCollapseEventArgs): void;

	/**Triggered detail template row is initialized.*/
	detailsDataBound? (e: DetailsDataBoundEventArgs): void;

	/**Triggered when detail template row is clicked to expand.*/
	detailsExpand? (e: DetailsExpandEventArgs): void;

	/**Triggered after the record is added.*/
	endAdd? (e: EndAddEventArgs): void;

	/**Triggered after the record is deleted.*/
	endDelete? (e: EndDeleteEventArgs): void;

	/**Triggered after the record is edited.*/
	endEdit? (e: EndEditEventArgs): void;

	/**Triggered initial load.*/
	load? (e: LoadEventArgs): void;

	/**Triggered every time a request is made to access particular cell information, element and data.*/
	mergeCellInfo? (e: MergeCellInfoEventArgs): void;

	/**Triggered every time a request is made to access particular cell information, element and data.*/
	queryCellInfo? (e: QueryCellInfoEventArgs): void;

	/**Triggered when record is clicked.*/
	recordClick? (e: RecordClickEventArgs): void;

	/**Triggered when record is double clicked.*/
	recordDoubleClick? (e: RecordDoubleClickEventArgs): void;

	/**Triggered after column resized.*/
	resized? (e: ResizedEventArgs): void;

	/**Triggered when column resize end.*/
	resizeEnd? (e: ResizeEndEventArgs): void;

	/**Triggered when column resize start.*/
	resizeStart? (e: ResizeStartEventArgs): void;

	/**Triggered when right clicked on grid element.*/
	rightClick? (e: RightClickEventArgs): void;

	/**Triggered every time a request is made to access row information, element and data.*/
	rowDataBound? (e: RowDataBoundEventArgs): void;

	/**Triggered after the row is selected.*/
	rowSelected? (e: RowSelectedEventArgs): void;

	/**Triggered before the row is going to be selected.*/
	rowSelecting? (e: RowSelectingEventArgs): void;

	/**Triggered when refresh the template column elements in the Grid.*/
	templateRefresh? (e: TemplateRefreshEventArgs): void;

	/**Triggered when toolbar item is clicked in grid.*/
	toolBarClick? (e: ToolBarClickEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the current selected page number.
	*/
	currentPage?: number;

	/**Returns the previous selected page number.
	*/
	previousPage?: number;

	/**Returns the end row index of that current page.
	*/
	endIndex?: number;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the start row index of that current page.
	*/
	startIndex?: number;

	/**Returns the current grouped column field name.
	*/
	columnName?: string;

	/**Returns the column sort direction.
	*/
	columnSortDirection?: string;

	/**Returns current edited row.
	*/
	row?: any;

	/**Returns the current action event type.
	*/
	originalEventType?: string;

	/**Returns primary key.
	*/
	primaryKey?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns the edited row index.
	*/
	rowIndex?: number;

	/**Returns the record object (JSON).
	*/
	data?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns the selected row index.
	*/
	selectedRow?: number;

	/**Returns selected row for delete.
	*/
	tr?: any;

	/**Returns current filtering column field name.
	*/
	currentFilteringColumn?: any;

	/**Returns filter details.
	*/
	filterCollection?: any;

	/**Returns type of the column like number, string and so on.
	*/
	columnType?: string;

	/**Returns the excel filter model.
	*/
	filtermodel?: any;

	/**Returns the dataSource.
	*/
	dataSource?: any;

	/**Returns the query manager.
	*/
	query?: any;

	/**Returns the customfilter option value.
	*/
	isCustomFilter?: boolean;
}

export interface ActionCompleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the current selected page number.
	*/
	currentPage?: number;

	/**Returns the previous selected page number.
	*/
	previousPage?: number;

	/**Returns the end row index of that current page.
	*/
	endIndex?: number;

	/**Returns current action event type.
	*/
	originalEventType?: string;

	/**Returns the start row index of the current page.
	*/
	startIndex?: number;

	/**Returns grid element.
	*/
	target?: any;

	/**Returns the current sorted column field name.
	*/
	columnName?: string;

	/**Returns the column sort direction.
	*/
	columnSortDirection?: string;

	/**Returns current edited row.
	*/
	row?: any;

	/**Returns primary key.
	*/
	primaryKey?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns the edited row index.
	*/
	rowIndex?: number;

	/**Returns the record object (JSON).
	*/
	data?: any;

	/**Returns the selectedRow index.
	*/
	selectedRow?: number;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns selected row for delete.
	*/
	tr?: any;

	/**Returns current filtering column field name.
	*/
	currentFilteringColumn?: string;

	/**Returns filter details.
	*/
	filterCollection?: any;

	/**Returns the dataSource.
	*/
	dataSource?: any;

	/**Returns the excel filter model.
	*/
	filtermodel?: any;

	/**Returns type of the column like number, string and so on.
	*/
	columnType?: string;

	/**Returns the customfilter option value.
	*/
	isCustomFilter?: boolean;
}

export interface ActionFailureEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the error return by server.
	*/
	error?: any;

	/**Returns the current selected page number.
	*/
	currentPage?: number;

	/**Returns the previous selected page number.
	*/
	previousPage?: number;

	/**Returns the end row index of that current page.
	*/
	endIndex?: number;

	/**Returns current action event type.
	*/
	originalEventType?: string;

	/**Returns the start row index of the current page.
	*/
	startIndex?: number;

	/**Returns grid element.
	*/
	target?: any;

	/**Returns the current sorted column field name.
	*/
	columnName?: string;

	/**Returns the column sort direction.
	*/
	columnSortDirection?: string;

	/**Returns current edited row.
	*/
	row?: any;

	/**Returns primary key.
	*/
	primaryKey?: string;

	/**Returns primary key value.
	*/
	primaryKeyValue?: string;

	/**Returns the edited row index.
	*/
	rowIndex?: number;

	/**Returns the record object (JSON).
	*/
	data?: any;

	/**Returns the selectedRow index.
	*/
	selectedRow?: number;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns selected row for delete.
	*/
	tr?: any;

	/**Returns current filtering column field name.
	*/
	currentFilteringColumn?: string;

	/**Returns filter details.
	*/
	filterCollection?: any;
}

export interface BatchAddEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the column object.
	*/
	columnObject?: any;

	/**Returns the column index.
	*/
	columnIndex?: number;

	/**Returns the row element.
	*/
	row?: any;

	/**Returns the primaryKey.
	*/
	primaryKey?: any;

	/**Returns the cell object.
	*/
	cell?: any;
}

export interface BatchDeleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the primary key.
	*/
	primaryKey?: any;

	/**Returns the row Index.
	*/
	rowIndex?: number;
}

export interface BeforeBatchAddEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the default data object.
	*/
	defaultData?: any;

	/**Returns the primaryKey.
	*/
	primaryKey?: any;
}

export interface BeforeBatchDeleteEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the primaryKey.
	*/
	primaryKey?: any;

	/**Returns the row index.
	*/
	rowIndex?: number;

	/**Returns the row data.
	*/
	rowData?: any;

	/**Returns the row element.
	*/
	row?: any;
}

export interface BeforeBatchSaveEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the changed record object.
	*/
	batchChanges?: any;
}

export interface BeginEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current edited row.
	*/
	row?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the primary key.
	*/
	primaryKey?: any;

	/**Returns the primary key value.
	*/
	primaryKeyValue?: any;

	/**Returns the edited row index.
	*/
	rowIndex?: number;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CellEditEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the validation rules.
	*/
	validationRules?: any;

	/**Returns the column name.
	*/
	columnName?: string;

	/**Returns the cell value.
	*/
	value?: string;

	/**Returns the row data object.
	*/
	rowData?: any;

	/**Returns the previous value of the cell.
	*/
	previousValue?: string;

	/**Returns the column object.
	*/
	columnObject?: any;

	/**Returns the cell object.
	*/
	cell?: any;

	/**Returns isForeignKey option value.
	*/
	isForeignKey?: boolean;
}

export interface CellSaveEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the column name.
	*/
	columnName?: string;

	/**Returns the cell value.
	*/
	value?: string;

	/**Returns the row data object.
	*/
	rowData?: any;

	/**Returns the previous value of the cell.
	*/
	previousValue?: string;

	/**Returns the column object.
	*/
	columnObject?: any;

	/**Returns the cell object.
	*/
	cell?: any;

	/**Returns isForeignKey option value.
	*/
	isForeignKey?: boolean;
}

export interface CellSelectedEventArgs {

	/**Returns the selected cell index value.
	*/
	cellIndex?: number;

	/**Returns the previous selected cell index value.
	*/
	previousRowCellIndex?: number;

	/**Returns the selected cell element.
	*/
	currentCell?: any;

	/**Returns the previous selected cell element.
	*/
	previousRowCell?: any;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the selected row cell index values.
	*/
	selectedRowCellIndex?: Array<any>;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CellSelectingEventArgs {

	/**Returns the selected cell index value.
	*/
	cellIndex?: number;

	/**Returns the previous selected cell index value.
	*/
	previousRowCellIndex?: number;

	/**Returns the selected cell element.
	*/
	currentCell?: any;

	/**Returns the previous selected cell element.
	*/
	previousRowCell?: any;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns whether the ctrl key is pressed while selecting cell
	*/
	isCtrlKeyPressed?: boolean;

	/**Returns whether the shift key is pressed while selecting cell
	*/
	isShiftKeyPressed?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ColumnDragEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns draggable element type.
	*/
	draggableType?: any;

	/**Returns the draggable column object.
	*/
	column?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns target elements based on mouse move position.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ColumnDragStartEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns draggable element type.
	*/
	draggableType?: any;

	/**Returns the draggable column object.
	*/
	column?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns drag start element.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ColumnDropEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns draggable element type.
	*/
	draggableType?: string;

	/**Returns the draggable column object.
	*/
	column?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns dropped dragged element.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ColumnSelectedEventArgs {

	/**Returns the selected cell index value.
	*/
	columnIndex?: number;

	/**Returns the previous selected column index value.
	*/
	previousColumnIndex?: number;

	/**Returns the selected header cell element.
	*/
	headerCell?: any;

	/**Returns the previous selected header cell element.
	*/
	prevColumnHeaderCell?: any;

	/**Returns corresponding column object (JSON).
	*/
	column?: any;

	/**Returns the selected columns values.
	*/
	selectedColumnsIndex?: Array<any>;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ColumnSelectingEventArgs {

	/**Returns the selected column index value.
	*/
	columnIndex?: number;

	/**Returns the previous selected column index value.
	*/
	previousColumnIndex?: number;

	/**Returns the selected header cell element.
	*/
	headerCell?: any;

	/**Returns the previous selected header cell element.
	*/
	prevColumnHeaderCell?: any;

	/**Returns corresponding column object (JSON).
	*/
	column?: any;

	/**Returns whether the ctrl key is pressed while selecting cell
	*/
	isCtrlKeyPressed?: boolean;

	/**Returns whether the shift key is pressed while selecting cell
	*/
	isShiftKeyPressed?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ContextClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the status of contextmenu item which denotes its enabled state
	*/
	status?: boolean;

	/**Returns the target item.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ContextOpenEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the status of contextmenu item which denotes its enabled state
	*/
	status?: boolean;

	/**Returns the target item.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DataBoundEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DetailsCollapseEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns detail row element.
	*/
	detailsRow?: any;

	/**Returns master row of detail row record object (JSON).
	*/
	masterData?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns master row element.
	*/
	masterRow?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DetailsDataBoundEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns details row element.
	*/
	detailsElement?: any;

	/**Returns the details row data.
	*/
	data?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DetailsExpandEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns detail row element.
	*/
	detailsRow?: any;

	/**Returns master row of detail row record object (JSON).
	*/
	masterData?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns master row element.
	*/
	masterRow?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface EndAddEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns added data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface EndDeleteEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface EndEditEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns modified data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface MergeCellInfoEventArgs {

	/**Returns grid cell.
	*/
	cell?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current row record object (JSON).
	*/
	data?: any;

	/**Returns the text value in the cell.
	*/
	text?: string;

	/**Returns the column object.
	*/
	column?: any;

	/**Method to merge Grid rows.
	*/
	rowMerge?: void;

	/**Method to merge Grid columns.
	*/
	colMerge?: void;

	/**Method to merge Grid rows and columns.
	*/
	merge?: void;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface QueryCellInfoEventArgs {

	/**Returns grid cell.
	*/
	cell?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current row record object (JSON).
	*/
	data?: any;

	/**Returns the text value in the cell.
	*/
	text?: string;

	/**Returns the column object.
	*/
	column?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RecordClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the row index of the selected row.
	*/
	rowIndex?: number;

	/**Returns the jquery object of the current selected row.
	*/
	row?: any;

	/**Returns the current selected cell.
	*/
	cell?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the cell index value.
	*/
	cellIndex?: number;

	/**Returns the corresponding cell value.
	*/
	cellValue?: string;

	/**Returns the Header text of the column corresponding to the selected cell.
	*/
	columnName?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RecordDoubleClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the row index of the selected row.
	*/
	rowIndex?: number;

	/**Returns the jquery object of the current selected row.
	*/
	row?: any;

	/**Returns the current selected cell.
	*/
	cell?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the selected cell index value.
	*/
	cellIndex?: number;

	/**Returns the corresponding cell value.
	*/
	cellValue?: string;

	/**Returns the Header text of the column corresponding to the selected cell.
	*/
	columnName?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ResizedEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the column index.
	*/
	columnIndex?: number;

	/**Returns the column object.
	*/
	column?: any;

	/**Returns the grid object.
	*/
	target?: any;

	/**Returns the old width value.
	*/
	oldWidth?: number;

	/**Returns the new width value.
	*/
	newWidth?: number;
}

export interface ResizeEndEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the column index.
	*/
	columnIndex?: number;

	/**Returns the column object.
	*/
	column?: any;

	/**Returns the grid object.
	*/
	target?: any;

	/**Returns the old width value.
	*/
	oldWidth?: number;

	/**Returns the new width value.
	*/
	newWidth?: number;

	/**Returns the extra width value.
	*/
	extra?: number;
}

export interface ResizeStartEventArgs {

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns deleted data.
	*/
	data?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the column index.
	*/
	columnIndex?: number;

	/**Returns the column object.
	*/
	column?: any;

	/**Returns the grid object.
	*/
	target?: any;

	/**Returns the old width value.
	*/
	oldWidth?: number;
}

export interface RightClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current record object (JSON).
	*/
	currentData?: any;

	/**Returns the row index of the selected row.
	*/
	rowIndex?: number;

	/**Returns the current selected row.
	*/
	row?: any;

	/**Returns the selected row data object.
	*/
	data?: any;

	/**Returns the cell index of the selected cell.
	*/
	cellIndex?: number;

	/**Returns the cell value.
	*/
	cellValue?: string;

	/**Returns the cell object.
	*/
	cell?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowDataBoundEventArgs {

	/**Returns grid row.
	*/
	row?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current row record object (JSON).
	*/
	data?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowSelectedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the foreign key record object (JSON).
	*/
	foreignKeyData?: any;

	/**Returns the row index of the selected row.
	*/
	rowIndex?: number;

	/**Returns the current selected row.
	*/
	row?: any;

	/**Returns the previous selected row element.
	*/
	prevRow?: any;

	/**Returns the previous selected row index.
	*/
	prevRowIndex?: number;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowSelectingEventArgs {

	/**Returns the selected row index value.
	*/
	rowIndex?: number;

	/**Returns the selected row element.
	*/
	row?: any;

	/**Returns the previous selected row element.
	*/
	prevRow?: any;

	/**Returns the previous selected row index.
	*/
	prevRowIndex?: number;

	/**Returns current record object (JSON).
	*/
	data?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface TemplateRefreshEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the cell object.
	*/
	cell?: any;

	/**Returns the column object.
	*/
	column?: any;

	/**Returns the current row data.
	*/
	data?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the current row index.
	*/
	rowIndex?: number;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ToolBarClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the status of toolbar item which denotes its enabled state
	*/
	status?: boolean;

	/**Returns the target item.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the grid model.
	*/
	gridModel?: any;

	/**Returns the toolbar object of the selected toolbar element.
	*/
	toolbarData?: any;
}

export interface ColumnsCommands {

	/**Gets or sets an object that indicates to define all the button options which are available in ejButton.
	*/
	buttonOptions?: any;

	/**Gets or sets a value that indicates to add the command column button. See unboundType
	*/
	type?: ej.Grid.UnboundType|string;
}

export interface Columns {

	/**Gets or sets a value that indicates whether to enable editing behavior for particular column.
	* @Default {true}
	*/
	allowEditing?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic filtering behavior for particular column.
	* @Default {true}
	*/
	allowFiltering?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic grouping behavior for particular column.
	* @Default {true}
	*/
	allowGrouping?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic sorting behavior for particular column.
	* @Default {true}
	*/
	allowSorting?: boolean;

	/**Gets or sets a value that indicates whether to enable dynamic resizable for particular column.
	* @Default {true}
	*/
	allowResizing?: boolean;

	/**Used to hide the particular column in column chooser by giving value as false.
	* @Default {true}
	*/
	showInColumnChooser?: boolean;

	/**Gets or sets an object that indicates to define a command column in the grid.
	* @Default {[]}
	*/
	commands?: Array<ColumnsCommands>;

	/**Gets or sets a value that indicates to provide custom css for an individual column.
	*/
	cssClass?: string;

	/**Gets or sets a value that indicates the attribute values to the td element of a particular column
	*/
	customAttributes?: any;

	/**Gets or sets a value that indicates to bind the external datasource to the particular column when columnEditType as &quot;dropdownedit&quot; and also it is used to bind the datasource to the foreign key column while editing the grid. //Where data is array of JSON objects of text and value for the drop-down and array of JSON objects for foreign key column.
	* @Default {null}
	*/
	dataSource?: Array<any>;

	/**Gets or sets a value that indicates to display the specified default value while adding a new record to the grid
	*/
	defaultValue?: string|number|boolean|Date;

	/**Gets or sets a value that indicates to render the grid content and header with an html elements
	* @Default {false}
	*/
	disableHtmlEncode?: boolean;

	/**Gets or sets a value that indicates to display a column value as checkbox or string
	* @Default {true}
	*/
	displayAsCheckBox?: boolean;

	/**Gets or sets a value that indicates to customize ejNumericTextbox of an editable column. See editingType
	*/
	editParams?: any;

	/**Gets or sets a template that displays a custom editor used to edit column values. See editTemplate
	* @Default {null}
	*/
	editTemplate?: any;

	/**Gets or sets a value that indicates to render the element(based on edit type) for editing the grid record. See editingType
	* @Default {ej.Grid.EditingType.String}
	*/
	editType?: ej.Grid.EditingType|string;

	/**Gets or sets a value that indicates to display the columns in the grid mapping with column name of the dataSource.
	*/
	field?: string;

	/**Gets or sets a value that indicates to define foreign key field name of the grid datasource.
	* @Default {null}
	*/
	foreignKeyField?: string;

	/**Gets or sets a value that indicates to bind the field which is in foreign column datasource based on the foreignKeyField
	* @Default {null}
	*/
	foreignKeyValue?: string;

	/**Gets or sets a value that indicates the format for the text applied on the column
	*/
	format?: string;

	/**Gets or sets a value that indicates to add the template within the header element of the particular column.
	* @Default {null}
	*/
	headerTemplateID?: string;

	/**Gets or sets a value that indicates to display the title of that particular column.
	*/
	headerText?: string;

	/**This defines the text alignment of a particular column header cell value. See headerTextAlign
	* @Default {ej.TextAlign.Left}
	*/
	headerTextAlign?: ej.TextAlign|string;

	/**You can use this property to freeze selected columns in grid at the time of scrolling.
	* @Default {false}
	*/
	isFrozen?: boolean;

	/**Gets or sets a value that indicates the column has an identity in the database.
	* @Default {false}
	*/
	isIdentity?: boolean;

	/**Gets or sets a value that indicates the column is act as a primary key(read-only) of the grid. The editing is performed based on the primary key column
	* @Default {false}
	*/
	isPrimaryKey?: boolean;

	/**Gets or sets a value that indicates whether to bind the column which are not in the datasource
	* @Default {false}
	*/
	isUnbound?: boolean;

	/**Gets or sets a value that indicates whether to enables column template for a particular column.
	* @Default {false}
	*/
	template?: boolean|string;

	/**Gets or sets a value that indicates to add the template as a particular column data .
	* @Default {null}
	*/
	templateID?: string;

	/**Gets or sets a value that indicates to align the text within the column. See textAlign
	* @Default {ej.TextAlign.Left}
	*/
	textAlign?:  ej.TextAlign|string;

	/**Sets the template for Tooltip in Grid Columns(both header and content)
	*/
	tooltip?: string;

	/**Sets the clip mode for Grid cell as ellipsis or clipped content(both header and content)
	* @Default {ej.Grid.ClipMode.Clip}
	*/
	clipMode?: ej.Grid.ClipMode|string;

	/**Gets or sets a value that indicates to specify the data type of the specified columns.
	*/
	type?: string;

	/**Gets or sets a value that indicates to define constraints for saving data to the database.
	*/
	validationRules?: any;

	/**Gets or sets a value that indicates whether this column is visible in the grid.
	* @Default {true}
	*/
	visible?: boolean;

	/**Gets or sets a value that indicates to define the width for a particular column in the grid.
	*/
	width?: number;
}

export interface ContextMenuSettingsSubContextMenu {

	/**Used to get or set the corresponding custom context menu item to which the submenu to be appended.
	* @Default {null}
	*/
	contextMenuItem?: string;

	/**Used to get or set the sub menu items to the custom context menu item.
	* @Default {[]}
	*/
	subMenu?: Array<any>;
}

export interface ContextMenuSettings {

	/**Gets or sets a value that indicates whether to add the default context menu actions as a context menu items If enableContextMenu is true it will show all the items related to the target, if you want selected items from contextmenu you have to mention in the contextMenuItems
	* @Default {[]}
	*/
	contextMenuItems?: Array<any>;

	/**Gets or sets a value that indicates whether to add custom contextMenu items within the toolbar to perform any action in the grid
	* @Default {[]}
	*/
	customContextMenuItems?: Array<any>;

	/**Gets or sets a value that indicates whether to enable the context menu action in the grid.
	* @Default {false}
	*/
	enableContextMenu?: boolean;

	/**Used to get or set the subMenu to the corresponding custom context menu item.
	*/
	subContextMenu?: Array<ContextMenuSettingsSubContextMenu>;

	/**Gets or sets a value that indicates whether to disable the default context menu items in the grid.
	* @Default {false}
	*/
	disabledefaultitems?: boolean;
}

export interface EditSettings {

	/**Gets or sets a value that indicates whether to enable insert action in the editing mode.
	* @Default {false}
	*/
	allowAdding?: boolean;

	/**Gets or sets a value that indicates whether to enable the delete action in the editing mode.
	* @Default {false}
	*/
	allowDeleting?: boolean;

	/**Gets or sets a value that indicates whether to enable the edit action in the editing mode.
	* @Default {false}
	*/
	allowEditing?: boolean;

	/**Gets or sets a value that indicates whether to enable the editing action while double click on the record
	* @Default {true}
	*/
	allowEditOnDblClick?: boolean;

	/**This specifies the id of the template. This template can be used to display the data that you require to be edited using the Dialog Box
	* @Default {null}
	*/
	dialogEditorTemplateID?: string;

	/**Gets or sets a value that indicates whether to define the mode of editing See editMode
	* @Default {ej.Grid.EditMode.Normal}
	*/
	editMode?: ej.Grid.EditMode|string;

	/**This specifies the id of the template. This template can be used to display the data that you require to be edited using the External edit form
	* @Default {null}
	*/
	externalFormTemplateID?: string;

	/**This specifies to set the position of an External edit form either in the top-right or bottom-left of the grid
	* @Default {ej.Grid.FormPosition.BottomLeft}
	*/
	formPosition?: ej.Grid.FormPosition|string;

	/**This specifies the id of the template. This template can be used to display the data that you require to be edited using the Inline edit form
	* @Default {null}
	*/
	inlineFormTemplateID?: string;

	/**This specifies to set the position of an adding new row either in the top or bottom of the grid
	* @Default {ej.Grid.RowPosition.top}
	*/
	rowPosition?: ej.Grid.RowPosition|string;

	/**Gets or sets a value that indicates whether the confirm dialog has to be shown while saving or discarding the batch changes
	* @Default {true}
	*/
	showConfirmDialog?: boolean;

	/**Gets or sets a value that indicates whether the confirm dialog has to be shown while deleting record
	* @Default {false}
	*/
	showDeleteConfirmDialog?: boolean;

	/**Gets or sets a value that indicates whether the title for edit form is different from the primarykey column.
	* @Default {null}
	*/
	titleColumn?: string;

	/**Gets or sets a value that indicates whether to display the add new form by default in the grid.
	* @Default {false}
	*/
	showAddNewRow?: boolean;
}

export interface FilterSettingsFilteredColumns {

	/**Gets or sets a value that indicates whether to define the field name of the column to be filter.
	*/
	field?: string;

	/**Gets or sets a value that indicates whether to define the filter condition to filtered column.
	*/
	operator?: ej.FilterOperators|string;

	/**Gets or sets a value that indicates whether to define the predicate as and/or.
	*/
	predicate?: string;

	/**Gets or sets a value that indicates whether to define the value to be filtered in a column.
	*/
	value?: string|number;
}

export interface FilterSettings {

	/**Gets or sets a value that indicates to perform the filter operation with case sensitive in excel styled filter menu mode
	* @Default {false}
	*/
	enableCaseSensitivity?: boolean;

	/**This specifies the grid to starts the filter action while typing in the filterBar or after pressing the enter key. based on the filterBarMode. See filterBarMode
	* @Default {ej.Grid.FilterBarMode.Immediate}
	*/
	filterBarMode?: ej.Grid.FilterBarMode|string;

	/**Gets or sets a value that indicates whether to define the filtered columns details programmatically at initial load
	* @Default {[]}
	*/
	filteredColumns?: Array<FilterSettingsFilteredColumns>;

	/**This specifies the grid to show the filterBar or filterMenu to the grid records. See filterType
	* @Default {ej.Grid.FilterType.FilterBar}
	*/
	filterType?: ej.Grid.FilterType|string;

	/**Gets or sets a value that indicates the maximum number of filter choices that can be showed in the excel styled filter menu.
	* @Default {1000}
	*/
	maxFilterChoices?: number;

	/**This specifies the grid to show the filter text within the grid pager itself.
	* @Default {true}
	*/
	showFilterBarMessage?: boolean;

	/**Gets or sets a value that indicates whether to enable the predicate options in the filtering menu
	* @Default {false}
	*/
	showPredicate?: boolean;
}

export interface GroupSettings {

	/**Gets or sets a value that customize the group caption format.
	* @Default {null}
	*/
	captionFormat?: string;

	/**Gets or sets a value that indicates whether to enable the animation effects to the group drop area
	* @Default {true}
	*/
	enableDropAreaAnimation?: boolean;

	/**Gets or sets a value that indicates whether to enable animation button option in the group drop area of the grid.
	* @Default {false}
	*/
	enableDropAreaAutoSizing?: boolean;

	/**Gets or sets a value that indicates whether to add grouped columns programmatically at initial load
	* @Default {[]}
	*/
	groupedColumns?: Array<any>;

	/**Gets or sets a value that indicates whether to show the group drop area just above the column header. It can be used to avoid ungrouping the already grouped column using groupsettings.
	* @Default {true}
	*/
	showDropArea?: boolean;

	/**Gets or sets a value that indicates whether to hide the grouped columns from the grid
	* @Default {false}
	*/
	showGroupedColumn?: boolean;

	/**Gets or sets a value that indicates whether to show the group button image(toggle button)in the column header and also in the grouped column in the group drop area . It can be used to group/ungroup the columns by click on the toggle button.
	* @Default {false}
	*/
	showToggleButton?: boolean;

	/**Gets or sets a value that indicates whether to enable the close button in the grouped column which is in the group drop area to ungroup the grouped column
	* @Default {false}
	*/
	showUngroupButton?: boolean;
}

export interface TextWrapSettings {

	/**This specifies the grid to apply the auto wrap for grid content or header or both.
	* @Default {ej.Grid.WrapMode.Both}
	*/
	wrapMode?: ej.Grid.WrapMode|string;
}

export interface PageSettings {

	/**Gets or sets a value that indicates whether to define which page to display currently in the grid
	* @Default {1}
	*/
	currentPage?: number;

	/**Gets or sets a value that indicates whether to pass the current page information as a query string along with the url while navigating to other page.
	* @Default {false}
	*/
	enableQueryString?: boolean;

	/**Gets or sets a value that indicates whether to enables pager template for the grid.
	* @Default {false}
	*/
	enableTemplates?: boolean;

	/**Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
	* @Default {8}
	*/
	pageCount?: number;

	/**Gets or sets a value that indicates whether to define the number of records displayed per page
	* @Default {12}
	*/
	pageSize?: number;

	/**Gets or sets a value that indicates whether to enables default pager for the grid.
	* @Default {false}
	*/
	showDefaults?: boolean;

	/**Gets or sets a value that indicates to add the template as a pager template for grid.
	* @Default {null}
	*/
	template?: string;

	/**Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
	* @Default {null}
	*/
	totalPages?: number;

	/**Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
	* @Default {null}
	*/
	totalRecordsCount?: number;

	/**Gets or sets a value that indicates whether to define the number of pages to print
	* @Default {ej.Grid.PrintMode.AllPages}
	*/
	printMode?: ej.Grid.PrintMode|string;
}

export interface ScrollSettings {

	/**This specify the grid to to view data that you require without buffering the entire load of a huge database
	* @Default {false}
	*/
	allowVirtualScrolling?: boolean;

	/**This specify the grid to enable/disable touch control for scrolling.
	* @Default {true}
	*/
	enableTouchScroll?: boolean;

	/**This specify the grid to freeze particular columns at the time of scrolling.
	* @Default {0}
	*/
	frozenColumns?: number;

	/**This specify the grid to freeze particular rows at the time of scrolling.
	* @Default {0}
	*/
	frozenRows?: number;

	/**This specify the grid to show the vertical scroll bar, to scroll and view the grid contents.
	* @Default {0}
	*/
	height?: number;

	/**This is used to define the mode of virtual scrolling in grid. See virtualScrollMode
	* @Default {ej.Grid.VirtualScrollMode.Normal}
	*/
	virtualScrollMode?: ej.Grid.VirtualScrollMode|string;

	/**This specify the grid to show the horizontal scroll bar, to scroll and view the grid contents
	* @Default {250}
	*/
	width?: number;

	/**This specify the scroll down pixel of mouse wheel, to scroll mouse wheel and view the grid contents.
	* @Default {57}
	*/
	scrollOneStepBy?: number;
}

export interface SearchSettings {

	/**This specify the grid to search for the value in particular columns that is mentioned in the field.
	* @Default {[]}
	*/
	field?: any;

	/**This specifies the grid to search the particular data that is mentioned in the key.
	*/
	key?: string;

	/**It specifies the grid to search the records based on operator.
	* @Default {contains}
	*/
	operator?: string;

	/**It enables or disables case-sensitivity while searching the search key in grid.
	* @Default {true}
	*/
	ignoreCase?: boolean;
}

export interface SelectionSettings {

	/**Gets or sets a value that indicates whether to enable the toggle selction behavior for row, cell and column.
	* @Default {false}
	*/
	enableToggle?: boolean;

	/**Gets or sets a value that indicates whether to add the default selection actions as a seleciton mode.See selectionMode
	* @Default {[row]}
	*/
	selectionMode?: ej.Grid.SelectionMode|string;
}

export interface SortSettingsSortedColumns {

	/**Gets or sets a value that indicates whether to define the direction to sort the column.
	*/
	direction?: string;

	/**Gets or sets a value that indicates whether to define the field name of the column to be sort
	*/
	field?: string;
}

export interface SortSettings {

	/**Gets or sets a value that indicates whether to define the direction and field to sort the column.
	*/
	sortedColumns?: Array<SortSettingsSortedColumns>;
}

export interface StackedHeaderRowsStackedHeaderColumns {

	/**Gets or sets a value that indicates the header text for the particular stacked header column.
	* @Default {null}
	*/
	column?: string;

	/**Gets or sets a value that indicates class to the corresponding stackedHeaderColumn.
	* @Default {null}
	*/
	cssClass?: string;

	/**Gets or sets a value that indicates the header text for the particular stacked header column.
	* @Default {null}
	*/
	headerText?: string;

	/**Gets or sets a value that indicates the text alignment of the corresponding headerText.
	* @Default {ej.TextAlign.Left}
	*/
	textAlign?: string;
}

export interface StackedHeaderRows {

	/**Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows
	* @Default {[]}
	*/
	stackedHeaderColumns?: Array<StackedHeaderRowsStackedHeaderColumns>;
}

export interface SummaryRowsSummaryColumns {

	/**Gets or sets a value that indicates the text displayed in the summary column as a value
	* @Default {null}
	*/
	customSummaryValue?: string;

	/**This specifies summary column used to perform the summary calculation
	* @Default {null}
	*/
	dataMember?: string;

	/**Gets or sets a value that indicates to define the target column at which to display the summary.
	* @Default {null}
	*/
	displayColumn?: string;

	/**Gets or sets a value that indicates the format for the text applied on the column
	* @Default {null}
	*/
	format?: string;

	/**Gets or sets a value that indicates the text displayed before the summary column value
	* @Default {null}
	*/
	prefix?: string;

	/**Gets or sets a value that indicates the text displayed after the summary column value
	* @Default {null}
	*/
	suffix?: string;

	/**Gets or sets a value that indicates the type of calculations to be performed for the corresponding summary column
	* @Default {[]}
	*/
	summaryType?: ej.Grid.SummaryType|string;

	/**Gets or sets a value that indicates to add the template for the summary value of dataMember given.
	* @Default {null}
	*/
	template?: string;
}

export interface SummaryRows {

	/**Gets or sets a value that indicates whether to show the summary value within the group caption area for the corresponding summary column while grouping the column
	* @Default {false}
	*/
	showCaptionSummary?: boolean;

	/**Gets or sets a value that indicates whether to show the group summary value for the corresponding summary column while grouping a column
	* @Default {false}
	*/
	showGroupSummary?: boolean;

	/**Gets or sets a value that indicates whether to show the total summary value the for the corresponding summary column. The summary row is added after the grid content.
	* @Default {true}
	*/
	showTotalSummary?: boolean;

	/**Gets or sets a value that indicates whether to add summary columns into the summary rows.
	* @Default {[]}
	*/
	summaryColumns?: Array<SummaryRowsSummaryColumns>;

	/**This specifies the grid to show the title for the summary rows.
	*/
	title?: string;

	/**This specifies the grid to show the title of summary row in the specified column.
	* @Default {null}
	*/
	titleColumn?: string;
}

export interface ToolbarSettings {

	/**Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
	* @Default {[]}
	*/
	customToolbarItems?: Array<any>;

	/**Gets or sets a value that indicates whether to enable toolbar in the grid.
	* @Default {false}
	*/
	showToolbar?: boolean;

	/**Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
	* @Default {[]}
	*/
	toolbarItems?: ej.Grid.ToolBarItems|string;
}

enum GridLines{

	///Displays both the horizontal and vertical grid lines.
	Both,

	///Displays the horizontal grid lines only.
	Horizontal,

	///Displays the vertical grid lines only.
	Vertical,

	///No grid lines are displayed.
	None
}


enum ColumnLayout{

	///Column layout is auto(based on width).
	Auto,

	///Column layout is fixed(based on width).
	Fixed
}


enum UnboundType{

	///Unbound type is edit.
	Edit,

	///Unbound type is save.
	Save,

	///Unbound type is delete.
	Delete,

	///Unbound type is cancel.
	Cancel
}


enum EditingType{

	///Specifies editing type as string edit.
	String,

	///Specifies editing type as boolean edit.
	Boolean,

	///Specifies editing type as numeric edit.
	Numeric,

	///Specifies editing type as dropdown edit.
	Dropdown,

	///Specifies editing type as datepicker.
	DatePicker,

	///Specifies editing type as datetime picker.
	DateTimePicker
}


enum ClipMode{

	///Shows ellipsis for the overflown cell.
	Ellipsis,

	///Truncate the text in the cell
	Clip,

	///Shows ellipsis and tooltip for the overflown cell.
	EllipsisWithTooltip
}


enum EditMode{

	///Edit mode is normal.
	Normal,

	///Truncate the text in the cell
	Clip,

	///Edit mode is dialog.
	Dialog,

	///Edit mode is dialog template.
	DialogTemplate,

	///Edit mode is batch.
	Batch,

	///Edit mode is inline form.
	InlineForm,

	///Edit mode is inline template form.
	InlineTemplateForm,

	///Edit mode is external form.
	ExternalForm,

	///Edit mode is external form template.
	ExternalFormTemplate
}


enum FormPosition{

	///Form position is bottomleft.
	BottomLeft,

	///Form position is topright.
	TopRight
}


enum RowPosition{

	///Specifies position of add new row as top.
	Top,

	///Specifies position of add new row as bottom.
	Bottom
}


enum FilterBarMode{

	///Initiate filter operation on typing the filter query.
	Immediate,

	///Initiate filter operation after Enter key is pressed.
	OnEnter
}


enum FilterType{

	///Specifies the filter type as menu.
	Menu,

	///Specifies the filter type as excel.
	Excel,

	///Specifies the filter type as filterbar.
	FilterBar
}


enum WrapMode{

	///Auto wrap is applied for both content and header.
	Both,

	///Auto wrap is applied only for content.
	Content,

	///Auto wrap is applied only for header.
	Header
}


enum PrintMode{

	///Prints all pages.
	AllPages,

	///Prints curren tpage.
	CurrentPage
}


enum VirtualScrollMode{

	///virtual scroll mode is normal.
	Normal,

	///virtual scroll mode is continuous.
	Continuous
}


enum SelectionMode{

	///Selection is row basis.
	Row,

	///Selection is cell basis.
	Cell,

	///Selection is column basis.
	Column
}


enum SelectionType{

	///Specifies the selection type as single.
	Single,

	///Specifies the selection type as multiple.
	Multiple
}


enum SummaryType{

	///Summary type is average.
	Average,

	///Summary type is minimum.
	Minimum,

	///Summary type is maximum.
	Maximum,

	///Summary type is count.
	Count,

	///Summary type is sum.
	Sum,

	///Summary type is custom.
	Custom,

	///Summary type is true count.
	TrueCount,

	///Summary type is false count.
	FalseCount
}


enum ToolBarItems{

	///Toolbar item is add.
	Add,

	///Toolbar item is edit.
	Edit,

	///Toolbar item is delete.
	Delete,

	///Toolbar item is update.
	Update,

	///Toolbar item is cancel.
	Cancel,

	///Toolbar item is search.
	Search,

	///Toolbar item is pdfExport.
	PdfExport,

	///Toolbar item is printGrid.
	PrintGrid,

	///Toolbar item is wordExport.
	WordExport
}

}

class PivotGrid extends ej.Widget {
	static fn: PivotGrid;
	constructor(element: JQuery, options?: PivotGrid.Model);
	constructor(element: Element, options?: PivotGrid.Model);
	model:PivotGrid.Model;
	defaults:PivotGrid.Model;

	/** Perform an asynchronous HTTP (AJAX) request.
	* @returns {void}
	*/
	doAjaxPost(): void;

	/** Perform an asynchronous HTTP (FullPost) submit.
	* @returns {void}
	*/
	doPostBack(): void;

	/** Exports the PivotGrid to an appropriate format based on the parameter passed.
	* @returns {void}
	*/
	exportPivotGrid(): void;

	/** This function re-renders the PivotGrid on clicking the navigation buttons on PivotPager.
	* @returns {void}
	*/
	refreshPagedPivotGrid(): void;

	/** This function receives the JSON formatted datasource to render the PivotGrid control.
	* @returns {void}
	*/
	renderControlFromJSON(): void;
}
export module PivotGrid{

export interface Model {

	/**Sets the mode for the PivotGrid widget for binding either OLAP or relational data source.
	* @Default {ej.PivotGrid.AnalysisMode.Olap}
	*/
	analysisMode?: any;

	/**Specifies the CSS class to PivotGrid to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Contains the serialized OlapReport at that instant.
	* @Default {â€œâ€}
	*/
	currentReport?: string;

	/**Initializes the data source for the PivotGrid widget, when it functions completely on client-side.
	* @Default {{}}
	*/
	dataSource?: DataSource;

	/**Used to bind the drilled members by default through report.
	* @Default {[]}
	*/
	drilledItems?: Array<any>;

	/**Object utilized to pass additional information between client-end and service-end.
	* @Default {null}
	*/
	customObject?: any;

	/**Allows the user to access each cell on right-click.
	* @Default {false}
	*/
	enableCellContext?: boolean;

	/**Enables the cell selection for a specified range of value cells.
	* @Default {false}
	*/
	enableCellSelection?: boolean;

	/**Collapses the Pivot Items along rows and columns by default.  It works only for relational data source.
	* @Default {false}
	*/
	enableCollapseByDefault?: boolean;

	/**Enables the display of grand total for all the columns.
	* @Default {true}
	*/
	enableColumnGrandTotal?: boolean;

	/**Allows the user to format a specific set of cells based on the condition.
	* @Default {false}
	*/
	enableConditionalFormatting?: boolean;

	/**Allows the user to refresh the control on-demand and not during every UI operation.
	* @Default {false}
	*/
	enableDeferUpdate?: boolean;

	/**Enables the display of GroupingBar allowing you to filter, sort and remove fields obtained from relational datasource.
	* @Default {false}
	*/
	enableGroupingBar?: boolean;

	/**Enables the display of grand total for rows and columns.
	* @Default {true}
	*/
	enableGrandTotal?: boolean;

	/**Allows the user to load PivotGrid using JSON data.
	* @Default {false}
	*/
	enableJSONRendering?: boolean;

	/**Enables rendering of PivotGrid widget along with the PivotTable Field List, which allows UI operation.
	* @Default {true}
	*/
	enablePivotFieldList?: boolean;

	/**Enables the display of grand total for all the rows.
	* @Default {true}
	*/
	enableRowGrandTotal?: boolean;

	/**Allows the user to view PivotGrid from right to left.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Allows the user to enable ToolTip option.
	* @Default {false}
	*/
	enableToolTip?: boolean;

	/**Allows the user to view large amount of data through virtual scrolling.
	* @Default {false}
	*/
	enableVirtualScrolling?: boolean;

	/**Allows the user to configure hyperlink settings of PivotGrid control.
	* @Default {{}}
	*/
	hyperlinkSettings?: HyperlinkSettings;

	/**This is used for identifying whether the member is Named Set or not.
	* @Default {false}
	*/
	isNamedSets?: boolean;

	/**Allows the user to enable PivotGridâ€™s responsiveness in the browser layout.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Contains the serialized JSON string which renders PivotGrid.
	* @Default {â€œâ€}
	*/
	jsonRecords?: string;

	/**Sets the summary layout for PivotGrid. Following are the ways in which summary can be positioned: normal summary (bottom), top summary, no summary and excel-like summary.
	* @Default {ej.PivotGrid.Layout.Normal}
	*/
	layout?: ej.PivotGrid.Layout|string;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the mode for the PivotGrid widget for binding data source either in server-side or client-side.
	* @Default {ej.PivotGrid.OperationalMode.ClientMode}
	*/
	operationalMode?: any;

	/**Allows the user to set custom name for the methods at service-end, communicated during AJAX post.
	* @Default {{}}
	*/
	serviceMethodSettings?: ServiceMethodSettings;

	/**Connects the service using the specified URL for any server updates.
	* @Default {â€œâ€}
	*/
	url?: string;

	/**Triggers when it reaches client-side after any AJAX request.*/
	afterServiceInvoke? (e: AfterServiceInvokeEventArgs): void;

	/**Triggers before any AJAX request is passed from PivotGrid to service methods.*/
	beforeServiceInvoke? (e: BeforeServiceInvokeEventArgs): void;

	/**Triggers when right-click action is performed on a cell.*/
	cellContext? (e: CellContextEventArgs): void;

	/**Triggers when a specific range of value cells are selected.*/
	cellSelection? (e: CellSelectionEventArgs): void;

	/**Triggers when the hyperlink of column header is clicked.*/
	columnHeaderHyperlinkClick? (e: ColumnHeaderHyperlinkClickEventArgs): void;

	/**Triggers after performing drill operation in PivotGrid.*/
	drillSuccess? (e: DrillSuccessEventArgs): void;

	/**Triggers when PivotGrid loading is initiated.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when PivotGrid widget completes all operations at client-side after any AJAX request.*/
	renderComplete? (e: RenderCompleteEventArgs): void;

	/**Triggers when any error occurred during AJAX request.*/
	renderFailure? (e: RenderFailureEventArgs): void;

	/**Triggers when PivotGrid successfully reaches client-side after any AJAX request.*/
	renderSuccess? (e: RenderSuccessEventArgs): void;

	/**Triggers when the hyperlink of row header is clicked.*/
	rowHeaderHyperlinkClick? (e: RowHeaderHyperlinkClickEventArgs): void;

	/**Triggers when the hyperlink of summary cell is clicked.*/
	summaryCellHyperlinkClick? (e: SummaryCellHyperlinkClickEventArgs): void;

	/**Triggers when the hyperlink of value cell is clicked.*/
	valueCellHyperlinkClick? (e: ValueCellHyperlinkClickEventArgs): void;
}

export interface AfterServiceInvokeEventArgs {

	/**return the current action of PivotGrid control.
	*/
	action?: string;

	/**return the custom object bounds with PivotGrid control.
	*/
	customObject?: any;

	/**return the outer HTML of PivotGrid control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface BeforeServiceInvokeEventArgs {

	/**return the current action of PivotGrid control.
	*/
	action?: string;

	/**return the custom object bounds with PivotGrid control.
	*/
	customObject?: any;

	/**return the outer HTML of PivotGrid control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface CellContextEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the cell position (row index and column index) in table.
	*/
	cellPosition?: string;

	/**returns the type of the cell.
	*/
	cellType?: string;

	/**returns the serialized data of the header cells.
	*/
	rowData?: string;

	/**returns the unique name of levels/members.
	*/
	uniqueName?: string;
}

export interface CellSelectionEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**Returns the selected cell values.
	*/
	cellvalue?: any;

	/**Returns the selected value cells row headers.
	*/
	rowheaders?: any;

	/**Returns the selected value cells column headers.
	*/
	colheaders?: any;

	/**Returns the selected value cells measure.
	*/
	measure?: any;

	/**Return the row and column measure count.
	*/
	measureValue?: any;
}

export interface ColumnHeaderHyperlinkClickEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the cell position (row index and column index) in table.
	*/
	cellPosition?: string;

	/**returns the type of the cell.
	*/
	cellType?: string;

	/**returns the serialized data of the header cells.
	*/
	rowData?: string;

	/**returns the unique name of levels/members.
	*/
	uniqueName?: string;
}

export interface DrillSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the current action of PivotGrid control.
	*/
	action?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the HTML of PivotGrid control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model.
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderCompleteEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the current action of PivotGrid control.
	*/
	action?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the HTML of PivotGrid control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model.
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderFailureEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the current action of PivotGrid control.
	*/
	action?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the HTML of PivotGrid control.
	*/
	element?: string;

	/**returns the error message with error code.
	*/
	message?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model.
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderSuccessEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the current action of PivotGrid control.
	*/
	action?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the HTML of PivotGrid control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotGrid model.
	*/
	model?: ej.PivotGrid.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RowHeaderHyperlinkClickEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the cell position (row index and column index) in table.
	*/
	cellPosition?: string;

	/**returns the type of the cell.
	*/
	cellType?: string;

	/**returns the serialized data of the header cells.
	*/
	rowData?: string;

	/**returns the unique name of levels/members.
	*/
	uniqueName?: string;
}

export interface SummaryCellHyperlinkClickEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the cell position (row index and column index) in table.
	*/
	cellPosition?: string;

	/**returns the type of the cell.
	*/
	cellType?: string;

	/**returns the serialized data of the header cells.
	*/
	rowData?: string;

	/**returns the unique name of levels/members.
	*/
	uniqueName?: string;
}

export interface ValueCellHyperlinkClickEventArgs {

	/**returns the original event args.
	*/
	args?: any;

	/**returns the cell position (row index and column index) in table.
	*/
	cellPosition?: string;

	/**returns the type of the cell.
	*/
	cellType?: string;

	/**returns the serialized data of the header cells.
	*/
	rowData?: string;

	/**returns the unique name of levels/members.
	*/
	uniqueName?: string;
}

export interface DataSourceValues {

	/**This holds the measures unique names to bind the measures from Cube.
	* @Default {[]}
	*/
	measures?: Array<any>;

	/**To set the axis name in-order to place the measures.
	* @Default {â€œâ€}
	*/
	axis?: string;
}

export interface DataSource {

	/**Contains the database name as string type to fetch the data from the given connection string.
	* @Default {â€œâ€}
	*/
	catalog?: string;

	/**Lists out the items to be arranged in column section of PivotGrid.
	* @Default {[]}
	*/
	columns?: Array<any>;

	/**Contains the respective Cube name as string type.
	* @Default {â€œâ€}
	*/
	cube?: string;

	/**Provides the raw data source for the PivotGrid.
	* @Default {null}
	*/
	data?: any;

	/**Lists out the items to be arranged in row section of PivotGrid.
	* @Default {[]}
	*/
	rows?: Array<any>;

	/**Lists out the items which supports calculation in PivotGrid.
	* @Default {[]}
	*/
	values?: Array<DataSourceValues>;

	/**Lists out the items which supports filtering of values in PivotGrid.
	* @Default {[]}
	*/
	filters?: Array<any>;
}

export interface HyperlinkSettings {

	/**Allows the user to enable/disable hyperlink for column header.
	* @Default {false}
	*/
	enableColumnHeaderHyperlink?: boolean;

	/**Allows the user to enable/disable hyperlink for row header.
	* @Default {false}
	*/
	enableRowHeaderHyperlink?: boolean;

	/**Allows the user to enable/disable hyperlink for summary cells.
	* @Default {false}
	*/
	enableSummaryCellHyperlink?: boolean;

	/**Allows the user to enable/disable hyperlink for value cells.
	* @Default {false}
	*/
	enableValueCellHyperlink?: boolean;
}

export interface ServiceMethodSettings {

	/**Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
	* @Default {DrillGrid}
	*/
	drillDown?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
	* @Default {Export}
	*/
	exportPivotGrid?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
	* @Default {DeferUpdate}
	*/
	deferUpdate?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
	* @Default {FetchMembers}
	*/
	fetchMembers?: string;

	/**Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
	* @Default {Filtering}
	*/
	filtering?: string;

	/**Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
	* @Default {InitializeGrid}
	*/
	initialize?: string;

	/**Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
	* @Default {NodeDropped}
	*/
	nodeDropped?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
	* @Default {NodeStateModified}
	*/
	nodeStateModified?: string;

	/**Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
	* @Default {Paging}
	*/
	paging?: string;

	/**Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
	* @Default {Sorting}
	*/
	sorting?: string;
}

enum Layout{

	///To set normal summary layout in PivotGrid.
	Normal,

	///To set layout with summaries at the top in PivotGrid.
	NormalTopSummary,

	///To set layout without summaries in PivotGrid.
	NoSummaries,

	///To set excel-like layout in PivotGrid.
	ExcelLikeLayout
}

}

class PivotSchemaDesigner extends ej.Widget {
	static fn: PivotSchemaDesigner;
	constructor(element: JQuery, options?: PivotSchemaDesigner.Model);
	constructor(element: Element, options?: PivotSchemaDesigner.Model);
	model:PivotSchemaDesigner.Model;
	defaults:PivotSchemaDesigner.Model;

	/** Perform an asynchronous HTTP (AJAX) request.
	* @returns {void}
	*/
	doAjaxPost(): void;
}
export module PivotSchemaDesigner{

export interface Model {

	/**Specifies the CSS class to PivotSchemaDesigner to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Object utilized to pass additional information between client-end and service-end.
	* @Default {{}}
	*/
	customObject?: any;

	/**For ASP.NET and MVC Wrapper, Pivots Schema Designer will be initialized and rendered empty initially. Once PivotGrid widget is rendered completely, Pivots Schema Designer will just be populated with data source by setting this property to â€œtrueâ€.
	* @Default {false}
	*/
	enableWrapper?: boolean;

	/**Allows the user to set the list of filters in filter section.
	* @Default {newArray()}
	*/
	filters?: Array<any>;

	/**Sets the height for PivotSchemaDesigner.
	* @Default {â€œâ€}
	*/
	height?: string;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Allows the user to set list of PivotCalculations in values section.
	* @Default {newArray()}
	*/
	pivotCalculations?: Array<any>;

	/**Allows the user to set the list of PivotItems in column section.
	* @Default {newArray()}
	*/
	pivotColumns?: Array<any>;

	/**Sets the Pivot control bound with this PivotSchemaDesigner.
	* @Default {null}
	*/
	pivotControl?: any;

	/**Allows the user to set the list of PivotItems in row section.
	* @Default {newArray()}
	*/
	pivotRows?: Array<any>;

	/**Allows the user to arrange the fields inside Field List of PivotSchemaDesigner.
	* @Default {newArray()}
	*/
	pivotTableFields?: Array<any>;

	/**Allows the user to set custom name for the methods at service-end, communicated during AJAX post.
	* @Default {{}}
	*/
	serviceMethod?: ServiceMethod;

	/**Connects the service using the specified URL for any server updates.
	* @Default {â€œâ€}
	*/
	url?: string;

	/**Sets the width for PivotSchemaDesigner.
	* @Default {â€œâ€}
	*/
	width?: string;

	/**Triggers when it reaches client-side after any AJAX request.*/
	afterServiceInvoke? (e: AfterServiceInvokeEventArgs): void;

	/**Triggers before any AJAX request is passed from PivotSchemaDesigner to service methods.*/
	beforeServiceInvoke? (e: BeforeServiceInvokeEventArgs): void;
}

export interface AfterServiceInvokeEventArgs {

	/**return the current action of PivotSchemaDesigner control.
	*/
	action?: string;

	/**return the custom object bounds with PivotSchemaDesigner control.
	*/
	customObject?: any;

	/**return the outer HTML of PivotSchemaDesigner control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotSchemaDesigner model
	*/
	model?: ej.PivotSchemaDesigner.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface BeforeServiceInvokeEventArgs {

	/**return the current action of PivotSchemaDesigner control.
	*/
	action?: string;

	/**return the custom object bounds with PivotSchemaDesigner control.
	*/
	customObject?: any;

	/**return the outer HTML of PivotSchemaDesigner control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the PivotSchemaDesigner model
	*/
	model?: ej.PivotSchemaDesigner.Model;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ServiceMethod {

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for getting the values for the tree-view inside filter dialog.
	* @Default {FetchMembers}
	*/
	fetchMembers?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for filtering operation in Field List.
	* @Default {Filtering}
	*/
	filtering?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action, on expanding members in Field List.
	* @Default {MemberExpanded}
	*/
	memberExpand?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action, on dropping a node into Field List.
	* @Default {NodeDropped}
	*/
	nodeDropped?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
	* @Default {NodeStateModified}
	*/
	nodeStateModified?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for remove operation in Field List.
	* @Default {RemoveButton}
	*/
	removeButton?: string;
}
}

class PivotPager extends ej.Widget {
	static fn: PivotPager;
	constructor(element: JQuery, options?: PivotPager.Model);
	constructor(element: Element, options?: PivotPager.Model);
	model:PivotPager.Model;
	defaults:PivotPager.Model;

	/** This function initializes the page counts and page numbers for the PivotPager.
	* @returns {void}
	*/
	initPagerProperties(): void;
}
export module PivotPager{

export interface Model {

	/**Contains the current page number in categorical axis.
	* @Default {1}
	*/
	categoricalCurrentPage?: number;

	/**Contains the total page count in categorical axis.
	* @Default {1}
	*/
	categoricalPageCount?: number;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the pager mode (Only Categorical Pager/Only Series Pager/Both) for the PivotPager.
	* @Default {ej.PivotPager.Mode.Both}
	*/
	mode?: ej.PivotPager.Mode|string;

	/**Contains the current page number in series axis.
	* @Default {1}
	*/
	seriesCurrentPage?: number;

	/**Contains the total page count in series axis.
	* @Default {1}
	*/
	seriesPageCount?: number;

	/**Contains the ID of the target element for which paging needs to be done.
	* @Default {â€œâ€}
	*/
	targetControlID?: string;
}

enum Mode{

	///To set both categorical and series pager for paging.
	Both,

	///To set only categorical pager for paging.
	Categorical,

	///To set only series pager for paging.
	Series
}

}

class Schedule extends ej.Widget {
	static fn: Schedule;
	constructor(element: JQuery, options?: Schedule.Model);
	constructor(element: Element, options?: Schedule.Model);
	model:Schedule.Model;
	defaults:Schedule.Model;

	/** This method is used to delete the appointment based on the guid value or the appointment data passed to it.
	* @param {string|any} GUID value of an appointment element or an appointment object
	* @returns {void}
	*/
	deleteAppointment(data: string|any): void;

	/** Destroys the Schedule widget. All the events bound using this._on are unbound automatically and the control is moved to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** Exports the appointments from the Schedule control.
	* @param {string} It refers the controller action name to redirect. (For MVC)
	* @param {string} It refers the server event name.(For ASP)
	* @param {string|number} Pass the id of an appointment, in case if a single appointment needs to be exported. Otherwise, it takes the null value.
	* @returns {void}
	*/
	exportSchedule(action: string, serverEvent: string, id: string|number): void;

	/** Searches the appointments from appointment list of Schedule control.
	* @param {Array<any>} Holds array of one or more conditional objects for filtering the appointments based on it.
	* @returns {void}
	*/
	filterAppointments(filterConditions: Array<any>): void;

	/** Gets the appointment list of Schedule control.
	* @returns {void}
	*/
	getAppointments(): void;

	/** Prints the Scheduler.
	* @returns {void}
	*/
	print(): void;

	/** Refreshes the Scroller within Scheduler while using it with some other controls or application.
	* @returns {void}
	*/
	refreshScroller(): void;

	/** It is used to save the appointment. The appointment obj is based on the argument passed along with this method.
	* @param {any} appointment object which includes appointment details
	* @returns {void}
	*/
	saveAppointment(appointmentObject: any): void;

	/** Retrieves the time slot information (start/end time and resource details) of the given element. The parameter is optional - as when no element is passed to it, the currently selected cell information will be retrieved. When multiple cells are selected in the Scheduler, it is not necessary to provide the parameter.
	* @param {any} TD element object rendered as Scheduler work cell
	* @returns {void}
	*/
	getSlotByElement(element: any): void;

	/** Searches the appointments from the appointment list of Schedule control.
	* @param {any|string} Defines the search word or the filter condition, based on which the appointments are filtered from the list.
	* @param {string} Defines the field name on which the search is to be made.
	* @param {string|string} Defines the filterOperator value for the search operation.
	* @param {boolean} Defines the ignoreCase value for performing the search operation.
	* @returns {void}
	*/
	searchAppointments(searchString: any|string, field: string, operator: string|string, ignoreCase: boolean): void;

	/** To refresh the Schedule control.
	* @returns {void}
	*/
	refresh(): void;

	/** Refreshes only the appointments within the Schedule control.
	* @returns {void}
	*/
	refreshAppointment(): void;
}
export module Schedule{

export interface Model {

	/**When set to true, Schedule allows the appointments to be dragged and dropped at required time.
	* @Default {true}
	*/
	allowDragAndDrop?: boolean;

	/**When set to true, Scheduler allows interaction through keyboard shortcut keys.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**It includes the dataSource option and the fields related to Schedule appointments. The appointment fields within the appointmentSettings can accept both string and object type values. To apply validation rules on the appointment window fields, then the appointment fields needs to be defined with object type values.
	*/
	appointmentSettings?: AppointmentSettings;

	/**Default Value
	* @Default {null}
	*/
	appointmentTemplateId?: string;

	/**Default Value
	*/
	cssClass?: string;

	/**Sets various categorize colors to the Schedule appointments to differentiate it.
	*/
	categorizeSettings?: CategorizeSettings;

	/**Sets the height for Schedule cells.
	* @Default {20px}
	*/
	cellHeight?: string;

	/**Sets the width for Schedule cells.
	*/
	cellWidth?: string;

	/**Holds all options related to the context menu settings of the Schedule.
	*/
	contextMenuSettings?: ContextMenuSettings;

	/**Sets current date of the Schedule. The Schedule displays initially with the date that is provided here.
	* @Default {new Date()}
	*/
	currentDate?: any;

	/**Sets current view of the Schedule. Schedule renders initially with the view that is specified here. The available views are day, week, workweek, month, agenda and custom view - from which any one of the required view can be set to the Schedule. It accepts both string or enum values. The enum values that are accepted by currentView(ej.Schedule.CurrentView) are as follows,
	* @Default {ej.Schedule.CurrentView.Week}
	*/
	currentView?: string|ej.Schedule.CurrentView;

	/**Sets the date format for Schedule.
	*/
	dateFormat?: string;

	/**When set to true, shows the previous/next appointment navigator button on the Scheduler.
	* @Default {true}
	*/
	showAppointmentNavigator?: boolean;

	/**When set to true, enables the resize behavior of appointments within the Schedule.
	* @Default {true}
	*/
	enableAppointmentResize?: boolean;

	/**When set to true, enables the loading of Schedule appointments based on your demand. With this load on demand concept, the data consumption of the Schedule can be limited.
	* @Default {false}
	*/
	enableLoadOnDemand?: boolean;

	/**Saves the current model value to browser cookies for state maintenance. When the page gets refreshed, Schedule control values are retained.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**When set to true, the Schedule layout and behavior changes as per the common RTL conventions.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Sets the end hour time limit to be displayed on the Schedule.
	* @Default {24}
	*/
	endHour?: number;

	/**To configure resource grouping on the Schedule.
	*/
	group?: Group;

	/**Sets the height of the Schedule. Accepts both pixel and percentage values.
	* @Default {1120px}
	*/
	height?: string;

	/**To define the work hours within the Schedule control.
	*/
	workHours?: WorkHours;

	/**When set to true, enables the Schedule to observe Daylight Saving Time for supported timezones.
	* @Default {false}
	*/
	isDST?: boolean;

	/**When set to true, adapts the Schedule layout to fit the screen size of devices on which it renders.
	* @Default {true}
	*/
	isResponsive?: boolean;

	/**Sets the specific culture to the Schedule.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the maximum date limit to display on the Schedule. Setting maxDate with specific date value disallows the Schedule to navigate beyond that date.
	* @Default {new Date(2099, 12, 31)}
	*/
	maxDate?: any;

	/**Sets the minimum date limit to display on the Schedule. Setting minDate with specific date value disallows the Schedule to navigate beyond that date.
	* @Default {new Date(1900, 01, 01)}
	*/
	minDate?: any;

	/**Sets the mode of Schedule rendering either in a vertical or horizontal direction. It accepts either string(&quot;vertical&quot; or &quot;horizontal&quot;) or enum values. The enum values that are accepted by orientation(ej.Schedule.Orientation) are as follows,
	* @Default {ej.Schedule.Orientation.Vertical}
	*/
	orientation?: string|ej.Schedule.Orientation;

	/**Holds all the options related to priority settings of the Schedule.
	*/
	prioritySettings?: PrioritySettings;

	/**When set to true, disables the interaction with the Schedule appointments, simply allowing the date and view navigation to occur.
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Holds all the options related to reminder settings of the Schedule.
	*/
	reminderSettings?: ReminderSettings;

	/**Defines the specific start and end dates to be rendered in the Schedule control. To render such user-specified custom date ranges in the Schedule control, set the currentView property to customview.
	* @Default {null}
	*/
	renderDates?: RenderDates;

	/**Template design that applies on the Schedule resource header.
	* @Default {null}
	*/
	resourceHeaderTemplateId?: string;

	/**Holds all the options related to the resources settings of the Schedule. It is a collection of one or more resource objects, where the levels of resources are rendered on the Schedule based on the order of the resource data provided within this collection.
	* @Default {null}
	*/
	resources?: Array<Resources>;

	/**When set to true, displays the all-day row cells on the Schedule.
	* @Default {true}
	*/
	showAllDayRow?: boolean;

	/**When set to true, displays the current time indicator on the Schedule.
	* @Default {true}
	*/
	showCurrentTimeIndicator?: boolean;

	/**When set to true, displays the header bar on the Schedule.
	* @Default {true}
	*/
	showHeaderBar?: boolean;

	/**When set to true, displays the location field additionally on Schedule appointment window.
	* @Default {false}
	*/
	showLocationField?: boolean;

	/**When set to true, displays the quick window for every single click made on the Schedule cells or appointments.
	* @Default {true}
	*/
	showQuickWindow?: boolean;

	/**When set to true, displays the timescale on the left side of the Schedule.
	* @Default {true}
	*/
	showTimeScale?: boolean;

	/**Sets the start hour time range to be displayed on the Schedule.
	* @Default {0}
	*/
	startHour?: number;

	/**Sets either 12 or 24 hour time mode on the Schedule. It accepts either the string value(&quot;12&quot; or &quot;24&quot;) or the below mentioned enum values. The enum values that are accepted by timeMode(ej.Schedule.TimeMode) are as follows,
	* @Default {null}
	*/
	timeMode?: string|ej.Schedule.TimeMode;

	/**Sets the timezone for the Schedule.
	* @Default {null}
	*/
	timeZone?: string;

	/**Sets the collection of timezone items to be bound to the Schedule. Only the items bound to this property gets listed out in the timezone field of the appointment window.
	*/
	timeZoneCollection?: TimeZoneCollection;

	/**Defines the view collection to be displayed on the Schedule. By default, it displays all the views namely, Day, Week, WorkWeek and Month.
	* @Default {[Day, Week, WorkWeek, Month, Agenda]}
	*/
	views?: Array<any>;

	/**Sets the width of the Schedule. Accepts both pixel and percentage values.
	* @Default {100%}
	*/
	width?: string;

	/**When set to true, Schedule allows the validation of recurrence pattern to take place before it is being assigned to the appointments. For example, when one of the instance of recurrence appointment is dragged beyond the next or previous instance of the same recurrence appointment, a pop-up is displayed with the validation message disallowing the drag functionality.
	* @Default {true}
	*/
	enableRecurrenceValidation?: boolean;

	/**Sets the week to display more than one week appointment summary.
	*/
	agendaViewSettings?: AgendaViewSettings;

	/**You can change or set the starting day of the week.
	* @Default {null}
	*/
	firstDayOfWeek?: string;

	/**You can set the workWeek days of the workWeek.
	* @Default {[Monday, Tuesday, Wednesday, Thursday, Friday]}
	*/
	workWeek?: Array<any>;

	/**The tooltip allows to display appointment details in a tooltip while hovering on it.
	*/
	tooltipSettings?: TooltipSettings;

	/**Holds all the options related to the time scale of Scheduler. The timeslots either major or minor slots can be customized with this property.
	*/
	timeScale?: TimeScale;

	/**When set to true, shows the delete confirmation dialog before deleting an appointment.
	* @Default {true}
	*/
	showDeleteConfirmationDialog?: boolean;

	/**Accepts the id value of the template layout defined for the all-day cells.
	* @Default {null}
	*/
	allDayCellsTemplateId?: string;

	/**Accepts the id value of the template layout defined for the work cells and month cells.
	* @Default {null}
	*/
	workCellsTemplateId?: string;

	/**Accepts the id value of the template layout defined for the date header cells.
	* @Default {null}
	*/
	dateHeaderTemplateId?: string;

	/**when set to false, allows the height of the work-cells to adjust automatically based on the number of appointment count it has.
	* @Default {true}
	*/
	showOverflowButton?: boolean;

	/**Allows setting draggable area for the Scheduler appointments. Also, turns on the external drag and drop, when set with some specific external drag area name.
	*/
	appointmentDragArea?: string;

	/**When set to true, displays the other months days from the current month on the Schedule.
	* @Default {true}
	*/
	showNextPrevMonth?: boolean;

	/**Triggers before the action begin of the Schedule.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggers after the completion of action in the Schedule.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggers after the appointment is clicked.*/
	appointmentClick? (e: AppointmentClickEventArgs): void;

	/**Triggers before the appointment is being removed from the Scheduler.*/
	beforeAppointmentRemove? (e: BeforeAppointmentRemoveEventArgs): void;

	/**Triggers before the edited appointment is being saved.*/
	beforeAppointmentChange? (e: BeforeAppointmentChangeEventArgs): void;

	/**Triggers after the appointment is hovered.*/
	appointmentHover? (e: AppointmentHoverEventArgs): void;

	/**Triggers before the appointment gets saved.*/
	beforeAppointmentCreate? (e: BeforeAppointmentCreateEventArgs): void;

	/**Triggers before the appointment window opens.*/
	appointmentWindowOpen? (e: AppointmentWindowOpenEventArgs): void;

	/**Triggers before the context menu opens.*/
	beforeContextMenuOpen? (e: BeforeContextMenuOpenEventArgs): void;

	/**Triggers after the cell is clicked.*/
	cellClick? (e: CellClickEventArgs): void;

	/**Triggers after the cell is clicked twice.*/
	cellDoubleClick? (e: CellDoubleClickEventArgs): void;

	/**Triggers after the cell is hovered.*/
	cellHover? (e: CellHoverEventArgs): void;

	/**Triggers while the appointment is being dragged over the work cells.*/
	drag? (e: DragEventArgs): void;

	/**Triggers when the appointment dragging begins.*/
	dragStart? (e: DragStartEventArgs): void;

	/**Triggers when the appointment is dropped.*/
	dragStop? (e: DragStopEventArgs): void;

	/**Triggers after the context menu is clicked.*/
	menuItemClick? (e: MenuItemClickEventArgs): void;

	/**Triggers after the Schedule view or date is navigated.*/
	navigation? (e: NavigationEventArgs): void;

	/**Triggers every time before the elements of the scheduler such as work cells, time cells or header cells and so on renders or re-renders on a page.*/
	queryCellInfo? (e: QueryCellInfoEventArgs): void;

	/**Triggers when the reminder is raised for an appointment.*/
	reminder? (e: ReminderEventArgs): void;

	/**Triggers while resizing the appointment.*/
	resize? (e: ResizeEventArgs): void;

	/**Triggers when the appointment resizing begins.*/
	resizeStart? (e: ResizeStartEventArgs): void;

	/**Triggers when appointment resizing stops.*/
	resizeStop? (e: ResizeStopEventArgs): void;

	/**Triggers when the overflow button is clicked.*/
	overflowButtonClick? (e: OverflowButtonClickEventArgs): void;

	/**Triggers while mouse hovering on the overflow button.*/
	overflowButtonHover? (e: OverflowButtonHoverEventArgs): void;

	/**Triggers when any of the keyboard keys are pressed.*/
	keyDown? (e: KeyDownEventArgs): void;

	/**Triggers after the appointment is saved.*/
	appointmentCreated? (e: AppointmentCreatedEventArgs): void;

	/**Triggers after the appointment is edited.*/
	appointmentChanged? (e: AppointmentChangedEventArgs): void;

	/**Triggers after the appointment is deleted.*/
	appointmentRemoved? (e: AppointmentRemovedEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the current date value.
	*/
	currentDate?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current view value.
	*/
	currentView?: string;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the action begin request type.
	*/
	requestType?: string;

	/**Returns the target of the click.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the save appointment value.
	*/
	data?: any;

	/**Returns the id of delete appointment.
	*/
	id?: number;
}

export interface ActionCompleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the data about view change action.
	*/
	data?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the action complete request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the appointment data dropped.
	*/
	appointment?: any;
}

export interface AppointmentClickEventArgs {

	/**Returns the object of appointmentClick event.
	*/
	object?: any;

	/**Returns the clicked appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface BeforeAppointmentRemoveEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the deleted appointment object.
	*/
	appointment?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface BeforeAppointmentChangeEventArgs {

	/**Returns the edited appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface AppointmentHoverEventArgs {

	/**Returns the object of appointmentHover event.
	*/
	object?: any;

	/**Returns the hovered appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface BeforeAppointmentCreateEventArgs {

	/**Returns the appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface AppointmentWindowOpenEventArgs {

	/**returns the object of appointmentWindowOpen event while selecting the detail option from quick window or edit appointment or edit series option.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the end time of the double clicked cell.
	*/
	endTime?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the action name that triggers window open.
	*/
	originalEventType?: string;

	/**Returns the start time of the double clicked cell.
	*/
	startTime?: any;

	/**Returns the target of the double clicked cell.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the edit appointment object.
	*/
	appointment?: any;

	/**Returns the edit occurrence option value.
	*/
	edit?: boolean;
}

export interface BeforeContextMenuOpenEventArgs {

	/**Returns the object of beforeContextMenuOpen event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current cell index value.
	*/
	cellIndex?: number;

	/**Returns the current date value.
	*/
	currentDate?: any;

	/**Returns the current resource details, when multiple resources are present, otherwise returns null.
	*/
	resources?: any;

	/**Returns the current appointment details while opening the menu from appointment.
	*/
	appointment?: any;

	/**Returns the object of before opening menu target.
	*/
	events?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CellClickEventArgs {

	/**Returns the object of cellClick event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the end time of the clicked cell.
	*/
	endTime?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the start time of the clicked cell.
	*/
	startTime?: any;

	/**Returns the target of the clicked cell.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CellDoubleClickEventArgs {

	/**Returns the object of cellDoubleClick event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the end time of the double clicked cell.
	*/
	endTime?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the start time of the double clicked cell.
	*/
	startTime?: any;

	/**Returns the target of the double clicked cell.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface CellHoverEventArgs {

	/**Returns the object of cellHover event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the index of the hovered cell.
	*/
	cellIndex?: any;

	/**Returns the current date of the hovered cell.
	*/
	currentDate?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the target of the clicked cell.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DragEventArgs {

	/**Returns the object of dragOver event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the target of the drag over appointment.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DragStartEventArgs {

	/**Returns the object of dragStart event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the target of the dragging appointment.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface DragStopEventArgs {

	/**Returns the object of dragDrop event.
	*/
	object?: any;

	/**Returns the dropped appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface MenuItemClickEventArgs {

	/**Returns the object of menuItemClick event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the object of menu item event.
	*/
	events?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface NavigationEventArgs {

	/**Returns the current date object.
	*/
	currentDate?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the current view value.
	*/
	currentView?: string;

	/**Returns the previous view value.
	*/
	previousView?: string;

	/**Returns the target of the action.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the previous date of the Schedule.
	*/
	previousDate?: any;
}

export interface QueryCellInfoEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the current appontment data.
	*/
	appointment?: any;

	/**Returns the currently rendering DOM element.
	*/
	element?: any;

	/**Returns the name of the currently rendering element on the scheduler.
	*/
	requestType?: string;

	/**Returns the cell type which is currently rendering on the Scheduler.
	*/
	cellType?: string;

	/**Returns the start date of the currently rendering appointment.
	*/
	currentAppointmentDate?: any;

	/**Returns the currently rendering cell information.
	*/
	cell?: any;

	/**Returns the currently rendering resource details.
	*/
	resource?: any;

	/**Returns the currently rendering date information.
	*/
	currentDay?: any;
}

export interface ReminderEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the appointment object for which the reminder is raised.
	*/
	reminderAppointment?: any;
}

export interface ResizeEventArgs {

	/**Returns the object of resizing event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the resize element value.
	*/
	element?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ResizeStartEventArgs {

	/**Returns the object of resizeStart event.
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the resize element value.
	*/
	element?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ResizeStopEventArgs {

	/**Returns the object of resizeStop event.
	*/
	object?: any;

	/**Returns the resized appointment value.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the target of the resized appointment.
	*/
	target?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface OverflowButtonClickEventArgs {

	/**Returns the object consisting of starttime, endtime and resource value of the underlying cell on which the clicked overflow button is present.  
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the object of menu item event.
	*/
	events?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface OverflowButtonHoverEventArgs {

	/**Returns the object consisting of starttime, endtime and resource value of the underlying cell on which the overflow button is currently hovered.  
	*/
	object?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the object of menu item event.
	*/
	events?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface KeyDownEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the object of menu item event.
	*/
	events?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface AppointmentCreatedEventArgs {

	/**Returns the appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface AppointmentChangedEventArgs {

	/**Returns the edited appointment object.
	*/
	appointment?: any;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface AppointmentRemovedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the deleted appointment object.
	*/
	appointment?: any;

	/**Returns the Schedule model.
	*/
	model?: ej.Schedule.Model;

	/**Returns the name of the Scheduler event.
	*/
	type?: string;
}

export interface AppointmentSettings {

	/**Default Value
	* @Default {Array}
	*/
	dataSource?: any|Array<any>;

	/**Default Value
	* @Default {null}
	*/
	query?: string;

	/**Default Value
	* @Default {null}
	*/
	tableName?: string;

	/**Binds the id field name in dataSource to the id of Schedule appointments. It denotes the unique id assigned to appointments.
	*/
	id?: string;

	/**Binds the name of startTime field in the dataSource with start time of the Schedule appointments. It indicates the date and Time when Schedule appointment actually starts.
	*/
	startTime?: string;

	/**Binds the name of endTime field in dataSource with the end time of Schedule appointments. It indicates the date and time when Schedule appointment actually ends.
	*/
	endTime?: string;

	/**Binds the name of subject field in the dataSource to appointment Subject. Indicates the Subject or title that gets displayed on Schedule appointments.
	*/
	subject?: string;

	/**Binds the description field name in dataSource. It indicates the appointment description.
	*/
	description?: string;

	/**Binds the name of recurrence field in dataSource. It indicates whether the appointment is a recurrence appointment or not.
	*/
	recurrence?: string;

	/**Binds the name of recurrenceRule field in dataSource. It indicates the recurrence pattern associated with appointments.
	*/
	recurrenceRule?: string;

	/**Binds the name of allDay field in dataSource. It indicates whether the appointment is an allday appointment or not.
	* @Default {AllDay}
	*/
	allDay?: string;

	/**Default Value
	* @Default {null}
	*/
	resourceFields?: string;

	/**Default Value
	* @Default {null}
	*/
	categorize?: string;

	/**Default Value
	* @Default {null}
	*/
	location?: string;

	/**Default Value
	* @Default {null}
	*/
	priority?: string;

	/**Default Value
	* @Default {StartTimeZone}
	*/
	startTimeZone?: string;

	/**Default Value
	* @Default {EndTimeZone}
	*/
	endTimeZone?: string;
}

export interface CategorizeSettings {

	/**Default Value
	* @Default {false}
	*/
	allowMultiple?: boolean;

	/**Default Value
	* @Default {false}
	*/
	enable?: boolean;

	/**Default Value
	* @Default {Array}
	*/
	dataSource?: Array<any>|any;

	/**Binds id field name in the dataSource to id of category data.
	* @Default {id}
	*/
	id?: string;

	/**Binds text field name in the dataSource to category text.
	* @Default {text}
	*/
	text?: string;

	/**Binds color field name in the dataSource to category color.
	* @Default {color}
	*/
	color?: string;

	/**Binds fontColor field name in the dataSource to category font.
	* @Default {fontColor}
	*/
	fontColor?: string;
}

export interface ContextMenuSettings {

	/**When set to true, enables the context menu options available for the Schedule cells and appointments.
	* @Default {false}
	*/
	enable?: boolean;

	/**Contains all the default context menu options that are applicable for both Schedule cells and appointments. It also supports adding custom menu items to cells or appointment collection.
	* @Default {[]}
	*/
	menuItems?: any;
}

export interface Group {

	/**Holds the array of resource names to be grouped on the Schedule.
	*/
	resources?: any;
}

export interface WorkHours {

	/**When set to true, highlights the work hours of the Schedule.
	* @Default {true}
	*/
	highlight?: boolean;

	/**Sets the start time to depict the start of working or business hour in a day.
	* @Default {null}
	*/
	start?: number;

	/**Sets the end time to depict the end of working or business hour in a day.
	* @Default {null}
	*/
	end?: number;
}

export interface PrioritySettings {

	/**When set to true, enables the priority options available for the Schedule appointments.
	* @Default {false}
	*/
	enable?: boolean;

	/**The dataSource option can accept the JSON object collection that contains the priority related data.
	* @Default {Array}
	*/
	dataSource?: any|Array<any>;

	/**Binds text field name in the dataSource to prioritySettings text. These text gets listed out in priority field of the appointment window.
	* @Default {text}
	*/
	text?: string;

	/**Binds value field name in the dataSource to prioritySettings value. These field names usually accepts four priority values by default, high, low, medium and none.
	* @Default {value}
	*/
	value?: string;

	/**Allows priority field customization in the appointment window to add custom icons denoting the priority level for the appointments.
	* @Default {null}
	*/
	template?: string;
}

export interface ReminderSettings {

	/**When set to true, enables the reminder option available for the Schedule appointments.
	* @Default {false}
	*/
	enable?: boolean;

	/**Sets the timing, when the reminders are to be alerted for the Schedule appointments.
	* @Default {5}
	*/
	alertBefore?: number;
}

export interface RenderDates {

	/**Sets the start of custom date range to be rendered in the Schedule.
	* @Default {null}
	*/
	start?: any;

	/**Sets the end limit of the custom date range.
	* @Default {null}
	*/
	end?: any;
}

export interface ResourcesResourceSettings {

	/**The dataSource option accepts either JSON object collection or DataManager (ej.DataManager) instance that contains the resources related data.
	*/
	dataSource?: any|Array<any>;

	/**Binds text field name in the dataSource to resourceSettings text. These text gets listed out in resources field of the appointment window.
	*/
	text?: string;

	/**Binds id field name in the dataSource to resourceSettings id.
	*/
	id?: string;

	/**Binds groupId field name in the dataSource to resourceSettings groupId.
	*/
	groupId?: string;

	/**Binds color field name in the dataSource to resourceSettings color. The color specified here gets applied to the Schedule appointments denoting to the resource it belongs.
	*/
	color?: string;

	/**Binds the starting work hour field name in the dataSource. It's optional, but when provided with some numeric value will set the starting work hour for specific resources.
	*/
	start?: string;

	/**Binds the end work hour field name in the dataSource. It's optional, but when provided with some numeric value will set the end work hour for specific resources.
	*/
	end?: string;

	/**Binds the resources working days field name in the dataSource. It's optional, and accepts the array of strings (week day names). When provided with some values (array of day names), only those days will render for the specific resources.
	*/
	workWeek?: string;

	/**Binds appointmentClass field name in the dataSource. It applies custom CSS class name to appointments depicting to the resource it belongs.
	*/
	appointmentClass?: string;
}

export interface Resources {

	/**It holds the name of the resource field to be bound to the Schedule appointments that contains the resource Id.
	* @Default {[]}
	*/
	field?: string;

	/**It holds the title name of the resource field to be displayed on the Schedule appointment window.
	* @Default {[]}
	*/
	title?: string;

	/**A unique resource name that is used for differentiating various resource objects while grouping it in various levels.
	* @Default {[]}
	*/
	name?: string;

	/**When set to true, allows multiple selection of resource names, thus creating multiple instances of same appointment for the selected resources.
	* @Default {[]}
	*/
	allowMultiple?: string;

	/**It holds the field names of the resources to be bound to the Schedule and also the dataSource.
	*/
	resourceSettings?: ResourcesResourceSettings;
}

export interface TimeZoneCollection {

	/**Sets the collection of timezone items to the dataSource that accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule timezones.
	*/
	dataSource?: any;

	/**Binds text field name in the dataSource to timeZoneCollection text. These text gets listed out in the timezone fields of the appointment window.
	*/
	text?: string;

	/**Binds id field name in the dataSource to timeZoneCollection id.
	*/
	id?: string;

	/**Binds value field name in the dataSource to timeZoneCollection value.
	*/
	value?: string;
}

export interface AgendaViewSettings {

	/**You can display the summary of multiple week's appointment by setting this value.
	* @Default {7}
	*/
	daysInAgenda?: number;

	/**You can customize the Date column display based on the requirement.
	* @Default {null}
	*/
	dateColumnTemplateId?: string;

	/**You can customize the time column display based on the requirement.
	* @Default {null}
	*/
	timeColumnTemplateId?: string;
}

export interface TooltipSettings {

	/**To enable or disable the tooltip display.
	* @Default {false}
	*/
	enable?: boolean;

	/**To customize the tooltip display based on your requirements.
	* @Default {null}
	*/
	templateId?: string;
}

export interface TimeScale {

	/**When set to true, displays the timescale on the Scheduler.
	* @Default {null}
	*/
	enable?: boolean;

	/**When set with some specific value, defines the number of time divisions split per hour(as per value given for the majorTimeSlot). Those time divisions are meant to be the minor slots.
	* @Default {2}
	*/
	minorSlotCount?: number;

	/**Accepts the value in minutes. When provided with specific value, displays the appropriate time interval on the Scheduler
	* @Default {60}
	*/
	majorSlot?: number;

	/**Accepts id value of the template defined for minor time slots
	* @Default {null}
	*/
	minorSlotTemplateId?: string;

	/**Accepts id value of the template defined for major time slots.
	* @Default {null}
	*/
	majorSlotTemplateId?: string;
}

enum CurrentView{

	///Set currentView as Day to Scheduler
	Day,

	///Set currentView as Week to Scheduler
	Week,

	///Set currentView as Workweek to Scheduler
	Workweek,

	///Set currentView as Month to Scheduler
	Month,

	///Set currentView as Agenda to Scheduler
	Agenda,

	///Set currentView as CustomView to Scheduler
	CustomView
}


enum Orientation{

	///Set orientation as vertical to Scheduler
	Vertical,

	///Set orientation as horizontal to Scheduler
	Horizontal
}


enum TimeMode{

	///Set timeMode as 12 hours to Scheduler
	Hour12,

	///Set timeMode as 24 hours to Scheduler
	Hour24
}

}

class RecurrenceEditor extends ej.Widget {
    static fn: RecurrenceEditor;
	static Locale:any;
    constructor(element: JQuery, options?: RecurrenceEditorOptions);
    constructor(element: Element, options?: RecurrenceEditorOptions);
	model:RecurrenceEditorOptions;
	defaults:RecurrenceEditorOptions;
    recurrenceDateGenerator(recurrenceString: string,strDate:Object): string;
    closeRecurPublic(): string;
    getRecurrenceRule(): void;
    recurrenceRuleSplit(recurrenceRule: string, recurrenceExDate?: string): Object;
    
}
interface RecurrenceEditorOptions {
    frequencies?: Array<string>;
    firstDayOfWeek?: string;
    name?: string;
    enableSpinners?: boolean;
    startDate?: Date;
    locale?: string;
    enableRTL?: boolean;
    value?: string;
    dateFormat?: string;
    selectedRecurrenceType?: number;
    enableRecurrenceValidation?: boolean;
    minDate?: Date;
    maxDate?: Date;
    cssClass?: string;
    change?(e: RecurrenceEditorChangeEvent): void;
    create?(e: RecurrenceEditorBaseEvent): void;
}
interface RecurrenceEditorBaseEvent extends ej.BaseEvent {
    model: RecurrenceEditorOptions;
}
interface RecurrenceEditorChangeEvent extends RecurrenceEditorBaseEvent {
    requestType?: string;
}
class Gantt extends ej.Widget {
	static fn: Gantt;
	constructor(element: JQuery, options?: Gantt.Model);
	constructor(element: Element, options?: Gantt.Model);
	model:Gantt.Model;
	defaults:Gantt.Model;

	/** To add item in gantt
	* @param {any} Item to add in Gantt row.
	* @param {string} Defines in which position the row wants to add
	* @returns {void}
	*/
	addRecord(data: any, rowPosition: string): void;

	/** Positions the splitter by the specified column index.
	* @param {number} Set the splitter position based on column index.
	* @returns {void}
	*/
	setSplitterIndex(index: number): void;

	/** To cancel the edited state of an item in gantt
	* @returns {void}
	*/
	cancelEdit(): void;

	/** To collapse all the parent items in gantt
	* @returns {void}
	*/
	collapseAllItems(): void;

	/** To delete a selected item in gantt
	* @returns {void}
	*/
	deleteItem(): void;

	/** destroy the gantt widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To Expand all the parent items in gantt
	* @returns {void}
	*/
	expandAllItems(): void;

	/** To expand and collapse an item in gantt using item's ID
	* @param {number} Exapnd or Collapse a record based on task id.
	* @returns {void}
	*/
	expandCollapseRecord(taskId: number): void;

	/** To hide the column by using header text
	* @param {string} you can pass a header text of a column to hide
	* @returns {void}
	*/
	hideColumn(headerText: string): void;

	/** To indent a selected item in gantt
	* @returns {void}
	*/
	indentItem(): void;

	/** To Open the dialog to add new task to the gantt
	* @returns {void}
	*/
	openAddDialog(): void;

	/** To Open the dialog to edit existing task to the gantt
	* @returns {void}
	*/
	openEditDialog(): void;

	/** To outdent a selected item in gantt
	* @returns {void}
	*/
	outdentItem(): void;

	/** To save the edited state of an item in gantt
	* @returns {void}
	*/
	saveEdit(): void;

	/** To search an item with search string provided at the run time
	* @param {string} you can pass a text to search in Gantt Control.
	* @returns {void}
	*/
	searchItem(searchString: string): void;

	/** To set the grid width in gantt
	* @param {string} you can give either percentage or pixels value
	* @returns {void}
	*/
	setSplitterPosition(width: string): void;

	/** To show the column by using header text
	* @param {string} you can pass a header text of a column to show
	* @returns {void}
	*/
	showColumn(headerText: string): void;
}
export module Gantt{

export interface Model {

	/**Specifies the fields to be included in the add dialog in gantt
	* @Default {[]}
	*/
	addDialogFields?: Array<any>;

	/**Enables or disables the ability to resize column.
	* @Default {false}
	*/
	allowColumnResize?: boolean;

	/**Enables or Disables gantt chart editing in gantt
	* @Default {true}
	*/
	allowGanttChartEditing?: boolean;

	/**Enables or Disables Keyboard navigation in gantt
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Specifies enabling or disabling multiple sorting for Gantt columns
	* @Default {false}
	*/
	allowMultiSorting?: boolean;

	/**Enables or disables the interactive selection of a row.
	* @Default {true}
	*/
	allowSelection?: boolean;

	/**Enables or disables sorting. When enabled, we can sort the column by clicking on the column.
	* @Default {false}
	*/
	allowSorting?: boolean;

	/**Enable or disable predecessor validation. When it is true, all the task's start and end dates are aligned based on its predecessors start and end dates.
	* @Default {true}
	*/
	enablePredecessorValidation?: boolean;

	/**Specifies the baseline background color in gantt
	* @Default {#fba41c}
	*/
	baselineColor?: string;

	/**Specifies the mapping property path for baseline end date in datasource
	*/
	baselineEndDateMapping?: string;

	/**Specifies the mapping property path for baseline start date of a task in datasource
	*/
	baselineStartDateMapping?: string;

	/**Specifies the mapping property path for sub tasks in datasource
	*/
	childMapping?: string;

	/**Specifies the background of connector lines in Gantt
	*/
	connectorLineBackground?: string;

	/**Specifies the width of the connector lines in gantt
	* @Default {1}
	*/
	connectorlineWidth?: number;

	/**Specify the CSS class for gantt to achieve custom theme.
	*/
	cssClass?: string;

	/**Collection of data or hierarchical data to represent in gantt
	* @Default {null}
	*/
	dataSource?: Array<any>;

	/**Specifies the dateFormat for gantt , given format is displayed in tooltip , grid .
	* @Default {MM/dd/yyyy}
	*/
	dateFormat?: string;

	/**Specifies the mapping property path for duration of a task in datasource
	*/
	durationMapping?: string;

	/**Specifies the duration unit for each tasks whether days or hours or minutes
	* @Default {ej.Gantt.DurationUnit.Day}
	*/
	durationUnit?: ej.Gantt.DurationUnit|string;

	/**Specifies the fields to be included in the edit dialog in gantt
	* @Default {[]}
	*/
	editDialogFields?: Array<any>;

	/**Option to configure the splitter position.
	*/
	splitterSettings?: SplitterSettings;

	/**Specifies the editSettings options in gantt.
	*/
	editSettings?: EditSettings;

	/**Enables or Disables enableAltRow row effect in gantt
	* @Default {true}
	*/
	enableAltRow?: boolean;

	/**Enables or disables the collapse all records when loading the gantt.
	* @Default {false}
	*/
	enableCollapseAll?: boolean;

	/**Enables or disables the contextmenu for gantt , when enabled contextmenu appears on right clicking gantt
	* @Default {false}
	*/
	enableContextMenu?: boolean;

	/**Indicates whether we can edit the progress of a task interactively in gantt chart.
	* @Default {true}
	*/
	enableProgressBarResizing?: boolean;

	/**Enables or disables the option for dynamically updating the Gantt size on window resizing
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Enables or disables tooltip while editing (dragging/resizing) the taskbar.
	* @Default {true}
	*/
	enableTaskbarDragTooltip?: boolean;

	/**Enables or disables tooltip for taskbar.
	* @Default {true}
	*/
	enableTaskbarTooltip?: boolean;

	/**Enables/Disables virtualization for rendering gantt items.
	* @Default {false}
	*/
	enableVirtualization?: boolean;

	/**Specifies the mapping property path for end Date of a task in datasource
	*/
	endDateMapping?: string;

	/**Specifies whether to highlight the weekends in gantt .
	* @Default {true}
	*/
	highlightWeekends?: boolean;

	/**Collection of holidays with date, background and label information to be displayed in gantt.
	* @Default {[]}
	*/
	holidays?: Array<any>;

	/**Specifies whether to include weekends while calculating the duration of a task.
	* @Default {true}
	*/
	includeWeekend?: boolean;

	/**Specify the locale for gantt
	* @Default {en-US}
	*/
	locale?: string;

	/**Specifies the mapping property path for milestone in datasource
	*/
	milestoneMapping?: string;

	/**Specifies the background of parent progressbar in gantt
	*/
	parentProgressbarBackground?: string;

	/**Specifies the background of parent taskbar in gantt
	*/
	parentTaskbarBackground?: string;

	/**Specifies the mapping property path for parent task Id in self reference datasource
	*/
	parentTaskIdMapping?: string;

	/**Specifies the mapping property path for predecessors of a task in datasource
	*/
	predecessorMapping?: string;

	/**Specifies the background of progressbar in gantt
	*/
	progressbarBackground?: string;

	/**Specified the height of the progressbar in taskbar
	* @Default {100}
	*/
	progressbarHeight?: number;

	/**Specifies the template for tooltip on resizing progressbar
	* @Default {null}
	*/
	progressbarTooltipTemplate?: string;

	/**Specifies the template ID for customized tooltip for progressbar editing in gantt
	* @Default {null}
	*/
	progressbarTooltipTemplateId?: string;

	/**Specifies the mapping property path for progress percentage of a task in datasource
	*/
	progressMapping?: string;

	/**It receives query to retrieve data from the table (query is same as SQL).
	* @Default {null}
	*/
	query?: any;

	/**Enables or Disables rendering baselines in Gantt , when enabled baseline is rendered in gantt
	* @Default {false}
	*/
	renderBaseline?: boolean;

	/**Specifies the mapping property name for resource ID in resource Collection in gantt
	*/
	resourceIdMapping?: string;

	/**Specifies the mapping property path for resources of a task in datasource
	*/
	resourceInfoMapping?: string;

	/**Specifies the mapping property path for resource name of a task in gantt
	*/
	resourceNameMapping?: string;

	/**Collection of data regarding resources involved in entire project
	* @Default {[]}
	*/
	resources?: Array<any>;

	/**Specifies whether rounding off the day working time edits
	* @Default {true}
	*/
	roundOffDayworkingTime?: boolean;

	/**Specifies the height of a single row in gantt. Also, we need to set same height in the CSS style with class name e-rowcell.
	* @Default {30}
	*/
	rowHeight?: number;

	/**Specifies end date of the gantt schedule. By default, end date will be rounded to its next Saturday.
	* @Default {null}
	*/
	scheduleEndDate?: string;

	/**Specifies the options for customizing schedule header.
	*/
	scheduleHeaderSettings?: ScheduleHeaderSettings;

	/**Specifies start date of the gantt schedule. By default, start date will be rounded to its previous Sunday.
	* @Default {null}
	*/
	scheduleStartDate?: string;

	/**Specifies the selected row index in gantt
	* @Default {null}
	*/
	selectedItem?: number;

	/**Specifies the selected row Index in gantt , the row with given index will highlighted
	* @Default {-1}
	*/
	selectedRowIndex?: number;

	/**Enables or disables the column chooser.
	* @Default {false}
	*/
	showColumnChooser?: boolean;

	/**Specifies whether to show grid cell tooltip.
	* @Default {true}
	*/
	showGridCellTooltip?: boolean;

	/**Specifies whether to show grid cell tooltip over expander cell alone.
	* @Default {true}
	*/
	showGridExpandCellTooltip?: boolean;

	/**Specifies whether display task progress inside taskbar.
	* @Default {true}
	*/
	showProgressStatus?: boolean;

	/**Specifies whether to display resource names for a task beside taskbar.
	* @Default {true}
	*/
	showResourceNames?: boolean;

	/**Specifies whether to display task name beside task bar.
	* @Default {true}
	*/
	showTaskNames?: boolean;

	/**Specifies the size option of gantt control.
	*/
	sizeSettings?: SizeSettings;

	/**Specifies the sorting options for gantt.
	*/
	sortSettings?: SortSettings;

	/**Specifies splitter position in gantt.
	* @Default {null}
	*/
	splitterPosition?: string;

	/**Specifies the mapping property path for start date of a task in datasource
	*/
	startDateMapping?: string;

	/**Specifies the options for striplines
	* @Default {[]}
	*/
	stripLines?: Array<any>;

	/**Specifies the background of the taskbar in gantt
	*/
	taskbarBackground?: string;

	/**Specifies the template script for customized tooltip for taskbar editing in gantt
	*/
	taskbarEditingTooltipTemplate?: string;

	/**Specifies the template Id for customized tooltip for taskbar editing in gantt
	*/
	taskbarEditingTooltipTemplateId?: string;

	/**Specifies the template for tooltip on mouse action on taskbars
	*/
	taskbarTooltipTemplate?: string;

	/**Specifies the template id for tooltip on mouse action on taskbars
	*/
	taskbarTooltipTemplateId?: string;

	/**Specifies the mapping property path for task Id in datasource
	*/
	taskIdMapping?: string;

	/**Specifies the mapping property path for task name in datasource
	*/
	taskNameMapping?: string;

	/**Specifies the toolbarSettings options.
	*/
	toolbarSettings?: ToolbarSettings;

	/**Specifies the tree expander column in gantt
	* @Default {0}
	*/
	treeColumnIndex?: number;

	/**Specifies the weekendBackground color in gantt
	* @Default {#F2F2F2}
	*/
	weekendBackground?: string;

	/**Specifies the working time schedule of day
	* @Default {ej.Gantt.workingTimeScale.TimeScale8Hours}
	*/
	workingTimeScale?: ej.Gantt.workingTimeScale|string;

	/**Triggered for every gantt action before its starts.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggered for every gantt action success event.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggered while enter the edit mode in the tree grid cell*/
	beginEdit? (e: BeginEditEventArgs): void;

	/**Triggered after collapsed the gantt record*/
	collapsed? (e: CollapsedEventArgs): void;

	/**Triggered while collapsing the gantt record*/
	collapsing? (e: CollapsingEventArgs): void;

	/**Triggered while Context Menu is rendered in Gantt control*/
	contextMenuOpen? (e: ContextMenuOpenEventArgs): void;

	/**Triggered after save the modified cellValue in gantt.*/
	endEdit? (e: EndEditEventArgs): void;

	/**Triggered after expand the record*/
	expanded? (e: ExpandedEventArgs): void;

	/**Triggered while expanding the gantt record*/
	expanding? (e: ExpandingEventArgs): void;

	/**Triggered while gantt is loaded*/
	load? (e: LoadEventArgs): void;

	/**Triggered while rendering each cell in the tree grid*/
	queryCellInfo? (e: QueryCellInfoEventArgs): void;

	/**Triggered while rendering each taskbar in the gantt chart*/
	queryTaskbarInfo? (e: QueryTaskbarInfoEventArgs): void;

	/**Triggered while rendering each row*/
	rowDataBound? (e: RowDataBoundEventArgs): void;

	/**Triggered after the row is selected.*/
	rowSelected? (e: RowSelectedEventArgs): void;

	/**Triggered before the row is going to be selected.*/
	rowSelecting? (e: RowSelectingEventArgs): void;

	/**Triggered after completing the editing operation in taskbar*/
	taskbarEdited? (e: TaskbarEditedEventArgs): void;

	/**Triggered while editing the gantt chart (dragging, resizing the taskbar )*/
	taskbarEditing? (e: TaskbarEditingEventArgs): void;

	/**Triggered when toolbar item is clicked in Gantt.*/
	toolbarClick? (e: ToolbarClickEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the current grouped column field name.
	*/
	columnName?: string;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the direction of sorting ascending or descending
	*/
	columnSortDirection?: string;

	/**Returns the value of searching element.
	*/
	keyValue?: string;

	/**Returns the data of deleting element.
	*/
	data?: string;

	/**Returns selected record index
	*/
	recordIndex?: number;
}

export interface ActionCompleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the current grouped column field name.
	*/
	columnName?: string;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the direction of sorting ascending or descending
	*/
	columnSortDirection?: string;

	/**Returns the value of searched element.
	*/
	keyValue?: string;

	/**Returns the data of deleted element.
	*/
	data?: string;

	/**Returns selected record index
	*/
	recordIndex?: number;
}

export interface BeginEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of editing cell.
	*/
	rowElement?: any;

	/**Returns the Element of editing cell.
	*/
	cellElement?: any;

	/**Returns the data of current cell record.
	*/
	data?: any;

	/**Returns the column Index of cell belongs.
	*/
	columnIndex?: number;
}

export interface CollapsedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of collapsed record.
	*/
	recordIndex?: number;

	/**Returns the data of collapsed record.
	*/
	data?: any;

	/**Returns Request Type.
	*/
	requestType?: string;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;
}

export interface CollapsingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of collapsing record.
	*/
	recordIndex?: number;

	/**Returns the data of edited cell record..
	*/
	data?: any;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;
}

export interface ContextMenuOpenEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the default context menu items to which we add custom items.
	*/
	contextMenuItems?: Array<any>;

	/**Returns the gantt model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface EndEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of editing cell.
	*/
	rowElement?: any;

	/**Returns the Element of editing cell.
	*/
	cellElement?: any;

	/**Returns the data of edited cell record.
	*/
	data?: any;

	/**Returns the column name of edited cell belongs.
	*/
	columnName?: string;

	/**Returns the column object of edited cell belongs.
	*/
	columnObject?: any;
}

export interface ExpandedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of record.
	*/
	recordIndex?: number;

	/**Returns the data of expanded record.
	*/
	data?: any;

	/**Returns Request Type.
	*/
	requestType?: string;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;
}

export interface ExpandingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of record.
	*/
	recordIndex?: any;

	/**Returns the data of edited cell record..
	*/
	data?: any;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;
}

export interface LoadEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the gantt model
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface QueryCellInfoEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the selecting cell element.
	*/
	cellElement?: any;

	/**Returns the value of cell.
	*/
	cellValue?: string;

	/**Returns the data of current cell record.
	*/
	data?: any;

	/**Returns the column of cell belongs.
	*/
	column?: any;
}

export interface QueryTaskbarInfoEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the taskbar background of current item.
	*/
	TaskbarBackground?: string;

	/**Returns the progressbar background of current item.
	*/
	ProgressbarBackground?: string;

	/**Returns the parent taskbar background of current item.
	*/
	parentTaskbarBackground?: string;

	/**Returns the parent progressbar background of current item.
	*/
	parentProgressbarBackground?: string;

	/**Returns the data of the record.
	*/
	data?: any;
}

export interface RowDataBoundEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of rendering row.
	*/
	rowElement?: any;

	/**Returns the data of rendering row record..
	*/
	data?: any;
}

export interface RowSelectedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the selecting row element.
	*/
	targetRow?: any;

	/**Returns the index of selecting row record.
	*/
	recordIndex?: number;

	/**Returns the data of selected record.
	*/
	data?: any;
}

export interface RowSelectingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the data selecting record.
	*/
	data?: any;

	/**Returns the index of selecting row record.
	*/
	recordIndex?: string;

	/**Returns the selecting row chart element.
	*/
	targetChartRow?: any;

	/**Returns the selecting row grid element.
	*/
	targetGridRow?: any;

	/**Returns the previous selected data.
	*/
	previousData?: any;

	/**Returns the previous selected row index.
	*/
	previousIndex?: string;

	/**Returns the previous selected row chart element.
	*/
	previousChartRow?: any;

	/**Returns the previous selected row grid element.
	*/
	previousGridRow?: any;
}

export interface TaskbarEditedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the data of edited record.
	*/
	data?: any;

	/**Returns the previous data value of edited record.
	*/
	previousData?: any;

	/**Returns 'true' if taskbar is dragged.
	*/
	dragging?: boolean;

	/**Returns 'true' if taskbar is left resized.
	*/
	leftResizing?: boolean;

	/**Returns 'true' if taskbar is right resized.
	*/
	rightResizing?: boolean;

	/**Returns 'true' if taskbar is progress resized.
	*/
	progressResizing?: boolean;

	/**Returns the field values of record being edited.
	*/
	editingFields?: any;

	/**Returns the gantt model.
	*/
	model?: any;
}

export interface TaskbarEditingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the gantt model.
	*/
	model?: any;

	/**Returns the row object being edited.
	*/
	rowData?: any;

	/**Returns the field values of record being edited.
	*/
	editingFields?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface ToolbarClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the Gantt model.
	*/
	model?: any;

	/**Returns the name of the toolbar item on which mouse click has been performed
	*/
	itemName?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface SplitterSettings {

	/**Specifies position of the splitter in Gantt , splitter can be placed either based on percentage values or pixel values.
	*/
	position?: string;

	/**Specifies the position of splitter in Gantt, based on column index in Gantt.
	*/
	index?: string;
}

export interface EditSettings {

	/**Enables or disables add record icon in gantt toolbar
	* @Default {false}
	*/
	allowAdding?: boolean;

	/**Enables or disables delete icon in gantt toolbar
	* @Default {false}
	*/
	allowDeleting?: boolean;

	/**Specifies the option for enabling or disabling editing in Gantt grid part
	* @Default {false}
	*/
	allowEditing?: boolean;

	/**Specifies the edit mode in Gantt, &quot;normal&quot; is for dialog editing ,&quot;cellEditing&quot; is for cell type editing
	* @Default {normal}
	*/
	editMode?: string;
}

export interface ScheduleHeaderSettings {

	/**Specified the format for day view in schedule header
	* @Default {ddd}
	*/
	dayHeaderFormat?: string;

	/**Specified the format for Hour view in schedule header
	* @Default {HH}
	*/
	hourHeaderFormat?: string;

	/**Specifies the number of minutes per interval
	* @Default {ej.Gantt.minutesPerInterval.Auto}
	*/
	minutesPerInterval?: ej.Gantt.minutesPerInterval|string;

	/**Specified the format for month view in schedule header
	* @Default {MMM}
	*/
	monthHeaderFormat?: string;

	/**Specifies the schedule mode
	* @Default {ej.Gantt.ScheduleHeaderType.Week}
	*/
	scheduleHeaderType?: ej.Gantt.ScheduleHeaderType|string;

	/**Specified the background for weekends in gantt
	* @Default {#F2F2F2}
	*/
	weekendBackground?: string;

	/**Specified the format for week view in schedule header
	* @Default {ddd}
	*/
	weekHeaderFormat?: string;

	/**Specified the format for year view in schedule header
	* @Default {yyyy}
	*/
	yearHeaderFormat?: string;
}

export interface SizeSettings {

	/**Specifies the height of gantt control
	* @Default {450px}
	*/
	height?: string;

	/**Specifies the width of gantt control
	* @Default {1000px}
	*/
	width?: string;
}

export interface SortSettings {

	/**Specifies the sorted columns for gantt
	* @Default {[]}
	*/
	sortedColumns?: Array<any>;
}

export interface ToolbarSettings {

	/**Specifies the state of enabling or disabling toolbar
	* @Default {true}
	*/
	showToolBar?: boolean;

	/**Specifies the list of toolbar items to rendered in toolbar
	* @Default {[]}
	*/
	toolbarItems?: Array<any>;
}

enum DurationUnit{

	///Sets the Duration Unit as day.
	Day,

	///Sets the Duration Unit as hour.
	Hour,

	///Sets the Duration Unit as minute.
	Minute
}


enum minutesPerInterval{

	///Sets the interval automatically according with schedule start and end date.
	Auto,

	///Sets one minute intervals per hour.
	OneMinute,

	///Sets Five minute intervals per hour.
	FiveMinutes,

	///Sets fifteen minute intervals per hour.
	FifteenMinutes,

	///Sets thirty minute intervals per hour.
	ThirtyMinutes
}


enum ScheduleHeaderType{

	///Sets year Schedule Mode.
	Year,

	///Sets month Schedule Mode.
	Month,

	///Sets week Schedule Mode.
	Week,

	///Sets day Schedule Mode.
	Day,

	///Sets hour Schedule Mode.
	Hour
}


enum workingTimeScale{

	///Sets eight hour timescale.
	TimeScale8Hours,

	///Sets twenty four hour timescale.
	TimeScale24Hours
}

}

class ReportViewer extends ej.Widget {
	static fn: ReportViewer;
	constructor(element: JQuery, options?: ReportViewer.Model);
	constructor(element: Element, options?: ReportViewer.Model);
	model:ReportViewer.Model;
	defaults:ReportViewer.Model;

	/** Export the report to the specified format.
	* @returns {void}
	*/
	exportReport(): void;

	/** Fit the report page to the container.
	* @returns {void}
	*/
	fitToPage(): void;

	/** Fit the report page height to the container.
	* @returns {void}
	*/
	fitToPageHeight(): void;

	/** Fit the report page width to the container.
	* @returns {void}
	*/
	fitToPageWidth(): void;

	/** Get the available datasets name of the rdlc report.
	* @returns {void}
	*/
	getDataSetNames(): void;

	/** Get the available parameters of the report.
	* @returns {void}
	*/
	getParameters(): void;

	/** Navigate to first page of report.
	* @returns {void}
	*/
	gotoFirstPage(): void;

	/** Navigate to last page of the report.
	* @returns {void}
	*/
	gotoLastPage(): void;

	/** Navigate to next page from the current page.
	* @returns {void}
	*/
	gotoNextPage(): void;

	/** Go to specific page index of the report.
	* @returns {void}
	*/
	gotoPageIndex(): void;

	/** Navigate to previous page from the current page.
	* @returns {void}
	*/
	gotoPreviousPage(): void;

	/** Print the report.
	* @returns {void}
	*/
	print(): void;

	/** Apply print layout to the report.
	* @returns {void}
	*/
	printLayout(): void;

	/** Refresh the report.
	* @returns {void}
	*/
	refresh(): void;
}
export module ReportViewer{

export interface Model {

	/**Gets or sets the list of data sources for the RDLC report.
	* @Default {[]}
	*/
	dataSources?: Array<DataSources>;

	/**Enables or disables the page cache of report.
	* @Default {false}
	*/
	enablePageCache?: boolean;

	/**Specifies the export settings.
	*/
	exportSettings?: ExportSettings;

	/**When set to true, adapts the report layout to fit the screen size of devices on which it renders.
	* @Default {true}
	*/
	isResponsive?: boolean;

	/**Specifies the locale for report viewer.
	* @Default {en-US}
	*/
	locale?: string;

	/**Specifies the page settings.
	*/
	pageSettings?: PageSettings;

	/**Gets or sets the list of parameters associated with the report.
	* @Default {[]}
	*/
	parameters?: Array<Parameters>;

	/**Enables and disables the print mode.
	* @Default {false}
	*/
	printMode?: boolean;

	/**Specifies the print option of the report.
	* @Default {ej.ReportViewer.PrintOptions.Default}
	*/
	printOptions?: ej.ReportViewer.PrintOptions|string;

	/**Specifies the processing mode of the report.
	* @Default {ej.ReportViewer.ProcessingMode.Remote}
	*/
	processingMode?: ej.ReportViewer.ProcessingMode|string;

	/**Specifies the render layout.
	* @Default {ej.ReportViewer.RenderMode.Default}
	*/
	renderMode?: ej.ReportViewer.RenderMode|string;

	/**Gets or sets the path of the report file.
	* @Default {empty}
	*/
	reportPath?: string;

	/**Gets or sets the reports server url.
	* @Default {empty}
	*/
	reportServerUrl?: string;

	/**Specifies the report Web API service url.
	* @Default {empty}
	*/
	reportServiceUrl?: string;

	/**Specifies the toolbar settings.
	*/
	toolbarSettings?: ToolbarSettings;

	/**Gets or sets the zoom factor for report viewer.
	* @Default {1}
	*/
	zoomFactor?: number;

	/**Fires when the report viewer is destroyed successfully.If you want to perform any operation after destroying the reportviewer control,you can make use of the destroy event.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires during drill through action done in report.If you want to perform any operation when a drill through action is performed, you can make use of the drillThrough event.*/
	drillThrough? (e: DrillThroughEventArgs): void;

	/**Fires before report rendering is completed.If you want to perform any operation before the rendering of report,you can make use of the renderingBegin event.*/
	renderingBegin? (e: RenderingBeginEventArgs): void;

	/**Fires after report rendering completed.If you want to perform any operation after the rendering of report,you can make use of this renderingComplete event.*/
	renderingComplete? (e: RenderingCompleteEventArgs): void;

	/**Fires when any error occurred while rendering the report.If you want to perform any operation when an error occurs in the report, you can make use of the reportError event.*/
	reportError? (e: ReportErrorEventArgs): void;

	/**Fires when the report is being exported.If you want to perform any operation before exporting of report, you can make use of the reportExport event.*/
	reportExport? (e: ReportExportEventArgs): void;

	/**Fires when the report is loaded.If you want to perform any operation after the successful loading of report, you can make use of the reportLoaded event.*/
	reportLoaded? (e: ReportLoadedEventArgs): void;

	/**Fires when click the View Report Button.*/
	viewReportClick? (e: ViewReportClickEventArgs): void;
}

export interface DestroyEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DrillThroughEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the actionInfo's parameters bookmarkLink, hyperLink, reportName, parameters.
	*/
	actionInfo?: any;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderingBeginEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderingCompleteEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the collection of parameters.
	*/
	reportParameters?: any;
}

export interface ReportErrorEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the error details.
	*/
	error?: string;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ReportExportEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ReportLoadedEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ViewReportClickEventArgs {

	/**true if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the parameter collection.
	*/
	parameters?: any;

	/**returns the report model.
	*/
	model?: any;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DataSources {

	/**Gets or sets the name of the data source.
	* @Default {empty}
	*/
	name?: string;

	/**Gets or sets the values of data source.
	* @Default {[]}
	*/
	values?: Array<any>;
}

export interface ExportSettings {

	/**Specifies the export formats.
	* @Default {ej.ReportViewer.ExportOptions.All}
	*/
	exportOptions?: ej.ReportViewer.ExportOptions|string;

	/**Specifies the excel export format.
	* @Default {ej.ReportViewer.ExcelFormats.Excel97to2003}
	*/
	excelFormat?: ej.ReportViewer.ExcelFormats|string;

	/**Specifies the word export format.
	* @Default {ej.ReportViewer.WordFormats.Doc}
	*/
	wordFormat?: ej.ReportViewer.WordFormats|string;
}

export interface PageSettings {

	/**Specifies the print layout orientation.
	* @Default {null}
	*/
	orientation?: ej.ReportViewer.Orientation|string;

	/**Specifies the paper size of print layout.
	* @Default {null}
	*/
	paperSize?: ej.ReportViewer.PaperSize|string;
}

export interface Parameters {

	/**Gets or sets the parameter labels.
	* @Default {null}
	*/
	labels?: Array<any>;

	/**Gets or sets the name of the parameter.
	* @Default {empty}
	*/
	name?: string;

	/**Gets or sets whether the parameter allows nullable value or not.
	* @Default {false}
	*/
	nullable?: boolean;

	/**Gets or sets the prompt message associated with the specified parameter.
	* @Default {empty}
	*/
	prompt?: string;

	/**Gets or sets the parameter values.
	* @Default {[]}
	*/
	values?: Array<any>;
}

export interface ToolbarSettings {

	/**Fires when user click on toolbar item in the toolbar.
	* @Default {empty}
	*/
	click?: string;

	/**Specifies the toolbar items.
	* @Default {ej.ReportViewer.ToolbarItems.All}
	*/
	items?: ej.ReportViewer.ToolbarItems|string;

	/**Shows or hides the toolbar.
	* @Default {true}
	*/
	showToolbar?: boolean;

	/**Shows or hides the tooltip of toolbar items.
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**Specifies the toolbar template ID.
	* @Default {empty}
	*/
	templateId?: string;
}

enum ExportOptions{

	///Specifies the All property in ExportOptions to get all availble options.
	All,

	///Specifies the Pdf property in ExportOptions to get Pdf option.
	Pdf,

	///Specifies the Word property in ExportOptions to get Word option.
	Word,

	///Specifies the Excel property in ExportOptions to get Excel option.
	Excel,

	///Specifies the Html property in ExportOptions to get Html option.
	Html
}


enum ExcelFormats{

	///Specifies the Excel97to2003 property in ExcelFormats to get specified version of exported format.
	Excel97to2003,

	///Specifies the Excel2007 property in ExcelFormats to get specified version of exported format.
	Excel2007,

	///Specifies the Excel2010 property in ExcelFormats to get specified version of exported format.
	Excel2010,

	///Specifies the Excel2013 property in ExcelFormats to get specified version of exported format.
	Excel2013
}


enum WordFormats{

	///Specifies the Doc property in WordFormats to get specified version of exported format.
	Doc,

	///Specifies the Dot property in WordFormats to get specified version of exported format.
	Dot,

	///Specifies the Docx property in WordFormats to get specified version of exported format.
	Docx,

	///Specifies the Word2007 property in WordFormats to get specified version of exported format.
	Word2007,

	///Specifies the Word2010 property in WordFormats to get specified version of exported format.
	Word2010,

	///Specifies the Word2013 property in WordFormats to get specified version of exported format.
	Word2013,

	///Specifies the Word2007Dotx property in WordFormats to get specified version of exported format.
	Word2007Dotx,

	///Specifies the Word2010Dotx property in WordFormats to get specified version of exported format.
	Word2010Dotx,

	///Specifies the Word2013Dotx property in WordFormats to get specified version of exported format.
	Word2013Dotx,

	///Specifies the Word2007Docm property in WordFormats to get specified version of exported format.
	Word2007Docm,

	///Specifies the Word2010Docm property in WordFormats to get specified version of exported format.
	Word2010Docm,

	///Specifies the Word2013Docm property in WordFormats to get specified version of exported format.
	Word2013Docm,

	///Specifies the Word2007Dotm property in WordFormats to get specified version of exported format.
	Word2007Dotm,

	///Specifies the Word2010Dotm property in WordFormats to get specified version of exported format.
	Word2010Dotm,

	///Specifies the Word2013Dotm property in WordFormats to get specified version of exported format.
	Word2013Dotm,

	///Specifies the Rtf property in WordFormats to get specified version of exported format.
	Rtf,

	///Specifies the Txt property in WordFormats to get specified version of exported format.
	Txt,

	///Specifies the EPub property in WordFormats to get specified version of exported format.
	EPub,

	///Specifies the Html property in WordFormats to get specified version of exported format.
	Html,

	///Specifies the Xml property in WordFormats to get specified version of exported format.
	Xml,

	///Specifies the Automatic property in WordFormats to get specified version of exported format.
	Automatic
}


enum Orientation{

	///Specifies the Landscape property in pageSettings.orientation to get specified layout.
	Landscape,

	///Specifies the portrait property in pageSettings.orientation to get specified layout.
	Portrait
}


enum PaperSize{

	///Specifies the A3 as value in pageSettings.paperSize to get specified size.
	A3,

	///Specifies the A4 as value in pageSettings.paperSize to get specified size.
	Portrait,

	///Specifies the B4(JIS) as value in pageSettings.paperSize to get specified size.
	B4_JIS,

	///Specifies the B5(JIS) as value in pageSettings.paperSize to get specified size.
	B5_JIS,

	///Specifies the Envelope #10 as value in pageSettings.paperSize to get specified size.
	Envelope_10,

	///Specifies the Envelope as value in pageSettings.paperSize to get specified size.
	Envelope_Monarch,

	///Specifies the Executive as value in pageSettings.paperSize to get specified size.
	Executive,

	///Specifies the Legal as value in pageSettings.paperSize to get specified size.
	Legal,

	///Specifies the Letter as value in pageSettings.paperSize to get specified size.
	Letter,

	///Specifies the Tabloid as value in pageSettings.paperSize to get specified size.
	Tabloid,

	///Specifies the Custom as value in pageSettings.paperSize to get specified size.
	Custom
}


enum PrintOptions{

	///Specifies the Default property in printOptions.
	Default,

	///Specifies the NewTab property in printOptions.
	NewTab,

	///Specifies the None property in printOptions.
	None
}


enum ProcessingMode{

	///Specifies the Remote property in processingMode.
	Remote,

	///Specifies the Local property in processingMode.
	Local
}


enum RenderMode{

	///Specifies the Default property in RenderMode to get default output.
	Default,

	///Specifies the Mobile property in RenderMode to get specified output.
	Mobile,

	///Specifies the Desktop property in RenderMode to get specified output.
	Desktop
}


enum ToolbarItems{

	///Specifies the Print as value in ToolbarItems to get specified item.
	Print,

	///Specifies the Refresh as value in ToolbarItems to get specified item.
	Refresh,

	///Specifies the Zoom as value in ToolbarItems to get specified item.
	Zoom,

	///Specifies the FittoPage as value in ToolbarItems to get specified item.
	FittoPage,

	///Specifies the Export as value in ToolbarItems to get specified item.
	Export,

	///Specifies the PageNavigation as value in ToolbarItems to get specified item.
	PageNavigation,

	///Specifies the Parameters as value in ToolbarItems to get specified item.
	Parameters,

	///Specifies the PrintLayout as value in ToolbarItems to get specified item.
	PrintLayout,

	///Specifies the PageSetup as value in ToolbarItems to get specified item.
	PageSetup
}

}

class TreeGrid extends ej.Widget {
	static fn: TreeGrid;
	constructor(element: JQuery, options?: TreeGrid.Model);
	constructor(element: Element, options?: TreeGrid.Model);
	model:TreeGrid.Model;
	defaults:TreeGrid.Model;

	/** To clear all the selection in TreeGrid
	* @param {number} you can pass a row index to clear the row selection.
	* @returns {void}
	*/
	clearSelection(index: number): void;

	/** To collapse all the parent items in tree grid
	* @returns {void}
	*/
	collapseAll(): void;

	/** To hide the column by using header text
	* @param {string} you can pass a header text of a column to hide.
	* @returns {void}
	*/
	hideColumn(headerText: string): void;

	/** To refresh the changes in tree grid
	* @param {Array<any>} Pass which data source you want to show in tree grid
	* @param {any} Pass which data you want to show in tree grid
	* @returns {void}
	*/
	refresh(dataSource: Array<any>, query: any): void;

	/** Freeze all the columns preceding to the column specified by the field name.
	* @param {string} Freeze all Columns before this field column.
	* @returns {void}
	*/
	freezePrecedingColumns (field: string): void;

	/** Freeze/unfreeze the specified column.
	* @param {string} Freeze/Unfreeze this field column.
	* @param {boolean} Decides to Freeze/Unfreeze this field column.
	* @returns {void}
	*/
	freezeColumn (field: string, isFrozen: boolean): void;

	/** To save the edited cell in TreeGrid
	* @returns {void}
	*/
	saveCell(): void;

	/** To search an item with search string provided at the run time
	* @param {string} you can pass a searchString to search the tree grid
	* @returns {void}
	*/
	search(searchString: string): void;

	/** To show the column by using header text
	* @param {string} you can pass a header text of a column to show.
	* @returns {void}
	*/
	showColumn(headerText: string): void;

	/** To sorting the data based on the particular fields
	* @param {string} you can pass a name of column to sort.
	* @param {string} you can pass a sort direction to sort the column.
	* @returns {void}
	*/
	sortColumn(columnName: string, columnSortDirection: string): void;
}
export module TreeGrid{

export interface Model {

	/**Enables or disables the ability to resize the column width interactively.
	* @Default {false}
	*/
	allowColumnResize?: boolean;

	/**Enables or disables the ability to drag and drop the row interactively to reorder the rows.
	* @Default {false}
	*/
	allowDragAndDrop?: boolean;

	/**Enables or disables the ability to filter the data on all the columns. Enabling this property will display a row with editor controls corresponding to each column. You can restrict filtering on particular column by disabling this property directly on that column instance itself.
	* @Default {false}
	*/
	allowFiltering?: boolean;

	/**Enables or disables keyboard navigation.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Enables or disables the ability to sort the rows based on multiple columns/fields by clicking on each column header. Rows will be sorted recursively on clicking the column headers.
	* @Default {false}
	*/
	allowMultiSorting?: boolean;

	/**Enables or disables the ability to select a row interactively.
	* @Default {true}
	*/
	allowSelection?: boolean;

	/**Enables or disables the ability to sort the rows based on a single field/column by clicking on that column header. When enabled, rows can be sorted only by single field/column.
	* @Default {false}
	*/
	allowSorting?: boolean;

	/**Specifies the id of the template that has to be applied for alternate rows.
	*/
	altRowTemplateID?: string;

	/**Specifies the mapping property path for sub tasks in datasource
	*/
	childMapping?: string;

	/**Option for adding columns; each column has the option to bind to a field in the dataSource.
	*/
	columns?: Array<Columns>;

	/**Options for displaying and customizing context menu items.
	*/
	contextMenuSettings?: ContextMenuSettings;

	/**Specifies hierarchical or self-referential data to populate the TreeGrid.
	* @Default {null}
	*/
	dataSource?: Array<any>;

	/**Specifies whether to wrap the header text when it is overflown i.e., when it exceeds the header width.
	* @Default {none}
	*/
	headerTextOverflow?: string;

	/**Options for displaying and customizing the tooltip. This tooltip will show the preview of the row that is being dragged.
	*/
	dragTooltip?: DragTooltip;

	/**Options for enabling and configuring the editing related operations.
	*/
	editSettings?: EditSettings;

	/**Specifies whether to render alternate rows in different background colors.
	* @Default {true}
	*/
	enableAltRow?: boolean;

	/**Specifies whether to load all the rows in collapsed state when the TreeGrid is rendered for the first time.
	* @Default {false}
	*/
	enableCollapseAll?: boolean;

	/**Specifies whether to resize TreeGrid whenever window size changes.
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Specifies whether to render only the visual elements that are visible in the UI. When you enable this property, it will reduce the loading time for loading large number of records.
	* @Default {false}
	*/
	enableVirtualization?: boolean;

	/**Specifies if the filtering should happen immediately on each key press or only on pressing enter key.
	* @Default {immediate}
	*/
	filterBarMode?: string;

	/**Specifies the name of the field in the dataSource, which contains the id of that row.
	*/
	idMapping?: string;

	/**Specifies the name of the field in the dataSource, which contains the parentâ€™s id. This is necessary to form a parent-child hierarchy, if the dataSource contains self-referential data.
	*/
	parentIdMapping?: string;

	/**Specifies ej.Query to select data from the dataSource. This property is applicable only when the dataSource is ej.DataManager.
	* @Default {null}
	*/
	query?: any;

	/**Specifies the height of a single row in tree grid. Also, we need to set same height in the CSS style with class name e-rowcell.
	* @Default {30}
	*/
	rowHeight?: number;

	/**Specifies the id of the template to be applied for all the rows.
	*/
	rowTemplateID?: string;

	/**Specifies the index of the selected row.
	* @Default {-1}
	*/
	selectedRowIndex?: number;

	/**Specifies the type of selection whether to select single row or multiple rows.
	* @Default {ej.TreeGrid.SelectionType.Single}
	*/
	selectionType?: ej.Gantt.SelectionType|string;

	/**Controls the visibility of the menu button, which is displayed on the column header. Clicking on this button will show a popup menu. When you choose â€œColumnsâ€ item from this popup, a list box with column names will be shown, from which you can select/deselect a column name to control the visibility of the respective columns.
	* @Default {false}
	*/
	showColumnChooser?: boolean;

	/**Specifies whether to show tooltip when mouse is hovered on the cell.
	* @Default {true}
	*/
	showGridCellTooltip?: boolean;

	/**Specifies whether to show tooltip for the cells, which has expander button.
	* @Default {true}
	*/
	showGridExpandCellTooltip?: boolean;

	/**Options for setting width and height for TreeGrid.
	*/
	sizeSettings?: SizeSettings;

	/**Options for sorting the rows.
	*/
	sortSettings?: SortSettings;

	/**Options for displaying and customizing the toolbar items.
	*/
	toolbarSettings?: ToolbarSettings;

	/**Specifies the index of the column that needs to have the expander button. By default, cells in the first column contain the expander button.
	* @Default {0}
	*/
	treeColumnIndex?: number;

	/**Triggered before every success event of TreeGrid action.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggered for every TreeGrid action success event.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggered while enter the edit mode in the TreeGrid cell*/
	beginEdit? (e: BeginEditEventArgs): void;

	/**Triggered after collapsed the TreeGrid record*/
	collapsed? (e: CollapsedEventArgs): void;

	/**Triggered while collapsing the TreeGrid record*/
	collapsing? (e: CollapsingEventArgs): void;

	/**Triggered while Context Menu is rendered in TreeGrid control*/
	contextMenuOpen? (e: ContextMenuOpenEventArgs): void;

	/**Triggered after saved the modified cellValue in TreeGrid*/
	endEdit? (e: EndEditEventArgs): void;

	/**Triggered after expand the record*/
	expanded? (e: ExpandedEventArgs): void;

	/**Triggered while expanding the TreeGrid record*/
	expanding? (e: ExpandingEventArgs): void;

	/**Triggered while Treegrid is loaded*/
	load? (e: LoadEventArgs): void;

	/**Triggered while rendering each cell in the TreeGrid*/
	queryCellInfo? (e: QueryCellInfoEventArgs): void;

	/**Triggered while rendering each row*/
	rowDataBound? (e: RowDataBoundEventArgs): void;

	/**Triggered while dragging a row in TreeGrid control*/
	rowDrag? (e: RowDragEventArgs): void;

	/**Triggered while start to drag row in TreeGrid control*/
	rowDragStart? (e: RowDragStartEventArgs): void;

	/**Triggered while drop a row in TreeGrid control*/
	rowDragStop? (e: RowDragStopEventArgs): void;

	/**Triggered after the row is selected.*/
	rowSelected? (e: RowSelectedEventArgs): void;

	/**Triggered before the row is going to be selected.*/
	rowSelecting? (e: RowSelectingEventArgs): void;

	/**Triggered when toolbar item is clicked in TreeGrid.*/
	toolbarClick? (e: ToolbarClickEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current grouped column field name.
	*/
	columnName?: string;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the direction of sorting ascending or descending.
	*/
	columnSortDirection?: string;

	/**Returns the value of expanding parent element.
	*/
	keyValue?: string;

	/**Returns the data or deleting element.
	*/
	data?: string;
}

export interface ActionCompleteEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the grid model.
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the current grouped column field name.
	*/
	columnName?: string;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the direction of sorting ascending or descending
	*/
	columnSortDirection?: string;

	/**Returns the value of searched element.
	*/
	keyValue?: string;

	/**Returns the data of deleted element.
	*/
	data?: string;

	/**Returns selected record index
	*/
	recordIndex?: number;
}

export interface BeginEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of editing cell.
	*/
	rowElement?: any;

	/**Returns the Element of editing cell.
	*/
	cellElement?: any;

	/**Returns the data of current cell record.
	*/
	data?: any;

	/**Returns the column Index of cell belongs.
	*/
	columnIndex?: number;
}

export interface CollapsedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of collapsed record.
	*/
	recordIndex?: number;

	/**Returns the data of collpsed record..
	*/
	data?: any;

	/**Returns Request Type.
	*/
	requestType?: string;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;

	/**Returns the event type.
	*/
	type?: string;
}

export interface CollapsingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of collapsing record.
	*/
	recordIndex?: number;

	/**Returns the data of collapsing record..
	*/
	data?: any;

	/**Returns the event Type.
	*/
	type?: string;

	/**Returns state of a record whether it is in expanded or collapsing state.
	*/
	expanded?: boolean;
}

export interface ContextMenuOpenEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the default context menu items to which we add custom items.
	*/
	contextMenuItems?: Array<any>;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface EndEditEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of editing cell.
	*/
	rowElement?: any;

	/**Returns the Element of editing cell.
	*/
	cellElement?: any;

	/**Returns the data of edited cell record.
	*/
	data?: any;

	/**Returns the column name of edited cell belongs.
	*/
	columnName?: string;

	/**Returns the column object of edited cell belongs.
	*/
	columnObject?: any;
}

export interface ExpandedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of expanded record.
	*/
	recordIndex?: number;

	/**Returns the data of expanded record..
	*/
	data?: any;

	/**Returns Request Type.
	*/
	requestType?: string;

	/**Returns state of a record whether it is in expanded or expanded state.
	*/
	expanded?: boolean;

	/**Returns the event type.
	*/
	type?: string;
}

export interface ExpandingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row index of expanding record.
	*/
	recordIndex?: number;

	/**Returns the data of expanding record..
	*/
	data?: any;

	/**Returns the event Type.
	*/
	type?: string;

	/**Returns state of a record whether it is in expanded or collapsed state.
	*/
	expanded?: boolean;
}

export interface LoadEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the TreeGrid model
	*/
	model?: any;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface QueryCellInfoEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the selecting cell element.
	*/
	cellElement?: any;

	/**Returns the value of cell.
	*/
	cellValue?: string;

	/**Returns the data of current cell record.
	*/
	data?: any;

	/**Returns the column of cell belongs.
	*/
	column?: any;
}

export interface RowDataBoundEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row element of rendering row.
	*/
	rowElement?: any;

	/**Returns the data of rendering row record.
	*/
	data?: any;
}

export interface RowDragEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row which we start to drag.
	*/
	draggedRow?: any;

	/**Returns the row index which we start to drag.
	*/
	draggedRowIndex?: number;

	/**Returns the row on which we are dragging.
	*/
	targetRow?: any;

	/**Returns the row index on which we are dragging.
	*/
	targetRowIndex?: number;

	/**Returns that we can drop over that record or not.
	*/
	canDrop?: boolean;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowDragStartEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row which we start to drag.
	*/
	draggedRow?: any;

	/**Returns the row index which we start to drag.
	*/
	draggedRowIndex?: boolean;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowDragStopEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the row which we start to drag.
	*/
	draggedRow?: any;

	/**Returns the row index which we start to drag.
	*/
	draggedRowIndex?: number;

	/**Returns the row which we are dropped to row.
	*/
	targetRow?: any;

	/**Returns the row index which we are dropped to row.
	*/
	targetRowIndex?: number;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns request type.
	*/
	requestType?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface RowSelectedEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the selecting row element.
	*/
	targetRow?: any;

	/**Returns the index of selecting row record.
	*/
	recordIndex?: number;

	/**Returns the data of selected record.
	*/
	data?: any;

	/**Returns the event type.
	*/
	type?: string;
}

export interface RowSelectingEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the data selecting record.
	*/
	data?: any;

	/**Returns the index of selecting row record.
	*/
	recordIndex?: string;

	/**Returns the selecting row element.
	*/
	targetRow?: any;

	/**Returns the previous selected data.
	*/
	previousData?: any;

	/**Returns the previous selected row index.
	*/
	previousIndex?: string;

	/**Returns the previous selected row element.
	*/
	previousTreeGridRow?: any;
}

export interface ToolbarClickEventArgs {

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the current item.
	*/
	currentTarget?: any;

	/**Returns the TreeGrid model.
	*/
	model?: any;

	/**Returns the name of the toolbar item on which mouse click has been performed
	*/
	itemName?: string;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface Columns {

	/**Enables or disables the ability to filter the rows based on this column.
	* @Default {false}
	*/
	allowFiltering?: boolean;

	/**Enables or disables the ability to sort the rows based on this column/field.
	* @Default {false}
	*/
	allowSorting?: boolean;

	/**Specifies the edit type of the column.
	* @Default {ej.TreeGrid.EditingType.String}
	*/
	editType?: ej.TreeGrid.EditingType|string;

	/**Specifies the name of the field from the dataSource to bind with this column.
	*/
	field?: string;

	/**Specifies the type of the editor control to be used to filter the rows.
	* @Default {ej.TreeGrid.EditingType.String}
	*/
	filterEditType?: ej.TreeGrid.EditingType|string;

	/**Header text of the column.
	* @Default {null}
	*/
	headerText?: string;

	/**Controls the visibility of the column.
	* @Default {true}
	*/
	visible?: boolean;

	/**Specifies the header template value for the column header
	*/
	headerTemplateID?: string;

	/**Specifies whether the column is frozen
	* @Default {false}
	*/
	isFrozen?: boolean;

	/**Enables or disables the ability to freeze/unfreeze the columns
	* @Default {false}
	*/
	allowFreezing?: boolean;
}

export interface ContextMenuSettings {

	/**Option for adding items to context menu.
	* @Default {[]}
	*/
	contextMenuItems?: Array<any>;

	/**Shows/hides the context menu.
	* @Default {false}
	*/
	showContextMenu?: boolean;
}

export interface DragTooltip {

	/**Specifies whether to show tooltip while dragging a row.
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**Option to add field names whose corresponding values in the dragged row needs to be shown in the preview tooltip.
	* @Default {[]}
	*/
	tooltipItems?: Array<any>;

	/**Custom template for that tooltip that is shown while dragging a row.
	* @Default {null}
	*/
	tooltipTemplate?: string;
}

export interface EditSettings {

	/**Enables or disables the button to add new row in context menu as well as in toolbar.
	* @Default {true}
	*/
	allowAdding?: boolean;

	/**Enables or disables the button to delete the selected row in context menu as well as in toolbar.
	* @Default {true}
	*/
	allowDeleting?: boolean;

	/**Enables or disables the ability to edit a row or cell.
	* @Default {false}
	*/
	allowEditing?: boolean;

	/**specifies the edit mode in TreeGrid , &quot;cellEditing&quot; is for cell type editing and &quot;rowEditing&quot; is for entire row.
	* @Default {ej.TreeGrid.EditMode.CellEditing}
	*/
	editMode?: ej.TreeGrid.EditMode|string;

	/**Specifies the position where the new row has to be added.
	* @Default {top}
	*/
	rowPosition?: ej.TreeGrid.RowPosition|string;
}

export interface SizeSettings {

	/**Height of the TreeGrid.
	* @Default {null}
	*/
	height?: string;

	/**Width of the TreeGrid.
	* @Default {null}
	*/
	width?: string;
}

export interface SortSettings {

	/**Option to add columns based on which the rows have to be sorted recursively.
	* @Default {[]}
	*/
	sortedColumns?: Array<any>;
}

export interface ToolbarSettings {

	/**Shows/hides the toolbar.
	* @Default {false}
	*/
	showToolBar?: boolean;

	/**Option to add items to the toolbar.
	* @Default {[]}
	*/
	toolbarItems?: Array<any>;
}

enum EditingType{

	///It Specifies String edit type.
	String,

	///It Specifies Boolean edit type.
	Boolean,

	///It Specifies Numeric edit type.
	Numeric,

	///It Specifies Dropdown edit type.
	Dropdown,

	///It Specifies DatePicker edit type.
	DatePicker,

	///It Specifies DateTimePicker edit type.
	DateTimePicker,

	///It Specifies Maskedit edit type.
	Maskedit
}


enum EditMode{

	///you can edit a cell.
	CellEditing,

	///you can edit a row.
	RowEditing
}


enum RowPosition{

	///you can add a new row at top.
	Top,

	///you can add a new row at bottom.
	Bottom,

	///you can add a new row to above selected row.
	Above,

	///you can add a new row to below selected row.
	Below,

	///you can add a new row as a child for selected row.
	Child
}

}
module Gantt
{
enum SelectionType
{
//you can select a single row.
Single,
//you can select a multiple row.
Multiple,
}
}

class NavigationDrawer extends ej.Widget {
	static fn: NavigationDrawer;
	constructor(element: JQuery, options?: NavigationDrawer.Model);
	constructor(element: Element, options?: NavigationDrawer.Model);
	model:NavigationDrawer.Model;
	defaults:NavigationDrawer.Model;

	/** To close the navigation drawer control
	* @returns {void}
	*/
	close(): void;

	/** To open the navigation drawer control
	* @returns {void}
	*/
	open(): void;

	/** To Toggle the navigation drawer control
	* @returns {void}
	*/
	toggle(): void;
}
export module NavigationDrawer{

export interface Model {

	/**Specifies the contentId for navigation drawer, where the ajax content need to updated
	* @Default {null}
	*/
	contentid?: string;

	/**Sets the root class for NavigationDrawer theme. This cssClass API helps to use custom skinning option for NavigationDrawer control. By defining the root class using this API, we need to include this root class in CSS.
	*/
	cssclass?: string;

	/**Sets the Direction for the control. See Direction
	* @Default {left}
	*/
	direction?: ej.Direction|string;

	/**Sets the listview to be enabled or not
	* @Default {false}
	*/
	enablelistview?: boolean;

	/**Specifies the listview items as an array of object.
	* @Default {[]}
	*/
	items?: Array<any>;

	/**Sets all the properties of listview to render in navigation drawer
	*/
	listviewsettings?: any;

	/**Specifies position whether it is in fixed or relative to the page. See Position
	* @Default {normal}
	*/
	position?: string;

	/**Specifies the targetId for navigation drawer
	*/
	targetid?: string;

	/**Sets the rendering type of the control. See Type
	* @Default {overlay}
	*/
	type?: string;

	/**Specifies the width of the control
	* @Default {auto}
	*/
	width?: number;

	/**Event triggers before the control gets closed.*/
	beforeclose? (e: BeforecloseEventArgs): void;

	/**Event triggers when the control open.*/
	open? (e: OpenEventArgs): void;

	/**Event triggers when the Swipe happens.*/
	swipe? (e: SwipeEventArgs): void;
}

export interface BeforecloseEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Navigation Drawer model
	*/
	model?: ej.NavigationDrawer.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}

export interface OpenEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Navigation Drawer model
	*/
	model?: ej.NavigationDrawer.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}

export interface SwipeEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Navigation Drawer model
	*/
	model?: ej.NavigationDrawer.Model;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}
}

class RadialMenu extends ej.Widget {
	static fn: RadialMenu;
	constructor(element: JQuery, options?: RadialMenu.Model);
	constructor(element: Element, options?: RadialMenu.Model);
	model:RadialMenu.Model;
	defaults:RadialMenu.Model;

	/** To hide the redialmenu
	* @returns {void}
	*/
	hide(): void;

	/** To hide the redialmenu items
	* @returns {void}
	*/
	menuHide(): void;

	/** To Show the redialmenu
	* @returns {void}
	*/
	show(): void;
}
export module RadialMenu{

export interface Model {

	/**To show the Radial in intial render.
	*/
	autoOpen?: boolean;

	/**Renders the back button Image for Radial using class.
	*/
	backImageClass?: string;

	/**Sets the root class for RadialMenu theme. This cssClass API helps to use custom skinning option for RadialMenu control. By defining the root class using this API, we need to include this root class in CSS.
	*/
	cssClass?: string;

	/**To enable Animation for Radial Menu.
	*/
	enableAnimation?: boolean;

	/**Renders the Image for Radial using Class.
	*/
	imageClass?: string;

	/**Specifies the radius of radial menu
	*/
	radius?: number;

	/**To show the Radial while clicking given target element.
	*/
	targetElementId?: string;

	/**Event triggers when the mouse down happens.*/
	mouseDown? (e: MouseDownEventArgs): void;

	/**Event triggers when the mouse up happens.*/
	mouseUp? (e: MouseUpEventArgs): void;

	/**Event triggers when we select an item.*/
	select? (e: SelectEventArgs): void;
}

export interface MouseDownEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Radialmenu model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}

export interface MouseUpEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Radialmenu model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}

export interface SelectEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the Radialmenu model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**returns the item of element
	*/
	item?: any;

	/**returns the name of item
	*/
	itemName?: string;
}
}

class Tile extends ej.Widget {
	static fn: Tile;
	constructor(element: JQuery, options?: Tile.Model);
	constructor(element: Element, options?: Tile.Model);
	model:Tile.Model;
	defaults:Tile.Model;

	/** Update the image template of tile item to another one.
	* @param {string} UpdateTemplate by using id
	* @returns {void}
	*/
	updateTemplate(name: string): void;
}
export module Tile{

export interface Model {

	/**Section for badge specific functionalities and it represents the notification for tile items.
	*/
	badge?: Badge;

	/**Specifies the tile caption in outside of template content.
	* @Default {null}
	*/
	captionTemplateId?: string;

	/**Sets the root class for Tile theme. This cssClass API helps to use custom skinning option for Tile control. By defining the root class using this API, we need to include this root class in CSS.
	*/
	cssClass?: string;

	/**Saves current model value to browser cookies for state maintains. While refreshing the page retains the model value applies from browser cookies.
	* @Default {false}
	*/
	enablePersistence?: boolean;

	/**Customize the tile size height.
	* @Default {null}
	*/
	height?: number;

	/**Specifies Tile imageClass, using this property we can give images for each tile through css classes.
	* @Default {null}
	*/
	imageClass?: string;

	/**Specifies the position of tile image. See imagePosition
	* @Default {center}
	*/
	imagePosition?: ej.Tile.ImagePosition|string;

	/**Specifies the tile image in outside of template content.
	* @Default {null}
	*/
	imageTemplateId?: string;

	/**Specifies the url of tile image.
	* @Default {null}
	*/
	imageUrl?: string;

	/**Section for livetile specific functionalities.
	*/
	livetile?: Livetile;

	/**Specifies whether the tile text to be shown or hidden.
	* @Default {true}
	*/
	showText?: boolean;

	/**Changes the text of a tile.
	* @Default {Text}
	*/
	text?: string;

	/**Aligns the text of a tile. See textAlignment
	* @Default {normal}
	*/
	textAlignment?: ej.Tile.TextAlignment|string;

	/**Specifies the size of a tile.  See tileSize
	* @Default {small}
	*/
	tileSize?: ej.Tile.TileSize|string;

	/**Customize the tile size width.
	* @Default {null}
	*/
	width?: number;

	/**Sets the rounded corner to  tile.
	* @Default {false}
	*/
	showRoundedCorner?: boolean;

	/**Sets allowSelection to  tile.
	* @Default {false}
	*/
	allowSelection?: boolean;

	/**Sets the background color to  tile.
	* @Default {false}
	*/
	backgroundColor?: string;

	/**Event triggers when the mouse down happens in the tile*/
	mouseDown? (e: MouseDownEventArgs): void;

	/**Event triggers when the mouse up happens in the tile*/
	mouseUp? (e: MouseUpEventArgs): void;
}

export interface MouseDownEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tile model
	*/
	model?: boolean;

	/**returns the name of the event
	*/
	type?: boolean;

	/**returns the current tile text
	*/
	text?: string;

	/**returns the index of current tile item 
	*/
	index?: number;
}

export interface MouseUpEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the tile model
	*/
	model?: boolean;

	/**returns the name of the event
	*/
	type?: boolean;

	/**returns the current tile text
	*/
	text?: boolean;

	/**returns the index of current tile item 
	*/
	index?: number;
}

export interface Badge {

	/**Specifies whether to enable badge or not.
	* @Default {false}
	*/
	enabled?: boolean;

	/**Specifies maximum value for tile badge.
	* @Default {100}
	*/
	maxValue?: number;

	/**Specifies minimum value for tile badge.
	* @Default {1}
	*/
	minValue?: number;

	/**Specifies text instead of number for tile badge.
	* @Default {null}
	*/
	text?: string;

	/**Sets value for tile badge.
	* @Default {1}
	*/
	value?: number;

	/**Sets position for tile badge.
	* @Default {â€œbottomrightâ€}
	*/
	position?: ej.Tile.BadgePosition|string;
}

export interface Livetile {

	/**Specifies whether to enable livetile or not.
	* @Default {false}
	*/
	enabled?: boolean;

	/**Specifies liveTile images in css classes.
	* @Default {null}
	*/
	imageClass?: string;

	/**Specifies liveTile images in templates.
	* @Default {null}
	*/
	imageTemplateId?: string;

	/**Specifies liveTile images in css classes.
	* @Default {null}
	*/
	imageUrl?: string;

	/**Specifies liveTile type for Tile. See orientation
	* @Default {flip}
	*/
	type?: ej.Tile.LiveTileType|string;

	/**Specifies time interval between two successive livetile animation
	* @Default {2000}
	*/
	updateInterval?: number;

	/**Sets the text to each living tile
	* @Default {Null}
	*/
	text?: Array<any>;
}

enum BadgePosition{

	///To set the topright position of tile badge
	Topright,

	///To set the bottomright of tile image
	Bottomright
}


enum ImagePosition{

	///To set the center position of tile image
	Center,

	///To set the top position of tile image
	Top,

	///To set the bottom position of tile image
	Bottom,

	///To set the right position of tile image
	Right,

	///To set the left position of tile image
	Left,

	///To set the topleft position of tile image
	TopLeft,

	///To set the topright position of tile image
	TopRight,

	///To set the bottomright position of tile image
	BottomRight,

	///To set the bottomleft position of tile image
	BottomLeft,

	///To set the fill position of tile image
	Fill
}


enum LiveTileType{

	///To set flip type of liveTile for tile control
	Flip,

	///To set slide type of liveTile for tile control
	Slide,

	///To set carousel type of liveTile for tile control
	Carousel
}


enum TextAlignment{

	///To set the normal alignment of text for tile control
	Normal,

	///To set the left alignment of text for tile control
	Left,

	///To set the right alignment of text for tile control
	Right,

	///To set the center alignment of text for tile control
	Center
}


enum TextPosition{

	///To set the innertop position of the tile text
	Innertop,

	///To set the innerbottom position of the tile text
	Innerbottom,

	///To set the outer position of the tile text
	Outer
}


enum TileSize{

	///To set the medium size for tile control
	Medium,

	///To set the small size for tile control
	Small,

	///To set the large size for tile control
	Large,

	///To set the wide size for tile control
	Wide
}

}

class RadialSlider extends ej.Widget {
    static fn: RadialSlider;
    element: JQuery;
    constructor(element: JQuery, options?: RadialSliderOptions);
    constructor(element: Element, options?: RadialSliderOptions);
	model:RadialSliderOptions;
	defaults:RadialSliderOptions;
    show(): void;
    hide(): void;
}

interface RadialSliderOptions {
    radius?: number;
    endAngle?: number;
    startAngle?: number;
    ticks?: Int32Array;
    enableRoundOff?: boolean;
    value?: number;
    strokeWidth?: number;
    autoOpen?: boolean;
    enableAnimation?: boolean;
    cssClass?: string;
    innerCircleImageClass?: string;
    innerCircleImageUrl?: string;
    showInnerCircle?: boolean;
    inline?: boolean;
    stop? (e: RadialSliderStopEventArgs): void;
    start? (e: RadialSliderStartEventArgs): void;
    slide? (e: RadialSliderSlideEventArgs): void;
    change? (e: RadialSliderChangeEventArgs): void;
    mouseover? (e: RadialSliderMouseOverEventArgs): void;
    create? (e: RadialSliderCreateEventArgs): void;
    destory? (e: RadialSliderDestroyEventArgs): void;
}
interface RadialSliderCreateEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
}
interface RadialSliderDestroyEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
}
interface RadialSliderStopEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
    value: number;
}

interface RadialSliderStartEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
    value: number;
}
interface RadialSliderSlideEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
    value: number;
    selectedValue: number;
}
interface RadialSliderChangeEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
    value: number;
    oldValue: number;
}
interface RadialSliderMouseOverEventArgs {
    cancel: boolean;
    model: RadialSliderOptions;
    type: string;
    value: number;
    selectedValue: number;
}
class Spreadsheet extends ej.Widget {
	static fn: Spreadsheet;
	constructor(element: JQuery, options?: Spreadsheet.Model);
	constructor(element: Element, options?: Spreadsheet.Model);
	model:Spreadsheet.Model;
	defaults:Spreadsheet.Model;

	/** This method is used to add a new sheet in the last position of the sheet container.
	* @returns {void}
	*/
	addNewSheet(): void;

	/** It is used to clear all the data and format in the specified range of cells in Spreadsheet.
	* @param {string} Optional.  If range is specified, then it will clear all content in the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	clearAll(range: string): void;

	/** This property is used to clear all the formats applied in the specified range in Spreadsheet.
	* @param {string} Optional.  If range is specified, then it will clear all format in the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	clearAllFormat(range: string): void;

	/** Used to clear the applied border in the specified range in Spreadsheet.
	* @param {string} Optional.  If range is specified, then it will clear border in the specified range else it will use the current selected range.
	* @returns {void}
	*/
	clearBorder(range: string): void;

	/** This property is used to clear the contents in the specified range in Spreadsheet.
	* @param {string} Optional.  If the range is specified, then it will clear the content in the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	clearContents(range: string): void;

	/** This method is used to remove only the data in the range denoted by the specified range name.
	* @param {string} Pass the defined rangeSettings property name.
	* @returns {void}
	*/
	clearRange(rangeName: string): void;

	/** It is used to remove data in the specified range of cells based on the defined property.
	* @param {Array<any>|string} Optional.  If range is specified, it will clear data for the specified range else it will use the current selected range. 
	* @param {string} Optional.  If property is specified, it will remove the specified property in the range else it will remove default properties 
	* @param {boolean} Optional.  If pass true, if you want to skip the hidden rows 
	* @returns {void}
	*/
	clearRangeData(range: Array<any>|string, property: string, skipHiddenRow: boolean): void;

	/** This method is used to copy sheets in Spreadsheet.
	* @param {number} Pass the sheet index that you want to copy.
	* @param {number} Pass the position index where you want to copy.
	* @returns {void}
	*/
	copySheet(fromIdx: number, toIdx: number): void;

	/** This method is used to delete the entire column which is selected.
	* @param {number} Pass the start column index.
	* @param {number} Pass the end column index.
	* @returns {void}
	*/
	deleteEntireColumn(startCol: number, endCol: number): void;

	/** This method is used to delete the entire row which is selected.
	* @param {number} Pass the start row index.
	* @param {number} Pass the end row index.
	* @returns {void}
	*/
	deleteEntireRow(startRow: number, endRow: number): void;

	/** This method is used to delete a particular sheet in the Spreadsheet.
	* @param {number} Pass the sheet index to perform delete action.
	* @returns {void}
	*/
	deleteSheet(idx: number): void;

	/** This method is used to delete the selected cells and shift the remaining cells to left.
	* @param {any} Row index and column index of the starting cell.
	* @param {any} Row index and column index of the ending cell.
	* @returns {void}
	*/
	deleteShiftLeft(startCell: any, endCell: any): void;

	/** This method is used to delete the selected cells and shift the remaining cells up.
	* @param {any} Row index and column index of the start cell.
	* @param {any} Row index and column index of the end cell.
	* @returns {void}
	*/
	deleteShiftUp(startCell: any, endCell: any): void;

	/** This method is used to edit data in the specified range of cells based on its corresponding rangeSettings.
	* @param {string} Pass the defined rangeSettings property name.
	* @param {Function} Pass the function that you want to perform range edit.
	* @returns {void}
	*/
	editRange(rangeName: string, fn: Function): void;

	/** This method is used to get the activation panel in the Spreadsheet.
	* @returns {HTMLElement}
	*/
	getActivationPanel(): HTMLElement;

	/** This method is used to get the active cell object in Spreadsheet. It will returns object which contains rowIndex and colIndex of the active cell.
	* @param {number} Optional.  If sheetIdx is specified, it will return the active cell object in specified sheet index else it will use the current sheet index
	* @returns {any}
	*/
	getActiveCell(sheetIdx: number): any;

	/** This method is used to get the active cell element based on the given sheet index in the Spreadsheet.
	* @param {number} Optional.  If sheetIndex is specified, it will return the active cell element in specified sheet index else it will use the current active sheet index.
	* @returns {HTMLElement}
	*/
	getActiveCellElem(sheetIdx: number): HTMLElement;

	/** This method is used to get the current active sheet index in Spreadsheet.
	* @returns {number}
	*/
	getActiveSheetIndex(): number;

	/** This method is used to get the auto fill element in Spreadsheet.
	* @returns {HTMLElement}
	*/
	getAutoFillElem(): HTMLElement;

	/** This method is used to get the cell element based on specified row and column index in the Spreadsheet.
	* @param {number} Pass the row index.
	* @param {number} Pass the column index.
	* @param {number} Optional.  Pass the sheet index that you want to get cell.
	* @returns {HTMLElement}
	*/
	getCell(rowIdx: number, colIdx: number, sheetIdx: number): HTMLElement;

	/** This method is used to get the frozen columns index in the Spreadsheet.
	* @param {number} Pass the sheet index.
	* @returns {number}
	*/
	getFrozenColumns(sheetIdx: number): number;

	/** This method is used to get the frozen rowâ€™s index in Spreadsheet.
	* @param {number} Pass the sheet index.
	* @returns {number}
	*/
	getFrozenRows(sheetIdx: number): number;

	/** This method is used to get the hyperlink data as object from the specified cell in Spreadsheet.
	* @param {HTMLElement} Pass the DOM element to get hyperlink
	* @returns {any}
	*/
	getHyperlink(cell: HTMLElement): any;

	/** This method is used to get all cell elements in the specified range.
	* @param {number} Pass the row index of the start cell.
	* @param {number} Pass the column index of the start cell.
	* @param {number} Pass the row index of the end cell.
	* @param {number} Pass the column index of the end cell.
	* @param {number} Pass the index of the sheet.
	* @returns {HTMLElement}
	*/
	getRange(startRIndex: number, startCIndex: number, endRIndex: number, endCIndex: number, sheetIdx: number): HTMLElement;

	/** This method is used to get the data in specified range in Spreadsheet.
	* @param {Array<any>|string} Optional.  If range is specified, it will get range data for the specified range else it will use the current selected range. 
	* @param {boolean} Pass 'true' if you want cell values alone.
	* @param {Array<any>|string} Optional.  If property is specified, it will get the specified property in the range else it will get default properties.
	* @param {number} Optional.  Pass the index of the sheet.
	* @param {boolean} Optional.  When skipDateTime is set as true, it return 'value2' cell value (cell type as 'datetime')
	* @param {boolean} Optional.  Pass true, if you want to get the calculated formula value else it return formula string.
	* @param {boolean} Optional.  Pass true, if you want to skip the hidden rows data.
	* @param {number} Optional.  Pass virtual row index of sheet.
	* @param {number} Optional.  Pass virtual row count of sheet.
	* @returns {Array<any>}
	*/
	getRangeData(range: Array<any>|string, valueOnly: boolean, property: Array<any>|string, sheetIdx: number, skipDateTime: boolean, skipFormula: boolean, skipHiddenRow: boolean, virtualRowIdx: number, virtualRowCount: number): Array<any>;

	/** This method is used to get the range indices array based on the specified alpha range in Spreadsheet.
	* @param {string} Pass the alpha range that you want to get range indices.
	* @returns {Array<any>}
	*/
	getRangeIndices(range: string): Array<any>;

	/** This method is used to get the sheet details based on the given sheet index in Spreadsheet.
	* @param {number} Pass the sheet index to get the sheet object.
	* @returns {any}
	*/
	getSheet(sheetIdx: number): any;

	/** This method is used to get the sheet content div element of Spreadsheet.
	* @param {number} Pass the sheet index to get the sheet content.
	* @returns {HTMLElement}
	*/
	getSheetElement(sheetIdx: number): HTMLElement;

	/** This method is used to send a paging request to the specified sheet Index in the Spreadsheet.
	* @param {number} Pass the sheet index to perform paging at specified sheet index
	* @param {boolean} Pass 'true' to create a new sheet. If the specified sheet index is already exist, it navigate to that sheet else it create a new sheet.
	* @returns {void}
	*/
	gotoPage(sheetIdx: number, newSheet: boolean): void;

	/** This method is used to hide the entire columns from the specified range (startCol, endCol) in Spreadsheet.
	* @param {number} Index of the start column.
	* @param {number} Index of the end column.
	* @returns {void}
	*/
	hideColumn(startCol: number, endCol: number): void;

	/** This method is used to hide the formula bar in Spreadsheet.
	* @returns {void}
	*/
	hideFormulaBar(): void;

	/** This method is used to hide the rows, based on the specified row index in Spreadsheet.
	* @param {number} Index of the start row.
	* @param {number} Index of the end row.
	* @returns {void}
	*/
	hideRow(startRow: number, endRow: number): void;

	/** This method is used to hide the sheet based on the specified sheetIndex or sheet name in the Spreadsheet.
	* @param {string|number} Pass the sheet name or index that you want to hide.
	* @returns {void}
	*/
	hideSheet(sheetIdx: string|number): void;

	/** This method is used to hide the displayed waiting pop-up in Spreadsheet.
	* @returns {void}
	*/
	hideWaitingPopUp(): void;

	/** This method is used to insert a column before the active cell's column in the Spreadsheet.
	* @param {number} Pass start column.
	* @param {number} Pass end column.
	* @returns {void}
	*/
	insertEntireColumn(startCol: number, endCol: number): void;

	/** This method is used to insert a row before the active cell's row in the Spreadsheet.
	* @param {number} Pass start row.
	* @param {number} Pass end row.
	* @returns {void}
	*/
	insertEntireRow(startRow: number, endRow: number): void;

	/** This method is used to insert a new sheet to the left of the current active sheet.
	* @returns {void}
	*/
	insertSheet(): void;

	/** This method is used to insert cells in the selected or specified range and shift remaining cells to bottom.
	* @param {any} Row index and column index of the start cell.
	* @param {any} Row index and column index of the end cell.
	* @returns {void}
	*/
	insertShiftBottom(startCell: any, endCell: any): void;

	/** This method is used to insert cells in the selected or specified range and shift remaining cells to right.
	* @param {any} Row index and column index of the start cell.
	* @param {any} Row index and column index of the end cell.
	* @returns {void}
	*/
	insertShiftRight(startCell: any, endCell: any): void;

	/** This method is used to import excel file manually by using form data.
	* @param {any} Pass the form data object to import files manually.
	* @returns {void}
	*/
	import(importRequest: any): void;

	/** This method is used to lock/unlock the range of cells in active sheet. Lock cells are activated only after the sheet is protected. Once the sheet is protected it is unable to lock/unlock cells.
	* @param {string|Array<any>} Pass the alpha range cells or array range of cells.
	* @param {string} Optional.  By default is true. If it is false locked cells are unlocked.
	* @returns {void}
	*/
	lockCells(range: string|Array<any>, isLocked: string): void;

	/** This method is used to merge cells by across in the Spreadsheet.
	* @param {string} Optional.  To pass the cell range or selected cells are process.
	* @param {boolean} Optional.  If pass true it does not show alert.
	* @returns {void}
	*/
	mergeAcrossCells(range: string, alertStatus: boolean): void;

	/** This method is used to merge the selected cells in the Spreadsheet.
	* @param {string} Optional.  To pass the cell range or selected cells are process.
	* @param {boolean} Optional.  If pass true it does not show alert.
	* @returns {void}
	*/
	mergeCells(range: string, alertStatus: boolean): void;

	/** This method is used to move sheets in Spreadsheet.
	* @param {number} Pass the sheet index that you want to move.
	* @param {number} Pass the position index where you want to move.
	* @returns {void}
	*/
	moveSheet(fromIdx: number, toIdx: number): void;

	/** This method is used to protect or unprotect active sheet.
	* @param {boolean} Optional.   By default is true. If it is false active sheet is unprotected.
	* @returns {void}
	*/
	protectSheet(isProtected: boolean): void;

	/** This method is used to remove the hyperlink from selected cells of current sheet.
	* @param {string} Hyperlink remove from the specified range.
	* @param {boolean} Optional.  If it is true, It will clear link only not format.
	* @returns {void}
	*/
	removeHyperlink(range: string, isClearHLink: boolean): void;

	/** This method is used to remove the range data and its defined rangeSettings property based on the specified range name.
	* @param {string} Pass the defined rangeSetting property name.
	* @returns {void}
	*/
	removeRange(rangeName: string): void;

	/** This method is used to set the active cell in the Spreadsheet.
	* @param {number} Pass the row index.
	* @param {number} Pass the column index.
	* @param {number} Pass the index of the sheet.
	* @returns {void}
	*/
	setActiveCell(rowIdx: number, colIdx: number, sheetIdx: number): void;

	/** This method is used to set active sheet index for the Spreadsheet.
	* @param {number} Pass the active sheet index for Spreadsheet.
	* @returns {void}
	*/
	setActiveSheetIndex(sheetIdx: number): void;

	/** This method is used to set border for the specified range of cells in the Spreadsheet.
	* @param {any} Pass the border properties that you want to set.
	* @param {string} Optional.  If range is specified, it will set border for the specified range else it will use the selected range.
	* @returns {void}
	*/
	setBorder(property: any, range: string): void;

	/** This method is used to set the hyperlink in selected cells of the current sheet.
	* @param {string} If range is specified, it will set the hyperlink in range of the cells.
	* @param {any} Pass cellAddress or webAddress
	* @param {number} If we pass cellAddress then which sheet to be navigate in the applied link.
	* @returns {void}
	*/
	setHyperlink(range: string, link: any, sheetIdx: number): void;

	/** This method is used to set the focus to the Spreadsheet.
	* @returns {void}
	*/
	setSheetFocus(): void;

	/** This method is used to set the width for the columns in the Spreadsheet.
	* @param {Array<any>|any} Pass the cell index and width of the cells.
	* @returns {void}
	*/
	setWidthToColumns(widthColl: Array<any>|any): void;

	/** This method is used to rename the active sheet.
	* @param {string} Pass the sheet name that you want to change the current active sheet name.
	* @returns {void}
	*/
	sheetRename(sheetName: string): void;

	/** This method is used to display the activationPanel for the specified range name.
	* @param {string} Pass the range name that you want to display the activation panel.
	* @returns {void}
	*/
	showActivationPanel(rangeName: string): void;

	/** This method is used to show the hidden columns within the specified range in the Spreadsheet.
	* @param {number} Index of the start column.
	* @param {number} Index of the end column.
	* @returns {void}
	*/
	showColumn(startColIdx: number, endColIdx: number): void;

	/** This method is used to show the formula bar in Spreadsheet.
	* @returns {void}
	*/
	showFormulaBar(): void;

	/** This method is used to show the hidden rows in the specified range in the Spreadsheet.
	* @param {number} Index of the start row.
	* @param {number} Index of the end row.
	* @returns {void}
	*/
	showRow(startRow: number, endRow: number): void;

	/** This method is used to show waiting pop-up in Spreadsheet.
	* @returns {void}
	*/
	showWaitingPopUp(): void;

	/** This method is used to unfreeze the frozen rows and columns in the Spreadsheet.
	* @returns {void}
	*/
	unfreezePanes(): void;

	/** This method is used to unhide the sheet based on specified sheet name or sheet index.
	* @param {string|number} Pass the sheet name or index that you want to unhide.
	* @returns {void}
	*/
	unhideSheet(sheetInfo: string|number): void;

	/** This method is used to unmerge the selected range of cells in the Spreadsheet.
	* @param {string} Optional.  If the range is specified, then it will un merge the specified range else it will use the current selected range.
	* @returns {void}
	*/
	unmergeCells(range: string): void;

	/** This method is used to unwrap the selected range of cells in the Spreadsheet.
	* @param {Array<any>|string} Optional.  If the range is specified, then it will update unwrap in the specified range else it will use the current selected range.
	* @returns {void}
	*/
	unWrapText(range: Array<any>|string): void;

	/** This method is used to update the data for the specified range of cells in the Spreadsheet.
	* @param {any} Pass the cells data that you want to update.
	* @param {Array<any>} Optional.  If range is specified, it will update data for the specified range  else it will use the current selected range. 
	* @returns {void}
	*/
	updateData(data: any, range: Array<any>): void;

	/** This method is used to update the formula bar in the Spreadsheet.
	* @returns {void}
	*/
	updateFormulaBar(): void;

	/** This method is used to update the range of cells based on the specified settings which we want to update in the Spreadsheet.
	* @param {number} Pass the sheet index that you want to update.
	* @param {any} Pass the dataSource, startCell and showHeader values as settings.
	* @returns {void}
	*/
	updateRange(sheetIdx: number, settings: any): void;

	/** This method is used to update the unique data for the specified range of cells in Spreadsheet.
	* @param {any} Pass the  data that you want to update in the particular range
	* @param {Array<any>|string} Optional.  If range is specified, it will update data for the specified range else it will use the current selected range.
	* @returns {void}
	*/
	updateUniqueData(data: any, range: Array<any>|string): void;

	/** This method is used to wrap the selected range of cells in the Spreadsheet.
	* @param {Array<any>|string} Optional.  If the range is specified, then it will update wrap in the specified  range else it will use the current selected range.
	* @returns {void}
	*/
	wrapText(range: Array<any>|string): void;

	XLCellType: Spreadsheet.XLCellType;

	XLCFormat: Spreadsheet.XLCFormat;

	XLChart: Spreadsheet.XLChart;

	XLClipboard: Spreadsheet.XLClipboard;

	XLComment: Spreadsheet.XLComment;

	XLDragDrop: Spreadsheet.XLDragDrop;

	XLDragFill: Spreadsheet.XLDragFill;

	XLEdit: Spreadsheet.XLEdit;

	XLExport: Spreadsheet.XLExport;

	XLFilter: Spreadsheet.XLFilter;

	XLFormat: Spreadsheet.XLFormat;

	XLFreeze: Spreadsheet.XLFreeze;

	XLPrint: Spreadsheet.XLPrint;

	XLResize: Spreadsheet.XLResize;

	XLRibbon: Spreadsheet.XLRibbon;

	XLSearch: Spreadsheet.XLSearch;

	XLSelection: Spreadsheet.XLSelection;

	XLSort: Spreadsheet.XLSort;

	XLValidate: Spreadsheet.XLValidate;
}
export module Spreadsheet{

export interface XLCellType {

	/** This method is used to set a cell type from the specified range of cells in the spreadsheet.
	* @param {string} Pass the range where you want apply cell type.
	* @param {any} Pass type of cell type and its settings.
	* @param {number} Optional. Pass sheet index.
	* @returns {void}
	*/
	addCellTypes(range: string,settings: any,sheetIdx: number): void;

	/** This method is used to remove cell type from the specified range of cells in the Spreadsheet.
	* @param {string} Pass the range where you want remove cell type.
	* @param {number} Optional.  Pass sheet index.
	* @returns {void}
	*/
	removeCellTypes(range: string,sheetIdx: number): void;
}

export interface XLCFormat {

	/** This method is used to clear the applied conditional formatting rules in the Spreadsheet.
	* @param {boolean} Pass true if you want to clear rules from selected cells else it will clear rules from entire sheet.
	* @param {Array<any>|string} Optional.   If range is specified, it will clear rules for the specified range else it will use the current selected range.
	* @returns {void}
	*/
	clearCF(isSelected: boolean,range: Array<any>|string): void;

	/** This method is used to get the applied conditional formatting rules as array of objects based on the specified row Index and column Index in the Spreadsheet.
	* @param {number} Pass the row index.
	* @param {number} Pass the column index.
	* @returns {Array<any>}
	*/
	getCFRule(rowIdx: number,colIdx: number): Array<any>;

	/** This method is used to set the conditional formatting rule in the Spreadsheet.
	* @param {any} Pass the rule to set.
	* @returns {void}
	*/
	setCFRule(rule: any): void;
}

export interface XLChart {

	/** This method is used to create a chart for specified range in Spreadsheet.
	* @param {string} Optional.  If range is specified, it will create chart for the specified range else it will use the current selected range.
	* @param {any} To pass the type of chart and chart name.
	* @returns {void}
	*/
	createChart(range: string,options: any): void;

	/** This method is used to refresh the chart in the Spreadsheet.
	* @param {string} To pass the chart Id.
	* @param {any} To pass the type of chart and chart name.
	* @returns {void}
	*/
	refreshChart(id: string,options: any): void;

	/** This method is used to resize the chart of specified id in the Spreadsheet.
	* @param {string} To pass the chart id.
	* @param {number} To pass height value.
	* @param {number} To pass the width value.
	* @returns {void}
	*/
	resizeChart(id: string,height: number,width: number): void;
}

export interface XLClipboard {

	/** This method is used to copy the selected cells in the Spreadsheet.
	* @returns {void}
	*/
	copy(): void;

	/** This method is used to cut the selected cells in the Spreadsheet.
	* @returns {void}
	*/
	cut(): void;

	/** This method is used to paste the cut or copied cells data in the Spreadsheet.
	* @returns {void}
	*/
	paste(): void;
}

export interface XLComment {

	/** This method is used to delete the comment in the specified range in Spreadsheet.
	* @param {Array<any>|string} Optional.  If range is specified, it will delete comments for the specified range else it will use the current selected range. 
	* @param {number} Optional.  If sheetIdx is specified, it will delete comment in specified sheet else it will use active sheet.
	* @param {boolean} Optional.  Pass true, if you want to skip the hidden rows data.
	* @returns {void}
	*/
	deleteComment(range: Array<any>|string,sheetIdx: number,skipHiddenRow: boolean): void;

	/** This method is used to edit the comment in the target Cell in Spreadsheet.
	* @param {any} Optional.  Pass the row index and column index of the cell which contains comment. 
	* @returns {void}
	*/
	editComment(targetCell: any): void;

	/** This method is used to find the next comment from the active cell in Spreadsheet.
	* @returns {boolean}
	*/
	findNextComment(): boolean;

	/** This method is used to find the previous comment from the active cell in Spreadsheet.
	* @returns {boolean}
	*/
	findPrevComment(): boolean;

	/** This method is used to get comment data for the specified cell.
	* @param {HTMLElement} Pass the DOM element to get comment data as object.
	* @returns {any}
	*/
	getComment(cell: HTMLElement): any;

	/** This method is used to set new comment in Spreadsheet.
	* @param {string|Array<any>} Optional.  If we pass the range comment will set in the range otherwise it will set with selected cells. 
	* @param {string} Pass the comment data.
	* @param {boolean} Optional.  Pass true to show comment in edit mode 
	* @returns {void}
	*/
	setComment(range: string|Array<any>,data: string,showEditPanel: boolean): void;

	/** This method is used to show all the comments in the Spreadsheet.
	* @returns {void}
	*/
	showAllComments(): void;

	/** This method is used to show or hide the specific comment in the Spreadsheet.
	* @param {HTMLElement} Optional.  Pass the cell DOM element to show or hide its comment. If pass empty argument active cell will processed.
	* @returns {void}
	*/
	showHideComment(targetCell: HTMLElement): void;
}

export interface XLDragDrop {

	/** This method is used to drag and drop the selected range of cells to destination range in the Spreadsheet.
	* @param {any|Array<any>} Pass the source range to perform drag and drop.
	* @param {any|Array<any>} Pass the destination range to drop the dragged cells.
	* @returns {void}
	*/
	moveRangeTo(sourceRange: any|Array<any>,destinationRange: any|Array<any>): void;
}

export interface XLDragFill {

	/** This method is used to perform auto fill in Spreadsheet.
	* @param {any} Pass the options to perform auto fill in Spreadsheet.
	* @returns {void}
	*/
	autoFill(options: any): void;

	/** This method is used to hide the auto fill element in the Spreadsheet.
	* @returns {void}
	*/
	hideAutoFillElement(): void;

	/** This method is used to hide the auto fill options in the Spreadsheet.
	* @returns {void}
	*/
	hideAutoFillOptions(): void;

	/** This method is used to set position of the auto fill element in the Spreadsheet.
	* @param {boolean} Pass the drag fill status as boolean value for show auto fill options in Spreadsheet.
	* @returns {void}
	*/
	positionAutoFillElement(isDragFill: boolean): void;
}

export interface XLEdit {

	/** This method is used to calculate formulas in the specified sheet.
	* @param {number} Optional.  If sheet index is specified, then it will calculate formulas in the specified sheet only else it will calculate formulas in all sheets.
	* @returns {void}
	*/
	calcNow(sheetIdx: number): void;

	/** This method is used to edit a particular cell based on the row index and column index in the Spreadsheet.
	* @param {number} Pass the row index to edit particular cell.
	* @param {number} Pass the column index to edit particular cell.
	* @param {boolean} Pass true, if you want to maintain previous cell value.
	* @returns {void}
	*/
	editCell(rowIdx: number,colIdx: number,oldData: boolean): void;

	/** This method is used to get the property value of particular cell, based on the row and column index in the Spreadsheet.
	* @param {number} Pass the row index to get the property value.
	* @param {number} Pass the column index to get the property value.
	* @param {string} Optional. Pass the property name that you want("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader",  "filterState", "tableName", "comment", "formatStr", "decimalPlaces", "cellType").
	* @param {number} Optional.  Pass the index of the sheet.
	* @returns {any|string|Array<any>}
	*/
	getPropertyValue(rowIdx: number,colIdx: number,prop: string,sheetIdx: number): any|string|Array<any>;

	/** This method is used to get the property value in specified cell in Spreadsheet.
	* @param {HTMLElement} Pass the cell element to get property value.
	* @param {string} Pass the property name that you want ("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader", "filterState", "tableName", "comment", "formatStr", "decimalPlaces", "cellType").
	* @param {number} Pass the index of sheet.
	* @returns {void}
	*/
	getPropertyValueByElem(elem: HTMLElement,property: string,sheetIdx: number): void;

	/** This method is used to save the edited cell value in the Spreadsheet.
	* @returns {void}
	*/
	saveCell(): void;

	/** This method is used to update a particular cell value in the Spreadsheet.
	* @param {any} Pass row index and column index of the cell.
	* @param {string|number} Pass the cell value.
	* @returns {void}
	*/
	updateCell(cell: any,value: string|number): void;

	/** This method is used to update a particular cell value and its format in the Spreadsheet.
	* @param {any} Pass row index and column index of the cell.
	* @param {string|number} Pass the cell value.
	* @param {string} Pass the class name to update format. 
	* @param {number} Pass sheet index.
	* @returns {void}
	*/
	updateCellValue(cellIdx: any,val: string|number,formatClass: string,sheetIdx: number): void;
}

export interface XLExport {

	/** This method is used to save the sheet data as Excel or CSV document (.xls, .xlsx and .csv) in Spreadsheet.
	* @param {string} Pass the export type that you want. 
	* @returns {void}
	*/
	export(type: string): void;
}

export interface XLFilter {

	/** This method is used to clear the filter in filtered columns in the Spreadsheet.
	* @returns {void}
	*/
	clearFilter(): void;

	/** This method is used to apply filter for the selected range of cells in the Spreadsheet.
	* @param {string} Pass the range of the selected cells.
	* @returns {void}
	*/
	filter(range: string): void;

	/** This method is used to apply filter for the column by active cell's value in the Spreadsheet.
	* @returns {void}
	*/
	filterByActiveCell(): void;
}

export interface XLFormat {

	/** This method is used to create a table for the selected range of cells in the Spreadsheet.
	* @param {any} Pass the table object.
	* @param {string} Optional.   If the range is specified, then it will create table in the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	createTable(tableObject: any,range: string): void;

	/** This method is used to set format style and values in a cell or range of cells.
	* @param {any} Pass the formatObject which contains style, type, format, groupSeparator and decimalPlaces.
	* @param {string} Pass the range indices to format cells.
	* @returns {void}
	*/
	format(formatObj: any,range: string): void;

	/** This method is used to remove table with specified tableId in the Spreadsheet.
	* @param {number} Pass the tableId that you want to remove.
	* @returns {void}
	*/
	removeTable(tableId: number): void;

	/** This method is used to update the decimal places for numeric value for the selected range of cells in the Spreadsheet.
	* @param {string} Pass the decimal places type in increment/decrement.
	* @param {string} Pass the range indices.
	* @returns {void}
	*/
	updateDecimalPlaces(type: string,range: string): void;

	/** This method is used to update the format for the selected range of cells in the Spreadsheet.
	* @param {any} Pass the format object that you want to update.
	* @param {Array<any>} Optional.  If the range is specified, then it will update format in the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	updateFormat(formatObj: any,range: Array<any>): void;

	/** This method is used to update the unique format for selected range of cells in the Spreadsheet.
	* @param {string} Pass the unique format class.
	* @param {Array<any>} Optional.  If the range is specified, then it will update format in the specified range else it will use the current selected range.
	* @returns {void}
	*/
	updateUniqueFormat(formatClass: string,range: Array<any>): void;
}

export interface XLFreeze {

	/** This method is used to freeze columns upto the specified column index in the Spreadsheet.
	* @param {number} Index of the column to be freeze.
	* @returns {void}
	*/
	freezeColumns(colIdx: number): void;

	/** This method is used to freeze the first column in the Spreadsheet.
	* @returns {void}
	*/
	freezeLeftColumn(): void;

	/** This method is used to freeze rows and columns before the specified cell in the Spreadsheet.
	* @param {any} Row index and column index of the cell which you want to freeze.
	* @returns {void}
	*/
	freezePanes(cell: any): void;

	/** This method is used to freeze rows upto the specified row index in the Spreadsheet.
	* @param {number} Index of the row to be freeze.
	* @returns {void}
	*/
	freezeRows(rowIdx: number): void;

	/** This method is used to freeze the top row in the Spreadsheet.
	* @returns {void}
	*/
	freezeTopRow(): void;
}

export interface XLPrint {

	/** This method is used to print the selected contents in the Spreadsheet.
	* @returns {void}
	*/
	printSelection(): void;

	/** This method is used to print the entire contents in the active sheet.
	* @returns {void}
	*/
	printSheet(): void;
}

export interface XLResize {

	/** This method is used to get the column width of the specified column index in the Spreadsheet.
	* @param {number} Pass the column index.
	* @returns {number}
	*/
	getColWidth(colIdx: number): number;

	/** This method is used to get the row height of the specified row index in the Spreadsheet.
	* @param {number} Pass the row index which you want to find its height.
	* @returns {number}
	*/
	getRowHeight(rowIdx: number): number;

	/** This method is used to set the column width of the specified column index in the Spreadsheet.
	* @param {number} Pass the column index.
	* @param {number} Pass the width value that you want to set.
	* @returns {void}
	*/
	setColWidth(colIdx: number,size: number): void;

	/** This method is used to set the row height of the specified row index in the Spreadsheet.
	* @param {number} Pass the row index.
	* @param {number} Pass the height value that you want to set.
	* @returns {void}
	*/
	setRowHeight(rowIdx: number,size: number): void;
}

export interface XLRibbon {

	/** This method is used to add a new name in the Spreadsheet name manager.
	* @param {string} Pass the name that you want to define in name manager.
	* @param {string} Pass the cell reference.
	* @param {string} Optional.  Pass comment, if you want.
	* @param {number} Optional.   Pass the sheet index.
	* @returns {void}
	*/
	addNamedRange(name: string,refersTo: string,comment: string,sheetIdx: number): void;

	/** This method is used to insert the few type (SUM, MAX, MIN, AVG, COUNT) of formulas in the selected range of cells in the Spreadsheet.
	* @param {string} To pass the type("SUM","MAX","MIN","AVG","COUNT").
	* @param {string} If range is specified, it will apply auto sum for the specified range else it will use the current selected range.
	* @returns {void}
	*/
	autoSum(type: string,range: string): void;

	/** This method is used to delete the defined name in the Spreadsheet name manager.
	* @param {string} Pass the defined name that you want to remove from name manager.
	* @returns {void}
	*/
	removeNamedRange(name: string): void;
}

export interface XLSearch {

	/** This method is used to find and replace all data by workbook in the Spreadsheet.
	* @param {string} Pass the search data.
	* @param {string} Pass the replace data.
	* @param {boolean} Pass true, if you want to match with case-sensitive.
	* @param {boolean} Pass true, if you want to match with entire cell contents.
	* @returns {void}
	*/
	replaceAllByBook(findData: string,replaceData: string,isCSen: boolean,isEMatch: boolean): void;

	/** This method is used to find and replace all data by sheet in Spreadsheet.
	* @param {string} Pass the search data.
	* @param {string} Pass the replace data.
	* @param {boolean} Pass true, if you want to match with case-sensitive.
	* @param {boolean} Pass true, if you want to match with entire cell contents.
	* @returns {void}
	*/
	replaceAllBySheet(findData: string,replaceData: string,isCSen: boolean,isEMatch: boolean): void;
}

export interface XLSelection {

	/** This method is used to get the selected cells element based on specified sheet index in the Spreadsheet.
	* @param {number} Pass the sheet index to get the cells element.
	* @returns {HTMLElement}
	*/
	getSelectedCells(sheetIdx: number): HTMLElement;

	/** This method is used to refresh the selection in the Spreadsheet.
	* @param {Array<any>} Optional.  Pass range to refresh selection.
	* @returns {void}
	*/
	refreshSelection(range: Array<any>): void;

	/** This method is used to select a single column in the Spreadsheet.
	* @param {number} Pass the column index value.
	* @returns {void}
	*/
	selectColumn(colIdx: number): void;

	/** This method is used to select entire columns in a specified range (start index and end index) in the Spreadsheet.
	* @param {number} Pass the column start index.
	* @param {number} Pass the column end index.
	* @returns {void}
	*/
	selectColumns(startIdx: number,endIdx: number): void;

	/** This method is used to select the specified range of cells in the Spreadsheet.
	* @param {string} Pass range which want to select.
	* @param {any} Pass the row and column index of the end cell.
	* @returns {void}
	*/
	selectRange(range: string,endCell: any): void;

	/** This method is used to select a single row in the Spreadsheet.
	* @param {number} Pass the row index value.
	* @returns {void}
	*/
	selectRow(rowIdx: number): void;

	/** This method is used to select entire rows in a specified range (start index and end index) in the Spreadsheet.
	* @param {number} Pass the start row index.
	* @param {number} Pass the end row index.
	* @returns {void}
	*/
	selectRows(startIdx: number,endIdx: number): void;

	/** This method is used to select all cells in active sheet.
	* @returns {void}
	*/
	selectSheet(): void;
}

export interface XLSort {

	/** This method is used to sort a particular range of cells based on its cell or font color in the Spreadsheet.
	* @param {string} Pass 'PutCellColor' to sort by cell color or 'PutFontColor' for by font color.
	* @param {any} Pass the HEX color code to sort.
	* @param {string} Pass the range
	* @returns {void}
	*/
	sortByColor(operation: string,color: any,range: string): void;

	/** This method is used to sort a particular range of cells based on its values in the Spreadsheet.
	* @param {Array<any>|string} Pass the range to sort.
	* @param {string} Pass the column name.
	* @param {any} Pass the direction to sort (ascending or descending).
	* @returns {void}
	*/
	sortByRange(range: Array<any>|string,columnName: string,direction: any): void;
}

export interface XLValidate {

	/** This method is used to apply data validation rules in a selected range of cells based on the defined condition in the Spreadsheet.
	* @param {string} If range is specified, it will apply rules for the specified range else it will use the current selected range. 
	* @param {Array<any>} Pass the validation condition, value1 and value2.
	* @param {string} Pass the data type.
	* @param {boolean} Pass 'true' if you ignore blank values.
	* @param {boolean} Pass 'true' if you want to show an error alert.
	* @returns {void}
	*/
	applyDVRules(range: string,values: Array<any>,type: string,required: boolean,showErrorAlert: boolean): void;

	/** This method is used to clear the applied validation rules in a specified range of cells in the Spreadsheet.
	* @param {string} Optional.  If range is specified, it will clear rules for the specified range else it will use the current selected range. 
	* @returns {void}
	*/
	clearDV(range: string): void;

	/** This method is used to highlight invalid data in a specified range of cells in the Spreadsheet.
	* @param {string} Optional.  If range is specified, it will clear rules for the specified range else it will use the current selected range.
	* @returns {void}
	*/
	highlightInvalidData(range: string): void;
}

export interface Model {

	/**Gets or sets an active sheet index in the Spreadsheet. By defining this value, you can specify which sheet should be active in workbook.
	* @Default {1}
	*/
	activeSheetIndex?: number;

	/**Gets or sets a value that indicates whether to enable or disable auto rendering of cell type in the Spreadsheet.
	* @Default {false}
	*/
	allowAutoCellType?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable auto fill feature in the Spreadsheet.
	* @Default {true}
	*/
	allowAutoFill?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable auto sum feature in the Spreadsheet.
	* @Default {true}
	*/
	allowAutoSum?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable cell format feature in the Spreadsheet. By enabling this, you can customize styles and number formats.
	* @Default {true}
	*/
	allowCellFormatting?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable cell type feature in the Spreadsheet.
	* @Default {false}
	*/
	allowCellType?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable chart feature in the Spreadsheet. By enabling this feature, you can create and customize charts in Spreadsheet.
	* @Default {true}
	*/
	allowCharts?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable clipboard feature in the Spreadsheet. By enabling this feature, you can perform cut/copy and paste operations in Spreadsheet.
	* @Default {true}
	*/
	allowClipboard?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable comment feature in the Spreadsheet. By enabling this, you can add/delete/modify comments in Spreadsheet.
	* @Default {true}
	*/
	allowComments?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable Conditional Format feature in the Spreadsheet. By enabling this, you can apply formatting to the selected range of cells based on the provided conditions (Greater than, Less than, Equal, Between, Contains, etc.).Note: allowCellFormatting must be true while using conditional formatting.
	* @Default {true}
	*/
	allowConditionalFormats?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable data validation feature in the Spreadsheet.
	* @Default {true}
	*/
	allowDataValidation?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable the delete action in the Spreadsheet. By enabling this feature, you can delete existing rows, columns, cells and sheet.
	* @Default {true}
	*/
	allowDelete?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable drag and drop feature in the Spreadsheet.
	* @Default {true}
	*/
	allowDragAndDrop?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable the edit action in the Spreadsheet.
	* @Default {true}
	*/
	allowEditing?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable filtering feature in the Spreadsheet. Filtering can be used to limit the data displayed using required criteria.
	* @Default {true}
	*/
	allowFiltering?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable table feature in the Spreadsheet. By enabling this, you can render table in selected range.
	* @Default {true}
	*/
	allowFormatAsTable?: boolean;

	/**Get or sets a value that indicates whether to enable or disable format painter feature in the Spreadsheet. By enabling this feature, you can copy the format from the selected range and apply it to another range.
	* @Default {true}
	*/
	allowFormatPainter?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable formula bar in the Spreadsheet.
	* @Default {true}
	*/
	allowFormulaBar?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable freeze pane support in Spreadsheet. After enabling this feature, you can use freeze top row, freeze first column and freeze panes options.
	* @Default {true}
	*/
	allowFreezing?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable hyperlink feature in the Spreadsheet. By enabling this feature, you can add hyperlink which is used to easily navigate to the cell reference from one sheet to another or a web page.
	* @Default {true}
	*/
	allowHyperlink?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable import feature in the Spreadsheet. By enabling this feature, you can open existing Spreadsheet documents.
	* @Default {true}
	*/
	allowImport?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable the insert action in the Spreadsheet. By enabling this feature, you can insert new rows, columns, cells and sheet.
	* @Default {true}
	*/
	allowInsert?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable keyboard navigation feature in the Spreadsheet.
	* @Default {true}
	*/
	allowKeyboardNavigation?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable lock cell feature in the Spreadsheet.
	* @Default {true}
	*/
	allowLockCell?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable merge feature in the Spreadsheet.
	* @Default {true}
	*/
	allowMerging?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable resizing feature in the Spreadsheet. By enabling this feature, you can change the column width and row height by dragging its header boundaries.
	* @Default {true}
	*/
	allowResizing?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable find and replace feature in the Spreadsheet. By enabling this, you can easily find and replace a specific value in the sheet or workbook. By using goto behavior, you can select and highlight all cells that contains specific data or data types.
	* @Default {true}
	*/
	allowSearching?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable selection in the Spreadsheet. By enabling this feature, selected items will be highlighted.
	* @Default {true}
	*/
	allowSelection?: boolean;

	/**Gets or sets a value that indicates whether to enable the sorting feature in the Spreadsheet.
	* @Default {true}
	*/
	allowSorting?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable undo and redo feature in the Spreadsheet.
	* @Default {true}
	*/
	allowUndoRedo?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable wrap text feature in the Spreadsheet. By enabling this, cell content can wrap to the next line, if the cell content exceeds the boundary of the cell.
	* @Default {true}
	*/
	allowWrap?: boolean;

	/**Gets or sets a value that indicates to define the width of the activation panel in Spreadsheet.
	* @Default {200}
	*/
	apWidth?: number;

	/**Gets or sets an object that indicates to customize the auto fill behavior in the Spreadsheet.
	*/
	autoFillSettings?: AutoFillSettings;

	/**Gets or sets an object that indicates to customize the chart behavior in the Spreadsheet.
	*/
	chartSettings?: ChartSettings;

	/**Gets or sets a value that defines the number of columns displayed in the sheet.
	* @Default {21}
	*/
	columnCount?: number;

	/**Gets or sets a value that indicates to define the common width for each column in the Spreadsheet.
	* @Default {60}
	*/
	columnWidth?: number;

	/**Gets or sets a value that indicates to render the spreadsheet with custom theme.
	*/
	cssClass?: string;

	/**Gets or sets a value that indicates whether to enable or disable context menu in the Spreadsheet.
	* @Default {true}
	*/
	enableContextMenu?: boolean;

	/**Gets or sets an object that indicates to customize the exporting behavior in Spreadsheet.
	*/
	exportSettings?: ExportSettings;

	/**Gets or sets an object that indicates to customize the format behavior in the Spreadsheet.
	*/
	formatSettings?: FormatSettings;

	/**Gets or sets an object that indicates to customize the import behavior in the Spreadsheet.
	*/
	importSettings?: ImportSettings;

	/**Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data (i.e.) in a language and culture specific to a particular country or region.
	* @Default {en-US}
	*/
	locale?: string;

	/**Gets or sets an object that indicates to customize the picture behavior in the Spreadsheet.
	*/
	pictureSettings?: PictureSettings;

	/**Gets or sets an object that indicates to customize the print option in Spreadsheet.
	*/
	printSettings?: PrintSettings;

	/**Gets or sets a value that indicates whether to define the number of rows to be displayed in the sheet.
	* @Default {20}
	*/
	rowCount?: number;

	/**Gets or sets a value that indicates to define the common height for each row in the sheet.
	* @Default {20}
	*/
	rowHeight?: number;

	/**Gets or sets an object that indicates to customize the scroll options in the Spreadsheet.
	*/
	scrollSettings?: ScrollSettings;

	/**Gets or sets an object that indicates to customize the selection options in the Spreadsheet.
	*/
	selectionSettings?: SelectionSettings;

	/**Gets or sets a value that indicates to define the number of sheets to be created at the initial load.
	* @Default {1}
	*/
	sheetCount?: number;

	/**Gets or sets an object that indicates to customize the sheet behavior in Spreadsheet.
	*/
	sheets?: Array<Sheets>;

	/**Gets or sets a value that indicates whether to show or hide ribbon in the Spreadsheet.
	* @Default {true}
	*/
	showRibbon?: boolean;

	/**This is used to set the number of undo-redo steps in the Spreadsheet.
	* @Default {20}
	*/
	undoRedoStep?: number;

	/**Define the username for the Spreadsheet which is displayed in comment.
	* @Default {User Name}
	*/
	userName?: string;

	/**Triggered for every action before its starts.*/
	actionBegin? (e: ActionBeginEventArgs): void;

	/**Triggered for every action complete.*/
	actionComplete? (e: ActionCompleteEventArgs): void;

	/**Triggered when the auto fill operation begins.*/
	autoFillBegin? (e: AutoFillBeginEventArgs): void;

	/**Triggered when the auto fill operation completes.*/
	autoFillComplete? (e: AutoFillCompleteEventArgs): void;

	/**Triggered before the cells to be formatted.*/
	beforeCellFormat? (e: BeforeCellFormatEventArgs): void;

	/**Triggered before the cell selection.*/
	beforeCellSelect? (e: BeforeCellSelectEventArgs): void;

	/**Triggered before the selected cells are dropped.*/
	beforeDrop? (e: BeforeDropEventArgs): void;

	/**Triggered before the contextmenu is open.*/
	beforeOpen? (e: BeforeOpenEventArgs): void;

	/**Triggered before the activation panel is open.*/
	beforePanelOpen? (e: BeforePanelOpenEventArgs): void;

	/**Triggered when click on sheet cell.*/
	cellClick? (e: CellClickEventArgs): void;

	/**Triggered when the cell is edited.*/
	cellEdit? (e: CellEditEventArgs): void;

	/**Triggered when mouse hover on cell in sheets.*/
	cellHover? (e: CellHoverEventArgs): void;

	/**Triggered when save the edited cell.*/
	cellSave? (e: CellSaveEventArgs): void;

	/**Triggered when click the contextmenu items.*/
	contextMenuClick? (e: ContextMenuClickEventArgs): void;

	/**Triggered when the selected cells are being dragged.*/
	drag? (e: DragEventArgs): void;

	/**Triggered when the selected cells are initiated to drag.*/
	dragStart? (e: DragStartEventArgs): void;

	/**Triggered when the selected cells are dropped.*/
	drop? (e: DropEventArgs): void;

	/**Triggered before the range editing starts.*/
	editRangeBegin? (e: EditRangeBeginEventArgs): void;

	/**Triggered after range editing completes.*/
	editRangeComplete? (e: EditRangeCompleteEventArgs): void;

	/**Triggered before the sheet is loaded.*/
	load? (e: LoadEventArgs): void;

	/**Triggered after the sheet is loaded.*/
	loadComplete? (e: LoadCompleteEventArgs): void;

	/**Triggered every click of the menu item.*/
	menuClick? (e: MenuClickEventArgs): void;

	/**Triggered when import sheet is failed to open.*/
	openFailure? (e: OpenFailureEventArgs): void;

	/**Triggered when pager item is clicked in the Spreadsheet.*/
	pagerClick? (e: PagerClickEventArgs): void;

	/**Triggered when click on the ribbon.*/
	ribbonClick? (e: RibbonClickEventArgs): void;

	/**Triggered when the chart series rendering.*/
	seriesRendering? (e: SeriesRenderingEventArgs): void;

	/**Triggered when click the ribbon tab.*/
	tabClick? (e: TabClickEventArgs): void;

	/**Triggered when select the ribbon tab.*/
	tabSelect? (e: TabSelectEventArgs): void;
}

export interface ActionBeginEventArgs {

	/**Returns the applied style format object.
	*/
	afterFormat?: any;

	/**Returns the applied style format object.
	*/
	beforeFormat?: any;

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the cell range.
	*/
	range?: Array<any>;

	/**Returns the action format.
	*/
	reqType?: string;

	/**Returns goto index while paging.
	*/
	gotoIdx?: number;

	/**Returns boolean value. If create new sheet it returns true.
	*/
	newSheet?: boolean;

	/**Return column name while sorting.
	*/
	columnName?: string;

	/**Returns selected columns while sorting or filtering begins.
	*/
	colSelected?: number;

	/**Returns sort direction while sort action begins.
	*/
	sortDirection?: string;
}

export interface ActionCompleteEventArgs {

	/**Returns Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the applied cell format object.
	*/
	selectedCell?: Array<any>|any;

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the request type.
	*/
	reqType?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface AutoFillBeginEventArgs {

	/**Returns auto fill begin cell range.
	*/
	dataRange?: Array<any>;

	/**Returns which direction drag the auto fill.
	*/
	direction?: string;

	/**Returns fill cells range.
	*/
	fillRange?: Array<any>;

	/**Returns the auto fill type.
	*/
	fillType?: string;

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface AutoFillCompleteEventArgs {

	/**Returns auto fill begin cell range.
	*/
	dataRange?: Array<any>;

	/**Returns which direction to drag the auto fill.
	*/
	direction?: string;

	/**Returns fill cells range.
	*/
	fillRange?: Array<any>;

	/**Returns the auto fill type.
	*/
	fillType?: string;

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface BeforeCellFormatEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the applied style format object.
	*/
	format?: any;

	/**Returns the selected cells.
	*/
	cells?: Array<any>|any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the name of the event.
	*/
	type?: string;
}

export interface BeforeCellSelectEventArgs {

	/**Returns the previous cell range.
	*/
	prevRange?: Array<any>;

	/**Returns the current cell range.
	*/
	currRange?: Array<any>;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface BeforeDropEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the current cell row and column index.
	*/
	currentCell?: any;

	/**Returns the drag cells range object.
	*/
	dragAndDropRange?: any;

	/**Returns the cell Overwriting alert option value.
	*/
	preventAlert?: boolean;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the target item.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface BeforeOpenEventArgs {

	/**Returns the target element.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface BeforePanelOpenEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the activation panel element.
	*/
	activationPanel?: any;

	/**Returns the range option value.
	*/
	range?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface CellClickEventArgs {

	/**Returns the click cell element.
	*/
	cell?: HTMLElement;

	/**Returns the column index of clicked cell.
	*/
	columnIndex?: number;

	/**Returns the row index of clicked cell.
	*/
	rowIndex?: number;

	/**Returns the column name of clicked cell.
	*/
	columnName?: string;

	/**Returns the column information.
	*/
	columnObject?: any;
}

export interface CellEditEventArgs {

	/**Returns the click cell element.
	*/
	cell?: HTMLElement;

	/**Returns the columnName of clicked cell.
	*/
	columnName?: string;

	/**Returns the column field information.
	*/
	columnObject?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface CellHoverEventArgs {

	/**Returns the target element.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface CellSaveEventArgs {

	/**Returns the save cell element.
	*/
	cell?: HTMLElement;

	/**Returns the columnName of clicked cell.
	*/
	columnName?: string;

	/**Returns the column field information.
	*/
	columnObject?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the cell previous value.
	*/
	pValue?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the cell value.
	*/
	value?: string;
}

export interface ContextMenuClickEventArgs {

	/**Returns target element Id.
	*/
	Id?: string;

	/**Returns the target element.
	*/
	element?: HTMLElement;

	/**Returns event information.
	*/
	event?: any;

	/**Returns target element and event information.
	*/
	events?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns target element parent Id.
	*/
	parentId?: string;

	/**Returns target element parent text.
	*/
	parentText?: string;

	/**Returns target element text.
	*/
	text?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface DragEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the current cell row and column index.
	*/
	currentCell?: any;

	/**Returns the drag cells range object.
	*/
	dragAndDropRange?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the target item.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface DragStartEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the current cell row and column index.
	*/
	currentCell?: any;

	/**Returns the drag cells range object.
	*/
	dragAndDropRange?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the target item.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface DropEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the current cell row and column index.
	*/
	currentCell?: any;

	/**Returns the drag cells range object.
	*/
	dragAndDropRange?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the target item.
	*/
	target?: HTMLElement;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface EditRangeBeginEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the range option value.
	*/
	range?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface EditRangeCompleteEventArgs {

	/**Returns the sheet index.
	*/
	sheetIdx?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the range option value.
	*/
	range?: any;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface LoadEventArgs {

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;

	/**Returns the active sheet index.
	*/
	sheetIndex?: number;
}

export interface LoadCompleteEventArgs {

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface MenuClickEventArgs {

	/**Returns menu click element.
	*/
	element?: HTMLElement;

	/**Returns the event information.
	*/
	event?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns target element parent Id.
	*/
	parentId?: string;

	/**Returns target element parent text.
	*/
	parentText?: string;

	/**Returns target element text.
	*/
	text?: string;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface OpenFailureEventArgs {

	/**Returns the failure type.
	*/
	failureType?: string;

	/**Returns the status index.
	*/
	status?: number;

	/**Returns the status in text.
	*/
	statusText?: string;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface PagerClickEventArgs {

	/**Returns the active sheet index.
	*/
	activeSheet?: number;

	/**Returns the new sheet index.
	*/
	gotoSheet?: number;

	/**Returns whether new sheet icon is clicked.
	*/
	newSheet?: boolean;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface RibbonClickEventArgs {

	/**Returns element Id.
	*/
	Id?: string;

	/**Returns target information.
	*/
	prop?: any;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns status.
	*/
	status?: boolean;

	/**Returns isChecked in boolean.
	*/
	isChecked?: boolean;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface SeriesRenderingEventArgs {

	/**Returns chart data and chart information.
	*/
	data?: any;

	/**Returns the chart model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface TabClickEventArgs {

	/**Returns the active tab index.
	*/
	activeIndex?: number;

	/**Returns active tab header element.
	*/
	activeHeader?: any;

	/**Returns previous active tab header element.
	*/
	prevActiveHeader?: any;

	/**Returns previous active tab index.
	*/
	prevActiveIndex?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface TabSelectEventArgs {

	/**Returns the active tab index.
	*/
	activeIndex?: number;

	/**Returns active tab header element.
	*/
	activeHeader?: any;

	/**Returns previous active tab header element.
	*/
	prevActiveHeader?: any;

	/**Returns previous active tab index.
	*/
	prevActiveIndex?: number;

	/**Returns the Spreadsheet model.
	*/
	model?: ej.Spreadsheet.Model;

	/**Returns the name of the event.
	*/
	type?: string;

	/**Returns the cancel option value.
	*/
	cancel?: boolean;
}

export interface AutoFillSettings {

	/**This property is used to set fillType unit in Spreadsheet. It has five types which are CopyCells, FillSeries, FillFormattingOnly, FillWithoutFormatting and FlashFill.
	* @Default {ej.Spreadsheet.AutoFillOptions.FillSeries}
	*/
	fillType?: ej.Spreadsheet.AutoFillOptions|string;

	/**Gets or sets a value that indicates to enable or disable auto fill options in the Spreadsheet.
	* @Default {true}
	*/
	showFillOptions?: boolean;
}

export interface ChartSettings {

	/**Gets or sets a value that defines the chart height in Spreadsheet.
	* @Default {220}
	*/
	height?: number;

	/**Gets or sets a value that defines the chart width in the Spreadsheet.
	* @Default {440}
	*/
	width?: number;
}

export interface ExportSettings {

	/**Gets or sets a value that indicates whether to enable or disable save feature in Spreadsheet. By enabling this feature, you can save existing Spreadsheet.
	* @Default {true}
	*/
	allowExporting?: boolean;

	/**Gets or sets a value that indicates to define csvUrl for export to csv format.
	* @Default {null}
	*/
	csvUrl?: string;

	/**Gets or sets a value that indicates to define excelUrl for export to excel format.Note: User must specify allowExporting true while use this property.
	* @Default {null}
	*/
	excelUrl?: string;

	/**Gets or sets a value that indicates to define password while export to excel format.
	* @Default {null}
	*/
	password?: string;
}

export interface FormatSettings {

	/**Gets or sets a value that indicates whether to enable or disable cell border feature in the Spreadsheet.
	* @Default {true}
	*/
	allowCellBorder?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable decimal places in the Spreadsheet.
	* @Default {true}
	*/
	allowDecimalPlaces?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable font family feature in Spreadsheet.
	* @Default {true}
	*/
	allowFontFamily?: boolean;
}

export interface ImportSettings {

	/**Sets import mapper to perform import feature in Spreadsheet.
	*/
	importMapper?: string;

	/**Sets import Url to access the online files in the Spreadsheet.
	*/
	importUrl?: string;

	/**Gets or sets a value that indicates to define password while importing in the Spreadsheet.
	*/
	password?: string;
}

export interface PictureSettings {

	/**Gets or sets a value that indicates whether to enable or disable picture feature in Spreadsheet. By enabling this, you can add pictures in Spreadsheet.
	* @Default {true}
	*/
	allowPictures?: boolean;

	/**Gets or sets a value that indicates to define height to picture in the Spreadsheet.
	* @Default {220}
	*/
	height?: number;

	/**Gets or sets a value that indicates to define width to picture in the Spreadsheet.
	* @Default {440}
	*/
	width?: number;
}

export interface PrintSettings {

	/**Gets or sets a value that indicates whether to enable or disable page setup support for printing in Spreadsheet.
	* @Default {true}
	*/
	allowPageSetup?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable page size support for printing in Spreadsheet.
	* @Default {false}
	*/
	allowPageSize?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable print feature in the Spreadsheet.
	* @Default {true}
	*/
	allowPrinting?: boolean;
}

export interface ScrollSettings {

	/**Gets or sets a value that indicates whether to enable or disable scrolling in Spreadsheet.
	* @Default {true}
	*/
	allowScrolling?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable sheet on demand. By enabling this, it render only the active sheet element while paging remaining sheets are created one by one.
	* @Default {false}
	*/
	allowSheetOnDemand?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable virtual scrolling feature in the Spreadsheet.
	* @Default {true}
	*/
	allowVirtualScrolling?: boolean;

	/**Gets or sets the value that indicates to define the height of spreadsheet.
	* @Default {550}
	*/
	height?: number|string;

	/**Gets or sets the value that indicates whether to enable or disable responsive mode in the Spreadsheet.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Gets or sets a value that indicates to set scroll mode in Spreadsheet. It has two scroll modes, Normal and Infinite.
	* @Default {ej.Spreadsheet.scrollMode.Infinite}
	*/
	scrollMode?: ej.Spreadsheet.scrollMode|string;

	/**Gets or sets the value that indicates to define the height off spreadsheet.
	* @Default {1200}
	*/
	width?: number|string;
}

export interface SelectionSettings {

	/**Gets or sets a value that indicates to define active cell in spreadsheet.
	*/
	activeCell?: string;

	/**Gets or sets a value that indicates to define animation time while selection in the Spreadsheet.
	* @Default {0.001}
	*/
	animationTime?: number;

	/**Gets or sets a value that indicates to enable or disable animation while selection.Note: allowSelection must be true while using this property.
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**Gets or sets a value that indicates to set selection type in Spreadsheet. It has three types which are Column, Row and default.
	* @Default {ej.Spreadsheet.SelectionType.Default}
	*/
	selectionType?: ej.Spreadsheet.SelectionType|string;

	/**Gets or sets a value that indicates to set selection unit in Spreadsheet. It has three types which are Single, Range and MultiRange.
	* @Default {ej.Spreadsheet.SelectionUnit.MultiRange}
	*/
	selectionUnit?: ej.Spreadsheet.SelectionUnit|string;
}

export interface SheetsRangeSettings {

	/**Gets or sets the data to render the Spreadsheet.
	*/
	dataSource?: any;

	/**Specifies the header styles for the datasource range in Spreadsheet.
	* @Default {null}
	*/
	headerStyles?: any;

	/**Specifies the primary key for the datasource in Spreadsheet.
	*/
	primaryKey?: string;

	/**Specifies the query for the datasource in Spreadsheet.
	* @Default {null}
	*/
	query?: any;

	/**Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
	* @Default {false}
	*/
	showHeader?: boolean;

	/**Specifies the start cell for the datasource range in Spreadsheet.
	* @Default {A1}
	*/
	startCell?: string;
}

export interface Sheets {

	/**Gets or sets a value that indicates to define column count in the Spreadsheet.
	* @Default {21}
	*/
	colCount?: number;

	/**Gets or sets a value that indicates to define column width in the Spreadsheet.
	* @Default {64}
	*/
	columnWidth?: number;

	/**Gets or sets the data to render the Spreadsheet.
	*/
	dataSource?: any;

	/**Gets or sets a value that indicates whether to enable or disable field as column header in the Spreadsheet.
	* @Default {false}
	*/
	fieldAsColumnHeader?: boolean;

	/**Specifies the header styles for the datasource range in Spreadsheet.
	* @Default {null}
	*/
	headerStyles?: any;

	/**Specifies the primary key for the datasource in Spreadsheet.
	*/
	primaryKey?: string;

	/**Specifies the query for the datasource in Spreadsheet.
	* @Default {null}
	*/
	query?: any;

	/**Specifies single range or multiple range settings for a sheet in Spreadsheet.
	*/
	rangeSettings?: Array<SheetsRangeSettings>;

	/**Gets or sets a value that indicates to define row count in the Spreadsheet.
	* @Default {20}
	*/
	rowCount?: number;

	/**Gets or sets a value that indicates whether to show or hide grid lines in the Spreadsheet.
	* @Default {true}
	*/
	showGridlines?: boolean;

	/**Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
	* @Default {false}
	*/
	showHeader?: boolean;

	/**Gets or sets a value that indicates whether to show or hide headings in the Spreadsheet.
	* @Default {true}
	*/
	showHeadings?: boolean;

	/**Specifies the start cell for the datasource range in Spreadsheet.
	* @Default {A1}
	*/
	startCell?: string;
}

enum AutoFillOptions{

	///Specifies the CopyCells property in AutoFillOptions.
	CopyCells,

	///Specifies the FillSeries property in AutoFillOptions.
	FillSeries,

	///Specifies the FillFormattingOnly property in AutoFillOptions.
	FillFormattingOnly,

	///Specifies the FillWithoutFormatting property in AutoFillOptions.
	FillWithoutFormatting,

	///Specifies the FlashFill property in AutoFillOptions.
	FlashFill
}


enum scrollMode{

	///To enable Infinite scroll mode for Spreadsheet.
	Infinite,

	///To enable Normal scroll mode for Spreadsheet.
	Normal
}


enum SelectionType{

	///To select only Column in Spreadsheet.
	Column,

	///To select only Row in Spreadsheet.
	Row,

	///To select both Column/Row in Spreadsheet.
	Default
}


enum SelectionUnit{

	///To enable Single selection in Spreadsheet.
	Single,

	///To enable Range selection in Spreadsheet.
	Range,

	///To enable MultiRange selection in Spreadsheet.
	MultiRange
}

}

}
declare module ej.olap {
	
class OlapChart extends ej.Widget {
	static fn: OlapChart;
	constructor(element: JQuery, options?: OlapChart.Model);
	constructor(element: Element, options?: OlapChart.Model);
	model:OlapChart.Model;
	defaults:OlapChart.Model;

	/** Perform an asynchronous HTTP (AJAX) request.
	* @returns {void}
	*/
	doAjaxPost(): void;

	/** Perform an asynchronous HTTP (FullPost) submit.
	* @returns {void}
	*/
	doPostBack(): void;

	/** Exports the OlapChart to an appropriate format based on the parameter passed.
	* @returns {void}
	*/
	exportOlapChart(): void;

	/** This function receives the JSON formatted datasource to render the OlapChart control.
	* @returns {void}
	*/
	renderChartFromJSON(): void;

	/** This function receives the update from service-end, which would be utilized for rendering the widget.
	* @returns {void}
	*/
	renderControlSuccess(): void;
}
export module OlapChart{

export interface Model {

	/**Specifies the CSS class to OlapChart to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Contains the serialized OlapReport at that instant, that is, current OlapReport.
	* @Default {â€œâ€}
	*/
	currentReport?: string;

	/**Object utilized to pass additional information between client-end and service-end.
	* @Default {{}}
	*/
	customObject?: any;

	/**Allows the user to enable 3D view of OlapChart.
	* @Default {false}
	*/
	enable3D?: boolean;

	/**Allows the user to enable OlapChartâ€™s responsiveness in the browser layout.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Allows the user to rotate the angle of OlapChart in 3D view.
	* @Default {0}
	*/
	rotation?: number;

	/**Allows the user to set custom name for the methods at service-end, communicated on AJAX post.
	* @Default {{}}
	*/
	serviceMethodSettings?: ServiceMethodSettings;

	/**Connects the service using the specified URL for any server updates.
	* @Default {â€œâ€}
	*/
	url?: string;

	/**Triggers when it reaches client-side after any AJAX request.*/
	afterServiceInvoke? (e: AfterServiceInvokeEventArgs): void;

	/**Triggers before any AJAX request is passed from OlapChart to service methods.*/
	beforeServiceInvoke? (e: BeforeServiceInvokeEventArgs): void;

	/**Triggers when drill up/down happens in OlapChart control.*/
	drillSuccess? (e: DrillSuccessEventArgs): void;

	/**Triggers when OlapChart widget completes all operations at client-side after any AJAX request.*/
	renderComplete? (e: RenderCompleteEventArgs): void;

	/**Triggers when any error occurred during AJAX request.*/
	renderFailure? (e: RenderFailureEventArgs): void;

	/**Triggers when OlapChart successfully reaches client-side after any AJAX request.*/
	renderSuccess? (e: RenderSuccessEventArgs): void;
}

export interface AfterServiceInvokeEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface BeforeServiceInvokeEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DrillSuccessEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderCompleteEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderFailureEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the error stack trace of the original exception.
	*/
	message?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderSuccessEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapChart.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ServiceMethodSettings {

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
	* @Default {Export}
	*/
	exportOlapChart?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for drilling up/down operation in OlapChart.
	* @Default {DrillChart}
	*/
	drillDown?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for initializing OlapChart.
	* @Default {InitializeChart}
	*/
	initialize?: string;
}
}

class OlapClient extends ej.Widget {
	static fn: OlapClient;
	constructor(element: JQuery, options?: OlapClient.Model);
	constructor(element: Element, options?: OlapClient.Model);
	model:OlapClient.Model;
	defaults:OlapClient.Model;

	/** Perform an asynchronous HTTP (AJAX) request.
	* @returns {void}
	*/
	doAjaxPost(): void;

	/** Perform an asynchronous HTTP (FullPost) submit.
	* @returns {void}
	*/
	doPostBack(): void;
}
export module OlapClient{

export interface Model {

	/**Allows the user to set the specific chart type for OlapChart.
	* @Default {ej.olap.OlapChart.ChartTypes.Column}
	*/
	chartType?: ej.olap.OlapChart.ChartTypes|string;

	/**Sets the mode to export the OLAP visualization components such as OlapChart and PivotGrid in OlapClient. Based on the option, either Chart or Grid or both gets exported.
	* @Default {ej.olap.OlapClient.ClientExportMode.ChartAndGrid}
	*/
	clientExportMode?: string;

	/**Specifies the CSS class to OlapClient to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Object utilized to pass additional information between client-end and service-end.
	* @Default {{}}
	*/
	customObject?: any;

	/**Allows the user to customize the widgets layout and appearance.
	* @Default {{}}
	*/
	displaySettings?: DisplaySettings;

	/**Allows the user to refresh the control on-demand and not during every UI operation.
	* @Default {false}
	*/
	enableDeferUpdate?: boolean;

	/**Enables/disables the visibility of measure group selector drop-down in Cube Browser.
	* @Default {false}
	*/
	enableMeasureGroups?: boolean;

	/**Sets the summary layout for PivotGrid. Following are the ways in which summary can be positioned: normal summary (bottom), top summary, no summary and excel-like summary.
	* @Default {ej.PivotGrid.Layout.Normal}
	*/
	gridLayout?: ej.PivotGrid.Layout|string;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Allows the user to set custom name for the methods at service-end, communicated during AJAX post.
	* @Default {{}}
	*/
	serviceMethodSettings?: ServiceMethodSettings;

	/**Sets the title for OlapClient widget.
	* @Default {null}
	*/
	title?: string;

	/**Connects the service using the specified URL for any server updates.
	* @Default {null}
	*/
	url?: string;

	/**Triggers when it reaches client-side after any AJAX request.*/
	afterServiceInvoke? (e: AfterServiceInvokeEventArgs): void;

	/**Triggers before any AJAX request is passed from OlapClient to service methods.*/
	beforeServiceInvoke? (e: BeforeServiceInvokeEventArgs): void;

	/**Triggers before rendering the OlapChart.*/
	chartLoad? (e: ChartLoadEventArgs): void;

	/**Triggers while we initiate loading of the widget.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when OlapClient widget completes all operations at client-end after any AJAX request.*/
	renderComplete? (e: RenderCompleteEventArgs): void;

	/**Triggers when any error occurred during AJAX request.*/
	renderFailure? (e: RenderFailureEventArgs): void;

	/**Triggers when OlapClient successfully reaches client-side after any AJAX request.*/
	renderSuccess? (e: RenderSuccessEventArgs): void;
}

export interface AfterServiceInvokeEventArgs {

	/**return the current action of OlapClient control.
	*/
	action?: string;

	/**return the custom object bounds with OlapClient control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapClient control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface BeforeServiceInvokeEventArgs {

	/**return the current action of OlapClient control.
	*/
	action?: string;

	/**return the custom object bounds with OlapClient control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapClient control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface ChartLoadEventArgs {

	/**return the current action of OlapChart control.
	*/
	action?: string;

	/**return the custom object bounds with OlapChart control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapChart control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapChart model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**returns the outer HTML of OlapClient component.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderCompleteEventArgs {

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the outer HTML of OlapClient control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderFailureEventArgs {

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the outer HTML of OlapClient control.
	*/
	element?: string;

	/**returns the error message with error code.
	*/
	message?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderSuccessEventArgs {

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the outer HTML of OlapClient control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapClient model.
	*/
	model?: ej.olap.OlapClient.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface DisplaySettings {

	/**Letâ€™s the user to customize the display of OlapChart and PivotGrid widgets, either in tab view or in tile view.
	* @Default {ej.olap.OlapClient.ControlPlacement.Tab}
	*/
	controlPlacement?: ej.olap.OlapClient.ControlPlacement|string;

	/**Letâ€™s the user to set either Chart or Grid as the start-up widget.
	* @Default {ej.olap.OlapClient.DefaultView.Grid}
	*/
	defaultView?: ej.olap.OlapClient.DefaultView|string;

	/**Enables/disables the full screen view of OlapChart and PivotGrid in OlapClient.
	* @Default {false}
	*/
	enableFullScreen?: boolean;

	/**Enhances the space for PivotGrid and OlapChart, by hiding Cube Browser and Axis Element Builder.
	* @Default {false}
	*/
	enableTogglePanel?: boolean;

	/**Allows the user to enable OlapClientâ€™s responsiveness in the browser layout.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Sets the display mode (Only Chart/Only Grid/Both) in OlapClient.
	* @Default {ej.olap.OlapClient.DisplayMode.ChartAndGrid}
	*/
	mode?: ej.olap.OlapClient.DisplayMode|string;
}

export interface ServiceMethodSettings {

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating the entire report and widget, while changing the Cube.
	* @Default {CubeChanged}
	*/
	cubeChanged?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
	* @Default {Export}
	*/
	exportOlapClient?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible to get the members, for the tree-view inside member-editor dialog.
	* @Default {FetchMemberTreeNodes}
	*/
	fetchMemberTreeNodes?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for fetching the report names from the database.
	* @Default {FetchReportListFromDB}
	*/
	fetchReportList?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating report while filtering members.
	* @Default {FilterElement}
	*/
	filterElement?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for initializing OlapClient.
	* @Default {InitializeClient}
	*/
	initialize?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for loading the report collection from the database.
	* @Default {LoadReportFromDB}
	*/
	loadReport?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for retrieving the MDX query for the current report.
	* @Default {GetMDXQuery}
	*/
	mdxQuery?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating the tree-view inside Cube Browser, while changing the measure group.
	* @Default {MeasureGroupChanged}
	*/
	measureGroupChanged?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible to get the child members, on tree-view node expansion.
	* @Default {MemberExpanded}
	*/
	memberExpand?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating report while dropping a node/SplitButton inside Axis Element Builder.
	* @Default {NodeDropped}
	*/
	nodeDropped?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating report while removing SplitButton from Axis Element Builder.
	* @Default {RemoveSplitButton}
	*/
	removeSplitButton?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for saving the report collection to database.
	* @Default {SaveReportToDB}
	*/
	saveReport?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for toggling the elements in row and column axes.
	* @Default {ToggleAxis}
	*/
	toggleAxis?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for any toolbar operation.
	* @Default {ToolbarOperations}
	*/
	toolbarServices?: string;

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for updating report collection.
	* @Default {UpdateReport}
	*/
	updateReport?: string;
}
}
module OlapChart
{
enum ChartTypes
{
//To render a Line type for OlapChart.
Line,
//To render a Spline type for OlapChart.
Spline,
//To render a Column type for OlapChart.
Column,
//To render a Area type for OlapChart.
Area,
//To render a SplineArea type for OlapChart.
SplineArea,
//To render a StepLine type for OlapChart.
StepLine,
//To render a StepArea type for OlapChart.
StepArea,
//To render a Pie type for OlapChart.
Pie,
//To render a Bar type for OlapChart.
Bar,
//To render a StackingArea type for OlapChart.
StackingArea,
//To render a StackingColumn type for OlapChart.
StackingColumn,
//To render a StackingBar type for OlapChart.
StackingBar,
//To render a Pyramid type for OlapChart.
Pyramid,
//To render a Funnel type for OlapChart.
Funnel,
//To render a Doughnut type for OlapChart.
Doughnut,
//To render a Scatter type for OlapChart.
Scatter,
//To render a Bubble type for OlapChart.
Bubble,
}
}
module OlapClient
{
enum ControlPlacement
{
//To display OlapChart and PivotGrid widgets in tab view.
Tab,
//To display OlapChart and PivotGrid widgets within the same view, one below the other.
Tile,
}
}
module OlapClient
{
enum DefaultView
{
//To set OlapChart as a default control in view when the OlapClient widget is loaded for the first time.
Chart,
//To set PivotGrid as a default control in view when the OlapClient widget is loaded for the first time.
Grid,
}
}
module OlapClient
{
enum DisplayMode
{
//To display only OlapChart widget.
ChartOnly,
//To display only PivotGrid widget.
GridOnly,
//To display both OlapChart and PivotGrid widgets.
ChartAndGrid,
}
}

class OlapGauge extends ej.Widget {
	static fn: OlapGauge;
	constructor(element: JQuery, options?: OlapGauge.Model);
	constructor(element: Element, options?: OlapGauge.Model);
	model:OlapGauge.Model;
	defaults:OlapGauge.Model;

	/** Perform an asynchronous HTTP (AJAX) request.
	* @returns {void}
	*/
	doAjaxPost(): void;

	/** This function is used to refresh the OlapGauge at client-side itself.
	* @returns {void}
	*/
	refresh(): void;

	/** This function removes the KPI related images from OlapGauge.
	* @returns {void}
	*/
	removeImg(): void;

	/** This function receives the JSON formatted datasource to render the OlapGauge control.
	* @returns {void}
	*/
	renderControlFromJSON(): void;
}
export module OlapGauge{

export interface Model {

	/**Sets the number of column count to arrange the OlapGauge's.
	* @Default {0}
	*/
	columnsCount?: number;

	/**Specify the CSS class to OlapGauge to achieve custom theme.
	* @Default {â€œâ€}
	*/
	cssClass?: string;

	/**Object utilized to pass additional information between client-end and service-end.
	* @Default {{}}
	*/
	customObject?: any;

	/**Enables/disables tooltip visibility in OlapGauge.
	* @Default {false}
	*/
	enableTooltip?: boolean;

	/**Allows the user to enable OlapGaugeâ€™s responsiveness in the browser layout.
	* @Default {false}
	*/
	isResponsive?: boolean;

	/**Allows the user to change the format of the label values in OlapGauge.
	* @Default {ej.olap.OlapGauge.NumberFormat.Default}
	*/
	labelFormatSettings?: ej.olap.OlapGauge.NumberFormat|string;

	/**Allows the user to set the localized language for the widget.
	* @Default {en-US}
	*/
	locale?: string;

	/**Sets the number of row count to arrange the OlapGauge's.
	* @Default {0}
	*/
	rowsCount?: number;

	/**Sets the scale values such as pointers, indicators, etc... for OlapGauge.
	* @Default {{}}
	*/
	scales?: any;

	/**Allows the user to set the custom name for the methods at service-end, communicated during AJAX post.
	* @Default {{}}
	*/
	serviceMethodSettings?: ServiceMethodSettings;

	/**Enables/disables the header labels in OlapGauge.
	* @Default {true}
	*/
	showHeaderLabel?: boolean;

	/**Connects the service using the specified URL for any server updates.
	* @Default {â€œâ€}
	*/
	url?: string;

	/**Triggers when it reaches client-side after any AJAX request.*/
	afterServiceInvoke? (e: AfterServiceInvokeEventArgs): void;

	/**Triggers before any AJAX request is passed from OlapGauge to service methods.*/
	beforeServiceInvoke? (e: BeforeServiceInvokeEventArgs): void;

	/**Triggers when OlapGauge started loading at client-side.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when OlapGauge widget completes all operations at client-side after any AJAX request.*/
	renderComplete? (e: RenderCompleteEventArgs): void;

	/**Triggers when any error occurred during AJAX request.*/
	renderFailure? (e: RenderFailureEventArgs): void;

	/**Triggers when OlapGauge successfully reaches client-side after any AJAX request.*/
	renderSuccess? (e: RenderSuccessEventArgs): void;
}

export interface AfterServiceInvokeEventArgs {

	/**return the current action of OlapGauge control.
	*/
	action?: string;

	/**return the custom object bounds with OlapGauge control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapGauge control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface BeforeServiceInvokeEventArgs {

	/**return the current action of OlapGauge control.
	*/
	action?: string;

	/**return the custom object bounds with OlapGauge control.
	*/
	customObject?: any;

	/**return the outer HTML of OlapGauge control.
	*/
	element?: string;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderCompleteEventArgs {

	/**returns the outer HTML of OlapGauge control.
	*/
	element?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface RenderFailureEventArgs {

	/**returns the outer HTML of OlapGauge control.
	*/
	element?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**returns the error message with error code.
	*/
	message?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;

	/**returns the JSON formatted response while error occurs.
	*/
	responseJSON?: any;
}

export interface RenderSuccessEventArgs {

	/**returns the outer HTML of OlapGauge control.
	*/
	element?: string;

	/**returns the custom object bounded with the control.
	*/
	customObject?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the OlapGauge model.
	*/
	model?: ej.olap.OlapGauge.Model;

	/**returns the name of the event.
	*/
	type?: string;
}

export interface LabelFormatSettings {

	/**Allows the user to change the number format of the label values in OlapGauge.
	* @Default {ej.olap.OlapGauge.NumberFormat.Default}
	*/
	numberFormat?: ej.olap.OlapGauge.NumberFormat|string;

	/**Allows you to change the position of a digit on the right-hand side of the decimal point for label value.
	* @Default {5}
	*/
	decimalPlaces?: number;

	/**Allows you to add a text at the beginning of the label.
	*/
	prefixText?: string;

	/**Allows you to add text at the end of the label.
	*/
	suffixText?: string;
}

export interface ServiceMethodSettings {

	/**Allows the user to set the custom name for the service method thatâ€™s responsible for initializing OlapGauge.
	* @Default {InitializeGauge}
	*/
	initialize?: string;
}
}
module OlapGauge
{
enum NumberFormat
{
//To set default format for label values.
Default,
//To set currency format for label values.
Currency,
//To set percentage format for label values.
Percentage,
//To set fraction format for label values.
Fraction,
//To set scientific format for label values.
Scientific,
//To set text format for label values.
Text,
//To set notation format for label values.
Notation,
}
}

}
declare module ej.datavisualization {
	
class LinearGauge extends ej.Widget {
	static fn: LinearGauge;
	constructor(element: JQuery, options?: LinearGauge.Model);
	constructor(element: Element, options?: LinearGauge.Model);
	model:LinearGauge.Model;
	defaults:LinearGauge.Model;

	/** destroy the linear gauge all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To export Image
	* @returns {void}
	*/
	exportImage(): void;

	/** To get Bar Distance From Scale in number
	* @returns {void}
	*/
	getBarDistanceFromScale(): void;

	/** To get Bar Pointer Value in number
	* @returns {void}
	*/
	getBarPointerValue(): void;

	/** To get Bar Width in number
	* @returns {void}
	*/
	getBarWidth(): void;

	/** To get CustomLabel Angle in number
	* @returns {void}
	*/
	getCustomLabelAngle(): void;

	/** To get CustomLabel Value in string
	* @returns {void}
	*/
	getCustomLabelValue(): void;

	/** To get Label Angle in number
	* @returns {void}
	*/
	getLabelAngle(): void;

	/** To get LabelPlacement in number
	* @returns {void}
	*/
	getLabelPlacement(): void;

	/** To get LabelStyle in number
	* @returns {void}
	*/
	getLabelStyle(): void;

	/** To get Label XDistance From Scale in number
	* @returns {void}
	*/
	getLabelXDistanceFromScale(): void;

	/** To get PointerValue in number
	* @returns {void}
	*/
	getLabelYDistanceFromScale(): void;

	/** To get Major Interval Value in number
	* @returns {void}
	*/
	getMajorIntervalValue(): void;

	/** To get MarkerStyle in number
	* @returns {void}
	*/
	getMarkerStyle(): void;

	/** To get Maximum Value in number
	* @returns {void}
	*/
	getMaximumValue(): void;

	/** To get PointerValue in number
	* @returns {void}
	*/
	getMinimumValue(): void;

	/** To get Minor Interval Value in number
	* @returns {void}
	*/
	getMinorIntervalValue(): void;

	/** To get Pointer Distance From Scale in number
	* @returns {void}
	*/
	getPointerDistanceFromScale(): void;

	/** To get PointerHeight in number
	* @returns {void}
	*/
	getPointerHeight(): void;

	/** To get Pointer Placement in String
	* @returns {void}
	*/
	getPointerPlacement(): void;

	/** To get PointerValue in number
	* @returns {void}
	*/
	getPointerValue(): void;

	/** To get PointerWidth in number
	* @returns {void}
	*/
	getPointerWidth(): void;

	/** To get Range Border Width in number
	* @returns {void}
	*/
	getRangeBorderWidth(): void;

	/** To get Range Distance From Scale in number
	* @returns {void}
	*/
	getRangeDistanceFromScale(): void;

	/** To get Range End Value in number
	* @returns {void}
	*/
	getRangeEndValue(): void;

	/** To get Range End Width in number
	* @returns {void}
	*/
	getRangeEndWidth(): void;

	/** To get Range Position in number
	* @returns {void}
	*/
	getRangePosition(): void;

	/** To get Range Start Value in number
	* @returns {void}
	*/
	getRangeStartValue(): void;

	/** To get Range Start Width in number
	* @returns {void}
	*/
	getRangeStartWidth(): void;

	/** To get ScaleBarLength in number
	* @returns {void}
	*/
	getScaleBarLength(): void;

	/** To get Scale Bar Size in number
	* @returns {void}
	*/
	getScaleBarSize(): void;

	/** To get Scale Border Width in number
	* @returns {void}
	*/
	getScaleBorderWidth(): void;

	/** To get Scale Direction in number
	* @returns {void}
	*/
	getScaleDirection(): void;

	/** To get Scale Location in object
	* @returns {void}
	*/
	getScaleLocation(): void;

	/** To get Scale Style in string
	* @returns {void}
	*/
	getScaleStyle(): void;

	/** To get Tick Angle in number
	* @returns {void}
	*/
	getTickAngle(): void;

	/** To get Tick Height in number
	* @returns {void}
	*/
	getTickHeight(): void;

	/** To get getTickPlacement in number
	* @returns {void}
	*/
	getTickPlacement(): void;

	/** To get Tick Style in string
	* @returns {void}
	*/
	getTickStyle(): void;

	/** To get Tick Width in number
	* @returns {void}
	*/
	getTickWidth(): void;

	/** To get get Tick XDistance From Scale in number
	* @returns {void}
	*/
	getTickXDistanceFromScale(): void;

	/** To get Tick YDistance From Scale in number
	* @returns {void}
	*/
	getTickYDistanceFromScale(): void;

	/** Specifies the scales.
	* @returns {void}
	*/
	scales(): void;

	/** To set setBarDistanceFromScale
	* @returns {void}
	*/
	setBarDistanceFromScale(): void;

	/** To set setBarPointerValue
	* @returns {void}
	*/
	setBarPointerValue(): void;

	/** To set setBarWidth
	* @returns {void}
	*/
	setBarWidth(): void;

	/** To set setCustomLabelAngle
	* @returns {void}
	*/
	setCustomLabelAngle(): void;

	/** To set setCustomLabelValue
	* @returns {void}
	*/
	setCustomLabelValue(): void;

	/** To set setLabelAngle
	* @returns {void}
	*/
	setLabelAngle(): void;

	/** To set setLabelPlacement
	* @returns {void}
	*/
	setLabelPlacement(): void;

	/** To set setLabelStyle
	* @returns {void}
	*/
	setLabelStyle(): void;

	/** To set setLabelXDistanceFromScale
	* @returns {void}
	*/
	setLabelXDistanceFromScale(): void;

	/** To set setLabelYDistanceFromScale
	* @returns {void}
	*/
	setLabelYDistanceFromScale(): void;

	/** To set setMajorIntervalValue
	* @returns {void}
	*/
	setMajorIntervalValue(): void;

	/** To set setMarkerStyle
	* @returns {void}
	*/
	setMarkerStyle(): void;

	/** To set setMaximumValue
	* @returns {void}
	*/
	setMaximumValue(): void;

	/** To set setMinimumValue
	* @returns {void}
	*/
	setMinimumValue(): void;

	/** To set setMinorIntervalValue
	* @returns {void}
	*/
	setMinorIntervalValue(): void;

	/** To set setPointerDistanceFromScale
	* @returns {void}
	*/
	setPointerDistanceFromScale(): void;

	/** To set PointerHeight
	* @returns {void}
	*/
	setPointerHeight(): void;

	/** To set setPointerPlacement
	* @returns {void}
	*/
	setPointerPlacement(): void;

	/** To set PointerValue
	* @returns {void}
	*/
	setPointerValue(): void;

	/** To set PointerWidth
	* @returns {void}
	*/
	setPointerWidth(): void;

	/** To set setRangeBorderWidth
	* @returns {void}
	*/
	setRangeBorderWidth(): void;

	/** To set setRangeDistanceFromScale
	* @returns {void}
	*/
	setRangeDistanceFromScale(): void;

	/** To set setRangeEndValue
	* @returns {void}
	*/
	setRangeEndValue(): void;

	/** To set setRangeEndWidth
	* @returns {void}
	*/
	setRangeEndWidth(): void;

	/** To set setRangePosition
	* @returns {void}
	*/
	setRangePosition(): void;

	/** To set setRangeStartValue
	* @returns {void}
	*/
	setRangeStartValue(): void;

	/** To set setRangeStartWidth
	* @returns {void}
	*/
	setRangeStartWidth(): void;

	/** To set setScaleBarLength
	* @returns {void}
	*/
	setScaleBarLength(): void;

	/** To set setScaleBarSize
	* @returns {void}
	*/
	setScaleBarSize(): void;

	/** To set setScaleBorderWidth
	* @returns {void}
	*/
	setScaleBorderWidth(): void;

	/** To set setScaleDirection
	* @returns {void}
	*/
	setScaleDirection(): void;

	/** To set setScaleLocation
	* @returns {void}
	*/
	setScaleLocation(): void;

	/** To set setScaleStyle
	* @returns {void}
	*/
	setScaleStyle(): void;

	/** To set setTickAngle
	* @returns {void}
	*/
	setTickAngle(): void;

	/** To set setTickHeight
	* @returns {void}
	*/
	setTickHeight(): void;

	/** To set setTickPlacement
	* @returns {void}
	*/
	setTickPlacement(): void;

	/** To set setTickStyle
	* @returns {void}
	*/
	setTickStyle(): void;

	/** To set setTickWidth
	* @returns {void}
	*/
	setTickWidth(): void;

	/** To set setTickXDistanceFromScale
	* @returns {void}
	*/
	setTickXDistanceFromScale(): void;

	/** To set setTickYDistanceFromScale
	* @returns {void}
	*/
	setTickYDistanceFromScale(): void;
}
export module LinearGauge{

export interface Model {

	/**Specifies the animationSpeed
	* @Default {500}
	*/
	animationSpeed?: number;

	/**Specifies the backgroundColor for Linear gauge.
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the borderColor for Linear gauge.
	* @Default {null}
	*/
	borderColor?: string;

	/**Specifies the animate state
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Specifies the animate state for marker pointer
	* @Default {true}
	*/
	enableMarkerPointerAnimation?: boolean;

	/**Specifies the can resize state.
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Specify frame of linear gauge
	* @Default {null}
	*/
	frame?: Frame;

	/**Specifies the height of Linear gauge.
	* @Default {400}
	*/
	height?: number;

	/**Specifies the labelColor for Linear gauge.
	* @Default {null}
	*/
	labelColor?: string;

	/**Specifies the maximum value of Linear gauge.
	* @Default {100}
	*/
	maximum?: number;

	/**Specifies the minimum value of Linear gauge.
	* @Default {0}
	*/
	minimum?: number;

	/**Specifies the orientation for Linear gauge.
	* @Default {Vertical}
	*/
	orientation?: string;

	/**Specify labelPosition value of Linear gauge See OuterCustomLabelPosition
	* @Default {bottom}
	*/
	outerCustomLabelPosition?: ej.datavisualization.LinearGauge.OuterCustomLabelPosition|string;

	/**Specifies the pointerGradient1 for Linear gauge.
	* @Default {null}
	*/
	pointerGradient1?: any;

	/**Specifies the pointerGradient2 for Linear gauge.
	* @Default {null}
	*/
	pointerGradient2?: any;

	/**Specifies the read only state.
	* @Default {true}
	*/
	readOnly?: boolean;

	/**Specifies the scales
	* @Default {null}
	*/
	scales?: Scales;

	/**Specifies the theme for Linear gauge. See LinearGauge.Themes
	* @Default {flatlight}
	*/
	theme?: ej.datavisualization.LinearGauge.Themes|string;

	/**Specifies the tick Color for Linear gauge.
	* @Default {null}
	*/
	tickColor?: string;

	/**Specify tooltip options of linear gauge
	* @Default {false}
	*/
	tooltip?: Tooltip;

	/**Specifies the value of the Gauge.
	* @Default {0}
	*/
	value?: number;

	/**Specifies the width of Linear gauge.
	* @Default {150}
	*/
	width?: number;

	/**Triggers while the bar pointer are being drawn on the gauge.*/
	drawBarPointers? (e: DrawBarPointersEventArgs): void;

	/**Triggers while the customLabel are being drawn on the gauge.*/
	drawCustomLabel? (e: DrawCustomLabelEventArgs): void;

	/**Triggers while the Indicator are being drawn on the gauge.*/
	drawIndicators? (e: DrawIndicatorsEventArgs): void;

	/**Triggers while the label are being drawn on the gauge.*/
	drawLabels? (e: DrawLabelsEventArgs): void;

	/**Triggers while the marker are being drawn on the gauge.*/
	drawMarkerPointers? (e: DrawMarkerPointersEventArgs): void;

	/**Triggers while the range are being drawn on the gauge.*/
	drawRange? (e: DrawRangeEventArgs): void;

	/**Triggers while the ticks are being drawn on the gauge.*/
	drawTicks? (e: DrawTicksEventArgs): void;

	/**Triggers when the gauge is initialized.*/
	init? (e: InitEventArgs): void;

	/**Triggers while the gauge start to Load.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when the left mouse button is clicked.*/
	mouseClick? (e: MouseClickEventArgs): void;

	/**Triggers when clicking and dragging the mouse pointer over the gauge pointer.*/
	mouseClickMove? (e: MouseClickMoveEventArgs): void;

	/**Triggers when the mouse click is released.*/
	mouseClickUp? (e: MouseClickUpEventArgs): void;

	/**Triggers while the rendering of the gauge completed.*/
	renderComplete? (e: RenderCompleteEventArgs): void;
}

export interface DrawBarPointersEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the pointer
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the current Bar pointer element.
	*/
	barElement?: any;

	/**returns the index of the bar pointer.
	*/
	barPointerIndex?: number;

	/**returns the value of the bar pointer.
	*/
	PointerValue?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawCustomLabelEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the customLabel
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the customLabel style
	*/
	style?: any;

	/**returns the current customLabel element.
	*/
	customLabelElement?: any;

	/**returns the index of the customLabel.
	*/
	customLabelIndex?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawIndicatorsEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the Indicator
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the Indicator style
	*/
	style?: string;

	/**returns the current Indicator element.
	*/
	IndicatorElement?: any;

	/**returns the index of the Indicator.
	*/
	IndicatorIndex?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawLabelsEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the label
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the label belongs.
	*/
	scaleIndex?: number;

	/**returns the label style
	*/
	style?: string;

	/**returns the angle of the label.
	*/
	angle?: number;

	/**returns the current label element.
	*/
	element?: any;

	/**returns the index of the label.
	*/
	index?: number;

	/**returns the label value of the label.
	*/
	value?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawMarkerPointersEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the pointer
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the ticks style
	*/
	style?: string;

	/**returns the current marker pointer element.
	*/
	markerElement?: any;

	/**returns the index of the marker pointer.
	*/
	markerPointerIndex?: number;

	/**returns the value of the marker pointer.
	*/
	pointerValue?: number;

	/**returns the angle of the marker pointer.
	*/
	pointerAngle?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawRangeEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the range
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the range style
	*/
	style?: string;

	/**returns the current range element.
	*/
	rangeElement?: any;

	/**returns the index of the range.
	*/
	rangeIndex?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface DrawTicksEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the ticks
	*/
	position?: any;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the tick belongs.
	*/
	scaleIndex?: number;

	/**returns the ticks style
	*/
	style?: string;

	/**returns the angle of the tick.
	*/
	angle?: number;

	/**returns the current tick element.
	*/
	element?: any;

	/**returns the index of the tick.
	*/
	index?: number;

	/**returns the tick value of the tick.
	*/
	value?: number;

	/**returns the name of the event
	*/
	type?: any;
}

export interface InitEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the entire scale element.
	*/
	scaleElement?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the entire scale element.
	*/
	scaleElement?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the name of the event
	*/
	type?: any;
}

export interface MouseClickEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element* @param {Object} args.markerpointer returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	markerpointerindex?: number;

	/**returns the pointer element.
	*/
	markerpointerelement?: any;

	/**returns the value of the pointer.
	*/
	markerpointervalue?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface MouseClickMoveEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	index?: number;

	/**returns the pointer element.
	*/
	element?: any;

	/**returns the value of the pointer.
	*/
	value?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface MouseClickUpEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element* @param {Object} args.markerpointer returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	markerpointerIndex?: number;

	/**returns the pointer element.
	*/
	markerpointerElement?: any;

	/**returns the value of the pointer.
	*/
	markerpointerValue?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface RenderCompleteEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the entire scale element.
	*/
	scaleElement?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the name of the event
	*/
	type?: any;
}

export interface Frame {

	/**Specifies the frame background image url of linear gauge
	* @Default {null}
	*/
	backgroundImageUrl?: string;

	/**Specifies the frame InnerWidth
	* @Default {8}
	*/
	innerWidth?: number;

	/**Specifies the frame OuterWidth
	* @Default {12}
	*/
	outerWidth?: number;
}

export interface ScalesBarPointersBorder {

	/**Specifies the border Color of bar pointer
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border Width of bar pointer
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesBarPointers {

	/**Specifies the backgroundColor of bar pointer
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the border of bar pointer
	* @Default {null}
	*/
	border?: ScalesBarPointersBorder;

	/**Specifies the distanceFromScale of bar pointer
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specifies the scaleBar Gradient of bar pointer
	* @Default {null}
	*/
	gradients?: any;

	/**Specifies the opacity of bar pointer
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the value of bar pointer
	* @Default {null}
	*/
	value?: number;

	/**Specifies the pointer Width of bar pointer
	* @Default {width=30}
	*/
	width?: number;
}

export interface ScalesBorder {

	/**Specifies the border color of the Scale.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border width of the Scale.
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesCustomLabelsFont {

	/**Specifies the fontFamily in customLabels
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle in customLabels. See FontStyle
	* @Default {Bold}
	*/
	fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

	/**Specifies the font size in customLabels
	* @Default {11px}
	*/
	size?: string;
}

export interface ScalesCustomLabelsPosition {

	/**Specifies the position x in customLabels
	* @Default {0}
	*/
	x?: number;

	/**Specifies the y in customLabels
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesCustomLabels {

	/**Specifies the label Color in customLabels
	* @Default {null}
	*/
	color?: number;

	/**Specifies the font in customLabels
	* @Default {null}
	*/
	font?: ScalesCustomLabelsFont;

	/**Specifies the opacity in customLabels
	* @Default {0}
	*/
	opacity?: string;

	/**Specifies the position in customLabels
	* @Default {null}
	*/
	position?: ScalesCustomLabelsPosition;

	/**Specifies the positionType in customLabels.See CustomLabelPositionType
	* @Default {null}
	*/
	positionType?: any;

	/**Specifies the textAngle in customLabels
	* @Default {0}
	*/
	textAngle?: number;

	/**Specifies the label Value in customLabels
	*/
	value?: string;
}

export interface ScalesIndicatorsBorder {

	/**Specifies the border Color in bar indicators
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border Width in bar indicators
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesIndicatorsFont {

	/**Specifies the fontFamily of font in bar indicators
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of font in bar indicators. See FontStyle
	* @Default {ej.datavisualization.LinearGauge.FontStyle.Bold}
	*/
	fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

	/**Specifies the size of font in bar indicators
	* @Default {11px}
	*/
	size?: string;
}

export interface ScalesIndicatorsPosition {

	/**Specifies the x position in bar indicators
	* @Default {0}
	*/
	x?: number;

	/**Specifies the y position in bar indicators
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesIndicatorsStateRanges {

	/**Specifies the backgroundColor in bar indicators state ranges
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the borderColor in bar indicators state ranges
	* @Default {null}
	*/
	borderColor?: string;

	/**Specifies the endValue in bar indicators state ranges
	* @Default {60}
	*/
	endValue?: number;

	/**Specifies the startValue in bar indicators state ranges
	* @Default {50}
	*/
	startValue?: number;

	/**Specifies the text in bar indicators state ranges
	*/
	text?: string;

	/**Specifies the textColor in bar indicators state ranges
	* @Default {null}
	*/
	textColor?: string;
}

export interface ScalesIndicatorsTextLocation {

	/**Specifies the textLocation position in bar indicators
	* @Default {0}
	*/
	x?: number;

	/**Specifies the Y position in bar indicators
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesIndicators {

	/**Specifies the backgroundColor in bar indicators
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the border in bar indicators
	* @Default {null}
	*/
	border?: ScalesIndicatorsBorder;

	/**Specifies the font of bar indicators
	* @Default {null}
	*/
	font?: ScalesIndicatorsFont;

	/**Specifies the indicator Height of bar indicators
	* @Default {30}
	*/
	height?: number;

	/**Specifies the opacity in bar indicators
	* @Default {NaN}
	*/
	opacity?: number;

	/**Specifies the position in bar indicators
	* @Default {null}
	*/
	position?: ScalesIndicatorsPosition;

	/**Specifies the state ranges in bar indicators
	* @Default {Array}
	*/
	stateRanges?: Array<ScalesIndicatorsStateRanges>;

	/**Specifies the textLocation in bar indicators
	* @Default {null}
	*/
	textLocation?: ScalesIndicatorsTextLocation;

	/**Specifies the indicator Style of font in bar indicators
	* @Default {ej.datavisualization.LinearGauge.IndicatorType.Rectangle}
	*/
	type?: ej.datavisualization.LinearGauge.IndicatorTypes|string;

	/**Specifies the indicator Width in bar indicators
	* @Default {30}
	*/
	width?: number;
}

export interface ScalesLabelsDistanceFromScale {

	/**Specifies the xDistanceFromScale of labels.
	* @Default {-10}
	*/
	x?: number;

	/**Specifies the yDistanceFromScale of labels.
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesLabelsFont {

	/**Specifies the fontFamily of font.
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of font.See FontStyle
	* @Default {ej.datavisualization.LinearGauge.FontStyle.Bold}
	*/
	fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

	/**Specifies the size of font.
	* @Default {11px}
	*/
	size?: string;
}

export interface ScalesLabels {

	/**Specifies the angle of labels.
	* @Default {0}
	*/
	angle?: number;

	/**Specifies the DistanceFromScale of labels.
	* @Default {null}
	*/
	distanceFromScale?: ScalesLabelsDistanceFromScale;

	/**Specifies the font of labels.
	* @Default {null}
	*/
	font?: ScalesLabelsFont;

	/**need to includeFirstValue.
	* @Default {true}
	*/
	includeFirstValue?: boolean;

	/**Specifies the opacity of label.
	* @Default {0}
	*/
	opacity?: number;

	/**Specifies the label Placement of label. See LabelPlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

	/**Specifies the textColor of font.
	* @Default {null}
	*/
	textColor?: string;

	/**Specifies the label Style of label. See LabelType
	* @Default {ej.datavisualization.LinearGauge.LabelType.Major}
	*/
	type?: ej.datavisualization.LinearGauge.ScaleType|string;

	/**Specifies the unitText of label.
	*/
	unitText?: string;

	/**Specifies the unitText Position of label.See UnitTextPlacement
	* @Default {Back}
	*/
	unitTextPlacement?: ej.datavisualization.LinearGauge.UnitTextPlacement|string;
}

export interface ScalesMarkerPointersBorder {

	/**Specifies the border color of marker pointer
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border of marker pointer
	* @Default {number}
	*/
	width?: number;
}

export interface ScalesMarkerPointers {

	/**Specifies the backgroundColor of marker pointer
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the border of marker pointer
	* @Default {null}
	*/
	border?: ScalesMarkerPointersBorder;

	/**Specifies the distanceFromScale of marker pointer
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specifies the pointer Gradient of marker pointer
	* @Default {null}
	*/
	gradients?: any;

	/**Specifies the pointer Length of marker pointer
	* @Default {30}
	*/
	length?: number;

	/**Specifies the opacity of marker pointer
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the pointer Placement of marker pointer See PointerPlacement
	* @Default {Far}
	*/
	placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

	/**Specifies the marker Style of marker pointerSee MarkerType
	* @Default {Triangle}
	*/
	type?: ej.datavisualization.LinearGauge.MarkerType|string;

	/**Specifies the value of marker pointer
	* @Default {null}
	*/
	value?: number;

	/**Specifies the pointer Width of marker pointer
	* @Default {30}
	*/
	width?: number;
}

export interface ScalesPosition {

	/**Specifies the Horizontal position
	* @Default {50}
	*/
	x?: number;

	/**Specifies the vertical position
	* @Default {50}
	*/
	y?: number;
}

export interface ScalesRangesBorder {

	/**Specifies the border color in the ranges.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border width in the ranges.
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesRanges {

	/**Specifies the backgroundColor in the ranges.
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the border in the ranges.
	* @Default {null}
	*/
	border?: ScalesRangesBorder;

	/**Specifies the distanceFromScale in the ranges.
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specifies the endValue in the ranges.
	* @Default {60}
	*/
	endValue?: number;

	/**Specifies the endWidth in the ranges.
	* @Default {10}
	*/
	endWidth?: number;

	/**Specifies the range Gradient in the ranges.
	* @Default {null}
	*/
	gradients?: any;

	/**Specifies the opacity in the ranges.
	* @Default {null}
	*/
	opacity?: number;

	/**Specifies the range Position in the ranges. See RangePlacement
	* @Default {Center}
	*/
	placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

	/**Specifies the startValue in the ranges.
	* @Default {20}
	*/
	startValue?: number;

	/**Specifies the startWidth in the ranges.
	* @Default {10}
	*/
	startWidth?: number;
}

export interface ScalesTicksDistanceFromScale {

	/**Specifies the xDistanceFromScale in the tick.
	* @Default {0}
	*/
	x?: number;

	/**Specifies the yDistanceFromScale in the tick.
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesTicks {

	/**Specifies the angle in the tick.
	* @Default {0}
	*/
	angle?: number;

	/**Specifies the tick Color in the tick.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the DistanceFromScale in the tick.
	* @Default {null}
	*/
	distanceFromScale?: ScalesTicksDistanceFromScale;

	/**Specifies the tick Height in the tick.
	* @Default {10}
	*/
	height?: number;

	/**Specifies the opacity in the tick.
	* @Default {0}
	*/
	opacity?: number;

	/**Specifies the tick Placement in the tick. See TickPlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

	/**Specifies the tick Style in the tick. See TickType
	* @Default {MajorInterval}
	*/
	type?: ej.datavisualization.LinearGauge.TicksType|string;

	/**Specifies the tick Width in the tick.
	* @Default {3}
	*/
	width?: number;
}

export interface Scales {

	/**Specifies the backgroundColor of the Scale.
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specifies the scaleBar Gradient of bar pointer
	* @Default {Array}
	*/
	barPointers?: Array<ScalesBarPointers>;

	/**Specifies the border of the Scale.
	* @Default {null}
	*/
	border?: ScalesBorder;

	/**Specifies the customLabel
	* @Default {Array}
	*/
	customLabels?: Array<ScalesCustomLabels>;

	/**Specifies the scale Direction of the Scale. See Directions
	* @Default {CounterClockwise}
	*/
	direction?: ej.datavisualization.LinearGauge.Direction|string;

	/**Specifies the indicator
	* @Default {Array}
	*/
	indicators?: Array<ScalesIndicators>;

	/**Specifies the labels.
	* @Default {Array}
	*/
	labels?: Array<ScalesLabels>;

	/**Specifies the scaleBar Length.
	* @Default {290}
	*/
	length?: number;

	/**Specifies the majorIntervalValue of the Scale.
	* @Default {10}
	*/
	majorIntervalValue?: number;

	/**Specifies the markerPointers
	* @Default {Array}
	*/
	markerPointers?: Array<ScalesMarkerPointers>;

	/**Specifies the maximum of the Scale.
	* @Default {null}
	*/
	maximum?: number;

	/**Specifies the minimum of the Scale.
	* @Default {null}
	*/
	minimum?: number;

	/**Specifies the minorIntervalValue of the Scale.
	* @Default {2}
	*/
	minorIntervalValue?: number;

	/**Specifies the opacity of the Scale.
	* @Default {NaN}
	*/
	opacity?: number;

	/**Specifies the position
	* @Default {null}
	*/
	position?: ScalesPosition;

	/**Specifies the ranges in the tick.
	* @Default {Array}
	*/
	ranges?: Array<ScalesRanges>;

	/**Specifies the shadowOffset.
	* @Default {0}
	*/
	shadowOffset?: number;

	/**Specifies the showBarPointers state.
	* @Default {true}
	*/
	showBarPointers?: boolean;

	/**Specifies the showCustomLabels state.
	* @Default {false}
	*/
	showCustomLabels?: boolean;

	/**Specifies the showIndicators state.
	* @Default {false}
	*/
	showIndicators?: boolean;

	/**Specifies the showLabels state.
	* @Default {true}
	*/
	showLabels?: boolean;

	/**Specifies the showMarkerPointers state.
	* @Default {true}
	*/
	showMarkerPointers?: boolean;

	/**Specifies the showRanges state.
	* @Default {false}
	*/
	showRanges?: boolean;

	/**Specifies the showTicks state.
	* @Default {true}
	*/
	showTicks?: boolean;

	/**Specifies the ticks in the scale.
	* @Default {Array}
	*/
	ticks?: Array<ScalesTicks>;

	/**Specifies the scaleBar type .See ScaleType
	* @Default {Rectangle}
	*/
	type?: ej.datavisualization.LinearGauge.ScaleType|string;

	/**Specifies the scaleBar width.
	* @Default {30}
	*/
	width?: number;
}

export interface Tooltip {

	/**Specify showCustomLabelTooltip value of linear gauge
	* @Default {false}
	*/
	showCustomLabelTooltip?: boolean;

	/**Specify showLabelTooltip value of linear gauge
	* @Default {false}
	*/
	showLabelTooltip?: boolean;

	/**Specify templateID value of linear gauge
	* @Default {false}
	*/
	templateID?: string;
}
}
module LinearGauge
{
enum OuterCustomLabelPosition
{
//string
Left,
//string
Right,
//string
Top,
//string
Bottom,
}
}
module LinearGauge
{
enum FontStyle
{
//string
Bold,
//string
Italic,
//string
Regular,
//string
Strikeout,
//string
Underline,
}
}
module LinearGauge
{
enum Direction
{
//string
Clockwise,
//string
CounterClockwise,
}
}
module LinearGauge
{
enum IndicatorTypes
{
//string
Rectangle,
//string
Circle,
//string
RoundedRectangle,
//string
Text,
}
}
module LinearGauge
{
enum PointerPlacement
{
//string
Near,
//string
Far,
//string
Center,
}
}
module LinearGauge
{
enum ScaleType
{
//string
Major,
//string
Minor,
}
}
module LinearGauge
{
enum UnitTextPlacement
{
//string
Back,
//string
From,
}
}
module LinearGauge
{
enum MarkerType
{
//string
Rectangle,
//string
Triangle,
//string
Ellipse,
//string
Diamond,
//string
Pentagon,
//string
Circle,
//string
Star,
//string
Slider,
//string
Pointer,
//string
Wedge,
//string
Trapezoid,
//string
RoundedRectangle,
}
}
module LinearGauge
{
enum TicksType
{
//string
Majorinterval,
//string
Minorinterval,
}
}
module LinearGauge
{
enum Themes
{
//string
FlatLight,
//string
FlatDark,
}
}

class CircularGauge extends ej.Widget {
	static fn: CircularGauge;
	constructor(element: JQuery, options?: CircularGauge.Model);
	constructor(element: Element, options?: CircularGauge.Model);
	model:CircularGauge.Model;
	defaults:CircularGauge.Model;

	/** destroy the circular gauge widget. all events bound using this._on will be unbind automatically and bring the control to pre-init state.
	* @returns {void}
	*/
	destroy(): void;

	/** To export Image
	* @returns {void}
	*/
	exportImage(): void;

	/** To get BackNeedleLength
	* @returns {void}
	*/
	getBackNeedleLength(): void;

	/** To get CustomLabelAngle
	* @returns {void}
	*/
	getCustomLabelAngle(): void;

	/** To get CustomLabelValue
	* @returns {void}
	*/
	getCustomLabelValue(): void;

	/** To get LabelAngle
	* @returns {void}
	*/
	getLabelAngle(): void;

	/** To get LabelDistanceFromScale
	* @returns {void}
	*/
	getLabelDistanceFromScale(): void;

	/** To get LabelPlacement
	* @returns {void}
	*/
	getLabelPlacement(): void;

	/** To get LabelStyle
	* @returns {void}
	*/
	getLabelStyle(): void;

	/** To get MajorIntervalValue
	* @returns {void}
	*/
	getMajorIntervalValue(): void;

	/** To get MarkerDistanceFromScale
	* @returns {void}
	*/
	getMarkerDistanceFromScale(): void;

	/** To get MarkerStyle
	* @returns {void}
	*/
	getMarkerStyle(): void;

	/** To get MaximumValue
	* @returns {void}
	*/
	getMaximumValue(): void;

	/** To get MinimumValue
	* @returns {void}
	*/
	getMinimumValue(): void;

	/** To get MinorIntervalValue
	* @returns {void}
	*/
	getMinorIntervalValue(): void;

	/** To get NeedleStyle
	* @returns {void}
	*/
	getNeedleStyle(): void;

	/** To get PointerCapBorderWidth
	* @returns {void}
	*/
	getPointerCapBorderWidth(): void;

	/** To get PointerCapRadius
	* @returns {void}
	*/
	getPointerCapRadius(): void;

	/** To get PointerLength
	* @returns {void}
	*/
	getPointerLength(): void;

	/** To get PointerNeedleType
	* @returns {void}
	*/
	getPointerNeedleType(): void;

	/** To get PointerPlacement
	* @returns {void}
	*/
	getPointerPlacement(): void;

	/** To get PointerValue
	* @returns {void}
	*/
	getPointerValue(): void;

	/** To get PointerWidth
	* @returns {void}
	*/
	getPointerWidth(): void;

	/** To get RangeBorderWidth
	* @returns {void}
	*/
	getRangeBorderWidth(): void;

	/** To get RangeDistanceFromScale
	* @returns {void}
	*/
	getRangeDistanceFromScale(): void;

	/** To get RangeEndValue
	* @returns {void}
	*/
	getRangeEndValue(): void;

	/** To get RangePosition
	* @returns {void}
	*/
	getRangePosition(): void;

	/** To get RangeSize
	* @returns {void}
	*/
	getRangeSize(): void;

	/** To get RangeStartValue
	* @returns {void}
	*/
	getRangeStartValue(): void;

	/** To get ScaleBarSize
	* @returns {void}
	*/
	getScaleBarSize(): void;

	/** To get ScaleBorderWidth
	* @returns {void}
	*/
	getScaleBorderWidth(): void;

	/** To get ScaleDirection
	* @returns {void}
	*/
	getScaleDirection(): void;

	/** To get ScaleRadius
	* @returns {void}
	*/
	getScaleRadius(): void;

	/** To get StartAngle
	* @returns {void}
	*/
	getStartAngle(): void;

	/** To get SubGaugeLocation
	* @returns {void}
	*/
	getSubGaugeLocation(): void;

	/** To get SweepAngle
	* @returns {void}
	*/
	getSweepAngle(): void;

	/** To get TickAngle
	* @returns {void}
	*/
	getTickAngle(): void;

	/** To get TickDistanceFromScale
	* @returns {void}
	*/
	getTickDistanceFromScale(): void;

	/** To get TickHeight
	* @returns {void}
	*/
	getTickHeight(): void;

	/** To get TickPlacement
	* @returns {void}
	*/
	getTickPlacement(): void;

	/** To get TickStyle
	* @returns {void}
	*/
	getTickStyle(): void;

	/** To get TickWidth
	* @returns {void}
	*/
	getTickWidth(): void;

	/** To set includeFirstValue
	* @returns {void}
	*/
	includeFirstValue(): void;

	/** Switching the redraw option for the gauge
	* @returns {void}
	*/
	redraw(): void;

	/** To set BackNeedleLength
	* @returns {void}
	*/
	setBackNeedleLength(): void;

	/** To set CustomLabelAngle
	* @returns {void}
	*/
	setCustomLabelAngle(): void;

	/** To set CustomLabelValue
	* @returns {void}
	*/
	setCustomLabelValue(): void;

	/** To set LabelAngle
	* @returns {void}
	*/
	setLabelAngle(): void;

	/** To set LabelDistanceFromScale
	* @returns {void}
	*/
	setLabelDistanceFromScale(): void;

	/** To set LabelPlacement
	* @returns {void}
	*/
	setLabelPlacement(): void;

	/** To set LabelStyle
	* @returns {void}
	*/
	setLabelStyle(): void;

	/** To set MajorIntervalValue
	* @returns {void}
	*/
	setMajorIntervalValue(): void;

	/** To set MarkerDistanceFromScale
	* @returns {void}
	*/
	setMarkerDistanceFromScale(): void;

	/** To set MarkerStyle
	* @returns {void}
	*/
	setMarkerStyle(): void;

	/** To set MaximumValue
	* @returns {void}
	*/
	setMaximumValue(): void;

	/** To set MinimumValue
	* @returns {void}
	*/
	setMinimumValue(): void;

	/** To set MinorIntervalValue
	* @returns {void}
	*/
	setMinorIntervalValue(): void;

	/** To set NeedleStyle
	* @returns {void}
	*/
	setNeedleStyle(): void;

	/** To set PointerCapBorderWidth
	* @returns {void}
	*/
	setPointerCapBorderWidth(): void;

	/** To set PointerCapRadius
	* @returns {void}
	*/
	setPointerCapRadius(): void;

	/** To set PointerLength
	* @returns {void}
	*/
	setPointerLength(): void;

	/** To set PointerNeedleType
	* @returns {void}
	*/
	setPointerNeedleType(): void;

	/** To set PointerPlacement
	* @returns {void}
	*/
	setPointerPlacement(): void;

	/** To set PointerValue
	* @returns {void}
	*/
	setPointerValue(): void;

	/** To set PointerWidth
	* @returns {void}
	*/
	setPointerWidth(): void;

	/** To set RangeBorderWidth
	* @returns {void}
	*/
	setRangeBorderWidth(): void;

	/** To set RangeDistanceFromScale
	* @returns {void}
	*/
	setRangeDistanceFromScale(): void;

	/** To set RangeEndValue
	* @returns {void}
	*/
	setRangeEndValue(): void;

	/** To set RangePosition
	* @returns {void}
	*/
	setRangePosition(): void;

	/** To set RangeSize
	* @returns {void}
	*/
	setRangeSize(): void;

	/** To set RangeStartValue
	* @returns {void}
	*/
	setRangeStartValue(): void;

	/** To set ScaleBarSize
	* @returns {void}
	*/
	setScaleBarSize(): void;

	/** To set ScaleBorderWidth
	* @returns {void}
	*/
	setScaleBorderWidth(): void;

	/** To set ScaleDirection
	* @returns {void}
	*/
	setScaleDirection(): void;

	/** To set ScaleRadius
	* @returns {void}
	*/
	setScaleRadius(): void;

	/** To set StartAngle
	* @returns {void}
	*/
	setStartAngle(): void;

	/** To set SubGaugeLocation
	* @returns {void}
	*/
	setSubGaugeLocation(): void;

	/** To set SweepAngle
	* @returns {void}
	*/
	setSweepAngle(): void;

	/** To set TickAngle
	* @returns {void}
	*/
	setTickAngle(): void;

	/** To set TickDistanceFromScale
	* @returns {void}
	*/
	setTickDistanceFromScale(): void;

	/** To set TickHeight
	* @returns {void}
	*/
	setTickHeight(): void;

	/** To set TickPlacement
	* @returns {void}
	*/
	setTickPlacement(): void;

	/** To set TickStyle
	* @returns {void}
	*/
	setTickStyle(): void;

	/** To set TickWidth
	* @returns {void}
	*/
	setTickWidth(): void;
}
export module CircularGauge{

export interface Model {

	/**Specifies animationSpeed of circular gauge
	* @Default {500}
	*/
	animationSpeed?: number;

	/**Specifies the background color of circular gauge.
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specify distanceFromCorner value of circular gauge
	* @Default {center}
	*/
	distanceFromCorner?: number;

	/**Specify animate value of circular gauge
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Specify enableResize value of circular gauge
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Specify the frame of circular gauge
	* @Default {Object}
	*/
	frame?: Frame;

	/**Specify gaugePosition value of circular gauge See GaugePosition
	* @Default {center}
	*/
	gaugePosition?: ej.datavisualization.CircularGauge.gaugePosition|string;

	/**Specifies the height of circular gauge.
	* @Default {360}
	*/
	height?: number;

	/**Specifies the interiorGradient of circular gauge.
	* @Default {null}
	*/
	interiorGradient?: any;

	/**Specify isRadialGradient value of circular gauge
	* @Default {false}
	*/
	isRadialGradient?: boolean;

	/**Specifies the maximum value of circular gauge.
	* @Default {100}
	*/
	maximum?: number;

	/**Specifies the minimum value of circular gauge.
	* @Default {0}
	*/
	minimum?: number;

	/**Specify outerCustomLabelPosition value of circular gauge See OuterCustomLabelPosition
	* @Default {bottom}
	*/
	outerCustomLabelPosition?: ej.datavisualization.CircularGauge.CustomLabelPositionType|string;

	/**Specifies the radius of circular gauge.
	* @Default {180}
	*/
	radius?: number;

	/**Specify readonly value of circular gauge
	* @Default {true}
	*/
	readOnly?: boolean;

	/**Specify the pointers, ticks, labels, indicators, ranges of circular gauge
	* @Default {null}
	*/
	scales?: Scales;

	/**Specify the theme of circular gauge.
	* @Default {flatlight}
	*/
	theme?: string;

	/**Specify tooltip option of circular gauge
	* @Default {object}
	*/
	tooltip?: Tooltip;

	/**Specifies the value of circular gauge.
	* @Default {0}
	*/
	value?: number;

	/**Specifies the width of circular gauge.
	* @Default {360}
	*/
	width?: number;

	/**Triggers while the custom labels are being drawn on the gauge.*/
	drawCustomLabel? (e: DrawCustomLabelEventArgs): void;

	/**Triggers while the indicators are being started to drawn on the gauge.*/
	drawIndicators? (e: DrawIndicatorsEventArgs): void;

	/**Triggers while the labels are being drawn on the gauge.*/
	drawLabels? (e: DrawLabelsEventArgs): void;

	/**Triggers while the pointer cap is being drawn on the gauge.*/
	drawPointerCap? (e: DrawPointerCapEventArgs): void;

	/**Triggers while the pointers are being drawn on the gauge.*/
	drawPointers? (e: DrawPointersEventArgs): void;

	/**Triggers when the ranges begin to be getting drawn on the gauge.*/
	drawRange? (e: DrawRangeEventArgs): void;

	/**Triggers while the ticks are being drawn on the gauge.*/
	drawTicks? (e: DrawTicksEventArgs): void;

	/**Triggers while the gauge start to Load.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when the left mouse button is clicked.*/
	mouseClick? (e: MouseClickEventArgs): void;

	/**Triggers when clicking and dragging the mouse pointer over the gauge pointer.*/
	mouseClickMove? (e: MouseClickMoveEventArgs): void;

	/**Triggers when the mouse click is released.*/
	mouseClickUp? (e: MouseClickUpEventArgs): void;

	/**Triggers when the rendering of the gauge is completed.*/
	renderComplete? (e: RenderCompleteEventArgs): void;
}

export interface DrawCustomLabelEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the custom label
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the custom label belongs.
	*/
	scaleIndex?: number;

	/**returns the custom label style
	*/
	style?: string;

	/**returns the current custom label element.
	*/
	customLabelElement?: any;

	/**returns the index of the custom label.
	*/
	customLabelIndex?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawIndicatorsEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the indicator
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the indicator belongs.
	*/
	scaleIndex?: number;

	/**returns the indicator style
	*/
	style?: string;

	/**returns the current indicator element.
	*/
	indicatorElement?: any;

	/**returns the index of the indicator.
	*/
	indicatorIndex?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawLabelsEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the labels
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the label belongs.
	*/
	scaleIndex?: number;

	/**returns the label style
	*/
	style?: string;

	/**returns the angle of the labels.
	*/
	angle?: number;

	/**returns the current label element.
	*/
	element?: any;

	/**returns the index of the label.
	*/
	index?: number;

	/**returns the value of the label.
	*/
	pointerValue?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawPointerCapEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the startX and startY of the pointer cap.
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the pointer cap style
	*/
	style?: string;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawPointersEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the pointer
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the angle of the pointer.
	*/
	angle?: number;

	/**returns the current pointer element.
	*/
	element?: any;

	/**returns the index of the pointer.
	*/
	index?: number;

	/**returns the value of the pointer.
	*/
	value?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawRangeEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the range
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the range belongs.
	*/
	scaleIndex?: number;

	/**returns the range style
	*/
	style?: string;

	/**returns the current range element.
	*/
	rangeElement?: any;

	/**returns the index of the range.
	*/
	rangeIndex?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface DrawTicksEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the startX and startY of the ticks
	*/
	position?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the tick belongs.
	*/
	scaleIndex?: number;

	/**returns the ticks style
	*/
	style?: string;

	/**returns the angle of the tick.
	*/
	angle?: number;

	/**returns the current tick element.
	*/
	element?: any;

	/**returns the index of the tick.
	*/
	index?: number;

	/**returns the label value of the tick.
	*/
	pointerValue?: number;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	Model?: any;

	/**returns the entire scale element.
	*/
	scaleElement?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface MouseClickEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	index?: number;

	/**returns the pointer element.
	*/
	element?: any;

	/**returns the value of the pointer.
	*/
	value?: number;

	/**returns the angle of the pointer.
	*/
	angle?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface MouseClickMoveEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	index?: number;

	/**returns the pointer element.
	*/
	element?: any;

	/**returns the value of the pointer.
	*/
	value?: number;

	/**returns the angle of the pointer.
	*/
	angle?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface MouseClickUpEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: any;

	/**returns the scale element.
	*/
	scaleElement?: any;

	/**returns the scaleIndex to which the pointer belongs.
	*/
	scaleIndex?: number;

	/**returns the context element
	*/
	context?: any;

	/**returns the pointer Index
	*/
	index?: number;

	/**returns the pointer element.
	*/
	element?: any;

	/**returns the value of the pointer.
	*/
	value?: number;

	/**returns the angle of the pointer.
	*/
	angle?: number;

	/**returns the pointer style
	*/
	style?: string;

	/**returns the startX and startY of the pointer.
	*/
	position?: any;
}

export interface RenderCompleteEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the context element
	*/
	context?: any;

	/**returns the entire scale element.
	*/
	scaleElement?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface Frame {

	/**Specify the url of the frame background image for circular gauge
	* @Default {null}
	*/
	backgroundImageUrl?: string;

	/**Specifies the frameType of circular gauge. See Frame
	* @Default {FullCircle}
	*/
	frameType?: ej.datavisualization.CircularGauge.FrameType|string;

	/**Specifies the end angle for the half circular frame.
	* @Default {360}
	*/
	halfCircleFrameEndAngle?: number;

	/**Specifies the start angle for the half circular frame.
	* @Default {180}
	*/
	halfCircleFrameStartAngle?: number;
}

export interface ScalesBorder {

	/**Specify border color for scales of circular gauge
	* @Default {null}
	*/
	color?: string;

	/**Specify border width of circular gauge
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesIndicatorsPosition {

	/**Specify x-axis of position of circular gauge
	* @Default {0}
	*/
	x?: number;

	/**Specify y-axis of position of circular gauge
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesIndicatorsStateRanges {

	/**Specify backgroundColor for indicator of circular gauge
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specify borderColor for indicator of circular gauge
	* @Default {null}
	*/
	borderColor?: string;

	/**Specify end value for each specified state of circular gauge
	* @Default {0}
	*/
	endValue?: number;

	/**Specify value of the font as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
	* @Default {null}
	*/
	font?: any;

	/**Specify start value for each specified state of circular gauge
	* @Default {0}
	*/
	startValue?: number;

	/**Specify value of the text as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
	*/
	text?: string;

	/**Specify value of the textColor as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
	* @Default {null}
	*/
	textColor?: string;
}

export interface ScalesIndicators {

	/**Specify indicator height of circular gauge
	* @Default {15}
	*/
	height?: number;

	/**Specify imageUrl of circular gauge
	* @Default {null}
	*/
	imageUrl?: string;

	/**Specify position of circular gauge
	* @Default {Object}
	*/
	position?: ScalesIndicatorsPosition;

	/**Specify the various states of circular gauge
	* @Default {Array}
	*/
	stateRanges?: Array<ScalesIndicatorsStateRanges>;

	/**Specify indicator style of circular gauge. See IndicatorType
	* @Default {Circle}
	*/
	type?: ej.datavisualization.CircularGauge.IndicatorTypes|string;

	/**Specify indicator width of circular gauge
	* @Default {15}
	*/
	width?: number;
}

export interface ScalesLabelsFont {

	/**Specify font fontFamily for labels of circular gauge
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Specify font Style for labels of circular gauge
	* @Default {Bold}
	*/
	fontStyle?: string;

	/**Specify font size for labels of circular gauge
	* @Default {11px}
	*/
	size?: string;
}

export interface ScalesLabels {

	/**Specify the angle for the labels of circular gauge
	* @Default {0}
	*/
	angle?: number;

	/**Specify labels autoAngle value of circular gauge
	* @Default {false}
	*/
	autoAngle?: boolean;

	/**Specify label color of circular gauge
	* @Default {null}
	*/
	color?: string;

	/**Specify distanceFromScale value for labels of circular gauge
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specify font for labels of circular gauge
	* @Default {Object}
	*/
	font?: ScalesLabelsFont;

	/**Specify includeFirstValue of circular gauge
	* @Default {true}
	*/
	includeFirstValue?: boolean;

	/**Specify opacity value for labels of circular gauge
	* @Default {null}
	*/
	opacity?: number;

	/**Specify label placement of circular gauge. See LabelPlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.CircularGauge.Placement|string;

	/**Specify label Style of circular gauge. See LabelType
	* @Default {Major}
	*/
	type?: ej.datavisualization.CircularGauge.LabelType|string;

	/**Specify unitText of circular gauge
	*/
	unitText?: string;

	/**Specify unitTextPosition of circular gauge. See UnitTextPosition
	* @Default {Back}
	*/
	unitTextPosition?: ej.datavisualization.CircularGauge.UnitTextPlacement|string;
}

export interface ScalesPointerCap {

	/**Specify cap backgroundColor of circular gauge
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specify cap borderColor of circular gauge
	* @Default {null}
	*/
	borderColor?: string;

	/**Specify pointerCap borderWidth value of circular gauge
	* @Default {3}
	*/
	borderWidth?: number;

	/**Specify cap interiorGradient value of circular gauge
	* @Default {null}
	*/
	interiorGradient?: any;

	/**Specify pointerCap Radius value of circular gauge
	* @Default {7}
	*/
	radius?: number;
}

export interface ScalesPointersBorder {

	/**Specify border color for pointer of circular gauge
	* @Default {null}
	*/
	color?: string;

	/**Specify border width for pointers of circular gauge
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesPointersPointerValueTextFont {

	/**Specify pointer value text font family of circular gauge.
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Specify pointer value text font style of circular gauge.
	* @Default {Bold}
	*/
	fontStyle?: string;

	/**Specify pointer value text size of circular gauge.
	* @Default {11px}
	*/
	size?: string;
}

export interface ScalesPointersPointerValueText {

	/**Specify pointer text angle of circular gauge.
	* @Default {0}
	*/
	angle?: number;

	/**Specify pointer text auto angle of circular gauge.
	* @Default {false}
	*/
	autoAngle?: boolean;

	/**Specify pointer value text color of circular gauge.
	* @Default {#8c8c8c}
	*/
	color?: string;

	/**Specify pointer value text distance from pointer of circular gauge.
	* @Default {20}
	*/
	distance?: number;

	/**Specify pointer value text font option of circular gauge.
	* @Default {object}
	*/
	font?: ScalesPointersPointerValueTextFont;

	/**Specify pointer value text opacity of circular gauge.
	* @Default {1}
	*/
	opacity?: number;

	/**enable pointer value text visibility of circular gauge.
	* @Default {false}
	*/
	showValue?: boolean;
}

export interface ScalesPointers {

	/**Specify backgroundColor for the pointer of circular gauge
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specify backNeedleLength of circular gauge
	* @Default {10}
	*/
	backNeedleLength?: number;

	/**Specify the border for pointers of circular gauge
	* @Default {Object}
	*/
	border?: ScalesPointersBorder;

	/**Specify distanceFromScale value for pointers of circular gauge
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specify pointer gradients of circular gauge
	* @Default {null}
	*/
	gradients?: any;

	/**Specify pointer image of circular gauge.It is applicable for both marker as well as needle type pointers.
	* @Default {NULL}
	*/
	imageUrl?: string;

	/**Specify pointer length of circular gauge
	* @Default {150}
	*/
	length?: number;

	/**Specify marker Style value of circular gauge. See MarkerType
	* @Default {Rectangle}
	*/
	markerType?: ej.datavisualization.CircularGauge.MarkerType|string;

	/**Specify needle Style value of circular gauge. See NeedleType
	* @Default {Triangle}
	*/
	needleType?: ej.datavisualization.CircularGauge.NeedleType|string;

	/**Specify opacity value for pointer of circular gauge
	* @Default {1}
	*/
	opacity?: number;

	/**Specify pointer Placement value of circular gauge. See PointerPlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.CircularGauge.Placement|string;

	/**Specify pointer value text of circular gauge.
	* @Default {Object}
	*/
	pointerValueText?: ScalesPointersPointerValueText;

	/**Specify showBackNeedle value of circular gauge
	* @Default {false}
	*/
	showBackNeedle?: boolean;

	/**Specify pointer type value of circular gauge. See PointerType
	* @Default {Needle}
	*/
	type?: ej.datavisualization.CircularGauge.PointerType|string;

	/**Specify value of the pointer of circular gauge
	* @Default {null}
	*/
	value?: number;

	/**Specify pointer width of circular gauge
	* @Default {7}
	*/
	width?: number;
}

export interface ScalesRangesBorder {

	/**Specify border color for ranges of circular gauge
	* @Default {#32b3c6}
	*/
	color?: string;

	/**Specify border width for ranges of circular gauge
	* @Default {1.5}
	*/
	width?: number;
}

export interface ScalesRanges {

	/**Specify backgroundColor for the ranges of circular gauge
	* @Default {#32b3c6}
	*/
	backgroundColor?: string;

	/**Specify border for ranges of circular gauge
	* @Default {Object}
	*/
	border?: ScalesRangesBorder;

	/**Specify distanceFromScale value for ranges of circular gauge
	* @Default {25}
	*/
	distanceFromScale?: number;

	/**Specify endValue for ranges of circular gauge
	* @Default {null}
	*/
	endValue?: number;

	/**Specify endWidth for ranges of circular gauge
	* @Default {10}
	*/
	endWidth?: number;

	/**Specify range gradients of circular gauge
	* @Default {null}
	*/
	gradients?: any;

	/**Specify opacity value for ranges of circular gauge
	* @Default {null}
	*/
	opacity?: number;

	/**Specify placement of circular gauge. See RangePlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.CircularGauge.Placement|string;

	/**Specify size of the range value of circular gauge
	* @Default {5}
	*/
	size?: number;

	/**Specify startValue for ranges of circular gauge
	* @Default {null}
	*/
	startValue?: number;

	/**Specify startWidth of circular gauge
	* @Default {[Array.number] scale.ranges.startWidth = 10}
	*/
	startWidth?: number;
}

export interface ScalesSubGaugesPosition {

	/**Specify x-axis position for sub-gauge of circular gauge
	* @Default {0}
	*/
	x?: number;

	/**Specify y-axis position for sub-gauge of circular gauge
	* @Default {0}
	*/
	y?: number;
}

export interface ScalesSubGauges {

	/**Specify subGauge Height of circular gauge
	* @Default {150}
	*/
	height?: number;

	/**Specify position for sub-gauge of circular gauge
	* @Default {Object}
	*/
	position?: ScalesSubGaugesPosition;

	/**Specify subGauge Width of circular gauge
	* @Default {150}
	*/
	width?: number;
}

export interface ScalesTicks {

	/**Specify the angle for the ticks of circular gauge
	* @Default {0}
	*/
	angle?: number;

	/**Specify tick color of circular gauge
	* @Default {null}
	*/
	color?: string;

	/**Specify distanceFromScale value for ticks of circular gauge
	* @Default {0}
	*/
	distanceFromScale?: number;

	/**Specify tick height of circular gauge
	* @Default {16}
	*/
	height?: number;

	/**Specify tick placement of circular gauge. See TickPlacement
	* @Default {Near}
	*/
	placement?: ej.datavisualization.CircularGauge.Placement|string;

	/**Specify tick Style of circular gauge. See TickType
	* @Default {Major}
	*/
	type?: ej.datavisualization.CircularGauge.LabelType|string;

	/**Specify tick width of circular gauge
	* @Default {3}
	*/
	width?: number;
}

export interface Scales {

	/**Specify backgroundColor for the scale of circular gauge
	* @Default {null}
	*/
	backgroundColor?: string;

	/**Specify border for scales of circular gauge
	* @Default {Object}
	*/
	border?: ScalesBorder;

	/**Specify scale direction of circular gauge. See Directions
	* @Default {Clockwise}
	*/
	direction?: ej.datavisualization.CircularGauge.Direction|string;

	/**Specify representing state of circular gauge
	* @Default {Array}
	*/
	indicators?: Array<ScalesIndicators>;

	/**Specify the text values displayed in a meaningful manner alongside the ticks of circular gauge
	* @Default {Array}
	*/
	labels?: Array<ScalesLabels>;

	/**Specify majorIntervalValue of circular gauge
	* @Default {10}
	*/
	majorIntervalValue?: number;

	/**Specify maximum scale value of circular gauge
	* @Default {null}
	*/
	maximum?: number;

	/**Specify minimum scale value of circular gauge
	* @Default {null}
	*/
	minimum?: number;

	/**Specify minorIntervalValue of circular gauge
	* @Default {2}
	*/
	minorIntervalValue?: number;

	/**Specify opacity value of circular gauge
	* @Default {1}
	*/
	opacity?: number;

	/**Specify pointer cap of circular gauge
	* @Default {Object}
	*/
	pointerCap?: ScalesPointerCap;

	/**Specify pointers value of circular gauge
	* @Default {Array}
	*/
	pointers?: Array<ScalesPointers>;

	/**Specify scale radius of circular gauge
	* @Default {170}
	*/
	radius?: number;

	/**Specify ranges value of circular gauge
	* @Default {Array}
	*/
	ranges?: Array<ScalesRanges>;

	/**Specify shadowOffset value of circular gauge
	* @Default {0}
	*/
	shadowOffset?: number;

	/**Specify showIndicators of circular gauge
	* @Default {false}
	*/
	showIndicators?: boolean;

	/**Specify showLabels of circular gauge
	* @Default {true}
	*/
	showLabels?: boolean;

	/**Specify showPointers of circular gauge
	* @Default {true}
	*/
	showPointers?: boolean;

	/**Specify showRanges of circular gauge
	* @Default {false}
	*/
	showRanges?: boolean;

	/**Specify showScaleBar of circular gauge
	* @Default {false}
	*/
	showScaleBar?: boolean;

	/**Specify showTicks of circular gauge
	* @Default {true}
	*/
	showTicks?: boolean;

	/**Specify scaleBar size of circular gauge
	* @Default {6}
	*/
	size?: number;

	/**Specify startAngle of circular gauge
	* @Default {115}
	*/
	startAngle?: number;

	/**Specify subGauge of circular gauge
	* @Default {Array}
	*/
	subGauges?: Array<ScalesSubGauges>;

	/**Specify sweepAngle of circular gauge
	* @Default {310}
	*/
	sweepAngle?: number;

	/**Specify ticks of circular gauge
	* @Default {Array}
	*/
	ticks?: Array<ScalesTicks>;
}

export interface Tooltip {

	/**enable showCustomLabelTooltip of circular gauge
	* @Default {false}
	*/
	showCustomLabelTooltip?: boolean;

	/**enable showLabelTooltip of circular gauge
	* @Default {false}
	*/
	showLabelTooltip?: boolean;

	/**Specify tooltip templateID of circular gauge
	* @Default {false}
	*/
	templateID?: string;
}
}
module CircularGauge
{
enum FrameType
{
//string
FullCircle,
//string
HalfCircle,
}
}
module CircularGauge
{
enum gaugePosition
{
//string
TopLeft,
//string
TopRight,
//string
TopCenter,
//string
MiddleLeft,
//string
MiddleRight,
//string
Center,
//string
BottomLeft,
//string
BottomRight,
//string
BottomCenter,
}
}
module CircularGauge
{
enum CustomLabelPositionType
{
//string
Top,
//string
Bottom,
//string
Right,
//string
Left,
}
}
module CircularGauge
{
enum Direction
{
//string
Clockwise,
//string
CounterClockwise,
}
}
module CircularGauge
{
enum IndicatorTypes
{
//string
Rectangle,
//string
Circle,
//string
Text,
//string
RoundedRectangle,
//string
Image,
}
}
module CircularGauge
{
enum Placement
{
//string
Near,
//string
Far,
}
}
module CircularGauge
{
enum LabelType
{
//string
Major,
//string
Minor,
}
}
module CircularGauge
{
enum UnitTextPlacement
{
//string
Back,
//string
Front,
}
}
module CircularGauge
{
enum MarkerType
{
//string
Rectangle,
//string
Circle,
//string
Triangle,
//string
Ellipse,
//string
Diamond,
//string
Pentagon,
//string
Slider,
//string
Pointer,
//string
Wedge,
//string
Trapezoid,
//string
RoundedRectangle,
//string
Image,
}
}
module CircularGauge
{
enum NeedleType
{
//string
Triangle,
//string
Rectangle,
//string
Arrow,
//string
Image,
//string
Trapezoid,
}
}
module CircularGauge
{
enum PointerType
{
//string
Needle,
//string
Marker,
}
}

class DigitalGauge extends ej.Widget {
	static fn: DigitalGauge;
	constructor(element: JQuery, options?: DigitalGauge.Model);
	constructor(element: Element, options?: DigitalGauge.Model);
	model:DigitalGauge.Model;
	defaults:DigitalGauge.Model;

	/** To destroy the digital gauge
	* @returns {void}
	*/
	destroy(): void;

	/** To export Digital Gauge as Image
	* @param {string} fileName for the Image
	* @param {string} fileType for the Image
	* @returns {void}
	*/
	exportImage(fileName: string, fileType: string): void;

	/** Gets the location of an item that is displayed on the gauge.
	* @param {number} Position value of an item that is displayed on the gauge.
	* @returns {void}
	*/
	getPosition(itemIndex: number): void;

	/** ClientSideMethod getValue Gets the value of an item that is displayed on the gauge
	* @param {number} Index value of an item that displayed on the gauge
	* @returns {void}
	*/
	getValue(itemIndex: number): void;

	/** Refresh the digital gauge widget
	* @returns {void}
	*/
	refresh(): void;

	/** ClientSideMethod Set Position Sets the location of an item to be displayed in the gauge
	* @param {number} Index value of the digital gauge item
	* @param {any} Location value of the digital gauge
	* @returns {void}
	*/
	setPosition(itemIndex: number, value: any): void;

	/** ClientSideMethod SetValue Sets the value of an item to be displayed in the gauge.
	* @param {number} Index value of the digital gauge item
	* @param {string} Text value to be displayed in the gaugeS
	* @returns {void}
	*/
	setValue(itemIndex: number, value: string): void;
}
export module DigitalGauge{

export interface Model {

	/**Specifies the resize option of the DigitalGauge.
	* @Default {false}
	*/
	enableResize?: boolean;

	/**Specifies the frame of the Digital gauge.
	* @Default {{backgroundImageUrl: null, innerWidth: 6, outerWidth: 10}}
	*/
	frame?: Frame;

	/**Specifies the height of the DigitalGauge.
	* @Default {150}
	*/
	height?: number;

	/**Specifies the items for the DigitalGauge.
	* @Default {null}
	*/
	items?: Items;

	/**Specifies the matrixSegmentData for the DigitalGauge.
	*/
	matrixSegmentData?: any;

	/**Specifies the segmentData for the DigitalGauge.
	*/
	segmentData?: any;

	/**Specifies the themes for the Digital gauge. See Themes
	* @Default {flatlight}
	*/
	themes?: string;

	/**Specifies the value to the DigitalGauge.
	* @Default {text}
	*/
	value?: string;

	/**Specifies the width for the Digital gauge.
	* @Default {400}
	*/
	width?: number;

	/**Triggers when the gauge is initialized.*/
	init? (e: InitEventArgs): void;

	/**Triggers when the gauge item rendering.*/
	itemRendering? (e: ItemRenderingEventArgs): void;

	/**Triggers when the gauge is start to load.*/
	load? (e: LoadEventArgs): void;

	/**Triggers when the gauge render is completed.*/
	renderComplete? (e: RenderCompleteEventArgs): void;
}

export interface InitEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the all the options of the items.
	*/
	items?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface ItemRenderingEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the all the options of the items.
	*/
	items?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LoadEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the all the options of the items.
	*/
	items?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface RenderCompleteEventArgs {

	/**returns the object of the gauge.
	*/
	object?: any;

	/**returns the cancel option value
	*/
	cancel?: boolean;

	/**returns the all the options of the items.
	*/
	items?: any;

	/**returns the context element
	*/
	context?: any;

	/**returns the gauge model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface Frame {

	/**Specifies the url of an image to be displayed as background of the Digital gauge.
	* @Default {null}
	*/
	backgroundImageUrl?: string;

	/**Specifies the inner width for the frame, when the background image has been set for the Digital gauge..
	* @Default {6}
	*/
	innerWidth?: number;

	/**Specifies the outer width of the frame, when the background image has been set for the Digital gauge.
	* @Default {10}
	*/
	outerWidth?: number;
}

export interface ItemsCharacterSettings {

	/**Specifies the CharacterCount value for the DigitalGauge.
	* @Default {4}
	*/
	count?: number;

	/**Specifies the opacity value for the DigitalGauge.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the value for spacing between the characters
	* @Default {2}
	*/
	spacing?: number;

	/**Specifies the character type for the text to be displayed.
	* @Default {ej.datavisualization.DigitalGauge.CharacterType.EightCrossEightDotMatrix}
	*/
	type?: ej.datavisualization.DigitalGauge.CharacterType|string;
}

export interface ItemsFont {

	/**Set the font family value
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Set the font style for the font
	* @Default {italic}
	*/
	fontStyle?: ej.datavisualization.DigitalGauge.FontStyle|string;

	/**Set the font size value
	* @Default {11px}
	*/
	size?: string;
}

export interface ItemsPosition {

	/**Set the horizontal location for the text, where it needs to be placed within the gauge.
	* @Default {0}
	*/
	x?: number;

	/**Set the vertical location for the text, where it needs to be placed within the gauge.
	* @Default {0}
	*/
	y?: number;
}

export interface ItemsSegmentSettings {

	/**Set the color for the text segments.
	* @Default {null}
	*/
	color?: string;

	/**Set the gradient for the text segments.
	* @Default {null}
	*/
	gradient?: any;

	/**Set the length for the text segments.
	* @Default {2}
	*/
	length?: number;

	/**Set the opacity for the text segments.
	* @Default {0}
	*/
	opacity?: number;

	/**Set the spacing for the text segments.
	* @Default {1}
	*/
	spacing?: number;

	/**Set the width for the text segments.
	* @Default {1}
	*/
	width?: number;
}

export interface Items {

	/**Specifies the Character settings for the DigitalGauge.
	* @Default {null}
	*/
	characterSettings?: ItemsCharacterSettings;

	/**Enable/Disable the custom font to be applied to the text in the gauge.
	* @Default {false}
	*/
	enableCustomFont?: boolean;

	/**Set the specific font for the text, when the enableCustomFont is set to true
	* @Default {null}
	*/
	font?: ItemsFont;

	/**Set the location for the text, where it needs to be placed within the gauge.
	* @Default {null}
	*/
	position?: ItemsPosition;

	/**Set the segment settings for the digital gauge.
	* @Default {null}
	*/
	segmentSettings?: ItemsSegmentSettings;

	/**Set the value for enabling/disabling the blurring effect for the shadows of the text
	* @Default {0}
	*/
	shadowBlur?: number;

	/**Specifies the color of the text shadow.
	* @Default {null}
	*/
	shadowColor?: string;

	/**Set the x offset value for the shadow of the text, indicating the location where it needs to be displayed.
	* @Default {1}
	*/
	shadowOffsetX?: number;

	/**Set the y offset value for the shadow of the text, indicating the location where it needs to be displayed.
	* @Default {1}
	*/
	shadowOffsetY?: number;

	/**Set the alignment of the text that is displayed within the gauge.See TextAlign
	* @Default {left}
	*/
	textAlign?: string;

	/**Specifies the color of the text.
	* @Default {null}
	*/
	textColor?: string;

	/**Specifies the text value.
	* @Default {null}
	*/
	value?: string;
}
}
module DigitalGauge
{
enum CharacterType
{
//string
SevenSegment,
//string
FourteenSegment,
//string
SixteenSegment,
//string
EightCrossEightDotMatrix,
//string
EightCrossEightSquareMatrix,
}
}
module DigitalGauge
{
enum FontStyle
{
//string
Normal,
//string
Bold,
//string
Italic,
//string
Underline,
//string
Strikeout,
}
}

class Chart extends ej.Widget {
	static fn: Chart;
	constructor(element: JQuery, options?: Chart.Model);
	constructor(element: Element, options?: Chart.Model);
	model:Chart.Model;
	defaults:Chart.Model;

	/** Animates the series and/or indicators in Chart. When parameter is not passed to this method, then all the series and indicators present in Chart are animated.
	* @param {Array<any>} Series and indicator objects passed in the array collection are animated.Example
	* @param {any} Series or indicator object passed to this method are animated.Example,
	* @returns {void}
	*/
	animate(options: Array<any>, option: any): void;

	/** Exports chart as an image or to an excel file. Chart can be exported as an image only when exportCanvasRendering option is set to true.
	* @param {string} Type of the export operation to be performed. Following are the two export types that are supported now,1. 'image'2. 'excel'Example
	* @param {string} URL of the service, where the chart will be exported to excel.Example,
	* @param {boolean} When this parameter is true, all the chart objects initialized to the same document are exported to a single excel file. This is an optional parameter. By default, it is false.Example,
	* @returns {void}
	*/
	export(type: string, url: string, exportMultipleChart: boolean): void;

	/** Redraws the entire chart. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
	* @returns {void}
	*/
	redraw(): void;
}
export module Chart{

export interface Model {

	/**Options for adding and customizing annotations in Chart.
	*/
	annotations?: Array<Annotations>;

	/**Url of the image to be used as chart background.
	* @Default {null}
	*/
	backGroundImageUrl?: string;

	/**Options for customizing the color, opacity and width of the chart border.
	*/
	border?: Border;

	/**Controls whether Chart has to be responsive or not.
	* @Default {false}
	*/
	canResize?: boolean;

	/**Options for configuring the border and background of the plot area.
	*/
	chartArea?: ChartArea;

	/**Options to split Chart into multiple plotting areas vertically. Each object in the collection represents a plotting area in Chart.
	*/
	columnDefinitions?: Array<ColumnDefinitions>;

	/**Options for configuring the properties of all the series. You can also override the options for specific series by using series collection.
	*/
	commonSeriesOptions?: CommonSeriesOptions;

	/**Options for displaying and customizing the crosshair.
	*/
	crosshair?: Crosshair;

	/**Depth of the 3D Chart from front view of series to background wall. This property is applicable only for 3D view.
	* @Default {100}
	*/
	depth?: number;

	/**Controls whether 3D view has to be enabled or not. 3D view is supported only for column, bar. Stacking column, stacking bar, pie and doughnut series types.
	* @Default {false}
	*/
	enable3D?: boolean;

	/**Controls whether Chart has to be rendered as Canvas or SVG. Canvas rendering supports all functionalities in SVG rendering except 3D Charts.
	* @Default {false}
	*/
	enableCanvasRendering?: boolean;

	/**Controls whether 3D view has to be rotated on dragging. This property is applicable only for 3D view.
	* @Default {false}
	*/
	enableRotation?: boolean;

	/**Options to customize the technical indicators.
	*/
	indicators?: Array<Indicators>;

	/**Options to customize the legend items and legend title.
	*/
	legend?: Legend;

	/**Name of the culture based on which chart should be localized. Number and date time values are localized with respect to the culture name.String type properties like title text are not localized automatically. Provide localized text as value to string type properties.
	* @Default {en-US}
	*/
	locale?: string;

	/**Palette is used to store the series fill color in array and apply the color to series collection in the order of series index.
	* @Default {null}
	*/
	palette?: Array<any>;

	/**Options to customize the left, right, top and bottom margins of chart area.
	*/
	Margin?: any;

	/**Perspective angle of the 3D view. Chart appears closer when perspective angle is decreased, and distant when perspective angle is increased.This property is applicable only when 3D view is enabled
	* @Default {90}
	*/
	perspectiveAngle?: number;

	/**This is a horizontal axis that contains options to configure axis and it is the primary x axis for all the series in series array. To override x axis for particular series, create an axis object by providing unique name by using name property and add it to axes array. Then, assign the name to the seriesâ€™s xAxisName property to link both axis and series.
	*/
	primaryXAxis?: PrimaryXAxis;

	/**This is a vertical axis that contains options to configure axis. This is the primary y axis for all the series in series array. To override y axis for particular series, create an axis object by providing unique name by using name property and add it to axes array. Then, assign the name to the seriesâ€™s yAxisName property to link both axis and series.
	*/
	primaryYAxis?: PrimaryYAxis;

	/**Rotation angle of the 3D view. This property is applicable only when 3D view is enabled.
	* @Default {0}
	*/
	rotation?: number;

	/**Options to split Chart into multiple plotting areas horizontally. Each object in the collection represents a plotting area in Chart.
	*/
	rowDefinitions?: Array<RowDefinitions>;

	/**Specifies the properties used for customizing the series.
	*/
	series?: Array<Series>;

	/**Controls whether data points has to be displayed side by side or along the depth of the axis.
	* @Default {false}
	*/
	sideBySideSeriesPlacement?: boolean;

	/**Options to customize the Chart size.
	*/
	size?: Size;

	/**Specifies the theme for Chart.
	* @Default {Flatlight. See Theme}
	*/
	theme?: ej.datavisualization.Chart.Theme|string;

	/**Slope angle of 3D Chart. This property is applicable only when 3D view is enabled.
	* @Default {0}
	*/
	tilt?: number;

	/**Options for customizing the title and subtitle of Chart.
	*/
	title?: Title;

	/**Width of the wall used in 3D Chart. Wall is present only in Cartesian type 3D series and not in 3D pie or Doughnut series. This property is applicable only when 3D view is enabled.
	* @Default {2}
	*/
	wallSize?: number;

	/**Options for enabling zooming feature of chart.
	*/
	zooming?: Zooming;

	/**Fires after the series animation is completed. This event will be triggered for each series when animation is enabled.*/
	animationComplete? (e: AnimationCompleteEventArgs): void;

	/**Fires before rendering the labels. This event is fired for each label in axis. You can use this event to add custom text to axis labels.*/
	axesLabelRendering? (e: AxesLabelRenderingEventArgs): void;

	/**Fires during the initialization of axis labels.*/
	axesLabelsInitialize? (e: AxesLabelsInitializeEventArgs): void;

	/**Fires during axes range calculation. This event is fired for each axis present in Chart. You can use this event to customize axis range as required.*/
	axesRangeCalculate? (e: AxesRangeCalculateEventArgs): void;

	/**Fires before rendering the axis title. This event is triggered for each axis with title. You can use this event to add custom text to axis title.*/
	axesTitleRendering? (e: AxesTitleRenderingEventArgs): void;

	/**Fires during the calculation of chart area bounds. You can use this event to customize the bounds of chart area.*/
	chartAreaBoundsCalculate? (e: ChartAreaBoundsCalculateEventArgs): void;

	/**Fires after chart is created.*/
	create? (e: CreateEventArgs): void;

	/**Fires when chart is destroyed completely.*/
	destroy? (e: DestroyEventArgs): void;

	/**Fires before rendering the data labels. This event is triggered for each data label in the series. You can use this event to add custom text in data labels.*/
	displayTextRendering? (e: DisplayTextRenderingEventArgs): void;

	/**Fires during the calculation of legend bounds. You can use this event to customize the bounds of legend.*/
	legendBoundsCalculate? (e: LegendBoundsCalculateEventArgs): void;

	/**Fires on clicking the legend item.*/
	legendItemClick? (e: LegendItemClickEventArgs): void;

	/**Fires when moving mouse over legend item. You can use this event for hit testing on legend items.*/
	legendItemMouseMove? (e: LegendItemMouseMoveEventArgs): void;

	/**Fires before rendering the legend item. This event is fired for each legend item in Chart. You can use this event to customize legend item shape or add custom text to legend item.*/
	legendItemRendering? (e: LegendItemRenderingEventArgs): void;

	/**Fires before loading the chart.*/
	load? (e: LoadEventArgs): void;

	/**Fires on clicking a point in chart. You can use this event to handle clicks made on points.*/
	pointRegionClick? (e: PointRegionClickEventArgs): void;

	/**Fires when mouse is moved over a point.*/
	pointRegionMouseMove? (e: PointRegionMouseMoveEventArgs): void;

	/**Fires before rendering chart.*/
	preRender? (e: PreRenderEventArgs): void;

	/**Fires after selecting a series. This event is triggered after selecting a series only if selection mode is series.*/
	seriesRegionClick? (e: SeriesRegionClickEventArgs): void;

	/**Fires before rendering a series. This event is fired for each series in Chart.*/
	seriesRendering? (e: SeriesRenderingEventArgs): void;

	/**Fires before rendering the marker symbols. This event is triggered for each marker in Chart.*/
	symbolRendering? (e: SymbolRenderingEventArgs): void;

	/**Fires before rendering the Chart title. You can use this event to add custom text in Chart title.*/
	titleRendering? (e: TitleRenderingEventArgs): void;

	/**Fires before rendering the tooltip. This event is fired when tooltip is enabled and mouse is hovered on a Chart point. You can use this event to customize tooltip before rendering.*/
	toolTipInitialize? (e: ToolTipInitializeEventArgs): void;

	/**Fires before rendering crosshair tooltip in axis. This event is fired for each axis with crosshair label enabled. You can use this event to customize crosshair label before rendering*/
	trackAxisToolTip? (e: TrackAxisToolTipEventArgs): void;

	/**Fires before rendering trackball tooltip. This event is fired for each series in Chart because trackball tooltip is displayed for all the series. You can use this event to customize the text displayed in trackball tooltip.*/
	trackToolTip? (e: TrackToolTipEventArgs): void;

	/**Fires, on clicking the axis label.*/
	axisLabelClick? (e: AxisLabelClickEventArgs): void;

	/**Fires on moving mouse over the axis label.*/
	axisLabelMouseMove? (e: AxisLabelMouseMoveEventArgs): void;

	/**Fires, on the clicking the chart.*/
	chartClick? (e: ChartClickEventArgs): void;

	/**Fires on moving mouse over the chart.*/
	chartMouseMove? (e: ChartMouseMoveEventArgs): void;

	/**Fires, on double clicking the chart.*/
	chartDoubleClick? (e: ChartDoubleClickEventArgs): void;

	/**Fires on clicking the annotation.*/
	annotationClick? (e: AnnotationClickEventArgs): void;

	/**Fires, after the chart is resized.*/
	afterResize? (e: AfterResizeEventArgs): void;

	/**Fires, when chart size is changing.*/
	beforeResize? (e: BeforeResizeEventArgs): void;

	/**Fires, when error bar is rendering.*/
	errorBarRendering? (e: ErrorBarRenderingEventArgs): void;
}

export interface AnimationCompleteEventArgs {

	/**Instance of the series that completed has animation.
	*/
	series?: any;

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface AxesLabelRenderingEventArgs {

	/**Instance of the corresponding axis.
	*/
	Axis?: any;

	/**Formatted text of the respective label. You can also add custom text to the label.
	*/
	LabelText?: string;

	/**Actual value of the label.
	*/
	LabelValue?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface AxesLabelsInitializeEventArgs {

	/**Collection of axes in Chart
	*/
	dataAxes?: any;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface AxesRangeCalculateEventArgs {

	/**Difference between minimum and maximum value of axis range.
	*/
	delta?: number;

	/**Interval value of axis range. Grid lines, tick lines and axis labels are drawn based on this interval value.
	*/
	interval?: number;

	/**Maximum value of axis range.
	*/
	max?: number;

	/**Minimum value of axis range.
	*/
	min?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface AxesTitleRenderingEventArgs {

	/**Instance of the axis whose title is being rendered
	*/
	axes?: any;

	/**X-coordinate of title location
	*/
	locationX?: number;

	/**Y-coordinate of title location
	*/
	locationY?: number;

	/**Axis title text. You can add custom text to the title.
	*/
	title?: string;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface ChartAreaBoundsCalculateEventArgs {

	/**Height of the chart area.
	*/
	areaBoundsHeight?: number;

	/**Width of the chart area.
	*/
	areaBoundsWidth?: number;

	/**X-coordinate of the chart area.
	*/
	areaBoundsX?: number;

	/**Y-coordinate of the chart area.
	*/
	areaBoundsY?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface CreateEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface DestroyEventArgs {

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface DisplayTextRenderingEventArgs {

	/**Text displayed in data label. You can add custom text to the data label
	*/
	text?: string;

	/**X-coordinate of data label location
	*/
	locationX?: number;

	/**Y-coordinate of data label location
	*/
	locationY?: number;

	/**Index of the series in series Collection whose data label is being rendered 
	*/
	seriesIndex?: number;

	/**Index of the point in series whose data label is being rendered 
	*/
	pointIndex?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface LegendBoundsCalculateEventArgs {

	/**Height of the legend.
	*/
	legendBoundsHeight?: number;

	/**Width of the legend.
	*/
	legendBoundsWidth?: number;

	/**Number of rows to display the legend items
	*/
	legendBoundsRows?: number;

	/**Set this option to true to cancel the event.
	*/
	cancel?: boolean;

	/**Instance of the chart model object.
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface LegendItemClickEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X-coordinate of legend item in pixel
	*/
	startX?: number;

	/**Y-coordinate of legend item in pixel
	*/
	startY?: number;

	/**Instance of the legend item object that is about to be rendered
	*/
	LegendItem?: any;

	/**Options to customize the legend item styles such as border, color, size, etcâ€¦,
	*/
	style?: any;

	/**Instance that holds information about legend bounds and legend item bounds.
	*/
	Bounds?: any;

	/**Name of the legend item shape. Use this option to customize legend item shape before rendering
	*/
	symbolShape?: string;

	/**Instance of the series object corresponding to the legend item
	*/
	series?: any;
}

export interface LegendItemMouseMoveEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X-coordinate of legend item in pixel
	*/
	startX?: number;

	/**Y-coordinate of legend item in pixel
	*/
	startY?: number;

	/**Instance of the legend item object that is about to be rendered
	*/
	LegendItem?: any;

	/**Options to customize the legend item styles such as border, color, size, etcâ€¦,
	*/
	style?: any;

	/**Options to customize the legend item styles such as border, color, size, etcâ€¦,
	*/
	Bounds?: any;

	/**Name of the legend item shape. Use this option to customize legend item shape before rendering
	*/
	symbolShape?: string;

	/**Instance of the series object corresponding to the legend item
	*/
	series?: any;
}

export interface LegendItemRenderingEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X-coordinate of legend item in pixel
	*/
	startX?: number;

	/**Y-coordinate of legend item in pixel
	*/
	startY?: number;

	/**Instance of the legend item object that is about to be rendered
	*/
	legendItem?: any;

	/**Options to customize the legend item styles such as border, color, size, etc.
	*/
	style?: any;

	/**Name of the legend item shape. Use this option to customize legend item shape before rendering
	*/
	symbolShape?: string;
}

export interface LoadEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface PointRegionClickEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X-coordinate of point in pixel
	*/
	locationX?: number;

	/**Y-coordinate of point in pixel
	*/
	locationY?: number;

	/**Index of the point in series
	*/
	pointIndex?: number;

	/**Index of the series in series collection to which the point belongs
	*/
	seriesIndex?: number;
}

export interface PointRegionMouseMoveEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X-coordinate of point in pixel
	*/
	locationX?: number;

	/**Y-coordinate of point in pixel
	*/
	locationY?: number;

	/**Index of the point in series
	*/
	pointIndex?: number;

	/**Index of the series in series collection to which the point belongs
	*/
	seriesIndex?: number;
}

export interface PreRenderEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;
}

export interface SeriesRegionClickEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Instance of the selected series
	*/
	series?: any;

	/**Index of the selected series
	*/
	seriesIndex?: number;
}

export interface SeriesRenderingEventArgs {

	/**Set this option to true to cancel the event
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Instance of the series which is about to get rendered
	*/
	series?: any;
}

export interface SymbolRenderingEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Instance that holds the location of marker symbol
	*/
	location?: any;

	/**Options to customize the marker style such as color, border and size
	*/
	style?: any;
}

export interface TitleRenderingEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Option to customize the title location in pixels
	*/
	location?: any;

	/**Read-only option to find the size of the title
	*/
	size?: any;

	/**Use this option to add custom text in title
	*/
	title?: string;
}

export interface ToolTipInitializeEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Text to be displayed in tooltip. Set this option to customize the text displayed in tooltip
	*/
	currentText?: string;

	/**Index of the point on which mouse is hovered
	*/
	pointIndex?: number;

	/**Index of the series in series collection whose point is hovered by mouse
	*/
	seriesIndex?: number;
}

export interface TrackAxisToolTipEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Location of the crosshair label in pixels
	*/
	location?: any;

	/**Index of the axis for which crosshair label is displayed
	*/
	axisIndex?: number;

	/**Instance of the chart axis object for which cross hair label is displayed
	*/
	crossAxis?: number;

	/**Text to be displayed in crosshair label. Use this option to add custom text in crosshair label
	*/
	currentTrackText?: string;
}

export interface TrackToolTipEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Location of the trackball tooltip in pixels
	*/
	location?: any;

	/**Index of the point for which trackball tooltip is displayed
	*/
	pointIndex?: number;

	/**Index of the series in series collection
	*/
	seriesIndex?: number;

	/**Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
	*/
	currentText?: string;

	/**Instance of the series object for which trackball tooltip is displayed.
	*/
	series?: any;
}

export interface AxisLabelClickEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the labels in chart area. 
	*/
	location?: any;

	/**Index of the label.
	*/
	index?: number;

	/**Instance of the corresponding axis.
	*/
	axis?: any;

	/**Label that is clicked.
	*/
	text?: string;
}

export interface AxisLabelMouseMoveEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the labels in chart area. 
	*/
	location?: any;

	/**Index of the label.
	*/
	index?: number;

	/**Instance of the corresponding axis.
	*/
	axis?: any;

	/**Label that is hovered.
	*/
	text?: string;
}

export interface ChartClickEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the points with respect to chart area.  
	*/
	location?: any;

	/**ID of the target element. 
	*/
	id?: string;

	/**Width and height of the chart. 
	*/
	size?: any;

	/**x-coordinate of the pointer, relative to the page 
	*/
	pageX?: number;

	/**y-coordinate of the pointer, relative to the page 
	*/
	pageY?: number;
}

export interface ChartMouseMoveEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the points with respect to chart area.  
	*/
	location?: any;

	/**ID of the target element. 
	*/
	id?: string;

	/**Width and height of the chart. 
	*/
	size?: any;

	/**x-coordinate of the pointer, relative to the page 
	*/
	pageX?: number;

	/**y-coordinate of the pointer, relative to the page 
	*/
	pageY?: number;
}

export interface ChartDoubleClickEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the points with respect to chart area.  
	*/
	location?: any;

	/**ID of the target element. 
	*/
	id?: string;

	/**Width and height of the chart. 
	*/
	size?: any;

	/**x-coordinate of the pointer, relative to the page 
	*/
	pageX?: number;

	/**y-coordinate of the pointer, relative to the page 
	*/
	pageY?: number;
}

export interface AnnotationClickEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**X and Y co-ordinate of the annotation in chart area.  
	*/
	location?: any;

	/**Information about the annotation, like Coordinate unit, Region, content 
	*/
	contentData?: any;

	/**x-coordinate of the pointer, relative to the page  
	*/
	pageX?: number;

	/**y-coordinate of the pointer, relative to the page 
	*/
	pageY?: number;
}

export interface AfterResizeEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Chart width, after resize  
	*/
	width?: number;

	/**Chart height, after resize  
	*/
	height?: number;

	/**Chart width, before resize  
	*/
	prevWidth?: number;

	/**Chart height, before resize  
	*/
	prevHeight?: number;

	/**Chart width, when the chart was first rendered  
	*/
	originalWidth?: number;

	/**Chart height, when the chart was first rendered  
	*/
	originalHeight?: number;
}

export interface BeforeResizeEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Chart width, before resize  
	*/
	currentWidth?: number;

	/**Chart height, before resize  
	*/
	currentHeight?: number;

	/**Chart width, after resize   
	*/
	newWidth?: number;

	/**Chart height, after resize   
	*/
	newHeight?: number;
}

export interface ErrorBarRenderingEventArgs {

	/**Set this option to true to cancel the event    
	*/
	cancel?: boolean;

	/**Instance of the chart model object
	*/
	model?: any;

	/**Name of the event
	*/
	type?: string;

	/**Error bar Object  
	*/
	errorbar?: any;
}

export interface AnnotationsMargin {

	/**Annotation is placed at the specified value above its original position.
	* @Default {0}
	*/
	bottom?: number;

	/**Annotation is placed at the specified value from left side of its original position.
	* @Default {0}
	*/
	left?: number;

	/**Annotation is placed at the specified value from the right side of its original position.
	* @Default {0}
	*/
	right?: number;

	/**Annotation is placed at the specified value under its original position.
	* @Default {0}
	*/
	top?: number;
}

export interface Annotations {

	/**Angle to rotate the annotation in degrees.
	* @Default {'0'}
	*/
	angle?: number;

	/**Text content or id of a HTML element to be displayed as annotation.
	*/
	content?: string;

	/**Specifies how annotations have to be placed in Chart.
	* @Default {none. See CoordinateUnit}
	*/
	coordinateUnit?: ej.datavisualization.Chart.CoordinateUnit|string;

	/**Specifies the horizontal alignment of the annotation.
	* @Default {middle. See HorizontalAlignment}
	*/
	horizontalAlignment?: ej.datavisualization.Chart.HorizontalAlignment|string;

	/**Options to customize the margin of annotation.
	*/
	margin?: AnnotationsMargin;

	/**Controls the opacity of the annotation.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies whether annotation has to be placed with respect to chart or series.
	* @Default {chart. See Region}
	*/
	region?: ej.datavisualization.Chart.Region|string;

	/**Specifies the vertical alignment of the annotation.
	* @Default {middle. See VerticalAlignment}
	*/
	verticalAlignment?: ej.datavisualization.Chart.VerticalAlignment|string;

	/**Controls the visibility of the annotation.
	* @Default {false}
	*/
	visible?: boolean;

	/**Represents the horizontal offset when coordinateUnit is pixels.when coordinateUnit is points, it represents the x-coordinate of axis bounded with xAxisName property or primary X axis when xAxisName is not provided.This property is not applicable when coordinateUnit is none.
	* @Default {0}
	*/
	x?: number;

	/**Name of the horizontal axis to be used for positioning the annotation. This property is applicable only when coordinateUnit is points.
	*/
	xAxisName?: string;

	/**Represents the vertical offset when coordinateUnit is pixels.When coordinateUnit is points, it represents the y-coordinate of axis bounded with yAxisName property or primary Y axis when yAxisName is not provided.This property is not applicable when coordinateUnit is none.
	* @Default {0}
	*/
	y?: number;

	/**Name of the vertical axis to be used for positioning the annotation.This property is applicable only when coordinateUnit is points.
	*/
	yAxisName?: string;
}

export interface Border {

	/**Border color of the chart.
	* @Default {null}
	*/
	color?: string;

	/**Opacity of the chart border.
	* @Default {0.3}
	*/
	opacity?: number;

	/**Width of the Chart border.
	* @Default {0}
	*/
	width?: number;
}

export interface ChartAreaBorder {

	/**Border color of the plot area.
	* @Default {Gray}
	*/
	color?: string;

	/**Opacity of the plot area border.
	* @Default {0.3}
	*/
	opacity?: number;

	/**Border width of the plot area.
	* @Default {0.5}
	*/
	width?: number;
}

export interface ChartArea {

	/**Background color of the plot area.
	* @Default {transparent}
	*/
	background?: string;

	/**Options for customizing the border of the plot area.
	*/
	border?: ChartAreaBorder;
}

export interface ColumnDefinitions {

	/**Specifies the unit to measure the width of the column in plotting area.
	* @Default {'pixel'. See Unit}
	*/
	unit?: ej.datavisualization.Chart.Unit|string;

	/**Width of the column in plotting area. Width is measured in either pixel or percentage based on the value of unit property.
	* @Default {50}
	*/
	columnWidth?: number;

	/**Color of the line that indicates the starting point of the column in plotting area.
	* @Default {transparent}
	*/
	lineColor?: string;

	/**Width of the line that indicates the starting point of the column in plot area.
	* @Default {1}
	*/
	lineWidth?: number;
}

export interface CommonSeriesOptionsBorder {

	/**Border color of all series.
	* @Default {transparent}
	*/
	color?: string;

	/**DashArray for border of the series.
	* @Default {null}
	*/
	dashArray?: string;

	/**Border width of all series.
	* @Default {1}
	*/
	width?: number;
}

export interface CommonSeriesOptionsFont {

	/**Font color of the text in all series.
	* @Default {#707070}
	*/
	color?: string;

	/**Font Family for all the series.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the font Style for all the series.
	* @Default {normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Specifies the font weight for all the series.
	* @Default {regular}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity for text in all the series.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size for text in all the series.
	* @Default {12px}
	*/
	size?: string;
}

export interface CommonSeriesOptionsMarkerBorder {

	/**Border color of the marker shape.
	* @Default {white}
	*/
	color?: string;

	/**Border width of the marker shape.
	* @Default {3}
	*/
	width?: number;
}

export interface CommonSeriesOptionsMarkerDataLabelBorder {

	/**Border color of the data label.
	* @Default {null}
	*/
	color?: string;

	/**Border width of the data label.
	* @Default {0.1}
	*/
	width?: number;
}

export interface CommonSeriesOptionsMarkerDataLabelConnectorLine {

	/**Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
	* @Default {line. See ConnectorLineType}
	*/
	type?: ej.datavisualization.Chart.ConnectorLineType|string;

	/**Width of the connector.
	* @Default {0.5}
	*/
	width?: number;
}

export interface CommonSeriesOptionsMarkerDataLabelFont {

	/**Font family of the data label.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the data label.
	* @Default {normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the data label.
	* @Default {regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the data label.
	* @Default {12px}
	*/
	size?: string;
}

export interface CommonSeriesOptionsMarkerDataLabelMargin {

	/**Bottom margin of the text.
	* @Default {5}
	*/
	bottom?: number;

	/**Left margin of the text.
	* @Default {5}
	*/
	left?: number;

	/**Right margin of the text.
	* @Default {5}
	*/
	right?: number;

	/**Top margin of the text.
	* @Default {5}
	*/
	top?: number;
}

export interface CommonSeriesOptionsMarkerDataLabel {

	/**Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
	* @Default {null}
	*/
	angle?: number;

	/**Options for customizing the border of the data label.
	*/
	border?: CommonSeriesOptionsMarkerDataLabelBorder;

	/**Options for displaying and customizing the line that connects point and data label.
	*/
	connectorLine?: CommonSeriesOptionsMarkerDataLabelConnectorLine;

	/**Background color of the data label.
	* @Default {null}
	*/
	fill?: string;

	/**Options for customizing the data label font.
	*/
	font?: CommonSeriesOptionsMarkerDataLabelFont;

	/**Horizontal alignment of the data label.
	* @Default {center}
	*/
	horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

	/**Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
	*/
	margin?: CommonSeriesOptionsMarkerDataLabelMargin;

	/**Opacity of the data label.
	* @Default {1}
	*/
	opacity?: number;

	/**Background shape of the data label.
	* @Default {none. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Name of a field in data source, where datalabel text is displayed.
	*/
	textMappingName?: string;

	/**Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
	* @Default {top. See TextPosition}
	*/
	textPosition?: ej.datavisualization.Chart.TextPosition|string;

	/**Vertical alignment of the data label.
	* @Default {center}
	*/
	verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

	/**Controls the visibility of the data labels.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface CommonSeriesOptionsMarkerSize {

	/**Height of the marker.
	* @Default {6}
	*/
	height?: number;

	/**Width of the marker.
	* @Default {6}
	*/
	width?: number;
}

export interface CommonSeriesOptionsMarker {

	/**Options for customizing the border of the marker shape.
	*/
	border?: CommonSeriesOptionsMarkerBorder;

	/**Options for displaying and customizing data labels.
	*/
	dataLabel?: CommonSeriesOptionsMarkerDataLabel;

	/**Color of the marker shape.
	* @Default {null}
	*/
	fill?: string;

	/**The URL for the Image to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
	*/
	imageUrl?: string;

	/**Opacity of the marker.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the shape of the marker.
	* @Default {circle. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Options for customizing the size of the marker shape.
	*/
	size?: CommonSeriesOptionsMarkerSize;

	/**Controls the visibility of the marker shape.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface CommonSeriesOptionsTooltipBorder {

	/**Border color of the tooltip.
	* @Default {null}
	*/
	color?: string;

	/**Border width of the tooltip.
	* @Default {1}
	*/
	width?: number;
}

export interface CommonSeriesOptionsTooltip {

	/**Options for customizing the border of the tooltip.
	*/
	border?: CommonSeriesOptionsTooltipBorder;

	/**Customize the corner radius of the tooltip rectangle.
	* @Default {0}
	*/
	rx?: number;

	/**Customize the corner radius of the tooltip rectangle.
	* @Default {0}
	*/
	ry?: number;

	/**Specifies the duration, the tooltip has to be displayed.
	* @Default {500ms}
	*/
	duration?: string;

	/**Enables/disables the animation of the tooltip when moving from one point to other.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Background color of the tooltip.
	* @Default {null}
	*/
	fill?: string;

	/**Format of the tooltip content.
	* @Default {#point.x# : #point.y#}
	*/
	format?: string;

	/**Opacity of the tooltip.
	* @Default {0.5}
	*/
	opacity?: number;

	/**Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
	* @Default {null}
	*/
	template?: string;

	/**Controls the visibility of the tooltip.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface CommonSeriesOptionsEmptyPointSettingsStyleBorder {

	/**Border color of the empty point.
	*/
	color?: string;

	/**Border width of the empty point.
	* @Default {1}
	*/
	width?: number;
}

export interface CommonSeriesOptionsEmptyPointSettingsStyle {

	/**Color of the empty point.
	*/
	color?: string;

	/**Options for customizing border of the empty point in the series.
	*/
	border?: CommonSeriesOptionsEmptyPointSettingsStyleBorder;
}

export interface CommonSeriesOptionsEmptyPointSettings {

	/**Controls the visibility of the empty point.
	* @Default {true}
	*/
	visible?: boolean;

	/**Specifies the mode of empty point.
	* @Default {gap}
	*/
	displayMode?: ej.datavisualization.Chart.EmptyPointMode|string;

	/**Options for customizing the color and border of the empty point in the series.
	*/
	style?: CommonSeriesOptionsEmptyPointSettingsStyle;
}

export interface CommonSeriesOptionsConnectorLine {

	/**Width of the connector line.
	* @Default {1}
	*/
	width?: number;

	/**Color of the connector line.
	* @Default {#565656}
	*/
	color?: string;

	/**DashArray of the connector line.
	* @Default {null}
	*/
	dashArray?: string;

	/**DashArray of the connector line.
	* @Default {1}
	*/
	opacity?: number;
}

export interface CommonSeriesOptionsErrorBarCap {

	/**Show/Hides the error bar cap.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the error bar cap.
	* @Default {1}
	*/
	width?: number;

	/**Length of the error bar cap.
	* @Default {1}
	*/
	length?: number;

	/**Color of the error bar cap.
	* @Default {â€œ#000000â€}
	*/
	fill?: string;
}

export interface CommonSeriesOptionsErrorBar {

	/**Show/hides the error bar
	* @Default {visible}
	*/
	visibility?: boolean;

	/**Specifies the type of error bar.
	* @Default {FixedValue}
	*/
	type?: ej.datavisualization.Chart.ErrorBarType|string;

	/**Specifies the mode of error bar.
	* @Default {vertical}
	*/
	mode?: ej.datavisualization.Chart.ErrorBarMode|string;

	/**Specifies the direction of error bar.
	* @Default {both}
	*/
	direction?: ej.datavisualization.Chart.ErrorBarDirection|string;

	/**Value of vertical error bar.
	* @Default {3}
	*/
	verticalErrorValue?: number;

	/**Value of horizontal  error bar.
	* @Default {1}
	*/
	horizontalErrorValue?: number;

	/**Value of positive horizontal error bar.
	* @Default {1}
	*/
	horizontalPositiveErrorValue?: number;

	/**Value of negative horizontal error bar.
	* @Default {1}
	*/
	horizontalNegativeErrorValue?: number;

	/**Value of positive vertical error bar.
	* @Default {5}
	*/
	verticalPositiveErrorValue?: number;

	/**Value of negative vertical error bar.
	* @Default {5}
	*/
	verticalNegativeErrorValue?: number;

	/**Fill color of the error bar.
	* @Default {#000000}
	*/
	fill?: string;

	/**Width of the error bar.
	* @Default {1}
	*/
	width?: number;

	/**Options for customizing the error bar cap.
	*/
	cap?: CommonSeriesOptionsErrorBarCap;
}

export interface CommonSeriesOptionsTrendlines {

	/**Show/hides the trendline.
	*/
	visibility?: boolean;

	/**Specifies the type of the trendline for the series.
	* @Default {linear. See TrendlinesType}
	*/
	type?: string;

	/**Name for the trendlines that is to be displayed in the legend text.
	* @Default {trendline}
	*/
	name?: string;

	/**Fill color of the trendlines.
	* @Default {#0000FF}
	*/
	fill?: string;

	/**Width of the trendlines.
	* @Default {1}
	*/
	width?: number;

	/**Opacity of the trendline.
	* @Default {1}
	*/
	opacity?: number;

	/**Pattern of dashes and gaps used to stroke the trendline.
	*/
	dashArray?: string;

	/**Future trends of the current series.
	* @Default {0}
	*/
	forwardForecast?: number;

	/**Past trends of the current series.
	* @Default {0}
	*/
	backwardForecast?: number;

	/**Specifies the order of the polynomial trendlines.
	* @Default {0}
	*/
	polynomialOrder?: number;

	/**Specifies the moving average starting period value.
	* @Default {2}
	*/
	period?: number;
}

export interface CommonSeriesOptionsHighlightSettingsBorder {

	/**Border color of the series/point on highlight.
	*/
	color?: string;

	/**Border width of the series/point on highlight.
	* @Default {2}
	*/
	width?: string;
}

export interface CommonSeriesOptionsHighlightSettings {

	/**Enables/disables the ability to highlight the series or data point interactively.
	* @Default {false}
	*/
	enable?: boolean;

	/**Specifies whether the series or data point has to be highlighted.
	* @Default {series. See Mode}
	*/
	mode?: ej.datavisualization.Chart.Mode|string;

	/**Color of the series/point on highlight.
	*/
	color?: string;

	/**Opacity of the series/point on highlight.
	* @Default {0.6}
	*/
	opacity?: number;

	/**Options for customizing the border of series on highlight.
	*/
	border?: CommonSeriesOptionsHighlightSettingsBorder;

	/**Specifies the pattern for the series/point on highlight.
	* @Default {none. See Pattern}
	*/
	pattern?: string;

	/**Custom pattern for the series on highlight.
	*/
	customPattern?: string;
}

export interface CommonSeriesOptionsSelectionSettingsBorder {

	/**Border color of the series/point on selection.
	*/
	color?: string;

	/**Border width of the series/point on selection.
	* @Default {2}
	*/
	width?: string;
}

export interface CommonSeriesOptionsSelectionSettings {

	/**Enables/disables the ability to select a series/data point interactively.
	* @Default {false}
	*/
	enable?: boolean;

	/**Specifies the type of selection.
	* @Default {single}
	*/
	type?: ej.datavisualization.Chart.SelectionType|string;

	/**Specifies whether the series or data point has to be selected.
	* @Default {series. See Mode}
	*/
	mode?: ej.datavisualization.Chart.Mode|string;

	/**Color of the series/point on selection.
	*/
	color?: string;

	/**Opacity of the series/point on selection.
	* @Default {0.6}
	*/
	opacity?: number;

	/**Options for customizing the border of the series on selection.
	*/
	border?: CommonSeriesOptionsSelectionSettingsBorder;

	/**Specifies the pattern for the series/point on selection.
	* @Default {none. See Pattern}
	*/
	pattern?: string;

	/**Custom pattern for the series on selection.
	*/
	customPattern?: string;
}

export interface CommonSeriesOptions {

	/**Options to customize the border of all the series.
	*/
	border?: CommonSeriesOptionsBorder;

	/**Pattern of dashes and gaps used to stroke all the line type series.
	*/
	dashArray?: string;

	/**Set the dataSource for all series. It can be an array of JSON objects or an instance of ej.DataManager.
	* @Default {null}
	*/
	dataSource?: any;

	/**Controls the size of the hole in doughnut series. Value ranges from 0 to 1
	* @Default {0.4}
	*/
	doughnutCoefficient?: number;

	/**Controls the size of the doughnut series. Value ranges from 0 to 1.
	* @Default {0.8}
	*/
	doughnutSize?: number;

	/**Specifies the type of series to be drawn in radar or polar series.
	* @Default {line. See DrawType}
	*/
	drawType?: ej.datavisualization.Chart.DrawType|string;

	/**Enable/disable the animation for all the series.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**To avoid overlapping of data labels smartly.
	* @Default {true}
	*/
	enableSmartLabels?: boolean;

	/**Start angle of pie/doughnut series.
	* @Default {null}
	*/
	endAngle?: number;

	/**Explodes the pie/doughnut slices on mouse move.
	* @Default {false}
	*/
	explode?: boolean;

	/**Explodes all the slice of pie/doughnut on render.
	* @Default {false}
	*/
	explodeAll?: boolean;

	/**Index of the point to be exploded from pie/doughnut/pyramid/funnel.
	* @Default {null}
	*/
	explodeIndex?: number;

	/**Specifies the distance of the slice from the center, when it is exploded.
	* @Default {0.4}
	*/
	explodeOffset?: number;

	/**Fill color for all the series.
	* @Default {null}
	*/
	fill?: string;

	/**Options for customizing the font of all the series.
	*/
	font?: CommonSeriesOptionsFont;

	/**Sets the height of the funnel in funnel series. Values can be either pixel or percentage.
	* @Default {32.7%}
	*/
	funnelHeight?: string;

	/**Sets the width of the funnel in funnel series. Values can be either pixel or percentage.
	* @Default {11.6%}
	*/
	funnelWidth?: string;

	/**Gap between the slices in pyramid and funnel series.
	* @Default {0}
	*/
	gapRatio?: number;

	/**Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
	* @Default {true}
	*/
	isClosed?: boolean;

	/**Specifies whether to stack the column series in polar/radar charts.
	* @Default {false}
	*/
	isStacking?: boolean;

	/**Renders the chart vertically. This is applicable only for cartesian type series.
	* @Default {false}
	*/
	isTransposed?: boolean;

	/**Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
	* @Default {inside. See LabelPosition}
	*/
	labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

	/**Specifies the line cap of the series.
	* @Default {butt. See LineCap}
	*/
	lineCap?: ej.datavisualization.Chart.LineCap|string;

	/**Specifies the type of shape to be used where two lines meet.
	* @Default {round. See LineJoin}
	*/
	lineJoin?: ej.datavisualization.Chart.LineJoin|string;

	/**Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
	*/
	marker?: CommonSeriesOptionsMarker;

	/**Opacity of the series.
	* @Default {1}
	*/
	opacity?: number;

	/**Name of a field in data source, where the fill color for all the data points is generated.
	*/
	palette?: string;

	/**Controls the size of pie series. Value ranges from 0 to 1.
	* @Default {0.8}
	*/
	pieCoefficient?: number;

	/**Specifies the mode of the pyramid series.
	* @Default {linear. See PyramidMode}
	*/
	pyramidMode?: ej.datavisualization.Chart.PyramidMode|string;

	/**Start angle from where the pie/doughnut series renders. By default it starts from 0.
	* @Default {null}
	*/
	startAngle?: number;

	/**Options for customizing the tooltip of chart.
	*/
	tooltip?: CommonSeriesOptionsTooltip;

	/**Specifies the type of the series to render in chart.
	* @Default {column. See Type}
	*/
	type?: ej.datavisualization.Chart.Type|string;

	/**Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
	* @Default {null}
	*/
	xAxisName?: string;

	/**Name of the property in the datasource that contains x value for the series.
	* @Default {null}
	*/
	xName?: string;

	/**Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
	* @Default {null}
	*/
	yAxisName?: string;

	/**Name of the property in the datasource that contains y value for the series.
	* @Default {null}
	*/
	yName?: string;

	/**Name of the property in the datasource that contains high value for the series.
	* @Default {null}
	*/
	high?: string;

	/**Name of the property in the datasource that contains low value for the series.
	* @Default {null}
	*/
	low?: string;

	/**Name of the property in the datasource that contains open value for the series.
	* @Default {null}
	*/
	open?: string;

	/**Name of the property in the datasource that contains close value for the series.
	* @Default {null}
	*/
	close?: string;

	/**Name of the property in the datasource that contains the size value for the bubble series.
	* @Default {null}
	*/
	size?: string;

	/**Options for customizing the empty point in the series.
	*/
	emptyPointSettings?: CommonSeriesOptionsEmptyPointSettings;

	/**Fill color for the positive column of the waterfall.
	* @Default {null}
	*/
	positiveFill?: string;

	/**Options for customizing the waterfall connector line.
	*/
	connectorLine?: CommonSeriesOptionsConnectorLine;

	/**Options to customize the error bar in series.
	*/
	errorBar?: CommonSeriesOptionsErrorBar;

	/**Option to add the trendlines to chart.
	*/
	trendlines?: Array<CommonSeriesOptionsTrendlines>;

	/**Options for customizing the appearance of the series or data point while highlighting.
	*/
	highlightSettings?: CommonSeriesOptionsHighlightSettings;

	/**Options for customizing the appearance of the series/data point on selection.
	*/
	selectionSettings?: CommonSeriesOptionsSelectionSettings;
}

export interface CrosshairMarkerBorder {

	/**Border width of the marker.
	* @Default {3}
	*/
	width?: number;
}

export interface CrosshairMarkerSize {

	/**Height of the marker.
	* @Default {10}
	*/
	height?: number;

	/**Width of the marker.
	* @Default {10}
	*/
	width?: number;
}

export interface CrosshairMarker {

	/**Options for customizing the border.
	*/
	border?: CrosshairMarkerBorder;

	/**Opacity of the marker.
	* @Default {true}
	*/
	opacity?: boolean;

	/**Options for customizing the size of the marker.
	*/
	size?: CrosshairMarkerSize;

	/**Show/hides the marker.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface Crosshair {

	/**Options for customizing the marker in crosshair.
	*/
	marker?: CrosshairMarker;

	/**Specifies the type of the crosshair. It can be trackball or crosshair
	* @Default {crosshair. See CrosshairType}
	*/
	type?: ej.datavisualization.Chart.CrosshairType|string;

	/**Show/hides the crosshair/trackball visibility.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface IndicatorsHistogramBorder {

	/**Color of the histogram border in MACD indicator.
	* @Default {#9999ff}
	*/
	color?: string;

	/**Controls the width of histogram border line in MACD indicator.
	* @Default {1}
	*/
	width?: number;
}

export interface IndicatorsHistogram {

	/**Options to customize the histogram border in MACD indicator.
	*/
	border?: IndicatorsHistogramBorder;

	/**Color of histogram columns in MACD indicator.
	* @Default {#ccccff}
	*/
	fill?: string;

	/**Opacity of histogram columns in MACD indicator.
	* @Default {1}
	*/
	opacity?: number;
}

export interface IndicatorsLowerLine {

	/**Color of lower line.
	* @Default {#008000}
	*/
	fill?: string;

	/**Width of the lower line.
	* @Default {2}
	*/
	width?: number;
}

export interface IndicatorsMacdLine {

	/**Color of MACD line.
	* @Default {#ff9933}
	*/
	fill?: string;

	/**Width of the MACD line.
	* @Default {2}
	*/
	width?: number;
}

export interface IndicatorsPeriodLine {

	/**Color of period line in indicator.
	* @Default {blue}
	*/
	fill?: string;

	/**Width of the period line in indicators.
	* @Default {2}
	*/
	width?: number;
}

export interface IndicatorsTooltipBorder {

	/**Border color of indicator tooltip.
	* @Default {null}
	*/
	color?: string;

	/**Border width of indicator tooltip.
	* @Default {1}
	*/
	width?: number;
}

export interface IndicatorsTooltip {

	/**Option to customize the border of indicator tooltip.
	*/
	border?: IndicatorsTooltipBorder;

	/**Specifies the animation duration of indicator tooltip.
	* @Default {500ms}
	*/
	duration?: string;

	/**Enables/disables the tooltip animation.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Format of indicator tooltip. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
	* @Default {#point.x# : #point.y#}
	*/
	format?: string;

	/**Background color of indicator tooltip.
	* @Default {null}
	*/
	fill?: string;

	/**Opacity of indicator tooltip.
	* @Default {0.95}
	*/
	opacity?: number;

	/**Controls the visibility of indicator tooltip.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface IndicatorsUpperLine {

	/**Fill color of the upper line in indicators
	* @Default {#ff9933}
	*/
	fill?: string;

	/**Width of the upper line in indicators.
	* @Default {2}
	*/
	width?: number;
}

export interface Indicators {

	/**The dPeriod value for stochastic indicator.
	* @Default {3}
	*/
	dPeriod?: number;

	/**Enables/disables the animation.
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**Color of the technical indicator.
	* @Default {#00008B}
	*/
	fill?: string;

	/**Options to customize the histogram in MACD indicator.
	*/
	histogram?: IndicatorsHistogram;

	/**Specifies the k period in stochastic indicator.
	* @Default {3}
	*/
	kPeriod?: number;

	/**Specifies the long period in MACD indicator.
	* @Default {26}
	*/
	longPeriod?: number;

	/**Options to customize the lower line in indicators.
	*/
	lowerLine?: IndicatorsLowerLine;

	/**Options to customize the MACD line.
	*/
	macdLine?: IndicatorsMacdLine;

	/**Specifies the type of the MACD indicator.
	* @Default {line. See MACDType}
	*/
	macdType?: string;

	/**Specifies period value in indicator.
	* @Default {14}
	*/
	period?: number;

	/**Options to customize the period line in indicators.
	*/
	periodLine?: IndicatorsPeriodLine;

	/**Name of the series for which indicator has to be drawn.
	*/
	seriesName?: string;

	/**Specifies the short period in MACD indicator.
	* @Default {13}
	*/
	shortPeriod?: number;

	/**Specifies the standard deviation value for Bollinger band indicator.
	* @Default {2}
	*/
	standardDeviations?: number;

	/**Options to customize the tooltip.
	*/
	tooltip?: IndicatorsTooltip;

	/**Trigger value of MACD indicator.
	* @Default {9}
	*/
	trigger?: number;

	/**Specifies the visibility of indicator.
	* @Default {visible}
	*/
	visibility?: string;

	/**Specifies the type of indicator that has to be rendered.
	* @Default {sma. See IndicatorsType}
	*/
	type?: string;

	/**Options to customize the upper line in indicators
	*/
	upperLine?: IndicatorsUpperLine;

	/**Width of the indicator line.
	* @Default {2}
	*/
	width?: number;

	/**Name of the horizontal axis used for indicator. Primary X axis is used when x axis name is not specified.
	*/
	xAxisName?: string;

	/**Name of the vertical axis used for indicator. Primary Y axis is used when y axis name is not specified
	*/
	yAxisName?: string;
}

export interface LegendBorder {

	/**Border color of the legend.
	* @Default {transparent}
	*/
	color?: string;

	/**Border width of the legend.
	* @Default {1}
	*/
	width?: number;
}

export interface LegendFont {

	/**Font family for legend item text.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style for legend item text.
	* @Default {Normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight for legend item text.
	* @Default {Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Font size for legend item text.
	* @Default {12px}
	*/
	size?: string;
}

export interface LegendItemStyleBorder {

	/**Border color of the legend items.
	* @Default {transparent}
	*/
	color?: string;

	/**Border width of the legend items.
	* @Default {1}
	*/
	width?: number;
}

export interface LegendItemStyle {

	/**Options for customizing the border of legend items.
	*/
	border?: LegendItemStyleBorder;

	/**Height of the shape in legend items.
	* @Default {10}
	*/
	height?: number;

	/**Width of the shape in legend items.
	* @Default {10}
	*/
	width?: number;
}

export interface LegendLocation {

	/**X value or horizontal offset to position the legend in chart.
	* @Default {0}
	*/
	x?: number;

	/**Y value or vertical offset to position the legend.
	* @Default {0}
	*/
	y?: number;
}

export interface LegendSize {

	/**Height of the legend. Height can be specified in either pixel or percentage.
	* @Default {null}
	*/
	height?: string;

	/**Width of the legend. Width can be specified in either pixel or percentage.
	* @Default {null}
	*/
	width?: string;
}

export interface LegendTitleFont {

	/**Font family for the text in legend title.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style for legend title.
	* @Default {normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight for legend title.
	* @Default {normal. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Font size for legend title.
	* @Default {12px}
	*/
	size?: string;
}

export interface LegendTitle {

	/**Options to customize the font used for legend title
	*/
	font?: LegendTitleFont;

	/**Text to be displayed in legend title.
	*/
	text?: string;

	/**Alignment of the legend title.
	* @Default {center. See Alignment}
	*/
	textAlignment?: ej.datavisualization.Chart.Alignment|string;
}

export interface Legend {

	/**Horizontal alignment of the legend.
	* @Default {Center. See Alignment}
	*/
	alignment?: ej.datavisualization.Chart.Alignment|string;

	/**Background for the legend. Use this property to add a background image or background color for the legend.
	*/
	background?: string;

	/**Options for customizing the legend border.
	*/
	border?: LegendBorder;

	/**Number of columns to arrange the legend items.
	* @Default {null}
	*/
	columnCount?: number;

	/**Controls whether legend has to use scrollbar or not. When enabled, scroll bar appears depending upon size and position properties of legend.
	* @Default {true}
	*/
	enableScrollbar?: boolean;

	/**Fill color for the legend items. By using this property, it displays all legend item shapes in same color.Legend items representing invisible series is displayed in gray color.
	* @Default {null}
	*/
	fill?: string;

	/**Options to customize the font used for legend item text.
	*/
	font?: LegendFont;

	/**Gap or padding between the legend items.
	* @Default {10}
	*/
	itemPadding?: number;

	/**Options to customize the style of legend items.
	*/
	itemStyle?: LegendItemStyle;

	/**Options to customize the location of chart legend. Legend is placed in provided location only when value of position property is custom
	*/
	location?: LegendLocation;

	/**Opacity of the legend.
	* @Default {1}
	*/
	opacity?: number;

	/**Places the legend at specified position. Legend can be placed at left, right, top or bottom of the chart area.To manually specify the location of legend, set custom as value to this property.
	* @Default {Bottom. See Position}
	*/
	position?: ej.datavisualization.Chart.Position|string;

	/**Number of rows to arrange the legend items.
	* @Default {null}
	*/
	rowCount?: number;

	/**Shape of the legend items. Default shape for pie and doughnut series is circle and all other series uses rectangle.
	* @Default {None. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Options to customize the size of the legend.
	*/
	size?: LegendSize;

	/**Options to customize the legend title.
	*/
	title?: LegendTitle;

	/**Specifies the action taken when the legend width is more than the textWidth.
	* @Default {none. See textOverflow}
	*/
	textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

	/**Text width for legend item.
	* @Default {34}
	*/
	textWidth?: number;

	/**Controls the visibility of the legend.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface PrimaryXAxisAlternateGridBandEven {

	/**Fill color for the even grid bands.
	* @Default {transparent}
	*/
	fill?: string;

	/**Opacity of the even grid band.
	* @Default {1}
	*/
	opacity?: number;
}

export interface PrimaryXAxisAlternateGridBandOdd {

	/**Fill color of the odd grid bands
	* @Default {transparent}
	*/
	fill?: string;

	/**Opacity of odd grid band
	* @Default {1}
	*/
	opacity?: number;
}

export interface PrimaryXAxisAlternateGridBand {

	/**Options for customizing even grid band.
	*/
	even?: PrimaryXAxisAlternateGridBandEven;

	/**Options for customizing odd grid band.
	*/
	odd?: PrimaryXAxisAlternateGridBandOdd;
}

export interface PrimaryXAxisAxisLine {

	/**Pattern of dashes and gaps to be applied to the axis line.
	* @Default {null}
	*/
	dashArray?: string;

	/**Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
	* @Default {null}
	*/
	offset?: number;

	/**Show/hides the axis line.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of axis line.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryXAxisCrosshairLabel {

	/**Show/hides the crosshair label associated with this axis.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface PrimaryXAxisFont {

	/**Font family of labels.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of labels.
	* @Default {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the label.
	* @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the axis labels.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the axis labels.
	* @Default {13px}
	*/
	size?: string;
}

export interface PrimaryXAxisMajorGridLines {

	/**Pattern of dashes and gaps used to stroke the major grid lines.
	* @Default {null}
	*/
	dashArray?: string;

	/**Opacity of major grid lines.
	* @Default {1}
	*/
	opacity?: number;

	/**Show/hides the major grid lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the major grid lines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryXAxisMajorTickLines {

	/**Length of the major tick lines.
	* @Default {5}
	*/
	size?: number;

	/**Show/hides the major tick lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the major tick lines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryXAxisMinorGridLines {

	/**Patterns of dashes and gaps used to stroke the minor grid lines.
	* @Default {null}
	*/
	dashArray?: string;

	/**Show/hides the minor grid lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the minorGridLines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryXAxisMinorTickLines {

	/**Length of the minor tick lines.
	* @Default {5}
	*/
	size?: number;

	/**Show/hides the minor tick lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the minor tick line.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryXAxisRange {

	/**Minimum value of the axis range.
	* @Default {null}
	*/
	minimum?: number;

	/**Maximum value of the axis range.
	* @Default {null}
	*/
	maximum?: number;

	/**Interval of the axis range.
	* @Default {null}
	*/
	interval?: number;
}

export interface PrimaryXAxisStripLineFont {

	/**Font color of the strip line text.
	* @Default {black}
	*/
	color?: string;

	/**Font family of the strip line text.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the strip line text.
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the strip line text.
	* @Default {regular}
	*/
	fontWeight?: string;

	/**Opacity of the strip line text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the strip line text.
	* @Default {12px}
	*/
	size?: string;
}

export interface PrimaryXAxisStripLine {

	/**Border color of the strip line.
	* @Default {gray}
	*/
	borderColor?: string;

	/**Background color of the strip line.
	* @Default {gray}
	*/
	color?: string;

	/**End value of the strip line.
	* @Default {null}
	*/
	end?: number;

	/**Options for customizing the font of the text.
	*/
	font?: PrimaryXAxisStripLineFont;

	/**Start value of the strip line.
	* @Default {null}
	*/
	start?: number;

	/**Indicates whether to render the strip line from the minimum/start value of the axis. This property does not work when start property is set.
	* @Default {false}
	*/
	startFromAxis?: boolean;

	/**Specifies text to be displayed inside the strip line.
	* @Default {stripLine}
	*/
	text?: string;

	/**Specifies the alignment of the text inside the strip line.
	* @Default {middlecenter. See TextAlignment}
	*/
	textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

	/**Show/hides the strip line.
	* @Default {false}
	*/
	visible?: boolean;

	/**Width of the strip line.
	* @Default {0}
	*/
	width?: number;

	/**Specifies the order where the strip line and the series have to be rendered. When zOrder is â€œbehindâ€, strip line is rendered under the series and when it is â€œoverâ€, it is rendered above the series.
	* @Default {over. See ZIndex}
	*/
	zIndex?: ej.datavisualization.Chart.ZIndex|string;
}

export interface PrimaryXAxisTitleFont {

	/**Font family of the title text.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the title text.
	* @Default {ej.datavisualization.Chart.FontStyle.Normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the title text.
	* @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the axis title text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the axis title.
	* @Default {16px}
	*/
	size?: string;
}

export interface PrimaryXAxisTitle {

	/**Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
	* @Default {false}
	*/
	enableTrim?: boolean;

	/**Options for customizing the title font.
	*/
	font?: PrimaryXAxisTitleFont;

	/**Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
	* @Default {34}
	*/
	maximumTitleWidth?: number;

	/**Title for the axis.
	*/
	text?: string;

	/**Controls the visibility of axis title.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface PrimaryXAxis {

	/**Options for customizing horizontal axis alternate grid band.
	*/
	alternateGridBand?: PrimaryXAxisAlternateGridBand;

	/**Options for customizing the axis line.
	*/
	axisLine?: PrimaryXAxisAxisLine;

	/**Specifies the index of the column where the axis is associated, when the chart area is divided into multiple plot areas by using columnDefinitions.
	* @Default {null}
	*/
	columnIndex?: number;

	/**Specifies the number of columns or plot areas an axis has to span horizontally.
	* @Default {null}
	*/
	columnSpan?: number;

	/**Options to customize the crosshair label.
	*/
	crosshairLabel?: PrimaryXAxisCrosshairLabel;

	/**With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
	* @Default {null}
	*/
	desiredIntervals?: number;

	/**Specifies the position of labels at the edge of the axis.
	* @Default {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
	*/
	edgeLabelPlacement?: ej.datavisualization.Chart.EdgeLabelPlacement|string;

	/**Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
	* @Default {false}
	*/
	enableTrim?: boolean;

	/**Options for customizing the font of the axis Labels.
	*/
	font?: PrimaryXAxisFont;

	/**Specifies the type of interval in date time axis.
	* @Default {null. See IntervalType}
	*/
	intervalType?: ej.datavisualization.Chart.IntervalType|string;

	/**Specifies whether to inverse the axis.
	* @Default {false}
	*/
	isInversed?: boolean;

	/**Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
	* @Default {null}
	*/
	labelFormat?: string;

	/**Specifies the action to take when the axis labels are overlapping with each other.
	* @Default {ej.datavisualization.Chart.LabelIntersectAction.None. See LabelIntersectAction}
	*/
	labelIntersectAction?: ej.datavisualization.Chart.LabelIntersectAction|string;

	/**Specifies the position of the axis labels.
	* @Default {outside. See LabelPosition}
	*/
	labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

	/**Angle in degrees to rotate the axis labels.
	* @Default {null}
	*/
	labelRotation?: number;

	/**Logarithmic base value. This is applicable only for logarithmic axis.
	* @Default {10}
	*/
	logBase?: number;

	/**Options for customizing major gird lines.
	*/
	majorGridLines?: PrimaryXAxisMajorGridLines;

	/**Options for customizing the major tick lines.
	*/
	majorTickLines?: PrimaryXAxisMajorTickLines;

	/**Maximum number of labels to be displayed in every 100 pixels.
	* @Default {3}
	*/
	maximumLabels?: number;

	/**Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
	* @Default {34}
	*/
	maximumLabelWidth?: number;

	/**Options for customizing the minor grid lines.
	*/
	minorGridLines?: PrimaryXAxisMinorGridLines;

	/**Options for customizing the minor tick lines.
	*/
	minorTickLines?: PrimaryXAxisMinorTickLines;

	/**Specifies the number of minor ticks per interval.
	* @Default {null}
	*/
	minorTicksPerInterval?: number;

	/**Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
	* @Default {null}
	*/
	name?: string;

	/**Specifies whether to render the axis at the opposite side of its default position.
	* @Default {false}
	*/
	opposedPosition?: boolean;

	/**Specifies the padding for the plot area.
	* @Default {10}
	*/
	plotOffset?: number;

	/**Options to customize the range of the axis.
	*/
	range?: PrimaryXAxisRange;

	/**Specifies the padding for the axis range.
	* @Default {None. See RangePadding}
	*/
	rangePadding?: ej.datavisualization.Chart.RangePadding|string;

	/**Rounds the number to the given number of decimals.
	* @Default {null}
	*/
	roundingPlaces?: number;

	/**Options for customizing the strip lines.
	* @Default {[ ]}
	*/
	stripLine?: Array<PrimaryXAxisStripLine>;

	/**Specifies the position of the axis tick lines.
	* @Default {outside. See TickLinesPosition}
	*/
	tickLinesPosition?: ej.datavisualization.Chart.TickLinesPosition|string;

	/**Options for customizing the axis title.
	*/
	title?: PrimaryXAxisTitle;

	/**Specifies the type of data the axis is handling.
	* @Default {null. See ValueType}
	*/
	valueType?: ej.datavisualization.Chart.ValueType|string;

	/**Show/hides the axis.
	* @Default {true}
	*/
	visible?: boolean;

	/**The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
	* @Default {1}
	*/
	zoomFactor?: number;

	/**Position of the zoomed axis. Value ranges from 0 to 1.
	* @Default {0}
	*/
	zoomPosition?: number;
}

export interface PrimaryYAxisAlternateGridBandEven {

	/**Fill color for the even grid bands.
	* @Default {transparent}
	*/
	fill?: string;

	/**Opacity of the even grid band.
	* @Default {1}
	*/
	opacity?: number;
}

export interface PrimaryYAxisAlternateGridBandOdd {

	/**Fill color of the odd grid bands.
	* @Default {transparent}
	*/
	fill?: string;

	/**Opacity of odd grid band.
	* @Default {1}
	*/
	opacity?: number;
}

export interface PrimaryYAxisAlternateGridBand {

	/**Options for customizing even grid band.
	*/
	even?: PrimaryYAxisAlternateGridBandEven;

	/**Options for customizing odd grid band.
	*/
	odd?: PrimaryYAxisAlternateGridBandOdd;
}

export interface PrimaryYAxisAxisLine {

	/**Pattern of dashes and gaps to be applied to the axis line.
	* @Default {null}
	*/
	dashArray?: string;

	/**Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
	* @Default {null}
	*/
	offset?: number;

	/**Show/hides the axis line.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of axis line.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryYAxisCrosshairLabel {

	/**Show/hides the crosshair label associated with this axis.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface PrimaryYAxisFont {

	/**Font family of labels.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of labels.
	* @Default {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the label.
	* @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the axis labels.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the axis labels.
	* @Default {13px}
	*/
	size?: string;
}

export interface PrimaryYAxisMajorGridLines {

	/**Pattern of dashes and gaps used to stroke the major grid lines.
	* @Default {null}
	*/
	dashArray?: string;

	/**Opacity of major grid lines.
	* @Default {1}
	*/
	opacity?: number;

	/**Show/hides the major grid lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the major grid lines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryYAxisMajorTickLines {

	/**Length of the major tick lines.
	* @Default {5}
	*/
	size?: number;

	/**Show/hides the major tick lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the major tick lines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryYAxisMinorGridLines {

	/**Patterns of dashes and gaps used to stroke the minor grid lines.
	* @Default {null}
	*/
	dashArray?: string;

	/**Show/hides the minor grid lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the minorGridLines.
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryYAxisMinorTickLines {

	/**Length of the minor tick lines.
	* @Default {5}
	*/
	size?: number;

	/**Show/hides the minor tick lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the minor tick line
	* @Default {1}
	*/
	width?: number;
}

export interface PrimaryYAxisStripLineFont {

	/**Font color of the strip line text.
	* @Default {black}
	*/
	color?: string;

	/**Font family of the strip line text.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the strip line text.
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the strip line text.
	* @Default {regular}
	*/
	fontWeight?: string;

	/**Opacity of the strip line text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the strip line text.
	* @Default {12px}
	*/
	size?: string;
}

export interface PrimaryYAxisStripLine {

	/**Border color of the strip line.
	* @Default {gray}
	*/
	borderColor?: string;

	/**Background color of the strip line.
	* @Default {gray}
	*/
	color?: string;

	/**End value of the strip line.
	* @Default {null}
	*/
	end?: number;

	/**Options for customizing the font of the text.
	*/
	font?: PrimaryYAxisStripLineFont;

	/**Start value of the strip line.
	* @Default {null}
	*/
	start?: number;

	/**Indicates whether to render the strip line from the minimum/start value of the axis. This property wonâ€™t work when start property is set.
	* @Default {false}
	*/
	startFromAxis?: boolean;

	/**Specifies text to be displayed inside the strip line.
	* @Default {stripLine}
	*/
	text?: string;

	/**Specifies the alignment of the text inside the strip line.
	* @Default {middlecenter. See TextAlignment}
	*/
	textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

	/**Show/hides the strip line.
	* @Default {false}
	*/
	visible?: boolean;

	/**Width of the strip line.
	* @Default {0}
	*/
	width?: number;

	/**Specifies the order in which strip line and the series have to be rendered. When zOrder is â€œbehindâ€, strip line is rendered below the series and when it is â€œoverâ€, it is rendered above the series.
	* @Default {over. See ZIndex}
	*/
	zIndex?: ej.datavisualization.Chart.ZIndex|string;
}

export interface PrimaryYAxisTitleFont {

	/**Font family of the title text.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the title text.
	* @Default {ej.datavisualization.Chart.FontStyle.Normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the title text.
	* @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the axis title text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the axis title.
	* @Default {16px}
	*/
	size?: string;
}

export interface PrimaryYAxisTitle {

	/**Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
	* @Default {ej.datavisualization.Chart.enableTrim}
	*/
	enableTrim?: boolean;

	/**Options for customizing the title font.
	*/
	font?: PrimaryYAxisTitleFont;

	/**Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
	* @Default {ej.datavisualization.Chart.maximumTitleWidth.null}
	*/
	maximumTitleWidth?: number;

	/**Title for the axis.
	*/
	text?: string;

	/**Controls the visibility of axis title.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface PrimaryYAxis {

	/**Options for customizing vertical axis alternate grid band.
	*/
	alternateGridBand?: PrimaryYAxisAlternateGridBand;

	/**Options for customizing the axis line.
	*/
	axisLine?: PrimaryYAxisAxisLine;

	/**Options to customize the crosshair label.
	*/
	crosshairLabel?: PrimaryYAxisCrosshairLabel;

	/**With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
	* @Default {null}
	*/
	desiredIntervals?: number;

	/**Specifies the position of labels at the edge of the axis.
	* @Default {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
	*/
	edgeLabelPlacement?: ej.datavisualization.Chart.EdgeLabelPlacement|string;

	/**Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
	* @Default {false}
	*/
	enableTrim?: boolean;

	/**Options for customizing the font of the axis Labels.
	*/
	font?: PrimaryYAxisFont;

	/**Specifies the type of interval in date time axis.
	* @Default {null. See IntervalType}
	*/
	intervalType?: ej.datavisualization.Chart.IntervalType|string;

	/**Specifies whether to inverse the axis.
	* @Default {false}
	*/
	isInversed?: boolean;

	/**Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
	* @Default {null}
	*/
	labelFormat?: string;

	/**Specifies the action to take when the axis labels are overlapping with each other.
	* @Default {ej.datavisualization.Chart.LabelIntersectAction.None}
	*/
	labelIntersectAction?: ej.datavisualization.Chart.LabelIntersectAction|string;

	/**Default Value
	* @Default {outside. See LabelPosition}
	*/
	labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

	/**Logarithmic base value. This is applicable only for logarithmic axis.
	* @Default {10}
	*/
	logBase?: number;

	/**Options for customizing major gird lines.
	*/
	majorGridLines?: PrimaryYAxisMajorGridLines;

	/**Options for customizing the major tick lines.
	*/
	majorTickLines?: PrimaryYAxisMajorTickLines;

	/**Maximum number of labels to be displayed in every 100 pixels.
	* @Default {3}
	*/
	maximumLabels?: number;

	/**Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
	* @Default {ej.datavisualization.Chart.maximumLabelWidth type {int}}
	*/
	maximumLabelWidth?: number;

	/**Options for customizing the minor grid lines.
	*/
	minorGridLines?: PrimaryYAxisMinorGridLines;

	/**Options for customizing the minor tick lines.
	*/
	minorTickLines?: PrimaryYAxisMinorTickLines;

	/**Specifies the number of minor ticks per interval.
	* @Default {null}
	*/
	minorTicksPerInterval?: number;

	/**Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
	* @Default {null}
	*/
	name?: string;

	/**Specifies whether to render the axis at the opposite side of its default position.
	* @Default {false}
	*/
	opposedPosition?: boolean;

	/**Specifies the padding for the plot area.
	* @Default {10}
	*/
	plotOffset?: number;

	/**Specifies the padding for the axis range.
	* @Default {ej.datavisualization.Chart.RangePadding.None. See RangePadding}
	*/
	rangePadding?: ej.datavisualization.Chart.RangePadding|string;

	/**Rounds the number to the given number of decimals.
	* @Default {null}
	*/
	roundingPlaces?: number;

	/**Specifies the index of the row to which the axis is associated, when the chart area is divided into multiple plot areas by using rowDefinitions.
	* @Default {null}
	*/
	rowIndex?: number;

	/**Specifies the number of row or plot areas an axis has to span vertically.
	* @Default {null}
	*/
	rowSpan?: number;

	/**Options for customizing the strip lines.
	* @Default {[ ]}
	*/
	stripLine?: Array<PrimaryYAxisStripLine>;

	/**Specifies the position of the axis tick lines.
	* @Default {outside. See TickLinesPosition}
	*/
	tickLinesPosition?: ej.datavisualization.Chart.TickLinesPosition|string;

	/**Options for customizing the axis title.
	*/
	title?: PrimaryYAxisTitle;

	/**Specifies the type of data the axis is handling.
	* @Default {null. See ValueType}
	*/
	valueType?: ej.datavisualization.Chart.ValueType|string;

	/**Show/hides the axis.
	* @Default {true}
	*/
	visible?: boolean;

	/**The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Values ranges from 0 to 1.
	* @Default {1}
	*/
	zoomFactor?: number;

	/**Position of the zoomed axis. Value ranges from 0 to 1
	* @Default {0}
	*/
	zoomPosition?: number;
}

export interface RowDefinitions {

	/**Specifies the unit to measure the height of the row in plotting area.
	* @Default {'pixel'. See Unit}
	*/
	unit?: ej.datavisualization.Chart.Unit|string;

	/**Height of the row in plotting area. Height is measured in either pixel or percentage based on the value of unit property.
	* @Default {50}
	*/
	rowHeight?: number;

	/**Color of the line that indicates the starting point of the row in plotting area.
	* @Default {transparent}
	*/
	lineColor?: string;

	/**Width of the line that indicates the starting point of the row in plot area.
	* @Default {1}
	*/
	lineWidth?: number;
}

export interface SeriesBorder {

	/**Border color of the series.
	* @Default {transparent}
	*/
	color?: string;

	/**Border width of the series.
	* @Default {1}
	*/
	width?: number;

	/**DashArray for border of the series.
	* @Default {null}
	*/
	dashArray?: string;
}

export interface SeriesFont {

	/**Font color of the series text.
	* @Default {#707070}
	*/
	color?: string;

	/**Font Family of the series.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font Style of the series.
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the series.
	* @Default {Regular}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of series text.
	* @Default {1}
	*/
	opacity?: number;

	/**Size of the series text.
	* @Default {12px}
	*/
	size?: string;
}

export interface SeriesMarkerBorder {

	/**Border color of the marker shape.
	* @Default {white}
	*/
	color?: string;

	/**Border width of the marker shape.
	* @Default {3}
	*/
	width?: number;
}

export interface SeriesMarkerDataLabelBorder {

	/**Border color of the data label.
	* @Default {null}
	*/
	color?: string;

	/**Border width of the data label.
	* @Default {0.1}
	*/
	width?: number;
}

export interface SeriesMarkerDataLabelConnectorLine {

	/**Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
	* @Default {line. See ConnectorLineType}
	*/
	type?: ej.datavisualization.Chart.Type|string;

	/**Width of the connector.
	* @Default {0.5}
	*/
	width?: number;
}

export interface SeriesMarkerDataLabelFont {

	/**Font family of the data label.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the data label.
	* @Default {normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the data label.
	* @Default {regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the data label.
	* @Default {12px}
	*/
	size?: string;
}

export interface SeriesMarkerDataLabelMargin {

	/**Bottom margin of the text.
	* @Default {5}
	*/
	bottom?: number;

	/**Left margin of the text.
	* @Default {5}
	*/
	left?: number;

	/**Right margin of the text.
	* @Default {5}
	*/
	right?: number;

	/**Top margin of the text.
	* @Default {5}
	*/
	top?: number;
}

export interface SeriesMarkerDataLabel {

	/**Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
	* @Default {null}
	*/
	angle?: number;

	/**Options for customizing the border of the data label.
	*/
	border?: SeriesMarkerDataLabelBorder;

	/**Options for displaying and customizing the line that connects point and data label.
	*/
	connectorLine?: SeriesMarkerDataLabelConnectorLine;

	/**Background color of the data label.
	* @Default {null}
	*/
	fill?: string;

	/**Options for customizing the data label font.
	*/
	font?: SeriesMarkerDataLabelFont;

	/**Horizontal alignment of the data label.
	* @Default {center}
	*/
	horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

	/**Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
	*/
	margin?: SeriesMarkerDataLabelMargin;

	/**Opacity of the data label.
	* @Default {1}
	*/
	opacity?: number;

	/**Background shape of the data label.
	* @Default {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Name of a field in data source where datalabel text is displayed.
	*/
	textMappingName?: string;

	/**Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
	* @Default {top. See TextPosition}
	*/
	textPosition?: ej.datavisualization.Chart.TextPosition|string;

	/**Vertical alignment of the data label.
	* @Default {'center'}
	*/
	verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

	/**Controls the visibility of the data labels.
	* @Default {false}
	*/
	visible?: boolean;

	/**Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
	*/
	template?: string;

	/**Moves the label vertically by some offset.
	* @Default {0}
	*/
	offset?: number;
}

export interface SeriesMarkerSize {

	/**Height of the marker.
	* @Default {6}
	*/
	height?: number;

	/**Width of the marker.
	* @Default {6}
	*/
	width?: number;
}

export interface SeriesMarker {

	/**Options for customizing the border of the marker shape.
	*/
	border?: SeriesMarkerBorder;

	/**Options for displaying and customizing data labels.
	*/
	dataLabel?: SeriesMarkerDataLabel;

	/**Color of the marker shape.
	* @Default {null}
	*/
	fill?: string;

	/**The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
	*/
	imageUrl?: string;

	/**Opacity of the marker.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the shape of the marker.
	* @Default {circle. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Options for customizing the size of the marker shape.
	*/
	size?: SeriesMarkerSize;

	/**Controls the visibility of the marker shape.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface SeriesEmptyPointSettingsStyleBorder {

	/**Border color of the empty point.
	*/
	color?: string;

	/**Border width of the empty point.
	* @Default {1}
	*/
	width?: number;
}

export interface SeriesEmptyPointSettingsStyle {

	/**Color of the empty point.
	*/
	color?: string;

	/**Options for customizing border of the empty point in the series.
	*/
	border?: SeriesEmptyPointSettingsStyleBorder;
}

export interface SeriesEmptyPointSettings {

	/**Controls the visibility of the empty point.
	* @Default {true}
	*/
	visible?: boolean;

	/**Specifies the mode of empty point.
	* @Default {gap}
	*/
	displayMode?: ej.datavisualization.Chart.EmptyPointMode|string;

	/**Options for customizing the color and border of the empty point in the series.
	*/
	style?: SeriesEmptyPointSettingsStyle;
}

export interface SeriesConnectorLine {

	/**Width of the connector line.
	* @Default {1}
	*/
	width?: number;

	/**Color of the connector line.
	* @Default {#565656}
	*/
	color?: string;

	/**DashArray of the connector line.
	* @Default {null}
	*/
	dashArray?: string;

	/**DashArray of the connector line.
	* @Default {1}
	*/
	opacity?: number;
}

export interface SeriesErrorBarCap {

	/**Show/Hides the error bar cap.
	* @Default {true}
	*/
	visible?: boolean;

	/**Width of the error bar cap.
	* @Default {1}
	*/
	width?: number;

	/**Length of the error bar cap.
	* @Default {1}
	*/
	length?: number;

	/**Color of the error bar cap.
	* @Default {#000000}
	*/
	fill?: string;
}

export interface SeriesErrorBar {

	/**Show/hides the error bar
	* @Default {visible}
	*/
	visibility?: boolean;

	/**Specifies the type of error bar.
	* @Default {FixedValue}
	*/
	type?: ej.datavisualization.Chart.ErrorBarType|string;

	/**Specifies the mode of error bar.
	* @Default {vertical}
	*/
	mode?: ej.datavisualization.Chart.ErrorBarMode|string;

	/**Specifies the direction of error bar.
	* @Default {both}
	*/
	direction?: ej.datavisualization.Chart.ErrorBarDirection|string;

	/**Value of vertical error bar.
	* @Default {3}
	*/
	verticalErrorValue?: number;

	/**Value of horizontal  error bar.
	* @Default {1}
	*/
	horizontalErrorValue?: number;

	/**Value of positive horizontal error bar.
	* @Default {1}
	*/
	horizontalPositiveErrorValue?: number;

	/**Value of negative horizontal error bar.
	* @Default {1}
	*/
	horizontalNegativeErrorValue?: number;

	/**Value of positive vertical error bar.
	* @Default {5}
	*/
	verticalPositiveErrorValue?: number;

	/**Value of negative vertical error bar.
	* @Default {5}
	*/
	verticalNegativeErrorValue?: number;

	/**Fill color of the error bar.
	* @Default {#000000}
	*/
	fill?: string;

	/**Width of the error bar.
	* @Default {1}
	*/
	width?: number;

	/**Options for customizing the error bar cap.
	*/
	cap?: SeriesErrorBarCap;
}

export interface SeriesPointsBorder {

	/**Border color of the point.
	* @Default {null}
	*/
	color?: string;

	/**Border width of the point.
	* @Default {null}
	*/
	width?: number;
}

export interface SeriesPointsMarkerBorder {

	/**Border color of the marker shape.
	* @Default {white}
	*/
	color?: string;

	/**Border width of the marker shape.
	* @Default {3}
	*/
	width?: number;
}

export interface SeriesPointsMarkerDataLabelBorder {

	/**Border color of the data label.
	* @Default {null}
	*/
	color?: string;

	/**Border width of the data label.
	* @Default {0.1}
	*/
	width?: number;
}

export interface SeriesPointsMarkerDataLabelConnectorLine {

	/**Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
	* @Default {line. See ConnectorLineType}
	*/
	type?: ej.datavisualization.Chart.ConnectorLineType|string;

	/**Width of the connector.
	* @Default {0.5}
	*/
	width?: number;
}

export interface SeriesPointsMarkerDataLabelFont {

	/**Font family of the data label.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style of the data label.
	* @Default {normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight of the data label.
	* @Default {regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the text.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size of the data label.
	* @Default {12px}
	*/
	size?: string;
}

export interface SeriesPointsMarkerDataLabelMargin {

	/**Bottom margin of the text.
	* @Default {5}
	*/
	bottom?: number;

	/**Left margin of the text.
	* @Default {5}
	*/
	left?: number;

	/**Right margin of the text.
	* @Default {5}
	*/
	right?: number;

	/**Top margin of the text.
	* @Default {5}
	*/
	top?: number;
}

export interface SeriesPointsMarkerDataLabel {

	/**Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
	* @Default {null}
	*/
	angle?: number;

	/**Options for customizing the border of the data label.
	*/
	border?: SeriesPointsMarkerDataLabelBorder;

	/**Options for displaying and customizing the line that connects point and data label.
	*/
	connectorLine?: SeriesPointsMarkerDataLabelConnectorLine;

	/**Background color of the data label.
	* @Default {null}
	*/
	fill?: string;

	/**Options for customizing the data label font.
	*/
	font?: SeriesPointsMarkerDataLabelFont;

	/**Horizontal alignment of the data label.
	* @Default {center}
	*/
	horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

	/**Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
	*/
	margin?: SeriesPointsMarkerDataLabelMargin;

	/**Opacity of the data label.
	* @Default {1}
	*/
	opacity?: number;

	/**Background shape of the data label.
	* @Default {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
	* @Default {top. See TextPosition}
	*/
	textPosition?: ej.datavisualization.Chart.TextPosition|string;

	/**Vertical alignment of the data label.
	* @Default {'center'}
	*/
	verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

	/**Controls the visibility of the data labels.
	* @Default {false}
	*/
	visible?: boolean;

	/**Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
	*/
	template?: string;

	/**Moves the label vertically by specified offset.
	* @Default {0}
	*/
	offset?: number;
}

export interface SeriesPointsMarkerSize {

	/**Height of the marker.
	* @Default {6}
	*/
	height?: number;

	/**Width of the marker.
	* @Default {6}
	*/
	width?: number;
}

export interface SeriesPointsMarker {

	/**Options for customizing the border of the marker shape.
	*/
	border?: SeriesPointsMarkerBorder;

	/**Options for displaying and customizing data label.
	*/
	dataLabel?: SeriesPointsMarkerDataLabel;

	/**Color of the marker shape.
	* @Default {null}
	*/
	fill?: string;

	/**The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
	*/
	imageUrl?: string;

	/**Opacity of the marker.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the shape of the marker.
	* @Default {circle. See Shape}
	*/
	shape?: ej.datavisualization.Chart.Shape|string;

	/**Options for customizing the size of the marker shape.
	*/
	size?: SeriesPointsMarkerSize;

	/**Controls the visibility of the marker shape.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface SeriesPoints {

	/**Options for customizing the border of a point. This is applicable only for column type series and accumulation type series.
	*/
	border?: SeriesPointsBorder;

	/**To show/hide the intermediate summary from the last intermediate point.
	* @Default {false}
	*/
	showIntermediateSum?: boolean;

	/**To show/hide the total summary of the waterfall series.
	* @Default {false}
	*/
	showTotalSum?: boolean;

	/**Close value of the point. Close value is applicable only for financial type series.
	* @Default {null}
	*/
	close?: number;

	/**Size of a bubble in the bubble series. This is applicable only for the bubble series.
	* @Default {null}
	*/
	size?: number;

	/**Background color of the point. This is applicable only for column type series and accumulation type series.
	* @Default {null}
	*/
	fill?: string;

	/**High value of the point. High value is applicable only for financial type series, range area series and range column series.
	* @Default {null}
	*/
	high?: number;

	/**Low value of the point. Low value is applicable only for financial type series, range area series and range column series.
	* @Default {null}
	*/
	low?: number;

	/**Options for displaying and customizing marker for a data point. Marker contains shapes and/or data labels.
	*/
	marker?: SeriesPointsMarker;

	/**Open value of the point. This is applicable only for financial type series.
	* @Default {null}
	*/
	open?: number;

	/**Datalabel text for the point.
	* @Default {null}
	*/
	text?: string;

	/**X value of the point.
	* @Default {null}
	*/
	x?: number;

	/**Y value of the point.
	* @Default {null}
	*/
	y?: number;
}

export interface SeriesTooltipBorder {

	/**Border Color of the tooltip.
	* @Default {null}
	*/
	color?: string;

	/**Border Width of the tooltip.
	* @Default {1}
	*/
	width?: number;
}

export interface SeriesTooltip {

	/**Options for customizing the border of the tooltip.
	*/
	border?: SeriesTooltipBorder;

	/**Customize the corner radius of the tooltip rectangle.
	* @Default {0}
	*/
	rx?: number;

	/**Customize the corner radius of the tooltip rectangle.
	* @Default {0}
	*/
	ry?: number;

	/**Specifies the duration, the tooltip has to be displayed.
	* @Default {500ms}
	*/
	duration?: string;

	/**Enables/disables the animation of the tooltip when moving from one point to another.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Background color of the tooltip.
	* @Default {null}
	*/
	fill?: string;

	/**Format of the tooltip content.
	* @Default {#point.x# : #point.y#}
	*/
	format?: string;

	/**Opacity of the tooltip.
	* @Default {0.95}
	*/
	opacity?: number;

	/**Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
	* @Default {null}
	*/
	template?: string;

	/**Controls the visibility of the tooltip.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface SeriesTrendlines {

	/**Show/hides the trendline.
	*/
	visibility?: boolean;

	/**Specifies the type of trendline for the series.
	* @Default {linear. See TrendlinesType}
	*/
	type?: string;

	/**Name for the trendlines that is to be displayed in legend text.
	* @Default {Trendline}
	*/
	name?: string;

	/**Fill color of the trendlines.
	* @Default {#0000FF}
	*/
	fill?: string;

	/**Width of the trendlines.
	* @Default {1}
	*/
	width?: number;

	/**Opacity of the trendline.
	* @Default {1}
	*/
	opacity?: number;

	/**Pattern of dashes and gaps used to stroke the trendline.
	*/
	dashArray?: string;

	/**Future trends of the current series.
	* @Default {0}
	*/
	forwardForecast?: number;

	/**Past trends of the current series.
	* @Default {0}
	*/
	backwardForecast?: number;

	/**Specifies the order of polynomial trendlines.
	* @Default {0}
	*/
	polynomialOrder?: number;

	/**Specifies the moving average starting period  value.
	* @Default {2}
	*/
	period?: number;
}

export interface SeriesHighlightSettingsBorder {

	/**Border color of the series/point on highlight.
	*/
	color?: string;

	/**Border width of the series/point on highlight.
	* @Default {2}
	*/
	width?: string;
}

export interface SeriesHighlightSettings {

	/**Enables/disables the ability to highlight series or data point interactively.
	* @Default {false}
	*/
	enable?: boolean;

	/**Specifies whether series or data point has to be highlighted.
	* @Default {series. See Mode}
	*/
	mode?: ej.datavisualization.Chart.Mode|string;

	/**Color of the series/point on highlight.
	*/
	color?: string;

	/**Opacity of the series/point on highlight.
	* @Default {0.6}
	*/
	opacity?: number;

	/**Options for customizing the border of series on highlight.
	*/
	border?: SeriesHighlightSettingsBorder;

	/**Specifies the pattern for the series/point on highlight.
	* @Default {none. See Pattern}
	*/
	pattern?: string;

	/**Custom pattern for the series on highlight.
	*/
	customPattern?: string;
}

export interface SeriesSelectionSettingsBorder {

	/**Border color of the series/point on selection.
	*/
	color?: string;

	/**Border width of the series/point on selection.
	* @Default {2}
	*/
	width?: string;
}

export interface SeriesSelectionSettings {

	/**Enables/disables the ability to select a series/data point interactively.
	* @Default {false}
	*/
	enable?: boolean;

	/**Specifies whether series or data point has to be selected.
	* @Default {series. See Mode}
	*/
	mode?: ej.datavisualization.Chart.Mode|string;

	/**Specifies the type of selection.
	* @Default {single}
	*/
	type?: ej.datavisualization.Chart.SelectionType|string;

	/**Color of the series/point on selection.
	*/
	color?: string;

	/**Opacity of the series/point on selection.
	* @Default {0.6}
	*/
	opacity?: number;

	/**Options for customizing the border of series on selection.
	*/
	border?: SeriesSelectionSettingsBorder;

	/**Specifies the pattern for the series/point on selection.
	* @Default {none. See Pattern}
	*/
	pattern?: string;

	/**Custom pattern for the series on selection.
	*/
	customPattern?: string;
}

export interface Series {

	/**Color of the point, where the close is up in financial chart.
	* @Default {null}
	*/
	bearFillColor?: string;

	/**Options for customizing the border of the series.
	*/
	border?: SeriesBorder;

	/**Color of the point, where the close is down in financial chart.
	* @Default {null}
	*/
	bullFillColor?: string;

	/**Pattern of dashes and gaps used to stroke the line type series.
	*/
	dashArray?: string;

	/**Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
	* @Default {null}
	*/
	dataSource?: any;

	/**Controls the size of the hole in doughnut series. Value ranges from 0 to 1.
	* @Default {0.4}
	*/
	doughnutCoefficient?: number;

	/**Controls the size of the doughnut series. Value ranges from 0 to 1.
	* @Default {0.8}
	*/
	doughnutSize?: number;

	/**Type of series to be drawn in radar or polar series.
	* @Default {line. See DrawType}
	*/
	drawType?: boolean;

	/**Enable/disable the animation of series.
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**To avoid overlapping of data labels smartly.
	* @Default {null}
	*/
	enableSmartLabels?: number;

	/**End angle of pie/doughnut series. For a complete circle, it has to be 360, by default.
	* @Default {null}
	*/
	endAngle?: number;

	/**Explodes the pie/doughnut slices on mouse move.
	* @Default {false}
	*/
	explode?: boolean;

	/**Explodes all the slice of pie/doughnut on render.
	* @Default {null}
	*/
	explodeAll?: boolean;

	/**Index of the point to be exploded from pie/doughnut/pyramid/funnel.
	* @Default {null}
	*/
	explodeIndex?: number;

	/**Specifies the distance of the slice from the center, when it is exploded.
	* @Default {25}
	*/
	explodeOffset?: number;

	/**Fill color of the series.
	* @Default {null}
	*/
	fill?: string;

	/**Options for customizing the series font.
	*/
	font?: SeriesFont;

	/**Specifies the height of the funnel in funnel series. Values can be in both pixel and percentage.
	* @Default {32.7%}
	*/
	funnelHeight?: string;

	/**Specifies the width of the funnel in funnel series. Values can be in both pixel and percentage.
	* @Default {11.6%}
	*/
	funnelWidth?: string;

	/**Gap between the slices of pyramid/funnel series.
	* @Default {0}
	*/
	gapRatio?: number;

	/**Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
	* @Default {true}
	*/
	isClosed?: boolean;

	/**Specifies whether to stack the column series in polar/radar charts.
	* @Default {true}
	*/
	isStacking?: boolean;

	/**Renders the chart vertically. This is applicable only for cartesian type series.
	* @Default {false}
	*/
	isTransposed?: boolean;

	/**Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
	* @Default {inside. See LabelPosition}
	*/
	labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

	/**Specifies the line cap of the series.
	* @Default {Butt. See LineCap}
	*/
	lineCap?: ej.datavisualization.Chart.LineCap|string;

	/**Specifies the type of shape to be used where two lines meet.
	* @Default {Round. See LineJoin}
	*/
	lineJoin?: ej.datavisualization.Chart.LineJoin|string;

	/**Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
	*/
	marker?: SeriesMarker;

	/**Opacity of the series.
	* @Default {1}
	*/
	opacity?: number;

	/**Name of a field in data source where fill color for all the data points is generated.
	*/
	palette?: string;

	/**Controls the size of pie series. Value ranges from 0 to 1.
	* @Default {0.8}
	*/
	pieCoefficient?: number;

	/**Options for customizing the empty point in the series.
	*/
	emptyPointSettings?: SeriesEmptyPointSettings;

	/**Fill color for the positive column of the waterfall.
	* @Default {null}
	*/
	positiveFill?: string;

	/**Options for customizing the waterfall connector line.
	*/
	connectorLine?: SeriesConnectorLine;

	/**Options to customize the error bar in series.
	*/
	errorBar?: SeriesErrorBar;

	/**Option to add data points; each point should have x and y property. Also, optionally, you can customize the points color, border, marker by using fill, border and marker options.
	*/
	points?: Array<SeriesPoints>;

	/**Specifies the mode of the pyramid series.
	* @Default {linear}
	*/
	pyramidMode?: ej.datavisualization.Chart.PyramidMode|string;

	/**Specifies ej.Query to select data from dataSource. This property is applicable only when the dataSource is ej.DataManager.
	* @Default {null}
	*/
	query?: any;

	/**Start angle from where the pie/doughnut series renders. It starts from 0, by default.
	* @Default {null}
	*/
	startAngle?: number;

	/**Options for customizing the tooltip of chart.
	*/
	tooltip?: SeriesTooltip;

	/**Specifies the type of the series to render in chart.
	* @Default {column. see Type}
	*/
	type?: ej.datavisualization.Chart.Type|string;

	/**Controls the visibility of the series.
	* @Default {visible}
	*/
	visibility?: string;

	/**Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
	* @Default {null}
	*/
	xAxisName?: string;

	/**Name of the property in the datasource that contains x value for the series.
	* @Default {null}
	*/
	xName?: string;

	/**Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
	* @Default {null}
	*/
	yAxisName?: string;

	/**Name of the property in the datasource that contains y value for the series.
	* @Default {null}
	*/
	yName?: string;

	/**Name of the property in the datasource that contains high value for the series.
	* @Default {null}
	*/
	high?: string;

	/**Name of the property in the datasource that contains low value for the series.
	* @Default {null}
	*/
	low?: string;

	/**Name of the property in the datasource that contains open value for the series.
	* @Default {null}
	*/
	open?: string;

	/**Name of the property in the datasource that contains close value for the series.
	* @Default {null}
	*/
	close?: string;

	/**Name of the property in the datasource that contains the size value for the bubble series.
	* @Default {null}
	*/
	size?: string;

	/**Option to add trendlines to chart.
	*/
	trendlines?: Array<SeriesTrendlines>;

	/**Options for customizing the appearance of the series or data point while highlighting.
	*/
	highlightSettings?: SeriesHighlightSettings;

	/**Options for customizing the appearance of the series/data point on selection.
	*/
	selectionSettings?: SeriesSelectionSettings;
}

export interface Size {

	/**Height of the Chart. Height can be specified in either pixel or percentage.
	* @Default {'450'}
	*/
	height?: string;

	/**Width of the Chart. Width can be specified in either pixel or percentage.
	* @Default {'450'}
	*/
	width?: string;
}

export interface TitleBorder {

	/**Width of the title border.
	* @Default {1}
	*/
	width?: number;

	/**color of the title border.
	* @Default {transparent}
	*/
	color?: string;

	/**opacity of the title border.
	* @Default {0.8}
	*/
	opacity?: number;

	/**opacity of the title border.
	* @Default {0.8}
	*/
	cornerRadius?: number;
}

export interface TitleFont {

	/**Font family for Chart title.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style for Chart title.
	* @Default {Normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight for Chart title.
	* @Default {Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the Chart title.
	* @Default {0.5}
	*/
	opacity?: number;

	/**Font size for Chart title.
	* @Default {20px}
	*/
	size?: string;
}

export interface TitleSubTitleFont {

	/**Font family of sub title.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Font style for sub title.
	* @Default {Normal. See FontStyle}
	*/
	fontStyle?: ej.datavisualization.Chart.FontStyle|string;

	/**Font weight for sub title.
	* @Default {Regular. See FontWeight}
	*/
	fontWeight?: ej.datavisualization.Chart.FontWeight|string;

	/**Opacity of the sub title.
	* @Default {1}
	*/
	opacity?: number;

	/**Font size for sub title.
	* @Default {12px}
	*/
	size?: string;
}

export interface TitleSubTitleBorder {

	/**Width of the subtitle border.
	* @Default {1}
	*/
	width?: number;

	/**color of the subtitle border.
	* @Default {transparent}
	*/
	color?: string;

	/**opacity of the subtitle border.
	* @Default {0.8}
	*/
	opacity?: number;

	/**opacity of the subtitle border.
	* @Default {0.8}
	*/
	cornerRadius?: number;
}

export interface TitleSubTitle {

	/**Options for customizing the font of sub title.
	*/
	font?: TitleSubTitleFont;

	/**Background color for the chart subtitle.
	* @Default {transparent}
	*/
	background?: string;

	/**Options to customize the border of the title.
	*/
	border?: TitleSubTitleBorder;

	/**Text to be displayed in sub title.
	*/
	text?: string;

	/**Alignment of sub title text.
	* @Default {far. See TextAlignment}
	*/
	textAlignment?: ej.datavisualization.Chart.Alignment|string;
}

export interface Title {

	/**Background color for the chart title.
	* @Default {transparent}
	*/
	background?: string;

	/**Options to customize the border of the title.
	*/
	border?: TitleBorder;

	/**Options for customizing the font of Chart title.
	*/
	font?: TitleFont;

	/**Options to customize the sub title of Chart.
	*/
	subTitle?: TitleSubTitle;

	/**Text to be displayed in Chart title.
	*/
	text?: string;

	/**Alignment of the title text.
	* @Default {Center. See TextAlignment}
	*/
	textAlignment?: ej.datavisualization.Chart.Alignment|string;
}

export interface Zooming {

	/**Enables or disables zooming.
	* @Default {false}
	*/
	enable?: boolean;

	/**Enable or disables the differed zooming. When it is enabled, chart is updated only on mouse up action while zooming and panning.
	* @Default {false}
	*/
	enableDeferredZoom?: boolean;

	/**Enables/disables the ability to zoom the chart on moving the mouse wheel.
	* @Default {false}
	*/
	enableMouseWheel?: boolean;

	/**Specifies whether to allow zooming the chart vertically or horizontally or in both ways.
	* @Default {'x,y'}
	*/
	type?: string;

	/**To display user specified buttons in zooming toolbar.
	* @Default {[zoomIn, zoomOut, zoom, pan, reset]}
	*/
	toolbarItems?: Array<any>;
}
}
module Chart
{
enum CoordinateUnit
{
//string
None,
//string
Pixels,
//string
Points,
}
}
module Chart
{
enum HorizontalAlignment
{
//string
Left,
//string
Right,
//string
Middle,
}
}
module Chart
{
enum Region
{
//string
Chart,
//string
Series,
}
}
module Chart
{
enum VerticalAlignment
{
//string
Top,
//string
Bottom,
//string
Middle,
}
}
module Chart
{
enum Unit
{
//string
Percentage,
//string
Pixel,
}
}
module Chart
{
enum DrawType
{
//string
Line,
//string
Area,
//string
Column,
}
}
module Chart
{
enum FontStyle
{
//string
Normal,
//string
Italic,
}
}
module Chart
{
enum FontWeight
{
//string
Regular,
//string
Bold,
//string
Lighter,
}
}
module Chart
{
enum LabelPosition
{
//string
Inside,
//string
Outside,
//string
OutsideExtended,
}
}
module Chart
{
enum LineCap
{
//string
Butt,
//string
Round,
//string
Square,
}
}
module Chart
{
enum LineJoin
{
//string
Round,
//string
Bevel,
//string
Miter,
}
}
module Chart
{
enum ConnectorLineType
{
//string
Line,
//string
Bezier,
}
}
module Chart
{
enum HorizontalTextAlignment
{
//string
Center,
//string
Near,
//string
Far,
}
}
module Chart
{
enum Shape
{
//string
None,
//string
LeftArrow,
//string
RightArrow,
//string
Circle,
//string
Cross,
//string
HorizLine,
//string
VertLine,
//string
Diamond,
//string
Rectangle,
//string
Triangle,
//string
Hexagon,
//string
Pentagon,
//string
Star,
//string
Ellipse,
//string
Trapezoid,
//string
UpArrow,
//string
DownArrow,
//string
Image,
//string
SeriesType,
}
}
module Chart
{
enum TextPosition
{
//string
Top,
//string
Bottom,
//string
Middle,
}
}
module Chart
{
enum VerticalTextAlignment
{
//string
Center,
//string
Near,
//string
Far,
}
}
module Chart
{
enum PyramidMode
{
//string
Linear,
//string
Surface,
}
}
module Chart
{
enum Type
{
//string
Area,
//string
Line,
//string
Spline,
//string
Column,
//string
Scatter,
//string
Bubble,
//string
SplineArea,
//string
StepArea,
//string
StepLine,
//string
Pie,
//string
Hilo,
//string
HiloOpenClose,
//string
Candle,
//string
Bar,
//string
StackingArea,
//string
StackingArea100,
//string
RangeColumn,
//string
StackingColumn,
//string
StackingColumn100,
//string
StackingBar,
//string
StackingBar100,
//string
Pyramid,
//string
Funnel,
//string
Doughnut,
//string
Polar,
//string
Radar,
//string
RangeArea,
}
}
module Chart
{
enum EmptyPointMode
{
//string
Gap,
//string
Zero,
//string
Average,
}
}
module Chart
{
enum ErrorBarType
{
//string
FixedValue,
//string
Percentage,
//string
StandardDeviation,
//string
StandardError,
}
}
module Chart
{
enum ErrorBarMode
{
//string
Both,
//string
Vertical,
//string
Horizontal,
}
}
module Chart
{
enum ErrorBarDirection
{
//string
Both,
//string
Plus,
//string
Minus,
}
}
module Chart
{
enum Mode
{
//string
Series,
//string
Point,
//string
Cluster,
}
}
module Chart
{
enum SelectionType
{
//string
Single,
//string
Multiple,
}
}
module Chart
{
enum CrosshairType
{
//string
Crosshair,
//string
Trackball,
}
}
module Chart
{
enum Alignment
{
//string
Center,
//string
Near,
//string
Far,
}
}
module Chart
{
enum Position
{
//string
Left,
//string
Right,
//string
Top,
//string
Bottom,
}
}
module Chart
{
enum TextOverflow
{
//string
None,
//string
Trim,
//string
Wrap,
//string
WrapAndTrim,
}
}
module Chart
{
enum EdgeLabelPlacement
{
//string
None,
//string
Shift,
//string
Hide,
}
}
module Chart
{
enum IntervalType
{
//string
Days,
//string
Hours,
//string
Seconds,
//string
Milliseconds,
//string
Minutes,
//string
Months,
//string
Years,
}
}
module Chart
{
enum LabelIntersectAction
{
//string
None,
//string
Rotate90,
//string
Rotate45,
//string
Wrap,
//string
WrapByword,
//string
Trim,
//string
Hide,
//string
MultipleRows,
}
}
module Chart
{
enum RangePadding
{
//string
Additional,
//string
Normal,
//string
None,
//string
Round,
}
}
module Chart
{
enum TextAlignment
{
//string
MiddleTop,
//string
MiddleCenter,
//string
MiddleBottom,
}
}
module Chart
{
enum ZIndex
{
//string
Inside,
//string
Over,
}
}
module Chart
{
enum TickLinesPosition
{
//string
Inside,
//string
Outside,
}
}
module Chart
{
enum ValueType
{
//string
Double,
//string
Category,
//string
DateTime,
//string
Logarithmic,
}
}
module Chart
{
enum Theme
{
//string
Azure,
//string
FlatLight,
//string
FlatDark,
//string
Azuredark,
//string
Lime,
//string
LimeDark,
//string
Saffron,
//string
SaffronDark,
//string
GradientLight,
//string
GradientDark,
}
}

class RangeNavigator extends ej.Widget {
	static fn: RangeNavigator;
	constructor(element: JQuery, options?: RangeNavigator.Model);
	constructor(element: Element, options?: RangeNavigator.Model);
	model:RangeNavigator.Model;
	defaults:RangeNavigator.Model;

	/** destroy the range navigator widget
	* @returns {void}
	*/
	_destroy (): void;
}
export module RangeNavigator{

export interface Model {

	/**Toggles the placement of slider exactly on the place it left or on the nearest interval.
	* @Default {false}
	*/
	allowSnapping?: boolean;

	/**Specifies the data source for range navigator.
	*/
	dataSource?: any;

	/**Sets a value whether to make the range navigator responsive on resize.
	* @Default {false}
	*/
	enableAutoResizing?: boolean;

	/**Toggles the redrawing of chart on moving the sliders.
	* @Default {true}
	*/
	enableDeferredUpdate?: boolean;

	/**Toggles the direction of rendering the range navigator control.
	* @Default {false}
	*/
	enableRTL?: boolean;

	/**Options for customizing the labels colors, font, style, size, horizontalAlignment and opacity.
	*/
	labelSettings?: LabelSettings;

	/**This property is to specify the localization of range navigator.
	* @Default {en-US}
	*/
	locale?: string;

	/**Options for customizing the range navigator.
	*/
	navigatorStyleSettings?: NavigatorStyleSettings;

	/**Padding specifies the gap between the container and the range navigator.
	* @Default {0}
	*/
	padding?: string;

	/**If the range is not given explicitly, range will be calculated automatically.
	* @Default {none}
	*/
	rangePadding?: ej.datavisualization.RangeNavigator.RangePadding|string;

	/**Options for customizing the starting and ending ranges.
	*/
	rangeSettings?: RangeSettings;

	/**selectedData is for getting the data when the &quot;rangeChanged&quot; event trigger from client side.
	*/
	selectedData?: any;

	/**Options for customizing the start and end range values.
	*/
	selectedRangeSettings?: SelectedRangeSettings;

	/**Contains property to customize the hight and width of range navigator.
	*/
	sizeSettings?: SizeSettings;

	/**By specifying this property the user can change the theme of the range navigator.
	* @Default {null}
	*/
	theme?: string;

	/**Options for customizing the tooltip in range navigator.
	*/
	tooltipSettings?: TooltipSettings;

	/**Options for configuring minor grid lines, major grid lines, axis line of axis.
	*/
	valueAxisSettings?: ValueAxisSettings;

	/**You can plot data of type date time or numeric. This property determines the type of data that this axis will handle.
	* @Default {datetime}
	*/
	valueType?: ej.datavisualization.RangeNavigator.ValueType|string;

	/**Specifies the xName for dataSource. This is used to take the x values from dataSource
	*/
	xName?: any;

	/**Specifies the yName for dataSource. This is used to take the y values from dataSource
	*/
	yName?: any;

	/**Fires on load of range navigator.*/
	load? (e: LoadEventArgs): void;

	/**Fires after range navigator is loaded.*/
	loaded? (e: LoadedEventArgs): void;

	/**Fires on changing the range of range navigator.*/
	rangeChanged? (e: RangeChangedEventArgs): void;
}

export interface LoadEventArgs {

	/**parameters from range navigator
	*/
	Data?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the range navigator model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LoadedEventArgs {

	/**parameters from range navigator
	*/
	Data?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the range navigator model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface RangeChangedEventArgs {

	/**parameters from range navigator
	*/
	Data?: any;

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the range navigator model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;
}

export interface LabelSettingsHigherLevelBorder {

	/**Specifies the border color of grid lines.
	* @Default {transparent}
	*/
	color?: string;

	/**Specifies the border width of grid lines.
	* @Default {0.5}
	*/
	width?: string;
}

export interface LabelSettingsHigherLevelGridLineStyle {

	/**Specifies the color of grid lines in higher level.
	* @Default {#B5B5B5}
	*/
	color?: string;

	/**Specifies the dashArray of grid lines in higher level.
	* @Default {20 5 0}
	*/
	dashArray?: string;

	/**Specifies the width of grid lines in higher level.
	* @Default {#B5B5B5}
	*/
	width?: string;
}

export interface LabelSettingsHigherLevelStyleFont {

	/**Specifies the label font color. Labels render with the specified font color.
	* @Default {black}
	*/
	color?: string;

	/**Specifies the label font family. Labels render with the specified font family.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the label font style. Labels render with the specified font style.
	* @Default {Normal}
	*/
	fontStyle?: string;

	/**Specifies the label font weight. Labels render with the specified font weight.
	* @Default {regular}
	*/
	fontWeight?: string;

	/**Specifies the label opacity. Labels render with the specified opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the label font size. Labels render with the specified font size.
	* @Default {12px}
	*/
	size?: string;
}

export interface LabelSettingsHigherLevelStyle {

	/**Options for customizing the font properties.
	*/
	font?: LabelSettingsHigherLevelStyleFont;

	/**Specifies the horizontal text alignment of the text in label.
	* @Default {middle}
	*/
	horizontalAlignment?: string;
}

export interface LabelSettingsHigherLevel {

	/**Options for customizing the border of grid lines in higher level.
	*/
	border?: LabelSettingsHigherLevelBorder;

	/**Specifies the fill color of higher level labels.
	* @Default {transparent}
	*/
	fill?: string;

	/**Options for customizing the grid line colors, width, dashArray, border.
	*/
	gridLineStyle?: LabelSettingsHigherLevelGridLineStyle;

	/**Specifies the intervalType for higher level labels. See IntervalType
	* @Default {years}
	*/
	intervalType?: ej.datavisualization.RangeNavigator.IntervalType|string;

	/**Specifies the position of the labels to render either inside or outside of plot area
	* @Default {outside}
	*/
	labelPlacement?: ej.datavisualization.RangeNavigator.LabelPlacement|string;

	/**Specifies the position of the labels in higher level
	* @Default {top}
	*/
	position?: ej.datavisualization.RangeNavigator.Position|string;

	/**Options for customizing the style of higher level labels.
	*/
	style?: LabelSettingsHigherLevelStyle;

	/**Toggles the visibility of higher level labels.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface LabelSettingsLowerLevelBorder {

	/**Specifies the border color of grid lines.
	* @Default {transparent}
	*/
	color?: string;

	/**Specifies the border width of grid lines.
	* @Default {0.5}
	*/
	width?: string;
}

export interface LabelSettingsLowerLevelGridLineStyle {

	/**Specifies the color of grid lines in lower level.
	* @Default {#B5B5B5}
	*/
	color?: string;

	/**Specifies the dashArray of gridLines in lowerLevel.
	* @Default {20 5 0}
	*/
	dashArray?: string;

	/**Specifies the width of grid lines in lower level.
	* @Default {#B5B5B5}
	*/
	width?: string;
}

export interface LabelSettingsLowerLevelStyleFont {

	/**Specifies the color of labels. Label text render in this specified color.
	* @Default {black}
	*/
	color?: string;

	/**Specifies the font family of labels. Label text render in this specified font family.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the font style of labels. Label text render in this specified font style.
	* @Default {Normal}
	*/
	fontStyle?: string;

	/**Specifies the font weight of labels. Label text render in this specified font weight.
	* @Default {regular}
	*/
	fontWeight?: string;

	/**Specifies the opacity of labels. Label text render in this specified opacity.
	* @Default {12px}
	*/
	opacity?: string;

	/**Specifies the size of labels. Label text render in this specified size.
	* @Default {12px}
	*/
	size?: string;
}

export interface LabelSettingsLowerLevelStyle {

	/**Options for customizing the font of labels.
	*/
	font?: LabelSettingsLowerLevelStyleFont;

	/**Specifies the horizontal text alignment of the text in label.
	* @Default {middle}
	*/
	horizontalAlignment?: string;
}

export interface LabelSettingsLowerLevel {

	/**Options for customizing the border of grid lines in lower level.
	*/
	border?: LabelSettingsLowerLevelBorder;

	/**Specifies the fill color of labels in lower level.
	* @Default {transparent}
	*/
	fill?: string;

	/**Options for customizing the grid lines in lower level.
	*/
	gridLineStyle?: LabelSettingsLowerLevelGridLineStyle;

	/**Specifies the intervalType of the labels in lower level.See IntervalType
	* @Default {years}
	*/
	intervalType?: ej.datavisualization.RangeNavigator.IntervalType|string;

	/**Specifies the position of the labels to render either inside or outside of plot area. See LabelPlacement
	* @Default {outside}
	*/
	labelPlacement?: ej.datavisualization.RangeNavigator.LabelPlacement|string;

	/**Specifies the position of the labels in lower level.See Position
	* @Default {bottom}
	*/
	position?: ej.datavisualization.RangeNavigator.Position|string;

	/**Options for customizing the style of labels.
	*/
	style?: LabelSettingsLowerLevelStyle;

	/**Toggles the visibility of labels in lower level.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface LabelSettingsStyleFont {

	/**Specifies the label color. This color is applied to the labels in range navigator.
	* @Default {#FFFFFF}
	*/
	color?: string;

	/**Specifies the label font family. Labels render with the specified font family.
	* @Default {Segoe UI}
	*/
	family?: string;

	/**Specifies the label font opacity. Labels render with the specified font opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the label font size. Labels render with the specified font size.
	* @Default {1px}
	*/
	size?: string;

	/**Specifies the label font style. Labels render with the specified font style..
	* @Default {Normal}
	*/
	style?: ej.datavisualization.RangeNavigator.FontStyle|string;

	/**Specifies the lable font weight
	* @Default {regular}
	*/
	weight?: ej.datavisualization.RangeNavigator.FontWeight|string;
}

export interface LabelSettingsStyle {

	/**Options for customizing the font of labels in range navigator.
	*/
	font?: LabelSettingsStyleFont;

	/**Specifies the horizontalAlignment of the label in RangeNavigator
	* @Default {middle}
	*/
	horizontalAlignment?: ej.datavisualization.RangeNavigator.HorizontalAlignment|string;
}

export interface LabelSettings {

	/**Options for customizing the higher level labels in range navigator.
	*/
	higherLevel?: LabelSettingsHigherLevel;

	/**Options for customizing the labels in lower level.
	*/
	lowerLevel?: LabelSettingsLowerLevel;

	/**Options for customizing the style of labels in range navigator.
	*/
	style?: LabelSettingsStyle;
}

export interface NavigatorStyleSettingsBorder {

	/**Specifies the border color of range navigator.
	* @Default {transparent}
	*/
	color?: string;

	/**Specifies the dash array of range navigator.
	* @Default {null}
	*/
	dashArray?: string;

	/**Specifies the border width of range navigator.
	* @Default {0.5}
	*/
	width?: number;
}

export interface NavigatorStyleSettingsMajorGridLineStyle {

	/**Specifies the color of major grid lines in range navigator.
	* @Default {#B5B5B5}
	*/
	color?: string;

	/**Toggles the visibility of major grid lines.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface NavigatorStyleSettingsMinorGridLineStyle {

	/**Specifies the color of minor grid lines in range navigator.
	* @Default {#B5B5B5}
	*/
	color?: string;

	/**Toggles the visibility of minor grid lines.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface NavigatorStyleSettings {

	/**Specifies the background color of range navigator.
	* @Default {#dddddd}
	*/
	background?: string;

	/**Options for customizing the border color and width of range navigator.
	*/
	border?: NavigatorStyleSettingsBorder;

	/**Specifies the left side thumb template in range navigator we can give either div id or html string
	* @Default {null}
	*/
	leftThumbTemplate?: string;

	/**Options for customizing the major grid lines.
	*/
	majorGridLineStyle?: NavigatorStyleSettingsMajorGridLineStyle;

	/**Options for customizing the minor grid lines.
	*/
	minorGridLineStyle?: NavigatorStyleSettingsMinorGridLineStyle;

	/**Specifies the opacity of RangeNavigator.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the right side thumb template in range navigator we can give either div id or html string
	* @Default {null}
	*/
	rightThumbTemplate?: string;

	/**Specifies the color of the selected region in range navigator.
	* @Default {#EFEFEF}
	*/
	selectedRegionColor?: string;

	/**Specifies the opacity of Selected Region.
	* @Default {0}
	*/
	selectedRegionOpacity?: number;

	/**Specifies the color of the thumb in range navigator.
	* @Default {#2382C3}
	*/
	thumbColor?: string;

	/**Specifies the radius of the thumb in range navigator.
	* @Default {10}
	*/
	thumbRadius?: number;

	/**Specifies the stroke color of the thumb in range navigator.
	* @Default {#303030}
	*/
	thumbStroke?: string;

	/**Specifies the color of the unselected region in range navigator.
	* @Default {#5EABDE}
	*/
	unselectedRegionColor?: string;

	/**Specifies the opacity of Unselected Region.
	* @Default {0.3}
	*/
	unselectedRegionOpacity?: number;
}

export interface RangeSettings {

	/**Specifies the ending range of range navigator.
	* @Default {null}
	*/
	end?: string;

	/**Specifies the starting range of range navigator.
	* @Default {null}
	*/
	start?: string;
}

export interface SelectedRangeSettings {

	/**Specifies the ending range of range navigator.
	* @Default {null}
	*/
	end?: string;

	/**Specifies the starting range of range navigator.
	* @Default {null}
	*/
	start?: string;
}

export interface SizeSettings {

	/**Specifies height of the range navigator.
	* @Default {null}
	*/
	height?: string;

	/**Specifies width of the range navigator.
	* @Default {null}
	*/
	width?: string;
}

export interface TooltipSettingsFont {

	/**Specifies the color of text in tooltip. Tooltip text render in the specified color.
	* @Default {#FFFFFF}
	*/
	color?: string;

	/**Specifies the font family of text in tooltip. Tooltip text render in the specified font family.
	* @Default {Segoe UI}
	*/
	family?: string;

	/**Specifies the font style of text in tooltip. Tooltip text render in the specified font style.
	* @Default {ej.datavisualization.RangeNavigator.fontStyle.Normal}
	*/
	fontStyle?: string;

	/**Specifies the opacity of text in tooltip. Tooltip text render in the specified opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the size of text in tooltip. Tooltip text render in the specified size.
	* @Default {10px}
	*/
	size?: string;

	/**Specifies the weight of text in tooltip. Tooltip text render in the specified weight.
	* @Default {ej.datavisualization.RangeNavigator.weight.Regular}
	*/
	weight?: string;
}

export interface TooltipSettings {

	/**Specifies the background color of tooltip.
	* @Default {#303030}
	*/
	backgroundColor?: string;

	/**Options for customizing the font in tooltip.
	*/
	font?: TooltipSettingsFont;

	/**Specifies the format of text to be displayed in tooltip.
	* @Default {MM/dd/yyyy}
	*/
	labelFormat?: string;

	/**Specifies the mode of displaying the tooltip. Neither to display the tooltip always nor on demand.
	* @Default {null}
	*/
	tooltipDisplayMode?: string;

	/**Toggles the visibility of tooltip.
	* @Default {true}
	*/
	visible?: boolean;
}

export interface ValueAxisSettingsAxisLine {

	/**Toggles the visibility of axis line.
	* @Default {none}
	*/
	visible?: string;
}

export interface ValueAxisSettingsFont {

	/**Text in axis render with the specified size.
	* @Default {0px}
	*/
	size?: string;
}

export interface ValueAxisSettingsMajorGridLines {

	/**Toggles the visibility of major grid lines.
	* @Default {false}
	*/
	visible?: boolean;
}

export interface ValueAxisSettingsMajorTickLines {

	/**Specifies the size of the majorTickLines in range navigator
	* @Default {0}
	*/
	size?: number;

	/**Toggles the visibility of major tick lines.
	* @Default {true}
	*/
	visible?: boolean;

	/**Specifies width of the major tick lines.
	* @Default {0}
	*/
	width?: number;
}

export interface ValueAxisSettings {

	/**Options for customizing the axis line.
	*/
	axisLine?: ValueAxisSettingsAxisLine;

	/**Options for customizing the font of the axis.
	*/
	font?: ValueAxisSettingsFont;

	/**Options for customizing the major grid lines.
	*/
	majorGridLines?: ValueAxisSettingsMajorGridLines;

	/**Options for customizing the major tick lines in axis.
	*/
	majorTickLines?: ValueAxisSettingsMajorTickLines;

	/**If the range is not given explicitly, range will be calculated automatically. You can customize the automatic range calculation using rangePadding.
	* @Default {none}
	*/
	rangePadding?: string;

	/**Toggles the visibility of axis in range navigator.
	* @Default {false}
	*/
	visible?: boolean;
}
}
module RangeNavigator
{
enum IntervalType
{
//string
Years,
//string
Quarters,
//string
Months,
//string
Weeks,
//string
Days,
//string
Hours,
}
}
module RangeNavigator
{
enum LabelPlacement
{
//string
Inside,
//string
Outside,
}
}
module RangeNavigator
{
enum Position
{
//string
Top,
//string
Bottom,
}
}
module RangeNavigator
{
enum FontStyle
{
//string
Normal,
//string
Bold,
//string
Italic,
}
}
module RangeNavigator
{
enum FontWeight
{
//string
Regular,
//string
Lighter,
}
}
module RangeNavigator
{
enum HorizontalAlignment
{
//string
Middle,
//string
Left,
//string
Right,
}
}
module RangeNavigator
{
enum RangePadding
{
//string
Additional,
//string
Normal,
//string
None,
//string
Round,
}
}
module RangeNavigator
{
enum ValueType
{
//string
Numeric,
//string
DateTime,
}
}

class BulletGraph extends ej.Widget {
	static fn: BulletGraph;
	constructor(element: JQuery, options?: BulletGraph.Model);
	constructor(element: Element, options?: BulletGraph.Model);
	model:BulletGraph.Model;
	defaults:BulletGraph.Model;

	/** To destroy the bullet graph
	* @returns {void}
	*/
	destroy (): void;

	/** To redraw the bulet graph
	* @returns {void}
	*/
	redraw(): void;

	/** To set the value for comparative measure in bullet graph.
	* @returns {void}
	*/
	setComparativeMeasureSymbol(): void;

	/** To set the value for feature measure bar.
	* @returns {void}
	*/
	setFeatureMeasureBarValue(): void;
}
export module BulletGraph{

export interface Model {

	/**Toggles the visibility of the range stroke color of the labels.
	* @Default {false}
	*/
	applyRangeStrokeToLabels?: boolean;

	/**Toggles the visibility of the range stroke color of the ticks.
	* @Default {false}
	*/
	applyRangeStrokeToTicks?: boolean;

	/**Contains property to customize the caption in bullet graph.
	*/
	captionSettings?: CaptionSettings;

	/**Comparative measure bar in bullet graph render till the specified value.
	* @Default {0}
	*/
	comparativeMeasureValue?: number;

	/**Toggles the animation of bullet graph.
	* @Default {true}
	*/
	enableAnimation?: boolean;

	/**Sets a value whether to make the bullet graph responsive on resize.
	* @Default {true}
	*/
	enableResizing?: boolean;

	/**Specifies the direction of flow in bullet graph. Neither it may be backward nor forward.
	* @Default {forward}
	*/
	flowDirection?: ej.datavisualization.BulletGraph.FlowDirection|string;

	/**Specifies the height of the bullet graph.
	* @Default {90}
	*/
	height?: number;

	/**Bullet graph will render in the specified orientation.
	* @Default {horizontal}
	*/
	orientation?: ej.datavisualization.BulletGraph.Orientation|string;

	/**Contains property to customize the qualitative ranges.
	*/
	qualitativeRanges?: Array<QualitativeRanges>;

	/**Size of the qualitative range depends up on the specified value.
	* @Default {32}
	*/
	qualitativeRangeSize?: number;

	/**Length of the quantitative range depends up on the specified value.
	* @Default {475}
	*/
	quantitativeScaleLength?: number;

	/**Contains all the properties to customize quantitative scale.
	*/
	quantitativeScaleSettings?: QuantitativeScaleSettings;

	/**By specifying this property the user can change the theme of the bullet graph.
	* @Default {flatlight}
	*/
	theme?: string;

	/**Contains all the properties to customize tooltip.
	*/
	tooltipSettings?: TooltipSettings;

	/**Feature measure bar in bullet graph render till the specified value.
	* @Default {0}
	*/
	value?: number;

	/**Specifies the width of the bullet graph.
	* @Default {595}
	*/
	width?: number;

	/**Fires on rendering the caption of bullet graph.*/
	drawCaption? (e: DrawCaptionEventArgs): void;

	/**Fires on rendering the category.*/
	drawCategory? (e: DrawCategoryEventArgs): void;

	/**Fires on rendering the comparative measure symbol.*/
	drawComparativeMeasureSymbol? (e: DrawComparativeMeasureSymbolEventArgs): void;

	/**Fires on rednering the feature measure bar.*/
	drawFeatureMeasureBar? (e: DrawFeatureMeasureBarEventArgs): void;

	/**Fires on rendering the indicator of bullet graph.*/
	drawIndicator? (e: DrawIndicatorEventArgs): void;

	/**Fires on rendering the labels.*/
	drawLabels? (e: DrawLabelsEventArgs): void;

	/**Fires on rendering the qualitative ranges.*/
	drawQualitativeRanges? (e: DrawQualitativeRangesEventArgs): void;

	/**Fires on loading bullet graph.*/
	load? (e: LoadEventArgs): void;
}

export interface DrawCaptionEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: HTMLElement;

	/**returns the current captionSettings element.
	*/
	captionElement?: HTMLElement;

	/**returns the type of the captionSettings.
	*/
	captionType?: string;
}

export interface DrawCategoryEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: HTMLElement;

	/**returns the options of category element.
	*/
	categoryElement?: HTMLElement;

	/**returns the text value of the category that is drawn.
	*/
	Value?: string;
}

export interface DrawComparativeMeasureSymbolEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: HTMLElement;

	/**returns the options of comparative measure element.
	*/
	targetElement?: HTMLElement;

	/**returns the value of the comparative measure symbol.
	*/
	Value?: number;
}

export interface DrawFeatureMeasureBarEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: HTMLElement;

	/**returns the options of feature measure element.
	*/
	currentElement?: HTMLElement;

	/**returns the value of the feature measure bar.
	*/
	Value?: number;
}

export interface DrawIndicatorEventArgs {

	/**returns an object to customize bullet graph indicator text and symbol before rendering it.
	*/
	indicatorSettings?: any;

	/**returns the object of bullet graph.
	*/
	model?: any;

	/**returns the type of event.
	*/
	type?: string;

	/**for cancelling the event.
	*/
	cancel?: boolean;
}

export interface DrawLabelsEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the options of the scale element.
	*/
	scaleElement?: HTMLElement;

	/**returns the current label element.
	*/
	tickElement?: HTMLElement;

	/**returns the label type.
	*/
	labelType?: string;
}

export interface DrawQualitativeRangesEventArgs {

	/**returns the object of the bullet graph.
	*/
	Object?: any;

	/**returns the index of current range.
	*/
	rangeIndex?: number;

	/**returns the settings for current range.
	*/
	rangeOptions?: any;

	/**returns the end value of current range.
	*/
	rangeEndValue?: number;
}

export interface LoadEventArgs {
}

export interface CaptionSettingsFont {

	/**Specifies the color of the text in caption.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the fontFamily of caption. Caption text render with this fontFamily
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of caption
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

	/**Specifies the fontWeight of caption
	* @Default {regular}
	*/
	fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

	/**Specifies the opacity of caption. Caption text render with this opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the size of caption. Caption text render with this size
	* @Default {12px}
	*/
	size?: string;
}

export interface CaptionSettingsIndicatorFont {

	/**Specifies the color of the indicator's text.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the fontFamily of indicator. Indicator text render with this fontFamily.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of indicator. Indicator text render with this fontStyle. See FontStyle
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

	/**Specifies the fontWeight of indicator. Indicator text render with this fontWeight. See FontWeight
	* @Default {regular}
	*/
	fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

	/**Specifies the opacity of indicator text. Indicator text render with this Opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the size of indicator. Indicator text render with this size.
	* @Default {12px}
	*/
	size?: string;
}

export interface CaptionSettingsIndicatorLocation {

	/**Specifies the horizontal position of the indicator.
	* @Default {10}
	*/
	x?: number;

	/**Specifies the vertical position of the indicator.
	* @Default {60}
	*/
	y?: number;
}

export interface CaptionSettingsIndicatorSymbolBorder {

	/**Specifies the border color of indicator symbol.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the border width of indicator symbol.
	* @Default {1}
	*/
	width?: number;
}

export interface CaptionSettingsIndicatorSymbolSize {

	/**Specifies the height of indicator symbol.
	* @Default {10}
	*/
	height?: number;

	/**Specifies the width of indicator symbol.
	* @Default {10}
	*/
	width?: number;
}

export interface CaptionSettingsIndicatorSymbol {

	/**Contains property to customize the border of indicator symbol.
	*/
	border?: CaptionSettingsIndicatorSymbolBorder;

	/**Specifies the color of indicator symbol.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the url of image that represents indicator symbol.
	*/
	imageURL?: string;

	/**Specifies the opacity of indicator symbol.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the shape of indicator symbol.
	*/
	shape?: string;

	/**Contains property to customize the size of indicator symbol.
	*/
	size?: CaptionSettingsIndicatorSymbolSize;
}

export interface CaptionSettingsIndicator {

	/**Contains property to customize the font of indicator.
	*/
	font?: CaptionSettingsIndicatorFont;

	/**Contains property to customize the location of indicator.
	*/
	location?: CaptionSettingsIndicatorLocation;

	/**Specifies the padding to be applied when text position is used.
	* @Default {2}
	*/
	padding?: number;

	/**Contains property to customize the symbol of indicator.
	*/
	symbol?: CaptionSettingsIndicatorSymbol;

	/**Specifies the text to be displayed as indicator text. By default difference between current value and target will be displayed
	*/
	text?: string;

	/**Specifies the alignement of indicator with respect to scale based on text position
	* @Default {'Near'}
	*/
	textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

	/**Specifies where indicator text should be anchored when indicator overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
	* @Default {'start'}
	*/
	textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

	/**indicator text render in the specified angle.
	* @Default {0}
	*/
	textAngle?: number;

	/**Specifies where indicator should be placed
	* @Default {'float'}
	*/
	textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;

	/**Specifies the space between indicator symbol and text.
	* @Default {3}
	*/
	textSpacing?: number;

	/**Specifies whether indicator will be visible or not.
	* @Default {false}
	*/
	visibile?: boolean;
}

export interface CaptionSettingsLocation {

	/**Specifies the position in horizontal direction
	* @Default {17}
	*/
	x?: number;

	/**Specifies the position in horizontal direction
	* @Default {30}
	*/
	y?: number;
}

export interface CaptionSettingsSubTitleFont {

	/**Specifies the color of the subtitle's text.
	* @Default {null}
	*/
	color?: string;

	/**Specifies the fontFamily of subtitle. Subtitle text render with this fontFamily.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of subtitle. Subtitle text render with this fontStyle. See FontStyle
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

	/**Specifies the fontWeight of subtitle. Subtitle text render with this fontWeight. See FontWeight
	* @Default {regular}
	*/
	fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

	/**Specifies the opacity of subtitle. Subtitle text render with this opacity.
	* @Default {1}
	*/
	opacity?: number;

	/**Specifies the size of subtitle. Subtitle text render with this size.
	* @Default {12px}
	*/
	size?: string;
}

export interface CaptionSettingsSubTitleLocation {

	/**Specifies the horizontal position of the subtitle.
	* @Default {10}
	*/
	x?: number;

	/**Specifies the vertical position of the subtitle.
	* @Default {45}
	*/
	y?: number;
}

export interface CaptionSettingsSubTitle {

	/**Contains property to customize the font of subtitle.
	*/
	font?: CaptionSettingsSubTitleFont;

	/**Contains property to customize the location of subtitle.
	*/
	location?: CaptionSettingsSubTitleLocation;

	/**Specifies the padding to be applied when text position is used.
	* @Default {5}
	*/
	padding?: number;

	/**Specifies the text to be displayed as subtitle.
	*/
	text?: string;

	/**Specifies the alignment of sub title text with respect to scale. Alignment will not be applied in float position.
	* @Default {'Near'}
	*/
	textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

	/**Specifies where subtitle text should be anchored when sub title text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
	* @Default {'start'}
	*/
	textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

	/**Subtitle render in the specified angle.
	* @Default {0}
	*/
	textAngle?: number;

	/**Specifies where sub title text should be placed.
	* @Default {'float'}
	*/
	textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;
}

export interface CaptionSettings {

	/**Specifies whether trim the labels will be true or false.
	* @Default {true}
	*/
	enableTrim?: boolean;

	/**Contains property to customize the font of caption.
	*/
	font?: CaptionSettingsFont;

	/**Contains property to customize the indicator.
	*/
	indicator?: CaptionSettingsIndicator;

	/**Contains property to customize the location.
	*/
	location?: CaptionSettingsLocation;

	/**Specifies the padding to be applied when text position is used.
	* @Default {5}
	*/
	padding?: number;

	/**Contains property to customize the subtitle.
	*/
	subTitle?: CaptionSettingsSubTitle;

	/**Specifies the text to be displayed on bullet graph.
	*/
	text?: string;

	/**Specifies the alignment of caption text with respect to scale. This property will not be applied when text position is float.
	* @Default {'Near'}
	*/
	textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

	/**Specifies caption text anchoring when caption text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
	* @Default {'start'}
	*/
	textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

	/**Specifies the angel in which the caption is rendered.
	* @Default {0}
	*/
	textAngle?: number;

	/**Specifies how caption text should be placed.
	* @Default {'float'}
	*/
	textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;
}

export interface QualitativeRanges {

	/**Specifies the ending range to which the qualitative ranges will render.
	* @Default {3}
	*/
	rangeEnd?: number;

	/**Specifies the opacity for the qualitative ranges.
	* @Default {1}
	*/
	rangeOpacity?: number;

	/**Specifies the stroke for the qualitative ranges.
	* @Default {null}
	*/
	rangeStroke?: string;
}

export interface QuantitativeScaleSettingsComparativeMeasureSettings {

	/**Specifies the stroke of the comparative measure.
	* @Default {null}
	*/
	stroke?: number;

	/**Specifies the width of the comparative measure.
	* @Default {5}
	*/
	width?: number;
}

export interface QuantitativeScaleSettingsFeaturedMeasureSettings {

	/**Specifies the Stroke of the featured measure in bullet graph.
	* @Default {null}
	*/
	stroke?: number;

	/**Specifies the width of the featured measure in bullet graph.
	* @Default {2}
	*/
	width?: number;
}

export interface QuantitativeScaleSettingsFeatureMeasures {

	/**Specifies the category of feature measure.
	* @Default {null}
	*/
	category?: string;

	/**Comparative measure render till the specified value.
	* @Default {null}
	*/
	comparativeMeasureValue?: number;

	/**Feature measure render till the specified value.
	* @Default {null}
	*/
	value?: number;
}

export interface QuantitativeScaleSettingsFields {

	/**Specifies the category of the bullet graph.
	* @Default {null}
	*/
	category?: string;

	/**Comparative measure render based on the values in the specified field.
	* @Default {null}
	*/
	comparativeMeasure?: string;

	/**Specifies the dataSource for the bullet graph.
	* @Default {null}
	*/
	dataSource?: any;

	/**Feature measure render based on the values in the specified field.
	* @Default {null}
	*/
	featureMeasures?: string;

	/**Specifies the query for fetching the values form data source to render the bullet graph.
	* @Default {null}
	*/
	query?: string;

	/**Specifies the name of the table.
	* @Default {null}
	*/
	tableName?: string;
}

export interface QuantitativeScaleSettingsLabelSettingsFont {

	/**Specifies the fontFamily of labels in bullet graph. Labels render with this fontFamily.
	* @Default {Segoe UI}
	*/
	fontFamily?: string;

	/**Specifies the fontStyle of labels in bullet graph. Labels render with this fontStyle. See FontStyle
	* @Default {Normal}
	*/
	fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

	/**Specifies the fontWeight of labels in bullet graph. Labels render with this fontWeight. See FontWeight
	* @Default {regular}
	*/
	fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

	/**Specifies the opacity of labels in bullet graph. Labels render with this opacity
	* @Default {1}
	*/
	opacity?: number;
}

export interface QuantitativeScaleSettingsLabelSettings {

	/**Contains property to customize the font of the labels in bullet graph.
	*/
	font?: QuantitativeScaleSettingsLabelSettingsFont;

	/**Specifies the placement of labels in bullet graph scale.
	* @Default {outside}
	*/
	labelPlacement?: ej.datavisualization.BulletGraph.LabelPlacement|string;

	/**Specifies the prefix to be added with labels in bullet graph.
	* @Default {Empty string}
	*/
	labelPrefix?: string;

	/**Specifies the suffix to be added after labels in bullet graph.
	* @Default {Empty string}
	*/
	labelSuffix?: string;

	/**Specifies the horizontal/vertical padding of labels.
	* @Default {15}
	*/
	offset?: number;

	/**Specifies the position of the labels to render either above or below the graph. See Position
	* @Default {below}
	*/
	position?: ej.datavisualization.BulletGraph.LabelPosition|string;

	/**Specifies the Size of the labels.
	* @Default {12}
	*/
	size?: number;

	/**Specifies the stroke color of the labels in bullet graph.
	* @Default {null}
	*/
	stroke?: string;
}

export interface QuantitativeScaleSettingsLocation {

	/**This property specifies the x position for rendering quantitative scale.
	* @Default {10}
	*/
	x?: number;

	/**This property specifies the y position for rendering quantitative scale.
	* @Default {10}
	*/
	y?: number;
}

export interface QuantitativeScaleSettingsMajorTickSettings {

	/**Specifies the size of the major ticks.
	* @Default {13}
	*/
	size?: number;

	/**Specifies the stroke color of the major tick lines.
	* @Default {null}
	*/
	stroke?: string;

	/**Specifies the width of the major tick lines.
	* @Default {2}
	*/
	width?: number;
}

export interface QuantitativeScaleSettingsMinorTickSettings {

	/**Specifies the size of minor ticks.
	* @Default {7}
	*/
	size?: number;

	/**Specifies the stroke color of minor ticks in bullet graph.
	* @Default {null}
	*/
	stroke?: string;

	/**Specifies the width of the minor ticks in bullet graph.
	* @Default {2}
	*/
	width?: number;
}

export interface QuantitativeScaleSettings {

	/**Contains property to customize the comparative measure.
	*/
	comparativeMeasureSettings?: QuantitativeScaleSettingsComparativeMeasureSettings;

	/**Contains property to customize the featured measure.
	*/
	featuredMeasureSettings?: QuantitativeScaleSettingsFeaturedMeasureSettings;

	/**Contains property to customize the featured measure.
	*/
	featureMeasures?: Array<QuantitativeScaleSettingsFeatureMeasures>;

	/**Contains property to customize the fields.
	*/
	fields?: QuantitativeScaleSettingsFields;

	/**Specifies the interval for the Graph.
	* @Default {1}
	*/
	interval?: number;

	/**Contains property to customize the labels.
	*/
	labelSettings?: QuantitativeScaleSettingsLabelSettings;

	/**Contains property to customize the position of the quantitative scale
	*/
	location?: QuantitativeScaleSettingsLocation;

	/**Contains property to customize the major tick lines.
	*/
	majorTickSettings?: QuantitativeScaleSettingsMajorTickSettings;

	/**Specifies the maximum value of the Graph.
	* @Default {10}
	*/
	maximum?: number;

	/**Specifies the minimum value of the Graph.
	* @Default {0}
	*/
	minimum?: number;

	/**Contains property to customize the minor ticks.
	*/
	minorTickSettings?: QuantitativeScaleSettingsMinorTickSettings;

	/**The specified number of minor ticks will be rendered per interval.
	* @Default {4}
	*/
	minorTicksPerInterval?: number;

	/**Specifies the placement of ticks to render either inside or outside the scale.
	* @Default {ej.datavisualization.BulletGraph.TickPlacement.Outside}
	*/
	tickPlacement?: ej.datavisualization.BulletGraph.TickPlacement|string;

	/**Specifies the position of the ticks to render either above,below or inside
	* @Default {ej.datavisualization.BulletGraph.TickPosition.Far}
	*/
	tickPosition?: ej.datavisualization.BulletGraph.TickPosition|string;
}

export interface TooltipSettings {

	/**Specifies template for caption tooltip
	* @Default {null}
	*/
	captionTemplate?: string;

	/**Toggles the visibility of caption tooltip
	* @Default {false}
	*/
	enableCaptionTooltip?: boolean;

	/**Specifies the ID of a div, which is to be displayed as tooltip.
	* @Default {null}
	*/
	template?: string;

	/**Toggles the visibility of tooltip
	* @Default {true}
	*/
	visible?: boolean;
}
}
module BulletGraph
{
enum FontStyle
{
//string
Normal,
//string
Italic,
//string
Oblique,
}
}
module BulletGraph
{
enum FontWeight
{
//string
Normal,
//string
Bold,
//string
Bolder,
//string
Lighter,
}
}
module BulletGraph
{
enum TextAlignment
{
//string
Near,
//string
Far,
//string
Center,
}
}
module BulletGraph
{
enum TextAnchor
{
//string
Start,
//string
Middle,
//string
End,
}
}
module BulletGraph
{
enum TextPosition
{
//string
Top,
//string
Right,
//string
Left,
//string
Bottom,
//string
Float,
}
}
module BulletGraph
{
enum FlowDirection
{
//string
Forward,
//string
Backward,
}
}
module BulletGraph
{
enum Orientation
{
//string
Horizontal,
//string
Vertical,
}
}
module BulletGraph
{
enum LabelPlacement
{
//string
Inside,
//string
Outside,
}
}
module BulletGraph
{
enum LabelPosition
{
//string
Above,
//string
Below,
}
}
module BulletGraph
{
enum TickPlacement
{
//string
Inside,
//string
Outside,
}
}
module BulletGraph
{
enum TickPosition
{
//string
Below,
//string
Above,
//string
Cross,
}
}

class Barcode extends ej.Widget {
	static fn: Barcode;
	constructor(element: JQuery, options?: Barcode.Model);
	constructor(element: Element, options?: Barcode.Model);
	model:Barcode.Model;
	defaults:Barcode.Model;

	/** To disable the barcode
	* @returns {void}
	*/
	disable(): void;

	/** To enable the barcode
	* @returns {void}
	*/
	enable(): void;
}
export module Barcode{

export interface Model {

	/**Specifies the distance between the barcode and text below it.
	*/
	barcodeToTextGapHeight?: number;

	/**Specifies the height of bars in the Barcode. By modifying the barHeight, the entire barcode height can be customized. Please refer to xDimension for two dimensional barcode height customization.
	*/
	barHeight?: number;

	/**Specifies the dark bar color of the Barcode. One dimensional barcode contains a series of dark and light bars which are usually colored as black and white respectively.
	*/
	darkBarColor?: any;

	/**Specifies whether the text below the barcode is visible or hidden.
	*/
	displayText?: boolean;

	/**Specifies whether the control is enabled.
	*/
	enabled?: boolean;

	/**Specifies the start and stop encode symbol in the Barcode. In one dimensional barcodes, an additional character is added as start and stop delimiters. These symbols are optional and the unique of the symbol allows the reader to determine the direction of the barcode being scanned.
	*/
	encodeStartStopSymbol?: number;

	/**Specifies the light bar color of the Barcode. One dimensional barcode contains a series of dark and light bars which are usually colored as black and white respectively.
	*/
	lightBarColor?: any;

	/**Specifies the width of the narrow bars in the barcode. The dark bars in the one dimensional barcode contains random narrow and wide bars based on the provided input which can be specified during initialization.
	*/
	narrowBarWidth?: number;

	/**Specifies the width of the quiet zone. In barcode, a quiet zone is the blank margin on either side of a barcode which informs the reader where a barcode's symbology starts and stops. The purpose of a quiet zone is to prevent the reader from picking up unrelated information.
	*/
	quietZone?: QuietZone;

	/**Specifies the type of the Barcode. See SymbologyType
	*/
	symbologyType?: ej.datavisualization.Barcode.SymbologyType|string;

	/**Specifies the text to be encoded in the barcode.
	*/
	text?: string;

	/**Specifies the color of the text/data at the bottom of the barcode.
	*/
	textColor?: any;

	/**Specifies the width of the wide bars in the barcode. One dimensional barcode usually contains random narrow and wide bars based on the provided which can be customized during initialization.
	*/
	wideBarWidth?: number;

	/**Specifies the width of the narrowest element(bar or space) in a barcode. The greater the x dimension, the more easily a barcode reader will scan.
	*/
	xDimension?: number;

	/**Fires after Barcode control is loaded.*/
	load? (e: LoadEventArgs): void;
}

export interface LoadEventArgs {

	/**if the event should be canceled; otherwise, false.
	*/
	cancel?: boolean;

	/**returns the barcode model
	*/
	model?: any;

	/**returns the name of the event
	*/
	type?: string;

	/**return the barcode state
	*/
	status?: boolean;
}

export interface QuietZone {

	/**Specifies the quiet zone around the Barcode.
	*/
	all?: number;

	/**Specifies the bottom quiet zone of the Barcode.
	*/
	bottom?: number;

	/**Specifies the left quiet zone of the Barcode.
	*/
	left?: number;

	/**Specifies the right quiet zone of the Barcode.
	*/
	right?: number;

	/**Specifies the top quiet zone of the Barcode.
	*/
	top?: number;
}
}
module Barcode
{
enum SymbologyType
{
//Represents the QR code
QRBarcode,
//Represents the Data Matrix barcode
DataMatrix,
//Represents the Code 39 barcode
Code39,
//Represents the Code 39 Extended barcode
Code39Extended,
//Represents the Code 11 barcode
Code11,
//Represents the Codabar barcode
Codabar,
//Represents the Code 32 barcode
Code32,
//Represents the Code 93 barcode
Code93,
//Represents the Code 93 Extended barcode
Code93Extended,
//Represents the Code 128 A barcode
Code128A,
//Represents the Code 128 B barcode
Code128B,
//Represents the Code 128 C barcode
Code128C,
}
}

class Map extends ej.Widget {
	static fn: Map;
	constructor(element: JQuery, options?: Map.Model);
	constructor(element: Element, options?: Map.Model);
	model:Map.Model;
	defaults:Map.Model;

	/** Method for navigating to specific shape based on latitude, longitude and zoomlevel.
	* @param {number} Pass the latitude value for map
	* @param {number} Pass the longitude value for map
	* @param {number} Pass the zoom level for map
	* @returns {void}
	*/
	navigateTo(latitude: number, longitude: number, level: number): void;

	/** Method to perform map panning
	* @param {string} Pass the direction in which map should be panned
	* @returns {void}
	*/
	pan(direction: string): void;

	/** Method to reload the map.
	* @returns {void}
	*/
	refresh(): void;

	/** Method to reload the shapeLayers with updated values
	* @returns {void}
	*/
	refreshLayers(): void;

	/** Method to reload the navigation control with updated values.
	* @param {any} Pass the navigation control instance
	* @returns {void}
	*/
	refreshNavigationControl(navigation: any): void;

	/** Method to perform map zooming.
	* @param {number} Pass the zoom level for map to be zoomed
	* @param {boolean} Pass the boolean value to enable or disable animation while zooming
	* @returns {void}
	*/
	zoom(level: number, isAnimate: boolean): void;
}
export module Map{

export interface Model {

	/**Specifies the background color for map
	* @Default {white}
	*/
	background?: string;

	/**Specifies the base map-index of the map to determine the shapelayer to be displayed
	* @Default {0}
	*/
	baseMapIndex?: number;

	/**Specify the center position where map should be displayed
	* @Default {[0,0]}
	*/
	centerPosition?: any;

	/**Enables or Disables the map animation
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**Enables or Disables the animation for layer change in map
	* @Default {false}
	*/
	enableLayerChangeAnimation?: boolean;

	/**Enables or Disables the map panning
	* @Default {true}
	*/
	enablePan?: boolean;

	/**Determines whether map need to resize when container is resized
	* @Default {true}
	*/
	enableResize?: boolean;

	/**Enables or Disables the zooming of map
	* @Default {true}
	*/
	enableZoom?: boolean;

	/**Enables or Disables the zoom on selecting the map shape
	* @Default {false}
	*/
	enableZoomOnSelection?: boolean;

	/**Specifies the zoom factor for map zoom value.
	* @Default {1}
	*/
	factor?: number;

	/**Hold the shapelayers to be displayed in map
	* @Default {[]}
	*/
	layers?: Array<any>;

	/**Specifies the zoom level value for which map to be zoomed
	* @Default {1}
	*/
	level?: number;

	/**Specifies the maximum zoom level of the map
	* @Default {100}
	*/
	maxValue?: number;

	/**Specifies the minimum zoomSettings level of the map
	* @Default {1}
	*/
	minValue?: number;

	/**Enables or Disables the navigation control for map to perform zooming and panning on map shapes.
	*/
	navigationControl?: any;

	/**Layer for holding the map shapes
	*/
	shapeLayer?: ShapeLayer;

	/**Enables or Disables the Zooming for map.
	*/
	zoomSettings?: any;

	/**Triggered on selecting the map markers.*/
	markerSelected? (e: MarkerSelectedEventArgs): void;

	/**Triggers while leaving the hovered map shape*/
	mouseleave? (e: MouseleaveEventArgs): void;

	/**Triggers while hovering the map shape.*/
	mouseover? (e: MouseoverEventArgs): void;

	/**Triggers once map render completed.*/
	onRenderComplete? (e: OnRenderCompleteEventArgs): void;

	/**Triggers when map panning ends.*/
	panned? (e: PannedEventArgs): void;

	/**Triggered on selecting the map shapes.*/
	shapeSelected? (e: ShapeSelectedEventArgs): void;

	/**Triggered when map is zoomed-in.*/
	zoomedIn? (e: ZoomedInEventArgs): void;

	/**Triggers when map is zoomed out.*/
	zoomedOut? (e: ZoomedOutEventArgs): void;
}

export interface MarkerSelectedEventArgs {

	/**Returns marker object.
	*/
	originalEvent?: any;
}

export interface MouseleaveEventArgs {

	/**Returns hovered map shape object.
	*/
	originalEvent?: any;
}

export interface MouseoverEventArgs {

	/**Returns hovered map shape object.
	*/
	originalEvent?: any;
}

export interface OnRenderCompleteEventArgs {

	/**Event parameters from map
	*/
	originalEvent?: any;
}

export interface PannedEventArgs {

	/**Event parameters from map
	*/
	originalEvent?: any;
}

export interface ShapeSelectedEventArgs {

	/**Returns selected shape object.
	*/
	originalEvent?: any;
}

export interface ZoomedInEventArgs {

	/**Event parameters from map
	*/
	originalEvent?: any;

	/**Returns zoom level value for which the map is zoomed.
	*/
	zoomLevel?: any;
}

export interface ZoomedOutEventArgs {

	/**Event parameters from map
	*/
	originalEvent?: any;

	/**Returns zoom level value for which the map is zoomed.
	*/
	zoomLevel?: any;
}

export interface ShapeLayerBubbleSettings {

	/**Specifies the bubble Opacity value of bubbles for shape layer in map
	* @Default {0.9}
	*/
	bubbleOpacity?: number;

	/**Specifies the mouse hover color of the shape layer in map
	* @Default {gray}
	*/
	color?: string;

	/**Specifies the colorMappings of the shape layer in map
	* @Default {null}
	*/
	colorMappings?: any;

	/**Specifies the bubble color valuePath of the shape layer in map
	* @Default {null}
	*/
	colorValuePath?: string;

	/**Specifies the maximum size value of bubbles for shape layer in map
	* @Default {20}
	*/
	maxValue?: number;

	/**Specifies the minimum size value of bubbles for shape layer in map
	* @Default {10}
	*/
	minValue?: number;

	/**Specifies the showBubble visibility status map
	* @Default {true}
	*/
	showBubble?: boolean;

	/**Specifies the tooltip visibility status of the shape layer in map
	* @Default {false}
	*/
	showTooltip?: boolean;

	/**Specifies the bubble tooltip template of the shape layer in map
	* @Default {null}
	*/
	tooltipTemplate?: string;

	/**Specifies the bubble valuePath of the shape layer in map
	* @Default {null}
	*/
	valuePath?: string;
}

export interface ShapeLayerLabelSettings {

	/**enable or disable the enableSmartLabel property
	* @Default {false}
	*/
	enableSmartLabel?: boolean;

	/**set the labelLength property
	* @Default {'2'}
	*/
	labelLength?: number;

	/**set the labelPath property
	* @Default {null}
	*/
	labelPath?: string;

	/**enable or disable the showlabel property
	* @Default {false}
	*/
	showLabels?: boolean;

	/**set the smartLabelSize property
	* @Default {fixed}
	*/
	smartLabelSize?: ej.datavisualization.Map.LabelSize|string;
}

export interface ShapeLayerLegendSettings {

	/**Determines whether the legend should be placed outside or inside the map bounds
	* @Default {false}
	*/
	dockOnMap?: boolean;

	/**Determines the legend placement and it is valid only when dockOnMap is true
	* @Default {top}
	*/
	dockPosition?: ej.datavisualization.Map.DockPosition|string;

	/**height value for legend setting
	* @Default {0}
	*/
	height?: number;

	/**to get icon value for legend setting
	* @Default {rectangle}
	*/
	icon?: ej.datavisualization.Map.LegendIcons|string;

	/**icon height value for legend setting
	* @Default {20}
	*/
	iconHeight?: number;

	/**icon Width value for legend setting
	* @Default {20}
	*/
	iconWidth?: number;

	/**set the orientation of legend labels
	* @Default {vertical}
	*/
	labelOrientation?: ej.datavisualization.Map.LabelOrientation|string;

	/**to get leftLabel value for legend setting
	* @Default {null}
	*/
	leftLabel?: string;

	/**to get mode of legend setting
	* @Default {default}
	*/
	mode?: ej.datavisualization.Map.LegendMode|string;

	/**set the position of legend settings
	* @Default {topleft}
	*/
	position?: ej.datavisualization.Map.Position|string;

	/**x position value for legend setting
	* @Default {0}
	*/
	positionX?: number;

	/**y position value for legend setting
	* @Default {0}
	*/
	positionY?: number;

	/**to get rightLabel value for legend setting
	* @Default {null}
	*/
	rightLabel?: string;

	/**Enables or Disables the showLabels
	* @Default {false}
	*/
	showLabels?: boolean;

	/**Enables or Disables the showLegend
	* @Default {false}
	*/
	showLegend?: boolean;

	/**to get title of legend setting
	* @Default {null}
	*/
	title?: string;

	/**to get type of legend setting
	* @Default {layers}
	*/
	type?: ej.datavisualization.Map.LegendType|string;

	/**width value for legend setting
	* @Default {0}
	*/
	width?: number;
}

export interface ShapeLayerShapeSettings {

	/**Enables or Disables the auto fill colors for shape layer in map. When this property value set to true, shapes will be filled with palette colors.
	* @Default {false}
	*/
	autoFill?: boolean;

	/**Specifies the colorMappings of the shape layer in map
	* @Default {null}
	*/
	colorMappings?: any;

	/**Specifies the shape color palette value of the shape layer in map. Accepted colorPalette values are palette1, palette2, palette3 and custompalette.
	* @Default {palette1}
	*/
	colorPalette?: string;

	/**Specifies the shape color valuePath of the shape layer in map
	* @Default {null}
	*/
	colorValuePath?: string;

	/**Enables or Disables the gradient colors for map shapes.
	* @Default {false}
	*/
	enableGradient?: boolean;

	/**Specifies the shape fill color of the shape layer in map
	* @Default {#E5E5E5}
	*/
	fill?: string;

	/**Specifies the mouse over width of the shape layer in map
	* @Default {1}
	*/
	highlightBorderWidth?: number;

	/**Specifies the mouse hover color of the shape layer in map
	* @Default {gray}
	*/
	highlightColor?: string;

	/**Specifies the mouse over stroke color of the shape layer in map
	* @Default {#C1C1C1}
	*/
	highlightStroke?: string;

	/**Specifies the shape selection color of the shape layer in map
	* @Default {gray}
	*/
	selectionColor?: string;

	/**Specifies the shape selection stroke color of the shape layer in map
	* @Default {#C1C1C1}
	*/
	selectionStroke?: string;

	/**Specifies the shape selection stroke width of the shape layer in map
	* @Default {1}
	*/
	selectionStrokeWidth?: number;

	/**Specifies the shape stroke color of the shape layer in map
	* @Default {#C1C1C1}
	*/
	stroke?: string;

	/**Specifies the shape stroke thickness value of the shape layer in map
	* @Default {0.2}
	*/
	strokeThickness?: number;

	/**Specifies the shape valuePath of the shape layer in map
	* @Default {null}
	*/
	valuePath?: string;
}

export interface ShapeLayer {

	/**to get the type of bing map.
	* @Default {aerial}
	*/
	bingMapType?: ej.datavisualization.Map.BingMapType|string;

	/**Specifies the bubble settings for map
	*/
	bubbleSettings?: ShapeLayerBubbleSettings;

	/**Specifies the datasource for the shape layer
	*/
	dataSource?: any;

	/**Enables or disables the animation
	* @Default {false}
	*/
	enableAnimation?: boolean;

	/**Enables or disables the shape mouse hover
	* @Default {false}
	*/
	enableMouseHover?: boolean;

	/**Enables or disables the shape selection
	* @Default {true}
	*/
	enableSelection?: boolean;

	/**to get the key of bing map
	* @Default {null}
	*/
	key?: string;

	/**Options for enabling and configuring labelSettings labelPath, smartLabelSize, labelLength etc.,
	*/
	labelSettings?: ShapeLayerLabelSettings;

	/**Specifies the map type.
	* @Default {'geometry'}
	*/
	layerType?: ej.datavisualization.Map.LayerType|string;

	/**Options for enabling and configuring legendSettings position, height, width, mode, type etc.,
	*/
	legendSettings?: ShapeLayerLegendSettings;

	/**Specifies the map items template for shapes.
	*/
	mapItemsTemplate?: string;

	/**Specify markers for shape layer.
	* @Default {[]}
	*/
	markers?: Array<any>;

	/**Specifies the map marker template for map layer.
	* @Default {null}
	*/
	markerTemplate?: string;

	/**Specify selectedMapShapes for shape layer
	* @Default {[]}
	*/
	selectedMapShapes?: Array<any>;

	/**Specifies the selection mode of the map. Accepted selection mode values are Default and Multiple.
	* @Default {default}
	*/
	selectionMode?: ej.datavisualization.Map.SelectionMode|string;

	/**Specifies the shape data for the shape layer
	*/
	shapeDataobject?: any;

	/**Specifies the shape settings of map layer
	*/
	shapeSettings?: ShapeLayerShapeSettings;

	/**Shows or hides the map items.
	* @Default {false}
	*/
	showMapItems?: boolean;

	/**Shows or hides the tooltip for shapes
	* @Default {false}
	*/
	showTooltip?: boolean;

	/**Specifies the sub shape layers
	* @Default {[]}
	*/
	subLayers?: Array<any>;

	/**Specifies the tooltip template for shapes.
	*/
	tooltipTemplate?: string;

	/**Specifies the url template for the OSM type map.
	* @Default {'http://a.tile.openstreetmap.org/level/tileX/tileY.png'}
	*/
	urlTemplate?: string;
}
}
module Map
{
enum Position
{
//specifies the none position
None,
//specifies the topleft position
Topleft,
//specifies the topcenter position
Topcenter,
//specifies the topright position
Topright,
//specifies the centerleft position
Centerleft,
//specifies the center position
Center,
//specifies the centerright position
Centerright,
//specifies the bottomleft position
Bottomleft,
//specifies the bottomcenter position
Bottomcenter,
//specifies the bottomright position
Bottomright,
}
}
module Map
{
enum Orientation
{
//specifies the horizontal position
Horizontal,
//specifies the vertical position
Vertical,
}
}
module Map
{
enum BingMapType
{
//specifies the aerial type
Aerial,
//specifies the aerialwithlabel type
Aerialwithlabel,
//specifies the road type
Road,
}
}
module Map
{
enum LabelSize
{
//specifies the fixed size
Fixed,
//specifies the default size
Default,
}
}
module Map
{
enum LayerType
{
//specifies the geometry type
Geometry,
//specifies the osm type
Osm,
//specifies the bing type
Bing,
}
}
module Map
{
enum DockPosition
{
//specifies the top position
Top,
//specifies the bottom position
Bottom,
//specifies the bottom position
Right,
//specifies the left position
Left,
}
}
module Map
{
enum LegendIcons
{
//specifies the rectangle position
Rectangle,
//specifies the circle position
Circle,
}
}
module Map
{
enum LabelOrientation
{
//specifies the horizontal position
Horizontal,
//specifies the vertical position
Vertical,
}
}
module Map
{
enum LegendMode
{
//specifies the default mode
Default,
//specifies the interactive mode
Interactive,
}
}
module Map
{
enum LegendType
{
//specifies the layers type
Layers,
//specifies the bubbles type
Bubbles,
}
}
module Map
{
enum SelectionMode
{
//specifies the default position
Default,
//specifies the multiple position
Multiple,
}
}

class TreeMap extends ej.Widget {
	static fn: TreeMap;
	constructor(element: JQuery, options?: TreeMap.Model);
	constructor(element: Element, options?: TreeMap.Model);
	model:TreeMap.Model;
	defaults:TreeMap.Model;

	/** Method to reload treemap with updated values.
	* @returns {void}
	*/
	refresh(): void;
}
export module TreeMap{

export interface Model {

	/**Specifies the border brush color of the treemap
	* @Default {white}
	*/
	borderBrush?: string;

	/**Specifies the border thickness of the treemap
	* @Default {1}
	*/
	borderThickness?: number;

	/**Specifies the colors of the paletteColorMapping
	* @Default {[]}
	*/
	colors?: Array<any>;

	/**Specifies the color valuepath of the treemap
	* @Default {null}
	*/
	colorValuePath?: string;

	/**Specifies the datasource of the treemap
	* @Default {null}
	*/
	dataSource?: any;

	/**Specifies the desaturationColorMapping settings of the treemap
	*/
	desaturationColorMapping?: any;

	/**Specifies the dockPosition for legend
	* @Default {top}
	*/
	dockPosition?: ej.datavisualization.TreeMap.DockPosition|string;

	/**specifies the drillDown header color
	* @Default {'null'}
	*/
	drillDownHeaderColor?: string;

	/**specifies the drillDown selection color
	* @Default {'#000000'}
	*/
	drillDownSelectionColor?: string;

	/**Enable/Disable the drillDown for treemap
	* @Default {false}
	*/
	enableDrillDown?: boolean;

	/**Specifies whether treemap need to resize when container is resized
	* @Default {true}
	*/
	enableResize?: boolean;

	/**Specifies the from value for desaturation color mapping
	* @Default {0}
	*/
	from?: number;

	/**Specifies the group color mapping of the treemap
	* @Default {[]}
	*/
	groupColorMapping?: Array<any>;

	/**Specifies the height for legend
	* @Default {30}
	*/
	height?: number;

	/**Specifies the highlight border brush of treemap
	* @Default {gray}
	*/
	highlightBorderBrush?: string;

	/**Specifies the border thickness when treemap items is highlighted in the treemap
	* @Default {5}
	*/
	highlightBorderThickness?: number;

	/**Specifies the highlight border brush of treemap
	* @Default {gray}
	*/
	highlightGroupBorderBrush?: string;

	/**Specifies the border thickness when treemap items is highlighted in the treemap
	* @Default {5}
	*/
	highlightGroupBorderThickness?: number;

	/**Specifies whether treemap item need to highlighted on selection
	* @Default {false}
	*/
	highlightGroupOnSelection?: boolean;

	/**Specifies whether treemap item need to highlighted on selection
	* @Default {false}
	*/
	highlightOnSelection?: boolean;

	/**Specifies the iconHeight for legend
	* @Default {15}
	*/
	iconHeight?: number;

	/**Specifies the iconWidth for legend
	* @Default {15}
	*/
	iconWidth?: number;

	/**Specifies the items layout mode of the treemap. Accepted itemsLayoutMode values are Squarified, SliceAndDiceHorizontal, SliceAndDiceVertical and SliceAndDiceAuto
	* @Default {Squarified}
	*/
	itemsLayoutMode?: ej.datavisualization.TreeMap.ItemsLayoutMode|string;

	/**Specifies the leaf settings of the treemap
	*/
	leafItemSettings?: LeafItemSettings;

	/**Specifies the legend settings of the treemap
	*/
	legendSettings?: any;

	/**Specify levels of treemap for grouped visualization of datas
	* @Default {[]}
	*/
	levels?: Array<any>;

	/**Specifies the paletteColorMapping of the treemap
	*/
	paletteColorMapping?: any;

	/**Specifies the rangeColorMapping settings of the treemap
	*/
	rangeColorMapping?: Array<any>;

	/**Specifies the rangeMaximum value for desaturation color mapping
	* @Default {0}
	*/
	rangeMaximum?: number;

	/**Specifies the rangeMinimum value for desaturation color mapping
	* @Default {0}
	*/
	rangeMinimum?: number;

	/**Specifies the legend visibility status of the treemap
	* @Default {false}
	*/
	showLegend?: boolean;

	/**Specifies whether treemap tooltip need to be visible
	* @Default {false}
	*/
	showTooltip?: boolean;

	/**Specifies the template for legendSettings
	* @Default {null}
	*/
	template?: string;

	/**Specifies the to value for desaturation color mapping
	* @Default {0}
	*/
	to?: number;

	/**Specifies the tooltip template of the treemap
	* @Default {null}
	*/
	tooltipTemplate?: string;

	/**Hold the treeMapItems to be displayed in treemap
	* @Default {[]}
	*/
	treeMapItems?: Array<any>;

	/**Hold the Level settings of TreeMap
	*/
	treeMapLevel?: TreeMapLevel;

	/**Specifies the uniColorMapping settings of the treemap
	*/
	uniColorMapping?: any;

	/**Specifies the weight valuepath of the treemap
	* @Default {null}
	*/
	weightValuePath?: string;

	/**Specifies the width for legend
	* @Default {100}
	*/
	width?: number;

	/**Triggers on treemap item selected.*/
	treeMapItemSelected? (e: TreeMapItemSelectedEventArgs): void;
}

export interface TreeMapItemSelectedEventArgs {

	/**Returns selected treeMapItem object.
	*/
	originalEvent?: any;
}

export interface LeafItemSettings {

	/**Specifies the border bruch color of the leaf item.
	* @Default {white}
	*/
	borderBrush?: string;

	/**Specifies the border thickness of the leaf item.
	* @Default {1}
	*/
	borderThickness?: number;

	/**Specifies the label template of the leaf item.
	* @Default {null}
	*/
	itemTemplate?: string;

	/**Specifies the label path of the leaf item.
	* @Default {null}
	*/
	labelPath?: string;

	/**Specifies the position of the leaf labels.
	* @Default {center}
	*/
	labelPosition?: ej.datavisualization.TreeMap.Position|string;

	/**Specifies the mode of label visibility
	* @Default {visible}
	*/
	labelVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

	/**Shows or hides the label of the leaf item.
	* @Default {false}
	*/
	showLabels?: boolean;
}

export interface TreeMapLevel {

	/**specifies the group background
	* @Default {null}
	*/
	groupBackground?: string;

	/**Specifies the group border color for tree map level.
	* @Default {null}
	*/
	groupBorderColor?: string;

	/**Specifies the group border thickness for tree map level.
	* @Default {1}
	*/
	groupBorderThickness?: number;

	/**Specifies the group gap for tree map level.
	* @Default {1}
	*/
	groupGap?: number;

	/**Specifies the group padding for tree map level.
	* @Default {4}
	*/
	groupPadding?: number;

	/**Specifies the group path for tree map level.
	*/
	groupPath?: string;

	/**Specifies the header height for tree map level.
	* @Default {0}
	*/
	headerHeight?: number;

	/**Specifies the header template for tree map level.
	* @Default {null}
	*/
	headerTemplate?: string;

	/**Specifies the mode of header visibility
	* @Default {visible}
	*/
	headerVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

	/**Specifies the position of the labels.
	* @Default {center}
	*/
	labelPosition?: ej.datavisualization.TreeMap.Position|string;

	/**Specifies the label template for tree map level.
	* @Default {null}
	*/
	labelTemplate?: string;

	/**Specifies the mode of label visibility
	* @Default {visible}
	*/
	labelVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

	/**Shows or hides the header for tree map level.
	* @Default {false}
	*/
	showHeader?: boolean;

	/**Shows or hides the labels for tree map level.
	* @Default {false}
	*/
	showLabels?: boolean;
}
}
module TreeMap
{
enum DockPosition
{
//specifies the top position
Top,
//specifies the bottom position
Bottom,
//specifies the bottom position
Right,
//specifies the left position
Left,
}
}
module TreeMap
{
enum ItemsLayoutMode
{
//specifies the squarified as layout type position
Squarified,
//specifies the sliceanddicehorizontal as layout type position
Sliceanddicehorizontal,
//specifies the sliceanddicevertical as layout type position
Sliceanddicevertical,
//specifies the sliceanddiceauto as layout type position
Sliceanddiceauto,
}
}
module TreeMap
{
enum Position
{
//specifies the none position
None,
//specifies the topleft position
Topleft,
//specifies the topcenter position
Topcenter,
//specifies the topright position
Topright,
//specifies the centerleft position
Centerleft,
//specifies the center position
Center,
//specifies the centerright position
Centerright,
//specifies the bottomleft position
Bottomleft,
//specifies the bottomcenter position
Bottomcenter,
//specifies the bottomright position
Bottomright,
}
}
module TreeMap
{
enum VisibilityMode
{
//specifies the visible mode
Top,
//specifies the hideonexceededlength mode
Hideonexceededlength,
}
}
module TreeMap
{
enum groupSelectionMode
{
//specifies the default mode
Default,
//specifies the multiple mode
Multiple,
}
}

class Diagram extends ej.Widget {
	static fn: Diagram;
	constructor(element: JQuery, options?: Diagram.Model);
	constructor(element: Element, options?: Diagram.Model);
	model:Diagram.Model;
	defaults:Diagram.Model;

	/** Add nodes and connectors to diagram at runtime
	* @param {any} a JSON to define a node/connector or an array of nodes and connector
	* @returns {void}
	*/
	add(node: any): void;

	/** Add a label to a node at runtime
	* @param {string} name of the node to which label will be added
	* @param {any} JSON for the new label to be added
	* @returns {void}
	*/
	addLabel(nodeName: string, newLabel: any): void;

	/** Add a phase to a swimlane at runtime
	* @param {string} name of the swimlane to which the phase will be added
	* @param {any} JSON object to define the phase to be added
	* @returns {void}
	*/
	addPhase(name: string, options: any): void;

	/** Add a collection of ports to the node specified by name
	* @param {string} name of the node to which the ports have to be added
	* @param {Array<any>} a collection of ports to be added to the specified node
	* @returns {void}
	*/
	addPorts(name: string, ports: Array<any>): void;

	/** Add the specified node to selection list
	* @param {any} the node to be selected
	* @param {boolean} to define whether to clear the existing selection or not
	* @returns {void}
	*/
	addSelection(node: any, clearSelection: boolean): void;

	/** Align the selected objects based on the reference object and direction
	* @param {string} to specify the direction towards which the selected objects are to be aligned("left","right",top","bottom")
	* @returns {void}
	*/
	align(direction: string): void;

	/** Bring the specified portion of the diagram content to the diagram viewport
	* @param {any} the rectangular region that is to be brought into diagram viewport
	* @returns {void}
	*/
	bringIntoView(rect: any): void;

	/** Bring the specified portion of the diagram content to the center of the diagram viewport
	* @param {any} the rectangular region that is to be brought to the center of diagram viewport
	* @returns {void}
	*/
	bringToCenter(rect: any): void;

	/** Visually move the selected object over all other intersected objects
	* @returns {void}
	*/
	bringToFront(): void;

	/** Remove all the elements from diagram
	* @returns {void}
	*/
	clear(): void;

	/** Remove the current selection in diagram
	* @returns {void}
	*/
	clearSelection(): void;

	/** Copy the selected object to internal clipboard and get the copied object
	* @returns {any}
	*/
	copy(): any;

	/** Cut the selected object from diagram to diagram internal clipboard
	* @returns {void}
	*/
	cut(): void;

	/** Export the diagram as downloadable files or as data
	* @param {Diagram.Options} options to export the desired region of diagram to the desired formats.NameTypeDescriptionfileNamestringname of the file to be downloaded.formatstringformat of the exported file/data. See [File Formats](/js/api/global#fileformats).modestringto set whether to export diagram as a file or as raw data. See [Export Modes](/js/api/global#exportmodes).regionstringto set the region of the diagram to be exported. See [Region](/js/api/global#region).boundsobjectto export any custom region of diagram.marginobjectto set margin to the exported data.
	* @returns {string}
	*/
	exportDiagram(options: Diagram.Options): string;

	/** Read a node/connector object by its name
	* @param {string} name of the node/connector that is to be identified
	* @returns {any}
	*/
	findNode(name: string): any;

	/** Fit the diagram content into diagram viewport
	* @param {string} to set the mode of fit to command. See [Fit Mode](/js/api/global#fitmode)
	* @param {string} to set whether the region to be fit will be based on diagram elements or page settings [Region](/js/api/global#region)
	* @param {any} to set the required margin
	* @returns {void}
	*/
	fitToPage(mode: string, region: string, margin: any): void;

	/** Group the selected nodes and connectors
	* @returns {void}
	*/
	group(): void;

	/** Insert a label into a node's label collection at runtime
	* @param {string} name of the node to which the label has to be inserted
	* @param {any} JSON to define the new label
	* @param {number} index to insert the label into the node
	* @returns {void}
	*/
	insertLabel(name: string, label: any, index: number): void;

	/** Refresh the diagram with the specified layout
	* @returns {void}
	*/
	layout(): void;

	/** Load the diagram
	* @param {any} JSON data to load the diagram
	* @returns {void}
	*/
	load(data: any): void;

	/** Visually move the selected object over its closest intersected object
	* @returns {void}
	*/
	moveForward(): void;

	/** Move the selected objects by either one pixel or by the pixels specified through argument
	* @param {string} specifies the direction to move the selected objects ("left","right",top","bottom")
	* @param {number} specifies the number of pixels by which the selected objects have to be moved
	* @returns {void}
	*/
	nudge(direction: string, delta: number): void;

	/** Paste the selected object from internal clipboard to diagram
	* @param {any} object to be added to diagram
	* @param {boolean} to define whether the specified object is to be renamed or not
	* @returns {void}
	*/
	paste(object: any, rename: boolean): void;

	/** Print the diagram as image
	* @returns {void}
	*/
	print(): void;

	/** Restore the last action that was reverted
	* @returns {void}
	*/
	redo(): void;

	/** Refresh the diagram at runtime
	* @returns {void}
	*/
	refresh(): void;

	/** Remove either the given node/connector or the selected element from diagram
	* @param {any} the node/connector to be removed from diagram
	* @returns {void}
	*/
	remove(node: any): void;

	/** Remove a particular object from selection list
	* @param {any} the node/connector to be removed from selection list
	* @returns {void}
	*/
	removeSelection(node: any): void;

	/** Scale the selected objects to the height of the first selected object
	* @returns {void}
	*/
	sameHeight(): void;

	/** Scale the selected objects to the size of the first selected object
	* @returns {void}
	*/
	sameSize(): void;

	/** Scale the selected objects to the width of the first selected object
	* @returns {void}
	*/
	sameWidth(): void;

	/** Returns the diagram as serialized JSON
	* @returns {any}
	*/
	save(): any;

	/** Bring the node into view
	* @param {any} the node/connector to be brought into view
	* @returns {void}
	*/
	scrollToNode(node: any): void;

	/** Select all nodes and connector in diagram
	* @returns {void}
	*/
	selectAll(): void;

	/** Visually move the selected object behind its closest intersected object
	* @returns {void}
	*/
	sendBackward(): void;

	/** Visually move the selected object behind all other intersected objects
	* @returns {void}
	*/
	sendToBack(): void;

	/** Update the horizontal space between the selected objects as equal and within the selection boundary
	* @returns {void}
	*/
	spaceAcross(): void;

	/** Update the vertical space between the selected objects as equal and within the selection boundary
	* @returns {void}
	*/
	spaceDown(): void;

	/** Move the specified label to edit mode
	* @param {any} node/connector that contains the label to be edited
	* @param {any} to be edited
	* @returns {void}
	*/
	startLabelEdit(node: any, label: any): void;

	/** Reverse the last action that was performed
	* @returns {void}
	*/
	undo(): void;

	/** Ungroup the selected group
	* @returns {void}
	*/
	ungroup(): void;

	/** Update diagram at runtime
	* @param {any} JSON to specify the diagram properties that have to be modified
	* @returns {void}
	*/
	update(options: any): void;

	/** Update Connectors at runtime
	* @param {string} name of the connector to be updated
	* @param {any} JSON to specify the connector properties that have to be updated
	* @returns {void}
	*/
	updateConnector(name: string, options: any): void;

	/** Update the given label at runtime
	* @param {string} the name of node/connector which contains the label to be updated
	* @param {any} the label to be modified
	* @param {any} JSON to specify the label properties that have to be updated
	* @returns {any}
	*/
	updateLabel(nodeName: string, label: any, options: any): any;

	/** Update nodes at runtime
	* @param {string} name of the node that is to be updated
	* @param {any} JSON to specify the properties of node that have to be updated
	* @returns {void}
	*/
	updateNode(name: string, options: any): void;

	/** Update a port with its modified properties at runtime
	* @param {string} the name of node which contains the port to be updated
	* @param {any} the port to be updated
	* @param {any} JSON to specify the properties of the port that have to be updated
	* @returns {void}
	*/
	updatePort(nodeName: string, port: any, options: any): void;

	/** Update the specified node as selected object
	* @param {string} name of the node to be updated as selected object
	* @returns {void}
	*/
	updateSelectedObject(name: string): void;

	/** Update the selection at runtime
	* @param {boolean} to specify whether to show the user handles or not
	* @returns {void}
	*/
	updateSelection(showUserHandles: boolean): void;

	/** Update userhandles with respect to the given node
	* @param {any} node/connector with respect to which, the user handles have to be updated
	* @returns {void}
	*/
	updateUserHandles(node: any): void;

	/** Update the diagram viewport at runtime
	* @returns {void}
	*/
	updateViewPort(): void;

	/** Upgrade the diagram from old version
	* @param {any} to be upgraded
	* @returns {void}
	*/
	upgrade(data: any): void;

	/** Used to zoomIn/zoomOut diagram
	* @param {any} options to zoom the diagram(zoom factor, zoomIn/zoomOut)
	* @returns {void}
	*/
	zoomTo(zoom: any): void;
}
export module Diagram{

export interface Options {

	/**name of the file to be downloaded.
	*/
	fileName?: string;

	/**format of the exported file/data. See [File Formats](/js/api/global#fileformats).
	*/
	format?: string;

	/**to set whether to export diagram as a file or as raw data. See [Export Modes](/js/api/global#exportmodes).
	*/
	mode?: string;

	/**to set the region of the diagram to be exported. See [Region](/js/api/global#region).
	*/
	region?: string;

	/**to export any custom region of diagram.
	*/
	bounds?: any;

	/**to set margin to the exported data.
	*/
	margin?: any;
}

export interface Model {

	/**Defines the background color of diagram elements
	* @Default {transparent}
	*/
	backgroundColor?: string;

	/**Defines the path of the background image of diagram elements
	* @Default {null}
	*/
	backgroundImage?: string;

	/**Sets the direction of line bridges.
	* @Default {ej.datavisualization.Diagram.BridgeDirection.Top}
	*/
	bridgeDirection?: ej.datavisualization.Diagram.BridgeDirection|string;

	/**Defines a set of custom commands and binds them with a set of desired key gestures.
	*/
	commandManager?: CommandManager;

	/**A collection of JSON objects where each object represents a connector
	* @Default {[]}
	*/
	connectors?: Array<Connectors>;

	/**Binds the custom JSON data with connector properties
	* @Default {null}
	*/
	connectorTemplate?: any;

	/**Enables/Disables the default behaviors of the diagram.
	* @Default {ej.datavisualization.Diagram.DiagramConstraints.All}
	*/
	constraints?: ej.datavisualization.Diagram.DiagramConstraints|string;

	/**An object to customize the context menu of diagram
	*/
	contextMenu?: ContextMenu;

	/**Configures the data source that is to be bound with diagram
	*/
	dataSourceSettings?: DataSourceSettings;

	/**Initializes the default values for nodes and connectors
	* @Default {{}}
	*/
	defaultSettings?: DefaultSettings;

	/**Sets the type of Json object to be drawn through drawing tool
	* @Default {{}}
	*/
	drawType?: any;

	/**Enables or disables auto scroll in diagram
	* @Default {true}
	*/
	enableAutoScroll?: boolean;

	/**Enables or disables diagram context menu
	* @Default {true}
	*/
	enableContextMenu?: boolean;

	/**Specifies the height of the diagram
	* @Default {null}
	*/
	height?: string;

	/**Customizes the undo redo functionality
	*/
	historyManager?: HistoryManager;

	/**Automatically arranges the nodes and connectors in a predefined manner
	*/
	layout?: Layout;

	/**Defines the current culture of diagram
	* @Default {en-US}
	*/
	locale?: string;

	/**Array of JSON objects where each object represents a node
	* @Default {[]}
	*/
	nodes?: Array<Nodes>;

	/**Binds the custom JSON data with node properties
	* @Default {null}
	*/
	nodeTemplate?: any;

	/**Defines the size and appearance of diagram page
	*/
	pageSettings?: PageSettings;

	/**Defines the zoom value, zoom factor, scroll status and view port size of the diagram
	*/
	scrollSettings?: ScrollSettings;

	/**Defines the size and position of selected items and defines the appearance of selector
	*/
	selectedItems?: SelectedItems;

	/**Enables or disables tooltip of diagram
	* @Default {true}
	*/
	showTooltip?: boolean;

	/**Defines the gridlines and defines how and when the objects have to be snapped
	*/
	snapSettings?: SnapSettings;

	/**Enables/Disables the interactive behaviors of diagram.
	* @Default {ej.datavisualization.Diagram.Tool.All}
	*/
	tool?: ej.datavisualization.Diagram.Tool|string;

	/**An object that defines the description, appearance and alignments of tooltips
	* @Default {null}
	*/
	tooltip?: Tooltip;

	/**Specifies the width of the diagram
	* @Default {null}
	*/
	width?: string;

	/**Sets the factor by which we can zoom in or zoom out
	* @Default {0.2}
	*/
	zoomFactor?: number;

	/**Triggers When auto scroll is changed*/
	autoScrollChange? (e: AutoScrollChangeEventArgs): void;

	/**Triggers when a node, connector or diagram is clicked*/
	click? (e: ClickEventArgs): void;

	/**Triggers when the connection is changed*/
	connectionChange? (e: ConnectionChangeEventArgs): void;

	/**Triggers when the connector collection is changed*/
	connectorCollectionChange? (e: ConnectorCollectionChangeEventArgs): void;

	/**Triggers when the connectors' source point is changed*/
	connectorSourceChange? (e: ConnectorSourceChangeEventArgs): void;

	/**Triggers when the connectors' target point is changed*/
	connectorTargetChange? (e: ConnectorTargetChangeEventArgs): void;

	/**Triggers before opening the context menu*/
	contextMenuBeforeOpen? (e: ContextMenuBeforeOpenEventArgs): void;

	/**Triggers when a context menu item is clicked*/
	contextMenuClick? (e: ContextMenuClickEventArgs): void;

	/**Triggers when a node, connector or diagram model is clicked twice*/
	doubleClick? (e: DoubleClickEventArgs): void;

	/**Triggers while dragging the elements in diagram*/
	drag? (e: DragEventArgs): void;

	/**Triggers when a symbol is dragged into diagram from symbol palette*/
	dragEnter? (e: DragEnterEventArgs): void;

	/**Triggers when a symbol is dragged outside of the diagram.*/
	dragLeave? (e: DragLeaveEventArgs): void;

	/**Triggers when a symbol is dragged over diagram*/
	dragOver? (e: DragOverEventArgs): void;

	/**Triggers when a symbol is dragged and dropped from symbol palette to drawing area*/
	drop? (e: DropEventArgs): void;

	/**Triggers when a child is added to or removed from a group*/
	groupChange? (e: GroupChangeEventArgs): void;

	/**Triggers when a diagram element is clicked*/
	itemClick? (e: ItemClickEventArgs): void;

	/**Triggers when mouse enters a node/connector*/
	mouseEnter? (e: MouseEnterEventArgs): void;

	/**Triggers when mouse leaves node/connector*/
	mouseLeave? (e: MouseLeaveEventArgs): void;

	/**Triggers when mouse hovers over a node/connector*/
	mouseOver? (e: MouseOverEventArgs): void;

	/**Triggers when node collection is changed*/
	nodeCollectionChange? (e: NodeCollectionChangeEventArgs): void;

	/**Triggers when the node properties(x, y,width and height alone) are changed using nudge commands or updateNode API.*/
	propertyChange? (e: PropertyChangeEventArgs): void;

	/**Triggers when the diagram elements are rotated*/
	rotationChange? (e: RotationChangeEventArgs): void;

	/**Triggers when the diagram is zoomed or panned*/
	scrollChange? (e: ScrollChangeEventArgs): void;

	/**Triggers when a connector segment is edited*/
	segmentChange? (e: SegmentChangeEventArgs): void;

	/**Triggers when the selection is changed in diagram*/
	selectionChange? (e: SelectionChangeEventArgs): void;

	/**Triggers when a node is resized*/
	sizeChange? (e: SizeChangeEventArgs): void;

	/**Triggers when label editing is ended*/
	textChange? (e: TextChangeEventArgs): void;
}

export interface AutoScrollChangeEventArgs {

	/**Returns the delay between subsequent auto scrolls
	*/
	delay?: string;
}

export interface ClickEventArgs {

	/**parameter returns the clicked node, connector or diagram
	*/
	element?: any;

	/**parameter returns the object that is actually clicked
	*/
	actualObject?: number;

	/**parameter returns the horizontal coordinate of the mouse pointer, relative to the diagram
	*/
	offsetX?: number;

	/**parameter returns  the vertical coordinate of the mouse pointer, relative to the diagram
	*/
	offsetY?: number;

	/**parameter returns the count of how many times the mouse button is pressed
	*/
	count?: number;

	/**parameter returns the actual click event arguments that explains which button is clicked
	*/
	event?: any;
}

export interface ConnectionChangeEventArgs {

	/**parameter returns the connection that is changed between nodes, ports or points
	*/
	element?: any;

	/**parameter returns the new source node or target node of the connector
	*/
	connection?: string;

	/**parameter returns the new source port or target port of the connector
	*/
	port?: any;

	/**parameter defines whether to cancel the change or not
	*/
	cancel?: boolean;
}

export interface ConnectorCollectionChangeEventArgs {

	/**parameter returns whether the connector is inserted or removed
	*/
	changeType?: string;

	/**parameter returns the connector that is to be added or deleted
	*/
	element?: any;

	/**parameter defines whether to cancel the collection change or not
	*/
	cancel?: boolean;
}

export interface ConnectorSourceChangeEventArgs {

	/**returns the connector, the source point of which is being dragged
	*/
	element?: any;

	/**returns the source node of the element
	*/
	node?: any;

	/**returns the source point of the element
	*/
	point?: any;

	/**returns the source port of the element
	*/
	port?: any;

	/**returns the state of connection end point dragging(starting, dragging, completed)
	*/
	dragState?: string;

	/**parameter defines whether to cancel the change or not
	*/
	cancel?: boolean;
}

export interface ConnectorTargetChangeEventArgs {

	/**parameter returns the connector, the target point of which is being dragged
	*/
	element?: any;

	/**returns the target node of the element
	*/
	node?: any;

	/**returns the target point of the element
	*/
	point?: any;

	/**returns the target port of the element
	*/
	port?: any;

	/**returns the state of connection end point dragging(starting, dragging, completed)
	*/
	dragState?: string;

	/**parameter defines whether to cancel the change or not
	*/
	cancel?: boolean;
}

export interface ContextMenuBeforeOpenEventArgs {

	/**parameter returns the diagram object
	*/
	diagram?: any;

	/**parameter returns the actual arguments from context menu
	*/
	contextmenu?: any;

	/**parameter returns the object that was clicked
	*/
	target?: any;
}

export interface ContextMenuClickEventArgs {

	/**parameter returns the id of the selected context menu item
	*/
	id?: string;

	/**parameter returns the text of the selected context menu item
	*/
	text?: string;

	/**parameter returns the parent id of the selected context menu item
	*/
	parentId?: string;

	/**parameter returns the parent text of the selected context menu item
	*/
	parentText?: string;

	/**parameter returns the object that was clicked
	*/
	target?: any;

	/**parameter defines whether to execute the click event or not
	*/
	canExecute?: boolean;
}

export interface DoubleClickEventArgs {

	/**parameter returns the object that is actually clicked
	*/
	actualObject?: any;

	/**parameter returns the selected object
	*/
	element?: any;
}

export interface DragEventArgs {

	/**parameter returns the node or connector that is being dragged
	*/
	element?: any;

	/**parameter returns the previous position of the node/connector
	*/
	oldValue?: any;

	/**parameter returns the new position of the node/connector
	*/
	newValue?: any;

	/**parameter returns the state of drag event (Starting, dragging, completed)
	*/
	dragState?: string;

	/**parameter returns whether or not to cancel the drag event
	*/
	cancel?: boolean;
}

export interface DragEnterEventArgs {

	/**parameter returns the node or connector that is dragged into diagram
	*/
	element?: any;

	/**parameter returns whether to add or remove the symbol from diagram
	*/
	cancel?: boolean;
}

export interface DragLeaveEventArgs {

	/**parameter returns the node or connector that is dragged outside of the diagram
	*/
	element?: any;
}

export interface DragOverEventArgs {

	/**parameter returns the node or connector that is dragged over diagram
	*/
	element?: any;

	/**parameter defines whether the symbol can be dropped at the current mouse position
	*/
	allowDrop?: boolean;

	/**parameter returns the node/connector over which the symbol is dragged
	*/
	target?: any;

	/**parameter returns the previous position of the node/connector
	*/
	oldValue?: any;

	/**parameter returns the new position of the node/connector
	*/
	newValue?: any;

	/**parameter returns whether or not to cancel the dragOver event
	*/
	cancel?: boolean;
}

export interface DropEventArgs {

	/**parameter returns node or connector that is being dropped
	*/
	element?: any;

	/**parameter returns whether or not to cancel the drop event
	*/
	cancel?: boolean;

	/**parameter returns the object from where the element is dragged
	*/
	source?: any;

	/**parameter returns the object over which the object will be dropped
	*/
	target?: any;

	/**parameter returns the enum which defines the type of the source
	*/
	sourceType?: string;
}

export interface GroupChangeEventArgs {

	/**parameter returns the object that is added to/removed from a group
	*/
	element?: any;

	/**parameter returns the old parent group(if any) of the object
	*/
	oldParent?: any;

	/**parameter returns the new parent group(if any) of the object
	*/
	newParent?: any;

	/**parameter returns the cause of group change("group", unGroup")
	*/
	cause?: string;
}

export interface ItemClickEventArgs {

	/**parameter returns the object that was actually clicked
	*/
	actualObject?: any;

	/**parameter returns the object that is selected
	*/
	selectedObject?: any;

	/**parameter returns whether or not to cancel the drop event
	*/
	cancel?: boolean;

	/**parameter returns the actual click event arguments that explains which button is clicked
	*/
	event?: any;
}

export interface MouseEnterEventArgs {

	/**parameter returns the target node or connector
	*/
	element?: any;

	/**parameter returns the object from where the selected object is dragged
	*/
	source?: any;

	/**parameter returns the target object over which the selected object is dragged
	*/
	target?: any;
}

export interface MouseLeaveEventArgs {

	/**parameter returns the target node or connector
	*/
	element?: any;

	/**parameter returns the object from where the selected object is dragged
	*/
	source?: any;

	/**parameter returns the target object over which the selected object is dragged
	*/
	target?: any;
}

export interface MouseOverEventArgs {

	/**parameter returns the target node or connector
	*/
	element?: any;

	/**parameter returns the object from where the element is dragged
	*/
	source?: any;

	/**parameter returns the object over which the element is being dragged.
	*/
	target?: any;
}

export interface NodeCollectionChangeEventArgs {

	/**parameter returns whether the node is to be added or removed
	*/
	changeType?: string;

	/**parameter returns the node which needs to be added or deleted
	*/
	element?: any;

	/**parameter defines whether to cancel the collection change or not
	*/
	cancel?: boolean;
}

export interface PropertyChangeEventArgs {

	/**parameter returns the selected element
	*/
	element?: any;

	/**parameter returns the action is nudge or not
	*/
	cause?: string;

	/**parameter returns the new value of the node property that is being changed
	*/
	newValue?: any;

	/**parameter returns the old value of the property that is being changed
	*/
	oldValue?: any;

	/**parameter returns the name of the property that is changed
	*/
	propertyName?: string;
}

export interface RotationChangeEventArgs {

	/**parameter returns the node that is rotated
	*/
	element?: any;

	/**parameter returns the previous rotation angle
	*/
	oldValue?: any;

	/**parameter returns the new rotation angle
	*/
	newValue?: any;

	/**parameter to specify whether or not to cancel the event
	*/
	cancel?: boolean;
}

export interface ScrollChangeEventArgs {

	/**Parameter returns the new zoom value, horizontal and vertical scroll offsets.
	*/
	newValues?: any;

	/**parameter returns the previous zoom value, horizontal and vertical scroll offsets.
	*/
	oldValues?: any;
}

export interface SegmentChangeEventArgs {

	/**Parameter returns the connector that is being edited
	*/
	element?: any;

	/**parameter returns the state of editing (starting, dragging, completed)
	*/
	dragState?: string;

	/**parameter returns the current mouse position
	*/
	point?: any;

	/**parameter to specify whether or not to cancel the event
	*/
	cancel?: boolean;
}

export interface SelectionChangeEventArgs {

	/**parameter returns whether the item is selected or removed selection
	*/
	changeType?: string;

	/**parameter returns the item which is selected or to be selected
	*/
	element?: any;

	/**parameter returns the collection of nodes and connectors that have to be removed from selection list
	*/
	oldItems?: Array<any>;

	/**parameter returns the collection of nodes and connectors that have to be added to selection list
	*/
	newItems?: Array<any>;

	/**parameter returns the collection of nodes and connectors that will be selected after selection change
	*/
	selectedItems?: Array<any>;

	/**parameter to specify whether or not to cancel the selection change event
	*/
	cancel?: boolean;
}

export interface SizeChangeEventArgs {

	/**parameter returns node that was resized
	*/
	element?: any;

	/**parameter to cancel the size change
	*/
	cancel?: boolean;

	/**parameter returns the new width, height, offsetX and offsetY values of the element that is being resized
	*/
	newValue?: any;

	/**parameter returns the previous width,height,offsetX and offsetY values of the element that is being resized
	*/
	oldValue?: any;

	/**parameter returns the state of resizing(starting,resizing,completed)
	*/
	resizeState?: string;

	/**parameter returns the difference between new and old value
	*/
	offset?: any;
}

export interface TextChangeEventArgs {

	/**parameter returns the node that contains the text being edited
	*/
	element?: any;

	/**parameter returns the new text
	*/
	value?: string;

	/**parameter returns the keyCode of the key entered
	*/
	keyCode?: string;
}

export interface CommandManagerCommandsGesture {

	/**Sets the key value, on recognition of which the command will be executed.
	* @Default {ej.datavisualization.Diagram.Keys.None}
	*/
	key?: ej.datavisualization.Diagram.Keys|string;

	/**Sets a combination of key modifiers, on recognition of which the command will be executed.
	* @Default {ej.datavisualization.Diagram.KeyModifiers.None}
	*/
	keyModifiers?: ej.datavisualization.Diagram.KeyModifiers|string;
}

export interface CommandManagerCommands {

	/**A method that defines whether the command is executable at the moment or not.
	*/
	canExecute?: Function;

	/**A method that defines what to be executed when the key combination is recognized.
	*/
	execute?: Function;

	/**Defines a combination of keys and key modifiers, on recognition of which the command will be executed
	*/
	gesture?: CommandManagerCommandsGesture;

	/**Defines any additional parameters that are required at runtime
	* @Default {null}
	*/
	parameter?: any;
}

export interface CommandManager {

	/**An object that maps a set of command names with the corresponding command objects
	* @Default {{}}
	*/
	commands?: CommandManagerCommands;
}

export interface ConnectorsSegments {

	/**Sets the direction of orthogonal segment
	*/
	direction?: string;

	/**Describes the length of orthogonal segment
	* @Default {undefined}
	*/
	length?: number;

	/**Describes the end point of bezier/straight segment
	* @Default {Diagram.Point()}
	*/
	point?: ej.datavisualization.Diagram.ConnectorsSourcePoint|string;

	/**Defines the first control point of the bezier segment
	* @Default {null}
	*/
	point1?: ej.datavisualization.Diagram.ConnectorsSourcePoint|string;

	/**Defines the second control point of bezier segment
	* @Default {null}
	*/
	point2?: ej.datavisualization.Diagram.ConnectorsSourcePoint|string;

	/**Sets the type of the segment.
	* @Default {ej.datavisualization.Diagram.Segments.Straight}
	*/
	type?: ej.datavisualization.Diagram.Segments|string;

	/**Describes the length and angle between the first control point and the start point of bezier segment
	* @Default {null}
	*/
	vector1?: any;

	/**Describes the length and angle between the second control point and end point of bezier segment
	* @Default {null}
	*/
	vector2?: any;
}

export interface ConnectorsSourceDecorator {

	/**Sets the border color of the source decorator
	* @Default {black}
	*/
	borderColor?: string;

	/**Sets the border width of the decorator
	* @Default {1}
	*/
	borderWidth?: number;

	/**Sets the fill color of the source decorator
	* @Default {black}
	*/
	fillColor?: string;

	/**Sets the height of the source decorator
	* @Default {8}
	*/
	height?: number;

	/**Defines the custom shape of the source decorator
	*/
	pathData?: string;

	/**Defines the shape of the source decorator.
	* @Default {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
	*/
	shape?: ej.datavisualization.Diagram.DecoratorShapes|string;

	/**Defines the width of the source decorator
	* @Default {8}
	*/
	width?: number;
}

export interface ConnectorsSourcePoint {

	/**Defines the x-coordinate of a position
	* @Default {0}
	*/
	x?: number;

	/**Defines the y-coordinate of a position
	* @Default {0}
	*/
	y?: number;
}

export interface ConnectorsTargetDecorator {

	/**Sets the border color of the decorator
	* @Default {black}
	*/
	borderColor?: string;

	/**Sets the color with which the decorator will be filled
	* @Default {black}
	*/
	fillColor?: string;

	/**Defines the height of the target decorator
	* @Default {8}
	*/
	height?: number;

	/**Defines the custom shape of the target decorator
	*/
	pathData?: string;

	/**Defines the shape of the target decorator.
	* @Default {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
	*/
	shape?: ej.datavisualization.Diagram.DecoratorShapes|string;

	/**Defines the width of the target decorator
	* @Default {8}
	*/
	width?: number;
}

export interface Connectors {

	/**To maintain additional information about connectors
	* @Default {null}
	*/
	addInfo?: any;

	/**Defines the width of the line bridges
	* @Default {10}
	*/
	bridgeSpace?: number;

	/**Enables or disables the behaviors of connectors.
	* @Default {ej.datavisualization.Diagram.ConnectorConstraints.Default}
	*/
	constraints?: ej.datavisualization.Diagram.ConnectorConstraints|string;

	/**Defines the radius of the rounded corner
	* @Default {0}
	*/
	cornerRadius?: number;

	/**Configures the styles of shapes
	*/
	cssClass?: string;

	/**Sets the horizontal alignment of the connector. Applicable, if the parent of the connector is a container.
	* @Default {ej.datavisualization.Diagram.HorizontalAlignment.Left}
	*/
	horizontalAlign?: ej.datavisualization.Diagram.HorizontalAlignment|string;

	/**A collection of JSON objects where each object represents a label. For label properties, refer Labels
	* @Default {[]}
	*/
	labels?: Array<any>;

	/**Sets the stroke color of the connector
	* @Default {black}
	*/
	lineColor?: string;

	/**Sets the pattern of dashes and gaps used to stroke the path of the connector
	*/
	lineDashArray?: string;

	/**Defines the padding value to ease the interaction with connectors
	* @Default {10}
	*/
	lineHitPadding?: number;

	/**Sets the width of the line
	* @Default {1}
	*/
	lineWidth?: number;

	/**Defines the minimum space to be left between the bottom of parent bounds and the connector. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginBottom?: number;

	/**Defines the minimum space to be left between the left of parent bounds and the connector. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginLeft?: number;

	/**Defines the minimum space to be left between the right of parent bounds and the connector. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginRight?: number;

	/**Defines the minimum space to be left between the top of parent bounds and the connector. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginTop?: number;

	/**Sets a unique name for the connector
	*/
	name?: string;

	/**Defines the transparency of the connector
	* @Default {1}
	*/
	opacity?: number;

	/**Defines the size and preview size of the node to add that to symbol palette. To explore palette item, refer Palette Item
	* @Default {null}
	*/
	paletteItem?: any;

	/**Sets the parent name of the connector.
	*/
	parent?: string;

	/**An array of JSON objects where each object represents a segment
	* @Default {[ { type:straight } ]}
	*/
	segments?: Array<ConnectorsSegments>;

	/**Defines the source decorator of the connector
	* @Default {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
	*/
	sourceDecorator?: ConnectorsSourceDecorator;

	/**Sets the source node of the connector
	*/
	sourceNode?: string;

	/**Defines the space to be left between the source node and the source point of a connector
	* @Default {0}
	*/
	sourcePadding?: number;

	/**Describes the start point of the connector
	* @Default {ej.datavisualization.Diagram.Point()}
	*/
	sourcePoint?: ConnectorsSourcePoint;

	/**Sets the source port of the connector
	*/
	sourcePort?: string;

	/**Defines the target decorator of the connector
	* @Default {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
	*/
	targetDecorator?: ConnectorsTargetDecorator;

	/**Sets the target node of the connector
	*/
	targetNode?: string;

	/**Defines the space to be left between the target node and the target point of the connector
	* @Default {0}
	*/
	targetPadding?: number;

	/**Describes the end point of the connector
	* @Default {ej.datavisualization.Diagram.Point()}
	*/
	targetPoint?: ej.datavisualization.Diagram.ConnectorsSourcePoint|string;

	/**Sets the targetPort of the connector
	*/
	targetPort?: string;

	/**Defines the tooltip that should be shown when the mouse hovers over connector. For tooltip properties, refer Tooltip
	* @Default {null}
	*/
	tooltip?: any;

	/**To set the vertical alignment of connector (Applicable,if the parent is group).
	* @Default {ej.datavisualization.Diagram.VerticalAlignment.Top}
	*/
	verticalAlign?: ej.datavisualization.Diagram.VerticalAlignment|string;

	/**Enables or disables the visibility of connector
	* @Default {true}
	*/
	visible?: boolean;

	/**Sets the z-index of the connector
	* @Default {0}
	*/
	zOrder?: number;
}

export interface ContextMenu {

	/**Defines the collection of context menu items
	* @Default {[]}
	*/
	items?: Array<any>;

	/**To set whether to display the default context menu items or not
	* @Default {false}
	*/
	showCustomMenuItemsOnly?: boolean;
}

export interface DataSourceSettings {

	/**Defines the data source either as a collection of objects or as an instance of ej.DataManager
	* @Default {null}
	*/
	dataSource?: any;

	/**Sets the unique id of the data source items
	*/
	id?: string;

	/**Defines the parent id of the data source item
	* @Default {''}
	*/
	parent?: string;

	/**Describes query to retrieve a set of data from the specified datasource
	* @Default {null}
	*/
	query?: string;

	/**Sets the unique id of the root data source item
	*/
	root?: string;

	/**Describes the name of the table on which the specified query has to be executed
	* @Default {null}
	*/
	tableName?: string;
}

export interface DefaultSettings {

	/**Initializes the default connector properties
	* @Default {null}
	*/
	connector?: any;

	/**Initializes the default properties of groups
	* @Default {null}
	*/
	group?: any;

	/**Initializes the default properties for nodes
	* @Default {null}
	*/
	node?: any;
}

export interface HistoryManager {

	/**A method that takes a history entry as argument and returns whether the specific entry can be popped or not
	*/
	canPop?: Function;

	/**A method that ends grouping the changes
	*/
	closeGroupAction?: Function;

	/**A method that removes the history of a recent change made in diagram
	*/
	pop?: Function;

	/**A method that allows to track the custom changes made in diagram
	*/
	push?: Function;

	/**Defines what should be happened while trying to restore a custom change
	* @Default {null}
	*/
	redo?: Function;

	/**A method that starts to group the changes to revert/restore them in a single undo or redo
	*/
	startGroupAction?: Function;

	/**Defines what should be happened while trying to revert a custom change
	*/
	undo?: Function;
}

export interface Layout {

	/**Defines the fixed node with reference to which, the layout will be arranged and fixed node will not be repositioned
	*/
	fixedNode?: string;

	/**Customizes the orientation of trees/sub trees. For orientations, see Chart Orientations. For chart types, see Chart Types
	* @Default {null}
	*/
	getLayoutInfo?: any;

	/**Sets the space to be horizontally left between nodes
	* @Default {30}
	*/
	horizontalSpacing?: number;

	/**Sets the margin value to be horizontally left between the layout and diagram
	* @Default {0}
	*/
	marginX?: number;

	/**Sets the margin value to be vertically left between layout and diagram
	* @Default {0}
	*/
	marginY?: number;

	/**Sets the orientation/direction to arrange the diagram elements.
	* @Default {ej.datavisualization.Diagram.LayoutOrientations.TopToBottom}
	*/
	orientation?: ej.datavisualization.Diagram.LayoutOrientations|string;

	/**Sets the type of the layout based on which the elements will be arranged.
	* @Default {ej.datavisualization.Diagram.LayoutTypes.None}
	*/
	type?: ej.datavisualization.Diagram.LayoutTypes|string;

	/**Sets the space to be vertically left between nodes
	* @Default {30}
	*/
	verticalSpacing?: number;
}

export interface NodesContainer {

	/**Defines the orientation of the container. Applicable, if the group is a container.
	* @Default {vertical}
	*/
	orientation?: string;

	/**Sets the type of the container. Applicable if the group is a container.
	* @Default {ej.datavisualization.Diagram.ContainerType.Canvas}
	*/
	type?: ej.datavisualization.Diagram.ContainerType|string;
}

export interface NodesGradientLinearGradient {

	/**Defines the different colors and the region of color transitions
	* @Default {[]}
	*/
	stops?: Array<any>;

	/**Defines the left most position(relative to node) of the rectangular region that needs to be painted
	* @Default {0}
	*/
	x1?: number;

	/**Defines the right most position(relative to node) of the rectangular region that needs to be painted
	* @Default {0}
	*/
	x2?: number;

	/**Defines the top most position(relative to node) of the rectangular region that needs to be painted
	* @Default {0}
	*/
	y1?: number;

	/**Defines the bottom most position(relative to node) of the rectangular region that needs to be painted
	* @Default {0}
	*/
	y2?: number;
}

export interface NodesGradientRadialGradient {

	/**Defines the position of the outermost circle
	* @Default {0}
	*/
	cx?: number;

	/**Defines the outer most circle of the radial gradient
	* @Default {0}
	*/
	cy?: number;

	/**Defines the innermost circle of the radial gradient
	* @Default {0}
	*/
	fx?: number;

	/**Defines the innermost circle of the radial gradient
	* @Default {0}
	*/
	fy?: number;

	/**Defines the different colors and the region of color transitions.
	* @Default {[]}
	*/
	stops?: Array<any>;
}

export interface NodesGradientStop {

	/**Sets the color to be filled over the specified region
	*/
	color?: string;

	/**Sets the position where the previous color transition ends and a new color transition starts
	* @Default {0}
	*/
	offset?: number;

	/**Describes the transparency level of the region
	* @Default {1}
	*/
	opacity?: number;
}

export interface NodesGradient {

	/**Paints the node with linear color transitions
	*/
	LinearGradient?: NodesGradientLinearGradient;

	/**Paints the node with radial color transitions. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient.
	*/
	RadialGradient?: NodesGradientRadialGradient;

	/**Defines the color and a position where the previous color transition ends and a new color transition starts
	*/
	Stop?: NodesGradientStop;
}

export interface NodesLabels {

	/**Enables/disables the bold style
	* @Default {false}
	*/
	bold?: boolean;

	/**Sets the border color of the label
	* @Default {transparent}
	*/
	borderColor?: string;

	/**Sets the border width of the label
	* @Default {0}
	*/
	borderWidth?: number;

	/**Sets the fill color of the text area
	* @Default {transparent}
	*/
	fillColor?: string;

	/**Sets the font color of the text
	* @Default {black}
	*/
	fontColor?: string;

	/**Sets the font family of the text
	* @Default {Arial}
	*/
	fontFamily?: string;

	/**Defines the font size of the text
	* @Default {12}
	*/
	fontSize?: number;

	/**Sets the horizontal alignment of the label.
	* @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
	*/
	horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

	/**Enables/disables the italic style
	* @Default {false}
	*/
	italic?: boolean;

	/**To set the margin of the label
	* @Default {ej.datavisualization.Diagram.Margin()}
	*/
	margin?: any;

	/**Gets whether the label is currently being edited or not.
	* @Default {ej.datavisualization.Diagram.LabelEditMode.Edit}
	*/
	mode?: ej.datavisualization.Diagram.LabelEditMode|string;

	/**Sets the unique identifier of the label
	*/
	name?: string;

	/**Sets the fraction/ratio(relative to node) that defines the position of the label
	* @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
	*/
	offset?: any;

	/**Defines whether the label is editable or not
	* @Default {false}
	*/
	readOnly?: boolean;

	/**Defines the angle to which the label needs to be rotated
	* @Default {0}
	*/
	rotateAngle?: number;

	/**Defines the label text
	*/
	text?: string;

	/**Defines how to align the text inside the label.
	* @Default {ej.datavisualization.Diagram.TextAlign.Center}
	*/
	textAlign?: ej.datavisualization.Diagram.TextAlign|string;

	/**Sets how to decorate the label text.
	* @Default {ej.datavisualization.Diagram.TextDecorations.None}
	*/
	textDecoration?: ej.datavisualization.Diagram.TextDecorations|string;

	/**Sets the vertical alignment of the label.
	* @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
	*/
	verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;

	/**Enables or disables the visibility of the label
	* @Default {true}
	*/
	visible?: boolean;

	/**Sets the width of the label(the maximum value of label width and the node width will be considered as label width)
	* @Default {50}
	*/
	width?: number;

	/**Defines how the label text needs to be wrapped.
	* @Default {ej.datavisualization.Diagram.TextWrapping.WrapWithOverflow}
	*/
	wrapping?: ej.datavisualization.Diagram.TextWrapping|string;
}

export interface NodesLanes {

	/**Allows to maintain additional information about lane
	* @Default {{}}
	*/
	addInfo?: any;

	/**An array of objects where each object represents a child node of the lane
	* @Default {[]}
	*/
	children?: Array<any>;

	/**Defines the fill color of the lane
	* @Default {white}
	*/
	fillColor?: string;

	/**Defines the header of the lane
	* @Default {{ text: Function, fontSize: 11 }}
	*/
	header?: any;

	/**Defines the object as a lane
	* @Default {false}
	*/
	isLane?: boolean;

	/**Sets the unique identifier of the lane
	*/
	name?: string;

	/**Sets the orientation of the lane.
	* @Default {vertical}
	*/
	orientation?: string;
}

export interface NodesPaletteItem {

	/**Defines whether the symbol should be drawn at its actual size regardless of precedence factors or not
	* @Default {true}
	*/
	enableScale?: boolean;

	/**Defines the height of the symbol
	* @Default {0}
	*/
	height?: number;

	/**Defines the margin of the symbol item
	* @Default {{ left: 4, right: 4, top: 4, bottom: 4 }}
	*/
	margin?: any;

	/**Defines the preview height of the symbol
	* @Default {undefined}
	*/
	previewHeight?: number;

	/**Defines the preview width of the symbol
	* @Default {undefined}
	*/
	previewWidth?: number;

	/**Defines the width of the symbol
	* @Default {0}
	*/
	width?: number;
}

export interface NodesPhases {

	/**Defines the header of the smaller regions
	* @Default {null}
	*/
	label?: any;

	/**Defines the line color of the splitter that splits adjacent phases.
	* @Default {#606060}
	*/
	lineColor?: string;

	/**Sets the dash array that used to stroke the phase splitter
	* @Default {3,3}
	*/
	lineDashArray?: string;

	/**Sets the lineWidth of the phase
	* @Default {1}
	*/
	lineWidth?: number;

	/**Sets the unique identifier of the phase
	*/
	name?: string;

	/**Sets the length of the smaller region(phase) of a swimlane
	* @Default {100}
	*/
	offset?: number;

	/**Sets the orientation of the phase
	* @Default {horizontal}
	*/
	orientation?: string;

	/**Sets the type of the object as phase
	* @Default {phase}
	*/
	type?: string;
}

export interface NodesPorts {

	/**Sets the border color of the port
	* @Default {#1a1a1a}
	*/
	borderColor?: string;

	/**Sets the stroke width of the port
	* @Default {1}
	*/
	borderWidth?: number;

	/**Defines the space to be left between the port bounds and its incoming and outgoing connections.
	* @Default {0}
	*/
	connectorPadding?: number;

	/**Defines whether connections can be created with the port
	* @Default {ej.datavisualization.Diagram.PortConstraints.Connect}
	*/
	constraints?: ej.datavisualization.Diagram.PortConstraints|string;

	/**Sets the fill color of the port
	* @Default {white}
	*/
	fillColor?: string;

	/**Sets the unique identifier of the port
	*/
	name?: string;

	/**Defines the position of the port as fraction/ ratio relative to node
	* @Default {ej.datavisualization.Diagram.Point(0, 0)}
	*/
	offset?: any;

	/**Defines the path data to draw the port. Applicable, if the port shape is path.
	*/
	pathData?: string;

	/**Defines the shape of the port.
	* @Default {ej.datavisualization.Diagram.PortShapes.Square}
	*/
	shape?: ej.datavisualization.Diagram.PortShapes|string;

	/**Defines the size of the port
	* @Default {8}
	*/
	size?: number;

	/**Defines when the port should be visible.
	* @Default {ej.datavisualization.Diagram.PortVisibility.Default}
	*/
	visibility?: ej.datavisualization.Diagram.PortVisibility|string;
}

export interface NodesShadow {

	/**Defines the angle of the shadow relative to node
	* @Default {45}
	*/
	angle?: number;

	/**Sets the distance to move the shadow relative to node
	* @Default {5}
	*/
	distance?: number;

	/**Defines the opaque of the shadow
	* @Default {0.7}
	*/
	opacity?: number;
}

export interface NodesSubProcess {

	/**Defines whether the bpmn sub process is without any prescribed order or not
	* @Default {false}
	*/
	adhoc?: boolean;

	/**Sets the boundary of the BPMN process
	* @Default {ej.datavisualization.Diagram.BPMNBoundary.Default}
	*/
	boundary?: ej.datavisualization.Diagram.BPMNBoundary|string;

	/**Sets whether the bpmn subprocess is triggered as a compensation of a specific activity
	* @Default {false}
	*/
	compensation?: boolean;

	/**Defines the loop type of a sub process.
	* @Default {ej.datavisualization.Diagram.BPMNLoops.None}
	*/
	loop?: ej.datavisualization.Diagram.BPMNLoops|string;
}

export interface NodesTask {

	/**To set whether the task is a global task or not
	* @Default {false}
	*/
	call?: boolean;

	/**Sets whether the task is triggered as a compensation of another specific activity
	* @Default {false}
	*/
	compensation?: boolean;

	/**Sets the loop type of a bpmn task.
	* @Default {ej.datavisualization.Diagram.BPMNLoops.None}
	*/
	loop?: ej.datavisualization.Diagram.BPMNLoops|string;

	/**Sets the type of the BPMN task.
	* @Default {ej.datavisualization.Diagram.BPMNTasks.None}
	*/
	type?: ej.datavisualization.Diagram.BPMNTasks|string;
}

export interface Nodes {

	/**Defines the type of BPMN Activity. Applicable, if the node is a bpmn activity.
	* @Default {ej.datavisualization.Diagram.BPMNActivity.Task}
	*/
	activity?: ej.datavisualization.Diagram.BPMNActivity|string;

	/**To maintain additional information about nodes
	* @Default {{}}
	*/
	addInfo?: any;

	/**Sets the border color of node
	* @Default {black}
	*/
	borderColor?: string;

	/**Sets the pattern of dashes and gaps to stroke the border
	*/
	borderDashArray?: string;

	/**Sets the border width of the node
	* @Default {1}
	*/
	borderWidth?: number;

	/**Defines whether the group can be ungrouped or not
	* @Default {true}
	*/
	canUngroup?: boolean;

	/**Array of JSON objects where each object represents a child node/connector
	* @Default {[]}
	*/
	children?: Array<any>;

	/**Defines whether the BPMN data object is a collection or not
	* @Default {false}
	*/
	collection?: boolean;

	/**Defines the distance to be left between a node and its connections(In coming and out going connections).
	* @Default {0}
	*/
	connectorPadding?: number;

	/**Enables or disables the default behaviors of the node.
	* @Default {ej.datavisualization.Diagram.NodeConstraints.Default}
	*/
	constraints?: ej.datavisualization.Diagram.NodeConstraints|string;

	/**Defines how the child objects need to be arranged(Either in any predefined manner or automatically). Applicable, if the node is a group.
	* @Default {null}
	*/
	container?: NodesContainer;

	/**Defines the corner radius of rectangular shapes.
	* @Default {0}
	*/
	cornerRadius?: number;

	/**Configures the styles of shapes
	*/
	cssClass?: string;

	/**Sets the type of the BPMN Events. Applicable, if the node is a bpmn event.
	* @Default {ej.datavisualization.Diagram.BPMNEvents.Start}
	*/
	event?: ej.datavisualization.Diagram.BPMNEvents|string;

	/**Defines whether the node can be automatically arranged using layout or not
	* @Default {false}
	*/
	excludeFromLayout?: boolean;

	/**Defines the fill color of the node
	* @Default {white}
	*/
	fillColor?: string;

	/**Sets the type of the BPMN Gateway. Applicable, if the node is a bpmn gateway.
	* @Default {ej.datavisualization.Diagram.BPMNGateways.None}
	*/
	gateway?: ej.datavisualization.Diagram.BPMNGateways|string;

	/**Paints the node with a smooth transition from one color to another color
	*/
	gradient?: NodesGradient;

	/**Defines the header of a swimlane/lane
	* @Default {{ text: Title, fontSize: 11 }}
	*/
	header?: any;

	/**Defines the height of the node
	* @Default {0}
	*/
	height?: number;

	/**Sets the horizontal alignment of the node. Applicable, if the parent of the node is a container.
	* @Default {ej.datavisualization.Diagram.HorizontalAlignment.Left}
	*/
	horizontalAlign?: ej.datavisualization.Diagram.HorizontalAlignment|string;

	/**A read only collection of the incoming connectors/edges of the node
	* @Default {[]}
	*/
	inEdges?: Array<any>;

	/**Defines whether the sub tree of the node is expanded or collapsed
	* @Default {true}
	*/
	isExpanded?: boolean;

	/**Sets the node as a swimlane
	* @Default {false}
	*/
	isSwimlane?: boolean;

	/**A collection of objects where each object represents a label
	* @Default {[]}
	*/
	labels?: Array<NodesLabels>;

	/**An array of objects where each object represents a lane. Applicable, if the node is a swimlane.
	* @Default {[]}
	*/
	lanes?: Array<NodesLanes>;

	/**Defines the minimum space to be left between the bottom of parent bounds and the node. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginBottom?: number;

	/**Defines the minimum space to be left between the left of parent bounds and the node. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginLeft?: number;

	/**Defines the minimum space to be left between the right of the parent bounds and the node. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginRight?: number;

	/**Defines the minimum space to be left between the top of parent bounds and the node. Applicable, if the parent is a container.
	* @Default {0}
	*/
	marginTop?: number;

	/**Defines the maximum height limit of the node
	* @Default {0}
	*/
	maxHeight?: number;

	/**Defines the maximum width limit of the node
	* @Default {0}
	*/
	maxWidth?: number;

	/**Defines the minimum height limit of the node
	* @Default {0}
	*/
	minHeight?: number;

	/**Defines the minimum width limit of the node
	* @Default {0}
	*/
	minWidth?: number;

	/**Sets the unique identifier of the node
	*/
	name?: string;

	/**Defines the position of the node on X-Axis
	* @Default {0}
	*/
	offsetX?: number;

	/**Defines the position of the node on Y-Axis
	* @Default {0}
	*/
	offsetY?: number;

	/**Defines the opaque of the node
	* @Default {1}
	*/
	opacity?: number;

	/**Defines the orientation of nodes. Applicable, if the node is a swimlane.
	* @Default {vertical}
	*/
	orientation?: string;

	/**A read only collection of outgoing connectors/edges of the node
	* @Default {[]}
	*/
	outEdges?: Array<any>;

	/**Defines the minimum padding value to be left between the bottom most position of a group and its children. Applicable, if the group is a container.
	* @Default {0}
	*/
	paddingBottom?: number;

	/**Defines the minimum padding value to be left between the left most position of a group and its children. Applicable, if the group is a container.
	* @Default {0}
	*/
	paddingLeft?: number;

	/**Defines the minimum padding value to be left between the right most position of a group and its children. Applicable, if the group is a container.
	* @Default {0}
	*/
	paddingRight?: number;

	/**Defines the minimum padding value to be left between the top most position of a group and its children. Applicable, if the group is a container.
	* @Default {0}
	*/
	paddingTop?: number;

	/**Defines the size and preview size of the node to add that to symbol palette
	* @Default {null}
	*/
	paletteItem?: NodesPaletteItem;

	/**Sets the name of the parent group
	*/
	parent?: string;

	/**Sets the path geometry that defines the shape of a path node
	*/
	pathData?: string;

	/**An array of objects, where each object represents a smaller region(phase) of a swimlane.
	* @Default {[]}
	*/
	phases?: Array<NodesPhases>;

	/**Sets the height of the phase headers
	* @Default {0}
	*/
	phaseSize?: number;

	/**Sets the ratio/ fractional value relative to node, based on which the node will be transformed(positioning, scaling and rotation)
	* @Default {ej.datavisualization.Diagram.Points(0.5,0.5)}
	*/
	pivot?: any;

	/**Defines a collection of points to draw a polygon. Applicable, if the shape is a polygon.
	* @Default {[]}
	*/
	points?: Array<any>;

	/**An array of objects where each object represents a port
	* @Default {[]}
	*/
	ports?: Array<NodesPorts>;

	/**Sets the angle to which the node should be rotated
	* @Default {0}
	*/
	rotateAngle?: number;

	/**Defines the opacity and the position of shadow
	* @Default {ej.datavisualization.Diagram.Shadow()}
	*/
	shadow?: NodesShadow;

	/**Sets the shape of the node. It depends upon the type of node.
	* @Default {ej.datavisualization.Diagram.BasicShapes.Rectangle}
	*/
	shape?: ej.datavisualization.Diagram.BasicShapes|string;

	/**Sets the source path of the image. Applicable, if the type of the node is image.
	*/
	source?: string;

	/**Defines the sub process of a BPMN Activity. Applicable, if the type of the bpmn activity is sub process.
	* @Default {ej.datavisualization.Diagram.BPMNSubProcess()}
	*/
	subProcess?: NodesSubProcess;

	/**Defines the task of the bpmn activity. Applicable, if the type of activity is set as task.
	* @Default {ej.datavisualization.Diagram.BPMNTask()}
	*/
	task?: NodesTask;

	/**Sets the id of svg/html templates. Applicable, if the node is html or native.
	*/
	templateId?: string;

	/**Defines the textBlock of a text node
	* @Default {null}
	*/
	textBlock?: any;

	/**Defines the tooltip that should be shown when the mouse hovers over node. For tooltip properties, refer Tooltip
	* @Default {null}
	*/
	tooltip?: any;

	/**Sets the type of BPMN Event Triggers.
	* @Default {ej.datavisualization.Diagram.BPMNTriggers.None}
	*/
	trigger?: ej.datavisualization.Diagram.BPMNTriggers|string;

	/**Defines the type of the node.
	* @Default {ej.datavisualization.Diagram.Shapes.Basic}
	*/
	type?: ej.datavisualization.Diagram.Shapes|string;

	/**Sets the vertical alignment of a node. Applicable, if the parent of a node is a container.
	* @Default {ej.datavisualization.Diagram.VerticalAlignment.Top}
	*/
	verticalAlign?: ej.datavisualization.Diagram.VerticalAlignment|string;

	/**Defines the visibility of the node
	* @Default {true}
	*/
	visible?: boolean;

	/**Defines the width of the node
	* @Default {0}
	*/
	width?: number;

	/**Defines the z-index of the node
	* @Default {0}
	*/
	zOrder?: number;
}

export interface PageSettings {

	/**Defines the maximum distance to be left between the object and the scroll bar to trigger auto scrolling
	* @Default {{ left: 15, top: 15, right: 15, bottom: 15 }}
	*/
	autoScrollBorder?: any;

	/**Sets whether multiple pages can be created to fit all nodes and connectors
	* @Default {false}
	*/
	multiplePage?: boolean;

	/**Defines the background color of diagram pages
	* @Default {#ffffff}
	*/
	pageBackgroundColor?: string;

	/**Defines the page border color
	* @Default {#565656}
	*/
	pageBorderColor?: string;

	/**Sets the border width of diagram pages
	* @Default {0}
	*/
	pageBorderWidth?: number;

	/**Defines the height of a page
	* @Default {null}
	*/
	pageHeight?: number;

	/**Defines the page margin
	* @Default {24}
	*/
	pageMargin?: number;

	/**Sets the orientation of the page.
	* @Default {ej.datavisualization.Diagram.PageOrientations.Portrait}
	*/
	pageOrientation?: ej.datavisualization.Diagram.PageOrientations|string;

	/**Defines the height of a diagram page
	* @Default {null}
	*/
	pageWidth?: number;

	/**Defines the scrollable area of diagram. Applicable, if the scroll limit is &quot;limited&quot;.
	* @Default {null}
	*/
	scrollableArea?: any;

	/**Defines the scrollable region of diagram.
	* @Default {ej.datavisualization.Diagram.ScrollLimit.Infinite}
	*/
	scrollLimit?: ej.datavisualization.Diagram.ScrollLimit|string;

	/**Enables or disables the page breaks
	* @Default {false}
	*/
	showPageBreak?: boolean;
}

export interface ScrollSettings {

	/**Allows to read the zoom value of diagram
	* @Default {0}
	*/
	currentZoom?: number;

	/**Sets the horizontal scroll offset
	* @Default {0}
	*/
	horizontalOffset?: number;

	/**Allows to extend the scrollable region that is based on the scroll limit
	* @Default {{left: 0, right: 0, top:0, bottom: 0}}
	*/
	padding?: any;

	/**Sets the vertical scroll offset
	* @Default {0}
	*/
	verticalOffset?: number;

	/**Allows to read the view port height of the diagram
	* @Default {0}
	*/
	viewPortHeight?: number;

	/**Allows to read the view port width of the diagram
	* @Default {0}
	*/
	viewPortWidth?: number;
}

export interface SelectedItems {

	/**A read only collection of the selected items
	* @Default {[]}
	*/
	children?: Array<any>;

	/**Controls the visibility of selector.
	* @Default {ej.datavisualization.Diagram.SelectorConstraints.All}
	*/
	constraints?: ej.datavisualization.Diagram.SelectorConstraints|string;

	/**Defines a method that dynamically enables/ disables the interaction with multiple selection.
	* @Default {null}
	*/
	getConstraints?: any;

	/**Sets the height of the selected items
	* @Default {0}
	*/
	height?: number;

	/**Sets the x position of the selector
	* @Default {0}
	*/
	offsetX?: number;

	/**Sets the y position of the selector
	* @Default {0}
	*/
	offsetY?: number;

	/**Sets the angle to rotate the selected items
	* @Default {0}
	*/
	rotateAngle?: number;

	/**Sets the angle to rotate the selected items. For tooltip properties, refer Tooltip
	* @Default {ej.datavisualization.Diagram.Tooltip()}
	*/
	tooltip?: any;

	/**A collection of frequently using commands that have to be added around the selector.
	* @Default {[]}
	*/
	userHandles?: Array<any>;

	/**Sets the width of the selected items
	* @Default {0}
	*/
	width?: number;
}

export interface SnapSettingsHorizontalGridLines {

	/**Defines the line color of horizontal grid lines
	* @Default {lightgray}
	*/
	lineColor?: string;

	/**Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
	*/
	lineDashArray?: string;

	/**A pattern of lines and gaps that defines a set of horizontal gridlines
	* @Default {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
	*/
	linesInterval?: Array<any>;

	/**Specifies a set of intervals to snap the objects
	* @Default {[20]}
	*/
	snapInterval?: Array<any>;
}

export interface SnapSettingsVerticalGridLines {

	/**Defines the line color of horizontal grid lines
	* @Default {lightgray}
	*/
	lineColor?: string;

	/**Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
	*/
	lineDashArray?: string;

	/**A pattern of lines and gaps that defines a set of horizontal gridlines
	* @Default {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
	*/
	linesInterval?: Array<any>;

	/**Specifies a set of intervals to snap the objects
	* @Default {[20]}
	*/
	snapInterval?: Array<any>;
}

export interface SnapSettings {

	/**Enables or disables snapping nodes/connectors to objects
	* @Default {true}
	*/
	enableSnapToObject?: boolean;

	/**Defines the appearance of horizontal gridlines
	*/
	horizontalGridLines?: SnapSettingsHorizontalGridLines;

	/**Defines the angle by which the object needs to be snapped
	* @Default {5}
	*/
	snapAngle?: number;

	/**Defines the minimum distance between the selected object and the nearest object
	* @Default {5}
	*/
	snapObjectDistance?: number;

	/**Defines the appearance of horizontal gridlines
	*/
	verticalGridLines?: SnapSettingsVerticalGridLines;
}

export interface TooltipAlignment {

	/**Defines the horizontal alignment of tooltip.
	* @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
	*/
	horizontal?: ej.datavisualization.Diagram.HorizontalAlignment|string;

	/**Defines the vertical alignment of tooltip.
	* @Default {ej.datavisualization.Diagram.VerticalAlignment.Bottom}
	*/
	vertical?: ej.datavisualization.Diagram.VerticalAlignment|string;
}

export interface Tooltip {

	/**Aligns the tooltip around nodes/connectors
	*/
	alignment?: TooltipAlignment;

	/**Sets the margin of the tooltip
	* @Default {{ left: 5, right: 5, top: 5, bottom: 5 }}
	*/
	margin?: any;

	/**Defines whether the tooltip should be shown at the mouse position or around node.
	* @Default {ej.datavisualization.Diagram.RelativeMode.Object}
	*/
	relativeMode?: ej.datavisualization.Diagram.RelativeMode|string;

	/**Sets the svg/html template to be bound with tooltip
	*/
	templateId?: string;
}
}
module Diagram
{
enum BridgeDirection
{
//Used to set the direction of line bridges as left
Left,
//Used to set the direction of line bridges as right
Right,
//Used to set the direction of line bridges as top
Top,
//Used to set the direction of line bridges as bottom
Bottom,
}
}
module Diagram
{
enum Keys
{
//No key pressed.
None,
//The A key.
A,
//The B key.
B,
//The C key.
C,
//The D Key.
D,
//The E key.
E,
//The F key.
F,
//The G key.
G,
//The H Key.
H,
//The I key.
I,
//The J key.
J,
//The K key.
K,
//The L Key.
L,
//The M key.
M,
//The N key.
N,
//The O key.
O,
//The P Key.
P,
//The Q key.
Q,
//The R key.
R,
//The S key.
S,
//The T Key.
T,
//The U key.
U,
//The V key.
V,
//The W key.
W,
//The X key.
X,
//The Y key.
Y,
//The Z key.
Z,
//The 0 key.
Number0,
//The 1 key.
Number1,
//The 2 key.
Number2,
//The 3 key.
Number3,
//The 4 key.
Number4,
//The 5 key.
Number5,
//The 6 key.
Number6,
//The 7 key.
Number7,
//The 8 key.
Number8,
//The 9 key.
Number9,
//The LEFT ARROW key.
Left,
//The UP ARROW key.
Up,
//The RIGHT ARROW key.
Right,
//The DOWN ARROW key.
Down,
//The ESC key.
Escape,
//The DEL key.
Delete,
//The TAB key.
Tab,
//The ENTER key.
Enter,
}
}
module Diagram
{
enum KeyModifiers
{
//No modifiers are pressed.
None,
//The ALT key.
Alt,
//The CTRL key.
Control,
//The SHIFT key.
Shift,
}
}
module Diagram
{
enum ConnectorConstraints
{
//Disable all connector Constraints
None,
//Enables connector to be selected
Select,
//Enables connector to be Deleted
Delete,
//Enables connector to be Dragged
Drag,
//Enables connectors source end to be selected
DragSourceEnd,
//Enables connectors target end to be selected
DragTargetEnd,
//Enables control point and end point of every segment in a connector for editing
DragSegmentThumb,
//Enables bridging to the connector
Bridging,
//Enables label of node to be Dragged
DragLabel,
//Enables bridging to the connector
InheritBridging,
//Enables all constraints
Default,
}
}
module Diagram
{
enum HorizontalAlignment
{
//Used to align text horizontally on left side of node/connector
Left,
//Used to align text horizontally on center of node/connector
Center,
//Used to align text horizontally on right side of node/connector
Right,
}
}
module Diagram
{
enum Segments
{
//Used to specify the lines as Straight
Straight,
//Used to specify the lines as Orthogonal
Orthogonal,
//Used to specify the lines as Bezier
Bezier,
}
}
module Diagram
{
enum DecoratorShapes
{
//Used to set decorator shape as none
None,
//Used to set decorator shape as Arrow
Arrow,
//Used to set decorator shape as Open Arrow
OpenArrow,
//Used to set decorator shape as Circle
Circle,
//Used to set decorator shape as Diamond
Diamond,
//Used to set decorator shape as path
Path,
}
}
module Diagram
{
enum VerticalAlignment
{
//Used to align text Vertically on left side of node/connector
Top,
//Used to align text Vertically on center of node/connector
Center,
//Used to align text Vertically on bottom of node/connector
Bottom,
}
}
module Diagram
{
enum DiagramConstraints
{
//Disables all DiagramConstraints
None,
//Enables/Disables PageEditing
PageEditable,
//Enables/Disables Bridging
Bridging,
//Enables/Disables Zooming
Zoomable,
//Enables/Disables panning on horizontal axis
PannableX,
//Enables/Disables panning on vertical axis
PannableY,
//Enables/Disables Panning
Pannable,
//Enables/Disables undo actions
Undoable,
//Enables all Constraints
Default,
}
}
module Diagram
{
enum LayoutOrientations
{
//Used to set LayoutOrientation from top to bottom
TopToBottom,
//Used to set LayoutOrientation from bottom to top
BottomToTop,
//Used to set LayoutOrientation from left to right
LeftToRight,
//Used to set LayoutOrientation from right to left
RightToLeft,
}
}
module Diagram
{
enum LayoutTypes
{
//Used not to set any specific layout
None,
//Used to set layout type as hierarchical layout
HierarchicalTree,
//Used to set layout type as organnizational chart
OrganizationalChart,
}
}
module Diagram
{
enum BPMNActivity
{
//Used to set BPMN Activity as None
None,
//Used to set BPMN Activity as Task
Task,
//Used to set BPMN Activity as SubProcess
SubProcess,
}
}
module Diagram
{
enum NodeConstraints
{
//Disable all node Constraints
None,
//Enables node to be selected
Select,
//Enables node to be Deleted
Delete,
//Enables node to be Dragged
Drag,
//Enables node to be Rotated
Rotate,
//Enables node to be connected
Connect,
//Enables node to be resize north east
ResizeNorthEast,
//Enables node to be resize east
ResizeEast,
//Enables node to be resize south east
ResizeSouthEast,
//Enables node to be resize south
ResizeSouth,
//Enables node to be resize south west
ResizeSouthWest,
//Enables node to be resize west
ResizeWest,
//Enables node to be resize north west
ResizeNorthWest,
//Enables node to be resize north
ResizeNorth,
//Enables node to be Resized
Resize,
//Enables shadow
Shadow,
//Enables label of node to be Dragged
DragLabel,
//Enables panning should be done while node dragging
AllowPan,
//Enables Proportional resize for node
AspectRatio,
//Enables all node constraints
Default,
}
}
module Diagram
{
enum ContainerType
{
//Sets the container type as Canvas
Canvas,
//Sets the container type as Stack
Stack,
}
}
module Diagram
{
enum BPMNEvents
{
//Used to set BPMN Event as Start
Start,
//Used to set BPMN Event as Intermediate
Intermediate,
//Used to set BPMN Event as End
End,
//Used to set BPMN Event as NonInterruptingStart
NonInterruptingStart,
//Used to set BPMN Event as NonInterruptingIntermediate
NonInterruptingIntermediate,
}
}
module Diagram
{
enum BPMNGateways
{
//Used to set BPMN Gateway as None
None,
//Used to set BPMN Gateway as Exclusive
Exclusive,
//Used to set BPMN Gateway as Inclusive
Inclusive,
//Used to set BPMN Gateway as Parallel
Parallel,
//Used to set BPMN Gateway as Complex
Complex,
//Used to set BPMN Gateway as EventBased
EventBased,
}
}
module Diagram
{
enum LabelEditMode
{
//Used to set label edit mode as edit
Edit,
//Used to set label edit mode as view
View,
}
}
module Diagram
{
enum TextAlign
{
//Used to align text on left side of node/connector
Left,
//Used to align text on center of node/connector
Center,
//Used to align text on Right side of node/connector
Right,
}
}
module Diagram
{
enum TextDecorations
{
//Used to set text decoration of the label as Underline
Underline,
//Used to set text decoration of the label as Overline
Overline,
//Used to set text decoration of the label as LineThrough
LineThrough,
//Used to set text decoration of the label as None
None,
}
}
module Diagram
{
enum TextWrapping
{
//Disables wrapping
NoWrap,
//Enables Line-break at normal word break points
Wrap,
//Enables Line-break at normal word break points with longer word overflows
WrapWithOverflow,
}
}
module Diagram
{
enum PortConstraints
{
//Disable all constraints
None,
//Enables connections with connector
Connect,
}
}
module Diagram
{
enum PortShapes
{
//Used to set port shape as X
X,
//Used to set port shape as Circle
Circle,
//Used to set port shape as Square
Square,
//Used to set port shape as Path
Path,
}
}
module Diagram
{
enum PortVisibility
{
//Set the port visibility as Visible
Visible,
//Set the port visibility as Hidden
Hidden,
//Port get visible when hover connector on node
Hover,
//Port gets visible when connect connector to node
Connect,
//Specifies the port visibility as default
Default,
}
}
module Diagram
{
enum BasicShapes
{
//Used to specify node Shape as Rectangle
Rectangle,
//Used to specify node Shape as Ellipse
Ellipse,
//Used to specify node Shape as Path
Path,
//Used to specify node Shape as Polygon
Polygon,
//Used to specify node Shape as Triangle
Triangle,
//Used to specify node Shape as Plus
Plus,
//Used to specify node Shape as Star
Star,
//Used to specify node Shape as Pentagon
Pentagon,
//Used to specify node Shape as Heptagon
Heptagon,
//Used to specify node Shape as Octagon
Octagon,
//Used to specify node Shape as Trapezoid
Trapezoid,
//Used to specify node Shape as Decagon
Decagon,
//Used to specify node Shape as RightTriangle
RightTriangle,
//Used to specify node Shape as Cylinder
Cylinder,
}
}
module Diagram
{
enum BPMNBoundary
{
//Used to set BPMN SubProcess's Boundary as Default
Default,
//Used to set BPMN SubProcess's Boundary as Call
Call,
//Used to set BPMN SubProcess's Boundary as Event
Event,
}
}
module Diagram
{
enum BPMNLoops
{
//Used to set BPMN Activity's Loop as None
None,
//Used to set BPMN Activity's Loop as Standard
Standard,
//Used to set BPMN Activity's Loop as ParallelMultiInstance
ParallelMultiInstance,
//Used to set BPMN Activity's Loop as SequenceMultiInstance
SequenceMultiInstance,
}
}
module Diagram
{
enum BPMNTasks
{
//Used to set BPMN Task Type as None
None,
//Used to set BPMN Task Type as Service
Service,
//Used to set BPMN Task Type as Receive
Receive,
//Used to set BPMN Task Type as Send
Send,
//Used to set BPMN Task Type as InstantiatingReceive
InstantiatingReceive,
//Used to set BPMN Task Type as Manual
Manual,
//Used to set BPMN Task Type as BusinessRule
BusinessRule,
//Used to set BPMN Task Type as User
User,
//Used to set BPMN Task Type as Script
Script,
//Used to set BPMN Task Type as Parallel
Parallel,
}
}
module Diagram
{
enum BPMNTriggers
{
//Used to set Event Trigger as None
None,
//Used to set Event Trigger as Message
Message,
//Used to set Event Trigger as Timer
Timer,
//Used to set Event Trigger as Escalation
Escalation,
//Used to set Event Trigger as Link
Link,
//Used to set Event Trigger as Error
Error,
//Used to set Event Trigger as Compensation
Compensation,
//Used to set Event Trigger as Signal
Signal,
//Used to set Event Trigger as Multiple
Multiple,
//Used to set Event Trigger as Parallel
Parallel,
}
}
module Diagram
{
enum Shapes
{
//Used to set decorator shape as none
None,
//Used to set decorator shape as Arrow
Arrow,
//Used to set decorator shape as Open Arrow
OpenArrow,
//Used to set decorator shape as Circle
Circle,
//Used to set decorator shape as Diamond
Diamond,
//Used to set decorator shape as path
Path,
}
}
module Diagram
{
enum PageOrientations
{
//Used to set orientation as Landscape
Landscape,
//Used to set orientation as portrait
Portrait,
}
}
module Diagram
{
enum ScrollLimit
{
//Used to set scrollLimit as Infinite
Infinite,
//Used to set scrollLimit as Diagram
Diagram,
//Used to set scrollLimit as Limited
Limited,
}
}
module Diagram
{
enum SelectorConstraints
{
//Hides the selector
None,
//Sets the visibility of rotation handle as visible
Rotator,
//Sets the visibility of resize handles as visible
Resizer,
//Sets the visibility of user handles as visible
UserHandles,
//Sets the visibility of all selection handles as visible
All,
}
}
module Diagram
{
enum Tool
{
//Disables all Tools
None,
//Enables/Disables SingleSelect tool
SingleSelect,
//Enables/Disables MultiSelect tool
MultipleSelect,
//Enables/Disables ZoomPan tool
ZoomPan,
//Enables/Disables DrawOnce tool
DrawOnce,
//Enables/Disables ContinuousDraw tool
ContinuesDraw,
}
}
module Diagram
{
enum RelativeMode
{
//Shows tooltip around the node
Object,
//Shows tooltip at the mouse position
Mouse,
}
}

}

interface JQueryXHR {
}
interface JQueryPromise<T> {
}
interface JQueryDeferred<T> extends JQueryPromise<T> {
}
interface JQueryParam {
}
interface JQuery {
    data(key: any): any;
}
interface JQuery {

    ejButton(): JQuery;
    ejButton(options?: ej.Button.Model): JQuery;
    data(key: "ejButton"): ej.Button;

    ejCaptcha(): JQuery;
    ejCaptcha(options?: ej.Captcha.Model): JQuery;
    data(key: "ejCaptcha"): ej.Captcha;

    ejAccordion(): JQuery;
    ejAccordion(options?: ej.Accordion.Model): JQuery;
    data(key: "ejAccordion"): ej.Accordion;

    ejAutocomplete(): JQuery;
    ejAutocomplete(options?: ej.Autocomplete.Model): JQuery;
    data(key: "ejAutocomplete"): ej.Autocomplete;

    ejDatePicker(): JQuery;
    ejDatePicker(options?: ej.DatePicker.Model): JQuery;
    data(key: "ejDatePicker"): ej.DatePicker;

    ejDateTimePicker(): JQuery;
    ejDateTimePicker(options?: ej.DateTimePicker.Model): JQuery;
    data(key: "ejDateTimePicker"): ej.DateTimePicker;

    ejDialog(): JQuery;
    ejDialog(options?: ej.Dialog.Model): JQuery;
    data(key: "ejDialog"): ej.Dialog;

    ejDropDownList(): JQuery;
    ejDropDownList(options?: ej.DropDownList.Model): JQuery;
    data(key: "ejDropDownList"): ej.DropDownList;

    ejFileExplorer(): JQuery;
    ejFileExplorer(options?: ej.FileExplorer.Model): JQuery;
    data(key: "ejFileExplorer"): ej.FileExplorer;

    ejListBox(): JQuery;
    ejListBox(options?: ej.ListBox.Model): JQuery;
    data(key: "ejListBox"): ej.ListBox;

    ejListView(): JQuery;
    ejListView(options?: ej.ListView.Model): JQuery;
    data(key: "ejListView"): ej.ListView;

    ejNumericTextbox(): JQuery;
    ejNumericTextbox(options?: ej.Editor.Model): JQuery;
    data(key: "ejNumericTextbox"): ej.NumericTextbox;

    ejCurrencyTextbox(): JQuery;
    ejCurrencyTextbox(options?: ej.Editor.Model): JQuery;
    data(key: "ejCurrencyTextbox"): ej.CurrencyTextbox;

    ejPercentageTextbox(): JQuery;
    ejPercentageTextbox(options?: ej.Editor.Model): JQuery;
    data(key: "ejPercentageTextbox"): ej.PercentageTextbox;

    ejMaskEdit(): JQuery;
    ejMaskEdit(options?: ej.MaskEdit.Model): JQuery;
    data(key: "ejMaskEdit"): ej.MaskEdit;

    ejMenu(): JQuery;
    ejMenu(options?: ej.Menu.Model): JQuery;
    data(key: "ejMenu"): ej.Menu;

    ejPager(): JQuery;
    ejPager(options?: ej.Pager.Model): JQuery;
    data(key: "ejPager"): ej.Pager;

    ejProgressBar(): JQuery;
    ejProgressBar(options?: ej.ProgressBar.Model): JQuery;
    data(key: "ejProgressBar"): ej.ProgressBar;

    ejRadioButton(): JQuery;
    ejRadioButton(options?: ej.RadioButton.Model): JQuery;
    data(key: "ejRadioButton"): ej.RadioButton;

    ejCheckBox(): JQuery;
    ejCheckBox(options?: ej.CheckBox.Model): JQuery;
    data(key: "ejCheckBox"): ej.CheckBox;

    ejRibbon(): JQuery;
    ejRibbon(options?: ej.Ribbon.Model): JQuery;
    data(key: "ejRibbon"): ej.Ribbon;
	
	ejKanban(): JQuery;
    ejKanban(options?: ej.Kanban.Model): JQuery;
    data(key: "ejKanban"): ej.Kanban;

    ejRating(): JQuery;
    ejRating(options?: ej.Rating.Model): JQuery;
    data(key: "ejRating"): ej.Rating;

    ejRotator(): JQuery;
    ejRotator(options?: ej.Rotator.Model): JQuery;
    data(key: "ejRotator"): ej.Rotator;

    ejRTE(): JQuery;
    ejRTE(options?: ej.RTE.Model): JQuery;
    data(key: "ejRTE"): ej.RTE;

    ejSlider(): JQuery;
    ejSlider(options?: ej.Slider.Model): JQuery;
    data(key: "ejSlider"): ej.Slider;

    ejSplitButton(): JQuery;
    ejSplitButton(options?: ej.SplitButton.Model): JQuery;
    data(key: "ejSplitButton"): ej.SplitButton;

    ejSplitter(): JQuery;
    ejSplitter(options?: ej.Splitter.Model): JQuery;
    data(key: "ejSplitter"): ej.Splitter;

    ejTab(): JQuery;
    ejTab(options?: ej.Tab.Model): JQuery;
    data(key: "ejTab"): ej.Tab;

    ejTagCloud(): JQuery;
    ejTagCloud(options?: ej.TagCloud.Model): JQuery;
    data(key: "ejTagCloud"): ej.TagCloud;

    ejTimePicker(): JQuery;
    ejTimePicker(options?: ej.TimePicker.Model): JQuery;
    data(key: "ejTimePicker"): ej.TimePicker;

    ejTile(): JQuery;
    ejTile(options?: ej.Tile.Model): JQuery;
    data(key: "ejTile"): ej.Tile;

    ejToggleButton(): JQuery;
    ejToggleButton(options?: ej.ToggleButton.Model): JQuery;
    data(key: "ejToggleButton"): ej.ToggleButton;

    ejToolbar(): JQuery;
    ejToolbar(options?: ej.Toolbar.Model): JQuery;
    data(key: "ejToolbar"): ej.Toolbar;

    ejNavigationDrawer(): JQuery;
    ejNavigationDrawer(options?: ej.NavigationDrawer.Model): JQuery;
    data(key: "ejNavigationDrawer"): ej.NavigationDrawer;

    ejRadialMenu(): JQuery;
    ejRadialMenu(options?: ej.RadialMenu.Model): JQuery;
    data(key: "ejRadialMenu"): ej.RadialMenu;

    ejTreeView(): JQuery;
    ejTreeView(options?: ej.TreeView.Model): JQuery;
    data(key: "ejTreeView"): ej.TreeView;

    ejUploadbox(): JQuery;
    ejUploadbox(options?: ej.Uploadbox.Model): JQuery;
    data(key: "ejUploadbox"): ej.Uploadbox;

    ejWaitingPopup(): JQuery;
    ejWaitingPopup(options?: ej.WaitingPopup.Model): JQuery;
    data(key: "ejWaitingPopup"): ej.WaitingPopup;

    ejSchedule(): JQuery;
    ejSchedule(options?: ej.Schedule.Model): JQuery;
    data(key: "ejSchedule"): ej.Schedule;

    ejRecurrenceEditor(): JQuery;
    ejRecurrenceEditor(options?: ej.RecurrenceEditorOptions): JQuery;
    data(key: "ejRecurrenceEditor"): ej.RecurrenceEditor;

    ejGrid(): JQuery;
    ejGrid(options?: ej.Grid.Model): JQuery;
    data(key: "ejGrid"): ej.Grid;
	
    /*ReportViewer*/
    ejReportViewer(): JQuery;
    ejReportViewer(options?: ej.ReportViewer.Model): JQuery;
    data(key: "ejReportViewer"): ej.ReportViewer;
    /*ReportViewer*/

    ejLinearGauge(): JQuery;
    ejLinearGauge(options?: ej.datavisualization.LinearGauge.Model): JQuery;
    data(key: "ejLinearGauge"): ej.datavisualization.LinearGauge;

    ejDigitalGauge(): JQuery;
    ejDigitalGauge(options?: ej.datavisualization.DigitalGauge.Model): JQuery;
    data(key: "ejDigitalGauge"): ej.datavisualization.DigitalGauge;

    ejCircularGauge(): JQuery;
    ejCircularGauge(options?: ej.datavisualization.CircularGauge.Model): JQuery;
    data(key: "ejCircularGauge"): ej.datavisualization.CircularGauge;

    ejChart(): JQuery;
    ejChart(options?: ej.datavisualization.Chart.Model): JQuery;
    data(key: "ejChart"): ej.datavisualization.Chart;

    ejRangeNavigator(): JQuery;
    ejRangeNavigator(options?: ej.datavisualization.RangeNavigator.Model): JQuery;
    data(key: "ejRangeNavigator"): ej.datavisualization.RangeNavigator;

    ejBulletGraph(): JQuery;
    ejBulletGraph(options?: ej.datavisualization.BulletGraph.Model): JQuery;
    data(key: "ejBulletGraph"): ej.datavisualization.BulletGraph;

    ejGantt(): JQuery;
    ejGantt(options?: ej.Gantt.Model): JQuery;
    data(key: "ejGantt"): ej.Gantt;

    ejTreeGrid(): JQuery;
    ejTreeGrid(options?: ej.TreeGrid.Model): JQuery;
    data(key: "ejTreeGrid"): ej.TreeGrid;

    ejMap(): JQuery;
    ejMap(options?: ej.datavisualization.Map.Model): JQuery;
    data(key: "ejMap"): ej.datavisualization.Map;

    ejTreeMap(): JQuery;
    ejTreeMap(options?: ej.datavisualization.TreeMap.Model): JQuery;
    data(key: "ejTreeMap"): ej.datavisualization.TreeMap;

    ejBarcode(): JQuery;
    ejBarcode(options?: ej.datavisualization.Barcode.Model): JQuery;
    data(key: "ejBarcode"): ej.datavisualization.Barcode;

    ejDiagram(): JQuery;
    ejDiagram(options?: ej.datavisualization.Diagram.Model): JQuery;
    data(key: "ejDiagram"): ej.datavisualization.Diagram;

    // ejSymbolPalette(): JQuery;
    // ejSymbolPalette(options?: ej.datavisualization.SymbolPalette.Model): JQuery;
    // data(key: "ejSymbolPalette"): ej.datavisualization.SymbolPalette;

    ejOlapChart(): JQuery;
    ejOlapChart(options?: ej.olap.OlapChart.Model): JQuery;
    data(key: "ejOlapChart"): ej.olap.OlapChart;

    ejPivotGrid(): JQuery;
    ejPivotGrid(options?: ej.PivotGrid.Model): JQuery;
    data(key: "ejPivotGrid"): ej.PivotGrid;

    ejPivotSchemaDesigner(): JQuery;
    ejPivotSchemaDesigner(options?: ej.PivotSchemaDesigner.Model): JQuery;
    data(key: "ejPivotSchemaDesigner"): ej.PivotSchemaDesigner;

    ejOlapClient(): JQuery;
    ejOlapClient(options?: ej.olap.OlapClient.Model): JQuery;
    data(key: "ejOlapClient"): ej.olap.OlapClient;

    ejOlapGauge(): JQuery;
    ejOlapGauge(options?: ej.olap.OlapGauge.Model): JQuery;
    data(key: "ejOlapGauge"): ej.olap.OlapGauge;

    ejPivotPager(): JQuery;
    ejPivotPager(options?: ej.PivotPager.Model): JQuery;
    data(key: "ejPivotPager"): ej.PivotPager;
	
    /* Spreadsheet */
    ejSpreadsheet(): JQuery;
    ejSpreadsheet(options?: ej.Spreadsheet.Model): JQuery;
    data(key: "ejSpreadsheet"): ej.Spreadsheet;
    /* Spreadsheet */

    ejScroller(): JQuery;
    ejScroller(options?: ej.Scroller.Model): JQuery;
    data(key: "ejScroller"): ej.Scroller;
	
	ejDraggable(): JQuery;
    ejDraggable(options?: ej.DraggableOptions): JQuery;
    data(key: "ejDraggable"): ej.Draggable;
	
	ejDroppable(): JQuery;
    ejDroppable(options?: ej.DroppableOptions): JQuery;
    data(key: "ejDroppable"): ej.Droppable;
	
    ejResizable(): JQuery;
    ejResizable(options?: ej.ResizableOptions): JQuery;
    data(key: "ejResizable"): ej.Resizable;
	
	ejColorPicker(): JQuery;
    ejColorPicker(options?: ej.ColorPicker.Model): JQuery;
    data(key: "ejColorPicker"): ej.ColorPicker;
	
	ejRadialSlider(): JQuery;
    ejRadialSlider(options?: ej.RadialSliderOptions): JQuery;
    data(key: "ejRadialSlider"): ej.RadialSlider;

}