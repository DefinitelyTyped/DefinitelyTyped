import proclaim = require('proclaim');

proclaim.fail('foo', 'bar', 'Foo equals bar', '===');
proclaim.fail('foo', 'bar', 'Foo equals bar');
proclaim.fail('foo', 'bar');
proclaim.ok(5, '5 equals true');
proclaim.ok.ok.ok.ok.ok.ok.fail('foo', 'bar', 'Foo equals bar', '===');
proclaim.ok(5);
proclaim.notOk(5, '5 equals false');
proclaim.notOk(5);
proclaim.equal('abc', 'bca', 'Foo equals bar');
proclaim.equal('abc', 'bca');
proclaim.notEqual('abc', 'bca', 'Foo equals bar');
proclaim.notEqual('abc', 'bca');
proclaim.strictEqual('abc', 'bca', 'Foo equals bar');
proclaim.strictEqual('abc', 'bca');
proclaim.notStrictEqual('abc', 'bca', 'Foo equals bar');
proclaim.notStrictEqual('abc', 'bca');
proclaim.deepEqual('abc', 'bca', 'Foo equals bar');
proclaim.deepEqual('abc', 'bca');
proclaim.notDeepEqual('abc', 'bca', 'Foo equals bar');
proclaim.notDeepEqual('abc', 'bca');
proclaim.deepStrictEqual('abc', 'bca', 'Foo equals bar');
proclaim.deepStrictEqual('abc', 'bca');
proclaim.notDeepStrictEqual('abc', 'bca', 'Foo equals bar');
proclaim.notDeepStrictEqual('abc', 'bca');
proclaim.throws(() => {}, {}, 'throws error');
proclaim.throws(() => {}, {});
proclaim.doesNotThrow(() => {}, {}, 'throws error');
proclaim.doesNotThrow(() => {}, {});
proclaim.isTypeOf('same type', 'same type', 'values match');
proclaim.isTypeOf('same type', 'same type');
proclaim.isNotTypeOf('same type', 'same type', 'values dont match');
proclaim.isNotTypeOf('same type', 'same type');
proclaim.isInstanceOf('same instance', 'same instance', 'instance match');
proclaim.isInstanceOf('same instance', 'same instance');
proclaim.isNotInstanceOf('same instance', 'same instance', 'instance dont match');
proclaim.isNotInstanceOf('same instance', 'same instance');
proclaim.isArray([], 'is array');
proclaim.isArray([]);
proclaim.isNotArray([], 'is array');
proclaim.isNotArray([]);
proclaim.isBoolean(true, 'is bool');
proclaim.isBoolean(true);
proclaim.isNotBoolean(true, 'is bool');
proclaim.isNotBoolean(true);
proclaim.isTrue(true, 'is true');
proclaim.isTrue(true);
proclaim.isFalse(false, 'is true');
proclaim.isFalse(false);
proclaim.isFunction('value here', 'value was a thing');
proclaim.isFunction('value here');
proclaim.isNotFunction('value here', 'value was a thing');
proclaim.isNotFunction('value here');
proclaim.isNaN('value here', 'value was a thing');
proclaim.isNaN('value here');
proclaim.isNotNaN('value here', 'value was a thing');
proclaim.isNotNaN('value here');
proclaim.isNull('value here', 'value was a thing');
proclaim.isNull('value here');
proclaim.isNotNull('value here', 'value was a thing');
proclaim.isNotNull('value here');
proclaim.isNumber('value here', 'value was a thing');
proclaim.isNumber('value here');
proclaim.isNotNumber('value here', 'value was a thing');
proclaim.isNotNumber('value here');
proclaim.isObject('value here', 'value was a thing');
proclaim.isObject('value here');
proclaim.isNotNull('value here', 'value was a thing');
proclaim.isNotNull('value here');
proclaim.isNotObject('value here', 'value was a thing');
proclaim.isNotObject('value here');
proclaim.isString('value here', 'value was a thing');
proclaim.isString('value here');
proclaim.isNotString('value here', 'value was a thing');
proclaim.isNotString('value here');
proclaim.isUndefined('value here', 'value was a thing');
proclaim.isUndefined('value here');
proclaim.isDefined('value here', 'value was a thing');
proclaim.isDefined('value here');
proclaim.match('a', 'a', 'match');
proclaim.match('a', 'a');
proclaim.notMatch('a', 'b', 'no match');
proclaim.notMatch('a', 'b');
proclaim.include([1, 2, 3], 5, 'no match');
proclaim.include([1, 2, 3], 5);
proclaim.doesNotInclude([1, 2, 3], 5, 'no match');
proclaim.doesNotInclude([1, 2, 3], 5);
proclaim.lengthEquals([1, 2, 3], 3, 'length equals');
proclaim.lengthEquals([1, 2, 3], 3);
proclaim.lessThan(5, 10, 'true');
proclaim.lessThan(5, 10);
proclaim.lessThanOrEqual(5, 10, 'true');
proclaim.lessThanOrEqual(5, 10);
proclaim.greaterThan(5, 10, 'false');
proclaim.greaterThan(5, 10);
proclaim.greaterThanOrEqual(5, 10, 'false');
proclaim.greaterThanOrEqual(5, 10);
proclaim.arity(() => {}, {}, 'no fn length');
proclaim.arity(() => {}, {});
proclaim.almostEqual(5, 10, 3, 'not almost equal');
proclaim.almostEqual(5, 10, 3);
proclaim.isNotEnumerable({}, {}, 'true');
proclaim.isNotEnumerable({}, {});
proclaim.isEnumerable({}, {}, 'true');
proclaim.isEnumerable({}, {});
proclaim.hasName(() => {}, 'name here', 'false');
proclaim.hasName(() => {}, 'name here');
