// Type definitions for Google Google Cloud Datastore API v1
// Project: https://cloud.google.com/datastore/
// Definitions by: Bolisov Alexey <https://github.com/Bolisov>
// TypeScript Version: 2.3

// IMPORTANT. 
// This file was generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator

/// <reference types="gapi.client" />

declare namespace gapi.client.datastore {
    
    interface GqlQuery {
        // A string of the format described
        // [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
        queryString?: string,
        // Numbered binding site @1 references the first numbered parameter,
        // effectively using 1-based indexing, rather than the usual 0.
        // 
        // For each binding site numbered i in `query_string`, there must be an i-th
        // numbered parameter. The inverse must also be true.
        positionalBindings?: GqlQueryParameter[],        
        // For each non-reserved named binding site in the query string, there must be
        // a named parameter with that name, but not necessarily the inverse.
        // 
        // Key must match regex `A-Za-z_$*`, must not match regex
        // `__.*__`, and must not be `""`.
        namedBindings?: any,
        // When false, the query string must not contain any literals and instead must
        // bind all values. For example,
        // `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
        // `SELECT * FROM Kind WHERE a = @value` is.
        allowLiterals?: boolean,
    }
    
    interface Filter {
        // A composite filter.
        compositeFilter?: CompositeFilter,
        // A filter on a property.
        propertyFilter?: PropertyFilter,
    }
    
    interface Empty {
    }
    
    interface RunQueryRequest {
        // The options for this query.
        readOptions?: ReadOptions,
        // The query to run.
        query?: Query,
        // The GQL query to run.
        gqlQuery?: GqlQuery,
        // Entities are partitioned into subsets, identified by a partition ID.
        // Queries are scoped to a single partition.
        // This partition ID is normalized with the standard default context
        // partition ID.
        partitionId?: PartitionId,
    }
    
    interface RollbackRequest {
        // The transaction identifier, returned by a call to
        // Datastore.BeginTransaction.
        transaction?: string,
    }
    
    interface GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {
        // Metadata common to all Datastore Admin operations.
        common?: GoogleDatastoreAdminV1beta1CommonMetadata,
        // An estimate of the number of bytes processed.
        progressBytes?: GoogleDatastoreAdminV1beta1Progress,
        // Location for the export metadata and data files. This will be the same
        // value as the
        // google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix
        // field. The final output location is provided in
        // google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
        outputUrlPrefix?: string,
        // Description of which entities are being exported.
        entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter,
        // An estimate of the number of entities processed.
        progressEntities?: GoogleDatastoreAdminV1beta1Progress,
    }
    
    interface TransactionOptions {
        // The transaction should only allow reads.
        readOnly?: ReadOnly,
        // The transaction should allow both reads and writes.
        readWrite?: ReadWrite,
    }
    
    interface CompositeFilter {
        // The list of filters to combine.
        // Must contain at least one filter.
        filters?: Filter[],        
        // The operator for combining multiple filters.
        op?: string,
    }
    
    interface GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {
        // The location of the import metadata file. This will be the same value as
        // the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
        // field.
        inputUrl?: string,
        // An estimate of the number of bytes processed.
        progressBytes?: GoogleDatastoreAdminV1beta1Progress,
        // Description of which entities are being imported.
        entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter,
        // An estimate of the number of entities processed.
        progressEntities?: GoogleDatastoreAdminV1beta1Progress,
        // Metadata common to all Datastore Admin operations.
        common?: GoogleDatastoreAdminV1beta1CommonMetadata,
    }
    
    interface AllocateIdsResponse {
        // The keys specified in the request (in the same order), each with
        // its key path completed with a newly allocated ID.
        keys?: Key[],        
    }
    
    interface Query {
        // The projection to return. Defaults to returning all properties.
        projection?: Projection[],        
        // An ending point for the query results. Query cursors are
        // returned in query result batches and
        // [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
        endCursor?: string,
        // The maximum number of results to return. Applies after all other
        // constraints. Optional.
        // Unspecified is interpreted as no limit.
        // Must be >= 0 if specified.
        limit?: number,
        // The filter to apply.
        filter?: Filter,
        // A starting point for the query results. Query cursors are
        // returned in query result batches and
        // [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
        startCursor?: string,
        // The number of results to skip. Applies before limit, but after all other
        // constraints. Optional. Must be >= 0 if specified.
        offset?: number,
        // The kinds to query (if empty, returns entities of all kinds).
        // Currently at most 1 kind may be specified.
        kind?: KindExpression[],        
        // The properties to make distinct. The query results will contain the first
        // result for each distinct combination of values for the given properties
        // (if empty, all results are returned).
        distinctOn?: PropertyReference[],        
        // The order to apply to the query results (if empty, order is unspecified).
        order?: PropertyOrder[],        
    }
    
    interface GoogleLongrunningOperation {
        // If the value is `false`, it means the operation is still in progress.
        // If true, the operation is completed, and either `error` or `response` is
        // available.
        done?: boolean,
        // The normal response of the operation in case of success.  If the original
        // method returns no data on success, such as `Delete`, the response is
        // `google.protobuf.Empty`.  If the original method is standard
        // `Get`/`Create`/`Update`, the response should be the resource.  For other
        // methods, the response should have the type `XxxResponse`, where `Xxx`
        // is the original method name.  For example, if the original method name
        // is `TakeSnapshot()`, the inferred response type is
        // `TakeSnapshotResponse`.
        response?: any,
        // The server-assigned name, which is only unique within the same service that
        // originally returns it. If you use the default HTTP mapping, the
        // `name` should have the format of `operations/some/unique/name`.
        name?: string,
        // The error result of the operation in case of failure or cancellation.
        error?: Status,
        // Service-specific metadata associated with the operation.  It typically
        // contains progress information and common metadata such as create time.
        // Some services might not provide such metadata.  Any method that returns a
        // long-running operation should document the metadata type, if any.
        metadata?: any,
    }
    
    interface ReadOnly {
    }
    
    interface PropertyFilter {
        // The value to compare the property to.
        value?: Value,
        // The property to filter by.
        property?: PropertyReference,
        // The operator to filter by.
        op?: string,
    }
    
    interface EntityResult {
        // A cursor that points to the position after the result entity.
        // Set only when the `EntityResult` is part of a `QueryResultBatch` message.
        cursor?: string,
        // The version of the entity, a strictly positive number that monotonically
        // increases with changes to the entity.
        // 
        // This field is set for `FULL` entity
        // results.
        // 
        // For missing entities in `LookupResponse`, this
        // is the version of the snapshot that was used to look up the entity, and it
        // is always set except for eventually consistent reads.
        version?: string,
        // The resulting entity.
        entity?: Entity,
    }
    
    interface CommitResponse {
        // The number of index entries updated during the commit, or zero if none were
        // updated.
        indexUpdates?: number,
        // The result of performing the mutations.
        // The i-th mutation result corresponds to the i-th mutation in the request.
        mutationResults?: MutationResult[],        
    }
    
    interface Value {
        // A blob value.
        // May have at most 1,000,000 bytes.
        // When `exclude_from_indexes` is false, may have at most 1500 bytes.
        // In JSON requests, must be base64-encoded.
        blobValue?: string,
        // The `meaning` field should only be populated for backwards compatibility.
        meaning?: number,
        // An array value.
        // Cannot contain another array value.
        // A `Value` instance that sets field `array_value` must not set fields
        // `meaning` or `exclude_from_indexes`.
        arrayValue?: ArrayValue,
        // An entity value.
        // 
        // - May have no key.
        // - May have a key with an incomplete key path.
        // - May have a reserved/read-only key.
        entityValue?: Entity,
        // A geo point value representing a point on the surface of Earth.
        geoPointValue?: LatLng,
        // A key value.
        keyValue?: Key,
        // An integer value.
        integerValue?: string,
        // A UTF-8 encoded string value.
        // When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
        // Otherwise, may be set to at least 1,000,000 bytes.
        stringValue?: string,
        // If the value should be excluded from all indexes including those defined
        // explicitly.
        excludeFromIndexes?: boolean,
        // A double value.
        doubleValue?: number,
        // A timestamp value.
        // When stored in the Datastore, precise only to microseconds;
        // any additional precision is rounded down.
        timestampValue?: string,
        // A null value.
        nullValue?: string,
        // A boolean value.
        booleanValue?: boolean,
    }
    
    interface PartitionId {
        // If not empty, the ID of the namespace to which the entities belong.
        namespaceId?: string,
        // The ID of the project to which the entities belong.
        projectId?: string,
    }
    
    interface ReadWrite {
        // The transaction identifier of the transaction being retried.
        previousTransaction?: string,
    }
    
    interface Entity {
        // The entity's properties.
        // The map's keys are property names.
        // A property name matching regex `__.*__` is reserved.
        // A reserved property name is forbidden in certain documented contexts.
        // The name must not contain more than 500 characters.
        // The name cannot be `""`.
        properties?: any,
        // The entity's key.
        // 
        // An entity must have a key, unless otherwise documented (for example,
        // an entity in `Value.entity_value` may have no key).
        // An entity's kind is its key path's last element's kind,
        // or null if it has no key.
        key?: Key,
    }
    
    interface QueryResultBatch {
        // A cursor that points to the position after the last result in the batch.
        endCursor?: string,
        // The state of the query after the current batch.
        moreResults?: string,
        // The version number of the snapshot this batch was returned from.
        // This applies to the range of results from the query's `start_cursor` (or
        // the beginning of the query if no cursor was given) to this batch's
        // `end_cursor` (not the query's `end_cursor`).
        // 
        // In a single transaction, subsequent query result batches for the same query
        // can have a greater snapshot version number. Each batch's snapshot version
        // is valid for all preceding batches.
        // The value will be zero for eventually consistent queries.
        snapshotVersion?: string,
        // A cursor that points to the position after the last skipped result.
        // Will be set when `skipped_results` != 0.
        skippedCursor?: string,
        // The number of results skipped, typically because of an offset.
        skippedResults?: number,
        // The result type for every entity in `entity_results`.
        entityResultType?: string,
        // The results for this batch.
        entityResults?: EntityResult[],        
    }
    
    interface LookupRequest {
        // The options for this lookup request.
        readOptions?: ReadOptions,
        // Keys of entities to look up.
        keys?: Key[],        
    }
    
    interface GoogleDatastoreAdminV1beta1Progress {
        // An estimate of how much work needs to be performed.  May be zero if the
        // work estimate is unavailable.
        workEstimated?: string,
        // Note that this may be greater than work_estimated.
        workCompleted?: string,
    }
    
    interface PathElement {
        // The kind of the entity.
        // A kind matching regex `__.*__` is reserved/read-only.
        // A kind must not contain more than 1500 bytes when UTF-8 encoded.
        // Cannot be `""`.
        kind?: string,
        // The auto-allocated ID of the entity.
        // Never equal to zero. Values less than zero are discouraged and may not
        // be supported in the future.
        id?: string,
        // The name of the entity.
        // A name matching regex `__.*__` is reserved/read-only.
        // A name must not be more than 1500 bytes when UTF-8 encoded.
        // Cannot be `""`.
        name?: string,
    }
    
    interface GqlQueryParameter {
        // A query cursor. Query cursors are returned in query
        // result batches.
        cursor?: string,
        // A value parameter.
        value?: Value,
    }
    
    interface Status {
        // The status code, which should be an enum value of google.rpc.Code.
        code?: number,
        // A developer-facing error message, which should be in English. Any
        // user-facing error message should be localized and sent in the
        // google.rpc.Status.details field, or localized by the client.
        message?: string,
        // A list of messages that carry the error details.  There is a common set of
        // message types for APIs to use.
        details?: any[],        
    }
    
    interface GoogleLongrunningListOperationsResponse {
        // A list of operations that matches the specified filter in the request.
        operations?: GoogleLongrunningOperation[],        
        // The standard List next-page token.
        nextPageToken?: string,
    }
    
    interface BeginTransactionResponse {
        // The transaction identifier (always present).
        transaction?: string,
    }
    
    interface AllocateIdsRequest {
        // A list of keys with incomplete key paths for which to allocate IDs.
        // No key may be reserved/read-only.
        keys?: Key[],        
    }
    
    interface RunQueryResponse {
        // The parsed form of the `GqlQuery` from the request, if it was set.
        query?: Query,
        // A batch of query results (always present).
        batch?: QueryResultBatch,
    }
    
    interface LookupResponse {
        // A list of keys that were not looked up due to resource constraints. The
        // order of results in this field is undefined and has no relation to the
        // order of the keys in the input.
        deferred?: Key[],        
        // Entities not found as `ResultType.KEY_ONLY` entities. The order of results
        // in this field is undefined and has no relation to the order of the keys
        // in the input.
        missing?: EntityResult[],        
        // Entities found as `ResultType.FULL` entities. The order of results in this
        // field is undefined and has no relation to the order of the keys in the
        // input.
        found?: EntityResult[],        
    }
    
    interface CommitRequest {
        // The identifier of the transaction associated with the commit. A
        // transaction identifier is returned by a call to
        // Datastore.BeginTransaction.
        transaction?: string,
        // The type of commit to perform. Defaults to `TRANSACTIONAL`.
        mode?: string,
        // The mutations to perform.
        // 
        // When mode is `TRANSACTIONAL`, mutations affecting a single entity are
        // applied in order. The following sequences of mutations affecting a single
        // entity are not permitted in a single `Commit` request:
        // 
        // - `insert` followed by `insert`
        // - `update` followed by `insert`
        // - `upsert` followed by `insert`
        // - `delete` followed by `update`
        // 
        // When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
        // entity.
        mutations?: Mutation[],        
    }
    
    interface BeginTransactionRequest {
        // Options for a new transaction.
        transactionOptions?: TransactionOptions,
    }
    
    interface PropertyOrder {
        // The direction to order by. Defaults to `ASCENDING`.
        direction?: string,
        // The property to order by.
        property?: PropertyReference,
    }
    
    interface KindExpression {
        // The name of the kind.
        name?: string,
    }
    
    interface Key {
        // The entity path.
        // An entity path consists of one or more elements composed of a kind and a
        // string or numerical identifier, which identify entities. The first
        // element identifies a _root entity_, the second element identifies
        // a _child_ of the root entity, the third element identifies a child of the
        // second entity, and so forth. The entities identified by all prefixes of
        // the path are called the element's _ancestors_.
        // 
        // An entity path is always fully complete: *all* of the entity's ancestors
        // are required to be in the path along with the entity identifier itself.
        // The only exception is that in some documented cases, the identifier in the
        // last path element (for the entity) itself may be omitted. For example,
        // the last path element of the key of `Mutation.insert` may have no
        // identifier.
        // 
        // A path can never be empty, and a path can have at most 100 elements.
        path?: PathElement[],        
        // Entities are partitioned into subsets, currently identified by a project
        // ID and namespace ID.
        // Queries are scoped to a single partition.
        partitionId?: PartitionId,
    }
    
    interface LatLng {
        // The latitude in degrees. It must be in the range [-90.0, +90.0].
        latitude?: number,
        // The longitude in degrees. It must be in the range [-180.0, +180.0].
        longitude?: number,
    }
    
    interface GoogleDatastoreAdminV1beta1EntityFilter {
        // If empty, then this represents all kinds.
        kinds?: string[],        
        // An empty list represents all namespaces.  This is the preferred
        // usage for projects that don't use namespaces.
        // 
        // An empty string element represents the default namespace.  This should be
        // used if the project has data in non-default namespaces, but doesn't want to
        // include them.
        // Each namespace in this list must be unique.
        namespaceIds?: string[],        
    }
    
    interface PropertyReference {
        // The name of the property.
        // If name includes "."s, it may be interpreted as a property name path.
        name?: string,
    }
    
    interface GoogleDatastoreAdminV1beta1CommonMetadata {
        // The client-assigned labels which were provided when the operation was
        // created.  May also include additional labels.
        labels?: any,
        // The time the operation ended, either successfully or otherwise.
        endTime?: string,
        // The current state of the Operation.
        state?: string,
        // The type of the operation.  Can be used as a filter in
        // ListOperationsRequest.
        operationType?: string,
        // The time that work began on the operation.
        startTime?: string,
    }
    
    interface ArrayValue {
        // Values in the array.
        // The order of this array may not be preserved if it contains a mix of
        // indexed and unindexed values.
        values?: Value[],        
    }
    
    interface Projection {
        // The property to project.
        property?: PropertyReference,
    }
    
    interface Mutation {
        // The version of the entity that this mutation is being applied to. If this
        // does not match the current version on the server, the mutation conflicts.
        baseVersion?: string,
        // The entity to insert. The entity must not already exist.
        // The entity key's final path element may be incomplete.
        insert?: Entity,
        // The entity to update. The entity must already exist.
        // Must have a complete key path.
        update?: Entity,
        // The entity to upsert. The entity may or may not already exist.
        // The entity key's final path element may be incomplete.
        upsert?: Entity,
        // The key of the entity to delete. The entity may or may not already exist.
        // Must have a complete key path and must not be reserved/read-only.
        delete?: Key,
    }
    
    interface ReadOptions {
        // The identifier of the transaction in which to read. A
        // transaction identifier is returned by a call to
        // Datastore.BeginTransaction.
        transaction?: string,
        // The non-transactional read consistency to use.
        // Cannot be set to `STRONG` for global queries.
        readConsistency?: string,
    }
    
    interface GoogleDatastoreAdminV1beta1ExportEntitiesResponse {
        // Location of the output metadata file. This can be used to begin an import
        // into Cloud Datastore (this project or another project). See
        // google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.
        // Only present if the operation completed successfully.
        outputUrl?: string,
    }
    
    interface RollbackResponse {
    }
    
    interface MutationResult {
        // The version of the entity on the server after processing the mutation. If
        // the mutation doesn't change anything on the server, then the version will
        // be the version of the current entity or, if no entity is present, a version
        // that is strictly greater than the version of any previous entity and less
        // than the version of any possible future entity.
        version?: string,
        // Whether a conflict was detected for this mutation. Always false when a
        // conflict detection strategy field is not set in the mutation.
        conflictDetected?: boolean,
        // The automatically allocated key.
        // Set only when the mutation allocated a key.
        key?: Key,
    }
    
    interface OperationsResource {
        // Starts asynchronous cancellation on a long-running operation.  The server
        // makes a best effort to cancel the operation, but success is not
        // guaranteed.  If the server doesn't support this method, it returns
        // `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        // Operations.GetOperation or
        // other methods to check whether the cancellation succeeded or whether the
        // operation completed despite cancellation. On successful cancellation,
        // the operation is not deleted; instead, it becomes an operation with
        // an Operation.error value with a google.rpc.Status.code of 1,
        // corresponding to `Code.CANCELLED`.
        cancel (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The name of the operation resource to be cancelled.
            name: string,
        }) : gapi.client.Request<Empty>;        
        
        // Deletes a long-running operation. This method indicates that the client is
        // no longer interested in the operation result. It does not cancel the
        // operation. If the server doesn't support this method, it returns
        // `google.rpc.Code.UNIMPLEMENTED`.
        delete (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The name of the operation resource to be deleted.
            name: string,
        }) : gapi.client.Request<Empty>;        
        
        // Gets the latest state of a long-running operation.  Clients can use this
        // method to poll the operation result at intervals as recommended by the API
        // service.
        get (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The name of the operation resource.
            name: string,
        }) : gapi.client.Request<GoogleLongrunningOperation>;        
        
        // Lists operations that match the specified filter in the request. If the
        // server doesn't support this method, it returns `UNIMPLEMENTED`.
        // 
        // NOTE: the `name` binding allows API services to override the binding
        // to use different resource name schemes, such as `users/*/operations`. To
        // override the binding, API services can add a binding such as
        // `"/v1/{name=users/*}/operations"` to their service configuration.
        // For backwards compatibility, the default name includes the operations
        // collection id, however overriding users must ensure the name binding
        // is the parent resource, without the operations collection id.
        list (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The standard list filter.
            filter?: string,
            // The standard list page token.
            pageToken?: string,
            // The name of the operation's parent resource.
            name: string,
            // The standard list page size.
            pageSize?: number,
        }) : gapi.client.Request<GoogleLongrunningListOperationsResponse>;        
        
    }
    
    
    interface ProjectsResource {
        // Allocates IDs for the given keys, which is useful for referencing an entity
        // before it is inserted.
        allocateIds (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<AllocateIdsResponse>;        
        
        // Commits a transaction, optionally creating, deleting or modifying some
        // entities.
        commit (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<CommitResponse>;        
        
        // Begins a new transaction.
        beginTransaction (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<BeginTransactionResponse>;        
        
        // Queries for entities.
        runQuery (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<RunQueryResponse>;        
        
        // Rolls back a transaction.
        rollback (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<RollbackResponse>;        
        
        // Looks up entities by key.
        lookup (request: {        
            // Upload protocol for media (e.g. "raw", "multipart").
            upload_protocol?: string,
            // Returns response with indentations and line breaks.
            prettyPrint?: boolean,
            // Selector specifying which fields to include in a partial response.
            fields?: string,
            // Legacy upload protocol for media (e.g. "media", "multipart").
            uploadType?: string,
            // JSONP
            callback?: string,
            // V1 error format.
            "$.xgafv"?: string,
            // Data format for response.
            alt?: string,
            // API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
            key?: string,
            // OAuth access token.
            access_token?: string,
            // Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
            quotaUser?: string,
            // Pretty-print response.
            pp?: boolean,
            // OAuth 2.0 token for the current user.
            oauth_token?: string,
            // OAuth bearer token.
            bearer_token?: string,
            // The ID of the project against which to make the request.
            projectId: string,
        }) : gapi.client.Request<LookupResponse>;        
        
        operations: OperationsResource,
    }
    
}

declare namespace gapi.client {
    // Load Google Cloud Datastore API v1
    export function load (name: "datastore", version: "v1") : PromiseLike<void>;    
    export function load (name: "datastore", version: "v1", callback: () => any) : void;    
    
    const projects: gapi.client.datastore.ProjectsResource; 
    
}
