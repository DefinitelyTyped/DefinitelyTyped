// Type definitions for net-snmp
// Project: https://github.com/markabrahams/node-net-snmp
// Definitions by: Ori Erel <https://github.com/0rierel>
// Definitions: https://github.com/DefinitelyTyped/net-snmp
/** Declaration file generated by dts-gen */

export class Session {
    constructor(target: any, authenticator: any, options: any);

    cancelRequests(error: any): void;

    close(): any;

    get(oids: any, responseCb: any): any;

    getBulk(...args: any[]): any;

    getNext(oids: any, responseCb: any): any;

    inform(...args: any[]): any;

    onClose(): void;

    onError(error: any): void;

    onMsg(buffer: any): void;

    onProxyResponse(req: any, message: any): void;

    onSimpleGetResponse(req: any, message: any): void;

    registerRequest(req: any): void;

    send(req: any, noWait: any): any;

    sendV3Discovery(originalPdu: any, feedCb: any, responseCb: any, options: any): void;

    sendV3Req(pdu: any, feedCb: any, responseCb: any, options: any, port: any, allowReport: any): void;

    set(varbinds: any, responseCb: any): any;

    simpleGet(pduClass: any, feedCb: any, varbinds: any, responseCb: any, options: any): void;

    subtree(...args: any[]): any;

    table(...args: any[]): any;

    tableColumns(...args: any[]): any;

    trap(...args: any[]): any;

    unregisterRequest(id: any): any;

    userSecurityModelError(req: any, oid: any): void;

    walk(...args: any[]): any;

    static create(target: any, community: any, options: any): any;

    static createV3(target: string, user: User, options?: SessionOptionsV3): Session;

}

// Supporting types
export interface User {
    name: string;
    level: typeof SecurityLevel;
    authProtocol?: typeof AuthProtocols;
    authKey?: string;
    privProtocol?: typeof PrivProtocols;
    privKey?: string;
}

export interface SessionOptionsV3 {
    version?: 3;  
    transport?: 'udp4' | 'udp6';
    port?: number;
    trapPort?: number;
    retries?: number;
    timeout?: number;
    backoff?: number;
    sourceAddress?: string;
    sourcePort?: number;
    idBitsSize?: number;
    context?: string;
    backwardsGetNexts?: boolean;
    reportOidMismatchErrors?: boolean;
    engineID?: string | Buffer;
    debug?: boolean;
    dgramModule?: any; // Could be more specific if needed
}

export const AccessControlModelType: {
    "0": string;
    "1": string;
    None: number;
    Simple: number;
};

export const AccessLevel: {
    "0": string;
    "1": string;
    "2": string;
    None: number;
    ReadOnly: number;
    ReadWrite: number;
};

export const AgentXPduType: {
    "1": string;
    "10": string;
    "11": string;
    "12": string;
    "13": string;
    "14": string;
    "15": string;
    "16": string;
    "17": string;
    "18": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    AddAgentCaps: number;
    CleanupSet: number;
    Close: number;
    CommitSet: number;
    Get: number;
    GetBulk: number;
    GetNext: number;
    IndexAllocate: number;
    IndexDeallocate: number;
    Notify: number;
    Open: number;
    Ping: number;
    Register: number;
    RemoveAgentCaps: number;
    Response: number;
    TestSet: number;
    UndoSet: number;
    Unregister: number;
};

export const AuthProtocols: {
    "1": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    md5: number;
    none: number;
    sha: number;
    sha224: number;
    sha256: number;
    sha384: number;
    sha512: number;
};

export const ErrorStatus: {
    "0": string;
    "1": string;
    "10": string;
    "11": string;
    "12": string;
    "13": string;
    "14": string;
    "15": string;
    "16": string;
    "17": string;
    "18": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    AuthorizationError: number;
    BadValue: number;
    CommitFailed: number;
    GeneralError: number;
    InconsistentName: number;
    InconsistentValue: number;
    NoAccess: number;
    NoCreation: number;
    NoError: number;
    NoSuchName: number;
    NotWritable: number;
    ReadOnly: number;
    ResourceUnavailable: number;
    TooBig: number;
    UndoFailed: number;
    WrongEncoding: number;
    WrongLength: number;
    WrongType: number;
    WrongValue: number;
};

export const MaxAccess: {
    "0": string;
    "1": string;
    "2": string;
    "3": string;
    "4": string;
    "accessible-for-notify": number;
    "not-accessible": number;
    "read-create": number;
    "read-only": number;
    "read-write": number;
};

export const MibProviderType: {
    "1": string;
    "2": string;
    Scalar: number;
    Table: number;
};

export const ObjectType: {
    "1": string;
    "128": string;
    "129": string;
    "130": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    "64": string;
    "65": string;
    "66": string;
    "67": string;
    "68": string;
    "70": string;
    BitString: number;
    Boolean: number;
    Counter: number;
    Counter32: number;
    Counter64: number;
    EndOfMibView: number;
    Gauge: number;
    Gauge32: number;
    INTEGER: number;
    Integer: number;
    Integer32: number;
    IpAddress: number;
    NoSuchInstance: number;
    NoSuchObject: number;
    Null: number;
    "OBJECT IDENTIFIER": number;
    "OCTET STRING": number;
    OID: number;
    OctetString: number;
    Opaque: number;
    TimeTicks: number;
    Unsigned32: number;
};

export const OidFormat: {
    module: string;
    oid: string;
    path: string;
};

export const PduType: {
    "160": string;
    "161": string;
    "162": string;
    "163": string;
    "164": string;
    "165": string;
    "166": string;
    "167": string;
    "168": string;
    GetBulkRequest: number;
    GetNextRequest: number;
    GetRequest: number;
    GetResponse: number;
    InformRequest: number;
    Report: number;
    SetRequest: number;
    Trap: number;
    TrapV2: number;
};

export const PrivProtocols: {
    "1": string;
    "2": string;
    "4": string;
    "6": string;
    "8": string;
    aes: number;
    aes256b: number;
    aes256r: number;
    des: number;
    none: number;
};

export const ResponseInvalidCode: {
    "1": string;
    "10": string;
    "11": string;
    "12": string;
    "13": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    "8": string;
    "9": string;
    EAuthFailure: number;
    ECommunityNoMatch: number;
    ECouldNotDecrypt: number;
    EIp4AddressSize: number;
    EOutOfOrder: number;
    EReqResOidNoMatch: number;
    EResponseNotHandled: number;
    EUnexpectedReport: number;
    EUnexpectedResponse: number;
    EUnknownObjectType: number;
    EUnknownPduType: number;
    EVersionNoMatch: number;
};

export const RowStatus: {
    "1": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    active: number;
    createAndGo: number;
    createAndWait: number;
    destroy: number;
    notInService: number;
    notReady: number;
};

export const SecurityLevel: {
    "1": string;
    "2": string;
    "3": string;
    authNoPriv: number;
    authPriv: number;
    noAuthNoPriv: number;
};

export const TrapType: {
    "0": string;
    "1": string;
    "2": string;
    "3": string;
    "4": string;
    "5": string;
    "6": string;
    AuthenticationFailure: number;
    ColdStart: number;
    EgpNeighborLoss: number;
    EnterpriseSpecific: number;
    LinkDown: number;
    LinkUp: number;
    WarmStart: number;
};

export const Version: {
    "1": number;
    "2c": number;
    "3": number;
};

export const Version1: number;

export const Version2c: number;

export const Version3: number;

export function RequestFailedError(message: any, status: any): void;

export function RequestInvalidError(message: any): void;

export function RequestTimedOutError(message: any): void;

export function ResponseInvalidError(message: any, code: any, info: any): void;

export function createAgent(options: any, callback: any, mib: any): any;

export function createMib(options: any): any;

export function createModuleStore(options: any): any;

export function createReceiver(options: any, callback: any): any;

export function createSession(target: any, community: any, options: any): any;

export function createSubagent(options: any): any;

declare function createV3Session(target: string, user: User, options?: SessionOptionsV3): Session;

declare namespace createV3Session {
    const prototype: {};
}

export { createV3Session };
export function isVarbindError(varbind: any): any;

export function varbindError(varbind: any): any;

export namespace Authentication {
    const HMAC_BUFFER_SIZE: number;

    const algorithms: {
        "2": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
        "3": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
        "4": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
        "5": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
        "6": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
        "7": {
            AUTHENTICATION_CODE_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
        };
    };

    const authToKeyCache: {
    };

    function calculateDigest(messageBuffer: any, authProtocol: any, authPassword: any, engineID: any): any;

    function computeCacheKey(authProtocol: any, authPasswordString: any, engineID: any): any;

    function getParametersLength(authProtocol: any): any;

    function isAuthentic(messageBuffer: any, authProtocol: any, authPassword: any, engineID: any, digestInMessage: any): any;

    function passwordToKey(authProtocol: any, authPasswordString: any, engineID: any): any;

    function writeParameters(messageBuffer: any, authProtocol: any, authPassword: any, engineID: any, digestInMessage: any): void;

}

export namespace Encryption {
    const algorithms: {
        "2": {
            BLOCK_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
            decryptPdu: any;
            encryptPdu: any;
            localizationAlgorithm: any;
        };
        "4": {
            BLOCK_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
            decryptPdu: any;
            encryptPdu: any;
            localizationAlgorithm: any;
        };
        "6": {
            BLOCK_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
            decryptPdu: any;
            encryptPdu: any;
            localizationAlgorithm: any;
        };
        "8": {
            BLOCK_LENGTH: number;
            CRYPTO_ALGORITHM: string;
            KEY_LENGTH: number;
            decryptPdu: any;
            encryptPdu: any;
            localizationAlgorithm: any;
        };
    };

    function debugDecrypt(decryptionKey: any, iv: any, encryptedPdu: any, plainPdu: any): void;

    function debugEncrypt(encryptionKey: any, iv: any, plainPdu: any, encryptedPdu: any): void;

    function decryptPdu(privProtocol: any, encryptedPdu: any, privParameters: any, privPassword: any, authProtocol: any, engine: any): any;

    function decryptPduAes(encryptedPdu: any, privProtocol: any, privParameters: any, privPassword: any, authProtocol: any, engine: any): any;

    function decryptPduDes(encryptedPdu: any, privProtocol: any, privParameters: any, privPassword: any, authProtocol: any, engine: any): any;

    function encryptPdu(privProtocol: any, scopedPdu: any, privPassword: any, authProtocol: any, engine: any): any;

    function encryptPduAes(scopedPdu: any, privProtocol: any, privPassword: any, authProtocol: any, engine: any): any;

    function encryptPduDes(scopedPdu: any, privProtocol: any, privPassword: any, authProtocol: any, engine: any): any;

    function generateIvAes(aes: any, engineBoots: any, engineTime: any, salt: any): any;

    function generateLocalizedKey(algorithm: any, authProtocol: any, privPassword: any, engineID: any): any;

    function generateLocalizedKeyBlumenthal(algorithm: any, authProtocol: any, privPassword: any, engineID: any): any;

    function generateLocalizedKeyReeder(algorithm: any, authProtocol: any, privPassword: any, engineID: any): any;

}

export namespace ObjectParser {
    function readInt32(buffer: any): any;

    function readUint32(buffer: any): any;

    function readVarbindValue(buffer: any, type: any): any;

}

export namespace ObjectTypeUtil {
    function castSetValue(type: any, value: any, constraints: any): any;

    function doesIntegerMeetConstraints(value: any, constraints: any): any;

    function doesStringMeetConstraints(value: any, constraints: any): any;

    function getEnumerationNumberFromName(enumeration: any, name: any): any;

    function isValid(type: any, value: any, constraints: any): any;

}

