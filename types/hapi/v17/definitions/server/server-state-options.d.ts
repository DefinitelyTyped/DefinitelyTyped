import {Request} from "../request/request";

/**
 * Optional cookie settings
 * [See docs](https://github.com/hapijs/hapi/blob/master/API.md#-serverstatename-options)
 */
export interface ServerStateCookieOptions {
    /** time-to-live in milliseconds. Defaults to null (session time-life - cookies are deleted when the browser is closed). */
    ttl?: number | null;
    /** sets the 'Secure' flag. Defaults to true. */
    isSecure?: boolean;
    /** sets the 'HttpOnly' flag. Defaults to true. */
    isHttpOnly?: boolean;
    /**
     * sets the 'SameSite' flag. The value must be one of:
     *  * false - no flag.
     *  * 'Strict' - sets the value to 'Strict' (this is the default value).
     *  * 'Lax' - sets the value to 'Lax'.
     */
    isSameSite?: false | 'Strict' | 'Lax';
    /** the path scope. Defaults to null (no path). */
    path?: string | null;
    /** the domain scope. Defaults to null (no domain). */
    domain?: string | null;
    /**
     * if present and the cookie was not received from the client or explicitly set by the route handler, the
     * cookie is automatically added to the response with the provided value. The value can be
     * a function with signature async function(request) where:
     */
    autoValue?(request: Request): void;
    /**
     * encoding performs on the provided value before serialization. Options are:
     *  * 'none' - no encoding. When used, the cookie value must be a string. This is the default value.
     *  * 'base64' - string value is encoded using Base64.
     *  * 'base64json' - object value is JSON-stringified then encoded using Base64.
     *  * 'form' - object value is encoded using the x-www-form-urlencoded method.
     *  * 'iron' - Encrypts and sign the value using iron.
     */
    encoding?: 'none' | 'base64' | 'base64json' | 'form' | 'iron';
    /**
     * an object used to calculate an HMAC for cookie integrity validation. This does not provide privacy, only a mean to verify that the cookie value was generated by the server. Redundant when 'iron' encoding is used. Options are:
     *  * integrity - algorithm options. Defaults to require('iron').defaults.integrity.
     *  * password - password used for HMAC key generation (must be at least 32 characters long).
     */
    sign?: {
        integrity?: object;  // TODO make iron definitions and getting typing from iron. Needs review!
        password: string;
    };
    /** password used for 'iron' encoding (must be at least 32 characters long). */
    password?: string;
    /** options for 'iron' encoding. Defaults to require('iron').defaults. */
    iron?: object;  // TODO make iron definitions and getting typing from iron. Needs review!
    /** if true, errors are ignored and treated as missing cookies. */
    ignoreErrors?: boolean;
    /** if true, automatically instruct the client to remove invalid cookies. Defaults to false. */
    clearInvalid?: boolean;
    /** if false, allows any cookie value including values in violation of RFC 6265. Defaults to true. */
    strictHeader?: boolean;
    /** used by proxy plugins (e.g. h2o2). */
    passThrough?: any;
}
