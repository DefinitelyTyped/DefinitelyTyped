declare module "jest-cli" {
  type Argv = string[];
  type Path = string;
  type AggregatedResultWithoutCoverage = {
    numFailedTests: number,
    numFailedTestSuites: number,
    numPassedTests: number,
    numPassedTestSuites: number,
    numPendingTests: number,
    numTodoTests: number,
    numPendingTestSuites: number,
    numRuntimeErrorTestSuites: number,
    numTotalTests: number,
    numTotalTestSuites: number,
    openHandles: Array<Error>,
    snapshot: SnapshotSummary,
    startTime: number,
    success: boolean,
    testResults: Array<TestResult>,
    wasInterrupted: boolean,
  }
  type CoverageMap = {
    merge: (data: Object) => void,
    getCoverageSummary: () => FileCoverage,
    data: RawCoverage,
    addFileCoverage: (fileCoverage: RawFileCoverage) => void,
    files: () => Array<string>,
    fileCoverageFor: (file: string) => FileCoverage,
  }
  type AggregatedResult = AggregatedResultWithoutCoverage & {
    coverageMap?: ?CoverageMap,
  };
  type GlobalConfig = {
    bail: boolean,
    changedSince: string,
    changedFilesWithAncestor: boolean,
    collectCoverage: boolean,
    collectCoverageFrom: Array<Glob>,
    collectCoverageOnlyFrom: ?{[key: string]: boolean},
    coverageDirectory: string,
    coveragePathIgnorePatterns?: Array<string>,
    coverageReporters: Array<string>,
    coverageThreshold: {global: {[key: string]: number}},
    detectLeaks: boolean,
    detectOpenHandles: boolean,
    enabledTestsMap: ?{[key: string]: {[key: string]: boolean}},
    expand: boolean,
    filter: ?Path,
    findRelatedTests: boolean,
    forceExit: boolean,
    json: boolean,
    globalSetup: ?string,
    globalTeardown: ?string,
    lastCommit: boolean,
    logHeapUsage: boolean,
    listTests: boolean,
    maxWorkers: number,
    noStackTrace: boolean,
    nonFlagArgs: Array<string>,
    noSCM: ?boolean,
    notify: boolean,
    notifyMode: string,
    outputFile: ?Path,
    onlyChanged: boolean,
    onlyFailures: boolean,
    passWithNoTests: boolean,
    projects: Array<Glob>,
    replname: ?string,
    reporters: Array<string | ReporterConfig>,
    runTestsByPath: boolean,
    rootDir: Path,
    silent: boolean,
    skipFilter: boolean,
    errorOnDeprecated: boolean,
    testFailureExitCode: number,
    testNamePattern: string,
    testPathPattern: string,
    testResultsProcessor: ?string,
    updateSnapshot: SnapshotUpdateState,
    useStderr: boolean,
    verbose: ?boolean,
    watch: boolean,
    watchAll: boolean,
    watchman: boolean,
    watchPlugins: ?Array<{path: string, config: Object}>,
  };
  function run(maybeArgv?: Argv, project?: Path): Promise<void>;
  function runCLI(
    argv: Argv,
    projects: Path[]
  ): Promise<{ results: AggregatedResult; globalConfig: GlobalConfig }>;
}
