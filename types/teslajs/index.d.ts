// Type definitions for teslajs 4.7
// Project: https://github.com/mseminatore/TeslaJS#readme
// Definitions by: Felipe Castillo <https://github.com/fcastilloec>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

export interface Vehicle {
    id: string;
    vehicleID: number;
    [key: string]: string | number | boolean | null;
}
export interface TokenResponse {
    response: object;
    body: object;
    authToken: string;
    refreshToken: string;
}
export type Callback = (error: Error, data: any) => any;
export interface OptionsType {
    authToken: string;
    vehicleID: string;
    carIndex?: number;
}
export interface Result {
    reason: string;
    result: boolean;
}

export const streamingColumns: string[];
export const streamingPortal: string;
export const portal: string;

export const API_LOG_ALWAYS: number;
export const API_ERR_LEVEL: number;
export const API_CALL_LEVEL: number;
export const API_RETURN_LEVEL: number;
export const API_BODY_LEVEL: number;
export const API_REQUEST_LEVEL: number;
export const API_RESPONSE_LEVEL: number;
export const API_LOG_ALL: number;
export const CHARGE_STORAGE: number;
export const CHARGE_DAILY: number;
export const CHARGE_STANDARD: number;
export const CHARGE_RANGE: number;
export const SUNROOF_VENT: string;
export const SUNROOF_CLOSED: string;
export const MIN_TEMP: number;
export const MAX_TEMP: number;
export const FRUNK: string;
export const TRUNK: string;

export function setLogLevel(level: number): void;
export function getLogLevel(): number;
export function setPortalBaseURI(uri: string): void;
export function getPortalBaseURI(): string;
export function setStreamingBaseURI(uri: string): void;
export function getStreamingBaseURI(): string;
export function getModel(vehicle: Vehicle): string;
export function vinDecode(vehicle: Vehicle): object;
export function getPaintColor(vehicle: Vehicle): string;
export function getVin(vehicle: Vehicle): string;
export function getShortVin(vehicle: Vehicle): string;
export function login(username: string, password: string, callback: Callback): void;
export function loginAsync(username: string, password: string): Promise<TokenResponse>;
export function refreshToken(refresh_token: string, callback: Callback): void;
export function refreshTokenAsync(refresh_token: string): Promise<TokenResponse>;
export function logout(authToken: string, callback: Callback): void;
export function logoutAsync(authToken: string): Promise<void>;
export function vehicle(options: OptionsType, callback: Callback): Vehicle;
export function vehicleAsync(options: OptionsType): Promise<Vehicle>;
export function vehicles(options: OptionsType, callback: Callback): void;
export function vehiclesAsync(options: OptionsType): Promise<Array<{[key: string]: string | number | boolean | null}>>;
export function get_command(options: OptionsType, command: string, callback: Callback): void;
export function get_commandAsync(options: OptionsType, command: string): Promise<any>;
export function post_command(options: OptionsType, command: string, body: object, callback: Callback): void;
export function post_commandAsync(options: OptionsType, command: string, body: object): Promise<any>;
export function vehicleData(options: OptionsType, callback: Callback): void;
export function vehicleDataAsync(options: OptionsType): Promise<object>;
export function vehicleConfig(options: OptionsType, callback: Callback): void;
export function vehicleConfigAsync(options: OptionsType): Promise<object>;
export function vehicleState(options: OptionsType, callback: Callback): void;
export function vehicleStateAsync(options: OptionsType): Promise<object>;
export function climateState(options: OptionsType, callback: Callback): void;
export function climateStateAsync(options: OptionsType): Promise<object>;
export function nearbyChargers(options: OptionsType, callback: Callback): void;
export function nearbyChargersAsync(options: OptionsType): Promise<object>;
export function driveState(options: OptionsType, callback: Callback): void;
export function driveStateAsync(options: OptionsType): Promise<object>;
export function chargeState(options: OptionsType, callback: Callback): void;
export function chargeStateAsync(options: OptionsType): Promise<object>;
export function guiSettings(options: OptionsType, callback: Callback): void;
export function guiSettingsAsync(options: OptionsType): Promise<object>;
export function mobileEnabled(options: OptionsType, callback: Callback): void;
export function mobileEnabledAsync(options: OptionsType): Promise<{ response: boolean }>;
export function honkHorn(options: OptionsType, callback: Callback): void;
export function honkHornAsync(options: OptionsType): Promise<Result>;
export function flashLights(options: OptionsType, callback: Callback): void;
export function flashLightsAsync(options: OptionsType): Promise<Result>;
export function startCharge(options: OptionsType, callback: Callback): void;
export function startChargeAsync(options: OptionsType): Promise<Result>;
export function stopCharge(options: OptionsType, callback: Callback): void;
export function stopChargeAsync(options: OptionsType): Promise<Result>;
export function openChargePort(options: OptionsType, callback: Callback): void;
export function openChargePortAsync(options: OptionsType): Promise<Result>;
export function closeChargePort(options: OptionsType, callback: Callback): void;
export function closeChargePortAsync(options: OptionsType): Promise<Result>;
export function scheduleSoftwareUpdate(options: OptionsType, offset: number, callback: any): any;
export function scheduleSoftwareUpdateAsync(options: OptionsType): Promise<Result>;
export function cancelSoftwareUpdate(options: OptionsType, callback: any): any;
export function cancelSoftwareUpdateAsync(options: OptionsType): Promise<Result>;
export function navigationRequest(options: OptionsType, subject: string, text: string, locale: string, callback: any): any;
export function navigationRequestAsync(options: OptionsType, subject: string, text: string, locale: string): Promise<Result>;
export function mediaTogglePlayback(options: OptionsType, callback: any): any;
export function mediaTogglePlaybackAsync(options: OptionsType): Promise<Result>;
export function mediaPlayNext(options: OptionsType, callback: any): any;
export function mediaPlayNextAsync(options: OptionsType): Promise<Result>;
export function mediaPlayPrevious(options: OptionsType, callback: any): any;
export function mediaPlayPreviousAsync(options: OptionsType): Promise<Result>;
export function mediaPlayNextFavorite(options: OptionsType, callback: any): any;
export function mediaPlayNextFavoriteAsync(options: OptionsType): Promise<Result>;
export function mediaPlayPreviousFavorite(options: OptionsType, callback: any): any;
export function mediaPlayPreviousFavoriteAsync(options: OptionsType): Promise<Result>;
export function mediaVolumeUp(options: OptionsType, callback: any): any;
export function mediaVolumeUpAsync(options: OptionsType): Promise<Result>;
export function mediaVolumeDown(options: OptionsType, callback: any): any;
export function mediaVolumeDownAsync(options: OptionsType): Promise<Result>;
export function speedLimitActivate(options: OptionsType, pin: number, callback: any): any;
export function speedLimitActivateAsync(options: OptionsType, pin: number): Promise<Result>;
export function speedLimitDeactivate(options: OptionsType, pin: number, callback: any): any;
export function speedLimitDeactivateAsync(options: OptionsType, pin: number): Promise<Result>;
export function speedLimitClearPin(options: OptionsType, pin: number, callback: any): any;
export function speedLimitClearPinAsync(options: OptionsType, pin: number): Promise<Result>;
export function speedLimitSetLimit(options: OptionsType, limit: number, callback: any): any;
export function speedLimitSetLimitAsync(options: OptionsType, limit: number): Promise<Result>;
export function setSentryMode(options: OptionsType, onoff: boolean, callback: any): any;
export function setSentryModeAsync(options: OptionsType, onoff: boolean): Promise<Result>;
export function seatHeater(options: OptionsType, heater: number, level: number, callback: any): any;
export function seatHeaterAsync(options: OptionsType, heater: number, level: number): Promise<Result>;
export function steeringHeater(options: OptionsType, level: number, callback: any): any;
export function steeringHeaterAsync(options: OptionsType, level: number): Promise<Result>;
export function maxDefrost(options: OptionsType, onoff: boolean, callback: any): any;
export function maxDefrostAsync(options: OptionsType, onoff: boolean): Promise<Result>;
export function windowControl(options: OptionsType, command: string, callback: any): any;
export function windowControlAsync(options: OptionsType, command: string): Promise<Result>;
export function setChargeLimit(options: OptionsType, amt: any, callback: Callback): void;
export function setChargeLimitAsync(options: OptionsType, amt: any): Promise<Result>;
export function chargeStandard(options: OptionsType, callback: Callback): void;
export function chargeStandardAsync(options: OptionsType): Promise<Result>;
export function chargeMaxRange(options: OptionsType, callback: Callback): void;
export function chargeMaxRangeAsync(options: OptionsType): Promise<Result>;
export function doorLock(options: OptionsType, callback: Callback): void;
export function doorLockAsync(options: OptionsType): Promise<Result>;
export function doorUnlock(options: OptionsType, callback: Callback): void;
export function doorUnlockAsync(options: OptionsType): Promise<Result>;
export function climateStart(options: OptionsType, callback: Callback): void;
export function climateStartAsync(options: OptionsType): Promise<Result>;
export function climateStop(options: OptionsType, callback: Callback): void;
export function climateStopAsync(options: OptionsType): Promise<Result>;
export function sunRoofControl(options: OptionsType, state: string, callback: Callback): void;
export function sunRoofControlAsync(options: OptionsType, state: string): Promise<Result>;
export function sunRoofMove(options: OptionsType, percent: any, callback: Callback): void;
export function sunRoofMoveAsync(options: OptionsType, percent: any): Promise<Result>;
export function setTemps(options: OptionsType, driver: number, pass: number, callback: Callback): void;
export function setTempsAsync(options: OptionsType, driver: number, pass: number): Promise<Result>;
export function remoteStart(options: OptionsType, password: string, callback: Callback): void;
export function remoteStartAsync(options: OptionsType, password: string): Promise<Result>;
export function openTrunk(options: OptionsType, which: string, callback: Callback): void;
export function openTrunkAsync(options: OptionsType, which: string): Promise<Result>;
export function wakeUp(options: OptionsType, callback: Callback): void;
export function wakeUpAsync(options: OptionsType): Promise<object>;
export function setValetMode(options: OptionsType, onoff: boolean, pin: any, callback: Callback): void;
export function setValetModeAsync(options: OptionsType, onoff: boolean, pin: any): Promise<Result>;
export function resetValetPin(options: OptionsType, callback: Callback): void;
export function resetValetPinAsync(options: OptionsType): Promise<Result>;
export function calendar(options: OptionsType, entry: any, callback: Callback): void;
export function calendarAsync(options: OptionsType, entry: any): Promise<Result>;
export function makeCalendarEntry(eventName: string, location: string, startTime: number, endTime: number, accountName: string, phoneName: string): object;
export function homelink(options: OptionsType, lat: number, long: number, token: string, callback: Callback): void;
export function homelinkAsync(options: OptionsType, lat: number, long: number, token: string): Promise<Result>;
export function startStreaming(options: any, callback: Callback, onDataCb: Callback): any;
