// Type definitions for d3-simple-slider 1.5
// Project: https://github.com/johnwalley/d3-simple-slider
// Definitions by: John Walley <https://github.com/johnwalley>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

import { Selection, TransitionLike } from 'd3-selection';

export as namespace d3;

/**
 * A helper type to alias elements which can serve as a domain for a slider.
 */
export type SliderDomain = number;

/**
 * A helper interface to which a scale passed into slider must conform (at a minimum)
 * for slider to use the scale without error.
 */
export interface SliderScale<Domain> {
    (x: Domain): number | undefined;
    domain(): Domain[];
    range(): number[];
    copy(): this;
    ticks?(count?: number): Domain[];
    tickFormat?(count?: number, specifier?: string): (d: number) => string;
}

/**
 * A helper type to alias elements which can serve as a container for a slider.
 */
export type SliderContainerElement = SVGSVGElement | SVGGElement;

/**
 * Interface defining a slider generator. The generic <Domain> is the type of the slider domain.
 */
export interface Slider<Domain> {
    /**
     * Render the slider to the given _context_, which may be either a [selection](https://github.com/d3/d3-selection) of SVG containers (either SVG or G elements)
     * or a corresponding [transition](https://github.com/d3/d3-transition).
     *
     * @param context A [selection](https://github.com/d3/d3-selection) of SVG containers (either SVG or G elements) or a corresponding [transition](https://github.com/d3/d3-transition).
     */
    (
        context:
            | Selection<SVGSVGElement, any, any, any>
            | Selection<SVGGElement, any, any, any>
            | TransitionLike<SVGSVGElement, any>
            | TransitionLike<SVGGElement, any>,
    ): void;

    /**
     * Gets the current domain underlying the slider.
     */
    domain(): [number, number];

    /**
     * Sets the domain and returns the slider.
     *
     * @param domain The domain to be used for slider generation.
     */
    domain(domain: [number, number]): this;

    ticks(): number[];

    /**
     * To generate twenty ticks:
     *
     * ```js
     * slider.ticks(20);
     * ```
     *
     * @param count Number of ticks that should be rendered.
     */
    ticks(count: number): this;

    /**
     * Returns the current tick values, which defaults to null.
     */
    tickValues(): Domain[] | null;

    /**
     * If a values array is specified, the specified values are used for ticks rather than using the sliders' automatic tick generator.
     * If values is null, clears any previously-set explicit tick values and reverts back to the sliders' tick generator.
     * If values is not specified, returns the current tick values, which defaults to null. For example, to generate ticks at specific values:
     *
     * ```js
     * slider.tickValues([1, 2, 3, 5, 8, 13, 21]);
     * ```
     *
     * @param values An array with values from the Domain of the scale underlying the slider.
     */
    tickValues(values: Domain[]): this;

    /**
     * Clears any previously-set explicit tick values and reverts back to the scale’s tick generator.
     *
     * @param values null
     */
    tickValues(values: null): this;

    /**
     * Returns the currently set tick format function, which defaults to null.
     */
    tickFormat(): ((domainValue: Domain, index: number) => string) | null;

    /**
     * Sets the tick format function and returns the s;lider.
     *
     * @param format A function mapping a value from the slider Domain to a formatted string
     * for display purposes. When invoked, the format function is also passed a second argument representing the zero-based index
     * of the tick label in the array of generated tick labels.
     */
    tickFormat(format: (domainValue: Domain, index: number) => string): this;

    /**
     * Reset the tick format function. A null format indicates that the scale’s
     * default formatter should be used, which is generated by calling scale.tickFormat.
     *
     * @param format null
     */
    tickFormat(format: null): this;

    /**
     * Returns the callback for the specified typenames, if any.
     * If multiple typenames are specified, the first matching callback is returned.
     *
     * @param types An event typename.
     * @param callback A callback.
     */
    on(typenames: string): (val: Domain) => void | undefined;

    /**
     * Removes the callback for the specified typenames.
     * To remove all callbacks for a given name `foo`, say `slider.on(".foo", null).`
     *
     * @param types An event typename.
     */
    on(typenames: string, callback: null): this;

    /**
     * Adds the callback for the specified typenames.
     * The callback is registered for the specified (fully-qualified) typenames.
     * If a callback was already registered for the given typenames,
     * the existing callback is removed before the new callback is added.
     *
     * @param types An event typename.
     * @param callback A callback.
     */
    on(typenames: string, callback: (val: Domain) => void): this;
}

/**
 * Constructs a new horizontal slider generator. Ticks on top.
 *
 * @param scale If scale is specified, the slider will use the scale to render the slider.
 * This must be either scaleLinear or scaleTime. The domain will be used to calculate minimum and maximum values.
 * The range will be used to calculate the width or height of the slider. This means you do not need to set these if passing a scale.
 */
export function sliderTop<Domain extends SliderDomain>(scale: SliderScale<Domain>): Slider<Domain>;

/**
 * Constructs a new vertical slider generator. Ticks to the right.
 *
 * @param scale If scale is specified, the slider will use the scale to render the slider.
 * This must be either scaleLinear or scaleTime. The domain will be used to calculate minimum and maximum values.
 * The range will be used to calculate the width or height of the slider. This means you do not need to set these if passing a scale.
 */
export function sliderRight<Domain extends SliderDomain>(scale: SliderScale<Domain>): Slider<Domain>;

/**
 * Constructs a new horizontal slider generator. Ticks on the bottom.
 *
 * @param scale If scale is specified, the slider will use the scale to render the slider.
 * This must be either scaleLinear or scaleTime. The domain will be used to calculate minimum and maximum values.
 * The range will be used to calculate the width or height of the slider. This means you do not need to set these if passing a scale.
 */
export function sliderBottom<Domain extends SliderDomain>(scale: SliderScale<Domain>): Slider<Domain>;

/**
 * Constructs a new vertical slider generator. Ticks to the left.
 *
 * @param scale If scale is specified, the slider will use the scale to render the slider.
 * This must be either scaleLinear or scaleTime. The domain will be used to calculate minimum and maximum values.
 * The range will be used to calculate the width or height of the slider. This means you do not need to set these if passing a scale.
 */
export function sliderLeft<Domain extends SliderDomain>(scale: SliderScale<Domain>): Slider<Domain>;
