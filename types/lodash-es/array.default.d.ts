import chunk from "./chunk";
import compact from "./compact";
import concat from "./concat";
import difference from "./difference";
import differenceBy from "./differenceBy";
import differenceWith from "./differenceWith";
import drop from "./drop";
import dropRight from "./dropRight";
import dropRightWhile from "./dropRightWhile";
import dropWhile from "./dropWhile";
import fill from "./fill";
import findIndex from "./findIndex";
import findLastIndex from "./findLastIndex";
import first from "./first";
import flatten from "./flatten";
import flattenDeep from "./flattenDeep";
import flattenDepth from "./flattenDepth";
import fromPairs from "./fromPairs";
import head from "./head";
import indexOf from "./indexOf";
import initial from "./initial";
import intersection from "./intersection";
import intersectionBy from "./intersectionBy";
import intersectionWith from "./intersectionWith";
import join from "./join";
import last from "./last";
import lastIndexOf from "./lastIndexOf";
import nth from "./nth";
import pull from "./pull";
import pullAll from "./pullAll";
import pullAllBy from "./pullAllBy";
import pullAllWith from "./pullAllWith";
import pullAt from "./pullAt";
import remove from "./remove";
import reverse from "./reverse";
import slice from "./slice";
import sortedIndex from "./sortedIndex";
import sortedIndexBy from "./sortedIndexBy";
import sortedIndexOf from "./sortedIndexOf";
import sortedLastIndex from "./sortedLastIndex";
import sortedLastIndexBy from "./sortedLastIndexBy";
import sortedLastIndexOf from "./sortedLastIndexOf";
import sortedUniq from "./sortedUniq";
import sortedUniqBy from "./sortedUniqBy";
import tail from "./tail";
import take from "./take";
import takeRight from "./takeRight";
import takeRightWhile from "./takeRightWhile";
import takeWhile from "./takeWhile";
import union from "./union";
import unionBy from "./unionBy";
import unionWith from "./unionWith";
import uniq from "./uniq";
import uniqBy from "./uniqBy";
import uniqWith from "./uniqWith";
import unzip from "./unzip";
import unzipWith from "./unzipWith";
import without from "./without";
import xor from "./xor";
import xorBy from "./xorBy";
import xorWith from "./xorWith";
import zip from "./zip";
import zipObject from "./zipObject";
import zipObjectDeep from "./zipObjectDeep";
import zipWith from "./zipWith";

declare const defaultExport: {
  chunk: typeof chunk;
  compact: typeof compact;
  concat: typeof concat;
  difference: typeof difference;
  differenceBy: typeof differenceBy;
  differenceWith: typeof differenceWith;
  drop: typeof drop;
  dropRight: typeof dropRight;
  dropRightWhile: typeof dropRightWhile;
  dropWhile: typeof dropWhile;
  fill: typeof fill;
  findIndex: typeof findIndex;
  findLastIndex: typeof findLastIndex;
  first: typeof first;
  flatten: typeof flatten;
  flattenDeep: typeof flattenDeep;
  flattenDepth: typeof flattenDepth;
  fromPairs: typeof fromPairs;
  head: typeof head;
  indexOf: typeof indexOf;
  initial: typeof initial;
  intersection: typeof intersection;
  intersectionBy: typeof intersectionBy;
  intersectionWith: typeof intersectionWith;
  join: typeof join;
  last: typeof last;
  lastIndexOf: typeof lastIndexOf;
  nth: typeof nth;
  pull: typeof pull;
  pullAll: typeof pullAll;
  pullAllBy: typeof pullAllBy;
  pullAllWith: typeof pullAllWith;
  pullAt: typeof pullAt;
  remove: typeof remove;
  reverse: typeof reverse;
  slice: typeof slice;
  sortedIndex: typeof sortedIndex;
  sortedIndexBy: typeof sortedIndexBy;
  sortedIndexOf: typeof sortedIndexOf;
  sortedLastIndex: typeof sortedLastIndex;
  sortedLastIndexBy: typeof sortedLastIndexBy;
  sortedLastIndexOf: typeof sortedLastIndexOf;
  sortedUniq: typeof sortedUniq;
  sortedUniqBy: typeof sortedUniqBy;
  tail: typeof tail;
  take: typeof take;
  takeRight: typeof takeRight;
  takeRightWhile: typeof takeRightWhile;
  takeWhile: typeof takeWhile;
  union: typeof union;
  unionBy: typeof unionBy;
  unionWith: typeof unionWith;
  uniq: typeof uniq;
  uniqBy: typeof uniqBy;
  uniqWith: typeof uniqWith;
  unzip: typeof unzip;
  unzipWith: typeof unzipWith;
  without: typeof without;
  xor: typeof xor;
  xorBy: typeof xorBy;
  xorWith: typeof xorWith;
  zip: typeof zip;
  zipObject: typeof zipObject;
  zipObjectDeep: typeof zipObjectDeep;
  zipWith: typeof zipWith;
};
export default defaultExport;
