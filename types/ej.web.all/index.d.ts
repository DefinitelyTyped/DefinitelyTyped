// Type definitions for non-npm package ej.web.all 19.1
// Project: http://help.syncfusion.com/js/typescript
// Definitions by: Syncfusion <https://github.com/syncfusion>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

/// <reference types="jquery" />

/*!
*  filename: ej.web.all.d.ts
*  version : 19.1.0.63
*  Copyright Syncfusion Inc. 2001 - 2021. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws.
*/
declare namespace ej {
    const dataUtil: dataUtil;
    function isMobile(): boolean;
    function isIOS(): boolean;
    function isAndroid(): boolean;
    function isFlat(): boolean;
    function isWindows(): boolean;
    function isCssCalc(): boolean;
    function getCurrentPage(): JQuery;
    function isLowerResolution(): boolean;
    function browserInfo(): browserInfoOptions;
    function isTouchDevice(): boolean;
    function addPrefix(style: string): string;
    function animationEndEvent(): string;
    function blockDefaultActions(e: any): void;
    function buildTag(tag: string, innerHtml?: string, styles?: any, attrs?: any): JQuery;
    function cancelEvent(): string;
    function copyObject(): string;
    function createObject(nameSpace: string, value: any, initIn: any): JQuery;
    function createObject(element: any, eventEmitter: any, model: any): any;
    function setCulture(culture: string): void;
    function getObject(element: string, model: any): any;
    function getObject(nameSpace: string, fromdata?: any): any;
    function defineClass(className: string, constructor: any, proto: any, replace: boolean): any;
    function destroyWidgets(element: any): void;
    function endEvent(): string;
    function event(type: string, data: any, eventProp: any): any;
    function getAndroidVersion(): any;
    function getAttrVal(ele: any, val: string, option: any): any;
    function getBooleanVal(ele: any, val: string, option: any): any;
    function getClearString(): string;
    function getDimension(element: any, method: string): any;
    function getFontString(fontObj: any): string;
    function getFontStyle(style: string): string;
    function getMaxZindex(): number;
    function getNameSpace(className: string): string;
    function getOffset(ele: string): any;
    function getRenderMode(): string;
    function getScrollableParents(element: any): JQuery;
    function getTheme(): string;
    function getZindexPartial(element: any, popupEle: string): number;
    function hasRenderMode(element: string): void;
    function hasStyle(prop: string): boolean;
    function hasTheme(element: string): string;
    function hexFromRGB(color: string): string;
    function ieClearRemover(element: string): void;
    function isAndroidWebView(): string;
    function isDevice(): boolean;
    function isIOS7(): boolean;
    function isIOSWebView(): boolean;
    function isLowerAndroid(): boolean;
    function isNullOrUndefined(value: any): boolean;
    function isPlainObject(): JQuery;
    function isPortrait(): any;
    function isTablet(): boolean;
    function isWindowsWebView(): string;
    function listenEvents(selectors: any, eventTypes: any, handlers: any, remove?: any, pluginObj?: any, disableMouse?: boolean): void;
    function listenTouchEvent(selectors: any, eventTypes: any, handlers: any, remove?: any, pluginObj?: any, disableMouse?: boolean): void;
    function logBase(val: string, base: string): number;
    function measureText(text: string, maxwidth: number, font: string): string;
    function moveEvent(): string;
    function print(element: string, printWindow: any): void;
    function proxy(fn: any, context?: string, arg?: string): any;
    function round(value: string, div: string, up: string): any;
    function sendAjaxRequest(ajaxOptions: any): void;
    function setCaretToPos(nput: string, pos1: string, pos2: string): void;
    function setRenderMode(element: string): void;
    function setTheme(): any;
    function startEvent(): string;
    function tapEvent(): string;
    function tapHoldEvent(): string;
    function throwError(): any;
    function transitionEndEvent(): any;
    function userAgent(): boolean;
    function widget(pluginName: string, className: string, proto: any): any;
    function avg(json: any, filedName: string): any;
    function getGuid(prefix: string): number;
    function group(jsonArray: any, field: string, agg: string, level: number, groupDs: string): any;
    function isJSON(jsonData: string): string;
    function max(jsonArray: any, fieldName?: string, comparer?: string): any;
    function min(jsonArray: any, fieldName: string, comparer: string): any;
    function merge(first: string, second: string): any;
    function mergeshort(jsonArray: any, fieldName: string, comparer: string): any;
    function parseJSON(jsonText: string): string;
    function parseTable(table: number, headerOption: string, headerRowIndex: string): any;
    function select(jsonArray: any, fields: string): any;
    function setTransition(): boolean;
    function sum(json: string, fieldName: string): string;
    function swap(array: any, x: string, y: string): any;
    const cssUA: string;
    const serverTimezoneOffset: number;
    const transform: string;
    const transformOrigin: string;
    const transformStyle: string;
    const transition: string;
    const transitionDelay: string;
    const transitionDuration: string;
    const transitionProperty: string;
    const transitionTimingFunction: string;
    const template: any;
    const util: {
        valueFunction(val: string): any;
    };
    export namespace device {
        function isAndroid(): boolean;
        function isIOS(): boolean;
        function isFlat(): boolean;
        function isIOS7(): boolean;
        function isWindows(): boolean;
    }
    export namespace widget {
        const autoInit: boolean;
        const registeredInstances: any[];
        const registeredWidgets: any[];
        function register(pluginName: string, className: string, prototype: any): void;
        function destroyAll(elements: Element): void;
        function init(element: Element): void;
        function registerInstance(element: Element, pluginName: string, className: string, prototype: any): void;
    }

    interface browserInfoOptions {
        name: string;
        version: string;
        culture: any;
        isMSPointerEnabled: boolean;
    }
    class WidgetBase {
        destroy(): void;
        element: JQuery;
        setModel(options: any, forceSet?: boolean): any;
        option(prop?: any, value?: any, forceSet?: boolean): any;
        _trigger(eventName?: string, eventProp?: any): any;
        _on(element: JQuery, eventType?: string, handler?: (eventObject: JQueryEventObject) => any): any;
        _on(element: JQuery, eventType?: string, selector?: string, handler?: (eventObject: JQueryEventObject) => any): any;
        _off(element: JQuery, eventName: string, handler?: (eventObject: JQueryEventObject) => any): any;
        _off(element: JQuery, eventType?: string, selector?: string, handler?: (eventObject: JQueryEventObject) => any): any;
        persistState(): void;
        restoreState(silent: boolean): void;
    }

    class Widget extends WidgetBase {
        constructor(pluginName: string, className: string, proto: any);
        static fn: Widget;
        static extend(widget: Widget): any;
        register(pluginName: string, className: string, prototype: any): void;
        destroyAll(elements: Element): void;
        model: any;
    }


    interface BaseEvent {
        cancel: boolean;
        type: string;
    }
    class DataManager {
        constructor(dataSource?: any, query?: ej.Query, adaptor?: any);
        setDefaultQuery(query: ej.Query): void;
        executeQuery(query?: ej.Query, done?: any, fail?: any, always?: any): JQueryPromise<any>;
        executeLocal(query?: ej.Query): ej.DataManager;
        saveChanges(changes?: Changes, key?: string, tableName?: string): JQueryDeferred<any>;
        insert(data: any, tableName?: string): JQueryPromise<any>;
        remove(keyField: string, value: any, tableName?: string): any;
        update(keyField: string, value: any, tableName?: string): any;
    }

    class Query {
        constructor();
        static fn: Query;
        static extend(prototype: any): Query;
        key(field: string): ej.Query;
        using(dataManager: ej.DataManager): ej.Query;
        execute(dataManager: ej.DataManager, done: any, fail?: string, always?: string): any;
        executeLocal(dataManager: ej.DataManager): ej.DataManager;
        clone(): ej.Query;
        from(tableName: any): ej.Query;
        addParams(key: string, value: string): ej.Query;
        expand(tables: any): ej.Query;
        where(fieldName: string, operator: ej.FilterOperators, value: any, ignoreCase?: boolean, ignoreAccent?: boolean): ej.Query;
        where(predicate: ej.Predicate): ej.Query;
        search(searchKey: any, fieldNames?: any, operator?: string, ignoreCase?: boolean, ignoreAccent?: boolean): ej.Query;
        sortBy(fieldName: string, comparer?: ej.SortOrder, isFromGroup?: boolean): ej.Query;
        sortByDesc(fieldName: string): ej.Query;
        group(fieldName: string): ej.Query;
        page(pageIndex: number, pageSize: number): ej.Query;
        take(nos: number): ej.Query;
        skip(nos: number): ej.Query;
        select(fieldNames: any): ej.Query;
        hierarchy(query: ej.Query, selectorFn: any): ej.Query;
        foreignKey(key: string): ej.Query;
        requiresCount(): ej.Query;
        range(start: number, end: number): ej.Query;
    }

    class Adaptor {
        constructor(ds: any);
        pvt: any;
        type: ej.Adaptor;
        options: AdaptorOptions;
        extend(overrides: any): ej.Adaptor;
        processQuery(dm: ej.DataManager, query: ej.Query): any;
        processResponse(data: any, ds: any, query: ej.Query, xhr: JQueryXHR, request?: any, changes?: Changes): any;
        convertToQueryString(req: any, query: ej.Query, dm: ej.DataManager): JQueryParam;
    }

    interface AdaptorOptions {
        from?: string;
        requestType?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        group?: string;
        take?: string;
        search?: string;
        count?: string;
        where?: string;
        aggregates?: string;
    }

    class UrlAdaptor extends ej.Adaptor {
        constructor();
        processQuery(dm: ej.DataManager, query: ej.Query, hierarchyFilters?: any): {
            type: string; url: string; ejPvtData: any; contentType?: string; data?: any;
        };
        convertToQueryString(req: any, query: ej.Query, dm: ej.DataManager): JQueryParam;
        processResponse(data: any, ds: any, query: ej.Query, xhr: JQueryXHR, request?: any, changes?: Changes): any;
        onGroup(e: any): void;
        onAggregates(e: any): void;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): void;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        insert(dm: ej.DataManager, data: any, tableName: string): { url: string; data: any };
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data?: any };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data: any };
        getFiltersFrom(data: any, query: ej.Query): ej.Predicate;
    }
    class WebMethodAdaptor extends ej.UrlAdaptor {
        constructor();
        processQuery(dm: ej.DataManager, query: ej.Query, hierarchyFilters?: any): {
            type: string; url: string; ejPvtData: any; contentType?: string; data?: any;
        };
    }
    class CacheAdaptor extends ej.UrlAdaptor {
        constructor();
        init(adaptor: any, timeStamp: number, pageSize: number): void;
        generateKey(url: string, query: ej.Query): string;
        processQuery(dm: ej.DataManager, query: ej.Query, hierarchyFilters?: any): any;
        processResponse(data: any, ds: any, query: ej.Query, xhr: JQueryXHR, request?: any, changes?: Changes): any;
        insert(dm: ej.DataManager, data: any, tableName: string): { url: string; data: any };
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data?: any };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data: any };
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): { url: string; type: string; data: any; contentType: string };
    }
    class ODataAdaptor extends ej.UrlAdaptor {
        constructor();
        options: UrlAdaptorOptions;
        onEachWhere(filter: any, requiresCast: boolean): any;
        onPredicate(pred: ej.Predicate, query: ej.Query, requiresCast: boolean): string;
        onComplexPredicate(pred: ej.Predicate, requiresCast: boolean): string;
        onWhere(filters: string[]): string;
        onEachSearch(e: any): void;
        onSearch(e: any): string;
        onEachSort(e: any): string;
        onSortBy(e: any): string;
        onGroup(e: any): string;
        onSelect(e: any): string;
        onAggregates(e: any): string;
        onCount(e: any): string;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processResponse(data: any, ds: any, query: ej.Query, xhr: any, request: any, changes: Changes): {
            result: any; count: number
        };
        convertToQueryString(req: any, query: ej.Query, dm: ej.DataManager): JQueryParam;
        insert(dm: ej.DataManager, data: any, tableName: string): { url: string; data: any; };
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { url: string; type: string; };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { url: string; type: string; data: any; accept: string; };
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): { url: string; type: string; data: any; contentType: string; };
        generateDeleteRequest(arr: any[], e: any): string;
        generateInsertRequest(arr: any[], e: any): string;
        generateUpdateRequest(arr: any[], e: any): string;
    }
    interface UrlAdaptorOptions {
        requestType?: string;
        accept?: string;
        multipartAccept?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        take?: string;
        count?: string;
        where?: string;
        expand?: string;
        batch?: string;
        changeSet?: string;
        batchPre?: string;
        contentId?: string;
        batchContent?: string;
        changeSetContent?: string;
        batchChangeSetContentType?: string;
    }

    class WebApiAdaptor extends ej.ODataAdaptor {
        constructor();
        insert(dm: ej.DataManager, data: any, tableName?: string): { url: string; type: string; data: any; };
        remove(dm: ej.DataManager, value: any, keyField?: string, tableName?: string): { url: string; type: string; data: any; };
        update(dm: ej.DataManager, value: any, keyField?: string, tableName?: string): { url: string; type: string; data: any; accept: string; };
        processResponse(data: any, ds: any, query: ej.Query, xhr: any, request: any, changes: Changes): {
            result: any; count: number
        };
    }

    class ODataV4Adaptor extends ej.ODataAdaptor {
        constructor();
        options: ODataAdaptorOptions;
        onCount(e: any): string;
        onEachSearch(e: any): void;
        onSearch(e: any): string;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processQuery(ds: any, query: ej.Query): {
            type: string; url: string; ejPvtData: any; contentType?: string; data?: any;
        };
        processResponse(data: any, ds: any, query: ej.Query, xhr: any, request: any, changes: Changes): {
            result: any; count: number
        };
    }
    interface ODataAdaptorOptions {
        requestType?: string;
        accept?: string;
        multipartAccept?: string;
        sortBy?: string;
        select?: string;
        skip?: string;
        take?: string;
        count?: string;
        search?: string;
        where?: string;
        expand?: string;
        batch?: string;
        changeSet?: string;
        batchPre?: string;
        contentId?: string;
        batchContent?: string;
        changeSetContent?: string;
        batchChangeSetContentType?: string;
    }

    class JsonAdaptor extends ej.Adaptor {
        constructor();
        processQuery(ds: any, query: ej.Query): string;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): Changes;
        onWhere(ds: any, e: any): any;
        onAggregates(ds: any, e: any): any;
        onSearch(ds: any, e: any): any;
        onSortBy(ds: any, e: any, query: ej.Query): any;
        onGroup(ds: any, e: any, query: ej.Query): any;
        onPage(ds: any, e: any, query: ej.Query): any;
        onRange(ds: any, e: any): any;
        onTake(ds: any, e: any): any;
        onSkip(ds: any, e: any): any;
        onSelect(ds: any, e: any): any;
        insert(dm: ej.DataManager, data: any, tableName?: string): any;
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): any;
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): any;
    }
    class ForeignKeyAdaptor extends ej.JsonAdaptor {
        constructor(data: any, type: string);
        processQuery(ds: any, query: ej.Query): any;
        insert(dm: ej.DataManager, data: any, tableName: string): { url: string; data: any };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { url: string; type: string; data: any };
    }
    class remoteSaveAdaptor extends ej.UrlAdaptor {
        constructor();
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): void;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        insert(dm: ej.DataManager, data: any, tableName: string): { url: string; data: any };
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data?: any };
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): { type: string; url: string; data: any };
    }
    class TableModel {
        constructor(name: string, jsonArray: any[], dataManager: ej.DataManager, modelComputed: any);
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        setDataManager(dataManager: DataManager): void;
        saveChanges(): void;
        rejectChanges(): void;
        insert(json: any): void;
        update(value: any): void;
        remove(key: string): void;
        isDirty(): boolean;
        getChanges(): Changes;
        toArray(): any[];
        setDirty(dirty: any, model: any): void;
        get(index: number): void;
        length(): number;
        bindTo(element: any): void;
    }
    class Model {
        constructor(json: any, table: string, name: string);
        formElements: string[];
        computes(value: any): void;
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        set(field: string, value: any): void;
        get(field: string): any;
        revert(suspendEvent: any): void;
        save(dm: ej.DataManager, key: string): void;
        markCommit(): void;
        markDelete(): void;
        changeState(state: boolean, args: any): void;
        properties(): any;
        bindTo(element: any): void;
        unbind(element: any): void;
    }
    interface Changes {
        changed?: any[];
        added?: any[];
        deleted?: any[];
    }
    class Predicate {
        constructor();
        constructor(field: string, operator: ej.FilterOperators, value: any, ignoreCase: boolean, ignoreAccent?: boolean);
        and(field: string, operator: any, value: any, ignoreCase: boolean, ignoreAccent?: boolean): ej.Predicate;
        or(field: string, operator: any, value: any, ignoreCase: boolean, ignoreAccent?: boolean): ej.Predicate;
        or(predicate: any[]): any;
        validate(record: any): boolean;
        toJSON(): {
            isComplex: boolean;
            field: string;
            operator: string;
            value: any;
            ignoreCase: boolean;
            condition: string;
            predicates: any;
        };
    }
    interface dataUtil {
        swap(array: any[], x: number, y: number): void;
        mergeSort(jsonArray: any[], fieldName?: string, comparer?: any): any[];
        max(jsonArray: any[], fieldName?: string, comparer?: string): any[];
        min(jsonArray: any[], fieldName: string, comparer: string): any[];
        distinct(jsonArray: any[], fieldName?: string, requiresCompleteRecord?: any): any[];
        sum(json: any, fieldName: string): number;
        avg(json: any, fieldName: string): number;
        select(jsonArray: any[], fieldName: string, fields: string): any[];
        group(jsonArray: any[], field: string, /* internal */ level: number): any[];
        parseTable(table: string, headerOption: ej.headerOption, headerRowIndex: number): any;
    }
    interface AjaxSettings {
        type?: string;
        cache: boolean;
        data?: any;
        dataType?: string;
        contentType?: any;
        async?: boolean;
    }
    enum FilterOperators {
        contains,
        endsWith,
        equal,
        greaterThan,
        greaterThanOrEqual,
        lessThan,
        lessThanOrEqual,
        notEqual,
        startsWith
    }

    enum MatrixDefaults {
        m11,
        m12,
        m21,
        m22,
        offsetX,
        offsetY,
        type
    }
    enum MatrixTypes {
        Identity,
        Scaling,
        Translation,
        Unknown
    }

    enum Orientation {
        Horizontal,
        Vertical
    }

    enum SliderType {
        Default,
        MinRange,
        Range
    }

    enum eventType {
        click,
        mouseDown,
        mouseLeave,
        mouseMove,
        mouseUp
    }
    enum headerOption {
        row,
        tHead
    }

    enum filterType {
        StartsWith,
        Contains,
        EndsWith,
        LessThan,
        GreaterThan,
        LessThanOrEqual,
        GreaterThanOrEqual,
        Equal,
        NotEqual
    }
    enum Animation {
        Fade,
        None,
        Slide
    }
    enum Type {
        Overlay,
        Slide
    }
    enum SortOrder {
        Ascending,
        Descending
    }
    class Draggable extends ej.Widget {
        static fn: Draggable;
        constructor(element: JQuery | Element, options?: Draggable.Model);
        static Locale: any;
        model: Draggable.Model;
        defaults: Draggable.Model;

        /** destroy in the draggable.
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace Draggable {

        export interface Model {

            /** If clone is specified.
             * @Default {false}
             */
            clone?: boolean;

            /** Sets the offset of the dragging helper relative to the mouse cursor.
             * @Default {{ top: -1, left: -2 }}
             */
            cursorAt?: any;

            /** Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
             * @Default {1}
             */
            distance?: number;

            /** The drag area is used to restrict the dragging element bounds.Specify the id of the container within which the element should be dragged.
             * @Default {null}
             */
            dragArea?: boolean;

            /** If specified, restricts drag start click to the specified element(s).
             * @Default {null}
             */
            handle?: string;

            /** Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the
             * droppable.
             * @Default {'default'}
             */
            scope?: string;

            /** Used to enable auto scroll while drag and drop the element.
             * @Default {'false'}
             */
            autoScroll?: boolean;

            /** Represents when to start the scrolling inside the scroll container on dragging
             * @Default {'20'}
             */
            scrollSensitivity?: number;

            /** Specifies how much distance of scroll should move on dragging once reached scroll sensitivity area.
             * @Default {'20'}
             */
            scrollSpeed?: number;

            /** This event is triggered when dragging element is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** This event is triggered when the mouse is moved during the dragging.
             */
            drag?(e: DragEventArgs): void;

            /** Supply a callback function to handle the drag start event as an init option.
             */
            dragStart?(e: DragStartEventArgs): void;

            /** This event is triggered when the mouse is moved during the dragging.
             */
            dragStop?(e: DragStopEventArgs): void;

            /** This event is triggered when dragged.
             */
            helper?(e: HelperEventArgs): void;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Draggable.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DragEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the draggable model
             */
            model?: ej.Draggable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event model values
             */
            event?: any;

            /** returns the exact mouse down target element
             */
            target?: any;
        }

        export interface DragStartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the draggable model
             */
            model?: ej.Draggable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event model values
             */
            event?: any;

            /** returns the exact mouse down target element
             */
            target?: any;
        }

        export interface DragStopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the draggable model
             */
            model?: ej.Draggable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event model values
             */
            event?: any;

            /** returns the exact mouse down target element
             */
            target?: any;
        }

        export interface HelperEventArgs {

            /** returns the draggable element object
             */
            element?: any;

            /** returns the event model values
             */
            sender?: any;
        }
    }

    class Droppable extends ej.Widget {
        static fn: Droppable;
        constructor(element: JQuery | Element, options?: Droppable.Model);
        static Locale: any;
        model: Droppable.Model;
        defaults: Droppable.Model;

        /** destroy in the Droppable.
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace Droppable {

        export interface Model {

            /** Used to accept the specified draggable items.
             * @Default {null}
             */
            accept?: any;

            /** Used to group sets of droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
             * @Default {'default'}
             */
            scope?: string;

            /** This event is triggered when the mouse up is moved during the dragging.
             */
            drop?(e: DropEventArgs): void;

            /** This event is triggered when the mouse is moved out.
             */
            out?(e: OutEventArgs): void;

            /** This event is triggered when the mouse is moved over.
             */
            over?(e: OverEventArgs): void;
        }

        export interface DropEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Droppable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the element which accepts the droppable element.
             */
            target?: any;
        }

        export interface OutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Droppable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse out over the element
             */
            target?: any;
        }

        export interface OverEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Droppable.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse over the element
             */
            target?: any;
        }
    }

    class Resizable extends ej.Widget {
        static fn: Resizable;
        constructor(element: JQuery | Element, options?: Resizable.Model);
        static Locale: any;
        model: Resizable.Model;
        defaults: Resizable.Model;

        /** destroy in the Resizable.
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace Resizable {

        export interface Model {

            /** Sets the offset of the resizing helper relative to the mouse cursor.
             * @Default {{ top: -1, left: -2 }}
             */
            cursorAt?: any;

            /** Distance in pixels after mousedown the mouse must move before resizing should start. This option can be used to prevent unwanted drags when clicking on an element.
             * @Default {1}
             */
            distance?: number;

            /** If specified, restricts resize start click to the specified element(s).
             * @Default {null}
             */
            handle?: string;

            /** Sets the max height till which an element has to be resized.
             * @Default {null}
             */
            maxHeight?: number;

            /** Sets the max width till which an element has to be resized.
             * @Default {null}
             */
            maxWidth?: number;

            /** Sets the min Height below which an element cannot be resized.
             * @Default {10}
             */
            minHeight?: number;

            /** Sets the min Width below which an element cannot be resized.
             * @Default {10}
             */
            minWidth?: number;

            /** Used to group sets of resizable items.
             * @Default {'default'}
             */
            scope?: string;

            /** This event is triggered when the widget destroys.
             */
            destroy?(e: DestroyEventArgs): void;

            /** This event is triggered when resized.
             */
            helper?(e: HelperEventArgs): void;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Resizable.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface HelperEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the autocomplete model
             */
            model?: ej.Resizable.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }

    const globalize: globalize;
    const cultures: culture;
    function addCulture(name: string, culture?: any): void;
    function preferredCulture(culture?: string): culture;
    function format(value: any, format: string, culture?: string): string;
    function parseInt(value: string, radix?: any, culture?: string): number;
    function parseFloat(value: string, radix?: any, culture?: string): number;
    function parseDate(value: string, format: string, culture?: string): Date;
    function getLocalizedConstants(controlName: string, culture?: string): any;
	function findCulture(culture?: string): culture;

    interface globalize {
        addCulture(name: string, culture?: any): void;
        preferredCulture(culture?: string): culture;
        format(value: any, format: string, culture?: string): string;
        parseInt(value: string, radix?: any, culture?: string): number;
        parseFloat(value: string, radix?: any, culture?: string): number;
        parseDate(value: string, format: string, culture?: string): Date;
        getLocalizedConstants(controlName: string, culture?: string): any;
		findCulture(culture?: string): culture;
    }
    interface culture {
        name?: string;
        englishName?: string;
        namtiveName?: string;
        language?: string;
        isRTL: boolean;
        numberFormat?: formatSettings;
        calendars?: calendarsSettings;
    }
    interface formatSettings {
        pattern: string[];
        decimals: number;
        groupSizes: number[];
        percent: percentSettings;
        currency: currencySettings;
    }
    interface percentSettings {
        pattern: string[];
        decimals: number;
        groupSizes: number[];
        symbol: string;
    }
    interface currencySettings {
        pattern: string[];
        decimals: number;
        groupSizes: number[];
        symbol: string;
    }
    interface calendarsSettings {
        standard: standardSettings;
    }
    interface standardSettings {
        firstDay: number;
        days: daySettings;
        months: monthSettings;
        AM: string[];
        PM: string[];
        twoDigitYearMax: number;
        patterns: patternSettings;
    }
    interface daySettings {
        names: string[];
        namesAbbr: string[];
        namesShort: string[];
    }
    interface monthSettings {
        names: string[];
        namesAbbr: string[];
    }
    interface patternSettings {
        d: string;
        D: string;
        t: string;
        T: string;
        f: string;
        F: string;
        M: string;
        Y: string;
        S: string;
    }
    class Scroller extends ej.Widget {
        static fn: Scroller;
        constructor(element: JQuery | Element, options?: Scroller.Model);
        static Locale: any;
        model: Scroller.Model;
        defaults: Scroller.Model;

        /** destroy the Scroller control, unbind the all ej control related events automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** User disables the Scroller control at any time.
         * @returns {void}
         */
        disable(): void;

        /** User enables the Scroller control at any time.
         * @returns {void}
         */
        enable(): void;

        /** Returns true if horizontal scrollbar is shown, else return false.
         * @returns {boolean}
         */
        isHScroll(): boolean;

        /** Returns true if vertical scrollbar is shown, else return false.
         * @returns {boolean}
         */
        isVScroll(): boolean;

        /** User refreshes the Scroller control at any time.
         * @returns {void}
         */
        refresh(): void;

        /** Horizontal scroller moves to given pixel from its origin position. We can also specify the animation speed,in which the scroller has to move while re-positioning it.
         * @param {number|string} Horizontal scroller moves to the specified pixel.
         * @param {boolean} Specifies to enable/disable the animation.
         * @param {number} Specifies the animation speed when scrolling, if animation is enabled.
         * @returns {void}
         */
        scrollX(pixel: number|string, disableAnimation: boolean, animationSpeed: number): void;

        /** Vertical scroller moves to given pixel from its origin position. We can also specify the animation speed,in which the scroller has to move while re-positioning it.
         * @param {number|string} Vertical scroller moves to the specified pixel.
         * @param {boolean} Specifies to enable/disable the animation.
         * @param {number} Specifies the animation speed when scrolling, if animation is enabled.
         * @returns {void}
         */
        scrollY(pixel: number|string, disableAnimation: boolean, animationSpeed: number): void;
    }
    export namespace Scroller {

        export interface Model {

            /** Specifies the swipe scrolling speed(in millisecond).
             * @Default {600}
             */
            animationSpeed?: number;

            /** Set true to hides the scrollbar, when mouseout the content area.
             * @Default {false}
             */
            autoHide?: boolean;

            /** Specifies the height and width of button in the scrollbar.
             * @Default {18}
             */
            buttonSize?: number;

            /** Specifies to enable or disable the scroller
             * @Default {true}
             */
            enabled?: boolean;

            /** Save current model value to browser cookies for state maintenance. While refresh the page Rating control values are retained.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Indicates the Right to Left direction to scroller
             * @Default {undefined}
             */
            enableRTL?: boolean;

            /** Enables or Disable the touch Scroll
             * @Default {true}
             */
            enableTouchScroll?: boolean;

            /** Specifies the height of Scroll panel and scrollbars.
             * @Default {250}
             */
            height?: number|string;

            /** If the scrollbar has vertical it set as width, else it will set as height of the handler.
             * @Default {18}
             */
            scrollerSize?: number;

            /** The Scroller content and scrollbars move left with given value.
             * @Default {0}
             */
            scrollLeft?: number;

            /** While press on the arrow key the scrollbar position added to the given pixel value.
             * @Default {57}
             */
            scrollOneStepBy?: number;

            /** The Scroller content and scrollbars move to top position with specified value.
             * @Default {0}
             */
            scrollTop?: number;

            /** Indicates the target area to which scroller have to appear.
             * @Default {null}
             */
            targetPane?: string;

            /** Specifies the width of Scroll panel and scrollbars.
             * @Default {0}
             */
            width?: number|string;

            /** Fires when Scroller control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when Scroller control is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when a thumb point is moved along the touch surface.
             */
            thumbMove?(e: ThumbMoveEventArgs): void;

            /** Fires when a thumb point is placed on the touch surface.
             */
            thumbStart?(e: ThumbStartEventArgs): void;

            /** Fires when a thumb point is removed from the touch surface.
             */
            thumbEnd?(e: ThumbEndEventArgs): void;

            /** It fires whenever the mouse wheel is rotated either in upwards or downwards.
             */
            wheelMove?(e: WheelMoveEventArgs): void;

            /** It will fire when mouse trackball has been start to wheel.
             */
            wheelStart?(e: WheelStartEventArgs): void;

            /** It will fire when mouse trackball has been stop to wheel.
             */
            wheelStop?(e: WheelStopEventArgs): void;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ThumbMoveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;

            /** returns the current data related to the event.
             */
            scrollData?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ThumbStartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;

            /** returns the current data related to the event.
             */
            scrollData?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ThumbEndEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;

            /** returns the current data related to the event.
             */
            scrollData?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface WheelMoveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;
        }

        export interface WheelStartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;

            /** returns the current data related to the event.
             */
            scrollData?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface WheelStopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the scroller model
             */
            model?: ej.Scroller.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the original event name and its event properties of the current event.
             */
            originalEvent?: any;
        }
    }

    class Accordion extends ej.Widget {
        static fn: Accordion;
        constructor(element: JQuery | Element, options?: Accordion.Model);
        static Locale: any;
        model: Accordion.Model;
        defaults: Accordion.Model;

        /** AddItem method is used to add the panel in dynamically. It receives the following parameters
         * @param {string} specify the name of the header
         * @param {string} content of the new panel
         * @param {number} insertion place of the new panel
         * @param {boolean} Enable or disable the AJAX request to the added panel
         * @returns {void}
         */
        addItem(header_name: string, content: string, index: number, isAjaxReq: boolean): void;

        /** This method used to collapse the all the expanded items in accordion at a time.
         * @returns {void}
         */
        collapseAll(): void;

        /** This method used to Collapses the specified items in accordion at a time.
         * @returns {void}
         */
        collapsePanel(): void;

        /** destroy the Accordion widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the accordion widget includes all the headers and content panels.
         * @returns {void}
         */
        disable(): void;

        /** Disable the accordion widget item based on specified header index.
         * @param {any[]} index values to disable the panels
         * @returns {void}
         */
        disableItems(index: any[]): void;

        /** Enable the accordion widget includes all the headers and content panels.
         * @returns {void}
         */
        enable(): void;

        /** Enable the accordion widget item based on specified header index.
         * @param {any[]} index values to enable the panels
         * @returns {void}
         */
        enableItems(index: any[]): void;

        /** To expand all the accordion widget items.
         * @returns {void}
         */
        expandAll(): void;

        /** This method used to Expand the specified items in accordion at a time.
         * @returns {void}
         */
        expandPanel(): void;

        /** Returns the total number of panels in the control.
         * @returns {number}
         */
        getItemsCount(): number;

        /** Hides the visible Accordion control.
         * @returns {void}
         */
        hide(): void;

        /** The refresh method is used to adjust the control size based on the parent element dimension.
         * @returns {void}
         */
        refresh(): void;

        /** RemoveItem method is used to remove the specified index panel.It receives the parameter as number.
         * @param {number} specify the index value for remove the accordion panel.
         * @returns {void}
         */
        removeItem(index: number): void;

        /** Shows the hidden Accordion control.
         * @returns {void}
         */
        show(): void;
    }
    export namespace Accordion {

        export interface Model {

            /** Specifies the ajaxSettings option to load the content to the accordion control.
             * @Default {null}
             */
            ajaxSettings?: AjaxSettings;

            /** Accordion headers can be expanded and collapsed on keyboard action.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** To set the Accordion headers Collapse Speed.
             * @Default {300}
             */
            collapseSpeed?: number;

            /** Specifies the collapsible state of accordion control.
             * @Default {false}
             */
            collapsible?: boolean;

            /** Sets the root CSS class for Accordion theme, which is used customize.
             */
            cssClass?: string;

            /** Allows you to set the custom header Icon. It accepts two key values â€œheaderâ€, â€selectedHeaderâ€.
             * @Default {{ header: e-collapse, selectedHeader: e-expand }}
             */
            customIcon?: CustomIcon;

            /** Disables the specified indexed items in accordion.
             * @Default {[]}
             */
            disabledItems?: number[];

            /** Specifies the animation behavior in accordion.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** With this enabled property, you can enable or disable the Accordion.
             * @Default {true}
             */
            enabled?: boolean;

            /** Used to enable the disabled items in accordion.
             * @Default {[]}
             */
            enabledItems?: number[];

            /** Multiple content panels to activate at a time.
             * @Default {false}
             */
            enableMultipleOpen?: boolean;

            /** Save current model value to browser cookies for maintaining states. When refreshing the accordion control page, the model value is applied from browser cookies or HTML 5local
             * storage.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Display headers and panel text from right-to-left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** The events API binds the action for activating the accordion header. Users can activate the header by using mouse actions such as mouse-over, mouse-up, mouse-down, and soon.
             * @Default {click}
             */
            events?: string;

            /** To set the Accordion headers Expand Speed.
             * @Default {300}
             */
            expandSpeed?: number;

            /** Sets the height for Accordion items header.
             */
            headerSize?: number|string;

            /** Specifies height of the accordion.
             * @Default {null}
             */
            height?: number|string;

            /** Adjusts the content panel height based on the given option (content, auto, or fill). By default, the panel heights are adjusted based on the content.
             * @Default {content}
             */
            heightAdjustMode?: ej.Accordion.HeightAdjustMode|string;

            /** It allows to define the characteristics of the Accordion control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** The given index header will activate (open). If collapsible is set to true, and a negative value is given, then all headers are collapsed. Otherwise, the first panel isactivated.
             * @Default {0}
             */
            selectedItemIndex?: number;

            /** Activate the specified indexed items of the accordion
             * @Default {[0]}
             */
            selectedItems?: number[];

            /** Used to determines the close button visibility an each accordion items. This close button helps to remove the accordion item from the control.
             * @Default {false}
             */
            showCloseButton?: boolean;

            /** Displays rounded corner borders on the Accordion control's panels and headers.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies width of the accordion.
             * @Default {null}
             */
            width?: number|string;

            /** Triggered after a Accordion item is active . Argument values are activeIndex, activeHeader, isInteraction and current model values.
             */
            activate?(e: ActivateEventArgs): void;

            /** Triggered before the AJAX content is loaded in a content panel. Arguments have location of the content (URL) and current model value.
             */
            ajaxBeforeLoad?(e: AjaxBeforeLoadEventArgs): void;

            /** Triggered after AJAX load failed action. Arguments have URL, error message, and current model value.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** Triggered after the AJAX content loads. Arguments have current model values.
             */
            ajaxLoad?(e: AjaxLoadEventArgs): void;

            /** Triggered after AJAX success action. Arguments have URL, content, and current model values.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** Triggered before a tab item is active. Arguments have active index and model values.
             */
            beforeActivate?(e: BeforeActivateEventArgs): void;

            /** Triggered before a Accordion item is inactive. Argument values are  inActiveIndex and  model values.
             */
            beforeInactivate?(e: BeforeInactivateEventArgs): void;

            /** Triggered after Accordion control creation.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered after Accordion control destroy.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered after a Accordion item is inactive. Argument values are  inActiveHeader, inActiveIndex ,isInteraction and current model values.
             */
            inActivate?(e: InActivateEventArgs): void;
        }

        export interface ActivateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns active index
             */
            activeIndex?: number;

            /** returns current active header
             */
            activeHeader?: any;

            /** returns true when the Accordion index activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface AjaxBeforeLoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns current AJAX content location
             */
            URL?: string;
        }

        export interface AjaxErrorEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns current AJAX content location
             */
            URL?: string;

            /** returns the failed data sent.
             */
            data?: string;
        }

        export interface AjaxLoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the name of the URL
             */
            URL?: string;
        }

        export interface AjaxSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns current AJAX content location
             */
            URL?: string;

            /** returns the successful data sent.
             */
            data?: string;

            /** returns the AJAX content.
             */
            content?: string;
        }

        export interface BeforeActivateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns active index
             */
            activeIndex?: number;

            /** returns true when the Accordion index activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface BeforeInactivateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns active index
             */
            inActiveIndex?: number;

            /** returns true when the Accordion index activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface InActivateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the accordion model
             */
            model?: ej.Accordion.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns active index
             */
            inActiveIndex?: number;

            /** returns in active element
             */
            inActiveHeader?: any;

            /** returns true when the Accordion index activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface AjaxSettings {

            /** It specifies, whether to enable or disable asynchronous request.
             */
            async?: boolean;

            /** It specifies the page will be cached in the web browser.
             */
            cache?: boolean;

            /** It specifies the type of data is send in the query string.
             */
            contentType?: string;

            /** It specifies the data as an object, will be passed in the query string.
             */
            data?: any;

            /** It specifies the type of data that you're expecting back from the response.
             */
            dataType?: string;

            /** It specifies the HTTP request type.
             */
            type?: string;
        }

        export interface CustomIcon {

            /** This class name set to collapsing header.
             */
            header?: string;

            /** This class name set to expanded (active) header.
             */
            selectedHeader?: string;
        }

        enum HeightAdjustMode {

            ///Height fit to the content in the panel
            Content,

            ///Height set to the largest content in the panel
            Auto,

            ///Height filled to the content of the panel
            Fill
        }

    }

    class Autocomplete extends ej.Widget {
        static fn: Autocomplete;
        constructor(element: JQuery | Element, options?: Autocomplete.Model);
        static Locale: any;
        model: Autocomplete.Model;
        defaults: Autocomplete.Model;

        /** Clears the text in the Autocomplete textbox.
         * @returns {void}
         */
        clearText(): void;

        /** Destroys the Autocomplete widget.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the autocomplete widget.
         * @returns {void}
         */
        disable(): void;

        /** Enables the autocomplete widget.
         * @returns {void}
         */
        enable(): void;

        /** Returns objects (data object) of all the selected items in the autocomplete textbox.
         * @returns {any}
         */
        getSelectedItems(): any;

        /** Returns the current selected value from the Autocomplete textbox.
         * @returns {string}
         */
        getValue(): string;

        /** Returns the current active text value in the Autocomplete suggestion list.
         * @returns {string}
         */
        getActiveText(): string;

        /** Hides the Autocomplete suggestion list.
         * @returns {void}
         */
        hide(): void;

        /** Search the entered text and show it in the suggestion list if available.
         * @returns {void}
         */
        search(): void;

        /** Open up the autocomplete suggestion popup with all list items.
         * @returns {void}
         */
        open(): void;

        /** Sets the value of the Autocomplete textbox based on the given key value.
         * @param {string} The key value of the specific suggestion item.
         * @returns {void}
         */
        selectValueByKey(Key: string): void;

        /** Sets the value of the Autocomplete textbox based on the given input text value.
         * @param {string} The text (label) value of the specific suggestion item.
         * @returns {void}
         */
        selectValueByText(Text: string): void;
    }
    export namespace Autocomplete {

        export interface Model {

            /** Customize &quot;Add New&quot; text (label) to be added in the autocomplete popup list for the entered text when there are no suggestions for it.
             * @Default {Add New}
             */
            addNewText?: string;

            /** Allows new values to be added to the autocomplete input other than the values in the suggestion list. Normally, when there are no suggestions it will display â€œNo suggestionsâ€
             * label in the popup.
             * @Default {false}
             */
            allowAddNew?: boolean;

            /** Enables or disables the sorting of suggestion list item. The default sort order is ascending order. You customize sort order.
             * @Default {true}
             */
            allowSorting?: boolean;

            /** Enables or disables selecting the animation style for the popup list. Animation types can be selected through either of the following options,
             * @Default {slide}
             */
            animateType?: ej.Autocomplete.Animation|string;

            /** To focus the items in the suggestion list when the popup is shown. By default first item will be focused.
             * @Default {false}
             */
            autoFocus?: boolean;

            /** Enables or disables the case sensitive search.
             * @Default {false}
             */
            caseSensitiveSearch?: boolean;

            /** The root class for the Autocomplete textbox widget which helps in customizing its theme.
             * @Default {â€â€}
             */
            cssClass?: string;

            /** The data source contains the list of data for the suggestions list. It can be a string array or JSON array or service URL that returns JSON.
             * @Default {null}
             */
            dataSource?: any|any[];

            /** The time delay (in milliseconds) after which the suggestion popup will be shown.
             * @Default {200}
             */
            delaySuggestionTimeout?: number;

            /** The special character which acts as a separator for the given words for multi-mode search i.e. the text after the delimiter are considered as a separate word or query for search
             * operation.
             * @Default {â€™,â€™}
             */
            delimiterChar?: string;

            /** The text to be displayed in the popup when there are no suggestions available for the entered text.
             * @Default {â€œNo suggestionsâ€}
             */
            emptyResultText?: string;

            /** Fills the autocomplete textbox with the first matched item from the suggestion list automatically based on the entered text when enabled.
             * @Default {false}
             */
            enableAutoFill?: boolean;

            /** Enables or disables the Autocomplete textbox widget.
             * @Default {true}
             */
            enabled?: boolean;

            /** Enables or disables displaying the duplicate names present in the search result.
             * @Default {false}
             */
            enableDistinct?: boolean;

            /** Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true. While refreshing the page, it retains the model value
             * from browser cookies or local storage.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Displays the Autocomplete widgetâ€™s content from right to left when enabled.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Mapping fields for the suggestion items of the Autocomplete textbox widget.
             * @Default {null}
             */
            fields?: Fields;

            /** Specifies the search filter type. There are several types of search filter available such as â€˜startswithâ€™, â€˜containsâ€™, â€˜endswithâ€™, â€˜lessthanâ€™,
             * â€˜lessthanorequalâ€™, â€˜greaterthanâ€™, â€˜greaterthanorequalâ€™, â€˜equalâ€™, â€˜notequalâ€™.
             * @Default {ej.filterType.StartsWith}
             */
            filterType?: string;

            /** The height of the Autocomplete textbox.
             * @Default {null}
             */
            height?: string|number;

            /** The search text can be highlighted in the AutoComplete suggestion list when enabled.
             * @Default {false}
             */
            highlightSearch?: boolean;

            /** Number of items to be displayed in the suggestion list.
             * @Default {0}
             */
            itemsCount?: number;

            /** To enable or disable the diacritic characters of the Autocomplete suggestion list when filtering.
             * @Default {false}
             */
            ignoreAccent?: boolean;

            /** Set the localization culture for Autocomplete Widget.
             */
            locale?: string;

            /** Minimum number of character to be entered in the Autocomplete textbox to show the suggestion list.
             * @Default {1}
             */
            minCharacter?: number;

            /** An Autocomplete column collection can be defined and customized through the multiColumnSettings property.Column's header, field, and stringFormat can be define via
             * multiColumnSettings properties.
             */
            multiColumnSettings?: MultiColumnSettings;

            /** Enables or disables selecting multiple values from the suggestion list. Multiple values can be selected through either of the following options,
             * @Default {ej.MultiSelectMode.None}
             */
            multiSelectMode?: ej.Autocomplete.MultiSelectMode|string;

            /** The height of the suggestion list.
             * @Default {â€œ152pxâ€}
             */
            popupHeight?: string;

            /** The width of the suggestion list.
             * @Default {â€œautoâ€}
             */
            popupWidth?: string;

            /** The query to retrieve the data from the data source.
             * @Default {null}
             */
            query?: ej.Query;

            /** Indicates that the autocomplete textbox values can only be readable.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Sets the value for the Autocomplete textbox based on the given input key value.
             */
            selectValueByKey?: number;

            /** Enables or disables showing the message when there are no suggestions for the entered text.
             * @Default {true}
             */
            showEmptyResultText?: boolean;

            /** Enables or disables the loading icon to intimate the searching operation. The loading icon is visible when there is a time delay to perform the search.
             * @Default {true}
             */
            showLoadingIcon?: boolean;

            /** Enables the showPopup button in autocomplete textbox. When the showPopup button is clicked, it displays all the available data from the data source.
             * @Default {false}
             */
            showPopupButton?: boolean;

            /** Enables or disables rounded corner.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Enables or disables reset icon to clear the textbox values.
             * @Default {false}
             */
            showResetIcon?: boolean;

            /** Sort order specifies whether the suggestion list values has to be displayed in ascending or descending order.
             * @Default {ej.SortOrder.Ascending}
             */
            sortOrder?: ej.Autocomplete.SortOrder|string;

            /** The template to display the suggestion list items with customized appearance.
             * @Default {null}
             */
            template?: string;

            /** The jQuery validation error message to be displayed on form validation.
             * @Default {null}
             */
            validationMessage?: any;

            /** The jQuery validation rules for form validation.
             * @Default {null}
             */
            validationRules?: any;

            /** The value to be displayed in the autocomplete textbox.
             * @Default {null}
             */
            value?: string;

            /** Enables or disables the visibility of the autocomplete textbox.
             * @Default {true}
             */
            visible?: boolean;

            /** The text to be displayed when the value of the autocomplete textbox is empty.
             * @Default {null}
             */
            watermarkText?: string;

            /** The width of the Autocomplete textbox.
             * @Default {null}
             */
            width?: string|number;

            /** Triggers when the AJAX requests Begins.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggers when the data requested from AJAX will get successfully loaded in the Autocomplete widget.
             */
            actionSuccess?(e: ActionSuccessEventArgs): void;

            /** Triggers when the AJAX requests complete. The request may get failed or succeed.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggers when the data requested from AJAX get failed.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Triggers when the text box value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Triggers after the suggestion popup is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Triggers when Autocomplete widget is created.
             */
            create?(e: CreateEventArgs): void;

            /** Triggers after the Autocomplete widget is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggers after the autocomplete textbox is focused.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Triggers after the Autocomplete textbox gets out of the focus.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Triggers after the suggestion list is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Triggers when an item has been selected from the suggestion list.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Autocomplete model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the Autocomplete model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface ActionCompleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the Autocomplete model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface ActionFailureEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the error message
             */
            error?: any;

            /** returns the Autocomplete model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ChangeEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the autocomplete textbox.
             */
            value?: string;
        }

        export interface CloseEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the autocomplete textbox.
             */
            value?: string;
        }

        export interface FocusOutEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the autocomplete textbox.
             */
            value?: string;
        }

        export interface OpenEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface SelectEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the autocomplete model object.
             */
            model?: ej.Autocomplete.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the autocomplete textbox.
             */
            value?: string;

            /** Text of the selected item.
             */
            text?: string;

            /** Key of the selected item.
             */
            key?: string;

            /** Data object of the selected item.
             */
            Item?: ej.Autocomplete.Model;
        }

        export interface Fields {

            /** Used to group the suggestion list items.
             */
            groupBy?: string;

            /** Defines the HTML attributes such as id, class, styles for the item.
             */
            htmlAttributes?: any;

            /** Defines the specific field name which contains unique key values for the list items.
             */
            key?: string;

            /** Defines the specific field name in the data source to load the suggestion list with data.
             */
            text?: string;
        }

        export interface MultiColumnSettingsColumn {

            /** Get or set a value that indicates to display the columns in the autocomplete mapping with column name of the dataSource.
             */
            field?: string;

            /** Get or set a value that indicates to display the title of that particular column.
             */
            headerText?: string;

            /** Gets or sets a value that indicates to render the multicolumn with custom theme.
             */
            cssClass?: string;

            /** Specifies the search data type. There are four types of data types available such as string, â€˜numberâ€™, â€˜booleanâ€™ and â€˜dateâ€™.
             * @Default {ej.Type.String}
             */
            type?: ej.Type|string;

            /** Specifies the search filter type. There are several types of search filter available such as â€˜startswithâ€™, â€˜containsâ€™, â€˜endswithâ€™, â€˜lessthanâ€™,
             * â€˜lessthanorequalâ€™, â€˜greaterthanâ€™, â€˜greaterthanorequalâ€™, â€˜equalâ€™, â€˜notequalâ€™.
             * @Default {ej.filterType.StartsWith}
             */
            filterType?: ej.filterType|string;

            /** This defines the text alignment of a particular column header cell value. See headerTextAlign
             * @Default {ej.TextAlign.Left}
             */
            headerTextAlign?: ej.TextAlign|string;

            /** Gets or sets a value that indicates to align the text within the column. See textAlign
             * @Default {ej.TextAlign.Left}
             */
            textAlign?: ej.TextAlign|string;
        }

        export interface MultiColumnSettings {

            /** Allow list of data to be displayed in several columns.
             * @Default {false}
             */
            enable?: boolean;

            /** Allow header text to be displayed in corresponding columns.
             * @Default {true}
             */
            showHeader?: boolean;

            /** Displayed selected value and autocomplete search based on mentioned column value specified in that format.
             */
            stringFormat?: string;

            /** This property allows user to search text for any number of fields in the suggestion list without modifying the selected text format.
             */
            searchColumnIndices?: any[];

            /** Field and Header Text collections can be defined and customized through columns field.
             */
            columns?: MultiColumnSettingsColumn[];
        }

        enum Animation {

            ///Supports to animation type with none type only.
            None,

            ///Supports to animation type with slide type only.
            Slide,

            ///Supports to animation type with fade type only.
            Fade
        }


        enum MultiSelectMode {

            ///Multiple values are separated using a given special character.
            Delimiter,

            ///Each values are displayed in separate box with close button.
            VisualMode
        }


        enum SortOrder {

            ///Items to be displayed in the suggestion list in ascending order.
            Ascending,

            ///Items to be displayed in the suggestion list in descending order.
            Descending
        }

    }

    class Button extends ej.Widget {
        static fn: Button;
        constructor(element: JQuery | Element, options?: Button.Model);
        static Locale: any;
        model: Button.Model;
        defaults: Button.Model;

        /** destroy the button widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To disable the button
         * @returns {void}
         */
        disable(): void;

        /** To enable the button
         * @returns {void}
         */
        enable(): void;
    }
    export namespace Button {

        export interface Model {

            /** Specifies the contentType of the Button. See below to know available ContentType
             * @Default {ej.ContentType.TextOnly}
             */
            contentType?: ej.ContentType|string;

            /** Sets the root CSS class for Button theme, which is used customize.
             */
            cssClass?: string;

            /** Specifies the button control state.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specify the Right to Left direction to button
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the height of the Button.
             * @Default {28}
             */
            height?: number;

            /** It allows to define the characteristics of the Button control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the image position of the Button. This image position is applicable only with the textandimage contentType property. The images can be positioned in both imageLeft and
             * imageRight options. See below to know about available ImagePosition
             * @Default {ej.ImagePosition.ImageLeft}
             */
            imagePosition?: ej.ImagePosition|string;

            /** Specifies the primary icon for Button. This icon will be displayed from the left margin of the button.
             * @Default {null}
             */
            prefixIcon?: string;

            /** Convert the button as repeat button. It raises the 'Click' event repeatedly from the it is pressed until it is released.
             * @Default {false}
             */
            repeatButton?: boolean;

            /** Displays the Button with rounded corners.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the size of the Button. See below to know available ButtonSize
             * @Default {ej.ButtonSize.Normal}
             */
            size?: ej.ButtonSize|string;

            /** Specifies the secondary icon for Button. This icon will be displayed from the right margin of the button.
             * @Default {null}
             */
            suffixIcon?: string;

            /** Specifies the text content for Button.
             * @Default {null}
             */
            text?: string;

            /** Specified the time interval between two consecutive 'click' event on the button.
             * @Default {150}
             */
            timeInterval?: string;

            /** Specifies the Type of the Button. See below to know available ButtonType
             * @Default {ej.ButtonType.Submit}
             */
            type?: ej.ButtonType|string;

            /** Specifies the width of the Button.
             * @Default {100px}
             */
            width?: string|number;

            /** Fires when Button control is clicked successfully.Consider the scenario to perform any validation,modification of content or any other operations click on button,we can make use
             * of this click event to achieve the scenario.
             */
            click?(e: ClickEventArgs): void;

            /** Fires after Button control is created.If the user want to perform any operation after the button control creation then the user can make use of this create event.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the button is destroyed successfully.If the user want to perform any operation after the destroy button control then the user can make use of this destroy event.
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface ClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the button model
             */
            model?: ej.Button.Model;

            /** returns the name of the event
             */
            type?: string;

            /** return the button state
             */
            status?: boolean;

            /** return the event model for sever side processing.
             */
            e?: any;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the button model
             */
            model?: ej.Button.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the button model
             */
            model?: ej.Button.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }
    enum ContentType {
        //To display the text content only in button
        TextOnly,
        //To display the image only in button
        ImageOnly,
        //Supports to display  image for both ends of the button
        ImageBoth,
        //Supports to display image with the text content
        TextAndImage,
        //Supports to display  image with both ends of the text
        ImageTextImage,
    }
    enum ImagePosition {
        //support for aligning text in left and image in right
        ImageRight,
        //support for aligning text in right and image in left
        ImageLeft,
        //support for aligning text in bottom and image in top.
        ImageTop,
        //support for aligning text in top and image in bottom
        ImageBottom,
    }
    enum ButtonSize {
        //Creates button with Built-in default size height, width specified
        Normal,
        //Creates button with Built-in mini size height, width specified
        Mini,
        //Creates button with Built-in small size height, width specified
        Small,
        //Creates button with Built-in medium size height, width specified
        Medium,
        //Creates button with Built-in large size height, width specified
        Large,
    }
    enum ButtonType {
        //Creates button with Built-in button type specified
        Button,
        //Creates button with Built-in reset type specified
        Reset,
        //Creates button with Built-in submit type specified
        Submit,
    }

    class Captcha extends ej.Widget {
        static fn: Captcha;
        constructor(element: JQuery | Element, options?: Captcha.Model);
        static Locale: any;
        model: Captcha.Model;
        defaults: Captcha.Model;
    }
    export namespace Captcha {

        export interface Model {

            /** Specifies the character set of the Captcha that will be used to generate captcha text randomly.
             */
            characterSet?: string;

            /** Specifies the error message to be displayed when the Captcha mismatch.
             */
            customErrorMessage?: string;

            /** Set the Captcha validation automatically.
             */
            enableAutoValidation?: boolean;

            /** Specifies the case sensitivity for the characters typed in the Captcha.
             */
            enableCaseSensitivity?: boolean;

            /** Specifies the background patterns for the Captcha.
             */
            enablePattern?: boolean;

            /** Sets the Captcha direction as right to left alignment.
             */
            enableRTL?: boolean;

            /** Specifies the background appearance for the captcha.
             */
            hatchStyle?: ej.HatchStyle|string;

            /** Specifies the height of the Captcha.
             */
            height?: number;

            /** Specifies the method with values to be mapped in the Captcha.
             */
            mapper?: string;

            /** Specifies the maximum number of characters used in the Captcha.
             */
            maximumLength?: number;

            /** Specifies the minimum number of characters used in the Captcha.
             */
            minimumLength?: number;

            /** Specifies the method to map values to Captcha.
             */
            requestMapper?: string;

            /** Sets the Captcha with audio support, that enables to dictate the captcha text.
             */
            showAudioButton?: boolean;

            /** Sets the Captcha with a refresh button.
             */
            showRefreshButton?: boolean;

            /** Specifies the target button of the Captcha to validate the entered text and captcha text.
             */
            targetButton?: string;

            /** Specifies the target input element that will verify the Captcha.
             */
            targetInput?: string;

            /** Specifies the width of the Captcha.
             */
            width?: number;

            /** Fires when captcha refresh begins.
             */
            refreshBegin?(e: RefreshBeginEventArgs): void;

            /** Fires after captcha refresh completed.
             */
            refreshComplete?(e: RefreshCompleteEventArgs): void;

            /** Fires when captcha refresh fails to load.
             */
            refreshFailure?(e: RefreshFailureEventArgs): void;

            /** Fires after captcha refresh succeeded.
             */
            refreshSuccess?(e: RefreshSuccessEventArgs): void;
        }

        export interface RefreshBeginEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Captcha model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RefreshCompleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Captcha model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RefreshFailureEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Captcha model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RefreshSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Captcha model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }
    }
    enum HatchStyle {
        //Set background as None to Captcha
        None,
        //Set background as BackwardDiagonal to Captcha
        BackwardDiagonal,
        //Set background as Cross to Captcha
        Cross,
        //Set background as DarkDownwardDiagonal to Captcha
        DarkDownwardDiagonal,
        //Set background as DarkHorizontal to Captcha
        DarkHorizontal,
        //Set background as DarkUpwardDiagonal to Captcha
        DarkUpwardDiagonal,
        //Set background as DarkVertical to Captcha
        DarkVertical,
        //Set background as DashedDownwardDiagonal to Captcha
        DashedDownwardDiagonal,
        //Set background as DashedHorizontal to Captcha
        DashedHorizontal,
        //Set background as DashedUpwardDiagonal to Captcha
        DashedUpwardDiagonal,
        //Set background as DashedVertical to Captcha
        DashedVertical,
        //Set background as DiagonalBrick to Captcha
        DiagonalBrick,
        //Set background as DiagonalCross to Captcha
        DiagonalCross,
        //Set background as Divot to Captcha
        Divot,
        //Set background as DottedDiamond to Captcha
        DottedDiamond,
        //Set background as DottedGrid to Captcha
        DottedGrid,
        //Set background as ForwardDiagonal to Captcha
        ForwardDiagonal,
        //Set background as Horizontal to Captcha
        Horizontal,
        //Set background as HorizontalBrick to Captcha
        HorizontalBrick,
        //Set background as LargeCheckerBoard to Captcha
        LargeCheckerBoard,
        //Set background as LargeConfetti to Captcha
        LargeConfetti,
        //Set background as LargeGrid to Captcha
        LargeGrid,
        //Set background as LightDownwardDiagonal to Captcha
        LightDownwardDiagonal,
        //Set background as LightHorizontal to Captcha
        LightHorizontal,
        //Set background as LightUpwardDiagonal to Captcha
        LightUpwardDiagonal,
        //Set background as LightVertical to Captcha
        LightVertical,
        //Set background as Max to Captcha
        Max,
        //Set background as Min to Captcha
        Min,
        //Set background as NarrowHorizontal to Captcha
        NarrowHorizontal,
        //Set background as NarrowVertical to Captcha
        NarrowVertical,
        //Set background as OutlinedDiamond to Captcha
        OutlinedDiamond,
        //Set background as Percent90 to Captcha
        Percent90,
        //Set background as Wave to Captcha
        Wave,
        //Set background as Weave to Captcha
        Weave,
        //Set background as WideDownwardDiagonal to Captcha
        WideDownwardDiagonal,
        //Set background as WideUpwardDiagonal to Captcha
        WideUpwardDiagonal,
        //Set background as ZigZag to Captcha
        ZigZag,
    }

    class ListBox extends ej.Widget {
        static fn: ListBox;
        constructor(element: JQuery | Element, options?: ListBox.Model);
        static Locale: any;
        model: ListBox.Model;
        defaults: ListBox.Model;

        /** Adds a given list items in the ListBox widget at a specified index. It accepts two parameters.
         * @param {any|string} This can be a list item object (for JSON binding) or a string (for UL and LI rendering). Also we can the specify this as an array of list item object or an
         * array of strings to add multiple items.
         * @param {number} The index value to add the given items at the specified index. If index is not specified, the given items will be added at the end of the list.
         * @returns {void}
         */
        addItem(listItem: any|string, index: number): void;

        /** Checks all the list items in the ListBox widget. It is dependent on showCheckbox property.
         * @returns {void}
         */
        checkAll(): void;

        /** Checks a list item by using its index. It is dependent on showCheckbox property.
         * @param {number} Index of the listbox item to be checked. If index is not specified, the given items will be added at the end of the list.
         * @returns {void}
         */
        checkItemByIndex(index: number): void;

        /** Checks multiple list items by using its index values. It is dependent on showCheckbox property.
         * @param {number[]} Index/Indices of the listbox items to be checked. If index is not specified, the given items will be added at the end of the list.
         * @returns {void}
         */
        checkItemsByIndices(indices: number[]): void;

        /** Disables the ListBox widget.
         * @returns {void}
         */
        disable(): void;

        /** Disables a list item by passing the item text as parameter.
         * @param {string} Text of the listbox item to be disabled.
         * @returns {void}
         */
        disableItem(text: string): void;

        /** Disables a list Item using its index value.
         * @param {number} Index of the listbox item to be disabled.
         * @returns {void}
         */
        disableItemByIndex(index: number): void;

        /** Disables set of list Items using its index values.
         * @param {number[]|string} Indices of the listbox items to be disabled.
         * @returns {void}
         */
        disableItemsByIndices(Indices: number[]|string): void;

        /** Enables the ListBox widget when it is disabled.
         * @returns {void}
         */
        enable(): void;

        /** Enables a list Item using its item text value.
         * @param {string} Text of the listbox item to be enabled.
         * @returns {void}
         */
        enableItem(text: string): void;

        /** Enables a list item using its index value.
         * @param {number} Index of the listbox item to be enabled.
         * @returns {void}
         */
        enableItemByIndex(index: number): void;

        /** Enables a set of list Items using its index values.
         * @param {number[]|string} Indices of the listbox items to be enabled.
         * @returns {void}
         */
        enableItemsByIndices(indices: number[]|string): void;

        /** Returns the list of checked items in the ListBox widget. It is dependent on showCheckbox property.
         * @returns {any}
         */
        getCheckedItems(): any;

        /** Returns the list of selected items in the ListBox widget.
         * @returns {any}
         */
        getSelectedItems(): any;

        /** Returns an itemâ€™s index based on the given text.
         * @param {string} The list item text (label)
         * @returns {number}
         */
        getIndexByText(text: string): number;

        /** Returns an itemâ€™s index based on the value given.
         * @param {string} The list itemâ€™s value
         * @returns {number}
         */
        getIndexByValue(indices: string): number;

        /** Returns an itemâ€™s text (label) based on the index given.
         * @returns {string}
         */
        getTextByIndex(): string;

        /** Returns a list itemâ€™s object using its index.
         * @returns {any}
         */
        getItemByIndex(): any;

        /** Returns a list itemâ€™s object based on the text given.
         * @param {string} The list item text.
         * @returns {any}
         */
        getItemByText(text: string): any;

        /** Merges the given data with the existing data items in the listbox.
         * @param {any[]} Data to merge in listbox.
         * @returns {void}
         */
        mergeData(data: any[]): void;

        /** Selects the next item based on the current selection.
         * @returns {void}
         */
        moveDown(): void;

        /** Selects the previous item based on the current selection.
         * @returns {void}
         */
        moveUp(): void;

        /** Refreshes the ListBox widget.
         * @param {boolean} Refreshes both the datasource and the dimensions of the ListBox widget when the parameter is passed as true, otherwise only the ListBox dimensions will be
         * refreshed.
         * @returns {void}
         */
        refresh(refreshData: boolean): void;

        /** Removes all the list items from listbox.
         * @returns {void}
         */
        removeAll(): void;

        /** Removes the selected list items from the listbox.
         * @returns {void}
         */
        removeSelectedItems(): void;

        /** Removes a list item by using its text.
         * @param {string} Text of the listbox item to be removed.
         * @returns {void}
         */
        removeItemByText(text: string): void;

        /** Removes a list item by using its index value.
         * @param {number} Index of the listbox item to be removed.
         * @returns {void}
         */
        removeItemByIndex(index: number): void;

        /**
         * @returns {void}
         */
        selectAll(): void;

        /** Selects the list item using its text value.
         * @param {string} Text of the listbox item to be selected.
         * @returns {void}
         */
        selectItemByText(text: string): void;

        /** Selects list item using its value property.
         * @param {string} Value of the listbox item to be selected.
         * @returns {void}
         */
        selectItemByValue(value: string): void;

        /** Selects list item using its index value.
         * @param {number} Index of the listbox item to be selected.
         * @returns {void}
         */
        selectItemByIndex(index: number): void;

        /** Selects a set of list items through its index values.
         * @param {number|number[]} Index/Indices of the listbox item to be selected.
         * @returns {void}
         */
        selectItemsByIndices(Indices: number|number[]): void;

        /** Unchecks all the checked list items in the ListBox widget. To use this method showCheckbox property to be set as true.
         * @returns {void}
         */
        uncheckAll(): void;

        /** Unchecks a checked list item using its index value. To use this method showCheckbox property to be set as true.
         * @param {number} Index of the listbox item to be unchecked.
         * @returns {void}
         */
        uncheckItemByIndex(index: number): void;

        /** Unchecks the set of checked list items using its index values. To use this method showCheckbox property must be set to true.
         * @param {number[]|string} Indices of the listbox item to be unchecked.
         * @returns {void}
         */
        uncheckItemsByIndices(indices: number[]|string): void;

        /**
         * @returns {void}
         */
        unselectAll(): void;

        /** Unselects a selected list item using its index value
         * @param {number} Index of the listbox item to be unselected.
         * @returns {void}
         */
        unselectItemByIndex(index: number): void;

        /** Unselects a selected list item using its text value.
         * @param {string} Text of the listbox item to be unselected.
         * @returns {void}
         */
        unselectItemByText(text: string): void;

        /** Unselects a selected list item using its value.
         * @param {string} Value of the listbox item to be unselected.
         * @returns {void}
         */
        unselectItemByValue(value: string): void;

        /** Unselects a set of list items using its index values.
         * @param {number[]|string} Indices of the listbox item to be unselected.
         * @returns {void}
         */
        unselectItemsByIndices(indices: number[]|string): void;

        /** Hides all the checked items in the listbox.
         * @returns {void}
         */
        hideCheckedItems(): void;

        /** Shows a set of hidden list Items using its index values.
         * @param {number[]|string} Indices of the listbox items to be shown.
         * @returns {void}
         */
        showItemByIndices(indices: number[]|string): void;

        /** Hides a set of list Items using its index values.
         * @param {number[]|string} Indices of the listbox items to be hidden.
         * @returns {void}
         */
        hideItemsByIndices(indices: number[]|string): void;

        /** Shows the hidden list items using its values.
         * @param {any[]} Values of the listbox items to be shown.
         * @returns {void}
         */
        showItemsByValues(values: any[]): void;

        /** Hides the list item using its values.
         * @param {any[]} Values of the listbox items to be hidden.
         * @returns {void}
         */
        hideItemsByValues(values: any[]): void;

        /** Shows a hidden list item using its value.
         * @param {string} Value of the listbox item to be shown.
         * @returns {void}
         */
        showItemByValue(value: string): void;

        /** Hide a list item using its value.
         * @param {string} Value of the listbox item to be hidden.
         * @returns {void}
         */
        hideItemByValue(value: string): void;

        /** Shows a hidden list item using its index value.
         * @param {number} Index of the listbox item to be shown.
         * @returns {void}
         */
        showItemByIndex(index: number): void;

        /** Hides a list item using its index value.
         * @param {number} Index of the listbox item to be hidden.
         * @returns {void}
         */
        hideItemByIndex(index: number): void;

        /**
         * @returns {void}
         */
        show(): void;

        /** Hides the listbox.
         * @returns {void}
         */
        hide(): void;

        /** Hides all the listbox items in the listbox.
         * @returns {void}
         */
        hideAllItems(): void;

        /** Shows all the listbox items in the listbox.
         * @returns {void}
         */
        showAllItems(): void;
    }
    export namespace ListBox {

        export interface Model {

            /** Enables/disables the dragging behavior of the items in ListBox widget.
             * @Default {false}
             */
            allowDrag?: boolean;

            /** Accepts the items which are dropped in to it, when it is set to true.
             * @Default {false}
             */
            allowDrop?: boolean;

            /** Enables or disables multiple selection.
             * @Default {false}
             */
            allowMultiSelection?: boolean;

            /** Loads the list data on demand via scrolling behavior to improve the applicationâ€™s performance. There are two ways to load data which can be defined using â€œvirtualScrollModeâ€
             * property.
             * @Default {false}
             */
            allowVirtualScrolling?: boolean;

            /** Enables or disables the case sensitive search for list item by typing the text (search) value.
             * @Default {false}
             */
            caseSensitiveSearch?: boolean;

            /** Dynamically populate data of a list box while selecting an item in another list box i.e. rendering child list box based on the item selection in parent list box. This property
             * accepts the id of the child ListBox widget to populate the data.
             * @Default {null}
             */
            cascadeTo?: string;

            /** Set of list items to be checked by default using its index. It works only when the showCheckbox property is set to true.
             * @Default {null}
             */
            checkedIndices?: any[];

            /** The root class for the ListBox widget to customize the existing theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Contains the list of data for generating the list items.
             * @Default {null}
             */
            dataSource?: any;

            /** Enables or disables the ListBox widget.
             * @Default {true}
             */
            enabled?: boolean;

            /** Enables or disables the search behavior to find the specific list item by typing the text value.
             * @Default {false}
             */
            enableIncrementalSearch?: boolean;

            /** Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Displays the ListBox widgetâ€™s content from right to left when enabled.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies ellipsis (&quot;...&quot;) representation in an overflowed list item content when it is set to false.
             * @Default {true}
             */
            enableWordWrap?: boolean;

            /** Mapping fields for the data items of the ListBox widget.
             * @Default {null}
             */
            fields?: Fields;

            /** Defines the height of the ListBox widget.
             * @Default {null}
             */
            height?: string;

            /** Defines the height for individual ListBox item.
             * @Default {null}
             */
            itemHeight?: string;

            /** The number of list items to be shown in the ListBox widget. The remaining list items will be scrollable.
             * @Default {null}
             */
            itemsCount?: number;

            /** The total number of list items to be rendered in the ListBox widget.
             * @Default {null}
             */
            totalItemsCount?: number;

            /** The number of list items to be loaded in the list box while enabling virtual scrolling and when virtualScrollMode is set to continuous.
             * @Default {5}
             */
            itemRequestCount?: number;

            /** Loads data for the listbox by default (i.e. on initialization) when it is set to true. It creates empty ListBox if it is set to false.
             * @Default {true}
             */
            loadDataOnInit?: boolean;

            /** The query to retrieve required data from the data source.
             * @Default {ej.Query()}
             */
            query?: ej.Query;

            /** The list item to be selected by default using its index.
             * @Default {null}
             */
            selectedIndex?: number;

            /** The list items to be selected by default using its indices. To use this property allowMultiSelection should be enabled.
             * @Default {[]}
             */
            selectedIndices?: any[];

            /** Enables/Disables the multi selection option with the help of checkbox control.
             * @Default {false}
             */
            showCheckbox?: boolean;

            /** To display the ListBox container with rounded corners.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Set to sort ListBox items either by Ascending or Descending order. By default sortOrder is set as enum type of &quot;None&quot;.You can use only below mentioned type for sorting
             * purpose.
             * @Default {ej.SortOrder.None}
             */
            sortOrder?: ej.ListBox.SortOrder|string;

            /** The template to display the ListBox widget with customized appearance.
             * @Default {null}
             */
            template?: string;

            /** Holds the selected items values and used to bind value to the list item using AngularJS and KnockoutJS.
             * @Default {â€œâ€}
             */
            value?: number;

            /** Specifies the virtual scroll mode to load the list data on demand via scrolling behavior. There are two types of mode.
             * @Default {ej.VirtualScrollMode.Normal}
             */
            virtualScrollMode?: ej.VirtualScrollMode|string;

            /** Defines the width of the ListBox widget.
             * @Default {null}
             */
            width?: string;

            /** Specifies the targetID for the listbox items.
             * @Default {null}
             */
            targetID?: string;

            /** Triggers before the AJAX request begins to load data in the ListBox widget.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggers after the data requested via AJAX is successfully loaded in the ListBox widget.
             */
            actionSuccess?(e: ActionSuccessEventArgs): void;

            /** Triggers when the AJAX requests complete. The request may get failed or succeed.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggers when the data requested from AJAX get failed.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Event will be triggered before the requested data via AJAX once loaded in successfully.
             */
            actionBeforeSuccess?(e: ActionBeforeSuccessEventArgs): void;

            /** Triggers when the item selection is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Triggers when the list item is checked or unchecked.
             */
            checkChange?(e: CheckChangeEventArgs): void;

            /** Triggers when the ListBox widget is created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Triggers when the ListBox widget is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggers when focus the listbox items.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Triggers when focus out from listbox items.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Triggers when the list item is being dragged.
             */
            itemDrag?(e: ItemDragEventArgs): void;

            /** Triggers when the list item is ready to be dragged.
             */
            itemDragStart?(e: ItemDragStartEventArgs): void;

            /** Triggers when the list item stops dragging.
             */
            itemDragStop?(e: ItemDragStopEventArgs): void;

            /** Triggers when the list item is dropped.
             */
            itemDrop?(e: ItemDropEventArgs): void;

            /** Triggers when a list item gets selected.
             */
            select?(e: SelectEventArgs): void;

            /** Triggers when a list item gets unselected.
             */
            unselect?(e: UnselectEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the ListBox model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the ListBox model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface ActionCompleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the ListBox model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface ActionFailureEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the error message
             */
            error?: any;

            /** returns the ListBox model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionBeforeSuccessEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** List of actual object.
             */
            actual?: any;

            /** Object of ListBox widget which contains DataManager arguments
             */
            request?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** List of array object
             */
            result?: any[];

            /** ExecuteQuery object of DataManager
             */
            xhr?: any;
        }

        export interface ChangeEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** List item object.
             */
            item?: any;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface CheckChangeEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** List item object.
             */
            item?: any;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface CreateEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;
        }

        export interface DestroyEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;
        }

        export interface FocusInEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;
        }

        export interface FocusOutEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;
        }

        export interface ItemDragEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on whether the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface ItemDragStartEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on whether the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface ItemDragStopEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on whether the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface ItemDropEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on whether the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface SelectEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** List item object.
             */
            item?: any;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface UnselectEventArgs {

            /** Instance of the listbox model object.
             */
            model?: ej.ListBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** List item object.
             */
            item?: any;

            /** The Datasource of the listbox.
             */
            data?: any;

            /** List itemâ€™s index.
             */
            index?: number;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Boolean value based on whether the list item is checked or not.
             */
            isChecked?: boolean;

            /** Boolean value based on whether the list item is selected or not.
             */
            isSelected?: boolean;

            /** Boolean value based on the list item is enabled or not.
             */
            isEnabled?: boolean;

            /** List itemâ€™s text (label).
             */
            text?: string;

            /** List itemâ€™s value.
             */
            value?: string;
        }

        export interface Fields {

            /** Defines the specific field name which contains Boolean values to specify whether the list items to be checked by default or not.
             */
            checkBy?: boolean;

            /** The grouping in the ListBox widget can be defined using this field.
             */
            groupBy?: string;

            /** Defines the HTML attributes such as id, class, styles for the specific ListBox item.
             */
            htmlAttributes?: any;

            /** Defines the specific field name which contains id values for the list items.
             */
            id?: string;

            /** Defines the imageURL for the image to be displayed in the ListBox item.
             */
            imageUrl?: string;

            /** Defines the image attributes such as height, width, styles and so on.
             */
            imageAttributes?: string;

            /** Defines the specific field name which contains Boolean values to specify whether the list items to be selected by default or not.
             */
            selectBy?: boolean;

            /** Defines the sprite CSS class for the image to be displayed.
             */
            spriteCssClass?: string;

            /** Defines the table name to get the specific set of list items to be loaded in the ListBox widget while rendering with remote data.
             */
            tableName?: string;

            /** Defines the specific field name in the data source to load the list with data.
             */
            text?: string;

            /** Defines the specific field name in the data source to load the list with data value property.
             */
            value?: string;
        }

        enum SortOrder {

            ///The items are not sorted.
            None,

            ///To sort items in Ascending order.
            Ascending,

            ///To sort items in Descending order.
            Descending
        }

    }

    class Calculate {
        static fn: Calculate;
        constructor(element: JQuery | Element, options?: Calculate.Model);
        static Locale: any;
        model: Calculate.Model;
        defaults: Calculate.Model;

        /** Add the custom formulas with function in CalcEngine library
         * @param {string} pass the formula name
         * @param {string} pass the custom function name to call
         * @returns {void}
         */
        addCustomFunction(FormulaName: string, FunctionName: string): void;

        /** Adds a named range to the NamedRanges collection
         * @param {string} pass the namedRange's name
         * @param {string} pass the cell range of NamedRange
         * @returns {void}
         */
        addNamedRange(Name: string, cellRange: string): void;

        /** Accepts a possible parsed formula and returns the calculated value without quotes.
         * @param {string} pass the cell range to adjust its range
         * @returns {string}
         */
        adjustRangeArg(Name: string): string;

        /** When a formula cell changes, call this method to clear it from its dependent cells.
         * @param {string} pass the changed cell address
         * @returns {void}
         */
        clearFormulaDependentCells(Cell: string): void;

        /** Call this method to clear whether an exception was raised during the computation of a library function.
         * @returns {void}
         */
        clearLibraryComputationException(): void;

        /** Get the column index from a cell reference passed in.
         * @param {string} pass the cell address
         * @returns {void}
         */
        colIndex(Cell: string): void;

        /** Evaluates a parsed formula.
         * @param {string} pass the parsed formula
         * @returns {string}
         */
        computedValue(Formula: string): string;

        /** Evaluates a parsed formula.
         * @param {string} pass the parsed formula
         * @returns {string}
         */
        computeFormula(Formula: string): string;
    }
    export namespace Calculate {

        export interface Model {
        }
    }

    class CheckBox extends ej.Widget {
        static fn: CheckBox;
        constructor(element: JQuery | Element, options?: CheckBox.Model);
        static Locale: any;
        model: CheckBox.Model;
        defaults: CheckBox.Model;

        /** Destroy the CheckBox widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Disable the CheckBox to prevent all user interactions.
         * @returns {void}
         */
        disable(): void;

        /** To enable the CheckBox
         * @returns {void}
         */
        enable(): void;

        /** To Check the status of CheckBox
         * @returns {boolean}
         */
        isChecked(): boolean;
    }
    export namespace CheckBox {

        export interface Model {

            /** Specifies whether CheckBox has to be in checked or not. We can also specify array of string as value for this property. If any of the value in the specified array matches the
             * value of the textbox, then it will be considered as checked. It will be useful in MVVM binding, specify array type to identify the values of the checked CheckBoxes.
             * @Default {false}
             */
            checked?: boolean|string[];

            /** Specifies the State of CheckBox.See below to get available CheckState
             * @Default {null}
             */
            checkState?: ej.CheckState|string;

            /** Sets the root CSS class for CheckBox theme, which is used customize.
             */
            cssClass?: string;

            /** Specifies the checkbox control state.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies the persist property for CheckBox while initialization. The persist API save current model value to browser cookies for state maintains. While refreshing the CheckBox
             * control page the model value apply from browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specify the Right to Left direction to Checkbox
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the enable or disable Tri-State for checkbox control.
             * @Default {false}
             */
            enableTriState?: boolean;

            /** It allows to define the characteristics of the CheckBox control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specified value to be added an id attribute of the CheckBox.
             * @Default {null}
             */
            id?: string;

            /** Specify the prefix value of id to be added before the current id of the CheckBox.
             * @Default {ej}
             */
            idPrefix?: string;

            /** Specifies the name attribute of the CheckBox.
             * @Default {null}
             */
            name?: string;

            /** Displays rounded corner borders to CheckBox
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the size of the CheckBox.See below to know available CheckboxSize
             * @Default {small}
             */
            size?: ej.CheckboxSize|string;

            /** Specifies the text content to be displayed for CheckBox.
             */
            text?: string;

            /** Set the jQuery validation error message in CheckBox.
             * @Default {null}
             */
            validationMessage?: any;

            /** Set the jQuery validation rules in CheckBox.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value attribute of the CheckBox.
             * @Default {null}
             */
            value?: string;

            /** Fires before the CheckBox is going to changed its state successfully
             */
            beforeChange?(e: BeforeChangeEventArgs): void;

            /** Fires when the CheckBox state is changed successfully
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when the CheckBox state is created successfully
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the CheckBox state is destroyed successfully
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface BeforeChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the CheckBox model
             */
            model?: ej.CheckBox.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event model values
             */
            event?: any;

            /** returns the status whether the element is checked or not.
             */
            isChecked?: boolean;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the CheckBox model
             */
            model?: ej.CheckBox.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event arguments
             */
            event?: any;

            /** returns the status whether the element is checked or not.
             */
            isChecked?: boolean;

            /** returns the state of the checkbox
             */
            checkState?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the CheckBox model
             */
            model?: ej.CheckBox.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the CheckBox model
             */
            model?: ej.CheckBox.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }
    enum CheckState {
        //string
        Uncheck,
        //string
        Check,
        //string
        Indeterminate,
    }
    enum CheckboxSize {
        //Displays the CheckBox in medium size
        Medium,
        //Displays the CheckBox in small size
        Small,
    }

    class ColorPicker extends ej.Widget {
        static fn: ColorPicker;
        constructor(element: JQuery | Element, options?: ColorPicker.Model);
        static Locale: any;
        model: ColorPicker.Model;
        defaults: ColorPicker.Model;

        /** Disables the color picker control
         * @returns {void}
         */
        disable(): void;

        /** Enable the color picker control
         * @returns {void}
         */
        enable(): void;

        /** Gets the selected color in RGB format
         * @returns {any}
         */
        getColor(): any;

        /** Gets the selected color value as string
         * @returns {string}
         */
        getValue(): string;

        /** To Convert color value from hexCode to RGB
         * @param {string} Specified HEX code converted to RGB
         * @returns {any}
         */
        hexCodeToRGB(colorCode: string): any;

        /** Hides the ColorPicker popup, if in opened state.
         * @returns {void}
         */
        hide(): void;

        /** Convert color value from HSV to RGB
         * @param {any} Specified HSV code converted to RGB
         * @returns {any}
         */
        HSVToRGB(HSV: any): any;

        /** Convert color value from RGB to HEX
         * @param {any} Specified RGB code converted to HEX code
         * @returns {string}
         */
        RGBToHEX(RGB: any): string;

        /** Convert color value from RGB to HSV
         * @param {any} Specified RGB code converted to HSV code
         * @returns {any}
         */
        RGBToHSV(RGB: any): any;

        /** Open the ColorPicker popup.
         * @returns {void}
         */
        show(): void;
    }
    export namespace ColorPicker {

        export interface Model {

            /** The ColorPicker control allows to define the customized text to displayed in button elements. Using the property to achieve the customized culture values.
             * @Default {{ apply: Apply, cancel: Cancel, swatches: Swatches }}
             */
            buttonText?: ButtonText;

            /** Allows to change the mode of the button. Please refer below to know available button mode
             * @Default {ej.ButtonMode.Split}
             */
            buttonMode?: ej.ButtonMode|string;

            /** Specifies the number of columns to be displayed color palette model.
             * @Default {10}
             */
            columns?: number|string;

            /** This property allows you to customize its appearance using user-defined CSS and custom skin options such as colors and backgrounds.
             */
            cssClass?: string;

            /** This property allows to define the custom colors in the palette model.Custom palettes are created by passing a comma delimited string of HEX values or an array of colors.
             * @Default {empty}
             */
            custom?: any[];

            /** This property allows to embed the popup in the order of DOM element flow . When we set the value as true, the color picker popup is always in visible state.
             * @Default {false}
             */
            displayInline?: boolean;

            /** This property allows to change the control in enabled or disabled state.
             * @Default {true}
             */
            enabled?: boolean;

            /** This property allows to enable or disable the opacity slider in the color picker control
             * @Default {true}
             */
            enableOpacity?: boolean;

            /** It allows to define the characteristics of the ColorPicker control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Defines the localized text values in button and tooltip.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the model type to be rendered initially in the color picker control. See below to get available ModelType
             * @Default {ej.ColorPicker.ModelType.Default}
             */
            modelType?: ej.ColorPicker.ModelType|string;

            /** This property allows to change the opacity value .The selected color opacity will be adjusted by using this opacity value.
             * @Default {100}
             */
            opacityValue?: number|string;

            /** Specifies the palette type to be displayed at initial time in palette model.There two types of palette model available in ColorPicker control. See below available Palette
             * @Default {ej.ColorPicker.Palette.BasicPalette}
             */
            palette?: ej.ColorPicker.Palette|string;

            /** This property allows to define the preset model to be rendered initially in palette type.It consists of 12 different types of presets. Each presets have 50 colors. See below
             * available Presets
             * @Default {ej.ColorPicker.Presets.Basic}
             */
            presetType?: ej.ColorPicker.Presets|string;

            /** Allows to show/hides the apply and cancel buttons in ColorPicker control
             * @Default {true}
             */
            showApplyCancel?: boolean;

            /** Allows to show/hides the clear button in ColorPicker control
             * @Default {true}
             */
            showClearButton?: boolean;

            /** This property allows to provides live preview support for current cursor selection color and selected color.
             * @Default {true}
             */
            showPreview?: boolean;

            /** This property allows to store the color values in custom list.The ColorPicker will keep up to 11 colors in a custom list.By clicking the add button, the selected color from picker
             * or palette will get added in the recent color list.
             * @Default {false}
             */
            showRecentColors?: boolean;

            /** Allows to show/hides the switcher button in ColorPicker control.It helps to switch palette or picker mode in colorpicker.
             * @Default {true}
             */
            showSwitcher?: boolean;

            /** This property allows to shows tooltip to notify the slider value in color picker control.
             * @Default {false}
             */
            showTooltip?: boolean;

            /** Specifies the toolIcon to be displayed in dropdown control color area.
             * @Default {null}
             */
            toolIcon?: string;

            /** This property allows to define the customized text or content to displayed when mouse over the following elements. This property also allows to use the culture values.
             * @Default {{ switcher: Switcher, addButton: Add Color, basic: Basic, monoChrome: Mono Chrome, flatColors: Flat Color, seaWolf: Sea Wolf, webColors: Web Colors, sandy: Sandy,
             * pinkShades: Pink Shades, misty: Misty, citrus: Citrus, vintage: Vintage, moonLight: Moon Light, candyCrush: Candy Crush, currentColor: Current Color, selectedColor: Selected
             * Color }}
             */
            tooltipText?: TooltipText;

            /** Specifies the color value for color picker control, the value is in hexadecimal form with prefix of &quot;#&quot;.
             * @Default {null}
             */
            value?: string;

            /** Fires after Color value has been changed successfully.If the user want to perform any operation after the color value changed then the user can make use of this change event.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires after closing the color picker popup.
             */
            close?(e: CloseEventArgs): void;

            /** Fires after Color picker control is created. If the user want to perform any operation after the color picker control creation then the user can make use of this create event.
             */
            create?(e: CreateEventArgs): void;

            /** Fires after Color picker control is destroyed. If the user want to perform any operation after the color picker control destroyed then the user can make use of this destroy event.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires after opening the color picker popup
             */
            open?(e: OpenEventArgs): void;

            /** Fires after Color value has been selected successfully. If the user want to perform any operation after the color value selected then the user can make use of this select event.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** return the previous color value
             */
            changeFrom?: string;

            /** returns the name of the event
             */
            type?: string;

            /** return the changed color value
             */
            value?: string;
        }

        export interface CloseEventArgs {

            /** returns the color picker model
             */
            model?: ej.ColorPicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** returns the color picker model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the color picker model
             */
            model?: ej.ColorPicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface OpenEventArgs {

            /** returns the color picker model
             */
            model?: ej.ColorPicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface SelectEventArgs {

            /** returns the color picker model
             */
            model?: ej.ColorPicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** return the selected color value
             */
            value?: string;
        }

        export interface ButtonText {

            /** Sets the text for the apply button.
             */
            apply?: string;

            /** Sets the text for the cancel button.
             */
            cancel?: string;

            /** Sets the header text for the swatches area.
             */
            swatches?: string;
        }

        export interface TooltipText {

            /** Sets the tooltip text for the switcher button.
             */
            switcher?: string;

            /** Sets the tooltip text for the add button.
             */
            addButton?: string;

            /** Sets the tooltip text for the basic preset.
             */
            basic?: string;

            /** Sets the tooltip text for the mono chrome preset.
             */
            monoChrome?: string;

            /** Sets the tooltip text for the flat colors preset.
             */
            flatColors?: string;

            /** Sets the tooltip text for the sea wolf preset.
             */
            seaWolf?: string;

            /** Sets the tooltip text for the web colors preset.
             */
            webColors?: string;

            /** Sets the tooltip text for the sandy preset.
             */
            sandy?: string;

            /** Sets the tooltip text for the pink shades preset.
             */
            pinkShades?: string;

            /** Sets the tooltip text for the misty preset.
             */
            misty?: string;

            /** Sets the tooltip text for the citrus preset.
             */
            citrus?: string;

            /** Sets the tooltip text for the vintage preset.
             */
            vintage?: string;

            /** Sets the tooltip text for the moon light preset.
             */
            moonLight?: string;

            /** Sets the tooltip text for the candy crush preset.
             */
            candyCrush?: string;

            /** Sets the tooltip text for the current color area.
             */
            currentColor?: string;

            /** Sets the tooltip text for the selected color area.
             */
            selectedColor?: string;
        }

        enum ModelType {

            ///support palette type mode in color picker.
            Palette,

            ///support palette type mode in color picker.
            Picker
        }


        enum Palette {

            ///used to show the basic palette
            BasicPalette,

            ///used to show the custompalette
            CustomPalette
        }


        enum Presets {

            ///used to show the basic presets
            Basic,

            ///used to show the CandyCrush colors presets
            CandyCrush,

            ///used to show the Citrus colors presets
            Citrus,

            ///used to show the FlatColors presets
            FlatColors,

            ///used to show the Misty presets
            Misty,

            ///used to show the MoonLight presets
            MoonLight,

            ///used to show the PinkShades presets
            PinkShades,

            ///used to show the Sandy presets
            Sandy,

            ///used to show the Seawolf presets
            SeaWolf,

            ///used to show the Vintage presets
            Vintage,

            ///used to show the WebColors presets
            WebColors
        }

    }
    enum ButtonMode {
        //Displays the button in split mode
        Split,
        //Displays the button in Dropdown mode
        Dropdown,
    }

    class FileExplorer extends ej.Widget {
        static fn: FileExplorer;
        constructor(element: JQuery | Element, options?: FileExplorer.Model);
        static Locale: any;
        model: FileExplorer.Model;
        defaults: FileExplorer.Model;

        /** Refresh the size of FileExplorer control.
         * @returns {void}
         */
        adjustSize(): void;

        /** Disable the particular context menu item.
         * @param {string|HTMLElement} Id of the menu item/ Menu element to be disabled
         * @returns {void}
         */
        disableMenuItem(item: string|HTMLElement): void;

        /** Disable the particular toolbar item.
         * @param {string|HTMLElement} Id of the toolbar item/ Tool item element to be disabled
         * @returns {void}
         */
        disableToolbarItem(item: string|HTMLElement): void;

        /** Enable the particular context menu item.
         * @param {string|HTMLElement} Id of the menu item/ Menu element to be Enabled
         * @returns {void}
         */
        enableMenuItem(item: string|HTMLElement): void;

        /** Enable the particular toolbar item
         * @param {string|HTMLElement} Id of the tool item/ Tool item element to be Enabled
         * @returns {void}
         */
        enableToolbarItem(item: string|HTMLElement): void;

        /** Refresh the content of the selected folder in FileExplorer control.
         * @returns {void}
         */
        refresh(): void;

        /** Remove the particular toolbar item.
         * @param {string|HTMLElement} Id of the tool item/ tool item element to be removed
         * @returns {void}
         */
        removeToolbarItem(item: string|HTMLElement): void;
    }
    export namespace FileExplorer {

        export interface Model {

            /** Sets the URL of server side AJAX handling method that handles file operation like Read, Remove, Rename, Create, Upload, Download, Copy and Move in FileExplorer.
             */
            ajaxAction?: string;

            /** Specifies the data type of server side AJAX handling method.
             * @Default {json}
             */
            ajaxDataType?: string;

            /** By using ajaxSettings property, you can customize the AJAX configurations. Normally you can customize the following option in AJAX handling data, URL, type, async, contentType,
             * dataType and success. For upload, download and getImage API, you can only customize URL.
             * @Default {{ read: {}, createFolder: {}, remove: {}, rename: {}, paste: {}, getDetails: {}, download: {}, upload: {}, getImage: {}, search: {}}}
             */
            ajaxSettings?: any;

            /** The FileExplorer allows to move the files from one folder to another folder of FileExplorer by using drag and drop option. Also it supports to upload a file by dragging it from
             * windows explorer to the necessary folder of ejFileExplorer.
             * @Default {true}
             */
            allowDragAndDrop?: boolean;

            /** Gets or sets a value that indicates whether to enable keyboard support for FileExplorer actions.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** The FileExplorer allows to select multiple files by enabling the allowMultiSelection property. You can perform multi selection by pressing the Ctrl key or Shift key.
             * @Default {true}
             */
            allowMultiSelection?: boolean;

            /** By using the contextMenuSettings property, you can customize the ContextMenu in the FileExplorer control.
             */
            contextMenuSettings?: ContextMenuSettings;

            /** Sets the root class for FileExplorer theme. This cssClass API allows to use custom skinning option for File Explorer control. By defining the root class by using this API, you
             * have to include this root class in CSS.
             */
            cssClass?: string;

            /** Specify the enablePersistence to FileExplorer to save the current model value in browser cookies for state maintains.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Enables or disables the resize support in FileExplorer control.
             * @Default {false}
             */
            enableResize?: boolean;

            /** Enables or disables the Right to Left alignment support in FileExplorer control.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Enables or disables the thumbnail image compression option in FileExplorer control. By enabling this option, you can reduce the thumbnail image size while loading.
             * @Default {false}
             */
            enableThumbnailCompress?: boolean;

            /** Allows specified type of files only to display in FileExplorer control.
             * @Default {* . *}
             */
            fileTypes?: string;

            /** By using filterSettings property, you can customize the search functionality of the search bar in FileExplorer control.
             */
            filterSettings?: FilterSettings;

            /** By using the gridSettings property, you can customize the grid behavior in the FileExplorer control.
             */
            gridSettings?: GridSettings;

            /** Specifies the height of FileExplorer control.
             * @Default {400}
             */
            height?: string|number;

            /** Enables or disables the responsive support for FileExplorer control during the window resizing time.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Sets the file view type. There are three view types available such as Grid, Tile and Large icons. See layoutType.
             * @Default {ej.FileExplorer.layoutType.Grid}
             */
            layout?: ej.FileExplorer.layoutType|string;

            /** Sets the culture in FileExplorer.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the maximum height of FileExplorer control.
             * @Default {null}
             */
            maxHeight?: string|number;

            /** Sets the maximum width of FileExplorer control.
             * @Default {null}
             */
            maxWidth?: string|number;

            /** Sets the minimum height of FileExplorer control.
             * @Default {250px}
             */
            minHeight?: string|number;

            /** Sets the minimum width of FileExplorer control.
             * @Default {400px}
             */
            minWidth?: string|number;

            /** The property path denotes the filesystem path that are to be explored. The path for the filesystem can be physical path or relative path, but it has to be relevant to where the
             * Web API is hosted.
             */
            path?: string;

            /** Sets the alias name of root folder name in FileExplorer. It is used to replace the actual root folder name in FileExplorer.
             */
            rootFolderName?: string;

            /** The selectedFolder is used to select the specified folder of FileExplorer control.
             */
            selectedFolder?: string;

            /** The selectedItems is used to select the specified items (file, folder) of FileExplorer control.
             */
            selectedItems?: string|any[];

            /** Enables or disables the checkbox option in FileExplorer control.
             * @Default {true}
             */
            showCheckbox?: boolean;

            /** Enables or disables the context menu option in FileExplorer control.
             * @Default {true}
             */
            showContextMenu?: boolean;

            /** Enables or disables the footer in FileExplorer control. The footer element displays the details of the current selected files and folders. And also the footer having the switcher
             * to change the layout view.
             * @Default {true}
             */
            showFooter?: boolean;

            /** FileExplorer control is displayed with rounded corner when this property is set to true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** FileExplorer control is rendered with thumbnail preview of images in Tile and LargeIcons layout when this property set to true.
             * @Default {true}
             */
            showThumbnail?: boolean;

            /** Shows or disables the toolbar in FileExplorer control.
             * @Default {true}
             */
            showToolbar?: boolean;

            /** Enables or disables the navigation pane in FileExplorer control. The navigation pane contains a tree view element that displays all the folders from the filesystem in a
             * hierarchical manner. This is useful to a quick navigation of any folder in the filesystem.
             * @Default {true}
             */
            showNavigationPane?: boolean;

            /** The tools property is used to configure and group required toolbar items in FileExplorer control.
             * @Default {{ creation: [NewFolder], navigation: [Back, Forward, Upward], addressBar: [Addressbar], editing: [Refresh, Upload, Delete, Rename, Download], copyPaste: [Cut, Copy,
             * Paste], getProperties: [Details], searchBar: [Searchbar], layout: [Layout], sortBy: [SortBy]}}
             */
            tools?: any;

            /** The toolsList property is used to arrange the toolbar items in the FileExplorer control.
             * @Default {[layout, creation, navigation, addressBar, editing, copyPaste, sortBy, getProperties, searchBar]}
             */
            toolsList?: any[];

            /** Gets or sets an object that indicates whether to customize the upload behavior in the FileExplorer.
             */
            uploadSettings?: UploadSettings;

            /** Specifies the virtual item count for virtual support.
             * @Default {0}
             */
            virtualItemCount?: number;

            /** Specifies the width of FileExplorer control.
             * @Default {850}
             */
            width?: string|number;

            /** Fires before the AJAX request is performed.
             */
            beforeAjaxRequest?(e: BeforeAjaxRequestEventArgs): void;

            /** Fires before downloading the files.
             */
            beforeDownload?(e: BeforeDownloadEventArgs): void;

            /** Fires before getting a requested image from server. Also this event will be triggered when you have enabled thumbnail image compression option in FileExplorer.Using this event,
             * you can customize the image compression size.
             */
            beforeGetImage?(e: BeforeGetImageEventArgs): void;

            /** Fires before files or folders open.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires before uploading the files.
             */
            beforeUpload?(e: BeforeUploadEventArgs): void;

            /** Fires before opening the upload dialog.
             */
            beforeUploadDialogOpen?(e: BeforeUploadDialogOpenEventArgs): void;

            /** Event is fired before the upload progress is started.
             */
            beforeUploadSend?(e: BeforeUploadSendEventArgs): void;

            /** Fires when FileExplorer control was created
             */
            create?(e: CreateEventArgs): void;

            /** Fires when file or folder is copied successfully.
             */
            copy?(e: CopyEventArgs): void;

            /** Fires when new folder is created successfully in file system.
             */
            createFolder?(e: CreateFolderEventArgs): void;

            /** Fires when file or folder is cut successfully.
             */
            cut?(e: CutEventArgs): void;

            /** Fires when the FileExplorer is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when the files or directory has been started to drag over on the FileExplorer
             */
            dragStart?(e: DragStartEventArgs): void;

            /** Fires when the files or directory is dragging over on the FileExplorer.
             */
            drag?(e: DragEventArgs): void;

            /** Fires when the files or directory has been stopped to drag over on FileExplorer
             */
            dragStop?(e: DragStopEventArgs): void;

            /** Fires when the files or directory is dropped to the target folder of FileExplorer
             */
            drop?(e: DropEventArgs): void;

            /** Fires after loading the requested image from server. Using this event, you can get the details of loaded image.
             */
            getImage?(e: GetImageEventArgs): void;

            /** Fires when keydown in FileExplorer control.
             */
            keydown?(e: KeydownEventArgs): void;

            /** Fires when the file view type is changed.
             */
            layoutChange?(e: LayoutChangeEventArgs): void;

            /** Fires when before the ContextMenu opening.
             */
            menuBeforeOpen?(e: MenuBeforeOpenEventArgs): void;

            /** Fires when click the ContextMenu item.
             */
            menuClick?(e: MenuClickEventArgs): void;

            /** Fires when ContextMenu is successfully opened.
             */
            menuOpen?(e: MenuOpenEventArgs): void;

            /** Fires when files are successfully opened.
             */
            open?(e: OpenEventArgs): void;

            /** Fires when a file or folder is pasted successfully.
             */
            paste?(e: PasteEventArgs): void;

            /** Fires when file or folder is deleted successfully.
             */
            remove?(e: RemoveEventArgs): void;

            /** Fires when resizing is performed for FileExplorer.
             */
            resize?(e: ResizeEventArgs): void;

            /** Fires when resizing is started for FileExplorer.
             */
            resizeStart?(e: ResizeStartEventArgs): void;

            /** Fires this event when the resizing is stopped for FileExplorer.
             */
            resizeStop?(e: ResizeStopEventArgs): void;

            /** Fires when the items from grid view or tile view of FileExplorer control is selected.
             */
            select?(e: SelectEventArgs): void;

            /** Triggered when refresh the template column elements in the grid view of FileExplorer control.
             */
            templateRefresh?(e: TemplateRefreshEventArgs): void;

            /** Fires when the items from grid view or tile view or large icons view of FileExplorer control is unselected.
             */
            unselect?(e: UnselectEventArgs): void;

            /** Event is fired when the file upload progress gets completed.
             */
            uploadComplete?(e: UploadCompleteEventArgs): void;

            /** Event is fired when the file upload fails due to some error.
             */
            uploadError?(e: UploadErrorEventArgs): void;

            /** Event is fired when the file upload progress gets succeeded.
             */
            uploadSuccess?(e: UploadSuccessEventArgs): void;
        }

        export interface BeforeAjaxRequestEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the AJAX request data
             */
            data?: any;

            /** returns the FileExplorer model
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface BeforeDownloadEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the downloaded file names.
             */
            files?: string[];

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the path of currently opened item.
             */
            path?: string;

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeGetImageEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** enable or disable the image compress option.
             */
            canCompress?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the expected image size.
             */
            size?: any;

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeOpenEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the opened item type.
             */
            itemType?: string;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the path of currently opened item.
             */
            path?: string;

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeUploadEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the path of currently opened item.
             */
            path?: string;

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the upload item details.
             */
            uploadItemDetails?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeUploadDialogOpenEventArgs {

            /** returns Selected FileList objects
             */
            files?: any;

            /** returns the FileExplorer model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeUploadSendEventArgs {

            /** if the event is cancelled; otherwise, false
             */
            cancel?: boolean;

            /** selected FileList Object
             */
            files?: any;

            /** returns the upload model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** XHR-AJAX Object for reference
             */
            xhr?: any;
        }

        export interface CreateEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CopyEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of copied file/folder.
             */
            name?: string[];

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the source path.
             */
            sourcePath?: string;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CreateFolderEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the AJAX response data
             */
            data?: any;

            /** returns the FileExplorer model
             */
            model?: ej.FileExplorer.Model;

            /** returns the selected item details
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CutEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of moved file or folder.
             */
            name?: string[];

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the source path.
             */
            sourcePath?: string;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DragStartEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the dragging element.
             */
            target?: any;

            /** returns the path of dragging element.
             */
            targetPath?: string;

            /** returns the dragging file details.
             */
            selectedItems?: any;
        }

        export interface DragEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the target element.
             */
            target?: any;

            /** returns the name of target element.
             */
            targetElementName?: string;

            /** returns the path of target element.
             */
            targetPath?: string;
        }

        export interface DragStopEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the target element.
             */
            target?: any;

            /** returns the path of target element.
             */
            targetPath?: string;

            /** returns the name of target element
             */
            targetElementName?: string;

            /** returns the action, which is performed after dropping the files (upload/ move).
             */
            dropAction?: string;

            /** returns the dragging file details
             */
            fileInfo?: any;
        }

        export interface DropEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the target element.
             */
            target?: any;

            /** returns the name of target folder.
             */
            targetFolder?: string;

            /** returns the path of target folder.
             */
            targetPath?: string;

            /** returns the dragging element details.
             */
            fileInfo?: any;

            /** returns the action, which is performed after dropping the files (upload/ move).
             */
            dropAction?: string;
        }

        export interface GetImageEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** loaded image path.
             */
            path?: string;

            /** loaded image element
             */
            element?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** original arguments of image load or error event
             */
            originalArgs?: any;

            /** returns the action type, which specifies thumbnail preview or opening image.
             */
            action?: string;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface KeydownEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the downed key keyCode value
             */
            keyCode?: number;

            /** returns altKey value.
             */
            altKey?: boolean;

            /** returns shiftKey value.
             */
            shiftKey?: boolean;

            /** returns ctrlKey value.
             */
            ctrlKey?: boolean;

            /** returns the event object.
             */
            originalArgs?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface LayoutChangeEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** return true when we change the layout via interaction, else false.
             */
            isInteraction?: boolean;

            /** returns the current view type.
             */
            layoutType?: string;

            /** returns the FileExplorer model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface MenuBeforeOpenEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the name of ContextMenu items group.
             */
            contextMenu?: string;

            /** returns the dataSource of ContextMenu.
             */
            dataSource?: any[];

            /** returns the element of ContextMenu.
             */
            element?: any;

            /** returns the event of ContextMenu.
             */
            events?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the target element.
             */
            target?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface MenuClickEventArgs {

            /** returns the ID of clicked ContextMenu item.
             */
            ID?: string;

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the name of ContextMenu items group.
             */
            contextMenu?: string;

            /** returns the element of clicked ContextMenu item.
             */
            element?: any;

            /** returns the event of ContextMenu.
             */
            event?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the parent element ID of clicked ContextMenu item.
             */
            parentId?: string;

            /** returns the parent element text of clicked ContextMenu item.
             */
            parentText?: string;

            /** returns the text of clicked ContextMenu item.
             */
            text?: string;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface MenuOpenEventArgs {

            /** set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the name of ContextMenu items group.
             */
            contextMenu?: string;

            /** returns the element of ContextMenu.
             */
            element?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the target element.
             */
            target?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface OpenEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the opened item type.
             */
            itemType?: string;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the path of currently opened item.
             */
            path?: string;

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface PasteEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of moved/copied file or folder.
             */
            name?: string[];

            /** returns the selected item details.
             */
            selectedItems?: any;

            /** returns the target folder item details.
             */
            targetFolder?: any;

            /** returns the target path.
             */
            targetPath?: string;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface RemoveEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the AJAX response data.
             */
            data?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the names of deleted items.
             */
            name?: string;

            /** returns the path of deleted item.
             */
            path?: string;

            /** returns the removed item details.
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mouse move event args.
             */
            event?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeStartEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the mouse down event args.
             */
            event?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeStopEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the mouse leave event args.
             */
            event?: any;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface SelectEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** returns the name of selected items.
             */
            name?: string[];

            /** returns the path of selected items.
             */
            path?: string;

            /** returns the selected item details
             */
            selectedItems?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface TemplateRefreshEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** Returns the cell object.
             */
            cell?: ej.FileExplorer.Model;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the current row data.
             */
            data?: any;

            /** Returns the grid model of FileExplorer.
             */
            model?: any;

            /** Returns the current row index.
             */
            rowIndex?: number;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface UnselectEventArgs {

            /** Returns the FileExplorer model.
             */
            model?: ej.FileExplorer.Model;

            /** Returns the name of unselected item.
             */
            name?: string;

            /** Returns the name of unselected items.
             */
            names?: string[];

            /** Returns the type of unselected item.
             */
            nodeType?: string;

            /** Returns the path of unselected item.
             */
            path?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the unselected item details.
             */
            unselectedItem?: any;

            /** Returns the unselected items details.
             */
            unselectedItems?: any[];
        }

        export interface UploadCompleteEventArgs {

            /** AJAX event argument for reference
             */
            e?: any;

            /** details about the error information
             */
            error?: string;

            /** uploaded file list
             */
            files?: any;

            /** returns the Upload model
             */
            model?: any;

            /** response from the server
             */
            responseText?: string;

            /** successfully uploaded files list
             */
            success?: any;

            /** returns the name of the event
             */
            type?: string;

            /** XHR-AJAX Object for reference
             */
            xhr?: any;
        }

        export interface UploadErrorEventArgs {

            /** error event action details
             */
            action?: string;

            /** details about the error information
             */
            error?: string;

            /** returns the details of the uploaded files
             */
            files?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface UploadSuccessEventArgs {

            /** AJAX event argument for reference
             */
            e?: any;

            /** uploaded file list
             */
            files?: any;

            /** returns the Upload model
             */
            model?: any;

            /** response from the server
             */
            responseText?: string;

            /** returns the name of the event
             */
            type?: string;

            /** XHR-AJAX Object for reference
             */
            xhr?: any;
        }

        export interface ContextMenuSettings {

            /** The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, SortBy, |, NewFolder, Upload, |,
             * Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any;

            /** The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
             * @Default {[]}
             */
            customMenuFields?: any[];
        }

        export interface FilterSettings {

            /** It allows to search the text given in search Textbox in every keyup event. When this property was set as false, searching will works only on Enter key and searchbar blur.
             * @Default {true}
             */
            allowSearchOnTyping?: boolean;

            /** Enables or disables to perform the filter operation with case sensitive.
             * @Default {false}
             */
            caseSensitiveSearch?: boolean;

            /** Sets the search filter type. There are several filter types available such as &quot;startswith&quot;, &quot;contains&quot;, &quot;endswith&quot;. See filterType.
             * @Default {ej.FileExplorer.filterType.Contains}
             */
            filterType?: ej.FilterType|string;
        }

        export interface GridSettings {

            /** Allows to Resize the width of the columns by simply click and move the particular column header line.
             * @Default {true}
             */
            allowResizing?: boolean;

            /** Gets or sets a value that indicates whether to enable the dynamic sorting behavior on grid data. Sorting can be done through clicking on particular column header.
             * @Default {true}
             */
            allowSorting?: boolean;

            /** Gets or sets an object that indicates to render the grid with specified columns. You can use this property same as the column property in Grid control.
             * @Default {[{ field: name, headerText: Name, width: 30% }, { field: dateModified, headerText: Date Modified, width: 30% }, { field: type, headerText: Type, width: 15% }, { field:
             * size, headerText: Size, width: 12%, textAlign: right, headerTextAlign: left }]}
             */
            columns?: any[];
        }

        export interface UploadSettings {

            /** Enables or disables the multiple files upload. When it is enabled, you can upload multiple files at a time and when disabled, you can upload only one file at a time.
             * @Default {true}
             */
            allowMultipleFile?: boolean;

            /** Enables or disables the auto upload option while uploading files in FileExplorer control.
             * @Default {false}
             */
            autoUpload?: boolean;

            /** Specifies the actions for upload dialog during initialization.
             * @Default {{ modal:false, closeOnComplete:false, content:null, drag:true }}
             */
            dialogAction?: any;

            /** Specifies the position at which the upload dialog is displayed using X and Y values. X: Sets the left position value for dialog. Y: Sets the top position value for dialog.
             * @Default {null}
             */
            dialogPosition?: any;

            /** Specifies the maximum file size allowed to upload. It accepts the value in bytes.
             * @Default {31457280}
             */
            maxFileSize?: number;

            /** Specifies the file details which are to be displayed when selected for upload by setting the showFileDetails to true.
             * @Default {true}
             */
            showFileDetails?: boolean;
        }

        enum layoutType {

            ///Supports to display files in tile view
            Tile,

            ///Supports to display files in grid view
            Grid,

            ///Supports to display files as large icons
            LargeIcons
        }

    }

    class DatePicker extends ej.Widget {
        static fn: DatePicker;
        constructor(element: JQuery | Element, options?: DatePicker.Model);
        static Locale: any;
        model: DatePicker.Model;
        defaults: DatePicker.Model;

        /** Disables the DatePicker control.
         * @returns {void}
         */
        disable(): void;

        /** Enable the DatePicker control, if it is in disabled state.
         * @returns {void}
         */
        enable(): void;

        /** Returns the current date value in the DatePicker control.
         * @returns {string}
         */
        getValue(): string;

        /** sets the date value for the DatePicker.
         * @returns {string}
         */
        setValue(): string;

        /** Close the DatePicker popup, if it is in opened state.
         * @returns {void}
         */
        hide(): void;

        /** Opens the DatePicker popup.
         * @returns {void}
         */
        show(): void;
    }
    export namespace DatePicker {

        export interface Model {

            /** Used to allow or restrict the editing in DatePicker input field directly. By setting false to this API, You can only pick the date from DatePicker popup.
             * @Default {true}
             */
            allowEdit?: boolean;

            /** allow or restrict the drill down to multiple levels of view (month/year/decade) in DatePicker calendar
             * @Default {true}
             */
            allowDrillDown?: boolean;

            /** Disable the list of specified date value.
             * @Default {{}}
             */
            blackoutDates?: any;

            /** Sets the specified text value to the today button in the DatePicker calendar.
             * @Default {Today}
             */
            buttonText?: string;

            /** Sets the root CSS class for DatePicker theme, which is used customize.
             */
            cssClass?: string;

            /** Formats the value of the DatePicker in to the specified date format. If this API is not specified, dateFormat will be set based on the current culture of DatePicker.
             * @Default {MM/dd/yyyy}
             */
            dateFormat?: string;

            /** Specifies the header format of days in DatePicker calendar. See below to get available Headers options
             * @Default {ej.DatePicker.Header.Short}
             */
            dayHeaderFormat?: string|ej.DatePicker.Header;

            /** Specifies the navigation depth level in DatePicker calendar. This option is not applied when start level view option is lower than depth level view. See below to know available
             * levels in DatePicker Calendar
             */
            depthLevel?: string|ej.DatePicker.Level;

            /** Allows to embed the DatePicker calendar in the page. Also associates DatePicker with div element instead of input.
             * @Default {false}
             */
            displayInline?: boolean;

            /** Enables or disables the animation effect with DatePicker calendar.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Enable or disable the DatePicker control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Sustain the entire widget model of DatePicker even after form post or browser refresh
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Displays DatePicker calendar along with DatePicker input field in Right to Left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Allows to enter valid or invalid date in input textbox and indicate as error if it is invalid value, when this API value is set to true. For false value, invalid date is not
             * allowed to input field and corrected to valid date automatically, even if invalid date is given.
             * @Default {false}
             */
            enableStrictMode?: boolean;

            /** Used  the required fields for special Dates in DatePicker in order to customize the special dates in a calendar.
             * @Default {null}
             */
            fields?: Fields;

            /** Specifies the header format to be displayed in the DatePicker calendar.
             * @Default {MMMM yyyy}
             */
            headerFormat?: string;

            /** Specifies the height of the DatePicker input text.
             * @Default {28px}
             */
            height?: string;

            /** HighlightSection is used to highlight currently selected date's month/week/workdays. See below to get available HighlightSection options
             * @Default {none}
             */
            highlightSection?: string|ej.DatePicker.HighlightSection;

            /** Weekend  dates will be highlighted when this property is set to true.
             * @Default {false}
             */
            highlightWeekend?: boolean;

            /** Specifies the HTML Attributes of the DatePicker.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Change the DatePicker calendar and date format based on given culture.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the maximum date in the calendar that the user can select.
             * @Default {new Date(2099, 11, 31)}
             */
            maxDate?: string|Date;

            /** Specifies the minimum date in the calendar that the user can select.
             * @Default {new Date(1900, 00, 01)}
             */
            minDate?: string|Date;

            /** Allows to toggles the read only state of the DatePicker. When the widget is readOnly, it doesn't allow your input.
             * @Default {false}
             */
            readOnly?: boolean;

            /** It allow to show/hide the disabled date ranges
             * @Default {true}
             */
            showDisabledRange?: boolean;

            /** It allows to display footer in DatePicker calendar.
             * @Default {true}
             */
            showFooter?: boolean;

            /** It allows to display/hides the other months days from the current month calendar in a DatePicker.
             * @Default {true}
             */
            showOtherMonths?: boolean;

            /** Shows/hides the date icon button at right side of textbox, which is used to open or close the DatePicker calendar popup.
             * @Default {true}
             */
            showPopupButton?: boolean;

            /** DatePicker input is displayed with rounded corner when this property is set to true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Used to show the tooltip when hovering on the days in the DatePicker calendar.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Specifies the special dates in DatePicker.
             * @Default {null}
             */
            specialDates?: any;

            /** Specifies the start day of the week in DatePicker calendar.
             * @Default {0}
             */
            startDay?: number;

            /** Specifies the start level view in DatePicker calendar. See below available Levels
             * @Default {ej.DatePicker.Level.Month}
             */
            startLevel?: string|ej.DatePicker.Level;

            /** Specifies the number of months to be navigate for one click of next and previous button in a DatePicker Calendar.
             * @Default {1}
             */
            stepMonths?: number;

            /** Provides option to customize the tooltip format.
             * @Default {ddd MMM dd yyyy}
             */
            tooltipFormat?: string;

            /** Sets the jQuery validation support to DatePicker Date value. See validation
             * @Default {null}
             */
            validationMessage?: any;

            /** Sets the jQuery validation custom rules to the DatePicker. see validation
             * @Default {null}
             */
            validationRules?: any;

            /** sets or returns the current value of DatePicker
             * @Default {null}
             */
            value?: string|Date;

            /** Specifies the water mark text to be displayed in input text.
             * @Default {Select date}
             */
            watermarkText?: string;

            /** Allows to embed  a new column with the calendar in the popup, which will display the week number of every week in a calendar year.
             * @Default {false}
             */
            weekNumber?: boolean;

            /** Specifies the width of the DatePicker input text.
             * @Default {160px}
             */
            width?: string;

            /** Fires before closing the DatePicker popup.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** Fires when each date is created in the DatePicker popup calendar.
             */
            beforeDateCreate?(e: BeforeDateCreateEventArgs): void;

            /** Fires before opening the DatePicker popup.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when the DatePicker input value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when DatePicker popup is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Fires when the DatePicker is created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the DatePicker is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when DatePicker input gets focus.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires when DatePicker input loses the focus.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires when calender view navigates to month/year/decade/century.
             */
            navigate?(e: NavigateEventArgs): void;

            /** Fires when DatePicker popup is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Fires when a date is selected from the DatePicker popup.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface BeforeCloseEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DatePicker.
             */
            events?: any;

            /** returns the DatePicker popup.
             */
            element?: HTMLElement;
        }

        export interface BeforeDateCreateEventArgs {

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the currently created date object.
             */
            date?: any;

            /** returns the current DOM object of the date from the Calendar.
             */
            element?: HTMLElement;

            /** returns the currently created date as string type.
             */
            value?: string;
        }

        export interface BeforeOpenEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DatePicker.
             */
            events?: any;

            /** returns the DatePicker popup.
             */
            element?: HTMLElement;
        }

        export interface ChangeEventArgs {

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the DatePicker input value.
             */
            value?: string;

            /** returns the previously selected value.
             */
            prevDate?: string;
        }

        export interface CloseEventArgs {

            /** returns the current date object.
             */
            date?: any;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the current date value.
             */
            value?: string;

            /** returns the previously selected value.
             */
            prevDate?: string;
        }

        export interface CreateEventArgs {

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the currently selected date value.
             */
            value?: string;
        }

        export interface FocusOutEventArgs {

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the currently selected date value.
             */
            value?: string;

            /** returns the previously selected date value.
             */
            prevDate?: string;
        }

        export interface NavigateEventArgs {

            /** returns the current date object.
             */
            date?: any;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the previous view state of calendar.
             */
            navigateFrom?: string;

            /** returns the current view state of calendar.
             */
            navigateTo?: string;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current date value.
             */
            value?: string;
        }

        export interface OpenEventArgs {

            /** returns the current date object.
             */
            date?: any;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current date value.
             */
            value?: string;

            /** returns the previously selected value.
             */
            prevDate?: string;
        }

        export interface SelectEventArgs {

            /** returns the selected date object.
             */
            date?: any;

            /** returns the DatePicker model.
             */
            model?: ej.DatePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the current date value.
             */
            value?: string;

            /** returns the previously selected value.
             */
            prevDate?: string;

            /** returns whether the  currently selected date is special date or not.
             */
            isSpecialDay?: string;
        }

        export interface Fields {

            /** Specifies the specials dates
             */
            date?: string;

            /** Specifies the icon class to special dates.
             */
            iconClass?: string;

            /** Specifies the tooltip to special dates.
             */
            tooltip?: string;

            /** Specifies the CSS class to customize the date.
             */
            cssClass?: string;
        }

        enum Header {

            ///Removes day header in DatePicker
            None,

            ///sets  the short format of day name (like Sun) in header in DatePicker
            Short,

            ///sets  the Min format of day name (like su) in header format DatePicker
            Min
        }


        enum Level {

            ///allow  navigation upto year level in  DatePicker
            Year,

            ///allow  navigation upto decade level in  DatePicker
            Decade,

            ///allow  navigation upto Century level in  DatePicker
            Century
        }


        enum HighlightSection {

            ///Highlight the week of the currently  selected date in DatePicker popup calendar
            Week,

            ///Highlight the workdays in a currently  selected date's week in DatePicker popup calendar
            WorkDays,

            ///Nothing will be highlighted, remove highlights from DatePicker popup calendar if already exists
            None
        }

    }

    class DateTimePicker extends ej.Widget {
        static fn: DateTimePicker;
        constructor(element: JQuery | Element, options?: DateTimePicker.Model);
        static Locale: any;
        model: DateTimePicker.Model;
        defaults: DateTimePicker.Model;

        /** Disables the DateTimePicker control.
         * @returns {void}
         */
        disable(): void;

        /** Enables the DateTimePicker control.
         * @returns {void}
         */
        enable(): void;

        /** Returns the current datetime value in the DateTimePicker.
         * @returns {string}
         */
        getValue(): string;

        /** Hides or closes the DateTimePicker popup.
         * @returns {void}
         */
        hide(): void;

        /** Updates the current system date value and time value to the DateTimePicker.
         * @returns {void}
         */
        setCurrentDateTime(): void;

        /** Shows or opens the DateTimePicker popup.
         * @returns {void}
         */
        show(): void;
    }
    export namespace DateTimePicker {

        export interface Model {

            /** Used to allow or restrict the editing in DateTimePicker input field directly. By setting false to this API, You can only pick the date and time values from DateTimePicker popup.
             * @Default {true}
             */
            allowEdit?: boolean;

            /** Displays the custom text for the buttons inside the DateTimePicker popup. when the culture value changed, we can change the buttons text based on the culture.
             * @Default {{ today: Today, timeNow: Time Now, done: Done, timeTitle: Time }}
             */
            buttonText?: ButtonText;

            /** Disable the list of specified date value.
             * @Default {{}}
             */
            blackoutDates?: any;

            /** Set the root class for DateTimePicker theme. This cssClass API helps to use custom skinning option for DateTimePicker control.
             */
            cssClass?: string;

            /** Defines the datetime format displayed in the DateTimePicker. The value should be a combination of date format and time format.
             * @Default {M/d/yyyy h:mm tt}
             */
            dateTimeFormat?: string;

            /** Specifies the header format of the datepicker inside the DateTimePicker popup. See DatePicker.Header
             * @Default {ej.DatePicker.Header.Short}
             */
            dayHeaderFormat?: ej.DatePicker.Header|string;

            /** Specifies the navigation depth level in DatePicker calendar inside DateTimePicker popup. This option is not applied when start level view option is lower than depth level view.
             * See ej.DatePicker.Level
             */
            depthLevel?: ej.DatePicker.Level|string;

            /** Specifies the list of time range to be disabled.
             * @Default {{}}
             */
            disableTimeRanges?: any;

            /** Enable or disable the animation effect in DateTimePicker.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** When this property is set to false, it disables the DateTimePicker control.
             * @Default {false}
             */
            enabled?: boolean;

            /** Enables or disables the state maintenance of DateTimePicker.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Sets the DateTimePicker direction as right to left alignment.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** When enableStrictMode true it allows the value outside of the range also but it highlights the textbox with error class, otherwise it internally changed to the correct value.
             * @Default {false}
             */
            enableStrictMode?: boolean;

            /** Specifies the header format to be displayed in the DatePicker calendar inside the DateTimePicker popup.
             * @Default {MMMM yyyy}
             */
            headerFormat?: string;

            /** Defines the height of the DateTimePicker textbox.
             * @Default {30}
             */
            height?: string|number;

            /** Specifies the HTML Attributes of the ejDateTimePicker
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Sets the time interval between the two adjacent time values in the time popup.
             * @Default {30}
             */
            interval?: number;

            /** Defines the localization culture for DateTimePicker.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the maximum value to the DateTimePicker. Beyond the maximum value an error class is added to the wrapper element when we set true to enableStrictMode.
             * @Default {new Date(12/31/2099 11:59:59 PM)}
             */
            maxDateTime?: string|Date;

            /** Sets the minimum value to the DateTimePicker. Behind the minimum value an error class is added to the wrapper element.
             * @Default {new Date(1/1/1900 12:00:00 AM)}
             */
            minDateTime?: string|Date;

            /** Specifies the popup position of DateTimePicker.See below to know available popup positions
             * @Default {ej.PopupPosition.Bottom}
             */
            popupPosition?: string|ej.popupPosition;

            /** Indicates that the DateTimePicker value can only be read and canâ€™t change.
             * @Default {false}
             */
            readOnly?: boolean;

            /** It allows showing days in other months of DatePicker calendar inside the DateTimePicker popup.
             * @Default {true}
             */
            showOtherMonths?: boolean;

            /** Shows or hides the arrow button from the DateTimePicker textbox. When the button disabled, the DateTimePicker popup opens while focus in the textbox and hides while focus out from
             * the textbox.
             * @Default {true}
             */
            showPopupButton?: boolean;

            /** Changes the sharped edges into rounded corner for the DateTimePicker textbox and popup.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the special dates in DateTimePicker.
             * @Default {null}
             */
            specialDates?: any;

            /** Specifies the start day of the week in datepicker inside the DateTimePicker popup.
             * @Default {1}
             */
            startDay?: number;

            /** Specifies the start level view in datepicker inside the DateTimePicker popup. See DatePicker.Level
             * @Default {ej.DatePicker.Level.Month or month}
             */
            startLevel?: ej.DatePicker.Level|string;

            /** Specifies the number of months to navigate at one click of next and previous button in datepicker inside the DateTimePicker popup.
             * @Default {1}
             */
            stepMonths?: number;

            /** Defines the time format displayed in the time dropdown inside the DateTimePicker popup.
             * @Default {h:mm tt}
             */
            timeDisplayFormat?: string;

            /** We can drill down up to time interval on selected date with meridian details.
             * @Default {{ enabled: false, interval: 5, showMeridian: false, autoClose: true }}
             */
            timeDrillDown?: TimeDrillDown;

            /** Defines the width of the time dropdown inside the DateTimePicker popup.
             * @Default {100}
             */
            timePopupWidth?: string|number;

            /** Set the jQuery validation error message in DateTimePicker.
             * @Default {null}
             */
            validationMessage?: any;

            /** Set the jQuery validation rules in DateTimePicker.
             * @Default {null}
             */
            validationRules?: any;

            /** Sets the DateTime value to the control.
             */
            value?: string|Date;

            /** Specifies the water mark text to be displayed in input text.
             * @Default {Select date and time}
             */
            watermarkText?: string;

            /** Defines the width of the DateTimePicker textbox.
             * @Default {143}
             */
            width?: string|number;

            /** Fires before the datetime popup closed in the DateTimePicker.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** Fires before the datetime popup open in the DateTimePicker.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when the datetime value changed in the DateTimePicker textbox.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when DateTimePicker popup closes.
             */
            close?(e: CloseEventArgs): void;

            /** Fires after DateTimePicker control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the DateTimePicker is destroyed successfully
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when the focus-in happens in the DateTimePicker textbox.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires when the focus-out happens in the DateTimePicker textbox.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires when DateTimePicker popup opens.
             */
            open?(e: OpenEventArgs): void;
        }

        export interface BeforeCloseEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DateTimePicker model.
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DateTimePicker.
             */
            events?: any;

            /** returns the DateTimePicker popup.
             */
            element?: HTMLElement;
        }

        export interface BeforeOpenEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DateTimePicker model.
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DateTimePicker.
             */
            events?: any;

            /** returns the DateTimePicker popup.
             */
            element?: HTMLElement;
        }

        export interface ChangeEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current value is valid or not
             */
            isValidState?: boolean;

            /** returns the modified datetime value
             */
            value?: string;

            /** returns the previously selected date time value
             */
            prevDateTime?: string;

            /** returns true if change event triggered by interaction, otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CloseEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the modified datetime value
             */
            value?: string;

            /** returns the previously selected date time value
             */
            prevDateTime?: string;
        }

        export interface CreateEventArgs {

            /** returns the DateTimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DateTimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the datetime value, which is in text box
             */
            value?: string;
        }

        export interface FocusOutEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the datetime value, which is in text box
             */
            value?: string;
        }

        export interface OpenEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.DateTimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the modified datetime value
             */
            value?: string;

            /** returns the previously selected date time value
             */
            prevDateTime?: string;
        }

        export interface ButtonText {

            /** Sets the text for the Done button inside the datetime popup.
             */
            done?: string;

            /** Sets the text for the Now button inside the datetime popup.
             */
            timeNow?: string;

            /** Sets the header text for the Time dropdown.
             */
            timeTitle?: string;

            /** Sets the text for the Today button inside the datetime popup.
             */
            today?: string;
        }

        export interface TimeDrillDown {

            /** This is the field to show/hide the timeDrillDown in DateTimePicker.
             */
            enabled?: boolean;

            /** Sets the interval time of minutes on selected date.
             */
            interval?: number;

            /** Allows the user to show or hide the meridian with time in DateTimePicker.
             */
            showMeridian?: boolean;

            /** After choosing the time, the popup will close automatically if we set it as true, otherwise we focus out the DateTimePicker or choose timeNow button for closing the popup.
             */
            autoClose?: boolean;
        }
    }
    enum popupPosition {
        //Opens the DateTimePicker popup below to the DateTimePicker input box
        Bottom,
        //Opens the DateTimePicker popup above to the DateTimePicker input box
        Top,
    }

    class DateRangePicker extends ej.Widget {
        static fn: DateRangePicker;
        constructor(element: JQuery | Element, options?: DateRangePicker.Model);
        static Locale: any;
        model: DateRangePicker.Model;
        defaults: DateRangePicker.Model;

        /** Add the preset ranges to DateRangePicker popup.
         * @param {string} Display name
         * @param {any[]} StartDate and endDate of range.
         * @returns {void}
         */
        addRanges(label: string, range: any[]): void;

        /** Clears the all ranges selections in DateRangePicker popup
         * @returns {void}
         */
        clearRanges(): void;

        /** Disables the DateRangePicker control.
         * @returns {void}
         */
        disable(): void;

        /** Enable the DateRangePicker control, if it is in disabled state.
         * @returns {void}
         */
        enable(): void;

        /** Returns the startDate and endDate values in the selected ranges in the DateRangePicker control.
         * @returns {any}
         */
        getSelectedRange(): any;

        /** Close the DateRangePicker popup, if it is in opened state.
         * @returns {void}
         */
        popupHide(): void;

        /** Opens the DateRangePicker popup.
         * @returns {void}
         */
        popupShow(): void;

        /** set the preset ranges to DateRangePicker popup.
         * @returns {void}
         */
        setRange(): void;
    }
    export namespace DateRangePicker {

        export interface Model {

            /** Used to allow or restrict the editing in DateRangePicker input field directly. By setting false to this API, You can only pick the date ranges from DateRangePicker popup.
             * @Default {true}
             */
            allowEdit?: boolean;

            /** Sets the specified text value to the available buttons (Reset, Cancel, Apply) in the DateRangePicker popup.
             * @Default {{ reset: Reset, cancel: Cancel, apply: Apply}}
             */
            buttonText?: any;

            /** Sets the root CSS class for DateRangePicker theme, which is used to customize.
             */
            cssClass?: string;

            /** Formats the date value of the DateRangePicker in to the specified date format. If this API is not specified, dateFormat will be set based on the current culture of DateRangePicker.
             * @Default {MM/dd/yyyy}
             */
            dateFormat?: string;

            /** Allows to embed the Timepicker align with the calendars in the page, two timepicker will be render, for selecting start and end date.
             * @Default {false}
             */
            enableTimePicker?: boolean;

            /** Enable or disable the DateRangePicker control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Sustain the entire widget model of DateRangePicker even after form post or browser refresh
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specifies the end date of the date ranges.
             * @Default {null}
             */
            endDate?: string|Date;

            /** Specifies the height of the DateRangePicker input.
             * @Default {28px}
             */
            height?: string|number;

            /** Change the DateRangePicker calendar and date format based on given culture.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the maximum date in the calendar that the user can select as a startDate or endDate.
             * @Default {new Date(2099, 11, 31)}
             */
            maxDate?: string|Date;

            /** Specifies the minimum date in the calendar that the user can select as a startDate or endDate.
             * @Default {new Date(1900, 00, 01)}
             */
            minDate?: string|Date;

            /** Used to add the preset ranges. Added ranges using this, will show in popup in right side for easy selection of different preset ranges.
             * @Default {null}
             */
            ranges?: any;

            /** Used to separate the two date strings of the value in the DateRangePicker popup.
             * @Default {-}
             */
            separator?: string;

            /** Specifies the start date of the date ranges
             * @Default {null}
             */
            startDate?: string|Date;

            /** Shows/hides the date icon button at right side of textbox, which is used to open or close the DateRangePicker calendar popup.
             * @Default {true}
             */
            showPopupButton?: boolean;

            /** DateRangePicker input and popup is displayed with rounded corner when this property is set to true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Formats the date value of the DateRangePicker in to the specified time format. If this API is not specified, timeFormat will be set based on the current culture of DateRangePicker.
             * @Default {HH:mm tt}
             */
            timeFormat?: string;

            /** Separated two date values in string format to sets the date ranges in calendars.
             * @Default {null}
             */
            value?: string;

            /** Specifies the water mark text to be displayed in input text.
             * @Default {Select Range}
             */
            watermarkText?: string;

            /** Specifies the width of the DateRangePicker input text.
             * @Default {160px}
             */
            width?: string|number;

            /** Fires before closing the DateRangePicker popup.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** Fires before opening the DateRangePicker popup.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when the DateRangePicker values get changed.
             */
            Change?(e: ChangeEventArgs): void;

            /** Fires when DateRangePicker popup is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Fires when the DateRangePicker is created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the DateRangePicker is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when DateRangePicker popup is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Fires when a date ranges is selected from the DateRangePicker popup.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface BeforeCloseEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DateRangePicker model
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DateRangePicker.
             */
            events?: any;

            /** returns the DateRangePicker popup.
             */
            element?: HTMLElement;
        }

        export interface BeforeOpenEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the event parameters from DateRangePicker.
             */
            events?: any;

            /** returns the DateRangePicker popup.
             */
            element?: HTMLElement;
        }

        export interface ChangeEventArgs {

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the DateRangePicker input value.
             */
            value?: string;

            /** returns the startDate of DateRangePicker.
             */
            startDate?: any;

            /** returns the endDate of the DateRangePicker popup.
             */
            endDate?: any;
        }

        export interface CloseEventArgs {

            /** returns the current date object.
             */
            date?: any;

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the DateRangePicker popup.
             */
            element?: HTMLElement;
        }

        export interface CreateEventArgs {

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface OpenEventArgs {

            /** returns the current date object.
             */
            date?: any;

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the DateRangePicker popup.
             */
            element?: HTMLElement;
        }

        export interface SelectEventArgs {

            /** returns the selected date object.
             */
            startDate?: any;

            /** returns the DateRangePicker model.
             */
            model?: ej.DateRangePicker.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the current date value.
             */
            endDate?: any;
        }
    }

    class Dialog extends ej.Widget {
        static fn: Dialog;
        constructor(element: JQuery | Element, options?: Dialog.Model);
        static Locale: any;
        model: Dialog.Model;
        defaults: Dialog.Model;

        /** Closes the dialog widget dynamically.
         * @returns {any}
         */
        close(): any;

        /** Collapses the content area when it is expanded.
         * @returns {any}
         */
        collapse(): any;

        /** Destroys the Dialog widget.
         * @returns {void}
         */
        destroy(): void;

        /** Expands the content area when it is collapsed.
         * @returns {any}
         */
        expand(): any;

        /** Checks whether the Dialog widget is opened or not. This methods returns Boolean value.
         * @returns {boolean}
         */
        isOpen(): boolean;

        /** Maximizes the Dialog widget.
         * @returns {any}
         */
        maximize(): any;

        /** Minimizes the Dialog widget.
         * @returns {any}
         */
        minimize(): any;

        /** Opens the Dialog widget.
         * @returns {any}
         */
        open(): any;

        /** Pins the dialog in its current position.
         * @returns {any}
         */
        pin(): any;

        /** Refreshes the dialog content dynamically.
         * @returns {void}
         */
        refresh(): void;

        /** Restores the dialog.
         * @returns {any}
         */
        restore(): any;

        /** Unpins the Dialog widget.
         * @returns {any}
         */
        unpin(): any;

        /** Sets the title for the Dialog widget.
         * @param {string} The title for the dialog widget.
         * @returns {any}
         */
        setTitle(Title: string): any;

        /** Sets the content for the Dialog widget dynamically.
         * @param {string} The content for the dialog widget. It accepts both string and HTML string.
         * @returns {any}
         */
        setContent(content: string): any;

        /** Sets the focus on the Dialog widget.
         * @returns {any}
         */
        focus(): any;
    }
    export namespace Dialog {

        export interface Model {

            /** Adds action buttons like close, minimize, pin, maximize in the dialog header.
             */
            actionButtons?: string[];

            /** Specifies the ajaxSettings option to load the content to the Dialog control.
             * @Default {null}
             */
            ajaxSettings?: AjaxSettings;

            /** Enables or disables draggable.
             */
            allowDraggable?: boolean;

            /** Enables or disables keyboard interaction.
             */
            allowKeyboardNavigation?: boolean;

            /** Customizes the Dialog widget animations. The Dialog widget can be animated while opening and closing the dialog. In order to customize animation effects, you need to set
             * â€œenableAnimationâ€ as true. It contains the following sub properties.
             */
            animation?: any;

            /** To Enable or disable the scrolling for background element of the modal dialog. This will work only with modal dialog.
             */
            backgroundScroll?: boolean;

            /** Closes the dialog widget on pressing the ESC key when it is set to true.
             */
            closeOnEscape?: boolean;

            /** The selector for the container element. If the property is set, then dialog will append to the selected element and it is restricted to move only within the specified container
             * element.
             */
            containment?: string;

            /** The content type to load the dialog content at run time. The possible values are null, AJAX, iframe and image. When it is null (default value), the content inside dialog element
             * will be displayed as content and when it is not null, the content will be loaded from the URL specified in the contentUrl property.
             */
            contentType?: string;

            /** The URL to load the dialog content (such as AJAX, image, and iframe). In order to load content from URL, you need to set contentType as â€˜ajaxâ€™ or â€˜iframeâ€™ or â€˜imageâ€™.
             */
            contentUrl?: string;

            /** The root class for the Dialog widget to customize the existing theme.
             */
            cssClass?: string;

            /** Enable or disables animation when the dialog is opened or closed.
             */
            enableAnimation?: boolean;

            /** Enables or disables the Dialog widget.
             */
            enabled?: boolean;

            /** Enable or disables modal dialog. The modal dialog acts like a child window that is displayed on top of the main window/screen and disables the main window interaction until it is
             * closed.
             */
            enableModal?: boolean;

            /** Allows the current model values to be saved in local storage or browser cookies for state maintenance when it is set to true.
             */
            enablePersistence?: boolean;

            /** Allows the dialog to be resized. The dialog cannot be resized less than the minimum height, width values and greater than the maximum height and width.
             */
            enableResize?: boolean;

            /** Displays dialog content from right to left when set to true.
             */
            enableRTL?: boolean;

            /** The CSS class name to display the favicon in the dialog header. In order to display favicon, you need to set showHeader as true since the favicon will be displayed in the dialog
             * header.
             */
            faviconCSS?: string;

            /** Sets the height for the dialog widget. It accepts both string and integer values. For example, it can accepts values like â€œautoâ€, â€œ100%â€, â€œ100pxâ€ as string type and
             * â€œ100â€, â€œ500â€ as integer type.
             */
            height?: string|number;

            /** Specifies the HTML Attributes of the Dialog.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Enable or disables responsive behavior.
             */
            isResponsive?: boolean;

            /** Default Value:{:.param}â€œen-USâ€
             */
            locale?: string;

            /** Sets the maximum height for the dialog widget.
             */
            maxHeight?: string|number;

            /** Sets the maximum width for the dialog widget.
             */
            maxWidth?: string|number;

            /** Sets the minimum height for the dialog widget.
             */
            minHeight?: string|number;

            /** Sets the minimum width for the dialog widget.
             */
            minWidth?: string|number;

            /** Displays the Dialog widget at the given X and Y position.
             */
            position?: any;

            /** Shows or hides the dialog header.
             */
            showHeader?: boolean;

            /** The Dialog widget can be opened by default i.e. on initialization, when it is set to true.
             */
            showOnInit?: boolean;

            /** Enables or disables the rounder corner.
             */
            showRoundedCorner?: boolean;

            /** The selector for the container element. If this property is set, the dialog will be displayed (positioned) based on its container.
             */
            target?: string;

            /** The title text to be displayed in the dialog header. In order to set title, you need to set showHeader as true since the title will be displayed in the dialog header.
             */
            title?: string;

            /** Add or configure the tooltip text for actionButtons in the dialog header.
             */
            tooltip?: any;

            /** Sets the height for the dialog widget. It accepts both string and integer values. For example, it can accepts values like â€œautoâ€, â€œ100%â€, â€œ100pxâ€ as string type and
             * â€œ100â€, â€œ500â€ as integer type.
             */
            width?: string|number;

            /** Sets the z-index value for the Dialog widget.
             */
            zIndex?: number;

            /** Sets the Footer for the Dialog widget.
             */
            showFooter?: boolean;

            /** Sets the FooterTemplate for the Dialog widget.
             */
            footerTemplateId?: string;

            /** Triggered when the custom action button clicked.
             */
            actionButtonClick?(e: ActionButtonClickEventArgs): void;

            /** This event is triggered whenever the AJAX request fails to retrieve the dialog content.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** This event is triggered whenever the AJAX request to retrieve the dialog content, gets succeed.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** This event is triggered before the dialog widgets gets open.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** This event is triggered before the dialog widgets get closed.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** This event is triggered after the dialog widget is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Triggered when the dialog content is collapsed.
             */
            collapse?(e: CollapseEventArgs): void;

            /** Triggered after the dialog content is loaded in DOM.
             */
            contentLoad?(e: ContentLoadEventArgs): void;

            /** Triggered after the dialog is created successfully
             */
            create?(e: CreateEventArgs): void;

            /** Triggered after the dialog widget is destroyed successfully
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered while the dialog is dragged.
             */
            drag?(e: DragEventArgs): void;

            /** Triggered when the user starts dragging the dialog.
             */
            dragStart?(e: DragStartEventArgs): void;

            /** Triggered when the user stops dragging the dialog.
             */
            dragStop?(e: DragStopEventArgs): void;

            /** Triggered when the dialog content is expanded.
             */
            expand?(e: ExpandEventArgs): void;

            /** Triggered after the dialog is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Triggered while the dialog is resized.
             */
            resize?(e: ResizeEventArgs): void;

            /** Triggered when the user starts resizing the dialog.
             */
            resizeStart?(e: ResizeStartEventArgs): void;

            /** Triggered when the user stops resizing the dialog.
             */
            resizeStop?(e: ResizeStopEventArgs): void;
        }

        export interface ActionButtonClickEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Name of the event target attribute.
             */
            buttonID?: string;

            /** Name of the event.
             */
            type?: string;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event current target title.
             */
            currentTarget?: string;

            /** Name of the event.
             */
            event?: string;
        }

        export interface AjaxErrorEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Error page content.
             */
            responseText?: string;

            /** Error code.
             */
            status?: number;

            /** The corresponding error description.
             */
            statusText?: string;
        }

        export interface AjaxSuccessEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Response content.
             */
            data?: string;
        }

        export interface BeforeOpenEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event
             */
            type?: string;
        }

        export interface BeforeCloseEventArgs {

            /** Current event object.
             */
            event?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns true when the dialog activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CloseEventArgs {

            /** Current event object.
             */
            event?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event
             */
            type?: string;

            /** returns true when the Dialog activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CollapseEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns true when the Dialog activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface ContentLoadEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Content type
             */
            contentType?: any;
        }

        export interface CreateEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface DragEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface DragStartEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface DragStopEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface ExpandEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns true when the Dialog activated by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface OpenEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface ResizeEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event.
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface ResizeStartEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface ResizeStopEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the dialog model object.
             */
            model?: ej.Dialog.Model;

            /** Name of the event
             */
            type?: string;

            /** Current event object.
             */
            event?: any;
        }

        export interface AjaxSettings {

            /** It specifies, whether to enable or disable asynchronous request.
             */
            async?: boolean;

            /** It specifies the page will be cached in the web browser.
             */
            cache?: boolean;

            /** It specifies the type of data is send in the query string.
             */
            contentType?: string;

            /** It specifies the data as an object, will be passed in the query string.
             */
            data?: any;

            /** It specifies the type of data that you're expecting back from the response.
             */
            dataType?: string;

            /** It specifies the HTTP request type.
             */
            type?: string;
        }
    }

    class DropDownList extends ej.Widget {
        static fn: DropDownList;
        constructor(element: JQuery | Element, options?: DropDownList.Model);
        static Locale: any;
        model: DropDownList.Model;
        defaults: DropDownList.Model;

        /** Adding a single item or an array of items into the DropDownList allows you to specify all the field attributes such as value, template, image URL, and HTML attributes for those
         * items.Grouping and sorting will not be supported when we add items through this method.
         * @param {any|any[]}  this parameter should have field attributes with respect to mapped field attributes and it's corresponding values to fields
         * @returns {void}
         */
        addItem(data: any|any[]): void;

        /** This method is used to select all the items in the DropDownList.
         * @returns {void}
         */
        checkAll(): void;

        /** Clears the text in the DropDownList textbox.
         * @returns {void}
         */
        clearText(): void;

        /** Destroys the DropDownList widget.
         * @returns {void}
         */
        destroy(): void;

        /** This property is used to disable the DropDownList widget.
         * @returns {void}
         */
        disable(): void;

        /** This property disables the set of items in the DropDownList.
         * @param {string|number|any[]}  disable the given index list items
         * @returns {void}
         */
        disableItemsByIndices(index: string|number|any[]): void;

        /** This property enables the DropDownList control.
         * @returns {void}
         */
        enable(): void;

        /** Enables an Item or set of Items that are disabled in the DropDownList
         * @param {string|number|any[]}  enable the given index list items if it's disabled
         * @returns {void}
         */
        enableItemsByIndices(index: string|number|any[]): void;

        /** This method retrieves the items using given value.
         * @param {string|number|any}  Return the whole object of data based on given value
         * @returns {any[]}
         */
        getItemDataByValue(value: string|number|any): any[];

        /** This method is used to retrieve the items that are bound with the DropDownList.
         * @returns {any}
         */
        getListData(): any;

        /** This method is used to get the selected items in the DropDownList.
         * @returns {any[]}
         */
        getSelectedItem(): any[];

        /** This method is used to retrieve the items value that are selected in the DropDownList.
         * @returns {string}
         */
        getSelectedValue(): string;

        /** This method hides the suggestion popup in the DropDownList.
         * @returns {void}
         */
        hidePopup(): void;

        /** This method is used to select the list of items in the DropDownList through the Index of the items.
         * @param {string|number|any[]}  select the given index list items
         * @returns {void}
         */
        selectItemsByIndices(index: string|number|any[]): void;

        /** This method is used to select an item in the DropDownList by using the given text value.
         * @param {string|number|any[]}  select the list items relates to given text
         * @returns {void}
         */
        selectItemByText(index: string|number|any[]): void;

        /** This method is used to select an item in the DropDownList by using the given value.
         * @param {string|number|any[]}  select the list items relates to given values
         * @returns {void}
         */
        selectItemByValue(index: string|number|any[]): void;

        /** This method shows the DropDownList control with the suggestion popup.
         * @returns {void}
         */
        showPopup(): void;

        /** This method is used to unselect all the items in the DropDownList.
         * @returns {void}
         */
        unCheckAll(): void;

        /** This method is used to unselect the list of items in the DropDownList through Index of the items.
         * @param {string|number|any[]}  unselect the given index list items
         * @returns {void}
         */
        unselectItemsByIndices(index: string|number|any[]): void;

        /** This method is used to unselect an item in the DropDownList by using the given text value.
         * @param {string|number|any[]}  unselect the list items relates to given text
         * @returns {void}
         */
        unselectItemByText(index: string|number|any[]): void;

        /** This method is used to unselect an item in the DropDownList by using the given value.
         * @param {string|number|any[]}  unselect the list items relates to given values
         * @returns {void}
         */
        unselectItemByValue(index: string|number|any[]): void;
    }
    export namespace DropDownList {

        export interface Model {

            /** The Virtual Scrolling(lazy loading) feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the
             * DropDownList, that is, when scrolling, an AJAX request is sent to fetch some amount of data from the server dynamically. To achieve this scenario with DropDownList, set the
             * allowVirtualScrolling to true.
             * @Default {false}
             */
            allowVirtualScrolling?: boolean;

            /** The cascading DropDownLists is a series of two or more DropDownLists in which each DropDownList is filtered according to the previous DropDownListâ€™s value.
             * @Default {null}
             */
            cascadeTo?: string;

            /** Sets the case sensitivity of the search operation. It supports both enableFilterSearch and enableIncrementalSearch property.
             * @Default {false}
             */
            caseSensitiveSearch?: boolean;

            /** Dropdown widget's style and appearance can be controlled based on 13 different default built-in themes.You can customize the appearance of the dropdown by using the cssClass
             * property. You need to specify a class name in the cssClass property and the same class name is used before the class definitions wherever the custom styles are applied.
             */
            cssClass?: string;

            /** This property is used to serve data from the data services based on the query provided. To bind the data to the dropdown widget, the dataSource property is assigned with the
             * instance of the ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Sets the separator when the multiSelectMode with delimiter option or checkbox is enabled with the dropdown. When you enter the delimiter value, the texts after the delimiter are
             * considered as a separate word or query. The delimiter string is a single character and must be a symbol. Mostly, the delimiter symbol is used as comma (,) or semi-colon (;) or
             * any other special character.
             * @Default {','}
             */
            delimiterChar?: string;

            /** The enabled Animation property uses the easeOutQuad animation to SlideDown and SlideUp the Popup list in 200 and 100 milliseconds, respectively.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** This property is used to indicate whether the DropDownList control responds to the user interaction or not. By default, the control is in the enabled mode and you can disable it
             * by setting it to false.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies to perform incremental search for the selection of items from the DropDownList with the help of this property. This helps in selecting the item by using the typed
             * character.
             * @Default {true}
             */
            enableIncrementalSearch?: boolean;

            /** This property selects the item in the DropDownList when the item is entered in the Search textbox.
             * @Default {false}
             */
            enableFilterSearch?: boolean;

            /** The serverfiltering is to perform filter action when text is typed in the search box and filtering will be done based on the collection which contains the matched item from entire
             * datasource. Serverfiltering will be done based on the entire items in DataSource.
             * @Default {false}
             */
            enableServerFiltering?: boolean;

            /** Saves the current model value to the browser cookies for state maintenance. While refreshing the DropDownList control page, it retains the model value and it is applied from the
             * browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** This enables the resize handler to resize the popup to any size.
             * @Default {false}
             */
            enablePopupResize?: boolean;

            /** Sets the DropDownList textbox direction from right to left align.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** This property is used to sort the Items in the DropDownList. By default, it sorts the items in an ascending order.
             * @Default {false}
             */
            enableSorting?: boolean;

            /** The property is used to determine whether the popup list is generated dynamically.
             * @Default {false}
             */
            loadOnDemand?: boolean;

            /** Specifies the mapping fields for the data items of the DropDownList.
             * @Default {null}
             */
            fields?: Fields;

            /** When the enableFilterSearch property value is set to true, the values in the DropDownList shows the items starting with or containing the key word/letter typed in the Search
             * textbox.
             * @Default {ej.FilterType.Contains}
             */
            filterType?: ej.FilterType|string;

            /** Used to create visualized header for dropdown items
             * @Default {null}
             */
            headerTemplate?: string;

            /** Defines the height of the DropDownList textbox.
             * @Default {null}
             */
            height?: string|number;

            /** It sets the given HTML attributes for the DropDownList control such as ID, name, disabled, etc.
             * @Default {null}
             */
            htmlAttributes?: any;

            /** Data can be fetched in the DropDownList control by using the DataSource, specifying the number of items.
             * @Default {5}
             */
            itemsCount?: number;

            /** Allows the user to set the particular country or region language for the DropDownList.
             * @Default {en-US}
             */
            locale?: string;

            /** Defines the maximum height of the suggestion box. This property restricts the maximum height of the popup when resize is enabled.
             * @Default {null}
             */
            maxPopupHeight?: string|number;

            /** Defines the minimum height of the suggestion box. This property restricts the minimum height of the popup when resize is enabled.
             * @Default {null}
             */
            minPopupHeight?: string|number;

            /** Defines the maximum width of the suggestion box. This property restricts the maximum width of the popup when resize is enabled.
             * @Default {null}
             */
            maxPopupWidth?: string|number;

            /** Defines the minimum height of the suggestion box. This property restricts the minimum height of the popup when resize is enabled.
             * @Default {0}
             */
            minPopupWidth?: string|number;

            /** With the help of this property, you can make a single or multi selection with the DropDownList and display the text in two modes, delimiter and visual mode. In delimiter mode, you
             * can separate the items by using the delimiter character such as comma (,) or semi-colon (;) or any other special character. In the visual mode, the items are showcased like boxes
             * with close icon in the textbox.
             * @Default {ej.MultiSelectMode.None}
             */
            multiSelectMode?: ej.MultiSelectMode|string;

            /** Defines the height of the suggestion popup box in the DropDownList control.
             * @Default {152px}
             */
            popupHeight?: string|number;

            /** Defines the width of the suggestion popup box in the DropDownList control.
             * @Default {auto}
             */
            popupWidth?: string|number;

            /** Specifies the query to retrieve the data from the DataSource.
             * @Default {null}
             */
            query?: any;

            /** Specifies that the DropDownList textbox values should be read-only.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Specifies an item to be selected in the DropDownList.
             * @Default {null}
             */
            selectedIndex?: number;

            /** Specifies the selectedItems for the DropDownList.
             * @Default {[]}
             */
            selectedIndices?: any[];

            /** Selects multiple items in the DropDownList with the help of the checkbox control. To achieve this, enable the showCheckbox option to true.
             * @Default {false}
             */
            showCheckbox?: boolean;

            /** DropDownList control is displayed with the popup seen.
             * @Default {false}
             */
            showPopupOnLoad?: boolean;

            /** DropDownList textbox displayed with the rounded corner style.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** When the enableSorting property value is set to true, this property helps to sort the items either in ascending or descending order
             * @Default {ej.SortOrder.Ascending}
             */
            sortOrder?: ej.SortOrder|string;

            /** Specifies the targetID for the DropDownListâ€™s items.
             * @Default {null}
             */
            targetID?: string;

            /** By default, you can add any text or image to the DropDownList item. To customize the item layout or to create your own visualized elements, you can use this template support.
             * @Default {null}
             */
            template?: string;

            /** Defines the text value that is displayed in the DropDownList textbox.
             * @Default {null}
             */
            text?: string;

            /** Sets the jQuery validation error message in the DropDownList
             * @Default {null}
             */
            validationMessage?: any;

            /** Sets the jQuery validation rules in the Dropdownlist.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value (text content) for the DropDownList control.
             * @Default {null}
             */
            value?: string|number;

            /** Specifies a short hint that describes the expected value of the DropDownList control.
             * @Default {null}
             */
            watermarkText?: string;

            /** Defines the width of the DropDownList textbox.
             * @Default {null}
             */
            width?: string|number;

            /** The Virtual Scrolling feature is used to display a large amount of records in the DropDownList, that is, when scrolling, an AJAX request is sent to fetch some amount of data from
             * the server dynamically. To achieve this scenario with DropDownList, set the allowVirtualScrolling to true. You can set the itemsCount property that represents the number of items
             * to be fetched from the server on every AJAX request.
             * @Default {normal}
             */
            virtualScrollMode?: ej.VirtualScrollMode|string;

            /** Fires the action before the XHR request.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Fires the action when the list of items is bound to the DropDownList by xhr post calling
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Fires the action when the xhr post calling failed on remote data binding with the DropDownList control.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Fires the action when the xhr post calling succeed on remote data binding with the DropDownList control
             */
            actionSuccess?(e: ActionSuccessEventArgs): void;

            /** Fires the action before the popup is ready to hide.
             */
            beforePopupHide?(e: BeforePopupHideEventArgs): void;

            /** Fires the action before the popup is ready to be displayed.
             */
            beforePopupShown?(e: BeforePopupShownEventArgs): void;

            /** Fires when the cascading happens between two DropDownList exactly after the value changes in the first dropdown and before filtering in the second Dropdown.
             */
            cascade?(e: CascadeEventArgs): void;

            /** Fires the action when the DropDownList controlâ€™s value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires the action when the list item checkbox value is changed.
             */
            checkChange?(e: CheckChangeEventArgs): void;

            /** Fires the action once the DropDownList is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires the action when the list items is bound to the DropDownList.
             */
            dataBound?(e: DataBoundEventArgs): void;

            /** Fires the action when the DropDownList is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires the action when the DropDownList is focused.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires the action when the DropDownList is about to lose focus.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires the action, once the popup is closed
             */
            popupHide?(e: PopupHideEventArgs): void;

            /** Fires the action, when the popup is resized.
             */
            popupResize?(e: PopupResizeEventArgs): void;

            /** Fires the action, once the popup is opened.
             */
            popupShown?(e: PopupShownEventArgs): void;

            /** Fires the action, when resizing a popup starts.
             */
            popupResizeStart?(e: PopupResizeStartEventArgs): void;

            /** Fires the action, when the popup resizing is stopped.
             */
            popupResizeStop?(e: PopupResizeStopEventArgs): void;

            /** Fires the action before filtering the list items that starts in the DropDownList when the enableFilterSearch is enabled.
             */
            search?(e: SearchEventArgs): void;

            /** Fires the action, when the list of item is selected.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionCompleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface ActionFailureEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the error message
             */
            error?: any;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns number of times trying to fetch the data
             */
            count?: number;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the query for data retrieval
             */
            query?: any;

            /** Returns the query for data retrieval from the Database
             */
            request?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the number of items fetched from remote data
             */
            result?: any[];

            /** Returns the requested data
             */
            xhr?: any;
        }

        export interface BeforePopupHideEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the selected text
             */
            text?: string;

            /** returns the selected value
             */
            value?: string;
        }

        export interface BeforePopupShownEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the selected text
             */
            text?: string;

            /** returns the selected value
             */
            value?: string;
        }

        export interface CascadeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the cascading dropdown model.
             */
            cascadeModel?: any;

            /** returns the current selected value in first dropdown.
             */
            cascadeValue?: string;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the default filter action for second dropdown data should happen or not.
             */
            requiresDefaultFilter?: boolean;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;

            /** Returns the selected item ID.
             */
            itemId?: string;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the selected item text.
             */
            selectedText?: string;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the selected text.
             */
            text?: string;

            /** Returns the selected value.
             */
            value?: string;
        }

        export interface CheckChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;

            /** Returns the selected item ID.
             */
            itemId?: string;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the selected item text.
             */
            selectedText?: string;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the selected text.
             */
            text?: string;

            /** Returns the selected value.
             */
            value?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DataBoundEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the data that is bound to DropDownList
             */
            data?: any;
        }

        export interface DestroyEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusOutEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface PopupHideEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the selected text
             */
            text?: string;

            /** returns the selected value
             */
            value?: string;
        }

        export interface PopupResizeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the data from the resizable plugin.
             */
            event?: any;
        }

        export interface PopupShownEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the selected text
             */
            text?: string;

            /** returns the selected value
             */
            value?: string;
        }

        export interface PopupResizeStartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the data from the resizable plugin.
             */
            event?: any;
        }

        export interface PopupResizeStopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the DropDownList model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the data from the resizable plugin.
             */
            event?: any;
        }

        export interface SearchEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the data bound to the DropDownList.
             */
            items?: any;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the selected item text.
             */
            selectedText?: string;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the search string typed in search box.
             */
            searchString?: string;
        }

        export interface SelectEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;

            /** Returns the selected item ID.
             */
            itemId?: string;

            /** returns the DropDownList model
             */
            model?: any;

            /** Returns the selected item text.
             */
            selectedText?: string;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the selected text.
             */
            text?: string;

            /** Returns the selected value.
             */
            value?: string;
        }

        export interface Fields {

            /** Used to group the items.
             */
            groupBy?: string;

            /** Defines the HTML attributes such as ID, class, and styles for the item.
             */
            htmlAttributes?: any;

            /** Defines the ID for the tag.
             */
            id?: string;

            /** Defines the image attributes such as height, width, styles, and so on.
             */
            imageAttributes?: string;

            /** Defines the imageURL for the image location.
             */
            imageUrl?: string;

            /** Defines the tag value to be selected initially.
             */
            selected?: boolean;

            /** Defines the sprite CSS for the image tag.
             */
            spriteCssClass?: string;

            /** Defines the table name for tag value or display text while rendering remote data.
             */
            tableName?: string;

            /** Defines the text content for the tag.
             */
            text?: string;

            /** Defines the tag value.
             */
            value?: string;
        }
    }
    enum FilterType {
        //filter the data wherever contains search key
        Contains,
        //filter the data based on search key present at start position
        StartsWith,
    }
    enum MultiSelectMode {
        //can select only single item in DropDownList
        None,
        //can select multiple items and it's separated by delimiterChar
        Delimiter,
        //can select multiple items and it's show's like visual box in textbox
        VisualMode,
    }
    enum VirtualScrollMode {
        //The data is loaded only to the corresponding page (display items). When scrolling some other position, it enables the load on demand with the DropDownList.
        Normal,
        //The data items are loaded from the remote when scroll handle reaches the end of the scrollbar like infinity scrolling.
        Continuous,
    }

    class DropDownTree extends ej.Widget {
        static fn: DropDownTree;
        constructor(element: JQuery | Element, options?: DropDownTree.Model);
        static Locale: any;
        model: DropDownTree.Model;
        defaults: DropDownTree.Model;

        /** Checks all the nodes in the DropDownTree.
         * @returns {void}
         */
        checkAll(): void;

        /** Checks a node in the DropDownTree.
         * @param {string|any|any[]}  ID of the DropDownTree node/object of the DropDownTree node/collection of the ID/object of the DropDownTree nodes.
         * @returns {void}
         */
        checkNode(element: string|any|any[]): void;

        /** Clears the text in the DropDownTree.
         * @returns {void}
         */
        clearText(): void;

        /** Destroys the DropDownTree control.
         * @returns {void}
         */
        destroy(): void;

        /** Returns the selected value.
         * @returns {void}
         */
        getValue(): void;

        /** Hides the popup in the DropDownTree.
         * @returns {void}
         */
        hidePopup(): void;

        /** Moves the DropDownTree node within the same DropDownTree. The new position of the given DropDownTree node will be based on destination node and index position.
         * @param {string|any} ID of the DropDownTree node/object of the DropDownTree node.
         * @param {string|any} ID of the DropDownTree node/object of the DropDownTree node.
         * @param {number} New index position of the given source node.
         * @returns {void}
         */
        moveNode(sourceNode: string|any, destinationNode: string|any, index: number): void;

        /** Removes all the nodes in the DropDownTree.
         * @returns {void}
         */
        removeAll(): void;

        /** Removes a node in the DropDownTree.
         * @param {string|any|any[]}  ID of the DropDownTree node/object of the DropDownTree node/collectionof the ID/object of the DropDownTree nodes.
         * @returns {void}
         */
        removeNode(element: string|any|any[]): void;

        /** Selects all the DropDownTree nodes when allowMultiSelection field is enabled in the treeViewSettings property.
         * @returns {void}
         */
        selectAll(): void;

        /** Selects a node in the DropDownTree control. To select the collection of nodes in the DropDownTree control, enable allowMultiSelection field of the treeViewSettings property.
         * @param {string|any|any[]}  ID of the DropDownTree node/object of the DropDownTree node/ collection of I the D/object of the DropDownTree nodes.
         * @returns {void}
         */
        selectNode(element: string|any|any[]): void;

        /** Shows the DropDownTree control with the popup.
         * @returns {void}
         */
        showPopup(): void;

        /** Unchecks all the nodes in the DropDownTree.
         * @returns {void}
         */
        unCheckAll(): void;

        /** Unchecks a node in the DropDownTree.
         * @param {string|any|any[]} ID of the DropDownTree node/object of the DropDownTree node/collection of the ID/object of the DropDownTree nodes.
         * @returns {void}
         */
        unCheckNode(element: string|any|any[]): void;

        /** Unselects all the DropDownTree nodes when allowMultiSelection field of the treeViewSettings property is enabled.
         * @returns {void}
         */
        unselectAll(): void;

        /** Unselects a node in the DropDownTree control. To unselect the collection of nodes in the DropDownTree control, enable allowMultiSelection field of the treeViewSettings property.
         * @param {string|any|any[]}  ID of the DropDownTree node/object of the DropDownTree node/ collection of the ID/object of the DropDownTree nodes.
         * @returns {void}
         */
        unselectNode(element: string|any|any[]): void;
    }
    export namespace DropDownTree {

        export interface Model {

            /** Uses the keyboard for any action, including opening and closing the drop-down tree; navigating, expanding, and collapsing nodes of the dropdown tree; and more.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Sets the root CSS class for DropDownTree that allows customization of appearance.
             * @Default {``}
             */
            cssClass?: string;

            /** Sets the separator when the multiSelectMode with delimiter option or checkbox is enabled. When you enter the delimiter value, the text after the delimiter is considered as a
             * separate word or query. The delimiter string is a single character and must be a symbol. Mostly, the delimiter symbol is used as comma (,), semi-colon (;), or any other special
             * character.
             * @Default {,}
             */
            delimiter?: string;

            /** Indicates whether the DropDownTree control responds to user interaction or not. By default, the control is in the enabled mode and can be disabled by setting this to false.
             * @Default {true}
             */
            enabled?: boolean;

            /** The enabled animation property uses the easeOutQuad animation to SlideDown and SlideUp the popup wrapper in 200 and 100 milliseconds, respectively.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Gets or sets a value that indicates whether to continue the DropDownTree model state in the page using applicable medium, i.e., HTML5 localStorage or cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Sets the DropDownTree textbox direction from right to left alignment.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Creates footer with text or HTML elements for the dropdown items.
             * @Default {null}
             */
            footerTemplate?: string;

            /** Serves as a patch of the entries comprising the path (that is set in the entry area) of the selected node.
             * @Default {'/'}
             */
            fullPathDelimiter?: string;

            /** Creates header with text or HTML elements for the dropdown items.
             * @Default {null}
             */
            headerTemplate?: string;

            /** Defines the height of the DropDownTree textbox.
             */
            height?: string|number;

            /** Allows you to set a particular country or regional language for the DropDownTree.
             * @Default {en-US}
             */
            locale?: string;

            /** Customizes the height and width of the popup wrapper.
             * @Default {{height: '152px',width: 'auto',showPopupOnLoad: false}}
             */
            popupSettings?: PopupSettings;

            /** Specifies that the DropDownTree textbox values should be read-only.
             * @Default {false}
             */
            readOnly?: boolean;

            /** The DropDownTree's textbox is displayed with rounded corner style.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the targetID for the DropDownTree's items.
             * @Default {null}
             */
            targetID?: string;

            /** Specifies the delimiter between nodes (indicating their hierarchy).
             * @Default {ej.DropDownTree.TextMode.none}
             */
            textMode?: ej.Textmode|string;

            /** Sets the jQuery validation error message in the DropDownTree.
             * @Default {null}
             */
            validationMessage?: any;

            /** Sets the jQuery validation rules in the DropDownTree.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value (text content) for the DropDownTree control. For the single selection mode, the selected item's value will be returned in its data type, and for
             * MultiSelectMode, returns the selected items values separated by delimiter in string type.
             * @Default {null}
             */
            value?: string;

            /** Specifies a short hint that describes the expected value of the DropDownTree control.
             * @Default {null}
             */
            watermarkText?: string;

            /** Defines the width of the DropDownTree textbox.
             * @Default {100%}
             */
            width?: string|number;

            /** Defines the popup settings of the DropDownTree widget. You can use any property which are in treeview using this property.
             * @Default {{}}
             */
            treeViewSettings?: any;

            /** Fires the action when the DropDownTree is about to lose focus.
             */
            blur?(e: BlurEventArgs): void;

            /** Fires the action when the DropDownTree control's value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires the action when the list item checkbox value is changed.
             */
            checkChange?(e: CheckChangeEventArgs): void;

            /** Fires the action once the popup is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Fires the action once the DropDownTree is created.
             */
            Create?(e: CreateEventArgs): void;

            /** Fires the action when DropDownTree is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** When the enableFilterSearch is enabled, the filtering action is fired as soon as you start typing in the DropDownTree.
             */
            filtering?(e: FilteringEventArgs): void;

            /** Fires the action when the DropDownTree is focused.
             */
            focus?(e: FocusEventArgs): void;

            /** Fires the action once the popup is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Fires the action when the list of nodes in the DropDownTree is selected.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface BlurEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;
        }

        export interface ChangeEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            selectedText?: string;

            /** Selected item's text.
             */
            text?: string;

            /** Selected item's value.
             */
            value?: string;

            /** Selected item's ID.
             */
            itemId?: string;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;
        }

        export interface CheckChangeEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            text?: string;

            /** Selected item's value.
             */
            value?: string;

            /** Selected item's ID.
             */
            itemId?: string;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;
        }

        export interface CloseEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            text?: string;

            /** Selected item's value.
             */
            value?: string;
        }

        export interface CreateEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;
        }

        export interface DestroyEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;
        }

        export interface FilteringEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            selectedText?: string;

            /** Returns the search string typed in the search box.
             */
            searchString?: string;

            /** Returns the data items of theDropDownTreeView.
             */
            items?: any;
        }

        export interface FocusEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;
        }

        export interface OpenEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            text?: string;

            /** Selected item's value.
             */
            value?: string;
        }

        export interface SelectEventArgs {

            /** If the event has to be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Event name
             */
            type?: string;

            /** DropDownTreeView model.
             */
            model?: any;

            /** Selected item's text.
             */
            text?: string;

            /** Selected item's value.
             */
            value?: string;

            /** Selected item's ID.
             */
            itemId?: string;

            /** Returns the selected item with checkbox checked or not.
             */
            isChecked?: boolean;
        }

        export interface PopupSettings {

            /** Defines the height of the popup wrapper in the DropDownTree control.
             */
            height?: string|number;

            /** Defines the width of the popup wrapper in the DropDownTree control.
             */
            width?: string|number;

            /** The DropDownTree control is displayed with the popup.
             */
            showPopupOnLoad?: boolean;
        }
    }
    enum Textmode {
        //When TextMode property is set to none, only selected/checked node's text is presented.
        None,
        //When FullPath option is selected, the full path of the selected node is shown in the control.
        FullPath,
    }

    class Tooltip extends ej.Widget {
        static fn: Tooltip;
        constructor(element: JQuery | Element, options?: Tooltip.Model);
        static Locale: any;
        model: Tooltip.Model;
        defaults: Tooltip.Model;

        /** Destroys the Tooltip control.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the Tooltip control.
         * @returns {void}
         */
        disable(): void;

        /** Enables the Tooltip control.
         * @returns {void}
         */
        enable(): void;

        /** Hide the Tooltip popup.
         * @param {string}  optional Determines the type of effect that takes place when hiding the tooltip.
         * @param {() => void}  optional custom effect takes place when hiding the tooltip.
         * @returns {void}
         */
        hide(effect?: string, func?: () => void): void;

        /** Shows the Tooltip popup for the given target element with the specified effect.
         * @param {string} optional Determines the type of effect that takes place when showing the tooltip.
         * @param {() => void} optional custom effect takes place when showing the tooltip.
         * @param {JQuery} optional Tooltip will be shown for the given element
         * @returns {void}
         */
        show(effect?: string, func?: () => void, target?: JQuery): void;
    }
    export namespace Tooltip {

        export interface Model {

            /** Tooltip control can be accessed through the keyboard shortcut keys.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Specifies the animation behavior in  Tooltip. It contains the following sub properties.
             */
            animation?: Animation;

            /** Sets the position related to target element, window, mouse or (x,y) co-ordinates.
             * @Default {ej.Tooltip.Associate.Target}
             */
            associate?: ej.Tooltip.Associate|string;

            /** Specified the delay to hide Tooltip when closeMode is auto.
             * @Default {4000}
             */
            autoCloseTimeout?: number;

            /** Specifies the closing behavior of Tooltip popup.
             * @Default {ej.Tooltip.CloseMode.None}
             */
            closeMode?: ej.Tooltip.CloseMode|string;

            /** Sets the Tooltip in alternate position when collision occurs.
             * @Default {ej.Tooltip.Collision.FlipFit}
             */
            collision?: ej.Tooltip.Collision|string;

            /** Specified the selector for the container element.
             * @Default {body}
             */
            containment?: string;

            /** Specifies the text for Tooltip.
             * @Default {null}
             */
            content?: string;

            /** Sets the root CSS class for Tooltip for the customization.
             * @Default {null}
             */
            cssClass?: string;

            /** Enables or disables the Tooltip.
             * @Default {true}
             */
            enabled?: boolean;

            /** Sets the Tooltip direction from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Defines the height of the Tooltip popup.
             * @Default {auto}
             */
            height?: string|number;

            /** Enables the arrow in Tooltip.
             * @Default {true}
             */
            isBalloon?: boolean;

            /** defines various attributes of the Tooltip position
             */
            position?: Position;

            /** Enables or disables rounded corner.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Enables or disables shadow effect.
             * @Default {false}
             */
            showShadow?: boolean;

            /** Specified a selector for elements, within the container.
             * @Default {null}
             */
            target?: string;

            /** defines Tooltip size and gap between tooltip against the target element.
             */
            tip?: Tip;

            /** The title text to be displayed in the Tooltip header.
             * @Default {null}
             */
            title?: string;

            /** Specified the event action to show case the Tooltip.
             * @Default {ej.Tooltip.Trigger.Hover}
             */
            trigger?: ej.Tooltip.Trigger|string;

            /** Defines the width of the Tooltip popup.
             * @Default {auto}
             */
            width?: string|number;

            /** This event is triggered before the Tooltip widget get closed.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** This event is triggered before the Tooltip widget gets open.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires on clicking to the target element.
             */
            click?(e: ClickEventArgs): void;

            /** This event is triggered after the Tooltip widget is closed.
             */
            close?(e: CloseEventArgs): void;

            /** This event is triggered after the Tooltip is created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** This event is triggered after the Tooltip widget is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** This event is triggered while hovering the target element, when tooltip positioning relates to target element.
             */
            hover?(e: HoverEventArgs): void;

            /** This event is triggered after the Tooltip is opened.
             */
            open?(e: OpenEventArgs): void;

            /** This event is triggered while hover the target element, when the tooltip positioning is relates to the mouse.
             */
            tracking?(e: TrackingEventArgs): void;
        }

        export interface BeforeCloseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the Tooltip's content
             */
            content?: string;
        }

        export interface BeforeOpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the Tooltip's content
             */
            content?: string;
        }

        export interface ClickEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;
        }

        export interface CloseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the Tooltip's content
             */
            content?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface HoverEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;
        }

        export interface OpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the Tooltip's content
             */
            content?: string;
        }

        export interface TrackingEventArgs {

            /** its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Tooltip model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;
        }

        export interface Animation {

            /** Determines the type of effect.
             * @Default {ej.Tooltip.Effect.None}
             */
            effect?: ej.Tooltip.effect|string;

            /** Sets the animation speed in milliseconds.
             * @Default {4000}
             */
            speed?: number;
        }

        export interface PositionTarget {

            /** Sets the Tooltip position against target based on horizontal(x) value.
             * @Default {center}
             */
            horizontal?: string|number;

            /** Sets the Tooltip position against target based on vertical(y) value.
             * @Default {top}
             */
            vertical?: string|number;
        }

        export interface PositionStem {

            /** Sets the arrow position again popup based on horizontal(x) value
             * @Default {center}
             */
            horizontal?: string;

            /** Sets the arrow position again popup based on vertical(y) value
             * @Default {bottom}
             */
            vertical?: string;
        }

        export interface Position {

            /** Sets the Tooltip position against target.
             */
            target?: PositionTarget;

            /** Sets the arrow position again popup.
             */
            stem?: PositionStem;
        }

        export interface TipSize {

            /** Sets the Tooltip width.
             * @Default {20}
             */
            width?: number;

            /** Sets the Tooltip height.
             * @Default {10}
             */
            height?: number;
        }

        export interface TipAdjust {

            /** Sets horizontal gap between Tooltip and target element.
             * @Default {0}
             */
            xValue?: number;

            /** Sets vertical gap between Tooltip and target element.
             * @Default {0}
             */
            yValue?: number;
        }

        export interface Tip {

            /** Sets the Tooltip size.
             */
            size?: TipSize;

            /** Sets gap between tooltip against the target element.
             */
            adjust?: TipAdjust;
        }

        enum effect {

            ///No animation takes place when showing/hiding the Tooltip
            None,

            ///Sliding effect takes place when showing/hiding the Tooltip
            Slide,

            ///Fade the Tooltip in and out of visibility.
            Fade
        }


        enum Associate {

            ///Sets the position related to target element.
            Target,

            ///Sets the position related to mouse.
            MouseFollow,

            ///Sets the position related to mouse, first entry to the target element.
            MouseEnter,

            ///Sets the position related to (x,y) co-ordinates.
            Axis,

            ///Sets the position related to browser window.
            Window
        }


        enum CloseMode {

            ///Enables close button in Tooltip.
            Sticky,

            ///Sets the delay for Tooltip close
            Auto,

            ///The Tooltip will be display normally.
            None
        }


        enum Collision {

            ///Flips the Tooltip to the opposite side of the target, if collision is occurs.
            Flip,

            ///Shift the Tooltip popup away from the edge of the window(collision side) that means adjacent position.
            Fit,

            ///Ensure as much of the element is visible as possible to showcase.
            FlipFit,

            ///No collision detection is take place
            None
        }


        enum Trigger {

            ///The Tooltip to be shown when the target element is clicked.
            Click,

            ///Enables the Tooltip when hover on the target element.
            Hover,

            ///Enables the Tooltip when focus is set to target element.
            Focus
        }

    }

    class Editor extends ej.Widget {
        static fn: Editor;
        constructor(element: JQuery | Element, options?: Editor.Model);
        static Locale: any;
        model: Editor.Model;
        defaults: Editor.Model;

        /** destroy the editor widgets all events are unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To disable the corresponding Editors
         * @returns {void}
         */
        disable(): void;

        /** To enable the corresponding Editors
         * @returns {void}
         */
        enable(): void;

        /** To get value from corresponding Editors
         * @returns {number}
         */
        getValue(): number;
    }

    class NumericTextbox extends Editor {
    }

    class CurrencyTextbox extends Editor {
    }

    class PercentageTextbox extends Editor {
    }
    export namespace Editor {

        export interface Model {

            /** Specifies the currency symbol of currency textbox, used when the user wants to overwrite the currency symbol commonly instead of the current culture symbol.
             * @Default {Based on the culture}
             */
            currencySymbol?: string;

            /** Sets the root CSS class for Editors which allow us to customize the appearance.
             */
            cssClass?: string;

            /** Specifies the number of digits that is allowed after the decimal point. When the decimalPlaces is set to â€œ-1â€, it allows the decimals without any limit in the Textboxes.
             * @Default {0}
             */
            decimalPlaces?: number;

            /** Specifies the editor control state.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specify the enablePersistence to editor to save current editor control value to browser cookies for state maintenance.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specifies the Right to Left Direction to editor.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** When enableStrictMode true it allows the value outside of the range also but it highlights the textbox with error class,otherwise it internally changed to the correct value.
             * @Default {false}
             */
            enableStrictMode?: boolean;

            /** Specifies the number of digits in each group to the editor.
             * @Default {Based on the culture.}
             */
            groupSize?: string;

            /** It provides the options to get the customized character to separate the digits. If not set, the separator defined by the current culture.
             * @Default {Based on the culture}
             */
            groupSeparator?: string;

            /** Specifies the height of the editor.
             * @Default {30}
             */
            height?: string;

            /** It allows to define the characteristics of the Editors control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** The Editor value increment or decrement based an incrementStep value.
             * @Default {1}
             */
            incrementStep?: number;

            /** Defines the localization culture for editor.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the maximum value of the editor.
             * @Default {Number.MAX_VALUE}
             */
            maxValue?: number;

            /** Specifies the minimum value of the editor.
             * @Default {-(Number.MAX_VALUE) and 0 for Currency Textbox.}
             */
            minValue?: number;

            /** Specifies the name of the editor.
             * @Default {Sets id as name if it is null.}
             */
            name?: string;

            /** Specifies the pattern for formatting positive values in editor.We have maintained some standard to define the negative pattern. you have to specify 'n' to place the digit in your
             * pattern.ejTextbox allows you to define a currency or percent symbol where you want to place it.
             * @Default {Based on the culture}
             */
            negativePattern?: string;

            /** Specifies the pattern for formatting positive values in editor.We have maintained some standard to define the positive pattern. you have to specify 'n' to place the digit in your
             * pattern.ejTextbox allows you to define a currency or percent symbol where you want to place it.
             * @Default {Based on the culture}
             */
            positivePattern?: string;

            /** Toggles the readonly state of the editor. When the Editor is readonly it doesn't allow user interactions.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Specifies to Change the sharped edges into rounded corner for the Editor.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies whether the up and down spin buttons should be displayed in editor.
             * @Default {true}
             */
            showSpinButton?: boolean;

            /** Enables decimal separator position validation on type .
             * @Default {false}
             */
            validateOnType?: boolean;

            /** Set the jQuery validation error message in editor.
             * @Default {null}
             */
            validationMessage?: any;

            /** Set the jQuery validation rules to the editor.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value of the editor.
             * @Default {null}
             */
            value?: number|string;

            /** Specifies the watermark text to editor.
             * @Default {Based on the culture.}
             */
            watermarkText?: string;

            /** Specifies the width of the editor.
             * @Default {143}
             */
            width?: string;

            /** Fires after Editor control value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires after Editor control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the Editor is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires after Editor control is focused.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires after Editor control is loss the focus.
             */
            focusOut?(e: FocusOutEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the corresponding editor model.
             */
            model?: ej.Editor.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the corresponding editor control value.
             */
            value?: number;

            /** returns true when the value changed by user interaction otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the editor model
             */
            model?: ej.Editor.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the editor model
             */
            model?: ej.Editor.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the corresponding editor model.
             */
            model?: ej.Editor.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the corresponding editor control value.
             */
            value?: number;
        }

        export interface FocusOutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the corresponding editor model.
             */
            model?: ej.Editor.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the corresponding editor control value.
             */
            value?: number;
        }
    }

    class ListView extends ej.Widget {
        static fn: ListView;
        constructor(element: JQuery | Element, options?: ListView.Model);
        static Locale: any;
        model: ListView.Model;
        defaults: ListView.Model;

        /** To add item in the given index. If you have enabled grouping in ListView then you need to pass the corresponding group list title to add item in it. Depending on the data bound to
         * ListView, we need to pass either an HTML element or JSON objects in this method.
         * @param {string|any} To pass the list item as element/ JSON object
         * @param {number} Specifies the index where item to be added
         * @param {string} optionalThis is an optional parameter. You must pass the group list title here if grouping is enabled in the ListView
         * @returns {void}
         */
        addItem(item: string|any, index: number, groupid: string): void;

        /** To check all the items.
         * @returns {void}
         */
        checkAllItem(): void;

        /** To check item in the given index.
         * @param {number} Specifies the index of the item to be checked
         * @returns {void}
         */
        checkItem(index: number): void;

        /** To clear all the list item in the control before updating with new datasource.
         * @returns {void}
         */
        clear(): void;

        /** To make the item in the given index to be default state.
         * @param {number} Specifies the index to make the item to be in default state.
         * @returns {void}
         */
        deActive(index: number): void;

        /** To disable item in the given index.
         * @param {number} Specifies the index value to be disabled.
         * @returns {void}
         */
        disableItem(index: number): void;

        /** To enable item in the given index.
         * @param {number} Specifies the index value to be enabled.
         * @returns {void}
         */
        enableItem(index: number): void;

        /** To get the active item.
         * @returns {HTMLElement}
         */
        getActiveItem(): HTMLElement;

        /** To get the text of the active item.
         * @returns {string}
         */
        getActiveItemText(): string;

        /** To get all the checked items.
         * @returns {any[]}
         */
        getCheckedItems(): any[];

        /** To get the text of all the checked items.
         * @returns {any[]}
         */
        getCheckedItemsText(): any[];

        /** To get the total item count.
         * @returns {number}
         */
        getItemsCount(): number;

        /** To get the text of the item in the given index.
         * @param {string|number} Specifies the index value to get the text value.
         * @returns {string}
         */
        getItemText(index: string|number): string;

        /** To check whether the item in the given index has child item.
         * @param {number} Specifies the index value to check the item has child or not.
         * @returns {boolean}
         */
        hasChild(index: number): boolean;

        /** To hide the list.
         * @returns {void}
         */
        hide(): void;

        /** To hide item in the given index.
         * @param {number} Specifies the index value to hide the item.
         * @returns {void}
         */
        hideItem(index: number): void;

        /** To check whether item in the given index is checked.
         * @returns {boolean}
         */
        isChecked(): boolean;

        /** To load the AJAX content while selecting the item.
         * @param {string} Specifies the item to load the AJAX content.
         * @returns {void}
         */
        loadAjaxContent(item: string): void;

        /** To remove the check mark either for specific item in the given index or for all items.
         * @param {number} Specifies the index value to remove the checkbox.
         * @returns {void}
         */
        removeCheckMark(index: number): void;

        /** To remove item in the given index.
         * @param {number} Specifies the index value to remove the item.
         * @returns {void}
         */
        removeItem(index: number): void;

        /** To select item in the given index.
         * @param {number} Specifies the index value to select the item.
         * @returns {void}
         */
        selectItem(index: number): void;

        /** To make the item in the given index to be active state.
         * @param {number} Specifies the index value to make the item in active state.
         * @returns {void}
         */
        setActive(index: number): void;

        /** To show the list.
         * @returns {void}
         */
        show(): void;

        /** To show item in the given index.
         * @param {number} Specifies the index value to show the hidden item.
         * @returns {void}
         */
        showItem(index: number): void;

        /** To uncheck all the items.
         * @returns {void}
         */
        unCheckAllItem(): void;

        /** To uncheck item in the given index.
         * @param {number} Specifies the index value to uncheck the item.
         * @returns {void}
         */
        unCheckItem(index: number): void;
    }
    export namespace ListView {

        export interface Model {

            /** Specifies the ajaxSettings option to load the items to the ListView control.
             * @Default {null}
             */
            ajaxSettings?: AjaxSettings;

            /** Set the index values to be selected on initial loading. This works only when enableCheckMark is set true.
             * @Default {[]}
             */
            checkedIndices?: any[];

            /** Sets the root class for ListView theme. This cssClass API helps to use custom skinning option for ListView control. By defining the root class using this API, we need to include
             * this root class in CSS.
             */
            cssClass?: string;

            /** Contains the list of data for generating the ListView items.
             * @Default {[]}
             */
            dataSource?: any[];

            /** Specifies whether to load AJAX content while selecting item.
             * @Default {false}
             */
            enableAjax?: boolean;

            /** Specifies whether to enable caching the content.
             * @Default {false}
             */
            enableCache?: boolean;

            /** Specifies whether to enable check mark for the item.
             * @Default {false}
             */
            enableCheckMark?: boolean;

            /** Specifies whether to enable the filtering feature to filter the item.
             * @Default {false}
             */
            enableFiltering?: boolean;

            /** Specifies whether to group the list item.
             * @Default {false}
             */
            enableGroupList?: boolean;

            /** Specifies to maintain the current model value to browser cookies for state maintenance. While refresh the page, the model value will get apply to the control from browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specifies the field settings to map the datasource.
             */
            fieldSettings?: FieldSettings;

            /** Contains the array of items to be added in ListView.
             * @Default {[]}
             */
            items?: any[];

            /** Specifies the text of the back button in the header.
             * @Default {null}
             */
            headerBackButtonText?: string;

            /** Specifies the title of the header.
             * @Default {Title}
             */
            headerTitle?: string;

            /** Specifies the height.
             * @Default {null}
             */
            height?: string|number;

            /** Set the localization culture for ListView Widget.
             */
            locale?: string;

            /** Specifies whether to retain the selection of the item.
             * @Default {false}
             */
            persistSelection?: boolean;

            /** Specifies whether to prevent the selection of the item.
             * @Default {false}
             */
            preventSelection?: boolean;

            /** Specifies the query to execute with the datasource.
             * @Default {null}
             */
            query?: any;

            /** Specifies whether need to render the control with the template contents.
             * @Default {false}
             */
            renderTemplate?: boolean;

            /** Specifies the index of item which need to be in selected state initially while loading.
             * @Default {0}
             */
            selectedItemIndex?: number;

            /** Specifies whether to show the header.
             * @Default {true}
             */
            showHeader?: boolean;

            /** Specifies whether to show the back button header.
             * @Default {false}
             */
            showHeaderBackButton?: boolean;

            /** Specifies ID of the element contains template contents.
             * @Default {null}
             */
            templateId?: string;

            /** Specifies the width.
             * @Default {null}
             */
            width?: string|number;

            /** Specifies the number of items to be fetched on each scroll. Note: This property works only with Virtual scrolling.
             * @Default {5}
             */
            itemRequestCount?: number;

            /** Specifies the maximum number of items to be fetched. Note: This will work only with Virtual scrolling
             * @Default {5}
             */
            totalItemsCount?: number;

            /** Loads the list data on demand via scrolling behavior to improve the applicationâ€™s performance. There are two ways to load data which can be defined using virtualScrollMode
             * property.
             * @Default {false}
             */
            allowVirtualScrolling?: boolean;

            /** Specifies the virtual scroll mode to load the list data on demand via scrolling behavior. There are two types of mode.
             * @Default {ej.VirtualScrollMode.Normal}
             */
            virtualScrollMode?: ej.VirtualScrollMode|string;

            /** Event triggers before the AJAX request happens.
             */
            ajaxBeforeLoad?(e: AjaxBeforeLoadEventArgs): void;

            /** Event triggers after the AJAX content loaded completely.
             */
            ajaxComplete?(e: AjaxCompleteEventArgs): void;

            /** Event triggers when the AJAX request failed.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** Event triggers after the AJAX content loaded successfully.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** Event triggers before the items loaded.
             */
            load?(e: LoadEventArgs): void;

            /** Event triggers after the items loaded.
             */
            loadComplete?(e: LoadCompleteEventArgs): void;

            /** Event triggers when mouse down happens on the item.
             */
            mouseDown?(e: MouseDownEventArgs): void;

            /** Event triggers when mouse up happens on the item.
             */
            mouseUp?(e: MouseUpEventArgs): void;
        }

        export interface AjaxBeforeLoadEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;

            /** returns the AJAX settings.
             */
            ajaxData?: any;
        }

        export interface AjaxCompleteEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;
        }

        export interface AjaxErrorEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;

            /** returns the error thrown in the AJAX post.
             */
            errorThrown?: any;

            /** returns the status.
             */
            textStatus?: any;

            /** returns the current list item.
             */
            item?: any;

            /** returns the current item text.
             */
            text?: string;

            /** returns the current item index.
             */
            index?: number;
        }

        export interface AjaxSuccessEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;

            /** returns the AJAX current content.
             */
            content?: string;

            /** returns the current list item.
             */
            item?: any;

            /** returns the current item text.
             */
            text?: string;

            /** returns the current item index.
             */
            index?: number;

            /** returns the current URL of the AJAX post.
             */
            URL?: string;
        }

        export interface LoadEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;
        }

        export interface LoadCompleteEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;
        }

        export interface MouseDownEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;

            /** If the child element exist return true; otherwise, false.
             */
            hasChild?: boolean;

            /** returns the current list item.
             */
            item?: string;

            /** returns the current text of item.
             */
            text?: string;

            /** returns the current Index of the item.
             */
            index?: number;

            /** If checked return true; otherwise, false.
             */
            isChecked?: boolean;

            /** returns the list of checked items.
             */
            checkedItems?: number;

            /** returns the current checked item text.
             */
            checkedItemsText?: string;
        }

        export interface MouseUpEventArgs {

            /** returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the model value of the control.
             */
            model?: ej.ListView.Model;

            /** If the child element exist return true; otherwise, false.
             */
            hasChild?: boolean;

            /** returns the current list item.
             */
            item?: string;

            /** returns the current text of item.
             */
            text?: string;

            /** returns the current Index of the item.
             */
            index?: number;

            /** If checked return true; otherwise, false.
             */
            isChecked?: boolean;

            /** returns the list of checked items.
             */
            checkedItems?: number;

            /** returns the current checked item text.
             */
            checkedItemsText?: string;
        }

        export interface AjaxSettings {

            /** It specifies, whether to enable or disable asynchronous request.
             */
            async?: boolean;

            /** It specifies the page will be cached in the web browser.
             */
            cache?: boolean;

            /** It specifies the type of data is send in the query string.
             */
            contentType?: string;

            /** It specifies the data as an object, will be passed in the query string.
             */
            data?: any;

            /** It specifies the type of data that you're expecting back from the response.
             */
            dataType?: string;

            /** It specifies the HTTP request type.
             */
            type?: string;
        }

        export interface FieldSettings {

            /** Defines the specific field name which contains Boolean values to specify whether the list items to be checked by default or not.
             */
            checked?: boolean;

            /** Defines the URL to be navigated while clicking the list item.
             */
            navigateUrl?: string;

            /** Defines the HTML attributes such as id, class, styles for the specific list item.
             */
            attributes?: any;

            /** Defines the specific field name which contains id values for the list items.
             */
            id?: string;

            /** Defines the URL for the image to be displayed in the list item.
             */
            imageUrl?: string;

            /** Defines the class name for image in that specific list items.
             */
            imageClass?: string;

            /** Specifies whether to prevent the selection of the list item.
             */
            preventSelection?: boolean;

            /** Specifies whether to retain the selection of the list item.
             */
            persistSelection?: boolean;

            /** To define the first level of list items.
             */
            primaryKey?: string;

            /** To define the child level of list items inside the parent items.
             */
            parentPrimaryKey?: string;

            /** Defines the specific field name in the data source to load the list with data.
             */
            text?: string;

            /** To trigger the mouseup event for specific list items.
             */
            mouseUP?: string;

            /** To trigger the mousedown event for specific list items.
             */
            mouseDown?: string;
        }
    }

    class MaskEdit extends ej.Widget {
        static fn: MaskEdit;
        constructor(element: JQuery | Element, options?: MaskEdit.Model);
        static Locale: any;
        model: MaskEdit.Model;
        defaults: MaskEdit.Model;

        /** To clear the text in mask edit textbox control.
         * @returns {void}
         */
        clear(): void;

        /** To disable the mask edit textbox control.
         * @returns {void}
         */
        disable(): void;

        /** To enable the mask edit textbox control.
         * @returns {void}
         */
        enable(): void;

        /** To obtained the pure value of the text value, removes all the symbols in mask edit textbox control.
         * @returns {string}
         */
        get_StrippedValue(): string;

        /** To obtained the textbox value as such that, Just replace all '_' to ' '(space) in mask edit textbox control.
         * @returns {string}
         */
        get_UnstrippedValue(): string;
    }
    export namespace MaskEdit {

        export interface Model {

            /** Specify the cssClass to achieve custom theme.
             * @Default {null}
             */
            cssClass?: string;

            /** Specify the custom character allowed to entered in mask edit textbox control.
             * @Default {null}
             */
            customCharacter?: string;

            /** Specify the state of the mask edit textbox control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specify the enablePersistence to mask edit textbox to save current model value to browser cookies for state maintains.
             */
            enablePersistence?: boolean;

            /** Specifies the height for the mask edit textbox control.
             * @Default {28 px}
             */
            height?: string;

            /** Specifies whether hide the prompt characters with spaces on blur. Prompt chars will be shown again on focus the textbox.
             * @Default {false}
             */
            hidePromptOnLeave?: boolean;

            /** Specifies the list of HTML attributes to be added to mask edit textbox.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specify the inputMode for mask edit textbox control. See InputMode
             * @Default {ej.InputMode.Text}
             */
            inputMode?: ej.InputMode|string;

            /** Defines the localization culture for MaskEdit.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the input mask.
             * @Default {null}
             */
            maskFormat?: string;

            /** Specifies the name attribute value for the mask edit textbox.
             * @Default {null}
             */
            name?: string;

            /** Toggles the readonly state of the mask edit textbox. When the mask edit textbox is readonly, it doesn't allow your input.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Specifies whether the error will show until correct value entered in the mask edit textbox control.
             * @Default {false}
             */
            showError?: boolean;

            /** when showPromptChar is true, the hide the prompt characters are shown in focus of the control and hides in focus out of the control.
             * @Default {true}
             */
            showPromptChar?: boolean;

            /** MaskEdit input is displayed in rounded corner style when this property is set to true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specify the text alignment for mask edit textbox control.See TextAlign
             * @Default {left}
             */
            textAlign?: ej.TextAlign|string;

            /** Sets the jQuery validation error message in mask edit. This property works when the widget is present inside the form. Include jquery.validate.min.js plugin additionally.
             * @Default {null}
             */
            validationMessage?: any;

            /** Sets the jQuery validation rules to the MaskEdit. This property works when the widget is present inside the form. Include jquery.validate.min.js plugin additionally.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value for the mask edit textbox control.
             * @Default {null}
             */
            value?: string;

            /** Specifies the water mark text to be displayed in input text.
             * @Default {null}
             */
            watermarkText?: string;

            /** Specifies the width for the mask edit textbox control.
             * @Default {143pixel}
             */
            width?: string;

            /** Fires when value changed in mask edit textbox control.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires after MaskEdit control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the MaskEdit is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when focused in mask edit textbox control.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires when focused out in mask edit textbox control.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires when keydown in mask edit textbox control.
             */
            onKeyDown?(e: OnKeyDownEventArgs): void;

            /** Fires when key press in mask edit textbox control.
             */
            keyPress?(e: KeyPressEventArgs): void;

            /** Fires when keyup in mask edit textbox control.
             */
            keyUp?(e: KeyUpEventArgs): void;

            /** Fires when mouse out in mask edit textbox control.
             */
            mouseOut?(e: MouseOutEventArgs): void;

            /** Fires when mouse over in mask edit textbox control.
             */
            mouseOver?(e: MouseOverEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the MaskEdit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the MaskEdit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface FocusOutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface OnKeyDownEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface KeyPressEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface KeyUpEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface MouseOutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }

        export interface MouseOverEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the mask edit model
             */
            model?: ej.MaskEdit.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mask edit value
             */
            value?: number;

            /** returns unstripped value in mask edit textbox control.
             */
            unmaskedValue?: string;
        }
    }
    enum InputMode {
        //string
        Password,
        //string
        Text,
    }
    enum TextAlign {
        //string
        Center,
        //string
        Justify,
        //string
        Left,
        //string
        Right,
    }

    class Menu extends ej.Widget {
        static fn: Menu;
        constructor(element: JQuery | Element, options?: Menu.Model);
        static Locale: any;
        model: Menu.Model;
        defaults: Menu.Model;

        /** Disables the Menu control.
         * @returns {void}
         */
        disable(): void;

        /** Specifies the Menu Item to be disabled by using the Menu Item Text.
         * @param {string} Specifies the Menu Item Text to be disabled.
         * @returns {void}
         */
        disableItem(itemtext: string): void;

        /** Specifies the Menu Item to be disabled by using the Menu Item Id.
         * @param {string|number} Specifies the Menu Item id to be disabled
         * @returns {void}
         */
        disableItemByID(itemid: string|number): void;

        /** Enables the Menu control.
         * @returns {void}
         */
        enable(): void;

        /** Specifies the Menu Item to be enabled by using the Menu Item Text.
         * @param {string} Specifies the Menu Item Text to be enabled.
         * @returns {void}
         */
        enableItem(itemtext: string): void;

        /** Specifies the Menu Item to be enabled by using the Menu Item Id.
         * @param {string|number} Specifies the Menu Item id to be enabled.
         * @returns {void}
         */
        enableItemByID(itemid: string|number): void;

        /** Hides the Context Menu control.
         * @returns {void}
         */
        hide(): void;

        /** Hides the specific items in Menu control.
         * @param {string|any[]} ItemID of the Menu item to be hidden
         * @returns {void}
         */
        hideItems(itemID: string|any[]): void;

        /** Insert the menu item as child of target node.
         * @param {any} Information about Menu item.
         * @param {string|any} Selector of target node or Object of target node.
         * @returns {void}
         */
        insert(item: any, target: string|any): void;

        /** Insert the menu item after the target node.
         * @param {any} Information about Menu item.
         * @param {string|any} Selector of target node or Object of target node.
         * @returns {void}
         */
        insertAfter(item: any, target: string|any): void;

        /** Insert the menu item before the target node.
         * @param {any} Information about Menu item.
         * @param {string|any} Selector of target node or Object of target node.
         * @returns {void}
         */
        insertBefore(item: any, target: string|any): void;

        /** Remove Menu item.
         * @param {any|any[]} Selector of target node or Object of target node.
         * @returns {void}
         */
        remove(target: any|any[]): void;

        /** To show the Menu control.
         * @param {number} x co-ordinate position of context menu.
         * @param {number} y co-ordinate position of context menu.
         * @param {any} target element
         * @param {any} name of the event
         * @returns {void}
         */
        show(locationX: number, locationY: number, targetElement: any, event: any): void;

        /** Show the specific items in Menu control.
         * @param {string|any[]} ItemID of the Menu item to be shown
         * @returns {void}
         */
        showItems(itemID: string|any[]): void;
    }
    export namespace Menu {

        export interface Model {

            /** To enable or disable the Animation while hover or click an menu items.See AnimationType
             * @Default {ej.AnimationType.Default}
             */
            animationType?: ej.AnimationType|string;

            /** Specifies the target id of context menu. On right clicking the specified contextTarget element, context menu gets shown.
             * @Default {null}
             */
            contextMenuTarget?: string;

            /** Specifies the container element selectors for submenuâ€™s collision. The submenu gets displayed based on spacing available with respect to container element.
             * @Default {null}
             */
            container?: string;

            /** Specify the CSS class to achieve custom theme.
             */
            cssClass?: string;

            /** To enable or disable the Animation effect while hover or click an menu items.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Specifies the root menu items to be aligned center in horizontal menu.
             * @Default {false}
             */
            enableCenterAlign?: boolean;

            /** Enable / Disable the Menu control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies the menu items to be displayed in right to left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** When this property sets to false, the menu items is displayed without any separators.
             * @Default {true}
             */
            enableSeparator?: boolean;

            /** Specifies the target which needs to be excluded. i.e., The context menu will not be displayed in those specified targets.
             * @Default {null}
             */
            excludeTarget?: string;

            /** Fields used to bind the data source and it includes following field members to make data bind easier.
             * @Default {null}
             */
            fields?: Fields;

            /** Specifies the height of the root menu.
             * @Default {auto}
             */
            height?: string|number;

            /** Specifies the list of HTML attributes to be added to menu control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Enables/disables responsive support for the Menu control during the window resizing time.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Specifies the type of the menu. Essential JavaScript Menu consists of two type of menu, they are Normal Menu and Context Menu mode.See MenuType
             * @Default {ej.MenuType.NormalMenu}
             */
            menuType?: string|ej.MenuType;

            /** Specifies the sub menu items to be show or open only on click.
             * @Default {false}
             */
            openOnClick?: boolean;

            /** Specifies the orientation of normal menu. Normal menu can rendered in horizontal or vertical direction by using this API. See Orientation
             * @Default {ej.Orientation.Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Specifies the main menu items arrows only to be shown if it contains child items.
             * @Default {true}
             */
            showRootLevelArrows?: boolean;

            /** Specifies the sub menu items arrows only to be shown if it contains child items.
             * @Default {true}
             */
            showSubLevelArrows?: boolean;

            /** Specifies position of pull down submenu that will appear on mouse over.See Direction
             * @Default {ej.Direction.Right}
             */
            subMenuDirection?: string|ej.Direction;

            /** Specifies the title to responsive menu.
             * @Default {Menu}
             */
            titleText?: string;

            /** Specifies the width of the main menu.
             * @Default {auto}
             */
            width?: string|number;

            /** Specifies the popup menu height.
             * @Default {auto}
             */
            overflowHeight?: string|number;

            /** Specifies the popup menu width.
             * @Default {auto}
             */
            overflowWidth?: string|number;

            /** Fires before context menu gets open.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when mouse click on menu items.
             */
            click?(e: ClickEventArgs): void;

            /** Fire when context menu on close.
             */
            close?(e: CloseEventArgs): void;

            /** Fires when context menu on open.
             */
            open?(e: OpenEventArgs): void;

            /** Fires to create menu items.
             */
            create?(e: CreateEventArgs): void;

            /** Fires to destroy menu items.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when key down on menu items.
             */
            keydown?(e: KeydownEventArgs): void;

            /** Fires when mouse out from menu items.
             */
            mouseout?(e: MouseoutEventArgs): void;

            /** Fires when mouse over the Menu items.
             */
            mouseover?(e: MouseoverEventArgs): void;

            /** Fires when overflow popup menu opens.
             */
            overflowOpen?(e: OverflowOpenEventArgs): void;

            /** Fires when overflow popup menu closes.
             */
            overflowClose?(e: OverflowCloseEventArgs): void;
        }

        export interface BeforeOpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target element
             */
            target?: any;
        }

        export interface ClickEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns clicked menu item text
             */
            text?: string;

            /** returns clicked menu item element
             */
            element?: any;

            /** returns the event
             */
            event?: any;

            /** returns the selected item
             */
            selectedItem?: number;
        }

        export interface CloseEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target element
             */
            target?: any;
        }

        export interface OpenEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target element
             */
            target?: any;
        }

        export interface CreateEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface KeydownEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns clicked menu item text
             */
            menuText?: string;

            /** returns clicked menu item element
             */
            element?: any;

            /** returns the event
             */
            event?: any;
        }

        export interface MouseoutEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns clicked menu item text
             */
            text?: string;

            /** returns clicked menu item element
             */
            element?: any;

            /** returns the event
             */
            event?: any;
        }

        export interface MouseoverEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns clicked menu item text
             */
            text?: string;

            /** returns clicked menu item element
             */
            element?: any;

            /** returns the event
             */
            event?: any;
        }

        export interface OverflowOpenEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            e?: any;

            /** if the event should be cancelled ; otherwise ,false
             */
            cancel?: boolean;
        }

        export interface OverflowCloseEventArgs {

            /** returns the menu model
             */
            model?: ej.Menu.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            e?: any;

            /** if the event should be cancelled ; otherwise ,false
             */
            cancel?: boolean;
        }

        export interface Fields {

            /** It receives the child data for the inner level.
             */
            child?: any;

            /** It receives datasource as Essential DataManager object and JSON object.
             */
            dataSource?: any;

            /** Specifies the HTML attributes to â€œLIâ€ item list.
             */
            htmlAttribute?: string;

            /** Specifies the id to menu items list
             */
            id?: string;

            /** Specifies the image attribute to â€œimgâ€ tag inside items list.
             */
            imageAttribute?: string;

            /** Specifies the image URL to â€œimgâ€ tag inside item list.
             */
            imageUrl?: string;

            /** Adds custom attributes like &quot;target&quot; to the anchor tag of the menu items.
             */
            linkAttribute?: string;

            /** Specifies the parent id of the table.
             */
            parentId?: string;

            /** It receives query to retrieve data from the table (query is same as SQL).
             */
            query?: any;

            /** Specifies the sprite CSS class to â€œLIâ€ item list.
             */
            spriteCssClass?: string;

            /** It receives table name to execute query on the corresponding table.
             */
            tableName?: string;

            /** Specifies the text of menu items list.
             */
            text?: string;

            /** Specifies the URL to the anchor tag in menu item list.
             */
            url?: string;
        }
    }
    enum AnimationType {
        //string
        Default,
        //string
        None,
    }
    enum MenuType {
        //string
        ContextMenu,
        //string
        NormalMenu,
    }
    enum Direction {
        //string
        Left,
        //string
        None,
        //string
        Right,
    }

    class Pager extends ej.Widget {
        static fn: Pager;
        constructor(element: JQuery | Element, options?: Pager.Model);
        static Locale: any;
        model: Pager.Model;
        defaults: Pager.Model;

        /** Send a paging request to specified page through the pager control.
         * @param {number} Specifies the index to be navigated
         * @returns {void}
         */
        gotoPage(pageIndex: number): void;

        /** goToFirstPage() helps to navigate to the first page of the pager.
         * @returns {void}
         */
        goToFirstPage(): void;

        /** goToNextPage() helps to navigate to the next page to the current page of the pager.
         * @returns {void}
         */
        goToNextPage(): void;

        /** goToLastPage() helps to navigate to the Last page of the pager.
         * @returns {void}
         */
        goToLastPage(): void;

        /** goToPrevPage() helps to navigate to the previous page to the current page of the pager.
         * @returns {void}
         */
        goToPrevPage(): void;

        /** refreshPager() helps to refresh the model value of pager control.
         * @returns {void}
         */
        refreshPager(): void;
    }
    export namespace Pager {

        export interface Model {

            /** Gets or sets a value that indicates whether to display the custom text message in Pager.
             */
            customText?: string;

            /** Gets or sets a value that indicates whether to define which page to display currently in pager.
             * @Default {1}
             */
            currentPage?: number;

            /** Sets the root CSS class, which can be used for customization of pager control.
             */
            cssClass?: string;

            /** Enable or disable the Pager control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Gets or sets a value that indicates whether to display the external Message in Pager.
             * @Default {false}
             */
            enableExternalMessage?: boolean;

            /** Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
             * @Default {false}
             */
            enableQueryString?: boolean;

            /** Align content in the pager control from right to left by setting the property as true.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Gets or sets a value that indicates whether to display the external Message in Pager.
             */
            externalMessage?: string;

            /** Enables or disables responsive support for the Pager control items on window resize.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to
             * a particular country or region.
             * @Default {en-US}
             */
            locale?: string;

            /** Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation.
             * @Default {10}
             */
            pageCount?: number;

            /** Gets or sets a value that indicates whether to define the number of records displayed per page.
             * @Default {12}
             */
            pageSize?: number;

            /** It allows to have multiple choices of pageSize values for Pager control. The &quot;pageSize&quot; API value of the pager will be updated depending upon the value being selected
             * from the dropdown.
             * @Default {null}
             */
            pageSizeList?: any[];

            /** Indicates the pageSizeMessage to be displayed in Pager when pageSizeList API is defined.
             */
            pageSizeMessage?: String;

            /** Template option allows to customize UI appearance of the ejPager by defining their own page layout.
             * @Default {null}
             */
            template?: string;

            /** Get or sets a value of total number of pages in the pager. The totalPages value is calculated based on page size and total records.
             * @Default {null}
             */
            totalPages?: number;

            /** Get the value of total number of records which is bound to a data item.
             * @Default {null}
             */
            totalRecordsCount?: number;

            /** Shows or hides the current page information in pager footer.
             * @Default {true}
             */
            showPageInfo?: boolean;

            /** Triggered when pager numeric item is clicked in pager control.
             */
            click?(e: ClickEventArgs): void;

            /** Triggers when the current page value of the Pager control is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Triggered when Pager control is successfully created.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered when Pager control is successfully destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered when a value is selected in the pageSizeList dropdown.
             */
            pageSizeSelected?(e: PageSizeSelectedEventArgs): void;
        }

        export interface ClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current page index.
             */
            currentPage?: number;

            /** Returns the pager model.
             */
            model?: any;

            /** Returns the name of event
             */
            type?: string;

            /** Returns current action event type and its target.
             */
            event?: any;
        }

        export interface ChangeEventArgs {

            /** Returns the current page index.
             */
            currentPage?: number;

            /** Returns the pager model.
             */
            model?: any;

            /** Returns the name of event
             */
            type?: string;

            /** Returns current action event type and its target.
             */
            event?: any;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the pager model.
             */
            model?: any;

            /** Returns the name of event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the pager model.
             */
            model?: any;

            /** Returns the name of event
             */
            type?: string;
        }

        export interface PageSizeSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the pager model.
             */
            model?: any;

            /** Returns the name of event
             */
            type?: string;
        }
    }

    class Print extends ej.Widget {
        static fn: Print;
        constructor(element: JQuery | Element, options?: Print.Model);
        static Locale: any;
        model: Print.Model;
        defaults: Print.Model;

        /** Print the specific page or an element.
         * @returns {void}
         */
        print(): void;
    }
    export namespace Print {

        export interface Model {

            /** Append the custom HTML after the selected content.
             * @Default {null}
             */
            append?: string;

            /** A selector that specifies a particular element to be excluded from printing.
             * @Default {null}
             */
            excludeSelector?: string;

            /** Specifies whether the URL of an external stylesheet can be included to customize and print that page.
             * @Default {null}
             */
            externalStyles?: string;

            /** Prepend a docType to the document frame.
             * @Default {&lt;!doctype html&gt;}
             */
            docType?: string;

            /** Specifies whether the global styles can be applied to the element to be printed.
             * @Default {true}
             */
            globalStyles?: boolean;

            /** Sets the height of the print window.
             * @Default {454}
             */
            height?: number;

            /** Prepends the custom HTML before the selected content.
             * @Default {null}
             */
            prepend?: string;

            /** Allows printing the content in a new window.
             * @Default {false}
             */
            printInNewWindow?: boolean;

            /** Sets the period of time to wait before printing the content.
             * @Default {1000}
             */
            timeOutPeriod?: number;

            /** Sets the title of the print document.
             * @Default {null}
             */
            title?: string;

            /** Defines the width of the print window.
             * @Default {1024}
             */
            width?: number;

            /** Event triggers before the document page or an element in it gets printed.
             */
            beforeStart?(e: BeforeStartEventArgs): void;
        }

        export interface BeforeStartEventArgs {

            /** Set this option as true to cancel the event.
             */
            cancel?: boolean;

            /** Returns the Print model
             */
            model?: ej.Print.Model;

            /** Returns the name of an event
             */
            type?: string;

            /** Returns the printed element
             */
            content?: any;
        }
    }

    class ProgressBar extends ej.Widget {
        static fn: ProgressBar;
        constructor(element: JQuery | Element, options?: ProgressBar.Model);
        static Locale: any;
        model: ProgressBar.Model;
        defaults: ProgressBar.Model;

        /** Destroy the progressbar widget
         * @returns {void}
         */
        destroy(): void;

        /** Disables the progressbar control
         * @returns {void}
         */
        disable(): void;

        /** Enables the progressbar control
         * @returns {void}
         */
        enable(): void;

        /** Returns the current progress value in percent.
         * @returns {number}
         */
        getPercentage(): number;

        /** Returns the current progress value
         * @returns {number}
         */
        getValue(): number;
    }
    export namespace ProgressBar {

        export interface Model {

            /** Sets the root CSS class for ProgressBar theme, which is used customize.
             * @Default {null}
             */
            cssClass?: string;

            /** When this property sets to false, it disables the ProgressBar control
             * @Default {true}
             */
            enabled?: boolean;

            /** Save current model value to browser cookies for state maintains. While refresh the progressBar control page retains the model value apply from browser cookies
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Sets the ProgressBar direction as right to left alignment.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Defines the height of the ProgressBar.
             * @Default {null}
             */
            height?: number|string;

            /** It allows to define the characteristics of the progressBar control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Sets the maximum value of the ProgressBar.
             * @Default {100}
             */
            maxValue?: number;

            /** Sets the minimum value of the ProgressBar.
             * @Default {0}
             */
            minValue?: number;

            /** Sets the ProgressBar value in percentage. The value should be in between 0 to 100.
             * @Default {0}
             */
            percentage?: number;

            /** Displays rounded corner borders on the progressBar control.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Sets the custom text for the ProgressBar. The text placed in the middle of the ProgressBar and it can be customizable using the class 'e-progress-text'.
             * @Default {null}
             */
            text?: string;

            /** Sets the ProgressBar value. The value should be in between min and max values.
             * @Default {0}
             */
            value?: number;

            /** Defines the width of the ProgressBar.
             * @Default {null}
             */
            width?: number|string;

            /** Event triggers when the progress value changed
             */
            change?(e: ChangeEventArgs): void;

            /** Event triggers when the process completes (at 100%)
             */
            complete?(e: CompleteEventArgs): void;

            /** Event triggers when the progressbar are created
             */
            create?(e: CreateEventArgs): void;

            /** Event triggers when the progressbar are destroyed
             */
            destroy?(e: DestroyEventArgs): void;

            /** Event triggers when the process starts (from 0%)
             */
            start?(e: StartEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the ProgressBar model
             */
            model?: ej.ProgressBar.Model;

            /** returns the current progress percentage
             */
            percentage?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current progress value
             */
            value?: string;
        }

        export interface CompleteEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the ProgressBar model
             */
            model?: ej.ProgressBar.Model;

            /** returns the current progress percentage
             */
            percentage?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current progress value
             */
            value?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the progressbar model
             */
            model?: ej.ProgressBar.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the progressbar model
             */
            model?: ej.ProgressBar.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface StartEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the ProgressBar model
             */
            model?: ej.ProgressBar.Model;

            /** returns the current progress percentage
             */
            percentage?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current progress value
             */
            value?: string;
        }
    }

    class RadioButton extends ej.Widget {
        static fn: RadioButton;
        constructor(element: JQuery | Element, options?: RadioButton.Model);
        static Locale: any;
        model: RadioButton.Model;
        defaults: RadioButton.Model;

        /** To disable the RadioButton
         * @returns {void}
         */
        disable(): void;

        /** To enable the RadioButton
         * @returns {void}
         */
        enable(): void;
    }
    export namespace RadioButton {

        export interface Model {

            /** Specifies the check attribute of the Radio Button.
             * @Default {false}
             */
            checked?: boolean;

            /** Specify the CSS class to RadioButton to achieve custom theme.
             */
            cssClass?: string;

            /** Specifies the RadioButton control state.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies the enablePersistence property for RadioButton while initialization. The enablePersistence API save current model value to browser cookies for state maintains. While
             * refreshing the radio button control page the model value apply from browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specify the Right to Left direction to RadioButton
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the HTML Attributes of the Checkbox
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the id attribute for the Radio Button while initialization.
             * @Default {null}
             */
            id?: string;

            /** Specify the idPrefix value to be added before the current id of the RadioButton.
             * @Default {ej}
             */
            idPrefix?: string;

            /** Specifies the name attribute for the Radio Button while initialization.
             * @Default {Sets id as name if it is null}
             */
            name?: string;

            /** Specifies the size of the RadioButton.
             * @Default {small}
             */
            size?: ej.RadioButtonSize|string;

            /** Specifies the text content for RadioButton.
             */
            text?: string;

            /** Set the jQuery validation error message in radio button.
             * @Default {null}
             */
            validationMessage?: any;

            /** Set the jQuery validation rules in radio button.
             * @Default {null}
             */
            validationRules?: any;

            /** Specifies the value attribute of the Radio Button.
             * @Default {null}
             */
            value?: string;

            /** Fires before the RadioButton is going to changed its state successfully
             */
            beforeChange?(e: BeforeChangeEventArgs): void;

            /** Fires when the RadioButton state is changed successfully
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when the RadioButton created successfully
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the RadioButton destroyed successfully
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface BeforeChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RadioButton model
             */
            model?: ej.RadioButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns true if element is checked, otherwise returns false
             */
            isChecked?: boolean;

            /** returns true if change event triggered by interaction, otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RadioButton model
             */
            model?: ej.RadioButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns true if element is checked, otherwise returns false
             */
            isChecked?: boolean;

            /** returns true if change event triggered by interaction, otherwise returns false
             */
            isInteraction?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RadioButton model
             */
            model?: ej.RadioButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RadioButton model
             */
            model?: ej.RadioButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }
    enum RadioButtonSize {
        //Shows small size radio button
        Small,
        //Shows medium size radio button
        Medium,
    }

    class Rating extends ej.Widget {
        static fn: Rating;
        constructor(element: JQuery | Element, options?: Rating.Model);
        static Locale: any;
        model: Rating.Model;
        defaults: Rating.Model;

        /** Destroy the Rating widget all events bound will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To get the current value of rating control.
         * @returns {number}
         */
        getValue(): number;

        /** To hide the rating control.
         * @returns {void}
         */
        hide(): void;

        /** User can refresh the rating control to identify changes.
         * @returns {void}
         */
        refresh(): void;

        /** To reset the rating value.
         * @returns {void}
         */
        reset(): void;

        /** To set the rating value.
         * @param {string|number} Specifies the rating value.
         * @returns {void}
         */
        setValue(value: string|number): void;

        /** To show the rating control
         * @returns {void}
         */
        show(): void;
    }
    export namespace Rating {

        export interface Model {

            /** Enables the rating control with reset button.It can be used to reset the rating control value.
             * @Default {true}
             */
            allowReset?: boolean;

            /** Specify the CSS class to achieve custom theme.
             */
            cssClass?: string;

            /** When this property is set to false, it disables the rating control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Save current model value to browser cookies for state maintenance. While refresh the page Rating control values are retained.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specifies the height of the Rating control wrapper.
             * @Default {null}
             */
            height?: string;

            /** Specifies the list of HTML attributes to be added to rating control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the value to be increased while navigating between shapes(stars) in Rating control.
             * @Default {1}
             */
            incrementStep?: number;

            /** Allow to render the maximum number of Rating shape(star).
             * @Default {5}
             */
            maxValue?: number;

            /** Allow to render the minimum number of Rating shape(star).
             * @Default {0}
             */
            minValue?: number;

            /** Specifies the orientation of Rating control. See Orientation
             * @Default {ej.Rating.Orientation.Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Helps to provide more precise ratings.Rating control supports three precision modes - full, half, and exact. See Precision
             * @Default {full}
             */
            precision?: ej.Rating.Precision|string;

            /** Interaction with Rating control can be prevented by enabling this API.
             * @Default {false}
             */
            readOnly?: boolean;

            /** To specify the height of each shape in Rating control.
             * @Default {23}
             */
            shapeHeight?: number;

            /** To specify the width of each shape in Rating control.
             * @Default {23}
             */
            shapeWidth?: number;

            /** Enables the tooltip option.Currently selected value will be displayed in tooltip.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** To specify the number of stars to be selected while rendering.
             * @Default {1}
             */
            value?: number;

            /** Specifies the width of the Rating control wrapper.
             * @Default {null}
             */
            width?: string;

            /** Fires when Rating value changes.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when Rating control is clicked successfully.
             */
            click?(e: ClickEventArgs): void;

            /** Fires when Rating control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when Rating control is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when mouse hover is removed from Rating control.
             */
            mouseout?(e: MouseoutEventArgs): void;

            /** Fires when mouse move is moving the Rating control.
             */
            mousemove?(e: MousemoveEventArgs): void;

            /** Fires when mouse hovered over the Rating control.
             */
            mouseover?(e: MouseoverEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** returns the current value.
             */
            value?: number;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse click event args values.
             */
            event?: any;
        }

        export interface ClickEventArgs {

            /** returns the current value.
             */
            value?: number;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse click event args values.
             */
            event?: any;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface MouseoutEventArgs {

            /** returns the current value.
             */
            value?: number;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse click event args values.
             */
            event?: any;
        }

        export interface MousemoveEventArgs {

            /** returns the current value.
             */
            value?: number;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse click event args values.
             */
            event?: any;
        }

        export interface MouseoverEventArgs {

            /** returns the current value.
             */
            value?: number;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rating model
             */
            model?: ej.Rating.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the mouse click event args values.
             */
            event?: any;

            /** returns the current index value.
             */
            index?: any;
        }

        enum Precision {

            ///string
            Exact,

            ///string
            Full,

            ///string
            Half
        }

    }

    class Ribbon extends ej.Widget {
        static fn: Ribbon;
        constructor(element: JQuery | Element, options?: Ribbon.Model);
        static Locale: any;
        model: Ribbon.Model;
        defaults: Ribbon.Model;

        /** Adds contextual tab or contextual tab set dynamically in the ribbon control with contextual tabs object and index position. When index is null, ribbon contextual tab or contextual
         * tab set is added at the last index.
         * @param {any} contextual tab or contextual tab set object.
         * @param {number} index of the contextual tab or contextual tab set, this is optional.
         * @returns {void}
         */
        addContextualTabs(contextualTabSet: any, index?: number): void;

        /** Add new option to Backstage page.
         * @param {any} select the object to add the backstage item
         * @param {number} index to the backstage item this is optional.
         * @returns {void}
         */
        addBackStageItem(item: any, index?: number): void;

        /** Adds tab dynamically in the ribbon control with given name, tab group array and index position. When index is null, ribbon tab is added at the last index.
         * @param {string} ribbon tab display text.
         * @param {any[]} groups to be displayed in ribbon tab .
         * @param {number} index of the ribbon tab,this is optional.
         * @returns {void}
         */
        addTab(tabText: string, ribbonGroups: any[], index?: number): void;

        /** Adds tab group dynamically in the ribbon control with given tab index, tab group object and group index position. When group index is null, ribbon group is added at the last index.
         * @param {number} ribbon tab index.
         * @param {any} group to be displayed in ribbon tab .
         * @param {number} index of the ribbon group,this is optional.
         * @returns {void}
         */
        addTabGroup(tabIndex: number, tabGroup: any, groupIndex?: number): void;

        /** Adds group content dynamically in the ribbon control with given tab index, group index, content, content index and sub group index position. When content index is null, content is
         * added at the last index.
         * @param {number} ribbon tab index.
         * @param {number} ribbon group index.
         * @param {any} content to be displayed in the ribbon group.
         * @param {number} ribbon content index. This is optional. If the value is not given, then by default contentIndex will be considered as 0.
         * @param {number} sub group index in the ribbon group. This is optional. If the value is not given, then by default contentIndex will be considered as 0.
         * @returns {void}
         */
        addTabGroupContent(tabIndex: number, groupIndex: number, content: any, contentIndex?: number, subGroupIndex?: number): void;

        /** Hides the ribbon backstage page.
         * @returns {void}
         */
        hideBackstage(): void;

        /** Collapses the ribbon tab content.
         * @returns {void}
         */
        collapse(): void;

        /** Destroys the ribbon widget. All the events bound using this._on are unbound automatically and the ribbon control is moved to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Expands the ribbon tab content.
         * @returns {void}
         */
        expand(): void;

        /** Gets text of the given index tab in the ribbon control.
         * @param {number} index of the tab item.
         * @returns {string}
         */
        getTabText(index: number): string;

        /** Hides the given text tab in the ribbon control.
         * @param {string} text of the tab item.
         * @returns {void}
         */
        hideTab(text: string): void;

        /** Checks whether the given text tab in the ribbon control is enabled or not.
         * @param {string} text of the tab item.
         * @returns {boolean}
         */
        isEnable(text: string): boolean;

        /** Checks whether the given text tab in the ribbon control is visible or not.
         * @param {string} text of the tab item.
         * @returns {boolean}
         */
        isVisible(text: string): boolean;

        /** Removes the given index tab item from the ribbon control.
         * @param {number} index of tab item.
         * @returns {void}
         */
        removeTab(index: number): void;

        /** Sets new text to the given text tab in the ribbon control.
         * @param {string} current text of the tab item.
         * @param {string} new text of the tab item.
         * @returns {void}
         */
        setTabText(tabText: string, newText: string): void;

        /** Displays the ribbon backstage page.
         * @returns {void}
         */
        showBackstage(): void;

        /** Displays the given text tab in the ribbon control.
         * @param {string} text of the tab item.
         * @returns {void}
         */
        showTab(text: string): void;

        /** To customize Group alone in the inside content.
         * @param {number} ribbon tab index.
         * @param {string} group id to be displayed in ribbon tab .
         * @param {any} contentGroup is used in the object
         * @returns {void}
         */
        updateGroup(tabIndex: number, groupId: string, contentGroup?: any): void;

        /** Update option in existing Backstage.
         * @param {number} index to the backstage item
         * @param {any} select the object to add the backstage item
         * @returns {void}
         */
        updateBackStageItem(index: number, item?: any): void;

        /** To customize whole content from Tab Group.
         * @param {number} ribbon tab index.
         * @param {string} ribbon group text.
         * @param {number} ribbon content index. This is optional. If the value is not given, all content groups will be removed.
         * @param {number} sub group index in the ribbon group. This is optional. If the value is not given, all content groups will be removed.
         * @returns {void}
         */
        removeTabGroupContent(tabIndex: number, groupText: string, contentIndex?: number, subGroupIndex?: number): void;

        /** Remove option from Backstage.
         * @param {number} index to the backstage item
         * @returns {void}
         */
        removeBackStageItem(index: number): void;
    }
    export namespace Ribbon {

        export interface Model {

            /** Enables the ribbon resize feature.allowResizing is a deprecated property of isResponsive.
             * @Default {false}
             */
            allowResizing?: boolean;

            /** When set to true, adapts the Ribbon layout to fit the screen size of devices on which it renders.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the height, width, enableRTL, showRoundedCorner,enabled,cssClass property to the controls in the ribbon commonly andit will work only when those properties are not
             * defined in buttonSettings and content defaults.
             * @Default {Object}
             */
            buttonDefaults?: any;

            /** Property to enable the ribbon quick access toolbar.
             * @Default {false}
             */
            showQAT?: boolean;

            /** Sets the root CSS class for Ribbon which allow us to customize the appearance.
             */
            cssClass?: string;

            /** Sets custom setting to the collapsible pin in the ribbon.
             * @Default {Object}
             */
            collapsePinSettings?: CollapsePinSettings;

            /** Set enableOnDemand as true to load ribbon tab and backstage contents while corresponding item clicked.
             * @Default {false}
             */
            enableOnDemand?: boolean;

            /** Set collapsible property as true to render ribbon in initially collapsed state.
             * @Default {false}
             */
            collapsible?: boolean;

            /** Align content in the ribbon control from right to left by setting the property as true.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Sets custom setting to the expandable pin in the ribbon.
             * @Default {Object}
             */
            expandPinSettings?: ExpandPinSettings;

            /** Specifies the application tab to contain application menu or backstage page in the ribbon control.
             * @Default {Object}
             */
            applicationTab?: ApplicationTab;

            /** Specifies the contextual tabs and tab set to the ribbon control with the background color and border color. Refer to the tabs section for adding tabs into the contextual tab and
             * contextual tab set.
             * @Default {Array}
             */
            contextualTabs?: ContextualTab[];

            /** Specifies the index or indexes to disable the given index tab or indexes tabs in the ribbon control.
             * @Default {0}
             */
            disabledItemIndex?: any[];

            /** Specifies the index or indexes to enable the given index tab or indexes tabs in the ribbon control.
             * @Default {null}
             */
            enabledItemIndex?: any[];

            /** Specifies the index of the ribbon tab to select the given index tab item in the ribbon control.
             * @Default {1}
             */
            selectedItemIndex?: number;

            /** Specifies the tabs and its groups. Also specifies the control details that has to be placed in the tab area in the ribbon control.
             * @Default {Array}
             */
            tabs?: Tab[];

            /** Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to
             * a particular country or region and  it will need to use the user's preference.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the width to the ribbon control. You can set width in string or number format.
             * @Default {null}
             */
            width?: string|number;

            /** Triggered before the ribbon tab item is removed.
             */
            beforeTabRemove?(e: BeforeTabRemoveEventArgs): void;

            /** Triggered before the ribbon control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered before the ribbon control is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered when the control in the group is clicked successfully.
             */
            groupClick?(e: GroupClickEventArgs): void;

            /** Triggered when the group expander in the group is clicked successfully.
             */
            groupExpand?(e: GroupExpandEventArgs): void;

            /** Triggered when an item in the Gallery control is clicked successfully.
             */
            galleryItemClick?(e: GalleryItemClickEventArgs): void;

            /** Triggered when a tab or button in the backstage page is clicked successfully.
             */
            backstageItemClick?(e: BackstageItemClickEventArgs): void;

            /** Triggered when the ribbon control is collapsed.
             */
            collapse?(e: CollapseEventArgs): void;

            /** Triggered when the ribbon control is expanded.
             */
            expand?(e: ExpandEventArgs): void;

            /** Triggered before the ribbon control is load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggered after adding the new ribbon tab item.
             */
            tabAdd?(e: TabAddEventArgs): void;

            /** Triggered when tab is clicked successfully in the ribbon control.
             */
            tabClick?(e: TabClickEventArgs): void;

            /** Triggered before the ribbon tab is created.
             */
            tabCreate?(e: TabCreateEventArgs): void;

            /** Triggered after the tab item is removed from the ribbon control.
             */
            tabRemove?(e: TabRemoveEventArgs): void;

            /** Triggered after the ribbon tab item is selected in the ribbon control.
             */
            tabSelect?(e: TabSelectEventArgs): void;

            /** Triggered when the expand/collapse button is clicked successfully .
             */
            toggleButtonClick?(e: ToggleButtonClickEventArgs): void;

            /** Triggered when the QAT menu item is clicked successfully .
             */
            qatMenuItemClick?(e: QatMenuItemClickEventArgs): void;
        }

        export interface BeforeTabRemoveEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns current tab item index in the ribbon control.
             */
            index?: number;
        }

        export interface CreateEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns current ribbon tab item index
             */
            deleteIndex?: number;
        }

        export interface GroupClickEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the control clicked in the group.
             */
            target?: number;
        }

        export interface GroupExpandEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the clicked group expander.
             */
            target?: number;
        }

        export interface GalleryItemClickEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the gallery model.
             */
            galleryModel?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the item clicked in the gallery.
             */
            target?: number;
        }

        export interface BackstageItemClickEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the item clicked in the gallery.
             */
            target?: number;

            /** returns the id of the target item.
             */
            id?: string;

            /** returns the text of the target item.
             */
            text?: string;
        }

        export interface CollapseEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ExpandEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface LoadEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface TabAddEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns new added tab header.
             */
            tabHeader?: any;

            /** returns new added tab content panel.
             */
            tabContent?: any;
        }

        export interface TabClickEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: any;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: any;

            /** returns current active index.
             */
            activeIndex?: number;
        }

        export interface TabCreateEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns current ribbon tab item index
             */
            deleteIndex?: number;
        }

        export interface TabRemoveEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the removed index.
             */
            removedIndex?: number;
        }

        export interface TabSelectEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: any;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: any;

            /** returns current active index.
             */
            activeIndex?: number;
        }

        export interface ToggleButtonClickEventArgs {

            /** Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the expand/collapse button.
             */
            target?: number;
        }

        export interface QatMenuItemClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the ribbon model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the clicked menu item text.
             */
            text?: string;
        }

        export interface CollapsePinSettings {

            /** Sets tooltip for the collapse pin .
             * @Default {null}
             */
            toolTip?: string;

            /** Specifies the custom tooltip for collapse pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
             * @Default {Object}
             */
            customToolTip?: any;
        }

        export interface ExpandPinSettings {

            /** Sets tooltip for the expand pin.
             * @Default {null}
             */
            toolTip?: string;

            /** Specifies the custom tooltip for expand pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
             * @Default {Object}
             */
            customToolTip?: any;
        }

        export interface ApplicationTabBackstageSettingsPage {

            /** Specifies the id for ribbon backstage page's tab and button elements.
             * @Default {null}
             */
            id?: string;

            /** Specifies the text for ribbon backstage page's tab header and button elements.
             * @Default {null}
             */
            text?: string;

            /** Specifies the type for ribbon backstage page's contents. Set &quot;ej.Ribbon.BackStageItemType.Tab&quot; to render the tab or &quot;ej.Ribbon.BackStageItemType.Button&quot; to
             * render the button.
             * @Default {ej.Ribbon.ItemType.Tab}
             */
            itemType?: ej.Ribbon.ItemType|string;

            /** Specifies the id of HTML elements like div,ul, etc., as ribbon backstage page's tab content.
             * @Default {null}
             */
            contentID?: string;

            /** Specifies the separator between backstage page's tab and button elements.
             * @Default {false}
             */
            enableSeparator?: boolean;
        }

        export interface ApplicationTabBackstageSettings {

            /** Specifies the display text of application tab.
             * @Default {null}
             */
            text?: string;

            /** Specifies the height of ribbon backstage page.
             * @Default {null}
             */
            height?: string|number;

            /** Specifies the width of ribbon backstage page.
             * @Default {null}
             */
            width?: string|number;

            /** Specifies the ribbon backstage page with its tab and button elements.
             * @Default {Array}
             */
            pages?: ApplicationTabBackstageSettingsPage[];

            /** Specifies the width of backstage page header that contains tabs and buttons.
             * @Default {null}
             */
            headerWidth?: string|number;
        }

        export interface ApplicationTab {

            /** Specifies the ribbon backstage page items.
             * @Default {Object}
             */
            backstageSettings?: ApplicationTabBackstageSettings;

            /** Specifies the ID of ul list to create application menu in the ribbon control.
             * @Default {null}
             */
            menuItemID?: string;

            /** Specifies the menu members, events by using the menu settings for the menu in the application tab.
             * @Default {Object}
             */
            menuSettings?: any;

            /** Specifies the application menu or backstage page. Specify the type of application tab as &quot;ej.Ribbon.ApplicationTabType.Menu&quot; to render the application menu or
             * &quot;ej.Ribbon.ApplicationTabType.Backstage&quot; to render backstage page in the ribbon control.
             * @Default {ej.Ribbon.ApplicationTabType.Menu}
             */
            type?: ej.Ribbon.ApplicationTabType|string;
        }

        export interface ContextualTab {

            /** Specifies the backgroundColor of the contextual tabs and tab set in the ribbon control.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the borderColor of the contextual tabs and tab set in the ribbon control.
             * @Default {null}
             */
            borderColor?: string;

            /** Specifies the tabs to present in the contextual tabs and tab set. Refer to the tabs section for adding tabs into the contextual tabs and tab set.
             * @Default {Array}
             */
            tabs?: any[];
        }

        export interface TabsGroupsContentDefaults {

            /** Specifies the controls height such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
             * @Default {null}
             */
            height?: string|number;

            /** Specifies the controls width such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
             * @Default {null}
             */
            width?: string|number;

            /** Specifies the controls type such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
             * @Default {ej.Ribbon.Type.Button}
             */
            type?: string;

            /** Specifies the controls size such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
             * @Default {false}
             */
            isBig?: boolean;
        }

        export interface TabsGroupsContentGroupsCustomGalleryItem {

            /** Specifies the Syncfusion button members, events by using buttonSettings.
             * @Default {Object}
             */
            buttonSettings?: any;

            /** Specifies the type as ej.Ribbon.CustomItemType.Menu or ej.Ribbon.CustomItemType.Button to render Syncfusion button and menu.
             * @Default {ej.Ribbon.CustomItemType.Button}
             */
            customItemType?: ej.Ribbon.CustomItemType|string;

            /** Specifies the custom tooltip for gallery extra item's button. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
             * @Default {Object}
             */
            customToolTip?: any;

            /** Specifies the UL list id to render menu as gallery extra item.
             * @Default {null}
             */
            menuId?: string;

            /** Specifies the Syncfusion menu members, events by using menuSettings.
             * @Default {Object}
             */
            menuSettings?: any;

            /** Specifies the text for gallery extra item's button.
             * @Default {null}
             */
            text?: string;

            /** Specifies the tooltip for gallery extra item's button.
             * @Default {null}
             */
            toolTip?: string;
        }

        export interface TabsGroupsContentGroupsCustomToolTip {

            /** Sets content to the custom tooltip. Text and HTML support are provided for content.
             * @Default {null}
             */
            content?: string;

            /** Sets icon to the custom tooltip content.
             * @Default {null}
             */
            prefixIcon?: string;

            /** Sets title to the custom tooltip. Text and HTML support are provided for title and the title is in bold for text format.
             * @Default {null}
             */
            title?: string;
        }

        export interface TabsGroupsContentGroupsGalleryItem {

            /** Specifies the Syncfusion button members, events by using buttonSettings.
             * @Default {Object}
             */
            buttonSettings?: any;

            /** Specifies the custom tooltip for gallery content. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
             * @Default {Object}
             */
            customToolTip?: any;

            /** Sets text for the gallery content.
             * @Default {null}
             */
            text?: string;

            /** Sets tooltip for the gallery content.
             * @Default {null}
             */
            toolTip?: string;
        }

        export interface TabsGroupsContentGroup {

            /** When isMobileOnly is true,its shows in mobile toolbar.isResponsive should be true for using this property.
             * @Default {false}
             */
            isMobileOnly?: boolean;

            /** Specifies the Syncfusion button members, events by using this buttonSettings.
             * @Default {Object}
             */
            buttonSettings?: any;

            /** It is used to set the count of gallery contents in a row.
             * @Default {null}
             */
            columns?: number;

            /** Specifies the custom items such as div, table, controls as custom controls with the type &quot;ej.Ribbon.Type.Custom&quot; in the groups.
             * @Default {null}
             */
            contentID?: string;

            /** Specifies the CSS class property to apply styles to the button, split, dropdown controls in the groups.
             * @Default {null}
             */
            cssClass?: string;

            /** Specifies the Syncfusion button and menu as gallery extra items.
             * @Default {Array}
             */
            customGalleryItems?: TabsGroupsContentGroupsCustomGalleryItem[];

            /** Provides custom tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups. Text and HTML support are also provided for title and content.
             * @Default {Object}
             */
            customToolTip?: TabsGroupsContentGroupsCustomToolTip;

            /** Specifies the Syncfusion dropdown list members, events by using this dropdownSettings.
             * @Default {Object}
             */
            dropdownSettings?: any;

            /** Specifies the separator to the control that is in row type group. The separator separates the control from the next control in the group. Set &quot;true&quot; to enable the
             * separator.
             * @Default {false}
             */
            enableSeparator?: boolean;

            /** Sets the count of gallery contents in a row, when the gallery is in expanded state.
             * @Default {null}
             */
            expandedColumns?: number;

            /** Defines each gallery content.
             * @Default {Array}
             */
            galleryItems?: TabsGroupsContentGroupsGalleryItem[];

            /** Specifies the Id for button, split button, dropdown list, toggle button, gallery, custom controls in the sub groups.
             * @Default {null}
             */
            id?: string;

            /** Specifies the size for button, split button controls. Set &quot;true&quot; for big size and &quot;false&quot; for small size.
             * @Default {null}
             */
            isBig?: boolean;

            /** Sets the height of each gallery content.
             * @Default {null}
             */
            itemHeight?: string|number;

            /** Sets the width of each gallery content.
             * @Default {null}
             */
            itemWidth?: string|number;

            /** Specifies the Syncfusion split button members, events by using this splitButtonSettings.
             * @Default {Object}
             */
            splitButtonSettings?: any;

            /** Specifies the text for button, split button, toggle button controls in the sub groups.
             * @Default {null}
             */
            text?: string;

            /** Specifies the Syncfusion toggle button members, events by using toggleButtonSettings.
             * @Default {Object}
             */
            toggleButtonSettings?: any;

            /** Specifies the tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups.
             * @Default {null}
             */
            toolTip?: string;

            /** To add,show and hide controls in Quick Access toolbar.
             * @Default {ej.Ribbon.QuickAccessMode.None}
             */
            quickAccessMode?: ej.Ribbon.QuickAccessMode|string;

            /** Specifies the type as &quot;ej.Ribbon.Type.Button&quot; or &quot;ej.Ribbon.Type.SplitButton&quot; or &quot;ej.Ribbon.Type.DropDownList&quot; or
             * &quot;ej.Ribbon.Type.ToggleButton&quot; or &quot;ej.Ribbon.Type.Custom&quot; or &quot;ej.Ribbon.Type.Gallery&quot; to render button, split, dropdown, toggle button, gallery,
             * custom controls.
             * @Default {ej.Ribbon.Type.Button}
             */
            type?: ej.Ribbon.Type|string;
        }

        export interface TabsGroupsContent {

            /** Specifies the height, width, type, isBig property to the controls in the group commonly.
             * @Default {Object}
             */
            defaults?: TabsGroupsContentDefaults;

            /** Specifies the controls such as Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls in the subgroup of the ribbon tab .
             * @Default {Array}
             */
            groups?: TabsGroupsContentGroup[];
        }

        export interface TabsGroupsGroupExpanderSettings {

            /** Sets tooltip for the group expander of the group.
             * @Default {null}
             */
            toolTip?: string;

            /** Specifies the custom tooltip for group expander.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
             * @Default {Object}
             */
            customToolTip?: any;
        }

        export interface TabsGroup {

            /** Specifies the alignment of controls in the groups in 'row' type or 'column' type. Value for row type is &quot;ej.Ribbon.AlignType.Rows&quot; and for column type is
             * &quot;ej.Ribbon.alignType.columns&quot;.
             * @Default {ej.Ribbon.AlignType.Rows}
             */
            alignType?: ej.Ribbon.AlignType|string;

            /** Specifies the Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls to the groups in the ribbon control.
             * @Default {Array}
             */
            content?: TabsGroupsContent[];

            /** Specifies the ID of custom items to be placed in the groups.
             * @Default {null}
             */
            contentID?: string;

            /** Specifies the HTML contents to place into the groups.
             * @Default {null}
             */
            customContent?: string;

            /** Specifies the group expander for groups in the ribbon control. Set &quot;true&quot; to enable the group expander.
             * @Default {false}
             */
            enableGroupExpander?: boolean;

            /** Sets custom setting to the groups in the ribbon control.
             * @Default {Object}
             */
            groupExpanderSettings?: TabsGroupsGroupExpanderSettings;

            /** Specifies the text to the groups in the ribbon control.
             * @Default {null}
             */
            text?: string;

            /** Specifies the custom items such as div, table, controls by using the &quot;custom&quot; type.
             * @Default {null}
             */
            type?: string;
        }

        export interface Tab {

            /** Specifies single group or multiple groups and its contents to each tab in the ribbon control.
             * @Default {Array}
             */
            groups?: TabsGroup[];

            /** Specifies the ID for each tab's content panel.
             * @Default {null}
             */
            id?: string;

            /** Specifies the text of the tab in the ribbon control.
             * @Default {null}
             */
            text?: string;
        }

        enum ItemType {

            ///To render the button for ribbon backstage pageâ€™s contents
            Button,

            ///To render the tab for ribbon backstage pageâ€™s contents
            Tab
        }


        enum ApplicationTabType {

            ///applicationTab display as menu
            Menu,

            ///applicationTab display as backstage
            Backstage
        }


        enum AlignType {

            ///To align the group content's in row
            Rows,

            ///To align group content's in columns
            Columns
        }


        enum CustomItemType {

            ///Specifies the button type in customGalleryItems
            Button,

            ///Specifies the menu type in customGalleryItems
            Menu
        }


        enum QuickAccessMode {

            ///Controls are hidden in Quick Access toolbar
            None,

            ///Add controls in toolBar
            ToolBar,

            ///Add controls in menu
            Menu
        }


        enum Type {

            ///Specifies the button control
            Button,

            ///Specifies the split button
            SplitButton,

            ///Specifies the dropDown
            DropDownList,

            ///To append external element's
            Custom,

            ///Specifies the toggle button
            ToggleButton,

            ///Specifies the ribbon gallery
            Gallery
        }

    }

    class Kanban extends ej.Widget {
        static fn: Kanban;
        constructor(element: JQuery | Element, options?: Kanban.Model);
        static Locale: any;
        model: Kanban.Model;
        defaults: Kanban.Model;

        /** Add or remove columns in Kanban columns collections.Default action is add.
         * @param {any[]|string} Pass array of columns or string of headerText to add/remove the column in Kanban
         * @param {any[]|string} Pass array of columns or string of key value to add/remove the column in Kanban
         * @param {string} optional Pass add/remove action to be performed. By default "add" action will perform
         * @returns {void}
         */
        columns(columndetails: any[]|string, keyvalue: any[]|string, action?: string): void;

        /** Destroy the Kanban widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Refresh the Kanban with new data source.
         * @param {any[]} Pass new data source to the Kanban
         * @returns {void}
         */
        dataSource(datasource: any[]): void;

        /** toggleColumn based on the headerText in Kanban.
         * @param {any} Pass the header text of the column to get the corresponding column object
         * @returns {void}
         */
        toggleColumn(headerText: any): void;

        /** Expand or collapse the card based on the state of target &quot;div&quot;
         * @param {string|number} Pass the id of card to be toggle
         * @returns {void}
         */
        toggleCard(key: string|number): void;

        /** Used for get the names of all the visible column name collections in Kanban.
         * @returns {any[]}
         */
        getVisibleColumnNames(): any[];

        /** Get the scroller object of Kanban.
         * @returns {ej.Scroller}
         */
        getScrollObject(): ej.Scroller;

        /** Get the column details based on the given header text in Kanban.
         * @param {string} Pass the header text of the column to get the corresponding column object
         * @returns {string}
         */
        getColumnByHeaderText(headerText: string): string;

        /** Get the table details based on the given header table in Kanban.
         * @returns {string}
         */
        getHeaderTable(): string;

        /** Hide columns from the Kanban based on the header text
         * @param {any[]|string} you can pass either array of header text of various columns or a header text of a column to hide
         * @returns {void}
         */
        hideColumns(headerText: any[]|string): void;

        /** Print the Kanban Board
         * @returns {void}
         */
        print(): void;

        /** Refresh the template of the Kanban
         * @returns {void}
         */
        refreshTemplate(): void;

        /** Refresh the Kanban contents.The template refreshment is based on the argument passed along with this method
         * @param {boolean} optional When templateRefresh is set true, template and Kanban contents both are refreshed in Kanban else only Kanban content is refreshed
         * @returns {void}
         */
        refresh(templateRefresh?: boolean): void;

        /** Show columns in the Kanban based on the header text.
         * @param {any[]|string} You can pass either array of header text of various columns or a header text of a column to show
         * @returns {void}
         */
        showColumns(headerText: any[]|string): void;

        /** Update a card in Kanban control based on key and JSON data given.
         * @param {string} Pass the key field Name of the column
         * @param {any[]} Pass the edited JSON data of card need to be update.
         * @returns {void}
         */
        updateCard(key: string, data: any[]): void;

        KanbanSelection: Kanban.KanbanSelection;

        KanbanSwimlane: Kanban.KanbanSwimlane;

        KanbanFilter: Kanban.KanbanFilter;

        KanbanEdit: Kanban.KanbanEdit;
    }
    export namespace Kanban {

        export interface KanbanSelection {

            /** It is used to clear all the card selection.
             * @returns {void}
             */
            clear(): void;
        }

        export interface KanbanSwimlane {

            /** Expand all the swimlane rows in Kanban.
             * @returns {void}
             */
            expandAll(): void;

            /** Collapse all the swimlane rows in Kanban.
             * @returns {void}
             */
            collapseAll(): void;

            /** Expand or collapse the swimlane row based on the state of target &quot;div&quot;
             * @param {any} Pass the div object to toggleSwimlane row based on its row state
             * @returns {void}
             */
            toggle($div: any): void;
        }

        export interface KanbanFilter {

            /** Method used for send a clear search request to Kanban.
             * @returns {void}
             */
            clearSearch(): void;

            /** Send a search request to Kanban with specified string passed in it.
             * @param {string} Pass the string to search in Kanban card
             * @returns {void}
             */
            searchCards(searchString: string): void;

            /** Send a clear request to filter cards in the kanban.
             * @returns {void}
             */
            clearFilter(): void;

            /** Send a filtering request to cards in the kanban.
             * @returns {void}
             */
            filterCards(): void;
        }

        export interface KanbanEdit {

            /** Add a new card in Kanban control when allowAdding is set as true. If parameters are not given default dialog will be open.
             * @param {string} Pass the primary key field Name of the column
             * @param {any[]} Pass the edited JSON data of card need to be add.
             * @returns {void}
             */
            addCard(primaryKey: string, card: any[]): void;

            /** Send a cancel request of add/edit card in Kanban when allowEditing/allowAdding is set as true.
             * @returns {void}
             */
            cancelEdit(): void;

            /** Delete a card in Kanban control when allowAdding/allowEditing is set as true.
             * @param {string|number} Pass the key of card to be delete
             * @returns {void}
             */
            deleteCard(Key: string|number): void;

            /** Send a save request in Kanban when any card is in edit/new add card state and allowEditing/allowAdding is set as true.
             * @returns {void}
             */
            endEdit(): void;

            /** Send an edit card request in Kanban when allowEditing is set as true. Parameter will be HTML element or primary key
             * @param {any} Pass the div selected row element to be edited in Kanban
             * @returns {void}
             */
            startEdit($div: any): void;

            /** Method used for set validation to a field during editing.
             * @param {string} Specify the name of the column to set validation rules
             * @param {any} Specify the validation rules for the field
             * @returns {void}
             */
            setValidationToField(name: string, rules: any): void;
        }

        export interface Model {

            /** Gets or sets a value that indicates whether to enable allowDragAndDrop behavior on Kanban.
             * @Default {true}
             */
            allowDragAndDrop?: boolean;

            /** Gets or sets a value that indicates whether to enable drag and drop behavior between Kanban controls.
             * @Default {false}
             */
            allowExternalDragAndDrop?: boolean;

            /** To enable or disable the title of the card.
             * @Default {false}
             */
            allowTitle?: boolean;

            /** Customize the settings for swim lane.
             * @Default {Object}
             */
            swimlaneSettings?: SwimlaneSettings;

            /** To enable or disable the column expand /collapse.
             * @Default {false}
             */
            allowToggleColumn?: boolean;

            /** To enable Searching operation in Kanban.
             * @Default {false}
             */
            allowSearching?: boolean;

            /** To enable filtering behavior on Kanban.User can specify query in filterSettings collection after enabling allowFiltering.
             * @Default {false}
             */
            allowFiltering?: boolean;

            /** Gets or sets a value that indicates whether to enable allowSelection behavior on Kanban.User can select card and the selected card will be highlighted on Kanban.
             * @Default {true}
             */
            allowSelection?: boolean;

            /** Gets or sets a value that indicates whether to allow card hover actions.
             * @Default {true}
             */
            allowHover?: boolean;

            /** To allow keyboard navigation actions.
             * @Default {false}
             */
            allowKeyboardNavigation?: boolean;

            /** Gets or sets a value that indicates whether to enable the scrollbar in the Kanban and view the card by scroll through the Kanban manually.
             * @Default {false}
             */
            allowScrolling?: boolean;

            /** Gets or sets a value that indicates whether to enable printing option.
             * @Default {false}
             */
            allowPrinting?: boolean;

            /** Gets or sets an object that indicates whether to customize the context menu behavior of the Kanban.
             * @Default {Object}
             */
            contextMenuSettings?: ContextMenuSettings;

            /** Gets or sets an object that indicates to render the Kanban with specified columns.
             * @Default {Array}
             */
            columns?: Column[];

            /** Gets or sets an object that indicates whether to Customize the card settings.
             * @Default {Object}
             */
            cardSettings?: CardSettings;

            /** Gets or sets a value that indicates whether to add customToolbarItems within the toolbar to perform any action in the Kanban.
             * @Default {[]}
             */
            customToolbarItems?: CustomToolbarItem[];

            /** Gets or sets a value that indicates to render the Kanban with custom theme.
             */
            cssClass?: string;

            /** Gets or sets the data to render the Kanban with cards.
             * @Default {null}
             */
            dataSource?: any;

            /** To perform kanban functionalities with touch interaction.
             * @Default {true}
             */
            enableTouch?: boolean;

            /** Align content in the Kanban control align from right to left by setting the property as true.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** To show total count of cards in each column.
             * @Default {false}
             */
            enableTotalCount?: boolean;

            /** Get or sets an object that indicates whether to customize the editing behavior of the Kanban.
             * @Default {Object}
             */
            editSettings?: EditSettings;

            /** To customize field mappings for card , editing title and control key parameters
             * @Default {Object}
             */
            fields?: Fields;

            /** To map datasource field for column values mapping
             * @Default {null}
             */
            keyField?: string;

            /** When set to true, adapts the Kanban layout to fit the screen size of devices on which it renders.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Gets or sets a value that indicates whether to set the minimum width of the responsive Kanban while isResponsive property is true.
             * @Default {0}
             */
            minWidth?: number;

            /** To customize the filtering behavior based on queries given.
             * @Default {Array}
             */
            filterSettings?: FilterSetting[];

            /** ej Query to query database of Kanban.
             * @Default {null}
             */
            query?: any;

            /** To change the key in keyboard interaction to Kanban control.
             * @Default {null}
             */
            keySettings?: any;

            /** Gets or sets an object that indicates whether to customize the scrolling behavior of the Kanban.
             * @Default {Object}
             */
            scrollSettings?: ScrollSettings;

            /** To customize the searching behavior of the Kanban.
             * @Default {Object}
             */
            searchSettings?: SearchSettings;

            /** To allow customize selection type. Accepting types are &quot;single&quot; and &quot;multiple&quot;.
             * @Default {ej.Kanban.SelectionType.Single}
             */
            selectionType?: ej.Kanban.SelectionType|string;

            /** Gets or sets an object that indicates to managing the collection of stacked header rows for the Kanban.
             * @Default {Array}
             */
            stackedHeaderRows?: StackedHeaderRow[];

            /** The tooltip allows to display card details in a tooltip while hovering on it.
             */
            tooltipSettings?: TooltipSettings;

            /** Gets or sets an object that indicates to render the Kanban with specified workflows.
             * @Default {Array}
             */
            workflows?: Workflow[];

            /** Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to
             * a particular country or region.
             * @Default {en-US}
             */
            locale?: string;

            /** Gets or sets a value that indicates whether to render kanban columns using without data source.
             * @Default {false}
             */
            showColumnWhenEmpty?: boolean;

            /** Triggered for every Kanban action before its starts.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggered for every Kanban action success event.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggered for every Kanban action server failure event.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Triggered before the task is going to be edited.
             */
            beginEdit?(e: BeginEditEventArgs): void;

            /** Triggered before the card is selected.
             */
            beforeCardSelect?(e: BeforeCardSelectEventArgs): void;

            /** Trigger after the card is clicked.
             */
            cardClick?(e: CardClickEventArgs): void;

            /** Triggered when the card is being dragged.
             */
            cardDrag?(e: CardDragEventArgs): void;

            /** Triggered when card dragging start.
             */
            cardDragStart?(e: CardDragStartEventArgs): void;

            /** Triggered when card dragging stops.
             */
            cardDragStop?(e: CardDragStopEventArgs): void;

            /** Triggered when the card is Dropped.
             */
            cardDrop?(e: CardDropEventArgs): void;

            /** Triggered after the card is selected.
             */
            cardSelect?(e: CardSelectEventArgs): void;

            /** Triggered when card is double clicked.
             */
            cardDoubleClick?(e: CardDoubleClickEventArgs): void;

            /** Triggered before the card is selected.
             */
            cardSelecting?(e: CardSelectingEventArgs): void;

            /** Triggered when the Kanban is rendered completely
             */
            create?(e: CreateEventArgs): void;

            /** Triggers after the cell is clicked.
             */
            cellClick?(e: CellClickEventArgs): void;

            /** Triggered before the context menu is opened.
             */
            contextOpen?(e: ContextOpenEventArgs): void;

            /** Triggered when context menu item is clicked in Kanban
             */
            contextClick?(e: ContextClickEventArgs): void;

            /** Triggered the Kanban is bound with data during initial rendering.
             */
            dataBound?(e: DataBoundEventArgs): void;

            /** Triggered when Kanban going to destroy.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered after the card is deleted.
             */
            endDelete?(e: EndDeleteEventArgs): void;

            /** Triggered after the card is edited.
             */
            endEdit?(e: EndEditEventArgs): void;

            /** Triggers after the header is clicked.
             */
            headerClick?(e: HeaderClickEventArgs): void;

            /** Triggered initial load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers before swim lane expand or collapse icon is clicked.
             */
            swimlaneClick?(e: SwimlaneClickEventArgs): void;

            /** Triggered every time a single card rendered request is made to access particular card information.
             */
            queryCellInfo?(e: QueryCellInfoEventArgs): void;

            /** Triggered when toolbar item is clicked in Kanban.
             */
            toolbarClick?(e: ToolbarClickEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current action event type.
             */
            originalEventType?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the edited row index.
             */
            rowIndex?: number;

            /** Returns the card object (JSON).
             */
            data?: any;

            /** Returns current filtering object field name.
             */
            currentFilteringobject?: any;

            /** Returns filter details.
             */
            filterCollection?: any;
        }

        export interface ActionCompleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns current action event type.
             */
            originalEventType?: string;

            /** Returns primary key.
             */
            primaryKey?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns Kanban element.
             */
            target?: any;

            /** Returns the card object (JSON).
             */
            data?: any;

            /** Returns the selectedRow index.
             */
            selectedRow?: number;

            /** Returns current filtering column field name.
             */
            currentFilteringColumn?: string;

            /** Returns filter details.
             */
            filterCollection?: any;
        }

        export interface ActionFailureEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the error return by server.
             */
            error?: any;

            /** Returns current action event type.
             */
            originalEventType?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns Kanban element.
             */
            target?: any;

            /** Returns the card object (JSON).
             */
            data?: any;

            /** Returns current filtering column field name.
             */
            currentFilteringColumn?: string;

            /** Returns filter details.
             */
            filterCollection?: any;
        }

        export interface BeginEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns begin edit data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeCardSelectEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the select cell index value.
             */
            cellIndex?: number;

            /** Returns the select card index value.
             */
            cardIndex?: number;

            /** Returns the select cell element
             */
            currentCell?: any;

            /** Returns the previously select the card element
             */
            previousCard?: any;

            /** Returns the previously select card indexes
             */
            previousRowcellindex?: any[];

            /** Returns the Target item.
             */
            Target?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns select card data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns the current card to the Kanban.
             */
            currentCard?: string;

            /** Returns Kanban element.
             */
            target?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the Header text of the column corresponding to the selected card.
             */
            columnName?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns drag data.
             */
            data?: any;

            /** Returns drag start element.
             */
            dragtarget?: any;

            /** Returns dragged element.
             */
            draggedElement?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns card drag start data.
             */
            data?: any;

            /** Returns dragged element.
             */
            draggedElement?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns drag start element.
             */
            dragtarget?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardDragStopEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns dragged element.
             */
            draggedElement?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns drag stop element.
             */
            droptarget?: any;

            /** Returns drag stop data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardDropEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns dragged element.
             */
            draggedElement?: any;

            /** Returns previous parent of dragged element
             */
            draggedParent?: any;

            /** Returns dragged data.
             */
            data?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns drop element.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardSelectEventArgs {

            /** Returns the select cell index value.
             */
            cellIndex?: number;

            /** Returns the select card index value.
             */
            cardIndex?: number;

            /** Returns the select cell element
             */
            currentCell?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the previously select the card element
             */
            previousCard?: any;

            /** Returns the previously select card indexes
             */
            previousRowcellindex?: any[];

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns select card data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardDoubleClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current card object (JSON).
             */
            data?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CardSelectingEventArgs {

            /** Returns the selecting cell index value.
             */
            cellIndex?: number;

            /** Returns the selecting card index value.
             */
            cardIndex?: number;

            /** Returns the selecting cell element
             */
            currentCell?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the previously selecting the card element
             */
            previousCard?: any;

            /** Returns the previously rowcell is selecting card indexes
             */
            previousRowcellindex?: any[];

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns added data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the select cell index value.
             */
            cellIndex?: number;

            /** Returns the edited row index.
             */
            rowIndex?: number;
        }

        export interface ContextOpenEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the status of contextmenu item which denotes its enabled state.
             */
            status?: boolean;

            /** Returns the target item.
             */
            target?: any;
        }

        export interface ContextClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the status of contextmenu item which denotes its enabled state.
             */
            status?: boolean;

            /** Returns the target item.
             */
            target?: any;
        }

        export interface DataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns deleted data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndDeleteEventArgs {

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns deleted  data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Current action name
             */
            action?: string;
        }

        export interface EndEditEventArgs {

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns modified data.
             */
            data?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Current Action name
             */
            action?: string;
        }

        export interface HeaderClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the select cell index value.
             */
            cellIndex?: number;

            /** Returns the column object.
             */
            columnData?: any;
        }

        export interface LoadEventArgs {

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface SwimlaneClickEventArgs {

            /** Current Action name while swim lane clicked. Actions are "expand" or "collapse"
             */
            action?: string;

            /** Returns the kanban model.
             */
            model?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the swim lane group data's.
             */
            data?: any;

            /** Returns current swim lane row index.
             */
            rowIndex?: number;

            /** Returns current target element.
             */
            target?: any;
        }

        export interface QueryCellInfoEventArgs {

            /** Returns Kanban card.
             */
            card?: any;

            /** Returns Kanban card.
             */
            cell?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current row record object (JSON).
             */
            data?: any;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ToolbarClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the item id of that current element.
             */
            itemId?: string;

            /** Returns the item index of that current element.
             */
            itemIndex?: number;

            /** Returns the item name of that current element.
             */
            itemName?: string;

            /** Returns the item text of that current element.
             */
            itemText?: string;

            /** Returns the Kanban model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the toolbar object of the Kanban.
             */
            toolbarData?: any;
        }

        export interface SwimlaneSettingsHeader {

            /** Gets or sets a value that indicates to render the Kanban with specified swimlane header text.
             * @Default {null}
             */
            text?: string;

            /** Gets or sets a value that indicates to render the Kanban with specified swimlane header key.
             * @Default {null}
             */
            key?: string;
        }

        export interface SwimlaneSettingsUnassignedGroup {

            /** To enable or disable unassigned category change with swim lane key values.
             * @Default {true}
             */
            enable?: boolean;

            /** To set the user defined values which are need to categorized as unassigned category swim lane groups.
             * @Default {[null,undefined,]}
             */
            keys?: any[];
        }

        export interface SwimlaneSettings {

            /** To enable or disable items count in swim lane.
             * @Default {true}
             */
            showCount?: boolean;

            /** To enable or disable DragAndDrop across swim lane.
             * @Default {false}
             */
            allowDragAndDrop?: boolean;

            /** To enable or disable empty swimlane on Kanban board.  It is used to shown empty swimlane when no data's present on headers key mapping value.
             * @Default {false}
             */
            showEmptySwimlane?: boolean;

            /** Gets or sets an object that indicates to render the swimlane rows with specified swimlane headers.
             * @Default {[]}
             */
            headers?: SwimlaneSettingsHeader[];

            /** Customize the settings for unassigned category of swim lane.
             * @Default {Object}
             */
            unassignedGroup?: SwimlaneSettingsUnassignedGroup;
        }

        export interface ContextMenuSettingsCustomMenuItem {

            /** Its sets target element to custom context menu item.
             * @Default {ej.Kanban.Target.All}
             */
            target?: ej.Kanban.Target|string;

            /** Gets the display name to custom menu item.
             * @Default {null}
             */
            text?: string;

            /** Gets the template to render custom context menu item.
             * @Default {null}
             */
            template?: string;
        }

        export interface ContextMenuSettings {

            /** To enable context menu.All default context menu will show.
             * @Default {false}
             */
            enable?: boolean;

            /** Gets or sets a value that indicates the list of items needs to be disable from default context menu items.
             * @Default {Array}
             */
            disableDefaultItems?: any[];

            /** Its used to add specific default context menu items.
             * @Default {Array}
             */
            menuItems?: any[];

            /** Gets or sets a value that indicates whether to add custom contextMenu items.
             * @Default {Array}
             */
            customMenuItems?: ContextMenuSettingsCustomMenuItem[];
        }

        export interface ColumnsTotalCount {

            /** To customize the totalCount text properties.
             * @Default {null}
             */
            text?: string;
        }

        export interface ColumnsConstraints {

            /** It is used to specify the type of constraints as column or swimlane.
             * @Default {null}
             */
            type?: string;

            /** It is used to specify the minimum amount of card in particular column cell or swimlane cell can hold.
             * @Default {null}
             */
            min?: number;

            /** It is used to specify the maximum amount of card in particular column cell or swimlane cell can hold.
             * @Default {null}
             */
            max?: number;
        }

        export interface Column {

            /** Gets or sets an object that indicates to render the Kanban with specified columns header text.
             * @Default {null}
             */
            headerText?: string;

            /** To customize the totalCount properties.
             * @Default {Object}
             */
            totalCount?: ColumnsTotalCount;

            /** Gets or sets an object that indicates to render the Kanban with specified columns key.
             * @Default {null}
             */
            key?: string|number;

            /** To enable/disable allowDrop for specific column wise.
             * @Default {true}
             */
            allowDrop?: boolean;

            /** To enable/disable allowDrag for specific column wise.
             * @Default {true}
             */
            allowDrag?: boolean;

            /** To set column collapse or expand state
             * @Default {false}
             */
            isCollapsed?: boolean;

            /** To customize the column level constraints with minimum ,maximum limit validation.
             * @Default {Object}
             */
            constraints?: ColumnsConstraints;

            /** Gets or sets a value that indicates to add the template within the header element.
             * @Default {null}
             */
            headerTemplate?: string;

            /** Gets or sets an object that indicates to render the Kanban with specified columns width.
             * @Default {null}
             */
            width?: string|number;

            /** Gets or sets an object that indicates to set specific column visibility.
             * @Default {true}
             */
            visible?: boolean;

            /** Gets or sets an object that indicates whether to show add new button.
             * @Default {false}
             */
            showAddButton?: boolean;
        }

        export interface CardSettings {

            /** Gets or sets a value that indicates to add the template for card .
             * @Default {null}
             */
            template?: string;

            /** To customize the card border color based on assigned task. Colors and corresponding values defined here will be mapped with colorField mapped data source column.
             * @Default {Object}
             */
            colorMapping?: any;

            /** This specifies the Kanban card to drop into particular target element.
             */
            externalDropTarget?: string;
        }

        export interface CustomToolbarItem {

            /** Gets the template to render customToolbarItems.
             * @Default {null}
             */
            template?: string;
        }

        export interface EditSettingsEditItem {

            /** It is used to map editing field from the data source.
             * @Default {null}
             */
            field?: string;

            /** It is used to set the particular editType in the card for editing.
             * @Default {ej.Kanban.EditingType.String}
             */
            editType?: ej.Kanban.EditingType|string;

            /** Gets or sets a value that indicates to define constraints for saving data to the database.
             * @Default {Object}
             */
            validationRules?: any;

            /** It is used to set the particular editparams in the card for editing.
             * @Default {Object}
             */
            editParams?: any;

            /** It is used to specify defaultValue for the fields while adding new card.
             * @Default {null}
             */
            defaultValue?: string|number;
        }

        export interface EditSettings {

            /** Gets or sets a value that indicates whether to enable the editing action in cards of Kanban.
             * @Default {false}
             */
            allowEditing?: boolean;

            /** Gets or sets a value that indicates whether to enable the adding action in cards behavior on Kanban.
             * @Default {false}
             */
            allowAdding?: boolean;

            /** This specifies the id of the template which is require to be edited using the Dialog Box.
             * @Default {null}
             */
            dialogTemplate?: string;

            /** Get or sets an object that indicates whether to customize the editMode of the Kanban.
             * @Default {ej.Kanban.EditMode.Dialog}
             */
            editMode?: ej.Kanban.EditMode|string;

            /** Get or sets an object that indicates whether to customize the editing fields of Kanban card.
             * @Default {Array}
             */
            editItems?: EditSettingsEditItem[];

            /** This specifies the id of the template which is require to be edited using the External edit form.
             * @Default {null}
             */
            externalFormTemplate?: string;

            /** This specifies to set the position of an External edit form either in the right or bottom of the Kanban.
             * @Default {ej.Kanban.FormPosition.Bottom}
             */
            formPosition?: ej.Kanban.FormPosition|string;
        }

        export interface FieldsCollapsibleCards {

            /** It is used to specify the collapsible card's field mapping.
             * @Default {null}
             */
            field?: string;

            /** It is used to specify the collapsible card's key mapping which is available in datasource value of field mapped in collapsibleCards.field.
             * @Default {null}
             */
            key?: string;
        }

        export interface Fields {

            /** The primarykey field is mapped to data source field. And this will used for Drag and drop and editing mainly.
             * @Default {null}
             */
            primaryKey?: string;

            /** To enable swimlane grouping based on the given key field from datasource mapping.
             * @Default {null}
             */
            swimlaneKey?: string;

            /** Priority field has been mapped data source field to maintain cards priority.
             * @Default {null}
             */
            priority?: string;

            /** Content field has been Mapped into card text.
             * @Default {null}
             */
            content?: string;

            /** Tag field has been Mapped into card tag.
             * @Default {null}
             */
            tag?: string;

            /** Title field has been Mapped to field in datasource for title content. If title field specified , card expand/collapse will be enabled with header and content section.
             * @Default {null}
             */
            title?: string;

            /** To customize the card has been Mapped into card color field.
             * @Default {null}
             */
            color?: string;

            /** ImageUrl field has been Mapped into card image.
             * @Default {null}
             */
            imageUrl?: string;

            /** Get or sets an object that indicates the options to map the cards to the collapsible area.
             * @Default {Object}
             */
            collapsibleCards?: FieldsCollapsibleCards;
        }

        export interface FilterSetting {

            /** Gets or sets an object of display name to filter queries.
             * @Default {null}
             */
            text?: string;

            /** Gets or sets an object that Queries to perform filtering
             * @Default {Object}
             */
            query?: any;

            /** Gets or sets an object of tooltip to filter buttons.
             * @Default {null}
             */
            description?: string;
        }

        export interface ScrollSettings {

            /** Gets or sets an object that indicates to render the Kanban with specified scroll height.
             * @Default {0}
             */
            height?: string|number;

            /** Gets or sets an object that indicates to render the Kanban with specified scroll width.
             * @Default {auto}
             */
            width?: string|number;

            /** To allow the Kanban to freeze particular swimlane at the time of scrolling , until scroll reaches next swimlane and it continues.
             * @Default {false}
             */
            allowFreezeSwimlane?: boolean;
        }

        export interface SearchSettings {

            /** To customize the fields the searching operation can be perform.
             * @Default {Array}
             */
            fields?: any[];

            /** To customize the searching string.
             */
            key?: string;

            /** To customize the operator based on searching.
             * @Default {contains}
             */
            operator?: string;

            /** To customize the ignore case based on searching.
             * @Default {true}
             */
            ignoreCase?: boolean;
        }

        export interface StackedHeaderRowsStackedHeaderColumn {

            /** Gets or sets a value that indicates the headerText for the particular stacked header column.
             * @Default {null}
             */
            headerText?: string;

            /** Gets or sets a value that indicates the column for the particular stacked header column.
             * @Default {null}
             */
            column?: string;
        }

        export interface StackedHeaderRow {

            /** Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows.
             * @Default {Array}
             */
            stackedHeaderColumns?: StackedHeaderRowsStackedHeaderColumn[];
        }

        export interface TooltipSettings {

            /** To enable or disable the tooltip display.
             * @Default {false}
             */
            enable?: boolean;

            /** To customize the tooltip display based on your requirements.
             * @Default {null}
             */
            template?: string;
        }

        export interface Workflow {

            /** Gets or sets an object that indicates to render the Kanban with specified workflows key.
             * @Default {null}
             */
            key?: string|number;

            /** Gets or sets an object that indicates to render the Kanban with specified workflows allowed Transitions.
             * @Default {null}
             */
            allowedTransitions?: string;
        }

        enum Target {

            ///Sets context menu to Kanban header
            Header,

            ///Sets context menu to Kanban content
            Content,

            ///Sets context menu to Kanban card
            Card,

            ///Sets context menu to Kanban
            All
        }


        enum EditMode {

            ///Creates Kanban with editMode as Dialog
            Dialog,

            ///Creates Kanban with editMode as DialogTemplate
            DialogTemplate,

            ///Creates Kanban with editMode as ExternalForm
            ExternalForm,

            ///Creates Kanban with editMode as ExternalFormTemplate
            ExternalFormTemplate
        }


        enum EditingType {

            ///Allows to set edit type as string edit type
            String,

            ///Allows to set edit type as numeric edit type
            Numeric,

            ///Allows to set edit type as drop down edit type
            Dropdown,

            ///Allows to set edit type as date picker edit type
            DatePicker,

            ///Allows to set edit type as date time picker edit type
            DateTimePicker,

            ///Allows to set edit type as text area edit type
            TextArea,

            ///Allows to set edit type as RTE edit type
            RTE
        }


        enum FormPosition {

            ///Form position is bottom.
            Bottom,

            ///Form position is right.
            Right
        }


        enum SelectionType {

            ///Support for Single selection in Kanban
            Single,

            ///Support for multiple selections in Kanban
            Multiple
        }

    }

    class Rotator extends ej.Widget {
        static fn: Rotator;
        constructor(element: JQuery | Element, options?: Rotator.Model);
        static Locale: any;
        model: Rotator.Model;
        defaults: Rotator.Model;

        /** Disables the Rotator control.
         * @returns {void}
         */
        disable(): void;

        /** Enables the Rotator control.
         * @returns {void}
         */
        enable(): void;

        /** This method is used to get the current slide index.
         * @returns {number}
         */
        getIndex(): number;

        /** This method is used to move a slide to the specified index.
         * @param {number} index of an slide
         * @returns {void}
         */
        gotoIndex(index: number): void;

        /** This method is used to pause autoplay.
         * @returns {void}
         */
        pause(): void;

        /** This method is used to move slides continuously (or start autoplay) in the specified autoplay direction.
         * @returns {void}
         */
        play(): void;

        /** This method is used to move to the next slide from the current slide. If the current slide is the last slide, then the first slide will be treated as the next slide.
         * @returns {void}
         */
        slideNext(): void;

        /** This method is used to move to the previous slide from the current slide. If the current slide is the first slide, then the last slide will be treated as the previous slide.
         * @returns {void}
         */
        slidePrevious(): void;

        /** This method is used to update/modify the slide content of template rotator by using id based on index value.
         * @param {number} index of an slide
         * @param {string} id of a new updated slide
         * @returns {void}
         */
        updateTemplateById(index: number, id: string): void;
    }
    export namespace Rotator {

        export interface Model {

            /** Turns on keyboard interaction with the Rotator items. You must set this property to true to access the following keyboard shortcuts:
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Sets the animationSpeed of slide transition.
             * @Default {600}
             */
            animationSpeed?: string|number;

            /** Specifies the animationType type for the Rotator Item. animationType options include slide, fastSlide, slowSlide, and other custom easing animationTypes.
             * @Default {slide}
             */
            animationType?: string;

            /** Enables the circular mode item rotation.
             * @Default {true}
             */
            circularMode?: boolean;

            /** Specify the CSS class to Rotator to achieve custom theme.
             */
            cssClass?: string;

            /** Specify the list of data which contains a set of data fields. Each data value is used to render an item for the Rotator.
             * @Default {null}
             */
            dataSource?: any;

            /** Sets the delay between the Rotator Items move after the slide transition.
             * @Default {500}
             */
            delay?: number;

            /** Specifies the number of Rotator Items to be displayed.
             * @Default {1}
             */
            displayItemsCount?: string|number;

            /** Rotates the Rotator Items continuously without user interference.
             * @Default {false}
             */
            enableAutoPlay?: boolean;

            /** Enables or disables the Rotator control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies right to left transition of slides.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Defines mapping fields for the data items of the Rotator.
             * @Default {null}
             */
            fields?: Fields;

            /** Sets the space between the Rotator Items.
             */
            frameSpace?: string|number;

            /** Resizes the Rotator when the browser is resized.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the number of Rotator Items to navigate on a single click (next/previous/play buttons). The navigateSteps property value must be less than or equal to the
             * displayItemsCount property value.
             * @Default {1}
             */
            navigateSteps?: string|number;

            /** Specifies the orientation for the Rotator control, that is, whether it must be rendered horizontally or vertically. See Orientation
             * @Default {ej.Orientation.Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Specifies the position of the showPager in the Rotator Item. See PagerPosition
             * @Default {outside}
             */
            pagerPosition?: string|ej.Rotator.PagerPosition;

            /** Retrieves data from remote data. This property is applicable only when a remote data source is used.
             * @Default {null}
             */
            query?: string;

            /** If the Rotator Item is an image, you can specify a caption for the Rotator Item. The caption text for each Rotator Item must be set by using the title attribute of the respective
             * tag. The caption cannot be displayed if multiple Rotator Items are present.
             * @Default {false}
             */
            showCaption?: boolean;

            /** Turns on or off the slide buttons (next and previous) in the Rotator Items. Slide buttons are used to navigate the Rotator Items.
             * @Default {true}
             */
            showNavigateButton?: boolean;

            /** Turns on or off the pager support in the Rotator control. The Pager is used to navigate the Rotator Items.
             * @Default {true}
             */
            showPager?: boolean;

            /** Enable play / pause button on rotator.
             * @Default {false}
             */
            showPlayButton?: boolean;

            /** Turns on or off thumbnail support in the Rotator control. Thumbnail is used to navigate between slides. Thumbnail supports only single slide transition You must specify the source
             * for thumbnail elements through the thumbnailSourceID property.
             * @Default {false}
             */
            showThumbnail?: boolean;

            /** Sets the height of a Rotator Item.
             */
            slideHeight?: string|number;

            /** Sets the width of a Rotator Item.
             */
            slideWidth?: string|number;

            /** Sets the index of the slide that must be displayed first.
             * @Default {0}
             */
            startIndex?: string|number;

            /** Pause the auto play while hover on the rotator content.
             * @Default {false}
             */
            stopOnHover?: boolean;

            /** The template to display the Rotator widget with customized appearance.
             * @Default {null}
             */
            template?: string;

            /** The templateId enables to bind multiple customized template items in Rotator.
             * @Default {null}
             */
            templateId?: any[];

            /** Specifies the source for thumbnail elements.
             * @Default {null}
             */
            thumbnailSourceID?: any;

            /** This event is fired when the Rotator slides are changed.
             */
            change?(e: ChangeEventArgs): void;

            /** This event is fired when the Rotator control is initialized.
             */
            create?(e: CreateEventArgs): void;

            /** This event is fired when the Rotator control is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** This event is fired when a pager is clicked.
             */
            pagerClick?(e: PagerClickEventArgs): void;

            /** This event is fired when enableAutoPlay is started.
             */
            start?(e: StartEventArgs): void;

            /** This event is fired when autoplay is stopped or paused.
             */
            stop?(e: StopEventArgs): void;

            /** This event is fired when a thumbnail pager is clicked.
             */
            thumbItemClick?(e: ThumbItemClickEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;

            /** the current rotator id.
             */
            itemId?: string;

            /** returns the current slide index.
             */
            activeItemIndex?: number;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface PagerClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;

            /** the current rotator id.
             */
            itemId?: string;

            /** returns the current slide index.
             */
            activeItemIndex?: number;
        }

        export interface StartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;

            /** the current rotator id.
             */
            itemId?: string;

            /** returns the current slide index.
             */
            activeItemIndex?: number;
        }

        export interface StopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;

            /** the current rotator id.
             */
            itemId?: string;

            /** returns the current slide index.
             */
            activeItemIndex?: number;
        }

        export interface ThumbItemClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the rotator model
             */
            model?: ej.Rotator.Model;

            /** returns the name of the event
             */
            type?: string;

            /** the current rotator id.
             */
            itemId?: string;

            /** returns the current slide index.
             */
            activeItemIndex?: number;
        }

        export interface Fields {

            /** Specifies a link for the image.
             */
            linkAttribute?: string;

            /** Specifies where to open a given link.
             */
            targetAttribute?: string;

            /** Specifies a caption for the image.
             */
            text?: string;

            /** Specifies a caption for the thumbnail image.
             */
            thumbnailText?: string;

            /** Specifies the URL for an thumbnail image.
             */
            thumbnailUrl?: string;

            /** Specifies the URL for an image.
             */
            url?: string;
        }

        enum PagerPosition {

            ///string
            BottomLeft,

            ///string
            BottomRight,

            ///string
            Outside,

            ///string
            TopCenter,

            ///string
            TopLeft,

            ///string
            TopRight
        }

    }

    class RTE extends ej.Widget {
        static fn: RTE;
        constructor(element: JQuery | Element, options?: RTE.Model);
        static Locale: any;
        model: RTE.Model;
        defaults: RTE.Model;

        /** Returns the range object.
         * @returns {any}
         */
        createRange(): any;

        /** Disables the RTE control.
         * @returns {void}
         */
        disable(): void;

        /** Disables the corresponding tool in the RTE ToolBar.
         * @returns {void}
         */
        disableToolbarItem(): void;

        /** Enables the RTE control.
         * @returns {void}
         */
        enable(): void;

        /** Enables the corresponding tool in the toolbar when the tool is disabled.
         * @returns {void}
         */
        enableToolbarItem(): void;

        /** Performs the action value based on the given command.
         * @param {string} Command Name.
         * @param {any} Content to be inserted as argument.
         * @param {boolean} Boolean value to specify whether the argument is textNode or not, this is optional.
         * @returns {void}
         */
        executeCommand(cmdName: string, args: any, textnodeType?: boolean): void;

        /** Focuses the RTE control.
         * @returns {void}
         */
        focus(): void;

        /** Gets the command status of the selected text based on the given comment in the RTE control.
         * @returns {boolean}
         */
        getCommandStatus(): boolean;

        /** Gets the Document from the RTE control.
         * @returns {Document}
         */
        getDocument(): Document;

        /** Gets the HTML string from the RTE control.
         * @returns {HTMLElement}
         */
        getHtml(): HTMLElement;

        /** Gets the selected HTML string from the RTE control.
         * @returns {HTMLElement}
         */
        getSelectedHtml(): HTMLElement;

        /** Gets the content as string from the RTE control.
         * @returns {string}
         */
        getText(): string;

        /** Hides the RTE control.
         * @returns {void}
         */
        hide(): void;

        /** Inserts new item to the target contextmenu node.
         * @returns {void}
         */
        insertMenuOption(): void;

        /** Add a table column at the right or left of the specified cell
         * @param {boolean} If itâ€™s true, add a column at the left of the cell, otherwise add a column at the right of the cell
         * @param {JQuery} Column will be added based on the given cell element
         * @returns {HTMLElement}
         */
        insertColumn(before?: boolean, cell?: JQuery): HTMLElement;

        /** To add a table row below or above the specified cell.
         * @param {boolean} If itâ€™s true, add a row before the cell, otherwise add a row after the cell
         * @param {JQuery} Row will be added based on the given cell element
         * @returns {HTMLElement}
         */
        insertRow(before?: boolean, cell?: JQuery): HTMLElement;

        /** This method helps to insert/paste the content at the current cursor (caret) position or the selected content to be replaced with our text by passing the value as parameter to the
         * pasteContent method in the Editor.
         * @param {string} paste content
         * @returns {void}
         */
        pasteContent(html: string): void;

        /** Refreshes the RTE control.
         * @returns {void}
         */
        refresh(): void;

        /** Removes the specified table column.
         * @param {JQuery} Remove the given column element
         * @returns {void}
         */
        removeColumn(cell?: JQuery): void;

        /** Removes the specified table row.
         * @param {JQuery} Remove the given row element
         * @returns {void}
         */
        removeRow(cell?: JQuery): void;

        /** Deletes the specified table.
         * @param {JQuery} Remove the given table
         * @returns {void}
         */
        removeTable(table?: JQuery): void;

        /** Removes the target menu item from the RTE contextmenu.
         * @returns {void}
         */
        removeMenuOption(): void;

        /** Removes the given tool from the RTE Toolbar.
         * @returns {void}
         */
        removeToolbarItem(): void;

        /** Selects all the contents within the RTE.
         * @returns {void}
         */
        selectAll(): void;

        /** Selects the contents in the given range.
         * @returns {void}
         */
        selectRange(): void;

        /** Sets the color picker model type rendered initially in the RTE control.
         * @returns {void}
         */
        setColorPickerType(): void;

        /** Sets the HTML string from the RTE control.
         * @returns {void}
         */
        setHtml(): void;

        /** Displays the RTE control.
         * @returns {void}
         */
        show(): void;
    }
    export namespace RTE {

        export interface Model {

            /** Enables/disables the editing of the content.
             * @Default {True}
             */
            allowEditing?: boolean;

            /** RTE control can be accessed through the keyboard shortcut keys.
             * @Default {True}
             */
            allowKeyboardNavigation?: boolean;

            /** When the property is set to true, it focuses the RTE at the time of rendering.
             * @Default {false}
             */
            autoFocus?: boolean;

            /** Based on the content size, its height is adjusted instead of adding the scrollbar.
             * @Default {false}
             */
            autoHeight?: boolean;

            /** This API holds configuration setting for paste cleanup behavior.
             * @Default {{ listConversion: false, cleanCSS: false,	removeStyles: false, cleanElements: false }}
             */
            pasteCleanupSettings?: PasteCleanupSettings;

            /** Sets the colorCode to display the color of the fontColor and backgroundColor in the font tools of the RTE.
             * @Default {[000000, FFFFFF, C4C4C4, ADADAD, 595959, 262626, 4f81bd, dbe5f1, b8cce4, 95b3d7, 366092, 244061, c0504d, f2dcdb, e5b9b7, d99694, 953734,632423, 9bbb59, ebf1dd, d7e3bc,
             * c3d69b, 76923c, 4f6128, 8064a2, e5e0ec, ccc1d9, b2a2c7, 5f497a, 3f3151, f79646, fdeada, fbd5b5, fac08f,e36c09, 974806]}
             */
            colorCode?: any;

            /** The number of columns given are rendered in the color palate popup.
             * @Default {6}
             */
            colorPaletteColumns?: number;

            /** The number of rows given are rendered in the color palate popup.
             * @Default {6}
             */
            colorPaletteRows?: number;

            /** Sets the root class for the RTE theme. This cssClass API helps the usage of custom skinning option for the RTE control by including this root class in CSS.
             */
            cssClass?: string;

            /** Enables/disables the RTE controlâ€™s accessibility or interaction.
             * @Default {True}
             */
            enabled?: boolean;

            /** When the property is set to true, it returns the encrypted text.
             * @Default {false}
             */
            enableHtmlEncode?: boolean;

            /** Maintain the values of the RTE after page reload.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Shows the resize icon and enables the resize option in the RTE.
             * @Default {True}
             */
            enableResize?: boolean;

            /** Shows the RTE in the RTL direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Formats the contents based on the XHTML rules.
             * @Default {false}
             */
            enableXHTML?: boolean;

            /** Enables the tab key action with the RichTextEditor content.
             * @Default {True}
             */
            enableTabKeyNavigation?: boolean;

            /** This API allows to enable url and fileName for pdf export.
             * @Default {null}
             */
            exportToPdfSettings?: ExportToPdfSettings;

            /** This API allows to enable url and fileName for word export.
             * @Default {null}
             */
            exportToWordSettings?: ExportToWordSettings;

            /** Load the external CSS file inside Iframe.
             * @Default {null}
             */
            externalCSS?: string;

            /** This API allows to enable the file browser support in the RTE control to browse, create, delete and upload the files in the specified current directory.
             * @Default {null}
             */
            fileBrowser?: FileBrowser;

            /** Sets the fontName in the RTE.
             * @Default {{text: Segoe UI, value: Segoe UI },{text: Arial, value: Arial,Helvetica,sans-serif },{text: Courier New, value: Courier New,Courier,Monospace },{text: Georgia, value:
             * Georgia,serif },{text: Impact, value: Impact,Charcoal,sans-serif },{text: Lucida Console, value: Lucida Console,Monaco,Monospace },{text: Tahoma, value: Tahoma,Geneva,sans-serif
             * },{text: Times New Roman, value: Times New Roman },{text: Trebuchet MS, value: Trebuchet MS,Helvetica,sans-serif },{text: Verdana, value: Verdana,Geneva,sans-serif}}
             */
            fontName?: any;

            /** Sets the fontSize in the RTE.
             * @Default {{ text: 1, value: 1 },{ text: 2 (10pt), value: 2 },{ text: 3 (12pt), value: 3 },{ text: 4 (14pt), value: 4 },{ text: 5 (18pt), value: 5 },{ text: 6 (24pt), value: 6 },{
             * text: 7 (36pt), value: 7 }}
             */
            fontSize?: any;

            /** Sets the format in the RTE.
             * @Default {{ text: Paragraph, value: &lt;p&gt;, spriteCssClass: e-paragraph },{ text: Quotation, value: &lt;blockquote&gt;, spriteCssClass: e-quotation },{ text: Heading 1, value:
             * &lt;h1&gt;, spriteCssClass: e-h1 },{ text: Heading 2, value: &lt;h2&gt;, spriteCssClass: e-h2 },{ text: Heading 3, value: &lt;h3&gt;, spriteCssClass: e-h3 },{ text: Heading 4,
             * value: &lt;h4&gt;, spriteCssClass: e-h4 },{ text: Heading 5, value: &lt;h5&gt;, spriteCssClass: e-h5 },{ text: Heading 6, value: &lt;h6&gt;, spriteCssClass: e-h6}}
             */
            format?: string;

            /** Defines the height of the RTE textbox.
             * @Default {370}
             */
            height?: string|number;

            /** Specifies the HTML Attributes of the ejRTE.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Sets the given attributes to the iframe body element.
             * @Default {{}}
             */
            iframeAttributes?: any;

            /** This API allows the image browser to support in the RTE control to browse, create, delete, and upload the image files to the specified current directory.
             * @Default {null}
             */
            imageBrowser?: ImageBrowser;

            /** This API allows to enable the url for connecting to RTE import.
             * @Default {null}
             */
            importSettings?: ImportSettings;

            /** Enables/disables responsive support for the RTE control toolbar items during the window resizing time.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Sets the culture in the RTE when you set the localization values are needs to be assigned to the corresponding text as follows.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the maximum height for the RTE outer wrapper element.
             * @Default {null}
             */
            maxHeight?: string|number;

            /** Sets the maximum length for the RTE outer wrapper element.
             * @Default {7000}
             */
            maxLength?: number;

            /** Sets the maximum width for the RTE outer wrapper element.
             * @Default {null}
             */
            maxWidth?: string|number;

            /** Sets the minimum height for the RTE outer wrapper element.
             * @Default {280}
             */
            minHeight?: string|number;

            /** Sets the minimum width for the RTE outer wrapper element.
             * @Default {400}
             */
            minWidth?: string|number;

            /** Sets the name in the RTE. When the name value is not initialized, the ID value is assigned to the name.
             */
            name?: string;

            /** Shows ClearAll icon in the RTE footer.
             * @Default {false}
             */
            showClearAll?: boolean;

            /** Shows the clear format in the RTE footer.
             * @Default {true}
             */
            showClearFormat?: boolean;

            /** Shows the Custom Table in the RTE.
             * @Default {True}
             */
            showCustomTable?: boolean;

            /** The showContextMenu property helps to enable custom context menu within editor area.
             * @Default {True}
             */
            showContextMenu?: boolean;

            /** This API is used to set the default dimensions for the image and video. When this property is set to true, the image and video dialog displays the dimension option.
             * @Default {false}
             */
            showDimensions?: boolean;

            /** Shows the FontOption in the RTE.
             * @Default {True}
             */
            showFontOption?: boolean;

            /** Shows footer in the RTE. When the footer is enabled, it displays the HTML tag, word Count, character count, clear format, resize icon and clear all the content icons, by default.
             * @Default {false}
             */
            showFooter?: boolean;

            /** Shows the HtmlSource in the RTE footer.
             * @Default {false}
             */
            showHtmlSource?: boolean;

            /** When the cursor is placed or when the text is selected in the RTE, it displays the tag info in the footer.
             * @Default {True}
             */
            showHtmlTagInfo?: boolean;

            /** Shows the toolbar in the RTE.
             * @Default {True}
             */
            showToolbar?: boolean;

            /** Counts the total characters and displays it in the RTE footer.
             * @Default {True}
             */
            showCharCount?: boolean;

            /** Enables or disables rounded corner UI look for RTE.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Counts the total words and displays it in the RTE footer.
             * @Default {True}
             */
            showWordCount?: boolean;

            /** The given number of columns render the insert table pop.
             * @Default {10}
             */
            tableColumns?: number;

            /** The given number of rows render the insert table pop.
             * @Default {8}
             */
            tableRows?: number;

            /** Sets the tools in the RTE and gets the inner display order of the corresponding group element. Tools are dependent on the toolsList property.
             * @Default {formatStyle: [format],style: [bold, italic, underline, strikethrough],alignment: [justifyLeft, justifyCenter, justifyRight, justifyFull],lists: [unorderedList,
             * orderedList],indenting: [outdent, indent],doAction: [undo, redo],links: [createLink,removeLink],images: [image],media: [video],tables: [createTable, addRowAbove, addRowBelow,
             * addColumnLeft, addColumnRight, deleteRow, deleteColumn, deleteTable]],view:[â€œfullScreenâ€,zoomIn,zoomOut],print:[print]}
             */
            tools?: Tools;

            /** Specifies the list of groups and order of those groups displayed in the RTE toolbar.  The toolsList property is used to get the root group order and tools property is used to get
             * the inner order of the corresponding groups displayed. When the value is not specified, it gets its default display order and tools.
             * @Default {[formatStyle, font, style, effects, alignment, lists, indenting, clipboard, doAction, clear, links, images, media, tables, casing,view, customTools,print,edit]}
             */
            toolsList?: any[];

            /** Specifies the overflow mode for RTE responsive toolbar
             * @Default {Popup}
             */
            toolbarOverflowMode?: ej.RTE.ToolbarOverflowMode|string;

            /** Display the hints for the tools in the Toolbar.
             * @Default {{ associate: mouseenter, showShadow: true, position: { stem: { horizontal: left, vertical: top }  }, tip: { size: { width: 5, height: 5 }, isBalloon: false }}
             */
            tooltipSettings?: any;

            /** Gets the undo stack limit.
             * @Default {50}
             */
            undoStackLimit?: number;

            /** The given string value is displayed in the editable area.
             * @Default {null}
             */
            value?: string;

            /** Sets the jQuery validation rules to the Rich Text Editor.
             * @Default {null}
             */
            validationRules?: any;

            /** Sets the jQuery validation error message to the Rich Text Editor.
             * @Default {null}
             */
            validationMessage?: any;

            /** Defines the width of the RTE textbox.
             * @Default {786}
             */
            width?: string|number;

            /** Increases and decreases the contents zoom range in percentage
             * @Default {0.05}
             */
            zoomStep?: string|number;

            /** Fires when changed successfully.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when the RTE is created successfully
             */
            create?(e: CreateEventArgs): void;

            /** Fires when mouse click on menu items.
             */
            contextMenuClick?(e: ContextMenuClickEventArgs): void;

            /** Fires before the RTE is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when the commands are executed successfully.
             */
            execute?(e: ExecuteEventArgs): void;

            /** Fires when the keydown action is successful.
             */
            keydown?(e: KeydownEventArgs): void;

            /** Fires when the keyup action is successful.
             */
            keyup?(e: KeyupEventArgs): void;

            /** Fires before the RTE Edit area is rendered and after the toolbar is rendered.
             */
            preRender?(e: PreRenderEventArgs): void;

            /** Fires when the text is selected in the text area
             */
            select?(e: SelectEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RTE model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface ContextMenuClickEventArgs {

            /** returns clicked menu item text.
             */
            text?: string;

            /** returns clicked menu item element.
             */
            element?: any;

            /** returns the selected item.
             */
            selectedItem?: number;
        }

        export interface DestroyEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface ExecuteEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface KeydownEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface KeyupEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface PreRenderEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface SelectEventArgs {

            /** When the event is canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the RTE model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the event object
             */
            event?: any;
        }

        export interface PasteCleanupSettings {

            /** This API is used to convert the list elements pasted from word document to editor.
             * @Default {false}
             */
            listConversion?: boolean;

            /** This API is used to clean the unwanted css in the elements pasted from word document to editor.
             * @Default {false}
             */
            cleanCSS?: boolean;

            /** This API is used to remove all styles in the elements pasted from word document to editor.
             * @Default {false}
             */
            removeStyles?: boolean;

            /** This API is used to clean the unwanted elements pasted from word document to editor.
             * @Default {false}
             */
            cleanElements?: boolean;
        }

        export interface ExportToPdfSettings {

            /** This API is used to receive the server-side handler for export related operations.
             */
            url?: string;

            /** Specifies the file name for the exported pdf file.
             */
            fileName?: string;
        }

        export interface ExportToWordSettings {

            /** This API is used to receive the server-side handler for export related operations.
             */
            url?: string;

            /** Specifies the file name for the exported word file.
             */
            fileName?: string;
        }

        export interface FileBrowser {

            /** This API is used to receive the server-side handler for file related operations.
             */
            ajaxAction?: string;

            /** Specifies the file type extension shown in the file browser window.
             */
            extensionAllow?: string;

            /** Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected files to the current directory.
             */
            filePath?: string;
        }

        export interface ImageBrowser {

            /** This API is used to receive the server-side handler for the file related operations.
             */
            ajaxAction?: string;

            /** Specifies the file type extension shown in the image browser window.
             */
            extensionAllow?: string;

            /** Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected images to the current directory.
             */
            filePath?: string;
        }

        export interface ImportSettings {

            /** This API is used to receive the server-side handler for import operations.
             */
            url?: string;
        }

        export interface ToolsCustomOrderedList {

            /** Specifies the name for customOrderedList item.
             */
            name?: string;

            /** Specifies the title for customOrderedList item.
             */
            tooltip?: string;

            /** Specifies the styles for customOrderedList item.
             */
            css?: string;

            /** Specifies the text for customOrderedList item.
             */
            text?: string;

            /** Specifies the list style for customOrderedList item.
             */
            listStyle?: string;

            /** Specifies the image for customOrderedList item.
             */
            listImage?: string;
        }

        export interface ToolsCustomUnorderedList {

            /** Specifies the name for customUnorderedList item.
             */
            name?: string;

            /** Specifies the title for customUnorderedList item.
             */
            tooltip?: string;

            /** Specifies the styles for customUnorderedList item.
             */
            css?: string;

            /** Specifies the text for customUnorderedList item.
             */
            text?: string;

            /** Specifies the list style for customUnorderedList item.
             */
            listStyle?: string;

            /** Specifies the image for customUnorderedList item.
             */
            listImage?: string;
        }

        export interface Tools {

            /** Specifies the alignment tools and the display order of this tool in the RTE toolbar.
             */
            alignment?: any;

            /** Specifies the casing tools and the display order of this tool in the RTE toolbar.
             */
            casing?: any[];

            /** Specifies the clear tools and the display order of this tool in the RTE toolbar.
             */
            clear?: any[];

            /** Specifies the clipboard tools and the display order of this tool in the RTE toolbar.
             */
            clipboard?: any[];

            /** Specifies the edit tools and the displays tool in the RTE toolbar.
             */
            edit?: any[];

            /** Specifies the doAction tools and the display order of this tool in the RTE toolbar.
             */
            doAction?: any[];

            /** Specifies the effect of tools and the display order of this tool in RTE toolbar.
             */
            effects?: any[];

            /** Specifies the font tools and the display order of this tool in the RTE toolbar.
             */
            font?: any[];

            /** Specifies the formatStyle tools and the display order of this tool in the RTE toolbar.
             */
            formatStyle?: any[];

            /** Specifies the image tools and the display order of this tool in the RTE toolbar.
             */
            images?: any[];

            /** Specifies the indent tools and the display order of this tool in the RTE toolbar.
             */
            indenting?: any[];

            /** Specifies the link tools and the display order of this tool in the RTE toolbar.
             */
            links?: any[];

            /** Specifies the list tools and the display order of this tool in the RTE toolbar.
             */
            lists?: any[];

            /** Specifies the media tools and the display order of this tool in the RTE toolbar.
             */
            media?: any[];

            /** Specifies the style tools and the display order of this tool in the RTE toolbar.
             */
            style?: any[];

            /** Specifies the table tools and the display order of this tool in the RTE toolbar.
             */
            tables?: any[];

            /** Specifies the view tools and the display order of this tool in the RTE toolbar.
             */
            view?: any[];

            /** Specifies the print tools and the display order of this tool in the RTE toolbar.
             */
            print?: any[];

            /** Specifies the importExport tools and the display order of this tool in the RTE toolbar.
             */
            importExport?: any[];

            /** Specifies the customOrderedList tools and the display order of this tool in the RTE toolbar.
             */
            customOrderedList?: ToolsCustomOrderedList[];

            /** Specifies the customUnOrderedList tools and the display order of this tool in the RTE toolbar.
             */
            customUnorderedList?: ToolsCustomUnorderedList[];
        }

        enum ToolbarOverflowMode {

            ///To display the RTE toolbar overflow items as popup
            Popup,

            ///To display the RTE toolbar overflow items as inline toolbar
            Inline
        }

    }

    class Slider extends ej.Widget {
        static fn: Slider;
        constructor(element: JQuery | Element, options?: Slider.Model);
        static Locale: any;
        model: Slider.Model;
        defaults: Slider.Model;

        /** To disable the slider
         * @returns {void}
         */
        disable(): void;

        /** To enable the slider
         * @returns {void}
         */
        enable(): void;

        /** To get value from slider handle
         * @returns {number}
         */
        getValue(): number;

        /** To set value to slider handle.By default animation is false while set the value. If you want to enable the animation, pass the enableAnimation as true to this method.
         * @returns {void}
         */
        setValue(): void;
    }
    export namespace Slider {

        export interface Model {

            /** Specifies the allowMouseWheel of the slider.
             * @Default {false}
             */
            allowMouseWheel?: boolean;

            /** Specifies the animationSpeed of the slider.
             * @Default {500}
             */
            animationSpeed?: number;

            /** Specify the CSS class to slider to achieve custom theme.
             */
            cssClass?: string;

            /** Specifies the animation behavior of the slider.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Specifies the state of the slider.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specify the enablePersistence to slider to save current model value to browser cookies for state maintains
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specifies the Right to Left Direction of the slider.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the height of the slider.
             * @Default {14}
             */
            height?: string;

            /** Specifies the HTML Attributes of the ejSlider.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the incremental step value of the slider.
             * @Default {1}
             */
            incrementStep?: number;

            /** Specifies the distance between two major (large) ticks from the scale of the slider.
             * @Default {10}
             */
            largeStep?: number;

            /** Specifies the ending value of the slider.
             * @Default {100}
             */
            maxValue?: number;

            /** Specifies the starting value of the slider.
             * @Default {0}
             */
            minValue?: number;

            /** Specifies the orientation of the slider.
             * @Default {ej.orientation.Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Specifies the readOnly of the slider.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Shows/Hides the increment and decrement buttons of the slider.
             * @Default {false}
             */
            showButtons?: boolean;

            /** Specifies the rounded corner behavior for slider.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Shows/Hide the major (large) and minor (small) ticks in the scale of the slider.
             * @Default {false}
             */
            showScale?: boolean;

            /** Specifies the small ticks from the scale of the slider.
             * @Default {true}
             */
            showSmallTicks?: boolean;

            /** Specifies the showTooltip to shows the current Slider value, while moving the Slider handle or clicking on the slider handle of the slider.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Specifies the sliderType of the slider.
             * @Default {ej.SliderType.Default}
             */
            sliderType?: ej.slider.sliderType|string;

            /** Specifies the distance between two minor (small) ticks from the scale of the slider.
             * @Default {1}
             */
            smallStep?: number;

            /** Specifies the value of the slider. But it's not applicable for range slider. To range slider we can use values property.
             * @Default {0}
             */
            value?: number;

            /** Specifies the values of the range slider. But it's not applicable for default and minRange sliders. we can use value property for default and minRange sliders.
             * @Default {[minValue,maxValue]}
             */
            values?: any[];

            /** Specifies the width of the slider.
             * @Default {100%}
             */
            width?: string;

            /** Fires once Slider control value is changed successfully.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires once Slider control has been created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when Slider control has been destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires before creating each slider scale tick. You can use this event to add custom text in tick values.
             */
            renderingTicks?(e: RenderingTicksEventArgs): void;

            /** Fires once Slider control is sliding successfully.
             */
            slide?(e: SlideEventArgs): void;

            /** Fires once Slider control is started successfully.
             */
            start?(e: StartEventArgs): void;

            /** Fires when Slider control is stopped successfully.
             */
            stop?(e: StopEventArgs): void;

            /** Fires when display the custom tooltip.
             */
            tooltipChange?(e: TooltipChangeEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns current handle number or index
             */
            sliderIndex?: number;

            /** returns slider id.
             */
            id?: string;

            /** returns the slider model.
             */
            model?: ej.Slider.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the slider value.
             */
            value?: number;

            /** returns true if event triggered by interaction else returns false.
             */
            isInteraction?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the slider model
             */
            model?: ej.Slider.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the slider model
             */
            model?: ej.Slider.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RenderingTicksEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns slider tick value
             */
            value?: number;

            /** returns the value type either tooltip or label value
             */
            valueType?: string;

            /** returns the current Li element
             */
            tick?: any;
        }

        export interface SlideEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns current handle number or index
             */
            sliderIndex?: number;

            /** returns slider id
             */
            id?: string;

            /** returns the slider model
             */
            model?: ej.Slider.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the slider value
             */
            value?: number;
        }

        export interface StartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns current handle number or index
             */
            sliderIndex?: number;

            /** returns slider id
             */
            id?: string;

            /** returns the slider model
             */
            model?: ej.Slider.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the slider value
             */
            value?: number;
        }

        export interface StopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns current handle number or index
             */
            sliderIndex?: number;

            /** returns slider id
             */
            id?: string;

            /** returns the slider model
             */
            model?: ej.Slider.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the slider value
             */
            value?: number;
        }

        export interface TooltipChangeEventArgs {

            /** returns the cancel option value.
             */
            cancel?: boolean;

            /** returns slider id.
             */
            id?: string;

            /** returns true if event triggered by interaction else returns false.
             */
            isInteraction?: boolean;

            /** returns the slider model.
             */
            model?: ej.Slider.Model;

            /** returns current handle number or index
             */
            sliderIndex?: number;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the slider value.
             */
            value?: number;
        }
    }
    namespace slider {
        enum sliderType {
            //Shows default slider
            Default,
            //Shows minRange slider
            MinRange,
            //Shows Range slider
            Range,
        }
    }

    class SplitButton extends ej.Widget {
        static fn: SplitButton;
        constructor(element: JQuery | Element, options?: SplitButton.Model);
        static Locale: any;
        model: SplitButton.Model;
        defaults: SplitButton.Model;

        /** Destroy the split button widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To disable the split button
         * @returns {void}
         */
        disable(): void;

        /** To Enable the split button
         * @returns {void}
         */
        enable(): void;

        /** To hide the list content of the split button.
         * @returns {void}
         */
        hide(): void;

        /** To show the list content of the split button.
         * @returns {void}
         */
        show(): void;
    }
    export namespace SplitButton {

        export interface Model {

            /** Specifies the arrowPosition of the Split or Dropdown Button.See arrowPosition
             * @Default {ej.ArrowPosition.Right}
             */
            arrowPosition?: string|ej.ArrowPosition;

            /** Specifies the buttonMode like Split or Dropdown Button.See ButtonMode
             * @Default {ej.ButtonMode.Split}
             */
            buttonMode?: string|ej.ButtonMode;

            /** Specifies the contentType of the Split Button.See ContentType
             * @Default {ej.ContentType.TextOnly}
             */
            contentType?: string|ej.ContentType;

            /** Set the root class for Split Button control theme
             */
            cssClass?: string;

            /** Specifies the disabling of Split Button if enabled is set to false.
             * @Default {true}
             */
            enabled?: boolean;

            /** Specifies the enableRTL property for Split Button while initialization.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the height of the Split Button.
             * @Default {â€œâ€}
             */
            height?: string|number;

            /** Specifies the HTML Attributes of the Split Button.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the imagePosition of the Split Button.See imagePositions
             * @Default {ej.ImagePosition.ImageRight}
             */
            imagePosition?: string|ej.ImagePosition;

            /** Specifies the image content for Split Button while initialization.
             */
            prefixIcon?: string;

            /** Specifies the showRoundedCorner property for Split Button while initialization.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the size of the Button. See ButtonSize
             * @Default {ej.ButtonSize.Normal}
             */
            size?: string|ej.ButtonSize;

            /** Specifies the image content for Split Button while initialization.
             */
            suffixIcon?: string;

            /** Specifies the list content for Split Button while initialization
             */
            targetID?: string;

            /** Specifies the target of splitbutton menu while initialization with ID or class as a selector.
             */
            target?: string;

            /** Specifies the text content for Split Button while initialization.
             */
            text?: string;

            /** Specifies the width of the Split Button.
             * @Default {â€œâ€}
             */
            width?: string|number;

            /** Fires before menu of the split button control is opened.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when Button control is clicked successfully
             */
            click?(e: ClickEventArgs): void;

            /** Fires before the list content of Button control is closed
             */
            close?(e: CloseEventArgs): void;

            /** Fires after Split Button control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the Split Button is destroyed successfully
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when a menu item is Hovered out successfully
             */
            itemMouseOut?(e: ItemMouseOutEventArgs): void;

            /** Fires when a menu item is Hovered in successfully
             */
            itemMouseOver?(e: ItemMouseOverEventArgs): void;

            /** Fires when a menu item is clicked successfully
             */
            itemSelected?(e: ItemSelectedEventArgs): void;

            /** Fires before the list content of Button control is opened
             */
            open?(e: OpenEventArgs): void;
        }

        export interface BeforeOpenEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target of the current object.
             */
            target?: any;

            /** return the button state
             */
            status?: boolean;
        }

        export interface CloseEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ItemMouseOutEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the clicked menu item element
             */
            element?: any;

            /** return the menu item id
             */
            ID?: string;

            /** return the clicked menu item text
             */
            Text?: string;
        }

        export interface ItemMouseOverEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the clicked menu item element
             */
            element?: any;

            /** return the menu item id
             */
            ID?: string;

            /** return the clicked menu item text
             */
            Text?: string;
        }

        export interface ItemSelectedEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the clicked menu item element
             */
            element?: any;

            /** returns the selected item
             */
            selectedItem?: any;

            /** return the menu id
             */
            menuId?: string;

            /** return the clicked menu item text
             */
            menuText?: string;
        }

        export interface OpenEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the split button model
             */
            model?: ej.SplitButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }
    enum ArrowPosition {
        //To set Left arrowPosition of the split button
        Left,
        //To set Right arrowPosition of the split button
        Right,
        //To set Top arrowPosition of the split button
        Top,
        //To set Bottom arrowPosition of the split button
        Bottom,
    }

    class Splitter extends ej.Widget {
        static fn: Splitter;
        constructor(element: JQuery | Element, options?: Splitter.Model);
        static Locale: any;
        model: Splitter.Model;
        defaults: Splitter.Model;

        /** To add a new pane to splitter control.
         * @param {string} content of pane.
         * @param {any} pane properties.
         * @param {number} index of pane.
         * @returns {HTMLElement}
         */
        addItem(content: string, property: any, index: number): HTMLElement;

        /** To collapse the splitter control pane.
         * @param {number} index number of pane.
         * @returns {void}
         */
        collapse(paneIndex: number): void;

        /** To expand the splitter control pane.
         * @param {number} index number of pane.
         * @returns {void}
         */
        expand(paneIndex: number): void;

        /** To refresh the splitter control pane resizing.
         * @returns {void}
         */
        refresh(): void;

        /** To remove a specified pane from the splitter control.
         * @param {number} index of pane.
         * @returns {void}
         */
        removeItem(index: number): void;
    }
    export namespace Splitter {

        export interface Model {

            /** Turns on keyboard interaction with the Splitter panes. You must set this property to true to access the keyboard shortcuts of ejSplitter.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Specify animation speed for the Splitter pane movement, while collapsing and expanding.
             * @Default {300}
             */
            animationSpeed?: number;

            /** Specify the CSS class to splitter control to achieve custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Specifies the animation behavior of the splitter.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Specifies the splitter control to be displayed in right to left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies HTML element string to replace the existing expand/collapse icons.
             * @Default {null}
             */
            expanderTemplate?: string;

            /** Specify height for splitter control.
             * @Default {null}
             */
            height?: string;

            /** Specifies the HTML Attributes of the Splitter.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specify window resizing behavior for splitter control.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specify the orientation for splitter control. See orientation
             * @Default {ej.orientation.Horizontal or â€œhorizontalâ€}
             */
            orientation?: ej.Orientation|string;

            /** Specify properties for each pane like paneSize, minSize, maxSize, collapsible, expandable, resizable.
             * @Default {[]}
             */
            properties?: any[];

            /** Specify width for splitter control.
             * @Default {null}
             */
            width?: string;

            /** Fires before expanding / collapsing the split pane of splitter control.
             */
            beforeExpandCollapse?(e: BeforeExpandCollapseEventArgs): void;

            /** Triggered when we click on the template icon. (Note: This will work only when expanderTemplate is defined.)
             */
            clickOnExpander?(e: ClickOnExpanderEventArgs): void;

            /** Fires when splitter control pane has been created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when splitter control pane has been destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when expand / collapse operation in splitter control pane has been performed successfully.
             */
            expandCollapse?(e: ExpandCollapseEventArgs): void;

            /** Fires when resize in splitter control pane.
             */
            resize?(e: ResizeEventArgs): void;
        }

        export interface BeforeExpandCollapseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns collapsed pane details.
             */
            collapsed?: any;

            /** returns expanded pane details.
             */
            expanded?: any;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the current split bar index.
             */
            splitbarIndex?: number;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ClickOnExpanderEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the target element from which click action is triggered.
             */
            targetElement?: any;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ExpandCollapseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns collapsed pane details.
             */
            collapsed?: any;

            /** returns expanded pane details.
             */
            expanded?: any;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the current split bar index.
             */
            splitbarIndex?: number;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns previous pane details.
             */
            prevPane?: any;

            /** returns next pane details.
             */
            nextPane?: any;

            /** returns the splitter model.
             */
            model?: ej.Splitter.Model;

            /** returns the current split bar index.
             */
            splitbarIndex?: number;

            /** returns the name of the event.
             */
            type?: string;
        }
    }

    class Tab extends ej.Widget {
        static fn: Tab;
        constructor(element: JQuery | Element, options?: Tab.Model);
        static Locale: any;
        model: Tab.Model;
        defaults: Tab.Model;

        /** Add new tab items with given name, URL and given index position, if index null itâ€™s add last item.
         * @param {string} URL name / tab id.
         * @param {string} Tab Display name.
         * @param {number} Index position to placed , this is optional.
         * @param {string} specifies cssClass, this is optional.
         * @param {string} specifies id of tab, this is optional.
         * @returns {void}
         */
        addItem(URL: string, displayLabel: string, index: number, cssClass: string, id: string): void;

        /** To disable the tab control.
         * @returns {void}
         */
        disable(): void;

        /** To enable the tab control.
         * @returns {void}
         */
        enable(): void;

        /** This function get the number of tab rendered
         * @returns {number}
         */
        getItemsCount(): number;

        /** This function hides the tab control.
         * @returns {void}
         */
        hide(): void;

        /** This function hides the specified item tab in tab control.
         * @param {number} index of tab item.
         * @returns {void}
         */
        hideItem(index: number): void;

        /** Remove the given index tab item.
         * @param {number} index of tab item.
         * @returns {void}
         */
        removeItem(index: number): void;

        /** This function is to show the tab control.
         * @returns {void}
         */
        show(): void;

        /** This function helps to show the specified hidden tab item in tab control.
         * @param {number} index of tab item.
         * @returns {void}
         */
        showItem(index: number): void;
    }
    export namespace Tab {

        export interface Model {

            /** Specifies the ajaxSettings option to load the content to the Tab control.
             */
            ajaxSettings?: AjaxSettings;

            /** Tab items interaction with keyboard keys, like headers active navigation.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Allow to collapsing the active item, while click on the active header.
             * @Default {false}
             */
            collapsible?: boolean;

            /** Set the root class for Tab theme. This cssClass API helps to use custom skinning option for Tab control.
             */
            cssClass?: string;

            /** Disables the given tab headers and content panels.
             * @Default {[]}
             */
            disabledItemIndex?: number[];

            /** Specifies the animation behavior of the tab.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** When this property is set to false, it disables the tab control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Enables the given tab headers and content panels.
             * @Default {[]}
             */
            enabledItemIndex?: number[];

            /** Save current model value to browser cookies for state maintains. While refresh the Tab control page the model value apply from browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Display Right to Left direction for headers and panels text of tab.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specify to enable scrolling for Tab header.
             * @Default {false}
             */
            enableTabScroll?: boolean;

            /** The event API to bind the action for active the tab items.
             * @Default {click}
             */
            events?: string;

            /** Specifies the position of Tab header as top, bottom, left or right. See below to get available Position
             * @Default {top}
             */
            headerPosition?: string|ej.Tab.Position;

            /** Set the height of the tab header element. Default this property value is null, so height take content height.
             * @Default {null}
             */
            headerSize?: string|number;

            /** Height set the outer panel element. Default this property value is null, so height take content height.
             * @Default {null}
             */
            height?: string|number;

            /** Adjust the content panel height for given option (content, auto and fill), by default panels height adjust based on the content.See below to get available HeightAdjustMode
             * @Default {content}
             */
            heightAdjustMode?: string|ej.Tab.HeightAdjustMode;

            /** Specifies to hide a pane of Tab control.
             * @Default {[]}
             */
            hiddenItemIndex?: any[];

            /** Specifies the HTML Attributes of the Tab.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** The idPrefix property appends the given string on the added tab item idâ€™s in runtime.
             * @Default {ej-tab-}
             */
            idPrefix?: string;

            /** Specifies the Tab header in active for given index value.
             * @Default {0}
             */
            selectedItemIndex?: number;

            /** Display the close button for each tab items. While clicking on the close icon, particular tab item will be removed.
             * @Default {false}
             */
            showCloseButton?: boolean;

            /** Display the Reload button for each tab items.
             * @Default {false}
             */
            showReloadIcon?: boolean;

            /** Tab panels and headers to be displayed in rounded corner style.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Set the width for outer panel element, if not itâ€™s take parent width.
             * @Default {null}
             */
            width?: string|number;

            /** Triggered after a tab item activated.
             */
            itemActive?(e: ItemActiveEventArgs): void;

            /** Triggered before AJAX content has been loaded.
             */
            ajaxBeforeLoad?(e: AjaxBeforeLoadEventArgs): void;

            /** Triggered if error occurs in AJAX request.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** Triggered after AJAX content load action.
             */
            ajaxLoad?(e: AjaxLoadEventArgs): void;

            /** Triggered after a tab item activated.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** Triggered before a tab item activated.
             */
            beforeActive?(e: BeforeActiveEventArgs): void;

            /** Triggered before a tab item remove.
             */
            beforeItemRemove?(e: BeforeItemRemoveEventArgs): void;

            /** Triggered before a tab item Create.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered before a tab item destroy.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered after new tab item add
             */
            itemAdd?(e: ItemAddEventArgs): void;

            /** Triggered after tab item removed.
             */
            itemRemove?(e: ItemRemoveEventArgs): void;
        }

        export interface ItemActiveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: HTMLElement;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: HTMLElement;

            /** returns current active index.
             */
            activeIndex?: number;

            /** returns, is it triggered by interaction or not.
             */
            isInteraction?: boolean;
        }

        export interface AjaxBeforeLoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: HTMLElement;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: HTMLElement;

            /** returns current active index.
             */
            activeIndex?: number;

            /** returns the URL of AJAX request
             */
            URL?: string;

            /** returns, is it triggered by interaction or not.
             */
            isInteraction?: boolean;
        }

        export interface AjaxErrorEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns AJAX data details.
             */
            data?: any;

            /** returns the URL of AJAX request.
             */
            URL?: string;
        }

        export interface AjaxLoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: HTMLElement;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: HTMLElement;

            /** returns current active index.
             */
            activeIndex?: number;

            /** returns the URL of AJAX request
             */
            URL?: string;

            /** returns, is it triggered by interaction or not.
             */
            isInteraction?: boolean;
        }

        export interface AjaxSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** return AJAX data.
             */
            data?: any;

            /** returns AJAX URL
             */
            URL?: string;

            /** returns content of AJAX request.
             */
            content?: any;
        }

        export interface BeforeActiveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns previous active tab header.
             */
            prevActiveHeader?: HTMLElement;

            /** returns previous active index.
             */
            prevActiveIndex?: number;

            /** returns current active tab header .
             */
            activeHeader?: HTMLElement;

            /** returns current active index.
             */
            activeIndex?: number;

            /** returns, is it triggered by interaction or not.
             */
            isInteraction?: boolean;
        }

        export interface BeforeItemRemoveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns current tab item index
             */
            index?: number;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ItemAddEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns new added tab header.
             */
            tabHeader?: HTMLElement;

            /** returns new added tab content panel.
             */
            tabContent?: any;
        }

        export interface ItemRemoveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tab model.
             */
            model?: ej.Tab.Model;

            /** returns the name of the event.
             */
            type?: string;

            /** returns removed tab header.
             */
            removedTab?: HTMLElement;
        }

        export interface AjaxSettings {

            /** It specifies, whether to enable or disable asynchronous request.
             * @Default {true}
             */
            async?: boolean;

            /** It specifies the page will be cached in the web browser.
             * @Default {false}
             */
            cache?: boolean;

            /** It specifies the type of data is send in the query string.
             * @Default {html}
             */
            contentType?: string;

            /** It specifies the data as an object, will be passed in the query string.
             * @Default {{}}
             */
            data?: any;

            /** It specifies the type of data that you're expecting back from the response.
             * @Default {html}
             */
            dataType?: string;

            /** It specifies the HTTP request type.
             * @Default {get}
             */
            type?: string;
        }

        enum Position {

            ///Tab headers display to top position
            Top,

            ///Tab headers display to bottom position
            Bottom,

            ///Tab headers display to left position.
            Left,

            ///Tab headers display to right position.
            Right
        }


        enum HeightAdjustMode {

            ///string
            None,

            ///string
            Content,

            ///string
            Auto,

            ///string
            Fill
        }

    }

    class TagCloud extends ej.Widget {
        static fn: TagCloud;
        constructor(element: JQuery | Element, options?: TagCloud.Model);
        static Locale: any;
        model: TagCloud.Model;
        defaults: TagCloud.Model;

        /** Inserts a new item into the TagCloud
         * @param {string} Insert new item into the TagCloud
         * @returns {void}
         */
        insert(name: string): void;

        /** Inserts a new item into the TagCloud at a particular position.
         * @param {string} Inserts a new item into the TagCloud
         * @param {number} Inserts a new item into the TagCloud with the specified position
         * @returns {void}
         */
        insertAt(name: string, position: number): void;

        /** Removes the item from the TagCloud based on the name. It removes all the tags which have the corresponding name
         * @param {string} name of the tag.
         * @returns {void}
         */
        remove(name: string): void;

        /** Removes the item from the TagCloud based on the position. It removes the tags from the the corresponding position only.
         * @param {number} position of tag item.
         * @returns {void}
         */
        removeAt(position: number): void;
    }
    export namespace TagCloud {

        export interface Model {

            /** Specify the CSS class to button to achieve custom theme.
             */
            cssClass?: string;

            /** The dataSource contains the list of data to display in a cloud format. Each data contains a link URL, frequency to categorize the font size and a display text.
             * @Default {null}
             */
            dataSource?: any;

            /** Sets the TagCloud and tag items direction as right to left alignment.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Defines the mapping fields for the data items of the TagCloud.
             * @Default {null}
             */
            fields?: Fields;

            /** Specifies the list of HTML attributes to be added to TagCloud control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Defines the format for the TagCloud to display the tag items.See Format
             * @Default {ej.Format.Cloud}
             */
            format?: string|ej.Format;

            /** Sets the maximum font size value for the tag items. The font size for the tag items will be generated in between the minimum and maximum font size values.
             * @Default {40px}
             */
            maxFontSize?: string|number;

            /** Sets the minimum font size value for the tag items. The font size for the tag items will be generated in between the minimum and maximum font size values.
             * @Default {10px}
             */
            minFontSize?: string|number;

            /** Define the query to retrieve the data from online server. The query is used only when the online dataSource is used.
             * @Default {null}
             */
            query?: any;

            /** Shows or hides the TagCloud title. When this set to false, it hides the TagCloud header.
             * @Default {true}
             */
            showTitle?: boolean;

            /** Sets the title image for the TagCloud. To show the title image, the showTitle property should be enabled.
             * @Default {null}
             */
            titleImage?: string;

            /** Sets the title text for the TagCloud. To show the title text, the showTitle property should be enabled.
             * @Default {Title}
             */
            titleText?: string;

            /** Event triggers when the TagCloud items are clicked
             */
            click?(e: ClickEventArgs): void;

            /** Event triggers when the TagCloud are created
             */
            create?(e: CreateEventArgs): void;

            /** Event triggers when the TagCloud are destroyed
             */
            destroy?(e: DestroyEventArgs): void;

            /** Event triggers when the cursor leaves out from a tag item
             */
            mouseout?(e: MouseoutEventArgs): void;

            /** Event triggers when the cursor hovers on a tag item
             */
            mouseover?(e: MouseoverEventArgs): void;
        }

        export interface ClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TagCloud model
             */
            model?: ej.TagCloud.Model;

            /** returns the name of the event
             */
            type?: string;

            /** return current tag name
             */
            text?: string;

            /** return current URL link
             */
            URL?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TagCloud model
             */
            model?: ej.TagCloud.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TagCloud model
             */
            model?: ej.TagCloud.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface MouseoutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TagCloud model
             */
            model?: ej.TagCloud.Model;

            /** returns the name of the event
             */
            type?: string;

            /** return current tag name
             */
            text?: string;

            /** return current URL link
             */
            URL?: string;
        }

        export interface MouseoverEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TagCloud model
             */
            model?: ej.TagCloud.Model;

            /** returns the name of the event
             */
            type?: string;

            /** return current tag name
             */
            text?: string;

            /** return current URL link
             */
            URL?: string;
        }

        export interface Fields {

            /** Defines the frequency column number to categorize the font size.
             */
            frequency?: string;

            /** Defines the HTML attributes column for the anchor elements inside the each tag items.
             */
            htmlAttributes?: string;

            /** Defines the tag value or display text.
             */
            text?: string;

            /** Defines the URL link to navigate while click the tag.
             */
            url?: string;
        }
    }
    enum Format {
        //To render the TagCloud items in cloud format
        Cloud,
        //To render the TagCloud items in list format
        List,
    }

    class TimePicker extends ej.Widget {
        static fn: TimePicker;
        constructor(element: JQuery | Element, options?: TimePicker.Model);
        static Locale: any;
        model: TimePicker.Model;
        defaults: TimePicker.Model;

        /** Allows you to disable the TimePicker.
         * @returns {void}
         */
        disable(): void;

        /** Allows you to enable the TimePicker.
         * @returns {void}
         */
        enable(): void;

        /** It returns the current time value.
         * @returns {string}
         */
        getValue(): string;

        /** This method will hide the TimePicker control popup.
         * @returns {void}
         */
        hide(): void;

        /** Updates the current system time in TimePicker.
         * @returns {void}
         */
        setCurrentTime(): void;

        /** This method will show the TimePicker control popup.
         * @returns {void}
         */
        show(): void;
    }
    export namespace TimePicker {

        export interface Model {

            /** Sets the root CSS class for the TimePicker theme, which is used to customize.
             */
            cssClass?: string;

            /** Specifies the list of time range to be disabled.
             * @Default {{}}
             */
            disableTimeRanges?: any;

            /** Specifies the animation behavior in TimePicker.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** When this property is set to false, it disables the TimePicker control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Save current model value to browser cookies for maintaining states. When refreshing the TimePicker control page, the model value is applied from browser cookies or HTML 5local
             * storage.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Displays the TimePicker as right to left alignment.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** When the enableStrictMode is set as true it allows the value outside of the range and also indicate with red color border, otherwise it internally changed to the min or max range
             * value based an input value.
             * @Default {false}
             */
            enableStrictMode?: boolean;

            /** Defines the height of the TimePicker textbox.
             */
            height?: string|number;

            /** Sets the step value for increment an hour value through arrow keys or mouse scroll.
             * @Default {1}
             */
            hourInterval?: number;

            /** It allows to define the characteristics of the TimePicker control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Sets the time interval between the two adjacent time values in the popup.
             * @Default {30}
             */
            interval?: number;

            /** Defines the localization info used by the TimePicker.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the maximum time value to the TimePicker.
             * @Default {11:59:59 PM}
             */
            maxTime?: string;

            /** Sets the minimum time value to the TimePicker.
             * @Default {12:00:00 AM}
             */
            minTime?: string;

            /** Sets the step value for increment the minute value through arrow keys or mouse scroll.
             * @Default {1}
             */
            minutesInterval?: number;

            /** Defines the height of the TimePicker popup.
             * @Default {191px}
             */
            popupHeight?: string|number;

            /** Defines the width of the TimePicker popup.
             * @Default {auto}
             */
            popupWidth?: string|number;

            /** Toggles the readonly state of the TimePicker. When the widget is readOnly, it doesnâ€™t allow your input.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Sets the step value for increment the seconds value through arrow keys or mouse scroll.
             * @Default {1}
             */
            secondsInterval?: number;

            /** shows or hides the drop down button in TimePicker.
             * @Default {true}
             */
            showPopupButton?: boolean;

            /** TimePicker is displayed with rounded corner when this property is set to true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Defines the time format displayed in the TimePicker.
             * @Default {h:mm tt}
             */
            timeFormat?: string;

            /** Set the jQuery validation error message in TimePicker.
             * @Default {null}
             */
            validationMessages?: any;

            /** Set the jQuery validation rules in TimePicker.
             * @Default {null}
             */
            validationRules?: any;

            /** Sets a specified time value on the TimePicker.
             * @Default {null}
             */
            value?: string|Date;

            /** Specifies the water mark text to be displayed in input text.
             * @Default {select a time}
             */
            watermarkText?: string;

            /** Defines the width of the TimePicker textbox.
             */
            width?: string|number;

            /** Fires when the time value changed in the TimePicker.
             */
            beforeChange?(e: BeforeChangeEventArgs): void;

            /** Fires when the TimePicker popup before opened.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Fires when the time value changed in the TimePicker.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when the TimePicker popup closed.
             */
            close?(e: CloseEventArgs): void;

            /** Fires when create TimePicker successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the TimePicker is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when the TimePicker control gets focus.
             */
            focusIn?(e: FocusInEventArgs): void;

            /** Fires when the TimePicker control get lost focus.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires when the TimePicker popup opened.
             */
            open?(e: OpenEventArgs): void;

            /** Fires when the value is selected from the TimePicker dropdown list.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface BeforeChangeEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the modified time value
             */
            value?: string;
        }

        export interface BeforeOpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the time value
             */
            value?: string;
        }

        export interface ChangeEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns true when the value changed by user interaction otherwise returns false
             */
            isInteraction?: boolean;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the modified time value
             */
            value?: string;
        }

        export interface CloseEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the time value
             */
            value?: string;
        }

        export interface CreateEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusInEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the current time value
             */
            value?: string;
        }

        export interface FocusOutEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the current time value
             */
            value?: string;
        }

        export interface OpenEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the time value
             */
            value?: string;
        }

        export interface SelectEventArgs {

            /** returns the TimePicker model
             */
            model?: ej.TimePicker.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the previously selected time value
             */
            prevTime?: string;

            /** returns the selected time value
             */
            value?: string;
        }
    }

    class ToggleButton extends ej.Widget {
        static fn: ToggleButton;
        constructor(element: JQuery | Element, options?: ToggleButton.Model);
        static Locale: any;
        model: ToggleButton.Model;
        defaults: ToggleButton.Model;

        /** Allows you to destroy the ToggleButton widget.
         * @returns {void}
         */
        destroy(): void;

        /** To disable the ToggleButton to prevent all user interactions.
         * @returns {void}
         */
        disable(): void;

        /** To enable the ToggleButton.
         * @returns {void}
         */
        enable(): void;
    }
    export namespace ToggleButton {

        export interface Model {

            /** Specify the icon in active state to the toggle button and it will be aligned from left margin of the button.
             */
            activePrefixIcon?: string;

            /** Specify the icon in active state to the toggle button and it will be aligned from right margin of the button.
             */
            activeSuffixIcon?: string;

            /** Sets the text when ToggleButton is in active state i.e.,checked state.
             * @Default {null}
             */
            activeText?: string;

            /** Specifies the contentType of the ToggleButton. See ContentType as below
             * @Default {ej.ContentType.TextOnly}
             */
            contentType?: ej.ContentType|string;

            /** Specify the CSS class to the ToggleButton to achieve custom theme.
             */
            cssClass?: string;

            /** Specify the icon in default state to the toggle button and it will be aligned from left margin of the button.
             */
            defaultPrefixIcon?: string;

            /** Specify the icon in default state to the toggle button and it will be aligned from right margin of the button.
             */
            defaultSuffixIcon?: string;

            /** Specifies the text of the ToggleButton, when the control is a default state. i.e., unChecked state.
             * @Default {null}
             */
            defaultText?: string;

            /** Specifies the state of the ToggleButton.
             * @Default {true}
             */
            enabled?: boolean;

            /** Save current model value to browser cookies for maintaining states. When refreshing the ToggleButton control page, the model value is applied from browser cookies or HTML 5local
             * storage.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Specify the Right to Left direction of the ToggleButton.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specifies the height of the ToggleButton.
             * @Default {28pixel}
             */
            height?: number|string;

            /** It allows to define the characteristics of the ToggleButton control. It will helps to extend the capability of an HTML element.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the image position of the ToggleButton.
             * @Default {ej.ImagePosition.ImageLeft}
             */
            imagePosition?: ej.ImagePosition|string;

            /** Allows to prevents the control switched to checked (active) state.
             * @Default {false}
             */
            preventToggle?: boolean;

            /** Displays the ToggleButton with rounded corners.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the size of the ToggleButton. See ButtonSize as below
             * @Default {ej.ButtonSize.Normal}
             */
            size?: ej.ButtonSize|string;

            /** It allows to define the ToggleButton state to checked(Active) or unchecked(Default) at initial time.
             * @Default {false}
             */
            toggleState?: boolean;

            /** Specifies the type of the ToggleButton. See ButtonType as below
             * @Default {ej.ButtonType.Button}
             */
            type?: ej.ButtonType|string;

            /** Specifies the width of the ToggleButton.
             * @Default {100pixel}
             */
            width?: number|string;

            /** Fires when ToggleButton control state is changed successfully.
             */
            change?(e: ChangeEventArgs): void;

            /** Fires when ToggleButton control is clicked successfully.
             */
            click?(e: ClickEventArgs): void;

            /** Fires when ToggleButton control is created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when ToggleButton control is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** return the toggle button checked state
             */
            isChecked?: boolean;

            /** returns the toggle button model
             */
            model?: ej.ToggleButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** return the toggle button checked state
             */
            isChecked?: boolean;

            /** returns the toggle button model
             */
            model?: ej.ToggleButton.Model;

            /** return the toggle button state
             */
            status?: boolean;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the toggle button model
             */
            model?: ej.ToggleButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the toggle button model
             */
            model?: ej.ToggleButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }

    class Toolbar extends ej.Widget {
        static fn: Toolbar;
        constructor(element: JQuery | Element, options?: Toolbar.Model);
        static Locale: any;
        model: Toolbar.Model;
        defaults: Toolbar.Model;

        /** Deselect the specified Toolbar item.
         * @param {any} The element need to be deselected
         * @returns {void}
         */
        deselectItem(element: any): void;

        /** Deselect the Toolbar item based on specified id.
         * @param {string} The ID of the element need to be deselected
         * @returns {void}
         */
        deselectItemByID(ID: string): void;

        /** Allows you to destroy the Toolbar widget.
         * @returns {void}
         */
        destroy(): void;

        /** To disable all items in the Toolbar control.
         * @returns {void}
         */
        disable(): void;

        /** Disable the specified Toolbar item.
         * @param {any} The element need to be disabled
         * @returns {void}
         */
        disableItem(element: any): void;

        /** Disable the Toolbar item based on specified item id in the Toolbar.
         * @param {string} The ID of the element need to be disabled
         * @returns {void}
         */
        disableItemByID(ID: string): void;

        /** Enable the Toolbar if it is in disabled state.
         * @returns {void}
         */
        enable(): void;

        /** Enable the Toolbar item based on specified item.
         * @param {any} The element need to be enabled
         * @returns {void}
         */
        enableItem(element: any): void;

        /** Enable the Toolbar item based on specified item id in the Toolbar.
         * @param {string} The ID of the element need to be enabled
         * @returns {void}
         */
        enableItemByID(ID: string): void;

        /** To hide the Toolbar
         * @returns {void}
         */
        hide(): void;

        /** Remove the item from toolbar, based on specified item.
         * @param {any} The element need to be removed
         * @returns {void}
         */
        removeItem(element: any): void;

        /** Remove the item from toolbar, based on specified item id in the Toolbar.
         * @param {string} The ID of the element need to be removed
         * @returns {void}
         */
        removeItemByID(ID: string): void;

        /** Selects the item from toolbar, based on specified item.
         * @param {any} The element need to be selected
         * @returns {void}
         */
        selectItem(element: any): void;

        /** Selects the item from toolbar, based on specified item id in the Toolbar.
         * @param {string} The ID of the element need to be selected
         * @returns {void}
         */
        selectItemByID(ID: string): void;

        /** To show the Toolbar.
         * @returns {void}
         */
        show(): void;
    }
    export namespace Toolbar {

        export interface Model {

            /** Sets the root CSS class for Toolbar control to achieve the custom theme.
             */
            cssClass?: string;

            /** Specifies dataSource value for the Toolbar control during initialization.
             * @Default {null}
             */
            dataSource?: any;

            /** Disables an Item or set of Items that are enabled in the Toolbar
             * @Default {[]}
             */
            disabledItemIndices?: any[];

            /** Specifies the Toolbar control state.
             * @Default {true}
             */
            enabled?: boolean;

            /** Enables an Item or set of Items that are disabled in the Toolbar
             * @Default {[]}
             */
            enabledItemIndices?: any[];

            /** Specifies enableRTL property to align the Toolbar control from right to left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Allows to separate the each UL items in the Toolbar control.
             * @Default {false}
             */
            enableSeparator?: boolean;

            /** Specifies the mapping fields for the data items of the Toolbar
             * @Default {null}
             */
            fields?: string;

            /** Specifies the height of the Toolbar.
             * @Default {28}
             */
            height?: number|string;

            /** Specifies the list of HTML attributes to be added to toolbar control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies whether the Toolbar control is need to be show or hide.
             * @Default {false}
             */
            hide?: boolean;

            /** Enables/Disables the responsive support for Toolbar items during the window resizing time.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the items of  Toolbar
             * @Default {null}
             */
            Items?: Items;

            /** Specifies the Toolbar orientation. See orientation
             * @Default {Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Specifies the query to retrieve the data from the online server. The query is used only when the online dataSource is used.
             * @Default {null}
             */
            query?: any;

            /** Specifies the Toolbar responsive type.
             * @Default {Popup}
             */
            responsiveType?: ej.Toolbar.ResponsiveType|string;

            /** Displays the Toolbar with rounded corners.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the width of the Toolbar.
             */
            width?: number|string;

            /** Fires after Toolbar control is clicked.
             */
            click?(e: ClickEventArgs): void;

            /** Fires after Toolbar control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires after Toolbar control is focused.
             */
            focusOut?(e: FocusOutEventArgs): void;

            /** Fires when the Toolbar is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires after Toolbar control item is hovered.
             */
            itemHover?(e: ItemHoverEventArgs): void;

            /** Fires after mouse leave from Toolbar control item.
             */
            itemLeave?(e: ItemLeaveEventArgs): void;

            /** Fires when the overflow popup of toolbar is opened.
             */
            overflowOpen?(e: OverflowOpenEventArgs): void;

            /** Fires when the overflow popup of toolbar is closed.
             */
            overflowClose?(e: OverflowCloseEventArgs): void;
        }

        export interface ClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target of the current object.
             */
            target?: any;

            /** returns the target of the current object.
             */
            currentTarget?: any;

            /** return the Toolbar state
             */
            status?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface FocusOutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ItemHoverEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target of the current object.
             */
            target?: any;

            /** returns the target of the current object.
             */
            currentTarget?: any;

            /** return the Toolbar state
             */
            status?: boolean;
        }

        export interface ItemLeaveEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target of the current object.
             */
            target?: any;

            /** returns the target of the current object.
             */
            currentTarget?: any;

            /** return the Toolbar state
             */
            status?: boolean;
        }

        export interface OverflowOpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the current  X position of the target .
             */
            clientX?: number;

            /** Returns the current  Y position of the target .
             */
            clientY?: number;

            /** returns the target of the current object.
             */
            currentTarget?: any;
        }

        export interface OverflowCloseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Toolbar model
             */
            model?: ej.Toolbar.Model;

            /** returns the name of the event
             */
            type?: string;

            /** Returns the current  X position of the target .
             */
            clientX?: number;

            /** Returns the current  Y position of the target .
             */
            clientY?: number;

            /** returns the target of the current object.
             */
            currentTarget?: any;
        }

        export interface Fields {

            /** Defines the group name for the item.
             */
            group?: string;

            /** Defines the HTML attributes such as id, class, styles for the item to extend the capability.
             */
            htmlAttributes?: any;

            /** Defines id for the tag.
             */
            id?: string;

            /** Defines the image attributes such as height, width, styles and so on.
             */
            imageAttributes?: string;

            /** Defines the imageURL for the image location.
             */
            imageUrl?: string;

            /** Defines the sprite CSS for the image tag.
             */
            spriteCssClass?: string;

            /** Defines the text content for the tag.
             */
            text?: string;

            /** Defines the tooltip text for the tag.
             */
            tooltipText?: string;

            /** Allows you to add  template as toolbar item
             */
            template?: string;
        }

        export interface Items {

            /** Defines the group name for the item.
             */
            group?: string;

            /** Defines the HTML attributes such as id, class, styles for the item .
             */
            htmlAttributes?: any;

            /** Defines id for the tag.
             */
            id?: string;

            /** Defines the image attributes such as height, width, styles and so on.
             */
            imageAttributes?: string;

            /** Defines the imageURL for the image location.
             */
            imageUrl?: string;

            /** Defines the sprite CSS for the image tag.
             */
            spriteCssClass?: string;

            /** Defines the text content for the tag.
             */
            text?: string;

            /** Defines the tooltip text for the tag.
             */
            tooltipText?: string;

            /** Allows to add template as toolbar item.
             */
            template?: string;
        }

        enum ResponsiveType {

            ///To display the toolbar overflow items as popup
            Popup,

            ///To display the toolbar overflow items as inline toolbar
            Inline
        }

    }

    class TreeView extends ej.Widget {
        static fn: TreeView;
        constructor(element: JQuery | Element, options?: TreeView.Model);
        static Locale: any;
        model: TreeView.Model;
        defaults: TreeView.Model;

        /** To add a Node or collection of nodes in TreeView. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in
         * TreeView.
         * @param {string|any} New node text or JSON object
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {boolean} Parent node will be prevented from auto expanding
         * @returns {void}
         */
        addNode(newNodeText: string|any, target: string|any, preventTargetExpand: boolean): void;

        /** To add a collection of nodes in TreeView. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in TreeView.
         * @param {any|any[]} New node details in JSON object
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {boolean} Parent node will be prevented from auto expanding
         * @returns {void}
         */
        addNodes(collection: any|any[], target: string|any, preventTargetExpand: boolean): void;

        /** To check all the nodes in TreeView.
         * @returns {void}
         */
        checkAll(): void;

        /** To check a node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        checkNode(element: string|any|any[]): void;

        /** This method is used to collapse all nodes in TreeView control. If you want to collapse all nodes up to the specific level in TreeView control then we need to pass levelUntil as
         * argument to this method.
         * @param {number} TreeView nodes will collapse until the given level
         * @param {boolean} Weather exclude the hidden nodes of TreeView while collapse all nodes
         * @returns {void}
         */
        collapseAll(levelUntil?: number, excludeHiddenNodes?: boolean): void;

        /** To collapse a particular node in TreeView.
         * @param {string|any|any[]} ID of TreeView node|object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        collapseNode(element: string|any|any[]): void;

        /** To disable the node in the TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        disableNode(element: string|any|any[]): void;

        /** To enable the node in the TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        enableNode(element: string|any|any[]): void;

        /** To ensure that the TreeView node is visible in the TreeView. This method is useful if we need select a TreeView node dynamically.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        ensureVisible(element: string|any): boolean;

        /** This method is used to expand all nodes in TreeView control. If you want to expand all nodes up to the specific level in TreeView control then we need to pass levelUntil as
         * argument to this method.
         * @param {number} TreeView nodes will expand until the given level
         * @param {boolean} Weather exclude the hidden nodes of TreeView while expand all nodes
         * @returns {void}
         */
        expandAll(levelUntil?: number, excludeHiddenNodes?: boolean): void;

        /** To expandNode particular node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        expandNode(element: string|any|any[]): void;

        /** To get currently checked nodes in TreeView.
         * @returns {any}
         */
        getCheckedNodes(): any;

        /** To get currently checked nodes indexes in TreeView.
         * @returns {any[]}
         */
        getCheckedNodesIndex(): any[];

        /** This method is used to get immediate child nodes of a node in TreeView control. If you want to get the all child nodes include nested child nodes then we need to pass
         * includeNestedChild as true along with element arguments to this method.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {boolean} Weather include nested child nodes of TreeView node
         * @returns {any[]}
         */
        getChildren(element: string|any, includeNestedChild?: boolean): any[];

        /** To get number of nodes in TreeView.
         * @returns {number}
         */
        getNodeCount(): number;

        /** To get currently expanded nodes in TreeView.
         * @returns {any}
         */
        getExpandedNodes(): any;

        /** To get currently expanded nodes indexes in TreeView.
         * @returns {any[]}
         */
        getExpandedNodesIndex(): any[];

        /** To get TreeView node by using index position in TreeView.
         * @param {number} Index position of TreeView node
         * @returns {any}
         */
        getNodeByIndex(index: number): any;

        /** To get TreeView node data such as id, text, parentId, selected, checked, expanded, level, childes and index.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {any}
         */
        getNode(element: string|any): any;

        /** To get current index position of TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {number}
         */
        getNodeIndex(element: string|any): number;

        /** To get immediate parent TreeView node of particular TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {any}
         */
        getParent(element: string|any): any;

        /** To get the currently selected node in TreeView.
         * @returns {any}
         */
        getSelectedNode(): any;

        /** To get the currently selected nodes in TreeView.
         * @returns {any[]}
         */
        getSelectedNodes(): any[];

        /** To get the index position of currently selected node in TreeView.
         * @returns {number}
         */
        getSelectedNodeIndex(): number;

        /** To get the index positions of currently selected nodes in TreeView.
         * @returns {any[]}
         */
        getSelectedNodesIndex(): any[];

        /** To get the text of a node in TreeView.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {string}
         */
        getText(element: string|any): string;

        /** To get the updated datasource of TreeView after performing some operation like drag and drop, node editing, adding and removing node.
         * @param {string|number} ID of TreeView node
         * @returns {any[]}
         */
        getTreeData(id?: string|number): any[];

        /** To get currently visible nodes in TreeView.
         * @returns {any}
         */
        getVisibleNodes(): any;

        /** To check a node having child or not.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        hasChildNode(element: string|any): boolean;

        /** To show nodes in TreeView.
         * @returns {void}
         */
        hide(): void;

        /** To hide particular node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        hideNode(element: string|any|any[]): void;

        /** To add a Node or collection of nodes after the particular TreeView node.
         * @param {string|any} New node text or JSON object
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {void}
         */
        insertAfter(newNodeText: string|any, target: string|any): void;

        /** To add a Node or collection of nodes before the particular TreeView node.
         * @param {string|any} New node text or JSON object
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {void}
         */
        insertBefore(newNodeText: string|any, target: string|any): void;

        /** To check the given TreeView node is checked or unchecked.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isNodeChecked(element: string|any): boolean;

        /** To check whether the child nodes are loaded of the given TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isChildLoaded(element: string|any): boolean;

        /** To check the given TreeView node is disabled or enabled.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isDisabled(element: string|any): boolean;

        /** To check the given node is exist in TreeView.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isExist(element: string|any): boolean;

        /** To get the expand status of the given TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isExpanded(element: string|any): boolean;

        /** To get the select status of the given TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isSelected(element: string|any): boolean;

        /** To get the visibility status of the given TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {boolean}
         */
        isVisible(element: string|any): boolean;

        /** To load the TreeView nodes from the particular URL. If target tree node is specified, then the given nodes are added as child of target tree node, otherwise nodes are added in
         * TreeView.
         * @param {string} URL location, the data returned from the URL will be loaded in TreeView
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @returns {void}
         */
        loadData(URL: string, target: string|any): void;

        /** To move the TreeView node with in same TreeView. The new position of given TreeView node will be based on destination node and index position.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {number} New index position of given source node
         * @returns {void}
         */
        moveNode(sourceNode: string|any, destinationNode: string|any, index: number): void;

        /** To refresh the TreeView
         * @returns {void}
         */
        refresh(): void;

        /** To remove all the nodes in TreeView.
         * @returns {void}
         */
        removeAll(): void;

        /** To remove a node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        removeNode(element: string|any|any[]): void;

        /** To select all the TreeView nodes when enable allowMultiSelection property.
         * @returns {void}
         */
        selectAll(): void;

        /** This method is used to select a node in TreeView control. If you want to select the collection of nodes in TreeView control then we need to enable allowMultiSelection property.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/ collection of ID/object of TreeView nodes
         * @returns {void}
         */
        selectNode(element: string|any|any[]): void;

        /** To show nodes in TreeView.
         * @returns {void}
         */
        show(): void;

        /** To show a node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        showNode(element: string|any|any[]): void;

        /** To uncheck all the nodes in TreeView.
         * @returns {void}
         */
        unCheckAll(): void;

        /** To uncheck a node in TreeView.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/collection of ID/object of TreeView nodes
         * @returns {void}
         */
        uncheckNode(element: string|any|any[]): void;

        /** To unselect all the TreeView nodes when enable allowMultiSelection property.
         * @returns {void}
         */
        unselectAll(): void;

        /** This method is used to unselect a node in TreeView control. If you want to unselect the collection of nodes in TreeView control then we need to enable allowMultiSelection property.
         * @param {string|any|any[]} ID of TreeView node/object of TreeView node/ collection of ID/object of TreeView nodes
         * @returns {void}
         */
        unselectNode(element: string|any|any[]): void;

        /** To edit or update the text of the TreeView node.
         * @param {string|any} ID of TreeView node/object of TreeView node
         * @param {string} New text
         * @returns {void}
         */
        updateText(target: string|any, newText: string): void;
    }
    export namespace TreeView {

        export interface Model {

            /** Gets or sets a value that indicates whether to enable drag and drop a node within the same tree.
             * @Default {false}
             */
            allowDragAndDrop?: boolean;

            /** Gets or sets a value that indicates whether to enable drag and drop a node in inter ej.TreeView.
             * @Default {true}
             */
            allowDragAndDropAcrossControl?: boolean;

            /** Gets or sets a value that indicates whether to drop a node to a sibling of particular node.
             * @Default {true}
             */
            allowDropSibling?: boolean;

            /** Gets or sets a value that indicates whether to drop a node to a child of particular node.
             * @Default {true}
             */
            allowDropChild?: boolean;

            /** Gets or sets a value that indicates whether to enable node editing support for TreeView.
             * @Default {false}
             */
            allowEditing?: boolean;

            /** Gets or sets a value that indicates whether to enable keyboard support for TreeView actions like nodeSelection, nodeEditing, nodeExpand, nodeCollapse, nodeCut and Paste.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Gets or sets a value that indicates whether to enable multi selection support for TreeView.
             * @Default {false}
             */
            allowMultiSelection?: boolean;

            /** Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.
             * @Default {true}
             */
            autoCheck?: boolean;

            /** Allow us to specify the parent node to be retain in checked or unchecked state instead of going for indeterminate state.
             * @Default {false}
             */
            autoCheckParentNode?: boolean;

            /** Gets or sets a value that indicates the checkedNodes index collection as an array. The given array index position denotes the nodes, that are checked while rendering TreeView.
             * @Default {[]}
             */
            checkedNodes?: any[];

            /** Sets the root CSS class for TreeView which allow us to customize the appearance.
             */
            cssClass?: string;

            /** Gets or sets a value that indicates whether to enable or disable the animation effect while expanding or collapsing a node.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Gets or sets a value that indicates whether a TreeView can be enabled or disabled. No actions can be performed while this property is set as false
             * @Default {true}
             */
            enabled?: boolean;

            /** Allow us to prevent multiple nodes to be in expanded state. If it set to false, previously expanded node will be collapsed automatically, while we expand a node.
             * @Default {true}
             */
            enableMultipleExpand?: boolean;

            /** Sets a value that indicates whether to persist the TreeView model state in page using applicable medium i.e., HTML5 localStorage or cookies
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Gets or sets a value that indicates to align content in the TreeView control from right to left by setting the property as true.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Gets or sets a array of value that indicates the expandedNodes index collection as an array. The given array index position denotes the nodes, that are expanded while rendering
             * TreeView.
             * @Default {[]}
             */
            expandedNodes?: any[];

            /** Gets or sets a value that indicates the TreeView node can be expand or collapse by using the specified action.
             * @Default {dblclick}
             */
            expandOn?: string;

            /** Gets or sets a fields object that allow us to map the data members with field properties in order to make the data binding easier.
             * @Default {null}
             */
            fields?: Fields;

            /** Gets or sets a value that indicates whether to enable full row selection support for TreeView.
             * @Default {false}
             */
            fullRowSelect?: boolean;

            /** Defines the height of the TreeView.
             * @Default {Null}
             */
            height?: string|number;

            /** Specifies the HTML Attributes for the TreeView. Using this API we can add custom attributes in TreeView control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specifies the child nodes to be loaded on demand
             * @Default {false}
             */
            loadOnDemand?: boolean;

            /** Gets or Sets a value that indicates the index position of a tree node. The particular index tree node will be selected while rendering the TreeView.
             * @Default {-1}
             */
            selectedNode?: number;

            /** Gets or sets a value that indicates the selectedNodes index collection as an array. The given array index position denotes the nodes, that are selected while rendering TreeView.
             * @Default {[]}
             */
            selectedNodes?: any[];

            /** Gets or sets a value that indicates whether to display or hide checkbox for all TreeView nodes.
             * @Default {false}
             */
            showCheckbox?: boolean;

            /** By using sortSettings property, you can customize the sorting option in TreeView control.
             */
            sortSettings?: SortSettings;

            /** Allow us to use custom template in order to create TreeView.
             * @Default {null}
             */
            template?: string;

            /** Defines the width of the TreeView.
             * @Default {Null}
             */
            width?: string|number;

            /** Fires before adding node to TreeView.
             */
            beforeAdd?(e: BeforeAddEventArgs): void;

            /** Fires before collapse a node.
             */
            beforeCollapse?(e: BeforeCollapseEventArgs): void;

            /** Fires before cut node in TreeView.
             */
            beforeCut?(e: BeforeCutEventArgs): void;

            /** Fires before deleting node in TreeView.
             */
            beforeDelete?(e: BeforeDeleteEventArgs): void;

            /** Fires before editing the node in TreeView.
             */
            beforeEdit?(e: BeforeEditEventArgs): void;

            /** Fires before expanding the node.
             */
            beforeExpand?(e: BeforeExpandEventArgs): void;

            /** Fires before loading nodes to TreeView.
             */
            beforeLoad?(e: BeforeLoadEventArgs): void;

            /** Fires before paste node in TreeView.
             */
            beforePaste?(e: BeforePasteEventArgs): void;

            /** Fires before selecting node in TreeView.
             */
            beforeSelect?(e: BeforeSelectEventArgs): void;

            /** Fires when TreeView created successfully.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when TreeView destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires before nodeEdit Successful.
             */
            inlineEditValidation?(e: InlineEditValidationEventArgs): void;

            /** Fires when key pressed successfully.
             */
            keyPress?(e: KeyPressEventArgs): void;

            /** Fires when data load fails.
             */
            loadError?(e: LoadErrorEventArgs): void;

            /** Fires when data loaded successfully.
             */
            loadSuccess?(e: LoadSuccessEventArgs): void;

            /** Fires once node added successfully.
             */
            nodeAdd?(e: NodeAddEventArgs): void;

            /** Fires once node checked successfully.
             */
            nodeCheck?(e: NodeCheckEventArgs): void;

            /** Fires when node clicked successfully.
             */
            nodeClick?(e: NodeClickEventArgs): void;

            /** Fires when node collapsed successfully.
             */
            nodeCollapse?(e: NodeCollapseEventArgs): void;

            /** Fires when node cut successfully.
             */
            nodeCut?(e: NodeCutEventArgs): void;

            /** Fires when node deleted successfully.
             */
            nodeDelete?(e: NodeDeleteEventArgs): void;

            /** Fires when node dragging.
             */
            nodeDrag?(e: NodeDragEventArgs): void;

            /** Fires once node drag start successfully.
             */
            nodeDragStart?(e: NodeDragStartEventArgs): void;

            /** Fires before the dragged node to be dropped.
             */
            nodeDragStop?(e: NodeDragStopEventArgs): void;

            /** Fires once node dropped successfully.
             */
            nodeDropped?(e: NodeDroppedEventArgs): void;

            /** Fires once node edited successfully.
             */
            nodeEdit?(e: NodeEditEventArgs): void;

            /** Fires once node expanded successfully.
             */
            nodeExpand?(e: NodeExpandEventArgs): void;

            /** Fires once node pasted successfully.
             */
            nodePaste?(e: NodePasteEventArgs): void;

            /** Fires when node selected successfully.
             */
            nodeSelect?(e: NodeSelectEventArgs): void;

            /** Fires once node unchecked successfully.
             */
            nodeUncheck?(e: NodeUncheckEventArgs): void;

            /** Fires once node unselected successfully.
             */
            nodeUnselect?(e: NodeUnselectEventArgs): void;

            /** Fires when TreeView nodes are loaded successfully
             */
            ready?(e: ReadyEventArgs): void;
        }

        export interface BeforeAddEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the given new node data
             */
            data?: string|any;

            /** returns the parent element, the given new nodes to be appended to the given parent element
             */
            targetParent?: any;

            /** returns the given parent node details
             */
            parentDetails?: any;
        }

        export interface BeforeCollapseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the value of the node
             */
            value?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the child nodes are loaded or not
             */
            isChildLoaded?: boolean;

            /** returns the id of currently clicked node
             */
            id?: string;

            /** returns the parent id of currently clicked node
             */
            parentId?: string;

            /** returns the format asynchronous or synchronous
             */
            async?: boolean;
        }

        export interface BeforeCutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the target element, the given node to be cut
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;

            /** returns the key pressed key code value
             */
            keyCode?: number;
        }

        export interface BeforeDeleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the target element, the given node to be deleted
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;

            /** returns the current parent element of the target node
             */
            parentElement?: any;

            /** returns the parent node values
             */
            parentDetails?: any;

            /** returns the currently removed nodes
             */
            removedNodes?: any[];
        }

        export interface BeforeEditEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;
        }

        export interface BeforeExpandEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the value of the node
             */
            value?: string;

            /** if the child node is ready to expanded state; otherwise, false.
             */
            isChildLoaded?: boolean;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the id of currently clicked node
             */
            id?: string;

            /** returns the parent id of currently clicked node
             */
            parentId?: string;

            /** returns the format asynchronous or synchronous
             */
            async?: boolean;
        }

        export interface BeforeLoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the AJAX settings object
             */
            AjaxOptions?: any;
        }

        export interface BeforePasteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the target element, the given node to be pasted
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;

            /** returns the key pressed key code value
             */
            keyCode?: number;
        }

        export interface BeforeSelectEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the target element, the given node to be selected
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface InlineEditValidationEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the new entered text for the node
             */
            newText?: string;

            /** returns the current node element id
             */
            id?: any;

            /** returns the old node text
             */
            oldText?: string;
        }

        export interface KeyPressEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the value of the node
             */
            value?: string;

            /** returns node path from root element
             */
            path?: string;

            /** returns the key pressed key code value
             */
            keyCode?: number;

            /** it returns when the current node is in expanded state; otherwise, false.
             */
            isExpanded?: boolean;

            /** returns the id of current TreeView node
             */
            id?: string;

            /** returns the parentId of current TreeView node
             */
            parentId?: string;
        }

        export interface LoadErrorEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the AJAX error object
             */
            error?: any;
        }

        export interface LoadSuccessEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the success data from the URL
             */
            data?: any;

            /** returns the target parent element, the data returned from the URL to be appended to the given parent element, else in TreeView
             */
            targetParent?: any;

            /** returns the given parent node details
             */
            parentDetails?: any;
        }

        export interface NodeAddEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the added data, that are given initially
             */
            data?: any;

            /** returns the newly added elements
             */
            nodes?: any;

            /** returns the target parent element of the added element
             */
            parentElement?: any;

            /** returns the given parent node details
             */
            parentDetails?: any;
        }

        export interface NodeCheckEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the value of the node
             */
            value?: string;

            /** returns the id of the current element of the node clicked
             */
            id?: string;

            /** returns the id of the parent element of current element of the node clicked
             */
            parentId?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** it returns true when the node checkbox is checked; otherwise, false.
             */
            isChecked?: boolean;

            /** it returns the currently checked node name
             */
            currentNode?: any[];

            /** it returns the currently checked and its child node details
             */
            currentCheckedNodes?: any[];
        }

        export interface NodeClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the id of currently clicked TreeView node
             */
            id?: string;

            /** returns the parentId of currently clicked TreeView node
             */
            parentId?: string;
        }

        export interface NodeCollapseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the id of the current element of the node clicked
             */
            id?: string;

            /** returns the name of the event
             */
            type?: string;

            /** returns the id of the parent element of current element of the node clicked
             */
            parentId?: string;

            /** returns the value of the node
             */
            value?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the child nodes are loaded or not
             */
            isChildLoaded?: boolean;

            /** returns the format asynchronous or synchronous
             */
            async?: boolean;
        }

        export interface NodeCutEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the current parent element of the cut node
             */
            parentElement?: any;

            /** returns the given parent node details
             */
            parentDetails?: any;

            /** returns the key pressed key code value
             */
            keyCode?: number;
        }

        export interface NodeDeleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the current parent element of the deleted node
             */
            parentElement?: any;

            /** returns the given parent node details
             */
            parentDetails?: any;

            /** returns the currently removed nodes
             */
            removedNodes?: any[];
        }

        export interface NodeDragEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the original drag target
             */
            dragTarget?: any;

            /** returns the current target TreeView node
             */
            target?: any;

            /** returns the current target details
             */
            targetElementData?: any;

            /** returns the current parent element of the target node
             */
            draggedElement?: any;

            /** returns the given parent node details
             */
            draggedElementData?: any;

            /** returns the event object
             */
            event?: any;
        }

        export interface NodeDragStartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the original drag target
             */
            dragTarget?: any;

            /** returns the current dragging parent TreeView node
             */
            parentElement?: any;

            /** returns the current dragging parent TreeView node details
             */
            parentElementData?: any;

            /** returns the current parent element of the dragging node
             */
            target?: any;

            /** returns the given parent node details
             */
            targetElementData?: any;

            /** returns the event object
             */
            event?: any;
        }

        export interface NodeDragStopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the original drop target
             */
            dropTarget?: any;

            /** returns the current dragged TreeView node
             */
            draggedElement?: any;

            /** returns the current dragged TreeView node details
             */
            draggedElementData?: any;

            /** returns the current parent element of the dragged node
             */
            target?: any;

            /** returns the given parent node details
             */
            targetElementData?: any;

            /** returns the drop position such as before, after or over
             */
            position?: string;

            /** if it is true, the parent node will be prevented from auto expanding; otherwise, it work's usually
             */
            preventTargetExpand?: boolean;

            /** returns the event object
             */
            event?: any;
        }

        export interface NodeDroppedEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the original drop target
             */
            dropTarget?: any;

            /** returns the current dropped TreeView node
             */
            droppedElement?: any;

            /** returns the current dropped TreeView node details
             */
            droppedElementData?: any;

            /** returns the current parent element of the dropped node
             */
            target?: any;

            /** returns the given parent node details
             */
            targetElementData?: any;

            /** returns the drop position such as before, after or over
             */
            position?: string;

            /** returns the event object
             */
            event?: any;
        }

        export interface NodeEditEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the id of the element
             */
            id?: string;

            /** returns the oldText of the element
             */
            oldText?: string;

            /** returns the newText of the element
             */
            newText?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the target element, the given node to be cut
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;
        }

        export interface NodeExpandEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the value of the node
             */
            value?: string;

            /** if the child node is ready to expanded state; otherwise, false.
             */
            isChildLoaded?: boolean;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** returns the id of currently clicked node
             */
            id?: string;

            /** returns the parent id of currently clicked node
             */
            parentId?: string;

            /** returns the format asynchronous or synchronous
             */
            async?: boolean;
        }

        export interface NodePasteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the pasted element
             */
            target?: any;

            /** returns the given target node values
             */
            nodeDetails?: any;

            /** returns the key pressed key code value
             */
            keyCode?: number;
        }

        export interface NodeSelectEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the id of the current element of the node clicked
             */
            id?: any;

            /** returns the id of the parent element of current element of the node clicked
             */
            parentId?: any;

            /** returns the current selected nodes index of TreeView
             */
            selectedNodes?: any[];

            /** returns the value of the node
             */
            value?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;
        }

        export interface NodeUncheckEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;

            /** returns the event object
             */
            event?: any;

            /** returns the id of the current element of the node clicked
             */
            id?: any;

            /** returns the id of the parent element of current element of the node clicked
             */
            parentId?: any;

            /** returns the value of the node
             */
            value?: string;

            /** returns the current element of the node clicked
             */
            currentElement?: any;

            /** it returns true when the node checkbox is checked; otherwise, false.
             */
            isChecked?: boolean;

            /** it returns currently unchecked node name
             */
            currentNode?: string;

            /** it returns currently unchecked node and its child node details.
             */
            currentUncheckedNodes?: any[];
        }

        export interface NodeUnselectEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the current element of the node unselected
             */
            currentElement?: any;

            /** returns the id of the current element of the node unselected
             */
            id?: string;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the id of the parent element of current element of the node unselected
             */
            parentId?: string;

            /** returns the current selected nodes index of TreeView
             */
            selectedNodes?: any[];

            /** returns the name of the event
             */
            type?: string;

            /** returns the value of the node
             */
            value?: string;
        }

        export interface ReadyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the TreeView model
             */
            model?: ej.TreeView.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface Fields {

            /** It receives the child level or inner level data source such as Essential DataManager object and JSON object.
             */
            child?: any;

            /** It receives Essential DataManager object and JSON object.
             */
            dataSource?: any;

            /** Specifies the node to be in expanded state.
             */
            expanded?: string;

            /** Its allow us to indicate whether the node has child or not in load on demand
             */
            hasChild?: string;

            /** Specifies the HTML Attributes to &quot;li&quot; item list.
             */
            htmlAttribute?: any;

            /** Specifies the id to TreeView node items list.
             */
            id?: string;

            /** Specifies the image attribute to â€œimgâ€ tag inside items list
             */
            imageAttribute?: any;

            /** Specifies the HTML Attributes to &quot;li&quot; item list.
             */
            imageUrl?: string;

            /** If its true Checkbox node will be checked when rendered with checkbox.
             */
            isChecked?: string;

            /** Specifies the link attribute to â€œaâ€ tag in item list.
             */
            linkAttribute?: any;

            /** Specifies the parent id of the node. The nodes are listed as child nodes of the specified parent node by using its parent id.
             */
            parentId?: string;

            /** It receives query to retrieve data from the table (query is same as SQL).
             */
            query?: any;

            /** Allow us to specify the node to be in selected state
             */
            selected?: string;

            /** Specifies the sprite CSS class to &quot;li&quot; item list.
             */
            spriteCssClass?: string;

            /** It receives the table name to execute query on the corresponding table.
             */
            tableName?: string;

            /** Specifies the text of TreeView node items list.
             */
            text?: string;
        }

        export interface SortSettings {

            /** Enables or disables the sorting option in TreeView control
             * @Default {false}
             */
            allowSorting?: boolean;

            /** Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
             * @Default {ej.sortOrder.Ascending}
             */
            sortOrder?: ej.sortOrder|string;
        }
    }
    enum sortOrder {
        //Enum for Ascending sort order
        Ascending,
        //Enum for Descending sort order
        Descending,
    }

    class Uploadbox extends ej.Widget {
        static fn: Uploadbox;
        constructor(element: JQuery | Element, options?: Uploadbox.Model);
        static Locale: any;
        model: Uploadbox.Model;
        defaults: Uploadbox.Model;

        /** The destroy method destroys the control and brings the control to a pre-init state. All the events of the Upload control is bound by using this._on unbinds automatically.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the Uploadbox control
         * @returns {void}
         */
        disable(): void;

        /** Enables the Uploadbox control
         * @returns {void}
         */
        enable(): void;

        /** Refresh the Uploadbox control
         * @returns {void}
         */
        refresh(): void;

        /** Upload the selected files.
         * @returns {void}
         */
        upload(): void;
    }
    export namespace Uploadbox {

        export interface Model {

            /** Enables the file drag and drop support to the Uploadbox control.
             * @Default {false}
             */
            allowDragAndDrop?: boolean;

            /** Uploadbox supports both synchronous and asynchronous upload. This can be achieved by using the asyncUpload property.
             * @Default {true}
             */
            asyncUpload?: boolean;

            /** Uploadbox supports auto uploading of files after the file selection is done.
             * @Default {false}
             */
            autoUpload?: boolean;

            /** Sets the text for each action button.
             * @Default {{browse: Browse, upload: Upload, cancel: Cancel, close: Close}}
             */
            buttonText?: ButtonText;

            /** Sets the root class for the Uploadbox control theme. This cssClass API helps to use custom skinning option for the Uploadbox button and dialog content.
             */
            cssClass?: string;

            /** Specifies the custom file details in the dialog popup on initialization.
             * @Default {{ title:true, name:true, size:true, status:true, action:true}}
             */
            customFileDetails?: CustomFileDetails;

            /** Specifies the actions for dialog popup while initialization.
             * @Default {{ modal:false, closeOnComplete:false, content:null, drag:true}}
             */
            dialogAction?: DialogAction;

            /** Displays the Uploadbox dialog at the given X and Y positions. X: Dialog sets the left position value. Y: Dialog sets the top position value.
             * @Default {null}
             */
            dialogPosition?: any;

            /** Property for applying the text to the Dialog title and content headers.
             * @Default {{ title: Upload Box, name: Name, size: Size, status: Status}}
             */
            dialogText?: DialogText;

            /** The dropAreaText is displayed when the drag and drop support is enabled in the Uploadbox control.
             * @Default {Drop files or click to upload}
             */
            dropAreaText?: string;

            /** Specifies the dropAreaHeight when the drag and drop support is enabled in the Uploadbox control.
             * @Default {100%}
             */
            dropAreaHeight?: number|string;

            /** Specifies the dropAreaWidth when the drag and drop support is enabled in the Uploadbox control.
             * @Default {100%}
             */
            dropAreaWidth?: number|string;

            /** Based on the property value, Uploadbox is enabled or disabled.
             * @Default {true}
             */
            enabled?: boolean;

            /** Sets the right-to-left direction property for the Uploadbox control.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Only the files with the specified extension is allowed to upload. This is mentioned in the string format.
             */
            extensionsAllow?: string;

            /** Only the files with the specified extension is denied for upload. This is mentioned in the string format.
             */
            extensionsDeny?: string;

            /** Sets the maximum size limit for uploading the file. This is mentioned in the number format.
             * @Default {31457280}
             */
            fileSize?: number;

            /** Sets the height of the browse button.
             * @Default {35px}
             */
            height?: string;

            /** Specifies the list of HTML attributes to be added to uploadbox control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Configures the culture data and sets the culture to the Uploadbox.
             * @Default {en-US}
             */
            locale?: string;

            /** Enables multiple file selection for upload.
             * @Default {true}
             */
            multipleFilesSelection?: boolean;

            /** You can push the file to the Uploadbox in the client-side of the XHR supported browsers alone.
             * @Default {null}
             */
            pushFile?: any;

            /** Specifies the remove action to be performed after the file uploading is completed. Here, mention the server address for removal.
             */
            removeUrl?: string;

            /** Specifies the save action to be performed after the file is pushed for uploading. Here, mention the server address to be saved.
             */
            saveUrl?: string;

            /** Enables the browse button support to the Uploadbox control.
             * @Default {true}
             */
            showBrowseButton?: boolean;

            /** Specifies the file details to be displayed when selected for uploading. This can be done when the showFileDetails is set to true.
             * @Default {true}
             */
            showFileDetails?: boolean;

            /** Specifies the file details to be displayed when selected for uploading. This can be done when the showFileDetails is set to true.
             * @Default {true}
             */
            showRoundedCorner?: boolean;

            /** Sets the name for the Uploadbox control. This API helps to Map the action in code behind to retrieve the files.
             */
            uploadName?: string;

            /** Sets the width of the browse button.
             * @Default {100px}
             */
            width?: string;

            /** Fires when the upload progress beforeSend.
             */
            beforeSend?(e: BeforeSendEventArgs): void;

            /** Fires when the upload progress begins.
             */
            begin?(e: BeginEventArgs): void;

            /** Fires when the upload progress is cancelled.
             */
            cancel?(e: CancelEventArgs): void;

            /** Fires when the file upload progress is completed.
             */
            complete?(e: CompleteEventArgs): void;

            /** Fires when the file upload progress is succeeded.
             */
            success?(e: SuccessEventArgs): void;

            /** Fires when the Uploadbox control is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the Uploadbox control is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires when the Upload process ends in Error.
             */
            error?(e: ErrorEventArgs): void;

            /** Fires when the file is selected for upload successfully.
             */
            fileSelect?(e: FileSelectEventArgs): void;

            /** Fires when the file is uploading.
             */
            inProgress?(e: InProgressEventArgs): void;

            /** Fires when the uploaded file is removed successfully.
             */
            remove?(e: RemoveEventArgs): void;
        }

        export interface BeforeSendEventArgs {

            /** Selected FileList Object.
             */
            files?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Uploadbox model
             */
            model?: any;

            /** XHR-AJAX Object for reference.
             */
            xhr?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface BeginEventArgs {

            /** To pass additional information to the server.
             */
            data?: any;

            /** Selected FileList Object.
             */
            files?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CancelEventArgs {

            /** Canceled FileList Object.
             */
            fileStatus?: any;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CompleteEventArgs {

            /** AJAX event argument for reference.
             */
            e?: any;

            /** Uploaded file list.
             */
            files?: any;

            /** response from the server.
             */
            responseText?: string;

            /** XHR-AJAX Object for reference.
             */
            xhr?: any;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface SuccessEventArgs {

            /** response from the server.
             */
            responseText?: string;

            /** AJAX event argument for reference.
             */
            e?: any;

            /** successfully uploaded files list.
             */
            success?: any;

            /** Uploaded file list.
             */
            files?: any;

            /** XHR-AJAX Object for reference.
             */
            xhr?: any;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ErrorEventArgs {

            /** details about the error information.
             */
            error?: string;

            /** returns the name of the event.
             */
            type?: string;

            /** error event action details.
             */
            action?: string;

            /** returns the file details of the file uploaded
             */
            files?: any;
        }

        export interface FileSelectEventArgs {

            /** returns Selected FileList objects
             */
            files?: any;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface InProgressEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** AJAX event argument for reference.
             */
            e?: any;

            /** returns Selected FileList objects
             */
            files?: any;

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the current progress percentage.
             */
            percentage?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface RemoveEventArgs {

            /** returns the Uploadbox model
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the file details of the file object
             */
            fileStatus?: any;
        }

        export interface ButtonText {

            /** Sets the text for the browse button.
             */
            browse?: string;

            /** Sets the text for the cancel button.
             */
            cancel?: string;

            /** Sets the text for the close button.
             */
            Close?: string;

            /** Sets the text for the Upload button inside the dialog popup.
             */
            upload?: string;
        }

        export interface CustomFileDetails {

            /** Enables the file upload interactions like remove/cancel in File details of the dialog popup.
             */
            action?: boolean;

            /** Enables the name in the File details of the dialog popup.
             */
            name?: boolean;

            /** Enables or disables the File size details of the dialog popup.
             */
            size?: boolean;

            /** Enables or disables the file uploading status visibility in the dialog file details content.
             */
            status?: boolean;

            /** Enables the title in File details for the dialog popup.
             */
            title?: boolean;
        }

        export interface DialogAction {

            /** Once uploaded successfully, the dialog popup closes immediately.
             */
            closeOnComplete?: boolean;

            /** Sets the content container option to the Uploadbox dialog popup.
             */
            content?: string;

            /** Enables the drag option to the dialog popup.
             */
            drag?: boolean;

            /** Enables or disables the Uploadbox dialogâ€™s modal property to the dialog popup.
             */
            modal?: boolean;
        }

        export interface DialogText {

            /** Sets the uploaded fileâ€™s Name (header text) to the Dialog popup.
             */
            name?: string;

            /** Sets the upload file Size (header text) to the dialog popup.
             */
            size?: string;

            /** Sets the upload file Status (header text) to the dialog popup.
             */
            status?: string;

            /** Sets the title text of the dialog popup.
             */
            title?: string;
        }
    }

    class WaitingPopup extends ej.Widget {
        static fn: WaitingPopup;
        constructor(element: JQuery | Element, options?: WaitingPopup.Model);
        static Locale: any;
        model: WaitingPopup.Model;
        defaults: WaitingPopup.Model;

        /** To hide the waiting popup
         * @returns {void}
         */
        hide(): void;

        /** Refreshes the WaitingPopup control by resetting the pop-up panel position and content position
         * @returns {void}
         */
        refresh(): void;

        /** To show the waiting popup
         * @returns {void}
         */
        show(): void;
    }
    export namespace WaitingPopup {

        export interface Model {

            /** Sets the root class for the WaitingPopup control theme
             * @Default {null}
             */
            cssClass?: string;

            /** Specifies the list of HTML attributes to be added to waitingpopup control.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Enables or disables the default loading icon.
             * @Default {true}
             */
            showImage?: boolean;

            /** Enables the visibility of the WaitingPopup control
             * @Default {false}
             */
            showOnInit?: boolean;

            /** Specified a selector for elements, within the container.
             * @Default {null}
             */
            target?: string;

            /** Waitingpopup element append to given container element.
             * @Default {null}
             */
            appendTo?: string;

            /** Loads HTML content inside the popup panel instead of the default icon
             * @Default {null}
             */
            template?: any;

            /** Sets the custom text in the pop-up panel to notify the waiting process
             * @Default {null}
             */
            text?: string;

            /** Fires after Create WaitingPopup successfully
             */
            create?(e: CreateEventArgs): void;

            /** Fires after Destroy WaitingPopup successfully
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface CreateEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the WaitingPopup model
             */
            model?: ej.WaitingPopup.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the WaitingPopup model
             */
            model?: ej.WaitingPopup.Model;

            /** returns the name of the event
             */
            type?: string;
        }
    }

    class Grid extends ej.Widget {
        static fn: Grid;
        constructor(element: JQuery | Element, options?: Grid.Model);
        static Locale: any;
        model: Grid.Model;
        defaults: Grid.Model;

        /** Adds a grid model property which is to be ignored upon exporting.
         * @param {any[]} Pass the array of parameters which need to be ignored on exporting
         * @returns {void}
         */
        addIgnoreOnExport(propertyNames: any[]): void;

        /** Adds a grid model property which is to be ignored upon OnServerToolbarClick.
         * @param {any[]} Pass the array of parameters which need to be ignored on OnServerToolbarClick
         * @returns {void}
         */
        addIgnoreOnToolbarServerClick(propertyNames: any[]): void;

        /** Add a new record in grid control when allowAdding is set as true.Without passing parameters it will add empty row.
         * @param {any[]} Pass the array of added Records
         * @param {any[]} optionalIf we pass serverChange as true, send post to server side for server action.
         * @returns {void}
         */
        addRecord(data?: any[], serverChange?: any[]): void;

        /** Cancel the modified changes in grid control when edit mode is &quot;batch&quot;.
         * @returns {void}
         */
        batchCancel(): void;

        /** Save the modified changes to data source in grid control when edit mode is &quot;batch&quot;.
         * @returns {void}
         */
        batchSave(): void;

        /** Send a cancel request in grid.
         * @returns {void}
         */
        cancelEdit(): void;

        /** Send a cancel request to the edited cell in grid.
         * @returns {void}
         */
        cancelEditCell(): void;

        /** Returns the total page size need to be displayed in grid based on the given container height. This method will also work when the property allowTextWrap as true only when wrap
         * mode is header.
         * @param {number} When passing the container height as integer or percentage, it will returns the page size that need to be displayed for grid.
         * @returns {number}
         */
        calculatePageSizeByParentHeight(containerHeight: number): number;

        /** It is used to change the number of records displayed per page in grid based on the given page size.
         * @param {number} When passing the page size, it will change the number of records displayed per page in grid.
         * @returns {void}
         */
        changePageSize(pageSize: number): void;

        /** It is used to clear all the cell selection.
         * @returns {boolean}
         */
        clearCellSelection(): boolean;

        /** It is used to clear specified cell selection based on the rowIndex and columnIndex provided.
         * @param {number} It is used to pass the row index of the cell
         * @param {number} It is used to pass the column index of the cell.
         * @returns {boolean}
         */
        clearCellSelection(rowIndex: number, columnIndex: number): boolean;

        /** It is used to clear all the row selection or at specific row selection based on the index provided.
         * @param {number} optional If index of the column is specified then it will remove the selection from the particular column else it will clears all of the column selection
         * @returns {boolean}
         */
        clearColumnSelection(index?: number): boolean;

        /** It is used to clear all the filtering done.
         * @param {string}  If field of the column is specified then it will clear the  particular filtering column
         * @returns {void}
         */
        clearFiltering(field: string): void;

        /** Clear the searching from the grid
         * @returns {void}
         */
        clearSearching(): void;

        /** Clear all the row selection or at specific row selection based on the index provided
         * @param {number} optional If index of the row is specified then it will remove the selection from the particular row else it will clears all of the row selection
         * @returns {boolean}
         */
        clearSelection(index?: number): boolean;

        /** Clear the sorting from columns in the grid
         * @returns {void}
         */
        clearSorting(): void;

        /** Collapse all the group caption rows in grid
         * @returns {void}
         */
        collapseAll(): void;

        /** Collapse the group drop area in grid
         * @returns {void}
         */
        collapseGroupDropArea(): void;

        /** Add or remove columns in grid column collections
         * @param {any[]|string} Pass array of columns or string of field name to add/remove the column in grid
         * @param {string} optional Pass add/remove action to be performed. By default "add" action will perform
         * @returns {void}
         */
        columns(columnDetails: any[]|string, action?: string): void;

        /** Refresh the grid with new data source
         * @param {any} Pass new data source to the grid
         * @param {boolean} optional When templateRefresh is set true, both header and contents get refreshed
         * @returns {void}
         */
        dataSource(datasource: any, templateRefresh?: boolean): void;

        /** Delete a record in grid control when allowDeleting is set as true
         * @param {string} Pass the primary key field Name of the column
         * @param {any} Pass the JSON data of record need to be delete.
         * @returns {void}
         */
        deleteRecord(fieldName: string, data: any): void;

        /** Delete the row based on the given tr element in grid.
         * @param {JQuery} Pass the tr element in grid content to get its row index
         * @returns {HTMLElement}
         */
        deleteRow($tr: JQuery): HTMLElement;

        /** Destroy the grid widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Edit a particular cell based on the row index and field name provided in &quot;batch&quot; edit mode.
         * @param {number} Pass row index to edit particular cell
         * @param {string} Pass the field name of the column to perform batch edit
         * @returns {void}
         */
        editCell(index: number, fieldName: string): void;

        /** It returns a value and if the input field values of edit form is not based on the validation rules then it will show the validation message.
         * @returns {boolean}
         */
        editFormValidate(): boolean;

        /** Send a save request in grid.
         * @returns {void}
         */
        endEdit(): void;

        /** Expand all the group caption rows in grid.
         * @returns {void}
         */
        expandAll(): void;

        /** Expand or collapse the row based on the row state in grid
         * @param {JQuery} Pass the target object to expand/collapse the row based on its row state
         * @returns {void}
         */
        expandCollapse($target: JQuery): void;

        /** Expand the group drop area in grid.
         * @returns {void}
         */
        expandGroupDropArea(): void;

        /** Export the grid content to excel, word or PDF document.
         * @param {string} Pass the controller action name corresponding to exporting
         * @param {string} optionalASP server event name corresponding to exporting
         * @param {boolean} optionalPass the multiple exporting value as true/false
         * @param {any[]} optionalPass the array of the gridIds to be filtered
         * @returns {void}
         */
        export(action?: string, serverEvent?: string, multipleExport?: boolean, gridIds?: any[]): void;

        /** Send a filtering request to filter one column in grid.
         * @param {any[]|string} Pass the field name of the column
         * @param {string} string/integer/dateTime operator
         * @param {string} Pass the value to be filtered in a column
         * @param {string} Pass the predicate as and/or
         * @param {boolean} optional Pass the match case value as true/false
         * @param {any} optionalactualFilterValue denote the filter object of current filtered columns.Pass the value to filtered in a column
         * @returns {void}
         */
        filterColumn(fieldName: any[]|string, filterOperator: string, filterValue: string, predicate: string, matchcase?: boolean, actualFilterValue?: any): void;

        /** Send a filtering request to filter single or multiple column in grid.
         * @param {any[]} Pass array of filterColumn query for performing filter operation
         * @returns {void}
         */
        filterColumn(filterQueries: any[]): void;

        /** Get the batch changes of edit, delete and add operations of grid.
         * @returns {any}
         */
        getBatchChanges(): any;

        /** Get the browser details
         * @returns {any}
         */
        getBrowserDetails(): any;

        /** Get the column details based on the given field in grid
         * @param {string} Pass the field name of the column to get the corresponding column object
         * @returns {any}
         */
        getColumnByField(fieldName: string): any;

        /** Get the column details based on the given header text in grid.
         * @param {string} Pass the header text of the column to get the corresponding column object
         * @returns {any}
         */
        getColumnByHeaderText(headerText: string): any;

        /** Get the column details based on the given column index in grid
         * @param {number} Pass the index of the column to get the corresponding column object
         * @returns {any}
         */
        getColumnByIndex(columnIndex: number): any;

        /** Get the list of field names from column collection in grid.
         * @returns {any[]}
         */
        getColumnFieldNames(): any[];

        /** Get the column index of the given field in grid.
         * @param {string} Pass the field name of the column to get the corresponding column index
         * @returns {number}
         */
        getColumnIndexByField(fieldName: string): number;

        /** Get the column index of the given headerText of column in grid.
         * @param {string} Pass the headerText of the column to get that column index
         * @param {string} optionalOptional Pass the field name of the column.
         * @returns {number}
         */
        getColumnIndexByHeaderText(headerText: string, field?: string): number;

        /** Get the content div element of grid.
         * @returns {HTMLElement}
         */
        getContent(): HTMLElement;

        /** Get the content table element of grid
         * @returns {HTMLTableElement[]}
         */
        getContentTable(): HTMLTableElement[];

        /** Get the data of currently edited cell value in &quot;batch&quot; edit mode
         * @returns {any}
         */
        getCurrentEditCellData(): any;

        /** Get the current page index in grid pager.
         * @returns {number}
         */
        getCurrentIndex(): number;

        /** Get the current page data source of grid.
         * @returns {any[]}
         */
        getCurrentViewData(): any[];

        /** Get the data of given row index in grid.
         * @returns {any}
         */
        getDataByIndex(): any;

        /** Get the column field name from the given header text in grid.
         * @param {string} Pass header text of the column to get its corresponding field name
         * @returns {string}
         */
        getFieldNameByHeaderText(headerText: string): string;

        /** Get the filter bar of grid
         * @returns {HTMLElement}
         */
        getFilterBar(): HTMLElement;

        /** Get the records filtered or searched in Grid
         * @returns {any[]}
         */
        getFilteredRecords(): any[];

        /** Get the footer content of grid.
         * @returns {HTMLElement}
         */
        getFooterContent(): HTMLElement;

        /** Get the footer table element of grid.
         * @returns {HTMLElement}
         */
        getFooterTable(): HTMLElement;

        /** Get the header content div element of grid.
         * @returns {HTMLElement}
         */
        getHeaderContent(): HTMLElement;

        /** Get the header table element of grid
         * @returns {HTMLElement}
         */
        getHeaderTable(): HTMLElement;

        /** Get the column header text from the given field name in grid.
         * @param {string} Pass field name of the column to get its corresponding header text
         * @returns {string}
         */
        getHeaderTextByFieldName(field: string): string;

        /** Get the names of all the hidden column collections in grid.
         * @returns {any[]}
         */
        getHiddenColumnNames(): any[];

        /** Get the row index based on the given tr element in grid.
         * @param {JQuery} Pass the tr element in grid content to get its row index
         * @returns {number}
         */
        getIndexByRow($tr: JQuery): number;

        /** Get the pager of grid.
         * @returns {HTMLElement}
         */
        getPager(): HTMLElement;

        /** Get the names of primary key columns in Grid
         * @returns {any[]}
         */
        getPrimaryKeyFieldNames(): any[];

        /** Get the rows(tr element) from the given from and to row index in grid
         * @param {number} Pass the from index from which the rows to be returned
         * @param {number} Pass the to index to which the rows to be returned
         * @returns {HTMLElement}
         */
        getRowByIndex(from: number, to: number): HTMLElement;

        /** Get the row height of grid.
         * @returns {number}
         */
        getRowHeight(): number;

        /** Get the rows(tr element)of grid which is displayed in the current page.
         * @returns {HTMLElement}
         */
        getRows(): HTMLElement;

        /** Get the scroller object of grid.
         * @returns {ej.Scroller}
         */
        getScrollObject(): ej.Scroller;

        /** Get the selected records details in grid.
         * @returns {any[]}
         */
        getSelectedRecords(): any[];

        /** Get the selected row element details in grid.
         * @returns {any[]}
         */
        getSelectedRows(): any[];

        /** It accepts the string value and returns the field and sorted direction of the column in grid.
         * @param {string} Pass the field of the column to get the sorted direction of the corresponding column in Grid.
         * @returns {number}
         */
        getsortColumnByField(field: string): number;

        /** Get the calculated summary values of JSON data passed to it
         * @param {any} Pass Summary Column details
         * @param {any} Pass JSON Array for which its field values to be calculated
         * @returns {number}
         */
        getSummaryValues(summaryCol: any, summaryData: any): number;

        /** Get the names of all the visible column collections in grid
         * @returns {any[]}
         */
        getVisibleColumnNames(): any[];

        /** Send a paging request to specified page in grid
         * @param {number} Pass the page index to perform paging at specified page index
         * @returns {void}
         */
        gotoPage(pageIndex: number): void;

        /** Send a column grouping request in grid.
         * @param {string} Pass the field Name of the column to be grouped in grid control
         * @returns {void}
         */
        groupColumn(fieldName: string): void;

        /** Hide columns from the grid based on the header text
         * @param {any[]|string} you can pass either array of header text of various columns or a header text of a column to hide
         * @returns {void}
         */
        hideColumns(headerText: any[]|string): void;

        /** Print the grid control
         * @returns {void}
         */
        print(): void;

        /** It is used to refresh and reset the changes made in &quot;batch&quot; edit mode
         * @returns {void}
         */
        refreshBatchEditChanges(): void;

        /** It is used to refresh the grid header.
         * @returns {void}
         */
        refreshHeader(): void;

        /** Refresh the grid contents. The template refreshment is based on the argument passed along with this method
         * @param {boolean} optional When templateRefresh is set true, template and grid contents both are refreshed in grid else only grid content is refreshed
         * @returns {void}
         */
        refreshContent(templateRefresh?: boolean): void;

        /** Refresh the grid contents with updated server Data, using XMLHttpRequest. Url Path should be provided in Grid datasource otherwise it refreshes with local data without
         * XMLHttpRequest.
         * @param {any} optionalData to the server
         * @returns {void}
         */
        refreshData(additionalParameters?: any): void;

        /** Refresh the template of the grid
         * @returns {void}
         */
        refreshTemplate(): void;

        /** Refresh the toolbar items in grid.
         * @returns {void}
         */
        refreshToolbar(): void;

        /** Remove a column or collection of columns from a sorted column collections in grid.
         * @param {any[]|string} Pass array of field names of the columns to remove a collection of sorted columns or pass a string of field name to remove a column from sorted column
         * collections
         * @returns {void}
         */
        removeSortedColumns(fieldName: any[]|string): void;

        /** Creates a grid control
         * @returns {void}
         */
        render(): void;

        /** Re-order the column in grid
         * @param {string} Pass the from field name of the column needs to be changed
         * @param {string} Pass the to field name of the column needs to be changed
         * @returns {void}
         */
        reorderColumns(fromFieldName: string, toFieldName: string): void;

        /** Re-order the row in grid
         * @param {any[]} Pass the indexes of the rows needs to reorder.
         * @param {number} Pass the index of a row where to be reordered.
         * @returns {void}
         */
        reorderRows(indexes: any[], toIndex: number): void;

        /** Reset the model collections like pageSettings, groupSettings, filterSettings, sortSettings and summaryRows.
         * @returns {void}
         */
        resetModelCollections(): void;

        /** Resize the columns by giving column name and width for the corresponding one.
         * @param {string} Pass the column name that needs to be changed
         * @param {string} Pass the width to resize the particular columns
         * @returns {void}
         */
        resizeColumns(column: string, width: string): void;

        /** Resolves row height issue when unbound column is used with FrozenColumn
         * @returns {void}
         */
        rowHeightRefresh(): void;

        /** We can prevent the client side cellSave event triggering by passing the preventSaveEvent argument as true.Without argument it will save the particular edited grid cell.
         * @param {boolean} optionalIf we pass preventSaveEvent as true, it prevents the client side cellSave event triggering
         * @returns {void}
         */
        saveCell(preventSaveEvent?: boolean): void;

        /** Set dimension for grid with corresponding to grid parent.
         * @param {number} Pass the height of the grid container
         * @param {number} Pass the width of the grid container
         * @returns {void}
         */
        setDimension(height: number, width: number): void;

        /** Send a request to grid to refresh the width set to columns
         * @returns {void}
         */
        setWidthToColumns(): void;

        /** Send a search request to grid with specified string passed in it
         * @param {string} Pass the string to search in Grid records
         * @returns {void}
         */
        search(searchString: string): void;

        /** Select cells in grid.
         * @param {any} It is used to set the starting index of row and indexes of cells for that corresponding row for selecting cells.
         * @returns {void}
         */
        selectCells(rowCellIndexes: any): void;

        /** Select columns in grid.
         * @param {number} It is used to set the starting index of column for selecting columns.
         * @returns {void}
         */
        selectColumns(fromIndex: number): void;

        /** Select the specified columns in grid based on Index provided.
         * @param {number} It is used to set the starting index of column for selecting columns.
         * @param {number} optionalIt is used to set the ending index of column for selecting columns.
         * @returns {boolean}
         */
        selectColumns(columnIndex: number, toIndex?: number): boolean;

        /** Select rows in grid.
         * @param {number} It is used to set the starting index of row for selecting rows.
         * @param {number} It is used to set the ending index of row for selecting rows.
         * @returns {void}
         */
        selectRows(fromIndex: number, toIndex: number): void;

        /** Select specified rows in grid based on Index provided.
         * @param {any[]|number} It is used to set the starting index of row for selecting rows.
         * @param {number} optionalIt is used to set the ending index of row for selecting rows.
         * @param {any} optionalTarget element which is clicked.
         * @returns {void}
         */
        selectRows(from: any[]|number, to: number, target?: any): void;

        /** Select rows in grid.
         * @param {any[]} Pass array of rowIndexes for selecting rows
         * @returns {void}
         */
        selectRows(rowIndexes: any[]): void;

        /** Used to update a particular cell value.
         * @returns {void}
         */
        setCellText(): void;

        /** Used to update a particular cell value based on specified row Index and the fieldName.
         * @param {number} It is used to set the index for selecting the row.
         * @param {string} It is used to set the field name for selecting column.
         * @param {any} It is used to set the value for the selected cell.
         * @returns {void}
         */
        setCellValue(Index: number, fieldName: string, value: any): void;

        /** It sets the default data to the column in grid during adding record in batch edit mode.
         * @returns {void}
         */
        setDefaultData(): void;

        /** The grid rows has to be rendered as detail view in mobile mode based on given value.
         * @param {number} It is used to render grid rows as details view in mobile mode.
         * @returns {void}
         */
        setPhoneModeMaxWidth(Index: number): void;

        /** Set validation to edit form in the grid.
         * @returns {void}
         */
        setValidation(): void;

        /** Set validation to a particular input field in a edit form dynamically.
         * @param {string} Specify the field name of the column to set validation rules
         * @param {any} Specify the validation rules for the field
         * @returns {void}
         */
        setValidationToField(fieldName: string, rules: any): void;

        /** Show columns in the grid based on the header text
         * @param {any[]|string} you can pass either array of header text of various columns or a header text of a column to show
         * @returns {void}
         */
        showColumns(headerText: any[]|string): void;

        /** Send a sorting request in grid.
         * @param {string} Pass the field name of the column as columnName for which sorting have to be performed
         * @param {string} optional Pass the sort direction ascending/descending by which the column have to be sort. By default it is sorting in an ascending order
         * @returns {void}
         */
        sortColumn(columnName: string, sortingDirection?: string): void;

        /** Send an edit record request in grid
         * @param {JQuery} Pass the tr- selected row element to be edited in grid
         * @returns {void}
         */
        startEdit($tr: JQuery): void;

        /** Un-group a column from grouped columns collection in grid
         * @param {string} Pass the field Name of the column to be ungrouped from grouped column collection
         * @returns {void}
         */
        ungroupColumn(fieldName: string): void;

        /** Update a edited record in grid control when allowEditing is set as true.
         * @param {string} Pass the primary key field Name of the column
         * @param {any[]} Pass the edited JSON data of record need to be update.
         * @returns {void}
         */
        updateRecord(fieldName: string, data: any[]): void;

        /** It adapts grid to its parent element or to the browsers window.
         * @returns {void}
         */
        windowonresize(): void;
    }
    export namespace Grid {

        export interface Model {

            /** Gets or sets a value that indicates whether to customizing cell based on our needs.
             * @Default {false}
             */
            allowCellMerging?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic grouping behavior. Grouping can be done by drag on drop desired columns to gridâ€™s GroupDropArea. This can be
             * further customized through â€œgroupSettingsâ€ property.
             * @Default {false}
             */
            allowGrouping?: boolean;

            /** Gets or sets a value that indicates whether to enable keyboard support for performing grid actions. selectionType â€“ Gets or sets a value that indicates whether to enable single
             * row or multiple rows selection behavior in grid. Multiple selection can be done through by holding CTRL and clicking the grid rows
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic filtering behavior on grid. Filtering can be used to limit the records displayed using required criteria and this can
             * be further customized through â€œfilterSettingsâ€ property
             * @Default {false}
             */
            allowFiltering?: boolean;

            /** Gets or sets a value that indicates whether to enable the dynamic sorting behavior on grid data. Sorting can be done through clicking on particular column header.
             * @Default {false}
             */
            allowSorting?: boolean;

            /** Gets or sets a value that indicates whether to enable multi columns sorting behavior in grid. Sort multiple columns by holding CTRL and click on the corresponding column header.
             * @Default {false}
             */
            allowMultiSorting?: boolean;

            /** This specifies the grid to show the paginated data. Also enables pager control at the bottom of grid for dynamic navigation through data source. Paging can be further customized
             * through â€œpageSettingsâ€ property.
             * @Default {false}
             */
            allowPaging?: boolean;

            /** Gets or sets a value that indicates whether to enable the columns reordering behavior in the grid. Reordering can be done through by drag and drop the particular column from one
             * index to another index within the grid.
             * @Default {false}
             */
            allowReordering?: boolean;

            /** Gets or sets a value that indicates whether the column is non resizable. Column width is set automatically based on the content or header text which is large.
             * @Default {false}
             */
            allowResizeToFit?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic resizable of columns. Resize the width of the columns by simply click and move the particular column header line
             * @Default {false}
             */
            allowResizing?: boolean;

            /** Gets or sets a value that indicates whether to enable the rows reordering in Grid and drag &amp; drop rows between multiple Grid.
             * @Default {false}
             */
            allowRowDragAndDrop?: boolean;

            /** Gets or sets a value that indicates whether to enable the scrollbar in the grid and view the records by scroll through the grid manually
             * @Default {false}
             */
            allowScrolling?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic searching behavior in grid. Currently search box can be enabled through â€œtoolbarSettingsâ€
             * @Default {false}
             */
            allowSearching?: boolean;

            /** Gets or sets a value that indicates whether user can select rows on grid. On enabling feature, selected row will be highlighted.
             * @Default {true}
             */
            allowSelection?: boolean;

            /** Gets or sets a value that indicates whether the Content will wrap to the next line if the content exceeds the boundary of the Column Cells.
             * @Default {false}
             */
            allowTextWrap?: boolean;

            /** Gets or sets a value that indicates whether to enable the multiple exporting behavior on grid data.
             * @Default {false}
             */
            allowMultipleExporting?: boolean;

            /** Gets or sets a value that indicates to define common width for all the columns in the grid.
             */
            commonWidth?: number;

            /** Gets or sets a value that indicates to enable the visibility of the grid lines.
             * @Default {ej.Grid.GridLines.Both}
             */
            gridLines?: ej.Grid.GridLines|string;

            /** This specifies the grid to add the grid control inside the grid row of the parent with expand/collapse options
             * @Default {null}
             */
            childGrid?: any;

            /** Used to enable or disable static width settings for column. If the columnLayout is set as fixed, then column width will be static.
             * @Default {ej.Grid.ColumnLayout.Auto}
             */
            columnLayout?: ej.Grid.ColumnLayout|string;

            /** Gets or sets an object that indicates to render the grid with specified columns
             * @Default {[]}
             */
            columns?: Column[];

            /** Gets or sets an object that indicates whether to customize the context menu behavior of the grid.
             */
            contextMenuSettings?: ContextMenuSettings;

            /** Gets or sets a value that indicates to render the grid with custom theme.
             */
            cssClass?: string;

            /** Gets or sets the data to render the grid with records
             * @Default {null}
             */
            dataSource?: any;

            /** Default Value:
             * @Default {null}
             */
            detailsTemplate?: string;

            /** Gets or sets an object that indicates whether to customize the editing behavior of the grid.
             */
            editSettings?: EditSettings;

            /** Gets or sets a value that indicates whether to enable the alternative rows differentiation in the grid records based on corresponding theme.
             * @Default {true}
             */
            enableAltRow?: boolean;

            /** Gets or sets a value that indicates whether to enable the save action in the grid through row selection
             * @Default {true}
             */
            enableAutoSaveOnSelectionChange?: boolean;

            /** Gets or sets a value that indicates whether to enable mouse over effect on the corresponding column header cell of the grid
             * @Default {false}
             */
            enableHeaderHover?: boolean;

            /** Gets or sets a value that indicates whether to persist the grid model state in page using applicable medium i.e., HTML5 localStorage or cookies
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Gets or sets a value that indicates whether the grid rows has to be rendered as detail view in mobile mode
             * @Default {false}
             */
            enableResponsiveRow?: boolean;

            /** Gets or sets a value that indicates whether to enable mouse over effect on corresponding grid row.
             * @Default {true}
             */
            enableRowHover?: boolean;

            /** Align content in the grid control from right to left by setting the property as true.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** To Disable the mouse swipe property as false.
             * @Default {true}
             */
            enableTouch?: boolean;

            /** It sets a value that indicates whether to enable toolbar items, when allowEditing, allowAdding and allowDeleting property set as false in the grid.
             * @Default {false}
             */
            enableToolbarItems?: boolean;

            /** Act as mapper for the excel exporting URL.
             * @Default {ExportToExcel}
             */
            exportToExcelAction?: string;

            /** Act as mapper for the PDF exporting URL.
             * @Default {ExportToPdf}
             */
            exportToPdfAction?: string;

            /** Act as mapper for the Word exporting URL.
             * @Default {ExportToWord}
             */
            exportToWordAction?: string;

            /** Gets or sets an object that indicates whether to customize the filtering behavior of the grid
             */
            filterSettings?: FilterSettings;

            /** Gets or sets an object that indicates whether to customize the grouping behavior of the grid.
             */
            groupSettings?: GroupSettings;

            /** Gets or sets a value that indicates whether the grid design has be to made responsive.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** This specifies to change the key in keyboard interaction to grid control
             * @Default {null}
             */
            keySettings?: any;

            /** Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data i.e. in a language and culture specific to
             * a particular country or region.
             * @Default {en-US}
             */
            locale?: string;

            /** Gets or sets a value that indicates whether to set the minimum width of the responsive grid while isResponsive property is true and enableResponsiveRow property is set as false.
             * @Default {0}
             */
            minWidth?: number;

            /** Gets or sets an object that indicates whether to modify the pager default configuration.
             */
            pageSettings?: PageSettings;

            /** Query the dataSource from the table for Grid.
             * @Default {null}
             */
            query?: any;

            /** Gets or sets an object that indicates whether to modify the resizing behavior.
             */
            resizeSettings?: ResizeSettings;

            /** Gets or sets a value that indicates to render the grid with template rows. The template row must be a table row. That table row must have the JavaScript render binding format
             * ({{:columnName}}) then the grid data source binds the data to the corresponding table row of the template.
             * @Default {null}
             */
            rowTemplate?: string;

            /** Gets or sets an object that indicates whether to customize the drag and drop behavior of the grid rows
             */
            rowDropSettings?: RowDropSettings;

            /** Gets or sets an object that indicates whether to customize the searching behavior of the grid
             */
            searchSettings?: SearchSettings;

            /** Gets a value that display the array of selected records in the Grid.
             * @Default {null}
             */
            selectedRecords?: any[];

            /** Gets or sets a value that indicates to select the row while initializing the grid
             * @Default {-1}
             */
            selectedRowIndex?: number;

            /** Gets or sets a value that indicates the selected rows in grid
             * @Default {[]}
             */
            selectedRowIndices?: any[];

            /** This property is used to configure the selection behavior of the grid.
             */
            selectionSettings?: SelectionSettings;

            /** The row selection behavior of grid. Accepting types are &quot;single&quot; and &quot;multiple&quot;.
             * @Default {ej.Grid.SelectionType.Single}
             */
            selectionType?: ej.Grid.SelectionType|string;

            /** Gets or sets an object that indicates whether to customize the scrolling behavior of the grid.
             */
            scrollSettings?: ScrollSettings;

            /** Default Value:
             * @Default {false}
             */
            showColumnChooser?: boolean;

            /** Gets or sets a value that indicates stacked header should be shown on grid layout when the property â€œstackedHeaderRowsâ€ is set.
             * @Default {false}
             */
            showStackedHeader?: boolean;

            /** Gets or sets a value that indicates summary rows should be shown on grid layout when the property â€œsummaryRowsâ€ is set
             * @Default {false}
             */
            showSummary?: boolean;

            /** Gets or sets a value that indicates whether to customize the sorting behavior of the grid.
             */
            sortSettings?: SortSettings;

            /** Gets or sets an object that indicates to managing the collection of stacked header rows for the grid.
             * @Default {[]}
             */
            stackedHeaderRows?: StackedHeaderRow[];

            /** Gets or sets an object that indicates to managing the collection of summary rows for the grid.
             * @Default {[]}
             */
            summaryRows?: SummaryRow[];

            /** Gets or sets an object that indicates whether to auto wrap the grid header or content or both
             */
            textWrapSettings?: TextWrapSettings;

            /** Gets or sets an object that indicates whether to enable the toolbar in the grid and add toolbar items
             */
            toolbarSettings?: ToolbarSettings;

            /** Triggered for every grid action before its starts.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggered for every grid action success event.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggered for every grid action server failure event.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Triggered when record batch add.
             */
            batchAdd?(e: BatchAddEventArgs): void;

            /** Triggered when record batch delete.
             */
            batchDelete?(e: BatchDeleteEventArgs): void;

            /** Triggered before the batch add.
             */
            beforeBatchAdd?(e: BeforeBatchAddEventArgs): void;

            /** Triggered before the batch delete.
             */
            beforeBatchDelete?(e: BeforeBatchDeleteEventArgs): void;

            /** Triggered before the batch save.
             */
            beforeBatchSave?(e: BeforeBatchSaveEventArgs): void;

            /** Triggered before the print.
             */
            beforePrint?(e: BeforePrintEventArgs): void;

            /** Triggered before row drop in the grid
             */
            beforeRowDrop?(e: BeforeRowDropEventArgs): void;

            /** Triggered before the record is going to be edited.
             */
            beginEdit?(e: BeginEditEventArgs): void;

            /** Triggered when record cell edit.
             */
            cellEdit?(e: CellEditEventArgs): void;

            /** Triggered when record cell save.
             */
            cellSave?(e: CellSaveEventArgs): void;

            /** Triggered after the cell is selected.
             */
            cellSelected?(e: CellSelectedEventArgs): void;

            /** Triggered before the cell is going to be selected.
             */
            cellSelecting?(e: CellSelectingEventArgs): void;

            /** Triggered after the cell is deselected.
             */
            cellDeselected?(e: CellDeselectedEventArgs): void;

            /** Triggered before the cell is going to be deselected.
             */
            cellDeselecting?(e: CellDeselectingEventArgs): void;

            /** Triggered when the column is being dragged.
             */
            columnDrag?(e: ColumnDragEventArgs): void;

            /** Triggered when column dragging begins.
             */
            columnDragStart?(e: ColumnDragStartEventArgs): void;

            /** Triggered when the column is dropped.
             */
            columnDrop?(e: ColumnDropEventArgs): void;

            /** Triggered after the column is selected.
             */
            columnSelected?(e: ColumnSelectedEventArgs): void;

            /** Triggered before the column is going to be selected.
             */
            columnSelecting?(e: ColumnSelectingEventArgs): void;

            /** Triggered after the column is deselected.
             */
            columnDeselected?(e: ColumnDeselectedEventArgs): void;

            /** Triggered before the column is going to be deselected.
             */
            columnDeselecting?(e: ColumnDeselectingEventArgs): void;

            /** Triggered when context menu item is clicked
             */
            contextClick?(e: ContextClickEventArgs): void;

            /** Triggered before the context menu is opened.
             */
            contextOpen?(e: ContextOpenEventArgs): void;

            /** Triggered when the grid is rendered completely.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered when the grid is bound with data during initial rendering.
             */
            dataBound?(e: DataBoundEventArgs): void;

            /** Triggered when grid going to destroy.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered when detail template row is clicked to collapse.
             */
            detailsCollapse?(e: DetailsCollapseEventArgs): void;

            /** Triggered detail template row is initialized.
             */
            detailsDataBound?(e: DetailsDataBoundEventArgs): void;

            /** Triggered when detail template row is clicked to expand.
             */
            detailsExpand?(e: DetailsExpandEventArgs): void;

            /** Triggered after the record is added.
             */
            endAdd?(e: EndAddEventArgs): void;

            /** Triggered after the record is deleted.
             */
            endDelete?(e: EndDeleteEventArgs): void;

            /** Triggered after the record is edited.
             */
            endEdit?(e: EndEditEventArgs): void;

            /** Triggered initial load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggered every time a request is made to access particular header cell information, element and data.
             */
            mergeHeaderCellInfo?(e: MergeHeaderCellInfoEventArgs): void;

            /** Triggered every time a request is made to access particular cell information, element and data.
             */
            mergeCellInfo?(e: MergeCellInfoEventArgs): void;

            /** Triggered every time a request is made to access particular cell information, element and data.
             */
            queryCellInfo?(e: QueryCellInfoEventArgs): void;

            /** Triggered when record is clicked.
             */
            recordClick?(e: RecordClickEventArgs): void;

            /** Triggered when record is double clicked.
             */
            recordDoubleClick?(e: RecordDoubleClickEventArgs): void;

            /** Triggered after column resized.
             */
            resized?(e: ResizedEventArgs): void;

            /** Triggered when column resize end.
             */
            resizeEnd?(e: ResizeEndEventArgs): void;

            /** Triggered when column resize start.
             */
            resizeStart?(e: ResizeStartEventArgs): void;

            /** Triggered when right clicked on grid element.
             */
            rightClick?(e: RightClickEventArgs): void;

            /** Triggered every time a request is made to access row information, element and data.
             */
            rowDataBound?(e: RowDataBoundEventArgs): void;

            /** Triggered after the row is selected.
             */
            rowSelected?(e: RowSelectedEventArgs): void;

            /** Triggered before the row is going to be selected.
             */
            rowSelecting?(e: RowSelectingEventArgs): void;

            /** Triggered after the row is deselected.
             */
            rowDeselected?(e: RowDeselectedEventArgs): void;

            /** Triggered before the row is going to be deselected.
             */
            rowDeselecting?(e: RowDeselectingEventArgs): void;

            /** Triggered when the row is being dragged.
             */
            rowDrag?(e: RowDragEventArgs): void;

            /** Triggered when row dragging begins.
             */
            rowDragStart?(e: RowDragStartEventArgs): void;

            /** Triggered when the row is dropped.
             */
            rowDrop?(e: RowDropEventArgs): void;

            /** Triggered while hover the grid row.
             */
            rowHover?(e: RowHoverEventArgs): void;

            /** Triggered when refresh the template column elements in the Grid.
             */
            templateRefresh?(e: TemplateRefreshEventArgs): void;

            /** Triggered when toolbar item is clicked in grid.
             */
            toolbarClick?(e: ToolbarClickEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current selected page number.
             */
            currentPage?: number;

            /** Returns the previous selected page number.
             */
            previousPage?: number;

            /** Returns the end row index of that current page.
             */
            endIndex?: number;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the start row index of that current page.
             */
            startIndex?: number;

            /** Returns the current grouped column field name.
             */
            columnName?: string;

            /** Returns the column sort direction.
             */
            columnSortDirection?: string;

            /** Returns current edited row.
             */
            row?: any;

            /** Returns the current action event type.
             */
            originalEventType?: string;

            /** Returns primary key.
             */
            primaryKey?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns the edited row index.
             */
            rowIndex?: number;

            /** Returns the record object (JSON).
             */
            data?: any;

            /** Returns the record object (JSON).
             */
            rowData?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns the selected row index.
             */
            selectedRow?: number;

            /** Returns selected row for delete.
             */
            tr?: any;

            /** Returns current filtering column field name.
             */
            currentFilteringColumn?: any;

            /** Returns current filtering object.
             */
            currentFilterObject?: any;

            /** Returns filter details.
             */
            filterCollection?: any;

            /** Returns type of the column like number, string and so on.
             */
            columnType?: string;

            /** Returns the excel filter model.
             */
            filtermodel?: any;

            /** Returns the dataSource.
             */
            dataSource?: any;

            /** Returns the query manager.
             */
            query?: any;

            /** Returns the customfilter option value.
             */
            isCustomFilter?: boolean;
        }

        export interface ActionCompleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current selected page number.
             */
            currentPage?: number;

            /** Returns the previous selected page number.
             */
            previousPage?: number;

            /** Returns the end row index of that current page.
             */
            endIndex?: number;

            /** Returns current action event type.
             */
            originalEventType?: string;

            /** Returns the start row index of the current page.
             */
            startIndex?: number;

            /** Returns grid element.
             */
            target?: any;

            /** Returns the current sorted column field name.
             */
            columnName?: string;

            /** Returns the column sort direction.
             */
            columnSortDirection?: string;

            /** Returns current edited row.
             */
            row?: any;

            /** Returns primary key.
             */
            primaryKey?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns the edited row index.
             */
            rowIndex?: number;

            /** Returns the record object (JSON).
             */
            data?: any;

            /** Returns the record object (JSON).
             */
            rowData?: any;

            /** Returns the selectedRow index.
             */
            selectedRow?: number;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns selected row for delete.
             */
            tr?: any;

            /** Returns current filtering column field name.
             */
            currentFilteringColumn?: string;

            /** Returns current filtering object.
             */
            currentFilterObject?: any;

            /** Returns filter details.
             */
            filterCollection?: any;

            /** Returns the dataSource.
             */
            dataSource?: any;

            /** Returns the excel filter model.
             */
            filtermodel?: any;

            /** Returns type of the column like number, string and so on.
             */
            columnType?: string;

            /** Returns the customfilter option value.
             */
            isCustomFilter?: boolean;
        }

        export interface ActionFailureEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the error return by server.
             */
            error?: any;

            /** Returns the current selected page number.
             */
            currentPage?: number;

            /** Returns the previous selected page number.
             */
            previousPage?: number;

            /** Returns the end row index of that current page.
             */
            endIndex?: number;

            /** Returns current action event type.
             */
            originalEventType?: string;

            /** Returns the start row index of the current page.
             */
            startIndex?: number;

            /** Returns grid element.
             */
            target?: any;

            /** Returns the current sorted column field name.
             */
            columnName?: string;

            /** Returns the column sort direction.
             */
            columnSortDirection?: string;

            /** Returns current edited row.
             */
            row?: any;

            /** Returns primary key.
             */
            primaryKey?: string;

            /** Returns primary key value.
             */
            primaryKeyValue?: string;

            /** Returns the edited row index.
             */
            rowIndex?: number;

            /** Returns the record object (JSON).
             */
            data?: any;

            /** Returns the record object (JSON).
             */
            rowData?: any;

            /** Returns the selectedRow index.
             */
            selectedRow?: number;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns selected row for delete.
             */
            tr?: any;

            /** Returns current filtering column field name.
             */
            currentFilteringColumn?: string;

            /** Returns current filtering object.
             */
            currentFilterObject?: any;

            /** Returns filter details.
             */
            filterCollection?: any;
        }

        export interface BatchAddEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns deleted data.
             */
            defaultData?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the column object.
             */
            columnObject?: any;

            /** Returns the column index.
             */
            columnIndex?: number;

            /** Returns the row element.
             */
            row?: any;

            /** Returns the primaryKey.
             */
            primaryKey?: any;

            /** Returns the cell object.
             */
            cell?: any;
        }

        export interface BatchDeleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns deleted data.
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the primary key.
             */
            primaryKey?: any;

            /** Returns the row Index.
             */
            rowIndex?: number;
        }

        export interface BeforeBatchAddEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the default data object.
             */
            defaultData?: any;

            /** Returns the primaryKey.
             */
            primaryKey?: any;
        }

        export interface BeforeBatchDeleteEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns deleted data.
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the primaryKey.
             */
            primaryKey?: any;

            /** Returns the row index.
             */
            rowIndex?: number;

            /** Returns the row element.
             */
            row?: any;
        }

        export interface BeforeBatchSaveEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the changed record object.
             */
            batchChanges?: any;
        }

        export interface BeforePrintEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Grid element.
             */
            element?: any;

            /** Returns the selected records.
             */
            selectedRows?: any;
        }

        export interface BeforeRowDropEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the targeted row.
             */
            target?: any;

            /** Returns the targeted row index.
             */
            targetIndex?: any;

            /** Returns the dragged record details
             */
            draggedRecords?: any;

            /** Returns the drop details
             */
            dropDetails?: any;
        }

        export interface BeginEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current edited row.
             */
            row?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the primary key.
             */
            primaryKey?: any;

            /** Returns the primary key value.
             */
            primaryKeyValue?: any;

            /** Returns the edited row index.
             */
            rowIndex?: number;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellEditEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the validation rules.
             */
            validationRules?: any;

            /** Returns the column name.
             */
            columnName?: string;

            /** Returns the cell value.
             */
            value?: string;

            /** Returns the row data object.
             */
            rowData?: any;

            /** Returns the previous value of the cell.
             */
            previousValue?: string;

            /** Returns the column object.
             */
            columnObject?: any;

            /** Returns the cell object.
             */
            cell?: any;

            /** Returns isForeignKey option value.
             */
            isForeignKey?: boolean;
        }

        export interface CellSaveEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the column name.
             */
            columnName?: string;

            /** Returns the cell value.
             */
            value?: string;

            /** Returns the row data object.
             */
            rowData?: any;

            /** Returns the previous value of the cell.
             */
            previousValue?: string;

            /** Returns the column object.
             */
            columnObject?: any;

            /** Returns the cell object.
             */
            cell?: any;

            /** Returns isForeignKey option value.
             */
            isForeignKey?: boolean;
        }

        export interface CellSelectedEventArgs {

            /** Returns the selected cell index value.
             */
            cellIndex?: number;

            /** Returns the previous selected cell index value.
             */
            previousRowCellIndex?: number;

            /** Returns the selected cell element.
             */
            currentCell?: any;

            /** Returns the previous selected cell element.
             */
            previousRowCell?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns the selected row cell index values.
             */
            selectedRowCellIndex?: any[];

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellSelectingEventArgs {

            /** Returns the selected cell index value.
             */
            cellIndex?: number;

            /** Returns the previous selected cell index value.
             */
            previousRowCellIndex?: number;

            /** Returns the selected cell element.
             */
            currentCell?: any;

            /** Returns the previous selected cell element.
             */
            previousRowCell?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns whether the ctrl key is pressed while selecting cell
             */
            isCtrlKeyPressed?: boolean;

            /** Returns whether the shift key is pressed while selecting cell
             */
            isShiftKeyPressed?: boolean;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellDeselectedEventArgs {

            /** Returns the deselected cell index value.
             */
            cellIndex?: number;

            /** Returns the deselected cell element.
             */
            currentCell?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellDeselectingEventArgs {

            /** Returns the deselecting cell index value.
             */
            cellIndex?: number;

            /** Returns the deselecting cell element.
             */
            currentCell?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns whether the ctrl key is pressed while deselecting cell
             */
            isCtrlKeyPressed?: boolean;

            /** Returns whether the shift key is pressed while deselecting cell
             */
            isShiftKeyPressed?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: any;

            /** Returns the draggable column object.
             */
            column?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns target elements based on mouse move position.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: any;

            /** Returns the draggable column object.
             */
            column?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns drag start element.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnDropEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: string;

            /** Returns the draggable column object.
             */
            column?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns dropped dragged element.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnSelectedEventArgs {

            /** Returns the selected cell index value.
             */
            columnIndex?: number;

            /** Returns the previous selected column index value.
             */
            previousColumnIndex?: number;

            /** Returns the selected header cell element.
             */
            headerCell?: any;

            /** Returns the previous selected header cell element.
             */
            prevColumnHeaderCell?: any;

            /** Returns corresponding column object (JSON).
             */
            column?: any;

            /** Returns the selected columns values.
             */
            selectedColumnsIndex?: any[];

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnSelectingEventArgs {

            /** Returns the selected column index value.
             */
            columnIndex?: number;

            /** Returns the previous selected column index value.
             */
            previousColumnIndex?: number;

            /** Returns the selected header cell element.
             */
            headerCell?: any;

            /** Returns the previous selected header cell element.
             */
            prevColumnHeaderCell?: any;

            /** Returns corresponding column object (JSON).
             */
            column?: any;

            /** Returns whether the ctrl key is pressed while selecting cell
             */
            isCtrlKeyPressed?: boolean;

            /** Returns whether the shift key is pressed while selecting cell
             */
            isShiftKeyPressed?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnDeselectedEventArgs {

            /** Returns the Deselected column index value.
             */
            columnIndex?: number;

            /** Returns the Deselected column header element.
             */
            headerCell?: any;

            /** Returns corresponding column object (JSON).
             */
            column?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnDeselectingEventArgs {

            /** Returns the deselecting column index value.
             */
            columnIndex?: number;

            /** Returns the deselecting column header element.
             */
            headerCell?: any;

            /** Returns corresponding column object (JSON).
             */
            column?: any;

            /** Returns whether the ctrl key is pressed while deselecting column
             */
            isCtrlKeyPressed?: boolean;

            /** Returns whether the shift key is pressed while deselecting column
             */
            isShiftKeyPressed?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ContextClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the status of contextmenu item which denotes its enabled state
             */
            status?: boolean;

            /** Returns the target item.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ContextOpenEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the status of contextmenu item which denotes its enabled state
             */
            status?: boolean;

            /** Returns the target item.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsCollapseEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns detail row element.
             */
            detailsRow?: any;

            /** Returns master row of detail row record object (JSON).
             */
            masterData?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns master row element.
             */
            masterRow?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsDataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns details row element.
             */
            detailsElement?: any;

            /** Returns the details row data.
             */
            data?: any;

            /** Returns the details row data.
             */
            rowData?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsExpandEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns detail row element.
             */
            detailsRow?: any;

            /** Returns master row of detail row record object (JSON).
             */
            masterData?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns master row element.
             */
            masterRow?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndAddEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns added data.
             */
            data?: any;

            /** Returns added data.
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndDeleteEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns deleted data.
             */
            data?: any;

            /** Returns deleted data.
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndEditEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns modified data.
             */
            data?: any;

            /** Returns modified data.
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface LoadEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface MergeHeaderCellInfoEventArgs {

            /** Method to merge the header cells.
             */
            headerCellMerge?(startIndex:number,count:number): void

            /** Returns the column headers.
             */
            columnHeaders?: any;

            /** Returns the grid model.
             */
            model?: any;
        }

        export interface MergeCellInfoEventArgs {

            /** Returns grid cell.
             */
            cell?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current row record object (JSON).
             */
            data?: any;

            /** Returns current row record object (JSON).
             */
            rowData?: any;

            /** Returns the text value in the cell.
             */
            text?: string;

            /** Returns the column object.
             */
            column?: any;

            /** Method to merge Grid rows.
             */
            rowMerge?(): void;

            /** Method to merge Grid columns.
             */
            colMerge?(): void;

            /** Method to merge Grid rows and columns.
             */
            merge?(): void;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface QueryCellInfoEventArgs {

            /** Returns grid cell.
             */
            cell?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current row record object (JSON).
             */
            data?: any;

            /** Returns current row record object (JSON).
             */
            rowData?: any;

            /** Returns the text value in the cell.
             */
            text?: string;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RecordClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            rowData?: any;

            /** Returns the row index of the selected row.
             */
            rowIndex?: number;

            /** Returns the jQuery object of the current selected row.
             */
            row?: any;

            /** Returns the current selected cell.
             */
            cell?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the cell index value.
             */
            cellIndex?: number;

            /** Returns the corresponding cell value.
             */
            cellValue?: string;

            /** Returns the Header text of the column corresponding to the selected cell.
             */
            columnName?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RecordDoubleClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            rowData?: any;

            /** Returns the row index of the selected row.
             */
            rowIndex?: number;

            /** Returns the jQuery object of the current selected row.
             */
            row?: any;

            /** Returns the current selected cell.
             */
            cell?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the selected cell index value.
             */
            cellIndex?: number;

            /** Returns the corresponding cell value.
             */
            cellValue?: string;

            /** Returns the Header text of the column corresponding to the selected cell.
             */
            columnName?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ResizedEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the column index.
             */
            columnIndex?: number;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the grid object.
             */
            target?: any;

            /** Returns the old width value.
             */
            oldWidth?: number;

            /** Returns the new width value.
             */
            newWidth?: number;
        }

        export interface ResizeEndEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the column index.
             */
            columnIndex?: number;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the grid object.
             */
            target?: any;

            /** Returns the old width value.
             */
            oldWidth?: number;

            /** Returns the new width value.
             */
            newWidth?: number;

            /** Returns the extra width value.
             */
            extra?: number;
        }

        export interface ResizeStartEventArgs {

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the column index.
             */
            columnIndex?: number;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the grid object.
             */
            target?: any;

            /** Returns the old width value.
             */
            oldWidth?: number;
        }

        export interface RightClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current record object (JSON).
             */
            currentData?: any;

            /** Returns the row index of the selected row.
             */
            rowIndex?: number;

            /** Returns the current selected row.
             */
            row?: any;

            /** Returns the selected row data object.
             */
            data?: any;

            /** Returns the selected row data object.
             */
            rowData?: any;

            /** Returns the cell index of the selected cell.
             */
            cellIndex?: number;

            /** Returns the cell value.
             */
            cellValue?: string;

            /** Returns the cell object.
             */
            cell?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDataBoundEventArgs {

            /** Returns grid row.
             */
            row?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current row record object (JSON).
             */
            data?: any;

            /** Returns current row record object (JSON).
             */
            rowData?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns the foreign key record object (JSON).
             */
            foreignKeyData?: any;

            /** Returns the row index of the selected row.
             */
            rowIndex?: number;

            /** Returns the current selected row.
             */
            row?: any;

            /** Returns the previous selected row element.
             */
            prevRow?: any;

            /** Returns the previous selected row index.
             */
            prevRowIndex?: number;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowSelectingEventArgs {

            /** Returns the selected row index value.
             */
            rowIndex?: number;

            /** Returns the selected row element.
             */
            row?: any;

            /** Returns the previous selected row element.
             */
            prevRow?: any;

            /** Returns the previous selected row index.
             */
            prevRowIndex?: number;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDeselectedEventArgs {

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns the row index of the deselected row.
             */
            rowIndex?: number;

            /** Returns the current deselected row element.
             */
            row?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDeselectingEventArgs {

            /** Returns the deselecting row index value.
             */
            rowIndex?: number;

            /** Returns the deselecting row element.
             */
            row?: any;

            /** Returns current record object (JSON).
             */
            data?: any;

            /** Returns current record object (JSON).
             */
            selectedData?: any;

            /** Returns whether the ctrl key is pressed while deselecting row
             */
            isCtrlKeyPressed?: boolean;

            /** Returns whether the shift key is pressed while deselecting row
             */
            isShiftKeyPressed?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: any;

            /** Returns the draggable row object.
             */
            target?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns target elements based on mouse move position.
             */
            currentTarget?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns JSON data of dragged rows.
             */
            data?: any;

            /** Returns JSON data of dragged rows.
             */
            draggedRecords?: any;
        }

        export interface RowDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: any;

            /** Returns the draggable row object.
             */
            target?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns drag start element cell.
             */
            currentTarget?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the JSON data of dragged rows.
             */
            data?: any;

            /** Returns the JSON data of dragged rows.
             */
            draggedRecords?: any;
        }

        export interface RowDropEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns draggable element type.
             */
            draggableType?: string;

            /** Returns the draggable row object.
             */
            rows?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the current mouse position cell element.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the JSON data of dragged rows.
             */
            data?: any;

            /** Returns the JSON data of dragged rows.
             */
            droppedRecords?: any;
        }

        export interface RowHoverEventArgs {

            /** Returns the hovered row.
             */
            row?: any;

            /** Returns the hovered row index.
             */
            rowIndex?: any;

            /** Returns the hovered record details
             */
            rowData?: any;

            /** Returns the hovered row cell
             */
            cell?: any;
        }

        export interface TemplateRefreshEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the cell object.
             */
            cell?: any;

            /** Returns the column object.
             */
            column?: any;

            /** Returns the current row data.
             */
            data?: any;

            /** Returns the current row data.
             */
            rowData?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the current row index.
             */
            rowIndex?: number;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ToolbarClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the status of toolbar item which denotes its enabled state
             */
            status?: boolean;

            /** Returns the target item.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the grid model.
             */
            gridModel?: any;

            /** Returns the toolbar object of the selected toolbar element.
             */
            toolbarData?: any;

            /** Returns the Id of the current toolbar element.
             */
            itemId?: string;

            /** Returns the index of the current toolbar element.
             */
            itemIndex?: number;

            /** Returns the name of the current toolbar element.
             */
            itemName?: string;
        }

        export interface ColumnsCommand {

            /** Gets or sets an object that indicates to define all the button options which are available in ejButton.
             */
            buttonOptions?: any;

            /** Gets or sets a value that indicates to add the command column button. See unboundType
             */
            type?: ej.Grid.UnboundType|string;
        }

        export interface Column {

            /** Sets the clip mode for Grid cell as ellipsis or clipped content(both header and content)
             * @Default {ej.Grid.ClipMode.Clip}
             */
            clipMode?: ej.Grid.ClipMode|string;

            /** Gets or sets a value that indicates whether to enable editing behavior for particular column.
             * @Default {true}
             */
            allowEditing?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic filtering behavior for particular column.
             * @Default {true}
             */
            allowFiltering?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic grouping behavior for particular column.
             * @Default {true}
             */
            allowGrouping?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic sorting behavior for particular column.
             * @Default {true}
             */
            allowSorting?: boolean;

            /** Gets or sets a value that indicates whether to enable dynamic resizable for particular column.
             * @Default {true}
             */
            allowResizing?: boolean;

            /** Gets or sets an object that indicates to define a command column in the grid.
             * @Default {[]}
             */
            commands?: ColumnsCommand[];

            /** Gets or sets a value that indicates to provide custom CSS for an individual column.
             */
            cssClass?: string;

            /** Gets or sets a value that indicates the attribute values to the td element of a particular column
             */
            customAttributes?: any;

            /** Gets or sets a value that indicates to bind the external datasource to the particular column when column editType as dropdownedit and also it is used to bind the datasource to the
             * foreign key column while editing the grid. //Where data is array of JSON objects of text and value for the drop-down and array of JSON objects for foreign key column.
             * @Default {null}
             */
            dataSource?: any;

            /** Gets or sets a value that indicates to display the specified default value while adding a new record to the grid
             */
            defaultValue?: string|number|boolean|Date;

            /** Gets or sets a value that indicates to render the grid content and header with an HTML elements
             * @Default {false}
             */
            disableHtmlEncode?: boolean;

            /** Gets or sets a value that indicates to display a column value as checkbox or string
             * @Default {true}
             */
            displayAsCheckbox?: boolean;

            /** Gets or sets a value that indicates to customize ejNumericTextbox of an editable column. See editingType
             */
            editParams?: any;

            /** Gets or sets a template that displays a custom editor used to edit column values. See editTemplate
             * @Default {null}
             */
            editTemplate?: any;

            /** Gets or sets a value that indicates to render the element(based on edit type) for editing the grid record. See editingType
             * @Default {ej.Grid.EditingType.String}
             */
            editType?: ej.Grid.EditingType|string;

            /** Gets or sets a value that indicates to groups the column based on its column format.
             * @Default {false}
             */
            enableGroupByFormat?: boolean;

            /** Gets or sets a value that indicates to display the columns in the grid mapping with column name of the dataSource.
             */
            field?: string;

            /** Gets or sets a template that customize the filter control from default . See filterBarTemplate
             * @Default {null}
             */
            filterBarTemplate?: any;

            /** Gets or sets a value that indicates to render the excel or menu filter dialog to the grid columns. See filterType
             * @Default {null}
             */
            filterType?: ej.Grid.FilterType|string;

            /** Gets or sets a value that indicates to define foreign key field name of the grid datasource.
             * @Default {null}
             */
            foreignKeyField?: string;

            /** Gets or sets a value that indicates to bind the field which is in foreign column datasource based on the foreignKeyField
             * @Default {null}
             */
            foreignKeyValue?: string;

            /** Gets or sets a value that indicates the format for the text applied on the column
             */
            format?: string;

            /** Gets or sets a value that indicates to add the template within the header element of the particular column.
             * @Default {null}
             */
            headerTemplateID?: string;

            /** Gets or sets a value that indicates to display the title of that particular column.
             */
            headerText?: string;

            /** This defines the text alignment of a particular column header cell value. See headerTextAlign
             * @Default {null}
             */
            headerTextAlign?: ej.TextAlign|string;

            /** It accepts the string value and shows the tooltip for the Grid column header.
             * @Default {null}
             */
            headerTooltip?: string;

            /** You can use this property to freeze selected columns in grid at the time of scrolling.
             * @Default {false}
             */
            isFrozen?: boolean;

            /** Gets or sets a value that indicates the column has an identity in the database.
             * @Default {false}
             */
            isIdentity?: boolean;

            /** Gets or sets a value that indicates the column is act as a primary key(read-only) of the grid. The editing is performed based on the primary key column
             * @Default {false}
             */
            isPrimaryKey?: boolean;

            /** Gets or sets a value that indicates the order of Column that are to be hidden or visible when Grid element is in responsive mode and could not occupy all columns.
             * @Default {-1}
             */
            priority?: number;

            /** Used to hide the particular column in column chooser by giving value as false.
             * @Default {true}
             */
            showInColumnChooser?: boolean;

            /** Gets or sets a value that indicates whether to enables column template for a particular column.
             * @Default {false}
             */
            template?: boolean|string;

            /** Gets or sets a value that indicates to align the text within the column. See textAlign
             * @Default {ej.TextAlign.Left}
             */
            textAlign?: ej.TextAlign|string;

            /** Sets the template for Tooltip in Grid Columns(both header and content)
             */
            tooltip?: string;

            /** Gets or sets a value that indicates to specify the data type of the specified columns.
             */
            type?: string;

            /** Gets or sets a value that indicates to define constraints for saving data to the database.
             */
            validationRules?: any;

            /** Gets or sets a value that indicates whether this column is visible in the grid.
             * @Default {true}
             */
            visible?: boolean;

            /** Gets or sets a value that indicates to define the width for a particular column in the grid.
             */
            width?: number;
        }

        export interface ContextMenuSettingsSubContextMenu {

            /** Used to get or set the corresponding custom context menu item to which the submenu to be appended.
             * @Default {null}
             */
            contextMenuItem?: string;

            /** Used to get or set the sub menu items to the custom context menu item.
             * @Default {[]}
             */
            subMenu?: any[];

            /** Used to get or set the sub menu items to the custom context menu item using JsRender template.
             * @Default {null}
             */
            template?: string;
        }

        export interface ContextMenuSettings {

            /** Gets or sets a value that indicates whether to add the default context menu actions as a context menu items If enableContextMenu is true it will show all the items related to the
             * target, if you want selected items from contextmenu you have to mention in the contextMenuItems
             * @Default {[]}
             */
            contextMenuItems?: any[];

            /** Gets or sets a value that indicates whether to add custom contextMenu items within the toolbar to perform any action in the grid
             * @Default {[]}
             */
            customContextMenuItems?: any[];

            /** Gets or sets a value that indicates whether to enable the context menu action in the grid.
             * @Default {false}
             */
            enableContextMenu?: boolean;

            /** Used to get or set the subMenu to the corresponding custom context menu item.
             */
            subContextMenu?: ContextMenuSettingsSubContextMenu[];

            /** Gets or sets a value that indicates whether to disable the default context menu items in the grid.
             * @Default {false}
             */
            disableDefaultItems?: boolean;
        }

        export interface EditSettings {

            /** Gets or sets a value that indicates whether to enable insert action in the editing mode.
             * @Default {false}
             */
            allowAdding?: boolean;

            /** Gets or sets a value that indicates whether to enable the delete action in the editing mode.
             * @Default {false}
             */
            allowDeleting?: boolean;

            /** Gets or sets a value that indicates whether to enable the edit action in the editing mode.
             * @Default {false}
             */
            allowEditing?: boolean;

            /** Gets or sets a value that indicates whether to enable the editing action while double click on the record
             * @Default {true}
             */
            allowEditOnDblClick?: boolean;

            /** This specifies the id of the template. This template can be used to display the data that you require to be edited using the Dialog Box
             * @Default {null}
             */
            dialogEditorTemplateID?: string;

            /** Gets or sets a value that indicates whether to define the mode of editing See editMode
             * @Default {ej.Grid.EditMode.Normal}
             */
            editMode?: ej.Grid.EditMode|string;

            /** This specifies the id of the template. This template can be used to display the data that you require to be edited using the External edit form
             * @Default {null}
             */
            externalFormTemplateID?: string;

            /** This specifies to set the position of an External edit form either in the top-right or bottom-left of the grid. See formPosition
             * @Default {ej.Grid.FormPosition.BottomLeft}
             */
            formPosition?: ej.Grid.FormPosition|string;

            /** This specifies the id of the template. This template can be used to display the data that you require to be edited using the Inline edit form
             * @Default {null}
             */
            inlineFormTemplateID?: string;

            /** This specifies to set the position of an adding new row either in the top or bottom of the grid. See rowPosition
             * @Default {ej.Grid.RowPosition.Top}
             */
            rowPosition?: ej.Grid.RowPosition|string;

            /** Gets or sets a value that indicates whether the confirm dialog has to be shown while saving or discarding the batch changes
             * @Default {true}
             */
            showConfirmDialog?: boolean;

            /** Gets or sets a value that indicates whether the confirm dialog has to be shown while deleting record
             * @Default {false}
             */
            showDeleteConfirmDialog?: boolean;

            /** Gets or sets a value that indicates whether the title for edit form is different from the primarykey column.
             * @Default {null}
             */
            titleColumn?: string;

            /** Gets or sets a value that indicates whether to display the add new form by default in the grid.
             * @Default {false}
             */
            showAddNewRow?: boolean;
        }

        export interface FilterSettingsFilteredColumn {

            /** Gets or sets a value that indicates whether to define the field name of the column to be filter.
             */
            field?: string;

            /** Gets or sets a value that indicates whether to define the matchCase of given value to be filter.
             */
            matchCase?: boolean;

            /** Gets or sets a value that indicates whether to define the filter condition to filtered column. See operator
             */
            operator?: ej.FilterOperators|string;

            /** Gets or sets a value that indicates whether to define the predicate as and/or.
             */
            predicate?: string;

            /** Gets or sets a value that indicates whether to define the value to be filtered in a column.
             */
            value?: string|number;
        }

        export interface FilterSettings {

            /** Gets or sets a value that indicates to perform the filter operation with case sensitive in excel styled filter menu mode
             * @Default {false}
             */
            enableCaseSensitivity?: boolean;

            /** Gets or sets a value that indicates to define the interDeterminateState of checkbox in excel filter dialog.
             * @Default {true}
             */
            enableInterDeterminateState?: boolean;

            /** This specifies the grid to starts the filter action while typing in the filterBar or after pressing the enter key. based on the filterBarMode. See filterBarMode.
             * @Default {ej.Grid.FilterBarMode.Immediate}
             */
            filterBarMode?: ej.Grid.FilterBarMode|string;

            /** Gets or sets a value that indicates whether to define the filtered columns details programmatically at initial load
             * @Default {[]}
             */
            filteredColumns?: FilterSettingsFilteredColumn[];

            /** This specifies the grid to show the filterBar or filterMenu to the grid records. See filterType
             * @Default {ej.Grid.FilterType.FilterBar}
             */
            filterType?: ej.Grid.FilterType|string;

            /** This specifies the grid to delay the filter action while typing in the filterBar.
             * @Default {1500}
             */
            immediateModeDelay?: number;

            /** Gets or sets a value that indicates the maximum number of filter choices that can be showed in the excel styled filter menu.
             * @Default {1000}
             */
            maxFilterChoices?: number;

            /** This specifies the grid to show the filter text within the grid pager itself.
             * @Default {true}
             */
            showFilterBarStatus?: boolean;

            /** Gets or sets a value that indicates whether to enable the predicate options in the filtering menu
             * @Default {false}
             */
            showPredicate?: boolean;
        }

        export interface GroupSettings {

            /** Gets or sets a value that customize the group caption format.
             * @Default {null}
             */
            captionFormat?: string;

            /** Gets or sets a value that indicates whether to enable animation button option in the group drop area of the grid.
             * @Default {false}
             */
            enableDropAreaAutoSizing?: boolean;

            /** Gets or sets a value that indicates whether to add grouped columns programmatically at initial load
             * @Default {[]}
             */
            groupedColumns?: any[];

            /** Gets or sets a value that indicates whether to show the group drop area just above the column header. It can be used to avoid ungrouping the already grouped column using
             * groupSettings.
             * @Default {true}
             */
            showDropArea?: boolean;

            /** Gets or sets a value that indicates whether to hide the grouped columns from the grid
             * @Default {false}
             */
            showGroupedColumn?: boolean;

            /** Gets or sets a value that indicates whether to show the group button image(toggle button)in the column header and also in the grouped column in the group drop area . It can be
             * used to group/ungroup the columns by click on the toggle button.
             * @Default {false}
             */
            showToggleButton?: boolean;

            /** Gets or sets a value that indicates whether to enable the close button in the grouped column which is in the group drop area to ungroup the grouped column
             * @Default {false}
             */
            showUngroupButton?: boolean;
        }

        export interface PageSettings {

            /** Gets or sets a value that indicates whether to define which page to display currently in the grid
             * @Default {1}
             */
            currentPage?: number;

            /** Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
             * @Default {false}
             */
            enableQueryString?: boolean;

            /** Gets or sets a value that indicates whether to enables pager template for the grid.
             * @Default {false}
             */
            enableTemplates?: boolean;

            /** Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
             * @Default {8}
             */
            pageCount?: number;

            /** Gets or sets a value that indicates whether to define the number of records displayed per page
             * @Default {12}
             */
            pageSize?: number;

            /** Gets or sets different page size values to the Dropdown in Grid Pager, by which number of records in a page can be changed dynamically.
             * @Default {[]}
             */
            pageSizeList?: any[];

            /** Gets or sets a value that indicates whether to enables default pager for the grid.
             * @Default {false}
             */
            showDefaults?: boolean;

            /** Gets or sets a value that indicates to add the template as a pager template for grid.
             * @Default {null}
             */
            template?: string;

            /** Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
             * @Default {null}
             */
            totalPages?: number;

            /** Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
             * @Default {null}
             */
            totalRecordsCount?: number;

            /** Gets or sets a value that indicates whether to define the number of pages to print. See printMode.
             * @Default {ej.Grid.PrintMode.AllPages}
             */
            printMode?: ej.Grid.PrintMode|string;
        }

        export interface ResizeSettings {

            /** Gets or sets a value that indicates whether to define the mode of resizing.
             * @Default {ej.Grid.ResizeMode.Normal}
             */
            resizeMode?: ej.Grid.ResizeMode|string;
        }

        export interface RowDropSettings {

            /** This specifies the grid to drop the grid rows only at particular target element.
             * @Default {null}
             */
            dropTargetID?: any;

            /** This helps in mapping server-side action when rows are dragged from Grid.
             * @Default {null}
             */
            dragMapper?: string;

            /** This helps in mapping server-side action when rows are dropped in Grid.
             * @Default {null}
             */
            dropMapper?: string;

            /** Gets or sets a value that indicates whether move or copy a record from one grid to another or within the grid
             * @Default {ej.Grid.DragBehavior.Move}
             */
            dragBehavior?: ej.Grid.DragBehavior|string;
        }

        export interface SearchSettings {

            /** This specify the grid to search for the value in particular columns that is mentioned in the field.
             * @Default {[]}
             */
            fields?: any;

            /** This specifies the grid to search the particular data that is mentioned in the key.
             */
            key?: string;

            /** It specifies the grid to search the records based on operator.
             * @Default {contains}
             */
            operator?: string;

            /** It enables or disables case-sensitivity while searching the search key in grid.
             * @Default {true}
             */
            ignoreCase?: boolean;
        }

        export interface SelectionSettings {

            /** Gets or sets a value that indicates the cell selection actions based on the cell selection mode.
             * @Default {ej.Grid.CellSelectionMode.Flow}
             */
            cellSelectionMode?: ej.Grid.CellSelectionMode|string;

            /** Gets or sets a value that indicates whether to enable the toggle selection behavior for row, cell and column.
             * @Default {false}
             */
            enableToggle?: boolean;

            /** Gets or sets a value that indicates whether to select multiple rows or cells by performing dragging in Grid.
             * @Default {false}
             */
            allowDragSelection?: boolean;

            /** Gets or sets a value that indicates whether to add the default selection actions as a selection mode.See selectionMode
             * @Default {[row]}
             */
            selectionMode?: any[];
        }

        export interface ScrollSettings {

            /** This specify the grid to to view data that you require without buffering the entire load of a huge database
             * @Default {false}
             */
            allowVirtualScrolling?: boolean;

            /** It accepts the boolean value and shows or hides the scrollbar while focus in or focus out of the Grid.
             * @Default {false}
             */
            autoHide?: boolean;

            /** Specifies the height and width of button in the scrollbar.
             * @Default {18}
             */
            buttonSize?: number;

            /** This specify the grid to enable/disable touch control for scrolling.
             * @Default {true}
             */
            enableTouchScroll?: boolean;

            /** This specify the grid to freeze particular columns at the time of scrolling.
             * @Default {0}
             */
            frozenColumns?: number;

            /** This specify the grid to freeze particular rows at the time of scrolling.
             * @Default {0}
             */
            frozenRows?: number;

            /** This specify the grid to show the vertical scroll bar, to scroll and view the grid contents.
             * @Default {0}
             */
            height?: string|number;

            /** It accepts the integer value and sets the width of scrollbar.
             * @Default {18}
             */
            scrollerSize?: number;

            /** This is used to define the mode of virtual scrolling in grid. See virtualScrollMode
             * @Default {ej.Grid.VirtualScrollMode.Normal}
             */
            virtualScrollMode?: ej.Grid.VirtualScrollMode|string;

            /** This is used to enable the enhanced virtual scrolling in Grid.
             * @Default {false}
             */
            enableVirtualization?: boolean;

            /** This specify the grid to show the horizontal scroll bar, to scroll and view the grid contents
             * @Default {250}
             */
            width?: string|number;

            /** This specify the scroll down pixel of mouse wheel, to scroll mouse wheel and view the grid contents.
             * @Default {57}
             */
            scrollOneStepBy?: number;
        }

        export interface SortSettingsSortedColumn {

            /** Gets or sets a value that indicates whether to define the direction to sort the column.
             */
            direction?: string;

            /** Gets or sets a value that indicates whether to define the field name of the column to be sort
             */
            field?: string;
        }

        export interface SortSettings {

            /** Gets or sets a value that indicates whether to define the direction and field to sort the column.
             */
            sortedColumns?: SortSettingsSortedColumn[];
        }

        export interface StackedHeaderRowsStackedHeaderColumn {

            /** Gets or sets a value that indicates the header text for the particular stacked header column.
             * @Default {null}
             */
            column?: any;

            /** Gets or sets a value that indicates class to the corresponding stackedHeaderColumn.
             * @Default {null}
             */
            cssClass?: string;

            /** Gets or sets a value that indicates the header text for the particular stacked header column.
             * @Default {null}
             */
            headerText?: string;

            /** Gets or sets a value that indicates the text alignment of the corresponding headerText.
             * @Default {ej.TextAlign.Left}
             */
            textAlign?: string;

            /** Sets the template for tooltip for the Grid stackedHeaderColumns.
             * @Default {null}
             */
            tooltip?: string;
        }

        export interface StackedHeaderRow {

            /** Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows
             * @Default {[]}
             */
            stackedHeaderColumns?: StackedHeaderRowsStackedHeaderColumn[];
        }

        export interface SummaryRowsSummaryColumn {

            /** Gets or sets a value that indicates the text displayed in the summary column as a value
             * @Default {null}
             */
            customSummaryValue?: string;

            /** This specifies summary column used to perform the summary calculation
             * @Default {null}
             */
            dataMember?: string;

            /** Gets or sets a value that indicates to define the target column at which to display the summary.
             * @Default {null}
             */
            displayColumn?: string;

            /** Gets or sets a value that indicates the format for the text applied on the column
             * @Default {null}
             */
            format?: string;

            /** Gets or sets a value that indicates the text displayed before the summary column value
             * @Default {null}
             */
            prefix?: string;

            /** Gets or sets a value that indicates the text displayed after the summary column value
             * @Default {null}
             */
            suffix?: string;

            /** Gets or sets a value that indicates the type of calculations to be performed for the corresponding summary column. See summaryType.
             * @Default {[]}
             */
            summaryType?: ej.Grid.SummaryType|string;

            /** Gets or sets a value that indicates to add the template for the summary value of dataMember given.
             * @Default {null}
             */
            template?: string;
        }

        export interface SummaryRow {

            /** Gets or sets a value that indicates whether to show the summary value within the group caption area for the corresponding summary column while grouping the column
             * @Default {false}
             */
            showCaptionSummary?: boolean;

            /** Gets or sets a value that indicates whether to show the group summary value for the corresponding summary column while grouping a column
             * @Default {false}
             */
            showGroupSummary?: boolean;

            /** Gets or sets a value that indicates whether to show the total summary value the for the corresponding summary column. The summary row is added after the grid content.
             * @Default {true}
             */
            showTotalSummary?: boolean;

            /** Gets or sets a value that indicates whether to add summary columns into the summary rows.
             * @Default {[]}
             */
            summaryColumns?: SummaryRowsSummaryColumn[];

            /** This specifies the grid to show the title for the summary rows.
             */
            title?: string;

            /** This specifies the grid to show the title of summary row in the specified column.
             * @Default {null}
             */
            titleColumn?: string;
        }

        export interface TextWrapSettings {

            /** This specifies the grid to apply the auto wrap for grid content or header or both.
             * @Default {ej.Grid.WrapMode.Both}
             */
            wrapMode?: ej.Grid.WrapMode|string;
        }

        export interface ToolbarSettingsCustomToolbarItem {

            /** Gets or sets a value that indicates whether to add custom toolbar item as a template element.
             */
            templateID?: string;

            /** Gets or sets a value that indicates whether to add custom toolbar item with a custom tooltip.
             */
            tooltip?: string;
        }

        export interface ToolbarSettings {

            /** Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default {[]}
             */
            customToolbarItems?: ToolbarSettingsCustomToolbarItem[];

            /** Gets or sets a value that indicates whether to enable toolbar in the grid.
             * @Default {false}
             */
            showToolbar?: boolean;

            /** Gets or sets a value that indicates whether to add the default editing actions as a toolbar items. See toolbarItems.
             * @Default {[]}
             */
            toolbarItems?: Array<ej.Grid.ToolBarItems|string>;
        }

        enum GridLines {

            ///Displays both the horizontal and vertical grid lines.
            Both,

            ///Displays the horizontal grid lines only.
            Horizontal,

            ///Displays the vertical grid lines only.
            Vertical,

            ///No grid lines are displayed.
            None
        }


        enum ClipMode {

            ///Shows ellipsis for the overflown cell.
            Ellipsis,

            ///Truncate the text in the cell
            Clip,

            ///Shows ellipsis and tooltip for the overflown cell.
            EllipsisWithTooltip
        }


        enum ColumnLayout {

            ///Column layout is auto(based on width).
            Auto,

            ///Column layout is fixed(based on width).
            Fixed
        }


        enum UnboundType {

            ///Unbound type is edit.
            Edit,

            ///Unbound type is save.
            Save,

            ///Unbound type is delete.
            Delete,

            ///Unbound type is cancel.
            Cancel
        }


        enum EditingType {

            ///Specifies editing type as string edit.
            String,

            ///Specifies editing type as boolean edit.
            Boolean,

            ///Specifies editing type as numeric edit.
            Numeric,

            ///Specifies editing type as dropdown edit.
            Dropdown,

            ///Specifies editing type as datepicker.
            DatePicker,

            ///Specifies editing type as datetime picker.
            DateTimePicker
        }


        enum FilterType {

            ///Specifies the filter type as menu.
            Menu,

            ///Specifies the filter type as excel.
            Excel
        }


        enum EditMode {

            ///Edit mode is normal.
            Normal,

            ///Edit mode is dialog.
            Dialog,

            ///Edit mode is dialog template.
            DialogTemplate,

            ///Edit mode is batch.
            Batch,

            ///Edit mode is inline form.
            InlineForm,

            ///Edit mode is inline template form.
            InlineTemplateForm,

            ///Edit mode is external form.
            ExternalForm,

            ///Edit mode is external form template.
            ExternalFormTemplate
        }


        enum FormPosition {

            ///Form position is bottomleft.
            BottomLeft,

            ///Form position is topright.
            TopRight
        }


        enum RowPosition {

            ///Specifies position of add new row as top.
            Top,

            ///Specifies position of add new row as bottom.
            Bottom
        }


        enum FilterBarMode {

            ///Initiate filter operation on typing the filter query.
            Immediate,

            ///Initiate filter operation after Enter key is pressed.
            OnEnter
        }


        enum PrintMode {

            ///Prints all pages.
            AllPages,

            ///Prints current page.
            CurrentPage
        }


        enum ResizeMode {

            ///New column size will be adjusted by all other Columns
            Normal,

            ///New column Size will be adjusted using next column.
            NextColumn,

            ///New column Size will be adjusted using entire control
            Control
        }


        enum DragBehavior {

            ///Allows to move a record from one grid to another or within the grid.
            Move,

            ///Allows to copy a record from one grid to another or within the grid.
            Copy
        }


        enum CellSelectionMode {

            ///It selects cells continuously from the start cell to end cell.
            Flow,

            ///It selects range of cells as a block from start cell to the end cell.
            Box
        }


        enum SelectionType {

            ///Specifies the selection type as single.
            Single,

            ///Specifies the selection type as multiple.
            Multiple
        }


        enum VirtualScrollMode {

            ///virtual scroll mode is normal.
            Normal,

            ///virtual scroll mode is continuous.
            Continuous
        }


        enum SummaryType {

            ///Summary type is average.
            Average,

            ///Summary type is minimum.
            Minimum,

            ///Summary type is maximum.
            Maximum,

            ///Summary type is count.
            Count,

            ///Summary type is sum.
            Sum,

            ///Summary type is custom.
            Custom,

            ///Summary type is true count.
            TrueCount,

            ///Summary type is false count.
            FalseCount
        }


        enum WrapMode {

            ///Auto wrap is applied for both content and header.
            Both,

            ///Auto wrap is applied only for content.
            Content,

            ///Auto wrap is applied only for header.
            Header
        }


        enum ToolBarItems {

            ///Toolbar item is add.
            Add,

            ///Toolbar item is edit.
            Edit,

            ///Toolbar item is delete.
            Delete,

            ///Toolbar item is update.
            Update,

            ///Toolbar item is cancel.
            Cancel,

            ///Toolbar item is search.
            Search,

            ///Toolbar item is pdfExport.
            PdfExport,

            ///Toolbar item is printGrid.
            PrintGrid,

            ///Toolbar item is wordExport.
            WordExport
        }

    }

    class Sparkline extends ej.Widget {
        static fn: Sparkline;
        constructor(element: JQuery | Element, options?: Sparkline.Model);
        static Locale: any;
        model: Sparkline.Model;
        defaults: Sparkline.Model;

        /** Redraws the entire sparkline. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
         * @returns {void}
         */
        redraw(): void;
    }
    export namespace Sparkline {

        export interface Model {

            /** Background color of the plot area.
             * @Default {transparent}
             */
            background?: string;

            /** Fill color for the sparkline series.
             * @Default {#33ccff}
             */
            fill?: string;

            /** Border color of the series.
             * @Default {null}
             */
            stroke?: string;

            /** Options for customizing the color, opacity and width of the sparkline border.
             */
            border?: Border;

            /** Border width of the series.
             * @Default {1}
             */
            width?: number;

            /** Opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Color for series high point.
             * @Default {null}
             */
            highPointColor?: string;

            /** Color for series low point.
             * @Default {null}
             */
            lowPointColor?: string;

            /** Color for series start point.
             * @Default {null}
             */
            startPointColor?: string;

            /** Color for series end point.
             * @Default {null}
             */
            endPointColor?: string;

            /** Color for series negative point.
             * @Default {null}
             */
            negativePointColor?: string;

            /** Options for customizing the color, opacity of the sparkline start and end range.
             */
            rangeBandSettings?: RangeBandSettings;

            /** Name of the culture based on which sparkline should be localized.
             * @Default {en-US}
             */
            locale?: string;

            /** Name of a field in data source, where the fill color for all the data points is generated.
             */
            palette?: string;

            /** Controls whether sparkline has to be responsive or not.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Controls whether Sparkline has to be rendered as Canvas or SVG.Canvas rendering supports all functionalities in SVG rendering.
             * @Default {false}
             */
            enableCanvasRendering?: boolean;

            /** Specify to convert the date object to string, using locale settings.
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Gap or padding for sparkline.
             * @Default {8}
             */
            padding?: number;

            /** Specifies the type of the series to render in sparkline.
             * @Default {line. See Type}
             */
            type?: ej.datavisualization.Sparkline.Type|string;

            /** Specifies the theme for Sparkline.
             * @Default {Flatlight. See Theme}
             */
            theme?: ej.datavisualization.Sparkline.Theme|string;

            /** Options to customize the tooltip.
             */
            tooltip?: Tooltip;

            /** Options for displaying and customizing marker for a data point.
             */
            markerSettings?: MarkerSettings;

            /** Options to customize the Sparkline size.
             */
            size?: Size;

            /** Options for customizing the color,dashArray and width of the axisLine.
             */
            axisLineSettings?: AxisLineSettings;

            /** Fires before loading the sparkline.
             */
            load?(e: LoadEventArgs): void;

            /** Fires after loaded the sparkline.
             */
            loaded?(e: LoadedEventArgs): void;

            /** Fires before rendering trackball tooltip. You can use this event to customize the text displayed in trackball tooltip.
             */
            tooltipInitialize?(e: TooltipInitializeEventArgs): void;

            /** Fires before rendering a series. This event is fired for each series in Sparkline.
             */
            seriesRendering?(e: SeriesRenderingEventArgs): void;

            /** Fires when mouse is moved over a point.
             */
            pointRegionMouseMove?(e: PointRegionMouseMoveEventArgs): void;

            /** Fires on clicking a point in sparkline. You can use this event to handle clicks made on points.
             */
            pointRegionMouseClick?(e: PointRegionMouseClickEventArgs): void;

            /** Fires on moving mouse over the sparkline.
             */
            sparklineMouseMove?(e: SparklineMouseMoveEventArgs): void;

            /** Fires on moving mouse outside the sparkline.
             */
            sparklineMouseLeave?(e: SparklineMouseLeaveEventArgs): void;

            /** Fires, on clicking the sparkline.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the sparkline.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the sparkline.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LoadEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LoadedEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TooltipInitializeEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X Location of the trackball tooltip in pixels
             */
            locationX?: any;

            /** Y Location of the trackball tooltip in pixels
             */
            locationY?: any;

            /** Index of the point for which trackball tooltip is displayed
             */
            pointIndex?: number;

            /** Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
             */
            currentText?: string;
        }

        export interface SeriesRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Minimum x value of the data point
             */
            minX?: any;

            /** Minimum y value of the data point
             */
            minY?: any;

            /** Maximum x value of the data point
             */
            maxX?: any;

            /** Maximum y value of the data point
             */
            maxY?: any;
        }

        export interface PointRegionMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X-coordinate of point in pixel
             */
            locationX?: number;

            /** Y-coordinate of point in pixel
             */
            locationY?: number;

            /** Index of the point in series
             */
            pointIndex?: number;

            /** Type of the series
             */
            seriesType?: string;
        }

        export interface PointRegionMouseClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X-coordinate of point in pixel
             */
            locationX?: number;

            /** Y-coordinate of point in pixel
             */
            locationY?: number;

            /** Index of the point in series
             */
            pointIndex?: number;

            /** Type of the series
             */
            seriesType?: string;
        }

        export interface SparklineMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface SparklineMouseLeaveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface Border {

            /** Border color of the sparkline.
             * @Default {transparent}
             */
            color?: string;

            /** Width of the Sparkline border.
             * @Default {1}
             */
            width?: number;
        }

        export interface RangeBandSettings {

            /** Start value of the range band.
             * @Default {null}
             */
            startRange?: number;

            /** End value of the range band.
             * @Default {null}
             */
            endRange?: number;

            /** Range band opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Range band color of the series.
             * @Default {transparent}
             */
            color?: string;
        }

        export interface TooltipBorder {

            /** Border color of the tooltip.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface TooltipFont {

            /** Font color of the text in the tooltip.
             * @Default {#111111}
             */
            color?: string;

            /** Font Family for the tooltip.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font Style for the tooltip.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Sparkline.FontStyle|string;

            /** Specifies the font weight for the tooltip.
             * @Default {Regular}
             */
            fontWeight?: ej.datavisualization.Sparkline.FontWeight|string;

            /** Opacity for text in the tooltip.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for text in the tooltip.
             * @Default {8px}
             */
            size?: string;
        }

        export interface Tooltip {

            /** Show/hides the tooltip visibility.
             * @Default {false}
             */
            visible?: boolean;

            /** Fill color for the sparkline tooltip.
             * @Default {white}
             */
            fill?: string;

            /** Custom template to the tooltip.
             */
            template?: string;

            /** Options for customizing the border of the tooltip.
             */
            border?: TooltipBorder;

            /** Options for customizing the font of the tooltip.
             */
            font?: TooltipFont;
        }

        export interface MarkerSettingsBorder {

            /** Border color of the marker shape.
             * @Default {transparent}
             */
            color?: string;

            /** Controls the opacity of the marker border.
             * @Default {1}
             */
            opacity?: number;

            /** Border width of the marker shape.
             * @Default {null}
             */
            width?: number;
        }

        export interface MarkerSettings {

            /** Controls the opacity of the marker.
             * @Default {1}
             */
            opacity?: number;

            /** Controls the visibility of the marker shape.
             * @Default {false}
             */
            visible?: boolean;

            /** width of the marker shape.
             * @Default {2}
             */
            width?: number;

            /** Color of the marker shape.
             * @Default {white}
             */
            fill?: string;

            /** Options for customizing the border of the marker shape.
             */
            border?: MarkerSettingsBorder;
        }

        export interface Size {

            /** Height of the Sparkline. Height can be specified in either pixel or percentage.
             * @Default {''}
             */
            height?: string;

            /** Width of the Sparkline. Width can be specified in either pixel or percentage.
             * @Default {''}
             */
            width?: string;
        }

        export interface AxisLineSettings {

            /** Controls the visibility of the axis.
             * @Default {false}
             */
            visible?: boolean;

            /** Color of the axis line.
             * @Default {'#111111'}
             */
            color?: string;

            /** Width of the axis line.
             * @Default {1}
             */
            width?: number;

            /** Dash array of the axis line.
             * @Default {1}
             */
            dashArray?: number;
        }
    }
    namespace Sparkline {
        enum Type {
            //string
            Area,
            //string
            Line,
            //string
            Column,
            //string
            Pie,
            //string
            WinLoss,
        }
    }
    namespace Sparkline {
        enum Theme {
            //string
            Azure,
            //string
            FlatLight,
            //string
            FlatDark,
            //string
            Azuredark,
            //string
            Lime,
            //string
            LimeDark,
            //string
            Saffron,
            //string
            SaffronDark,
            //string
            GradientLight,
            //string
            GradientDark,
        }
    }
    namespace Sparkline {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Sparkline {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }

    class SunburstChart extends ej.Widget {
        static fn: SunburstChart;
        constructor(element: JQuery | Element, options?: SunburstChart.Model);
        static Locale: any;
        model: SunburstChart.Model;
        defaults: SunburstChart.Model;

        /** Redraws the entire sunburst. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
         * @returns {void}
         */
        redraw(): void;

        /** destroy the sunburst
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace SunburstChart {

        export interface Model {

            /** Background color of the plot area.
             * @Default {null}
             */
            background?: string;

            /** Bind the data field from the data source.
             * @Default {null}
             */
            valueMemberPath?: string;

            /** Options for customizing the sunburst border.
             */
            border?: Border;

            /** Options for customizing the sunburst segment border.
             */
            segmentBorder?: SegmentBorder;

            /** Specifies the dataSource to the sunburst.
             * @Default {null}
             */
            dataSource?: any;

            /** Palette color for the data points.
             * @Default {null}
             */
            palette?: string;

            /** Parent node of the data points.
             * @Default {null}
             */
            parentNode?: string;

            /** Name of the property in the datasource that contains x values.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y values.
             * @Default {null}
             */
            yName?: string;

            /** Controls whether sunburst has to be responsive or not.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Options to customize the Sunburst size.
             */
            size?: Size;

            /** Controls the visibility of sunburst.
             * @Default {true}
             */
            visible?: boolean;

            /** Options to customize the Sunburst tooltip.
             */
            tooltip?: Tooltip;

            /** Options for customizing sunburst points.
             */
            points?: Points;

            /** Sunburst rendering will start from the specified value
             * @Default {null}
             */
            startAngle?: number;

            /** Sunburst rendering will end at the specified value
             * @Default {null}
             */
            endAngle?: number;

            /** Sunburst outer radius value
             * @Default {1}
             */
            radius?: number;

            /** Sunburst inner radius value
             * @Default {0.4}
             */
            innerRadius?: number;

            /** Options to customize the Sunburst dataLabel.
             */
            dataLabelSettings?: DataLabelSettings;

            /** Options for customizing the title and subtitle of sunburst.
             */
            title?: Title;

            /** Options for customizing the appearance of the levels or point while highlighting.
             */
            highlightSettings?: HighlightSettings;

            /** Options for customizing the appearance of the levels or data point while selection.
             */
            selectionSettings?: SelectionSettings;

            /** Specify levels of sunburst for grouped visualization of data
             * @Default {[]}
             */
            levels?: Level[];

            /** Options to customize the legend items and legend title.
             */
            legend?: Legend;

            /** Specifies the theme for Sunburst.
             * @Default {Flatlight. See Theme}
             */
            theme?: ej.datavisualization.Sunburst.SunburstTheme|string;

            /** Options to customize the left, right, top and bottom margins of sunburst area.
             */
            margin?: Margin;

            /** Enable/disable the animation for all the levels.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Opacity of the levels.
             * @Default {1}
             */
            opacity?: number;

            /** Options for enable zooming feature of chart.
             */
            zoomSettings?: ZoomSettings;

            /** Animation type of sunburst
             * @Default {rotation. See Alignment}
             */
            animationType?: ej.datavisualization.Sunburst.Animation|string;

            /** Fires before loading.
             */
            load?(e: LoadEventArgs): void;

            /** Fires before rendering sunburst.
             */
            preRender?(e: PreRenderEventArgs): void;

            /** Fires after rendering sunburst.
             */
            loaded?(e: LoadedEventArgs): void;

            /** Fires before rendering the datalabel
             */
            dataLabelRendering?(e: DataLabelRenderingEventArgs): void;

            /** Fires before rendering each segment
             */
            segmentRendering?(e: SegmentRenderingEventArgs): void;

            /** Fires before rendering sunburst title.
             */
            titleRendering?(e: TitleRenderingEventArgs): void;

            /** Fires during initialization of tooltip.
             */
            tooltipInitialize?(e: TooltipInitializeEventArgs): void;

            /** Fires after clicking the point in sunburst
             */
            pointRegionClick?(e: PointRegionClickEventArgs): void;

            /** Fires while moving the mouse over sunburst points
             */
            pointRegionMouseMove?(e: PointRegionMouseMoveEventArgs): void;

            /** Fires when clicking the point to perform drilldown.
             */
            drillDownClick?(e: DrillDownClickEventArgs): void;

            /** Fires when resetting drilldown points.
             */
            drillDownBack?(e: DrillDownBackEventArgs): void;

            /** Fires after resetting the sunburst points
             */
            drillDownReset?(e: DrillDownResetEventArgs): void;

            /** Fires, on clicking the sunburst chart.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the sunburst chart.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the sunburst chart
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LoadEventArgs {

            /** Load event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PreRenderEventArgs {

            /** PreRender event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LoadedEventArgs {

            /** Loaded event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DataLabelRenderingEventArgs {

            /** Sunburst datalabel data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface SegmentRenderingEventArgs {

            /** Sunburst datalabel data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TitleRenderingEventArgs {

            /** Sunburst title data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TooltipInitializeEventArgs {

            /** Sunburst tooltip data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PointRegionClickEventArgs {

            /** Includes clicked points region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PointRegionMouseMoveEventArgs {

            /** Includes data of mouse moved region
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownClickEventArgs {

            /** Clicked point data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownBackEventArgs {

            /** Drill down data of points
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownResetEventArgs {

            /** Drill down reset data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** Includes clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** Includes double clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface RightClickEventArgs {

            /** Includes right clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface Border {

            /** Border color of the sunburst.
             * @Default {null}
             */
            color?: string;

            /** Width of the Sunburst border.
             * @Default {2}
             */
            width?: number;
        }

        export interface SegmentBorder {

            /** Segment Border color of the sunburst.
             * @Default {null}
             */
            color?: string;

            /** Width of the Sunburst segment border.
             * @Default {2}
             */
            width?: number;
        }

        export interface Size {

            /** Height of the Sunburst.
             * @Default {''}
             */
            height?: string;

            /** Width of the Sunburst.
             * @Default {''}
             */
            width?: string;
        }

        export interface TooltipBorder {

            /** Border color of the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of the tooltip.
             * @Default {5}
             */
            width?: number;
        }

        export interface TooltipFont {

            /** Font color of the text in the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Font Family for the tooltip.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font Style for the tooltip.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Specifies the font weight for the tooltip.
             * @Default {Regular}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity for text in the tooltip.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for text in the tooltip.
             * @Default {12px}
             */
            size?: string;
        }

        export interface Tooltip {

            /** tooltip visibility of the Sunburst.
             * @Default {true}
             */
            visible?: boolean;

            /** Options for customizing the border of the sunburst tooltip.
             */
            border?: TooltipBorder;

            /** Fill color for the sunburst tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the font of the tooltip.
             */
            font?: TooltipFont;

            /** Custom template to the tooltip.
             * @Default {null}
             */
            template?: string;

            /** Setting the format for the data displayed in the tooltip
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Sets the opacity of the displayed tooltip
             * @Default {0.95}
             */
            opacity?: number;
        }

        export interface Points {

            /** Points x value of the sunburst.
             * @Default {null}
             */
            x?: string;

            /** Points y value of the sunburst.
             * @Default {null}
             */
            y?: number;

            /** Points text of the sunburst.
             * @Default {null}
             */
            text?: string;

            /** Points fill color of the sunburst.
             * @Default {null}
             */
            fill?: string;
        }

        export interface DataLabelSettingsFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the data label.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight of the data label.
             * @Default {regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font color of the data label text.
             * @Default {null}
             */
            color?: string;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface DataLabelSettings {

            /** Datalabel visibility of the Sunburst.
             * @Default {false}
             */
            visible?: boolean;

            /** Alignment of sunburst datalabel
             * @Default {Angle. See DatalabelAlignment}
             */
            labelRotationMode?: ej.datavisualization.Sunburst.SunburstLabelRotationMode|string;

            /** Options for customizing the data label font.
             */
            font?: DataLabelSettingsFont;

            /** Custom template for datalabel
             * @Default {null}
             */
            template?: string;

            /** Fill color for the datalabel
             * @Default {null}
             */
            fill?: string;

            /** Datalabel overflow mode
             * @Default {Trim. See LabelOverflowMode}
             */
            labelOverflowMode?: ej.datavisualization.Sunburst.SunburstLabelOverflowMode|string;
        }

        export interface TitleFont {

            /** Font family for Sunburst title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for Sunburst title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for Sunburst title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the Sunburst title.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for Sunburst title.
             * @Default {20px}
             */
            size?: string;
        }

        export interface TitleSubtitleFont {

            /** Font family of sub title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for sub title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for sub title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the sub title.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for sub title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface TitleSubtitle {

            /** Subtitle text for sunburst
             */
            text?: string;

            /** Sub title text visibility for sunburst
             * @Default {true}
             */
            visible?: string;

            /** Sub title text alignment
             * @Default {far. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the font of sub title.
             */
            font?: TitleSubtitleFont;
        }

        export interface Title {

            /** Title text for sunburst
             */
            text?: string;

            /** Title text visibility for sunburst
             * @Default {true}
             */
            visible?: string;

            /** Title text alignment
             * @Default {center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the font of sunburst title.
             */
            font?: TitleFont;

            /** Options to customize the sub title of Sunburst.
             */
            subtitle?: TitleSubtitle;
        }

        export interface HighlightSettings {

            /** Enables/disables the ability to highlight the levels or point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether the levels or point has to be highlighted.
             * @Default {point. See Mode}
             */
            mode?: ej.datavisualization.Sunburst.SunburstHighlightMode|string;

            /** Color of the levels/point on highlight.
             * @Default {red}
             */
            color?: string;

            /** Opacity of the levels/point on highlight.
             * @Default {0.5}
             */
            opacity?: number;

            /** Specifies whether the levels or data point has to be highlighted.
             * @Default {opacity. See Mode}
             */
            type?: ej.datavisualization.Sunburst.SunburstHighlightType|string;
        }

        export interface SelectionSettings {

            /** Enables/disables the ability to select the levels or data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether the levels or data point has to be selected.
             * @Default {point. See Mode}
             */
            mode?: ej.datavisualization.Sunburst.SunburstHighlightMode|string;

            /** Color of the levels/point on selection.
             * @Default {green}
             */
            color?: string;

            /** Opacity of the levels/point on selection.
             * @Default {0.5}
             */
            opacity?: number;

            /** Specifies whether the levels or data point has to be selected.
             * @Default {opacity. See Mode}
             */
            type?: ej.datavisualization.Sunburst.SunburstHighlightType|string;
        }

        export interface Level {

            /** Specifies the group member path
             * @Default {null}
             */
            groupMemberPath?: string;
        }

        export interface LegendBorder {

            /** Border color of the legend.
             * @Default {null}
             */
            color?: string;

            /** Border width of the legend.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendFont {

            /** Font family for legend item text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend item text.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for legend item text.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Font size for legend item text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendItemStyle {

            /** Height of the shape in legend items.
             * @Default {10}
             */
            height?: number;

            /** Width of the shape in legend items.
             * @Default {10}
             */
            width?: number;
        }

        export interface LegendLocation {

            /** X value or horizontal offset to position the legend in chart.
             * @Default {0}
             */
            x?: number;

            /** Y value or vertical offset to position the legend.
             * @Default {0}
             */
            y?: number;
        }

        export interface LegendSize {

            /** Height of the legend. Height can be specified in either pixel or percentage.
             * @Default {null}
             */
            height?: string;

            /** Width of the legend. Width can be specified in either pixel or percentage.
             * @Default {null}
             */
            width?: string;
        }

        export interface LegendTitleFont {

            /** Font family for the text in legend title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend title.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for legend title.
             * @Default {normal. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Font size for legend title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendTitle {

            /** Options to customize the font used for legend title
             */
            font?: LegendTitleFont;

            /** Enables or disables the legend title.
             * @Default {true}
             */
            visible?: string;

            /** Text to be displayed in legend title.
             */
            text?: string;

            /** Alignment of the legend title.
             * @Default {center. See Alignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;
        }

        export interface Legend {

            /** Visibility of the legend.
             * @Default {false}
             */
            visible?: boolean;

            /** Interactive action of legend items.
             * @Default {toggleSegmentVisibility. See Alignment}
             */
            clickAction?: ej.datavisualization.Sunburst.SunburstClickAction|string;

            /** Horizontal alignment of the legend.
             * @Default {Center. See Alignment}
             */
            alignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the legend border.
             */
            border?: LegendBorder;

            /** Number of columns to arrange the legend items.
             * @Default {null}
             */
            columnCount?: number;

            /** Number of rows to arrange the legend items.
             * @Default {null}
             */
            rowCount?: number;

            /** Options to customize the font used for legend item text.
             */
            font?: LegendFont;

            /** Gap or padding between the legend items.
             * @Default {10}
             */
            itemPadding?: number;

            /** Options to customize the style of legend items.
             */
            itemStyle?: LegendItemStyle;

            /** Options to customize the location of sunburst legend. Legend is placed in provided location only when value of position property is custom
             */
            location?: LegendLocation;

            /** Places the legend at specified position. Legend can be placed at **left**, **right**, **top** or **bottom** of the chart area. To manually specify the location of legend, set
             * **custom** as value to this property.
             * @Default {Bottom. See Position}
             */
            position?: ej.datavisualization.Sunburst.SunburstLegendPosition|string;

            /** Shape of the legend items.
             * @Default {None. See Shape}
             */
            shape?: ej.datavisualization.Sunburst.SunburstLegendShape|string;

            /** Options to customize the size of the legend.
             */
            size?: LegendSize;

            /** Options to customize the legend title.
             */
            title?: LegendTitle;
        }

        export interface Margin {

            /** Spacing for the left margin of chart area. Setting positive value decreases the width of the chart area from left side.
             * @Default {10}
             */
            left?: number;

            /** Spacing for the right margin of chart area. Setting positive value decreases the width of the chart area from right side.
             * @Default {10}
             */
            right?: number;

            /** Spacing for the top margin of chart area. Setting positive value decreases the height of the chart area from the top.
             * @Default {10}
             */
            top?: number;

            /** Spacing for the bottom margin of the chart area. Setting positive value decreases the height of the chart area from the bottom.
             * @Default {10}
             */
            bottom?: number;
        }

        export interface ZoomSettings {

            /** Enables or disables zooming.
             * @Default {false}
             */
            enable?: boolean;

            /** Toolbar horizontal alignment
             * @Default {right. See Alignment}
             */
            toolbarHorizontalAlignment?: ej.datavisualization.Sunburst.SunburstHorizontalAlignment|string;

            /** Toolbar vertical alignment
             * @Default {top. See Alignment}
             */
            toolbarVerticalAlignment?: ej.datavisualization.Sunburst.SunburstVerticalAlignment|string;
        }
    }
    namespace Sunburst {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Sunburst {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }
    namespace Sunburst {
        enum SunburstLabelRotationMode {
            //string
            Angle,
            //string
            Normal,
        }
    }
    namespace Sunburst {
        enum SunburstLabelOverflowMode {
            //string
            Trim,
            //string
            Hide,
            //string
            None,
        }
    }
    namespace Sunburst {
        enum SunburstAlignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace Sunburst {
        enum SunburstHighlightMode {
            //string
            Point,
            //string
            Parent,
            //string
            Child,
            //string
            All,
        }
    }
    namespace Sunburst {
        enum SunburstHighlightType {
            //string
            Opacity,
            //string
            Color,
        }
    }
    namespace Sunburst {
        enum SunburstClickAction {
            //string
            None,
            //string
            ToggleSegmentVisibility,
            //string
            ToggleSegmentSelection,
        }
    }
    namespace Sunburst {
        enum SunburstLegendPosition {
            //string
            Left,
            //string
            Right,
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace Sunburst {
        enum SunburstLegendShape {
            //string
            Diamond,
            //string
            Pentagon,
            //string
            Rectangle,
            //string
            Circle,
            //string
            Cross,
            //string
            Triangle,
        }
    }
    namespace Sunburst {
        enum SunburstTheme {
            //string
            FlatLight,
            //string
            FlatDark,
        }
    }
    namespace Sunburst {
        enum SunburstHorizontalAlignment {
            //string
            Center,
            //string
            Left,
            //string
            Right,
        }
    }
    namespace Sunburst {
        enum SunburstVerticalAlignment {
            //string
            Top,
            //string
            Bottom,
            //string
            Middle,
        }
    }
    namespace Sunburst {
        enum Animation {
            //string
            Rotation,
            //string
            FadeIn,
        }
    }

    class PivotGrid extends ej.Widget {
        static fn: PivotGrid;
        constructor(element: JQuery | Element, options?: PivotGrid.Model);
        static Locale: any;
        model: PivotGrid.Model;
        defaults: PivotGrid.Model;

        /** Performs an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** Performs an asynchronous HTTP (FullPost) submit.
         * @returns {void}
         */
        doPostBack(): void;

        /** Exports the PivotGrid to the specified format.
         * @returns {void}
         */
        exportPivotGrid(): void;

        /** This function re-renders the PivotGrid when clicking the navigation buttons on the PivotPager.
         * @returns {void}
         */
        refreshPagedPivotGrid(): void;

        /** This function refreshes the PivotGrid with the modified data input in client-mode.
         * @returns {void}
         */
        refreshPivotGrid(): void;

        /** This function re-renders the control with the report available at that instant.
         * @returns {void}
         */
        refreshControl(): void;

        /** This function destroys the PivotGrid widget associated events that are bound using &quot;this._on&quot; and brings the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** This function returns the height of all rows and the width of all columns.
         * @returns {any}
         */
        calculateCellWidths(): any;

        /** This function creates the conditional formatting dialog to apply conditional formatting for the PivotGrid control.
         * @returns {void}
         */
        openConditionalFormattingDialog(): void;

        /** This function saves the current report to the database/local storage.
         * @returns {void}
         */
        saveReport(): void;

        /** This function loads the specified report from the database/local storage.
         * @returns {void}
         */
        loadReport(): void;

        /** This function reconstructs the JSON data that is formed for rendering the PivotGrid in the excel-like layout format.
         * @returns {void}
         */
        excelLikeLayout(): void;

        /** Returns the OlapReport string that is maintained along with the axis elements information.
         * @returns {string}
         */
        getOlapReport(): string;

        /** Sets the OlapReport string along with the axis information.
         * @returns {void}
         */
        setOlapReport(): void;

        /** Returns the JSON records that are formed to render the control.
         * @returns {any[]}
         */
        getJSONRecords(): any[];

        /** Sets the JSON records that are formed to render the control.
         * @returns {void}
         */
        setJSONRecords(): void;

        /** This function allows you to change the caption of the pivot item (name displayed in UI) on-demand for the relational datasource in client-mode.
         * @returns {void}
         */
        refreshFieldCaption(): void;

        /** This function receives the JSON formatted datasource to render the PivotGrid control.
         * @returns {void}
         */
        renderControlFromJSON(): void;
    }
    export namespace PivotGrid {

        export interface Model {

            /** Sets the mode for the PivotGrid widget to bind either OLAP or relational data source.
             * @Default {ej.Pivot.AnalysisMode.Pivot}
             */
            analysisMode?: ej.Pivot.AnalysisMode|string;

            /** Specifies the CSS class to the PivotGrid for achieving the custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Connects the PivotSchemaDesigner with specified ID to the PivotGrid control.
             * @Default {â€œâ€}
             */
            pivotTableFieldListID?: string;

            /** Initializes the data source for the PivotGrid widget, when it functions completely on client-side.
             * @Default {{}}
             */
            dataSource?: DataSource;

            /** Holds the necessary properties for value sorting.
             * @Default {{}}
             */
            valueSortSettings?: ValueSortSettings;

            /** Object that holds the settings of frozen headers.
             * @Default {{}}
             */
            frozenHeaderSettings?: FrozenHeaderSettings;

            /** Allows you to display the header name in the PivotGrid control.
             * @Default {{}}
             */
            headerSettings?: HeaderSettings;

            /** Allows you to show the appropriate unique name in the pivot button.
             * @Default {false}
             */
            showUniqueNameOnPivotButton?: boolean;

            /** Object is utilized to pass additional information between the client-end and the service-end while operating the control in server mode.
             * @Default {null}
             */
            customObject?: any;

            /** Allows you to collapse specified members in each field by default.
             * @Default {null}
             */
            collapsedMembers?: any;

            /** Allows you to access each cell by right-clicking the mouse.
             * @Default {false}
             */
            enableCellContext?: boolean;

            /** Enables the cell selection for a specific range of value cells.
             * @Default {false}
             */
            enableCellSelection?: boolean;

            /** Enables the Drill-Through feature which retrieves raw items that are used to create a specific cell in the PivotGrid.
             * @Default {false}
             */
            enableDrillThrough?: boolean;

            /** Allows you to get cell details in JSON format by clicking the value cell.
             * @Default {false}
             */
            enableCellClick?: boolean;

            /** Allows you to get cell details in JSON format by double-clicking the value cell.
             * @Default {false}
             */
            enableCellDoubleClick?: boolean;

            /** Allows you to edit value cells for write-back support in the PivotGrid. This is applicable only for the server-mode.
             * @Default {false}
             */
            enableCellEditing?: boolean;

            /** Collapses the pivot items along rows and columns by default. It works only for the relational data source.
             * @Default {false}
             */
            enableCollapseByDefault?: boolean;

            /** Enables/disables the display of grand total for all columns.
             * @Default {true}
             */
            enableColumnGrandTotal?: boolean;

            /** Allows you to format a specific set of cells based on the condition.
             * @Default {false}
             */
            enableConditionalFormatting?: boolean;

            /** Enables the advanced filtering options such as value filtering, label filtering, and sorting for each field in the server mode.
             * @Default {false}
             */
            enableAdvancedFilter?: boolean;

            /** Allows you to refresh the control on-demand and not during every UI operation.
             * @Default {false}
             */
            enableDeferUpdate?: boolean;

            /** Enables the display of GroupingBar allowing you to filter, sort, and remove fields obtained from the datasource.
             * @Default {false}
             */
            enableGroupingBar?: boolean;

            /** Allows you to set the maximum number of nodes as well as child nodes to be displayed in the member editor.
             * @Default {1000}
             */
            maxNodeLimitInMemberEditor?: number;

            /** Enables/disables paging in the member editor for viewing the large count of members in pages.
             * @Default {false}
             */
            enableMemberEditorPaging?: boolean;

            /** Allows you to set the number of members to be displayed in each page of member editor on applying paging in it.
             * @Default {100}
             */
            memberEditorPageSize?: number;

            /** Enables/Disables sorting option in member editor dialog for the members of the respective field.
             * @Default {false}
             */
            enableMemberEditorSorting?: boolean;

            /** Enables/disables the display of grand total for rows and columns.
             * @Default {true}
             */
            enableGrandTotal?: boolean;

            /** Allows you to load the PivotGrid using the JSON data.
             * @Default {false}
             */
            enableJSONRendering?: boolean;

            /** Enables rendering of the PivotGrid widget along with the PivotTable field list which allows UI operations.
             * @Default {true}
             */
            enablePivotFieldList?: boolean;

            /** Enables the display of grand total for all rows.
             * @Default {true}
             */
            enableRowGrandTotal?: boolean;

            /** Allows you to view the layout of PivotGrid from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Allows you to enable the ToolTip.
             * @Default {false}
             */
            enableToolTip?: boolean;

            /** Allows you to enable the animation effects in the tooltip.
             * @Default {false}
             */
            enableToolTipAnimation?: boolean;

            /** Allows you to adjust the width of columns dynamically within given widget size.
             * @Default {false}
             */
            enableColumnResizing?: boolean;

            /** Allows you to fit the width of the column based on its maximum text width.
             * @Default {true}
             */
            resizeColumnsToFit?: boolean;

            /** Allows you to enable/disable the context menu of pivot buttons in the PivotGrid.
             * @Default {false}
             */
            enableContextMenu?: boolean;

            /** Allows you to view the large amount of data through virtual scrolling.
             * @Default {false}
             */
            enableVirtualScrolling?: boolean;

            /** Allows you to view the large amount of data by applying paging.
             * @Default {false}
             */
            enablePaging?: boolean;

            /** Allows you to configure the hyperlink settings of the PivotGrid control.
             * @Default {{}}
             */
            hyperlinkSettings?: HyperlinkSettings;

            /** Allows you to enable PivotGridâ€™s responsiveness in the browser layout.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Contains the serialized JSON string which renders the PivotGrid.
             */
            jsonRecords?: string;

            /** Sets the summary layout for PivotGrid.Following are the ways in which summary can be positioned: normal summary (bottom), top summary, no summary, and excel-like summary.
             * @Default {ej.PivotGrid.Layout.Normal}
             */
            layout?: ej.PivotGrid.Layout|string;

            /** Allows the user to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the mode for PivotGrid widget for binding the data source either in the server-side or client-side.
             * @Default {ej.Pivot.OperationalMode.ClientMode}
             */
            operationalMode?: ej.Pivot.OperationalMode|string;

            /** Allows you to set the custom name for the methods at service-end, communicated during AJAX post.
             * @Default {{}}
             */
            serviceMethodSettings?: ServiceMethodSettings;

            /** Connects the service using the specified URL for any server updates.
             * @Default {â€œâ€}
             */
            url?: string;

            /** Allows you to export entire data instead of current page data, while paging option is enabled.
             * @Default {false}
             */
            enableCompleteDataExport?: boolean;

            /** Allows you to enable &quot;withCredentials&quot; property inside XMLHttpRequest object for CORS(Cross-Origin Resource Sharing) request.
             * @Default {false}
             */
            enableXHRCredentials?: boolean;

            /** Triggers when it reaches client-side after the AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from the PivotGrid to service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers before the pivot engine starts to populate.
             */
            beforePivotEnginePopulate?(e: BeforePivotEnginePopulateEventArgs): void;

            /** Triggers when click action is performed over a value cell.
             */
            cellClick?(e: CellClickEventArgs): void;

            /** Triggers when double-click action is performed over a value cell.
             */
            cellDoubleClick?(e: CellDoubleClickEventArgs): void;

            /** Triggers when right-click action is performed on a cell.
             */
            cellContext?(e: CellContextEventArgs): void;

            /** Triggers when a specific range of value cells is selected.
             */
            cellSelection?(e: CellSelectionEventArgs): void;

            /** Triggers when the hyperlink of column header is clicked.
             */
            columnHeaderHyperlinkClick?(e: ColumnHeaderHyperlinkClickEventArgs): void;

            /** Triggers after performing drill operation in the PivotGrid.
             */
            drillSuccess?(e: DrillSuccessEventArgs): void;

            /** Triggers while clicking &quot;OK&quot; in the drill-through dialog.
             */
            drillThrough?(e: DrillThroughEventArgs): void;

            /** Triggers when the PivotGrid loading is initiated.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when PivotGrid widget completes all operations at client-side after any AJAX request.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Triggers when any error occurred during the AJAX request.
             */
            renderFailure?(e: RenderFailureEventArgs): void;

            /** Triggers when the PivotGrid successfully reaches the client-side after any AJAX request.
             */
            renderSuccess?(e: RenderSuccessEventArgs): void;

            /** Triggers when the hyperlink of row header is clicked.
             */
            rowHeaderHyperlinkClick?(e: RowHeaderHyperlinkClickEventArgs): void;

            /** Triggers when the hyperlink of summary cell is clicked.
             */
            summaryCellHyperlinkClick?(e: SummaryCellHyperlinkClickEventArgs): void;

            /** Triggers when the hyperlink of value cell is clicked.
             */
            valueCellHyperlinkClick?(e: ValueCellHyperlinkClickEventArgs): void;

            /** Triggers before saving the current report to the database.
             */
            saveReport?(e: SaveReportEventArgs): void;

            /** Triggers before loading a report from the database.
             */
            loadReport?(e: LoadReportEventArgs): void;

            /** Triggers before performing exporting in the pivot grid.
             */
            beforeExport?(e: BeforeExportEventArgs): void;

            /** Triggers before editing the cells.
             */
            cellEdit?(e: CellEditEventArgs): void;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the current action of PivotGrid control.
             */
            action?: string;

            /** returns the custom object bound with PivotGrid control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the current action of PivotGrid control.
             */
            action?: string;

            /** returns the custom object bound with PivotGrid control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface BeforePivotEnginePopulateEventArgs {

            /** returns the PivotGrid object
             */
            pivotGridObject?: any;
        }

        export interface CellClickEventArgs {

            /** returns the JSON details of the respective on cell.
             */
            selectedData?: any[];

            /** returns the custom object bound with PivotGrid control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface CellDoubleClickEventArgs {

            /** returns the JSON details of the double respective on cell.
             */
            selectedData?: any[];

            /** returns the custom object bound with PivotGrid control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface CellContextEventArgs {

            /** returns the cell position (row index and column index) in table.
             */
            cellPosition?: string;

            /** returns the type of the cell.
             */
            cellType?: string;

            /** returns the content of the cell.
             */
            cellValue?: string;

            /** returns the unique name of levels/members.
             */
            uniqueName?: string;

            /** returns the role of the cell in PivotGrid.
             */
            role?: string;

            /** returns JSON record corresponding to the selected cell.
             */
            rawdata?: any;

            /** returns the original event object.
             */
            args?: any;
        }

        export interface CellSelectionEventArgs {

            /** returns the JSON records of the selected range of cells.
             */
            JSONRecords?: any;

            /** Returns the row headers corresponding to the selected value cells.
             */
            rowheader?: any;

            /** Returns the column headers corresponding to the selected value cells.
             */
            columnheader?: any;

            /** Returns the information about the measure associated with the selected cell.
             */
            measureCount?: string;
        }

        export interface ColumnHeaderHyperlinkClickEventArgs {

            /** returns the information about the clicked cell
             */
            args?: any;

            /** returns the HTML element of the control.
             */
            element?: any;

            /** returns the custom object bound to the control.
             */
            customObject?: any;
        }

        export interface DrillSuccessEventArgs {

            /** returns the HTML element of the control.
             */
            args?: any;
        }

        export interface DrillThroughEventArgs {

            /** return the JSON records of the generated cells on drill-through operation.
             */
            data?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface LoadEventArgs {

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the current action of PivotGrid control.
             */
            action?: string;

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface RenderFailureEventArgs {

            /** returns the current action of PivotGrid control.
             */
            action?: string;

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;

            /** returns the error message with error code.
             */
            message?: string;
        }

        export interface RenderSuccessEventArgs {

            /** returns the current action of PivotGrid control.
             */
            action?: string;

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface RowHeaderHyperlinkClickEventArgs {

            /** returns the information about the clicked cell
             */
            args?: any;

            /** returns the HTML element of the control.
             */
            element?: any;

            /** returns the custom object bound to the control.
             */
            customObject?: any;
        }

        export interface SummaryCellHyperlinkClickEventArgs {

            /** returns the information about the clicked cell
             */
            args?: any;

            /** returns the HTML element of the control.
             */
            element?: any;

            /** returns the custom object bound to the control.
             */
            customObject?: any;
        }

        export interface ValueCellHyperlinkClickEventArgs {

            /** returns the information about the clicked cell
             */
            args?: any;

            /** returns the HTML element of the control.
             */
            element?: any;

            /** returns the custom object bound to the control.
             */
            customObject?: any;
        }

        export interface SaveReportEventArgs {

            /** returns the report to be stored in database.
             */
            report?: any;
        }

        export interface LoadReportEventArgs {

            /** returns the PivotGrid object.
             */
            targetControl?: any;

            /** returns whether the control is bound with OLAP or Relational data source.
             */
            dataModel?: string;
        }

        export interface BeforeExportEventArgs {

            /** contains the url of the service responsible for exporting.
             */
            url?: string;

            /** contains the name of the exporting file.
             */
            fileName?: string;
        }

        export interface CellEditEventArgs {

            /** contains the array of cells selected for editing.
             */
            editCellsInfo?: any[];
        }

        export interface DataSourceColumnsAdvancedFilter {

            /** Allows you to provide a level unique name to perform the advanced filtering.
             */
            name?: string;

            /** Allows you to set the operator to perform the label filtering.
             * @Default {none}
             */
            labelFilterOperator?: string;

            /** Allows you to set the operator to perform the value filtering.
             * @Default {none}
             */
            valueFilterOperator?: string;

            /** Allows you to set the filtering type while performing the advanced filtering.
             */
            advancedFilterType?: string;

            /** In value filtering, this property contains the measure name to which the filter is applied.
             */
            measure?: string;

            /** Allows you to hold filter operand values in the advanced filtering.
             */
            values?: any[];
        }

        export interface DataSourceColumnsFilterItems {

            /** Sets the type of filter to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceColumn {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for an item.
             */
            fieldCaption?: string;

            /** Allows you to filter the report by using advanced filtering (e.g., Microsoft Excel) option for the OLAP data source in client-mode.
             * @Default {[]}
             */
            advancedFilter?: DataSourceColumnsAdvancedFilter[];

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Shows/hides the sub-total of the field in PivotGrid.
             * @Default {true}
             */
            showSubTotal?: boolean;

            /** Allows you to set the format for column headers.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the PivotGrid.
             */
            formatString?: string;

            /** Allows you to set the custom theme for column headers.
             */
            cssClass?: string;

            /** Allows you to set the delimiter for date type format in the formatString. This is applicable for the groupByDate of row/column headers.
             */
            delimiter?: string;

            /** Allows you to set the sorting order of members of the field.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Contains the list of members need to be drilled down by default in the field.
             * @Default {[]}
             */
            drilledItems?: any[];

            /** Applies the filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceColumnsFilterItems;
        }

        export interface DataSourceRowsAdvancedFilter {

            /** Allows you to provide the level unique name to perform the advanced filtering.
             */
            name?: string;

            /** Allows you to set the operator to perform the label filtering.
             * @Default {none}
             */
            labelFilterOperator?: string;

            /** Allows you to set the operator to perform the value filtering.
             * @Default {none}
             */
            valueFilterOperator?: string;

            /** Allows you to set the filtering type while performing the advanced filtering.
             */
            advancedFilterType?: string;

            /** In value filtering, this property contains the measure name to which the filter is applied.
             */
            measure?: string;

            /** Allows you to hold the filter operand values in the advanced filtering.
             */
            values?: any[];
        }

        export interface DataSourceRowsFilterItems {

            /** Sets the type of filter to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceRow {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for the item.
             */
            fieldCaption?: string;

            /** Allows you to filter the report by using the advanced filtering (e.g., Microsoft Excel) option for the OLAP data source in client-mode.
             * @Default {[]}
             */
            advancedFilter?: DataSourceRowsAdvancedFilter[];

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Shows/hides the sub-total of the field.
             * @Default {true}
             */
            showSubTotal?: boolean;

            /** Allows you to set the format for row headers.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the PivotGrid.
             */
            formatString?: string;

            /** Allows you to set the custom theme for row headers.
             */
            cssClass?: string;

            /** Allows you to set the delimiter for date type format in the formatString. This is applicable for the groupByDate in row/column headers.
             */
            delimiter?: string;

            /** Allows you to set the sorting order of members of the field.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Contains the list of members need to be drilled down by default in the field.
             * @Default {[]}
             */
            drilledItems?: any[];

            /** Applies the filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceRowsFilterItems;
        }

        export interface DataSourceValuesMeasure {

            /** Allows you to bind the measure from the OLAP datasource by using its unique name as field name.
             */
            fieldName?: string;
        }

        export interface DataSourceValue {

            /** Allows you to bind the item by using its unique name as field name for the relational datasource.
             */
            fieldName?: string;

            /** Allows you to set the display caption for the item in the relational datasource.
             */
            fieldCaption?: string;

            /** This holds the list of unique names of measures to bind them from the OLAP cube.
             * @Default {[]}
             */
            measures?: DataSourceValuesMeasure[];

            /** Allows you to set the axis name to place measures items.
             * @Default {rows}
             */
            axis?: string;

            /** Indicates whether the field is a calculated field with the relational datasource or not.
             * @Default {false}
             */
            isCalculatedField?: boolean;

            /** Allows to set the type of PivotGrid summary calculation in the value field with the relational datasource.
             * @Default {ej.PivotAnalysis.SummaryType.Sum}
             */
            summaryType?: ej.PivotAnalysis.SummaryType|string;

            /** Allows to set the format for values.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the PivotGrid.
             */
            formatString?: string;

            /** Allows to set the formula for calculation of values for calculated members in the relational datasource.
             */
            formula?: string;

            /** Allows to set the custom theme for values.
             */
            cssClass?: string;
        }

        export interface DataSourceFiltersFilterItems {

            /** Sets the type of filter to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceFilter {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display name for the item.
             */
            fieldCaption?: string;

            /** Applies the filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceFiltersFilterItems;
        }

        export interface DataSourcePagerOptions {

            /** Allows to set the number of categorical columns to be displayed in each page on applying the paging.
             * @Default {0}
             */
            categoricalPageSize?: number;

            /** Allows to set the number of series rows to be displayed in each page on applying the paging.
             * @Default {0}
             */
            seriesPageSize?: number;

            /** Allows to set the page number to be loaded in the categorical axis by default.
             * @Default {1}
             */
            categoricalCurrentPage?: number;

            /** Allows to set the page number to be loaded in the series axis by default.
             * @Default {1}
             */
            seriesCurrentPage?: number;
        }

        export interface DataSource {

            /** Lists out the items to be arranged in the columns section of the PivotGrid.
             * @Default {[]}
             */
            columns?: DataSourceColumn[];

            /** Lists out the items to be arranged in the rows section of PivotGrid.
             * @Default {[]}
             */
            rows?: DataSourceRow[];

            /** Lists out the items that support calculation in the PivotGrid.
             * @Default {[]}
             */
            values?: DataSourceValue[];

            /** Lists out the items which supports filtering of values without displaying the members in UI of the PivotGrid.
             * @Default {[]}
             */
            filters?: DataSourceFilter[];

            /** Contains the respective cube name as string type in the OLAP database.
             * @Default {â€œâ€}
             */
            cube?: string;

            /** To set the data source name to fetch the data.
             * @Default {â€œâ€}
             */
            sourceInfo?: string;

            /** Sets the provider name for PivotGrid to identify whether the provider is SSAS or Mondrian.
             * @Default {ssas}
             */
            providerName?: string;

            /** Provides the raw data source for the PivotGrid.
             * @Default {null}
             */
            data?: any;

            /** In connection with an OLAP database, this property contains the database name as string to fetch the data from the given connection string.
             * @Default {â€œâ€}
             */
            catalog?: string;

            /** Allows you to filter the members (by its name and values) through advanced filtering (e.g., Microsoft Excel) option at OLAP data source in client-mode.
             * @Default {false}
             */
            enableAdvancedFilter?: boolean;

            /** Sets a name to the report that is bound to the control.
             */
            reportName?: string;

            /** Allows to set the page size and current page number for each axis on applying the paging.
             * @Default {{}}
             */
            pagerOptions?: DataSourcePagerOptions;
        }

        export interface ValueSortSettings {

            /** Contains the header of the specific column to which value sorting is applied.
             */
            headerText?: string;

            /** Allows you to set the string for separating column headers provided in the headerText property.
             */
            headerDelimiters?: string;

            /** Allows you to set the sorting order of values of the field.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;
        }

        export interface FrozenHeaderSettings {

            /** Allows you to freeze the row headers alone when scrolling the horizontal scroll bar.
             * @Default {false}
             */
            enableFrozenRowHeaders?: boolean;

            /** Allows you to freeze the column headers alone when scrolling the vertical scroll bar.
             * @Default {false}
             */
            enableFrozenColumnHeaders?: boolean;

            /** Allows you to freeze both row headers and column headers while scrolling.
             * @Default {false}
             */
            enableFrozenHeaders?: boolean;

            /** Allows you to set the size of the scrollbar (horizontal and vertical) that is visible in the PivotGrid.
             * @Default {18}
             */
            scrollerSize?: number;
        }

        export interface HeaderSettings {

            /** Allows you to enable/disable the row header names in the PivotGrid control.
             * @Default {false}
             */
            showRowItems?: boolean;

            /** Allows you to enable/disable the column header names in the PivotGrid control.
             * @Default {false}
             */
            showColumnItems?: boolean;
        }

        export interface HyperlinkSettings {

            /** Allows you to enable/disable the hyperlink for the column header.
             * @Default {false}
             */
            enableColumnHeaderHyperlink?: boolean;

            /** Allows you to enable/disable the hyperlink for the row header.
             * @Default {false}
             */
            enableRowHeaderHyperlink?: boolean;

            /** Allows you to enable/disable the hyperlink for summary cells.
             * @Default {false}
             */
            enableSummaryCellHyperlink?: boolean;

            /** Allows you to enable/disable the hyperlink for value cells.
             * @Default {false}
             */
            enableValueCellHyperlink?: boolean;
        }

        export interface ServiceMethodSettings {

            /** Allows you to set the custom name for service method which is responsible for drill up/down operation in the PivotGrid.
             * @Default {DrillGrid}
             */
            drillDown?: string;

            /** Allows you to set the custom name for the service method that is responsible for exporting.
             * @Default {Export}
             */
            exportPivotGrid?: string;

            /** Allows you to set the custom name for the service method responsible for performing server-side actions based on defer update.
             * @Default {DeferUpdate}
             */
            deferUpdate?: string;

            /** Allows you to set the custom name for the service method that is responsible for getting values of the tree-view inside filter dialog.
             * @Default {FetchMembers}
             */
            fetchMembers?: string;

            /** Allows you to set the custom name for the service method that is responsible for filtering operation in the PivotGrid.
             * @Default {Filtering}
             */
            filtering?: string;

            /** Allows you to set the custom name for the service method that is responsible for initializing the PivotGrid.
             * @Default {InitializeGrid}
             */
            initialize?: string;

            /** Allows you to set the custom name for the service method that is responsible for the server-side action when dropping a node from the field list.
             * @Default {NodeDropped}
             */
            nodeDropped?: string;

            /** Allows you to set the custom name for the service method that is responsible for server-side action when changing the checked state of a node in the field list.
             * @Default {NodeStateModified}
             */
            nodeStateModified?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing paging operation in the PivotGrid.
             * @Default {Paging}
             */
            paging?: string;

            /** Allows you to set the custom name for the service method that is responsible for sorting operation in the PivotGrid.
             * @Default {Sorting}
             */
            sorting?: string;

            /** Allows you to set the custom name for the service method that is responsible for expanding members in the member editor.
             * @Default {MemberExpanded}
             */
            memberExpand?: string;

            /** Allows you to set the custom name for the service method that is responsible for editing the cells.
             * @Default {CellEditing}
             */
            cellEditing?: string;

            /** Allows you to set the custom name for the service method that is responsible for saving the current report to the database.
             * @Default {SaveReport}
             */
            saveReport?: string;

            /** Allows you to set the custom name for the service method that is responsible for loading a report from the database.
             * @Default {LoadReportFromDB}
             */
            loadReport?: string;

            /** Allows you to set the custom name for the service method that is responsible for adding a calculated field to the report.
             * @Default {CalculatedField}
             */
            calculatedField?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing the drill through operation.
             * @Default {DrillThroughHierarchies}
             */
            drillThroughHierarchies?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing drill through operation in the data table.
             * @Default {DrillThroughDataTable}
             */
            drillThroughDataTable?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing value sorting operation in the PivotGrid.
             * @Default {ValueSorting}
             */
            valueSorting?: string;

            /** Allows you to set the custom name for the service method that is responsible for removing the pivot button from the GroupingBar/field list.
             * @Default {RemoveButton}
             */
            removeButton?: string;

            /** Allows you to set the custom name for the service method that is responsible for write-back operation in the OLAP Cube. This is applicable only in the server-side component.
             * @Default {WriteBack}
             */
            writeBack?: string;
        }

        enum Layout {

            ///To set normal summary layout in PivotGrid.
            Normal,

            ///To set layout with summaries at the top in PivotGrid.
            NormalTopSummary,

            ///To set layout without summaries in PivotGrid.
            NoSummaries,

            ///To set excel-like layout in PivotGrid.
            ExcelLikeLayout
        }

    }
    namespace Pivot {
        enum AnalysisMode {
            //To bind an OLAP data source to PivotGrid.
            OLAP,
            //To bind a relational data source to PivotGrid.
            Pivot,
        }
    }
    namespace PivotAnalysis {
        enum SortOrder {
            //Sorts the members of the field in ascending order.
            Ascending,
            //Sorts the members of the field in descending order.
            Descending,
            //Displays the members without sorting in default order.
            None,
        }
    }
    namespace PivotAnalysis {
        enum FilterType {
            //Excludes the specified values among the members of the field.
            Exclude,
            //Includes the specified values alone among the members of the field.
            Include,
        }
    }
    namespace PivotAnalysis {
        enum SummaryType {
            //Calculates the summary as the total of all values.
            Sum,
            //Displays the average of all values as the summaries.
            Average,
            //Displays the count of items in summaries.
            Count,
            //Displays the minimum value of all the items in the summary.
            Min,
            //Displays the maximum value of all the items in the summary.
            Max,
        }
    }
    namespace Pivot {
        enum OperationalMode {
            //To bind data source completely from client-side.
            ClientMode,
            //To bind data source completely from server-side.
            ServerMode,
        }
    }

    class PivotSchemaDesigner extends ej.Widget {
        static fn: PivotSchemaDesigner;
        constructor(element: JQuery | Element, options?: PivotSchemaDesigner.Model);
        static Locale: any;
        model: PivotSchemaDesigner.Model;
        defaults: PivotSchemaDesigner.Model;

        /** Performs an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** Re-renders the control with the data source bound to the pivot control at that instant.
         * @returns {void}
         */
        refreshControl(): void;

        /** This function Destroy the PivotSchemaDesigner widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace PivotSchemaDesigner {

        export interface Model {

            /** Specifies the CSS class to PivotSchemaDesigner to achieve custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Object utilized to pass additional information between client-end and service-end.
             * @Default {{}}
             */
            customObject?: any;

            /** For ASP.NET and MVC Wrapper, PivotSchemaDesigner will be initialized and rendered empty initially. Once the connected pivot control widget is rendered completely,
             * PivotSchemaDesigner will just be populated with data source by setting this property to â€œtrueâ€.
             * @Default {false}
             */
            enableWrapper?: boolean;

            /** Allows the user to view PivotTable Field List from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Sets the visibility of OLAP elements in PivotTable Field List. This is only applicable for OLAP datasource.
             * @Default {null}
             */
            olap?: Olap;

            /** Allows the user to enable/disable drag and drop operations within the PivotTable Field List.
             * @Default {true}
             */
            enableDragDrop?: boolean;

            /** Sets the height for PivotSchemaDesigner.
             * @Default {â€œâ€}
             */
            height?: string;

            /** Allows the user to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the Pivot control bound with this PivotSchemaDesigner.
             * @Default {null}
             */
            pivotControl?: any;

            /** Allows the user to set custom name for the methods at service-end, communicated during AJAX post.
             * @Default {{}}
             */
            serviceMethods?: any;

            /** Connects the service using the specified URL for any server updates.
             * @Default {â€œâ€}
             */
            url?: string;

            /** Sets the width for PivotSchemaDesigner.
             * @Default {â€œâ€}
             */
            width?: string;

            /** Sets the layout for PivotSchemaDesigner.
             * @Default {ej.PivotSchemaDesigner.Layouts.Excel}
             */
            layout?: ej.PivotSchemaDesigner.Layouts|string;

            /** Triggers when PivotSchemaDesigner loading is initiated.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when it reaches client-side after any AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from PivotSchemaDesigner to service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers when we start dragging any field from PivotSchemaDesigner.
             */
            dragMove?(e: DragMoveEventArgs): void;
        }

        export interface LoadEventArgs {

            /** returns the HTML element of PivotSchemaDesigner control.
             */
            element?: any;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the current action of PivotSchemaDesigner control.
             */
            action?: string;

            /** returns the custom object bound with PivotSchemaDesigner control.
             */
            customObject?: any;

            /** returns the HTML element of PivotSchemaDesigner control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the current action of PivotSchemaDesigner control.
             */
            action?: string;

            /** returns the custom object bound with PivotSchemaDesigner control.
             */
            customObject?: any;

            /** returns the HTML element of PivotSchemaDesigner control.
             */
            element?: any;
        }

        export interface DragMoveEventArgs {

            /** returns the HTML element of the dragged field from PivotSchemaDesigner.
             */
            dragTarget?: any;

            /** return the JSON details of the dragged field.
             */
            draggedElementData?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the PivotSchemaDesigner model
             */
            model?: any;
        }

        export interface Olap {

            /** Allows the user to view the KPI elements in tree-view inside PivotTable Field List. This is only applicable for OLAP datasource.
             * @Default {false}
             */
            showKPI?: boolean;

            /** Allows the user to view the named sets in tree-view inside PivotTable Field List. This is only applicable for OLAP datasource.
             * @Default {false}
             */
            showNamedSets?: boolean;
        }

        enum Layouts {

            ///To set the layout as same in the Excel.
            Excel,

            ///To set normal layout for Field List.
            Normal,

            ///To set layout with the axes one above the other.
            OneByOne
        }

    }

    class PivotPager extends ej.Widget {
        static fn: PivotPager;
        constructor(element: JQuery | Element, options?: PivotPager.Model);
        static Locale: any;
        model: PivotPager.Model;
        defaults: PivotPager.Model;

        /** This function initializes the page counts and page numbers for the PivotPager.
         * @returns {void}
         */
        initPagerProperties(): void;
    }
    export namespace PivotPager {

        export interface Model {

            /** Contains the current page number in categorical axis.
             * @Default {1}
             */
            categoricalCurrentPage?: number;

            /** Contains the total page count in categorical axis.
             * @Default {1}
             */
            categoricalPageCount?: number;

            /** Allows the user to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the pager mode (Only Categorical Pager/Only Series Pager/Both) for the PivotPager.
             * @Default {ej.PivotPager.Mode.Both}
             */
            mode?: ej.PivotPager.Mode|string;

            /** Contains the current page number in series axis.
             * @Default {1}
             */
            seriesCurrentPage?: number;

            /** Contains the total page count in series axis.
             * @Default {1}
             */
            seriesPageCount?: number;

            /** Contains the ID of the target element for which paging needs to be done.
             * @Default {â€œâ€}
             */
            targetControlID?: string;
        }

        enum Mode {

            ///To set both categorical and series pager for paging.
            Both,

            ///To set only categorical pager for paging.
            Categorical,

            ///To set only series pager for paging.
            Series
        }

    }

    class PivotChart extends ej.Widget {
        static fn: PivotChart;
        constructor(element: JQuery | Element, options?: PivotChart.Model);
        static Locale: any;
        model: PivotChart.Model;
        defaults: PivotChart.Model;

        /** Posts an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** Performs an asynchronous HTTP (FullPost) submit.
         * @returns {void}
         */
        doPostBack(): void;

        /** Exports the pivot chart to the format that is specified in the parameter.
         * @returns {void}
         */
        exportPivotChart(): void;

        /** This function renders the pivot chart control with the JSON formatted data source.
         * @returns {void}
         */
        renderChartFromJSON(): void;

        /** This function receives the update from the service-end, which will be utilized for rendering the widget.
         * @returns {void}
         */
        renderControlSuccess(): void;

        /** Returns the OlapReport string that is maintained along with the axis elements information.
         * @returns {string}
         */
        getOlapReport(): string;

        /** Sets the OlapReport string along with the axis information and maintains it in a property.
         * @returns {void}
         */
        setOlapReport(): void;

        /** Returns the JSON records that are formed to render the control.
         * @returns {any[]}
         */
        getJSONRecords(): any[];

        /** Sets the JSON records to render the control.
         * @returns {void}
         */
        setJSONRecords(): void;

        /** Returns the PivotEngine that is formed to render the control.
         * @returns {any[]}
         */
        getPivotEngine(): any[];

        /** Sets the PivotEngine that is required to render the control.
         * @returns {void}
         */
        setPivotEngine(): void;

        /** Re-renders the control with the datasource at instant.
         * @returns {void}
         */
        refreshControl(): void;

        /** This function destroys the pivot chart widget associated events that are bound using &quot;this._on&quot; and brings the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Renders the control with the pivot engine that is obtained from the OLAP cube.
         * @returns {void}
         */
        generateJSON(): void;

        /** Navigates to the specified page number in the specified axis.
         * @returns {void}
         */
        refreshPagedPivotChart(): void;
    }
    export namespace PivotChart {

        export interface Model {

            /** Sets the mode for the pivot chart widget to bind either the OLAP or relational datasource.
             * @Default {ej.Pivot.AnalysisMode.Pivot}
             */
            analysisMode?: ej.Pivot.AnalysisMode|string;

            /** Specifies the CSS class to the pivot chart for achieving the custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Options for enabling the zooming feature of the pivot chart.
             * @Default {{}}
             */
            zooming?: Zooming;

            /** Options available to configure the properties of entire series. You can also override the options for specific series by using the series collection.
             * @Default {{}}
             */
            commonSeriesOptions?: CommonSeriesOptions;

            /** Initializes the datasource for the pivot chart widget, when it functions completely on the client-side.
             * @Default {{}}
             */
            dataSource?: DataSource;

            /** Object is utilized to pass additional information between the client-end and the service-end while operating the control in the server mode.
             * @Default {{}}
             */
            customObject?: any;

            /** Allows you to enable the 3D view of the pivot chart.
             * @Default {false}
             */
            enable3D?: boolean;

            /** Allows you to view the pivot chart from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Allows you to render the complete pivot chart on drill operation, when expanding and collapsing members are shown in multi-level labels.
             * @Default {false}
             */
            enableMultiLevelLabels?: boolean;

            /** Allows you to enable the responsiveness of pivot chart in the browser layout.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** You can customize the legend items and their labels.
             * @Default {{}}
             */
            legend?: any;

            /** Allows you to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the mode for the pivot chart widget to bind the data source either in the server-side or client-side.
             * @Default {ej.Pivot.OperationalMode.ClientMode}
             */
            operationalMode?: ej.Pivot.OperationalMode|string;

            /** To override x axis for particular series, create an axis object by providing unique name by using name property and add it to axes array.
             * @Default {[]}
             */
            axes?: any[];

            /** This is a horizontal axis that contains options to configure the axis and it is the primary x-axis for all series in the series array. To override x-axis for particular series,
             * create an axis object by providing a unique name by using the name property and add it to the axes array. Then, assign the name to the seriesâ€™s xAxisName property to link both
             * the axis and the series.
             * @Default {{}}
             */
            primaryXAxis?: any;

            /** This is a vertical axis that contains options to configure the axis. This is the primary y-axis for all the series in the series array. To override y-axis for particular series,
             * create an axis object by providing a unique name by using the name property and add it to the axes array. Then, assign the name to the seriesâ€™s yAxisName property to link both
             * the axis and the series.
             * @Default {{}}
             */
            primaryYAxis?: any;

            /** Allows you to rotate the angle of pivot chart in 3D view.
             * @Default {0}
             */
            rotation?: number;

            /** Allows you to enable/disable context menu options in the pivot chart.
             * @Default {false}
             */
            enableContextMenu?: boolean;

            /** Allows you to set the custom name for methods at service-end, when you are communicating on AJAX post.
             * @Default {{}}
             */
            serviceMethodSettings?: ServiceMethodSettings;

            /** Options to customize the size of the pivot chart control.
             * @Default {{}}
             */
            size?: any;

            /** Options for customizing the title of PivotChart.
             */
            title?: Title;

            /** Connects the service by using the specified URL for any server updates while operating the control in the server mode.
             * @Default {â€œâ€}
             */
            url?: string;

            /** Allows you to enable &quot;withCredentials&quot; property inside XMLHttpRequest object for CORS(Cross-Origin Resource Sharing) request.
             * @Default {false}
             */
            enableXHRCredentials?: boolean;

            /** Triggers when the pivot chart starts to render.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when it reaches the client-side after any AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from the pivot chart to service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers before rendering multiple series with multiple axes.
             */
            beforeSeriesRender?(e: BeforeSeriesRenderEventArgs): void;

            /** Triggers when performing drill up/down operation in the pivot chart control.
             */
            drillSuccess?(e: DrillSuccessEventArgs): void;

            /** Triggers when the pivot chart widget completes all operations at client-side after the AJAX request.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Triggers when the error occurs on the AJAX request.
             */
            renderFailure?(e: RenderFailureEventArgs): void;

            /** Triggers when the pivot chart successfully reaches the client-side after the AJAX request.
             */
            renderSuccess?(e: RenderSuccessEventArgs): void;

            /** Triggers before performing export operation in the pivot chart.
             */
            beforeExport?(e: BeforeExportEventArgs): void;
        }

        export interface LoadEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;
        }

        export interface BeforeSeriesRenderEventArgs {

            /** series - Instance of the series which is about to get rendered
             */
            data?: any;
        }

        export interface DrillSuccessEventArgs {

            /** returns the current instance of PivotChart.
             */
            chartObj?: any;

            /** returns the drill action of PivotChart.
             */
            drillAction?: string;

            /** contains the name of the member drilled.
             */
            drilledMember?: string;

            /** returns the event object.
             */
            event?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;
        }

        export interface RenderFailureEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;

            /** returns the error stack trace of the original exception.
             */
            message?: string;
        }

        export interface RenderSuccessEventArgs {

            /** returns the current instance of PivotChart.
             */
            args?: any;
        }

        export interface BeforeExportEventArgs {

            /** contains the url of the service responsible for exporting.
             */
            url?: string;

            /** contains the name of the exporting file.
             */
            fileName?: string;
        }

        export interface Zooming {

            /** Enables or disables the horizontal scrollbar.
             * @Default {false}
             */
            enableScrollbar?: boolean;
        }

        export interface CommonSeriesOptions {

            /** Allows you to set the specific chart type for the pivot chart widget.
             * @Default {ej.PivotChart.ChartTypes.Column}
             */
            type?: ej.PivotChart.ChartTypes|string;
        }

        export interface DataSourceColumnsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceColumn {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for the item.
             */
            fieldCaption?: string;

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Allows you to set the sorting order of field members.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Applies filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceColumnsFilterItems;
        }

        export interface DataSourceRowsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceRow {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for the item.
             */
            fieldCaption?: string;

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Allows you to set the sorting order of field members.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Applies filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceRowsFilterItems;
        }

        export interface DataSourceValuesMeasure {

            /** Allows you to bind the measure from the OLAP datasource by using its unique name as field name.
             */
            fieldName?: string;
        }

        export interface DataSourceValue {

            /** Allows you to bind the item by using its unique name as field name for the relational datasource.
             */
            fieldName?: string;

            /** Allows you to set the display caption for the item of the relational datasource.
             */
            fieldCaption?: string;

            /** Holds the list of unique names of measures to bind them from the OLAP cube.
             * @Default {[]}
             */
            measures?: DataSourceValuesMeasure[];

            /** Allows you to set the axis name to place the measures items.
             * @Default {rows}
             */
            axis?: string;

            /** Indicates whether the field is a calculated field with the relational datasource or not.
             * @Default {false}
             */
            isCalculatedField?: boolean;

            /** Allows you to set the formula to calculate the values for calculated members in the relational datasource.
             */
            formula?: string;
        }

        export interface DataSourceFiltersFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceFilter {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Applies filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceFiltersFilterItems;
        }

        export interface DataSource {

            /** Contains the respective cube name from the OLAP database as string type.
             * @Default {â€œâ€}
             */
            cube?: string;

            /** To set the datasource name to fetch the data from that.
             * @Default {â€œâ€}
             */
            sourceInfo?: string;

            /** Sets the provider name for the pivot chart to identify whether the provider is SSAS or Mondrian.
             * @Default {ssas}
             */
            providerName?: string;

            /** Provides the raw datasource for the pivot chart.
             * @Default {null}
             */
            data?: any;

            /** In connection with the OLAP database, this property contains the database name as string to fetch the data from the given connection string.
             * @Default {â€œâ€}
             */
            catalog?: string;

            /** Lists out the items to be displayed as series of the pivot chart.
             * @Default {[]}
             */
            columns?: DataSourceColumn[];

            /** Lists out the items to be displayed as segments of the pivot chart.
             * @Default {[]}
             */
            rows?: DataSourceRow[];

            /** Lists out the items support calculation in the pivot chart.
             * @Default {[]}
             */
            values?: DataSourceValue[];

            /** Lists out the items that supports filtering of values without displaying the members in UI of the pivot chart.
             * @Default {[]}
             */
            filters?: DataSourceFilter[];
        }

        export interface ServiceMethodSettings {

            /** Allows you to set the custom name for the service method that is responsible for drilling up/down in the pivot chart.
             * @Default {DrillChart}
             */
            drillDown?: string;

            /** Allows you to set the custom name for the service method which is responsible for exporting the pivot chart.
             * @Default {Export}
             */
            exportPivotChart?: string;

            /** Allows you to set the custom name for the service method which is responsible for initializing the pivot chart.
             * @Default {InitializeChart}
             */
            initialize?: string;

            /** Allows you to set the custom name for the service method which is responsible for navigating between pages in the paged pivot chart.
             * @Default {Paging}
             */
            paging?: string;
        }

        export interface Title {

            /** Text to be displayed in PivotChart title.
             */
            text?: string;
        }

        enum ChartTypes {

            ///To render a Line type PivotChart.
            Line,

            ///To render a Spline type PivotChart.
            Spline,

            ///To render a Column type PivotChart.
            Column,

            ///To render an Area type PivotChart.
            Area,

            ///To render a SplineArea type PivotChart.
            SplineArea,

            ///To render a StepLine type PivotChart.
            StepLine,

            ///To render a StepArea type PivotChart.
            StepArea,

            ///To render a Pie type PivotChart.
            Pie,

            ///To render a Bar type PivotChart.
            Bar,

            ///To render a StackingArea type PivotChart.
            StackingArea,

            ///To render a StackingColumn type PivotChart.
            StackingColumn,

            ///To render a StackingBar type PivotChart.
            StackingBar,

            ///To render a Pyramid type PivotChart.
            Pyramid,

            ///To render a Funnel type PivotChart.
            Funnel,

            ///To render a Doughnut type PivotChart.
            Doughnut,

            ///To render a Scatter type PivotChart.
            Scatter,

            ///To render a Bubble type PivotChart.
            Bubble
        }

    }

    class PivotClient extends ej.Widget {
        static fn: PivotClient;
        constructor(element: JQuery | Element, options?: PivotClient.Model);
        static Locale: any;
        model: PivotClient.Model;
        defaults: PivotClient.Model;

        /** Performs an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** Performs an asynchronous HTTP (full post) submit.
         * @returns {void}
         */
        doPostBack(): void;

        /** Navigates to a specified page in the specified axis.
         * @returns {void}
         */
        refreshPagedPivotClient(): void;

        /** Updates the pivot client component with the JSON data that is fetched from the service while navigating between the pages.
         * @returns {void}
         */
        refreshPagedPivotClientSuccess(): void;

        /** Renders the pivot chart and the pivot grid with the provided JSON data.
         * @returns {void}
         */
        generateJSON(): void;

        /** Re-renders the control with the report at that instant.
         * @returns {void}
         */
        refreshControl(): void;

        /** Returns the control tab string that displays currently in the pivot client.
         * @returns {void}
         */
        getActiveTab(): void;

        /** This function destroys all events of the pivot client widget bound using &quot;this._on&quot; and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Returns the OLAP report string that is maintained along with the axis elements information.
         * @returns {string}
         */
        getOlapReport(): string;

        /** Sets the OLAP report string along with the axis information and maintains it in a property.
         * @returns {void}
         */
        setOlapReport(): void;

        /** Returns the formed JSON records to render the control.
         * @returns {any[]}
         */
        getJSONRecords(): any[];

        /** Sets the formed JSON records to render the control to a property.
         * @returns {void}
         */
        setJSONRecords(): void;
    }
    export namespace PivotClient {

        export interface Model {

            /** Sets the mode for the pivot client widget for binding the OLAP or relational data sources.
             * @Default {ej.Pivot.AnalysisMode.Pivot}
             */
            analysisMode?: ej.Pivot.AnalysisMode|string;

            /** Allows you to set the specific chart type for the pivot chart in the pivot client widget.
             * @Default {ej.PivotChart.ChartTypes.Column}
             */
            chartType?: ej.PivotChart.ChartTypes|string;

            /** Allows you to set the content for exporting the pivot client widget.
             * @Default {ej.PivotClient.ClientExportMode.ChartAndGrid}
             */
            clientExportMode?: ej.PivotClient.ClientExportMode|string;

            /** Specifies the CSS class to the pivot client for achieving the custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** An object is utilized to pass the additional information between the client-end and the service-end when the control functions are present in the server-mode.
             * @Default {{}}
             */
            customObject?: any;

            /** Initializes the data source for the pivot client widget, when it functions completely on the client-side.
             * @Default {{}}
             */
            dataSource?: DataSource;

            /** Enables the drill-through feature which retrieves the raw items that are used to create a specific cell in the pivot grid.
             * @Default {false}
             */
            enableDrillThrough?: boolean;

            /** Allows you to customize the layout and appearance of the widget.
             * @Default {{}}
             */
            displaySettings?: DisplaySettings;

            /** Allows you to set the visibility of icons in the toolbar panel.
             * @Default {{}}
             */
            toolbarIconSettings?: ToolbarIconSettings;

            /** Allows you to show a unique name on the pivot button.
             * @Default {false}
             */
            showUniqueNameOnPivotButton?: boolean;

            /** Allows you to load the saved report collection from the database.
             * @Default {false}
             */
            showReportCollection?: boolean;

            /** Enables the splitter option for resizing the elements in the control.
             * @Default {false}
             */
            enableSplitter?: boolean;

            /** Enables the advanced filtering options such as value filtering, label filtering, and sorting for each dimensions when binding the OLAP data in the server mode.
             * @Default {false}
             */
            enableAdvancedFilter?: boolean;

            /** Allows you to refresh the control on-demand and not during the every UI operation.
             * @Default {false}
             */
            enableDeferUpdate?: boolean;

            /** Allows to save and load the reports in a customized way with the help of events.
             * @Default {false}
             */
            enableLocalStorage?: boolean;

            /** Allows you to enable the paging for both the pivot chart and the pivot grid components for viewing the large data.
             * @Default {false}
             */
            enablePaging?: boolean;

            /** Allows you to include the pivot tree map component as one of the chart types.
             * @Default {false}
             */
            enablePivotTreeMap?: boolean;

            /** Allows you to view the layout of the pivot client from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Enables/disables the visibility of measure group selector drop-down in the cube browser.
             * @Default {false}
             */
            enableMeasureGroups?: boolean;

            /** Allows you to get cell details in JSON format by clicking the value cell.
             * @Default {false}
             */
            enableCellClick?: boolean;

            /** Allows you to get cell details in JSON format by double-clicking the value cell.
             * @Default {false}
             */
            enableCellDoubleClick?: boolean;

            /** Allows you to enable the virtual scrolling for both the pivot chart and pivot grid components for viewing the large data.
             * @Default {false}
             */
            enableVirtualScrolling?: boolean;

            /** Allows you to set the maximum number of nodes as well as child nodes to be displayed in the member editor.
             * @Default {1000}
             */
            maxNodeLimitInMemberEditor?: number;

            /** Enables/disables paging in the member editor for viewing the large count of members in the pages.
             * @Default {false}
             */
            enableMemberEditorPaging?: boolean;

            /** Allows you to set the number of members to be displayed in each page of the member editor on applying the paging in it.
             * @Default {100}
             */
            memberEditorPageSize?: number;

            /** Enables/Disables sorting option in member editor dialog for the members of the respective field.
             * @Default {false}
             */
            enableMemberEditorSorting?: boolean;

            /** Sets the summary layout for the pivot grid. Following are the ways in which the summary can be positioned: normal summary (bottom), top summary, no summary, and Microsoft Excel
             * summary.
             * @Default {ej.PivotGrid.Layout.Normal}
             */
            gridLayout?: ej.PivotGrid.Layout|string;

            /** Allows you to hide the cube browser and the axis element builder of the pivot client while initiating the widget.
             * @Default {false}
             */
            collapseCubeBrowserByDefault?: boolean;

            /** Allows you to view the KPI elements in tree-view of the pivot client's cube browser.
             * @Default {false}
             */
            enableKPI?: boolean;

            /** Allows you to enable the pivot clientâ€™s responsiveness in the browser layout.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Options to customize the size of the pivot client control.
             * @Default {Example:}
             */
            size?: any;

            /** Allows you to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the mode for the pivot client widget to bind the data source in the server-side or the client-side.
             * @Default {ej.Pivot.OperationalMode.ClientMode}
             */
            operationalMode?: ej.Pivot.OperationalMode|string;

            /** Allows you to set the custom name for methods at service-end, and it is communicated during the AJAX post.
             * @Default {{}}
             */
            serviceMethodSettings?: ServiceMethodSettings;

            /** Holds the necessary properties for value sorting.
             * @Default {{}}
             */
            valueSortSettings?: ValueSortSettings;

            /** Sets the title for the pivot client widget.
             */
            title?: string;

            /** Connects the service using the specified URL for any server updates.
             */
            url?: string;

            /** Allows you to export entire data instead of current page data, while paging option is enabled.
             * @Default {false}
             */
            enableCompleteDataExport?: boolean;

            /** Allows you to enable &quot;withCredentials&quot; property inside XMLHttpRequest object for CORS(Cross-Origin Resource Sharing) request.
             * @Default {false}
             */
            enableXHRCredentials?: boolean;

            /** Triggers when it reaches the client-side after any AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from the client-side to the service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers before saving the current collection of reports.
             */
            saveReport?(e: SaveReportEventArgs): void;

            /** Triggers before loading the saved collection of reports.
             */
            loadReport?(e: LoadReportEventArgs): void;

            /** Triggers before fetching the report collection from the storage.
             */
            fetchReport?(e: FetchReportEventArgs): void;

            /** Triggers before exporting the control.
             */
            beforeExport?(e: BeforeExportEventArgs): void;

            /** Triggers before rendering the pivot chart.
             */
            chartLoad?(e: ChartLoadEventArgs): void;

            /** Triggers before rendering the pivot schema designer.
             */
            schemaLoad?(e: SchemaLoadEventArgs): void;

            /** Triggers before rendering the pivot tree map.
             */
            treeMapLoad?(e: TreeMapLoadEventArgs): void;

            /** Triggers when clicking any value cell in the pivot grid.
             */
            valueCellHyperlinkClick?(e: ValueCellHyperlinkClickEventArgs): void;

            /** Triggers when click action is performed over a grid value cell.
             */
            cellClick?(e: CellClickEventArgs): void;

            /** Triggers when clicking on any chart series points in the pivot chart.
             */
            pointRegionClick?(e: PointRegionClickEventArgs): void;

            /** Triggers before the chart label is rendered in the pivot chart.
             */
            axesLabelRendering?(e: AxesLabelRenderingEventArgs): void;

            /** Triggers while clicking the value cells in the pivot grid.
             */
            drillThrough?(e: DrillThroughEventArgs): void;

            /** Triggers while initiating the loading of the widget.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when the pivot client widget completes all operations at client-end after any AJAX request.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Triggers when any error is occurred during the AJAX request.
             */
            renderFailure?(e: RenderFailureEventArgs): void;

            /** Triggers when the pivot client is completely rendered.
             */
            renderSuccess?(e: RenderSuccessEventArgs): void;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the current action of PivotClient control.
             */
            action?: string;

            /** returns the custom object bounds with PivotClient control.
             */
            customObject?: any;

            /** returns the HTML element of PivotClient control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the current action of PivotClient control.
             */
            action?: string;

            /** returns the custom object bounds with PivotClient control.
             */
            customObject?: any;

            /** returns the HTML element of PivotClient control.
             */
            element?: any;
        }

        export interface SaveReportEventArgs {

            /** returns the current instance of PivotClient control.
             */
            targetControl?: any;

            /** returns the object which holds the necessary parameters required for saving the report collection.
             */
            saveReportSetting?: any;
        }

        export interface LoadReportEventArgs {

            /** returns the current instance of PivotClient control.
             */
            targetControl?: any;

            /** returns the object which holds the necessary parameters required for loading a report collection from database.
             */
            loadReportSetting?: any;
        }

        export interface FetchReportEventArgs {

            /** returns the current instance of PivotClient control.
             */
            targetControl?: any;

            /** returns the object which holds the necessary parameters required for fetching the report names stored in database.
             */
            fetchReportSetting?: any;
        }

        export interface BeforeExportEventArgs {

            /** holds the url of the service method responsible for exporting the PivotClient control.
             */
            url?: string;

            /** holds the name of the file to be exported.
             */
            fileName?: string;
        }

        export interface ChartLoadEventArgs {

            /** returns the current action of PivotChart control.
             */
            action?: string;

            /** returns the custom object bound with PivotChart control.
             */
            customObject?: any;

            /** returns the HTML element of PivotChart control.
             */
            element?: any;
        }

        export interface SchemaLoadEventArgs {

            /** returns the current action of PivotSchemaDesigner control.
             */
            action?: string;
        }

        export interface TreeMapLoadEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface ValueCellHyperlinkClickEventArgs {

            /** returns the current action of PivotClient control.
             */
            type?: string;

            /** returns the clicked cell information.
             */
            args?: any;

            /** returns the custom object bounds with PivotClient control.
             */
            customerObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;

            /** returns the model object bound with PivotClient control.
             */
            model?: any;
        }

        export interface CellClickEventArgs {

            /** returns the JSON details of the respective on cell.
             */
            selectedData?: any[];

            /** returns the custom object bound with PivotClient control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGrid control.
             */
            element?: any;
        }

        export interface PointRegionClickEventArgs {

            /** returns the current action of PivotClient control.
             */
            type?: string;

            /** returns the clicked Chart series points information.
             */
            data?: any;

            /** returns the model object bound with PivotClient control.
             */
            model?: any;
        }

        export interface AxesLabelRenderingEventArgs {

            /** returns the current action of PivotClient control.
             */
            type?: string;

            /** returns the Chart label information.
             */
            data?: any;

            /** returns the model object bound with PivotClient control.
             */
            model?: any;
        }

        export interface DrillThroughEventArgs {

            /** return the JSON records of the generated cells on drill-through operation.
             */
            data?: any;

            /** returns the HTML element of PivotClient.
             */
            element?: any;
        }

        export interface LoadEventArgs {

            /** returns the HTML element of PivotClient component.
             */
            element?: any;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the HTML element of PivotClient component.
             */
            element?: any;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;
        }

        export interface RenderFailureEventArgs {

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the HTML element of PivotClient control.
             */
            element?: any;

            /** returns the error message with error code.
             */
            message?: string;
        }

        export interface RenderSuccessEventArgs {

            /** returns the object of PivotClient control at that instant.
             */
            args?: any;
        }

        export interface DataSourceColumnsAdvancedFilter {

            /** Allows you to provide a level unique name to perform the advanced filtering.
             */
            name?: string;

            /** Allows you to set the operator to perform label filtering.
             * @Default {none}
             */
            labelFilterOperator?: string;

            /** Allows you to set the operator to perform value filtering.
             * @Default {none}
             */
            valueFilterOperator?: string;

            /** Allows you to set the filtering type while performing the advanced filtering.
             */
            advancedFilterType?: string;

            /** In value filtering, this property contains the measure name to which the filter is applied.
             */
            measure?: string;

            /** Allows you to hold the filter operand values in the advanced filtering.
             */
            values?: any[];
        }

        export interface DataSourceColumnsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceColumn {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for an item.
             */
            fieldCaption?: string;

            /** Allows you to filter the report by default using the advanced filtering (e.g., Microsoft Excel) option for the OLAP data source in the client-mode.
             * @Default {[]}
             */
            advancedFilter?: DataSourceColumnsAdvancedFilter[];

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Shows/hides the sub-total of the field in the pivot grid.
             * @Default {true}
             */
            showSubTotal?: boolean;

            /** Allows to set the format for the column headers.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the pivot grid.
             */
            formatString?: string;

            /** Allows you to set the custom theme for the column headers.
             */
            cssClass?: string;

            /** Allows you to set the sorting order of members of the field.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Contains the list of members need to be drilled down by default in the field.
             * @Default {[]}
             */
            drilledItems?: any[];

            /** Applies the filter to field members.
             * @Default {null}
             */
            filterItems?: DataSourceColumnsFilterItems;
        }

        export interface DataSourceRowsAdvancedFilter {

            /** Allows you to provide a level unique name to perform the advanced filtering.
             */
            name?: string;

            /** Allows you to set the operator to perform the label filtering.
             * @Default {none}
             */
            labelFilterOperator?: string;

            /** Allows you to set the operator to perform the value filtering.
             * @Default {none}
             */
            valueFilterOperator?: string;

            /** Allows you to set the filtering type while performing the advanced filtering.
             */
            advancedFilterType?: string;

            /** In value filtering, this property contains the measure name to which the filter is applied.
             */
            measure?: string;

            /** Allows you to hold the filter operand values in the advanced filtering.
             */
            values?: any[];
        }

        export interface DataSourceRowsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceRow {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display caption for an item.
             */
            fieldCaption?: string;

            /** Allows you to filter the report by using the advanced filtering (e.g., Microsoft Excel) option for the OLAP data source in the client-mode.
             * @Default {[]}
             */
            advancedFilter?: DataSourceRowsAdvancedFilter[];

            /** Allows you to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Shows/hides the sub-total of the field.
             * @Default {true}
             */
            showSubTotal?: boolean;

            /** Allows to set the format for row headers.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the pivot grid.
             */
            formatString?: string;

            /** Allows to set the custom theme for row headers.
             */
            cssClass?: string;

            /** Allows you to set the sorting order for the field members.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;

            /** Contains the list of members need to be drilled down by default in the field.
             * @Default {[]}
             */
            drilledItems?: any[];

            /** Applies the filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceRowsFilterItems;
        }

        export interface DataSourceValuesMeasure {

            /** Allows you to bind the measure from the OLAP data source by using its unique name as field name.
             */
            fieldName?: string;
        }

        export interface DataSourceValue {

            /** Allows you to bind the item by using its unique name as field name for the relational data source.
             */
            fieldName?: string;

            /** Allows you to set the display caption for an item for the relational data source.
             */
            fieldCaption?: string;

            /** This holds the list of unique names of measures to bind them from the OLAP cube.
             * @Default {[]}
             */
            measures?: DataSourceValuesMeasure[];

            /** Allows to set the axis name to place the measures items.
             * @Default {rows}
             */
            axis?: string;

            /** Indicates whether the field is a calculated field or not with the relational data source.
             * @Default {false}
             */
            isCalculatedField?: boolean;

            /** Allows to set the type of the pivot grid summary calculation for the value field with the relational data source.
             * @Default {ej.PivotAnalysis.SummaryType.Sum}
             */
            summaryType?: ej.PivotAnalysis.SummaryType|string;

            /** Allows to set the format of the values.
             */
            format?: string;

            /** This property is set to display the formatted values with format types in the pivot grid.
             */
            formatString?: string;

            /** Allows to set the custom theme for the values.
             */
            cssClass?: string;

            /** Allows to set the formula for calculation of members values in the relational data source.
             */
            formula?: string;
        }

        export interface DataSourceFiltersFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceFilter {

            /** Allows you to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows you to set the display name for an item.
             */
            fieldCaption?: string;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceFiltersFilterItems;
        }

        export interface DataSourcePagerOptions {

            /** Allows to set the number of categorical columns to be displayed in each page on applying the paging.
             * @Default {0}
             */
            categoricalPageSize?: number;

            /** Allows to set the number of series rows to be displayed in each page on applying the paging.
             * @Default {0}
             */
            seriesPageSize?: number;

            /** Allows to set the page number in the categorical axis to be loaded by default.
             * @Default {1}
             */
            categoricalCurrentPage?: number;

            /** Allows to set the page number in the series axis to be loaded by default.
             * @Default {1}
             */
            seriesCurrentPage?: number;
        }

        export interface DataSource {

            /** Lists out the items to be arranged in the columns section of the pivot client.
             * @Default {[]}
             */
            columns?: DataSourceColumn[];

            /** Lists out the items to be arranged in the rows section of the pivot client.
             * @Default {[]}
             */
            rows?: DataSourceRow[];

            /** Lists out the items which supports calculation in the pivot client.
             * @Default {[]}
             */
            values?: DataSourceValue[];

            /** Lists out the items which supports filtering of values without displaying the members in UI of the pivot client.
             * @Default {[]}
             */
            filters?: DataSourceFilter[];

            /** Contains the respective cube name from the OLAP database as string type.
             * @Default {â€œâ€}
             */
            cube?: string;

            /** Allows to set the data source name to fetch the data from that.
             * @Default {â€œâ€}
             */
            sourceInfo?: string;

            /** Sets the provider name for the pivot client to identify whether the provider is SSAS or Mondrian.
             * @Default {ssas}
             */
            providerName?: string;

            /** Provides the raw data source for the pivot client.
             * @Default {null}
             */
            data?: any;

            /** In connection with an OLAP database, this property contains the database name as string to fetch the data from the given connection string.
             * @Default {â€œâ€}
             */
            catalog?: string;

            /** Allows you to filter the members (by its name and values) through the advanced filtering (e.g., Microsoft Excel) option in the client-mode.
             * @Default {false}
             */
            enableAdvancedFilter?: boolean;

            /** Sets a name to the report bound to the control.
             */
            reportName?: string;

            /** Allows to set the page size and current page number for each axis on applying the paging.
             * @Default {{}}
             */
            pagerOptions?: DataSourcePagerOptions;
        }

        export interface DisplaySettings {

            /** Allows you to customize the display of the pivot chart and pivot grid widgets in the tabs or tiles.
             * @Default {ej.PivotClient.ControlPlacement.Tab}
             */
            controlPlacement?: ej.PivotClient.ControlPlacement|string;

            /** Allows you to set either the chart or grid as the start-up widget.
             * @Default {ej.PivotClient.DefaultView.Grid}
             */
            defaultView?: ej.PivotClient.DefaultView|string;

            /** Allows you to switch to full screen view of the pivot chart and the pivot grid from default view in the pivot client.
             * @Default {false}
             */
            enableFullScreen?: boolean;

            /** Enables an option to enhance the space for the pivot grid and pivot chart by hiding the cube browser and the axis element builder.
             * @Default {false}
             */
            enableTogglePanel?: boolean;

            /** Sets the display mode (only chart/only grid/both) in the pivot client.
             * @Default {ej.PivotClient.DisplayMode.ChartAndGrid}
             */
            mode?: ej.PivotClient.DisplayMode|string;
        }

        export interface ToolbarIconSettings {

            /** Allows you to set the visibility of Add Report icon in the toolbar panel.
             * @Default {true}
             */
            enableAddReport?: boolean;

            /** Allows you to set the visibility of New Report icon in the toolbar panel.
             * @Default {true}
             */
            enableNewReport?: boolean;

            /** Allows you to set the visibility of Rename Report icon in the toolbar panel.
             * @Default {true}
             */
            enableRenameReport?: boolean;

            /** Allows you to set the visibility of DB Manipulation icon in the toolbar panel.
             * @Default {true}
             */
            enableDBManipulation?: boolean;

            /** Allows you to set the visibility of Word Export icon in the toolbar panel.
             * @Default {true}
             */
            enableWordExport?: boolean;

            /** Allows you to set the visibility of Excel Export icon in the toolbar panel.
             * @Default {true}
             */
            enableExcelExport?: boolean;

            /** Allows you to set the visibility of PDF Export icon in the toolbar panel.
             * @Default {true}
             */
            enablePdfExport?: boolean;

            /** Allows you to set the visibility of MDX Query icon in the toolbar panel.
             * @Default {true}
             */
            enableMDXQuery?: boolean;

            /** Allows to set the visibility of Defer Update icon in the toolbar panel.
             * @Default {false}
             */
            enableDeferUpdate?: boolean;

            /** Allows to set the visibility of Full Screen icon in the toolbar panel.
             * @Default {false}
             */
            enableFullScreen?: boolean;

            /** Allows you to set the visibility of Sort/Filter Column icon in the toolbar panel.
             * @Default {true}
             */
            enableSortOrFilterColumn?: boolean;

            /** Allows you to set the visibility of Sort/Filter Row icon in the toolbar panel.
             * @Default {true}
             */
            enableSortOrFilterRow?: boolean;

            /** Allows you to set the visibility of Toggle Axis icon in the toolbar panel.
             * @Default {true}
             */
            enableToggleAxis?: boolean;

            /** Allows you to set the visibility of Chart Types icon in the toolbar panel.
             * @Default {true}
             */
            enableChartTypes?: boolean;

            /** Allows you to set the visibility of Remove Report icon in the toolbar panel.
             * @Default {true}
             */
            enableRemoveReport?: boolean;

            /** Allows you to set the visibility of Calculated Member icon in the toolbar panel.
             * @Default {false}
             */
            enableCalculatedMember?: boolean;
        }

        export interface ServiceMethodSettings {

            /** Allows you to set the custom name for the service method that is responsible for updating the entire report and widget, while changing the cube.
             * @Default {CubeChanged}
             */
            cubeChanged?: string;

            /** Allows to set the custom name for the service method responsible for exporting.
             * @Default {Export}
             */
            exportPivotClient?: string;

            /** Allows you to set the custom name for the service method that is responsible to get the members for tree-view in the member-editor dialog.
             * @Default {FetchMemberTreeNodes}
             */
            fetchMemberTreeNodes?: string;

            /** Allows you to set the custom name for the service method that is responsible for fetching the report names from the database.
             * @Default {FetchReportListFromDB}
             */
            fetchReportList?: string;

            /** Allows you to set the custom name for the service method that is responsible for updating the report while filtering the members.
             * @Default {FilterElement}
             */
            filterElement?: string;

            /** Allows you to set the custom name for the service method that is responsible for initializing the pivot client.
             * @Default {InitializeClient}
             */
            initialize?: string;

            /** Allows you to set the custom name for the service method that is responsible for loading a report collection from the database.
             * @Default {LoadReportFromDB}
             */
            loadReport?: string;

            /** Allows you to set the custom name for the service method that is responsible to remove a report collection from the database.
             * @Default {RemoveReportFromDB}
             */
            removeDBReport?: string;

            /** Allows you to set the custom name for the service method that is responsible for renaming the report collection in the database.
             * @Default {RenameReportInDB}
             */
            renameDBReport?: string;

            /** Allows you to set the custom name for the service method that is responsible for retrieving the MDX query for the current report.
             * @Default {GetMDXQuery}
             */
            mdxQuery?: string;

            /** Allows you to set the custom name for the service method that is responsible for updating the tree-view in the cube browser, while changing the measure group.
             * @Default {MeasureGroupChanged}
             */
            measureGroupChanged?: string;

            /** Allows you to set the custom name for the service method that is responsible to get the child members, on tree-view node expansion.
             * @Default {MemberExpanded}
             */
            memberExpand?: string;

            /** Allows you to set the custom name for the service method that is responsible for updating the report while dropping a node/split button in the axis element builder.
             * @Default {NodeDropped}
             */
            nodeDropped?: string;

            /** Allows you to set the custom name for the service method that is responsible to update the report while removing the split button from the axis element builder.
             * @Default {RemoveSplitButton}
             */
            removeSplitButton?: string;

            /** Allows you to set the custom name for the service method that is responsible for saving the report collection in the database.
             * @Default {SaveReportToDB}
             */
            saveReport?: string;

            /** Allows you to set the custom name for the service method that is responsible for toggling the elements in the row and column axes.
             * @Default {ToggleAxis}
             */
            toggleAxis?: string;

            /** Allows you to set the custom name for the service method that is responsible for all the toolbar operations.
             * @Default {ToolbarOperations}
             */
            toolbarServices?: string;

            /** Allows you to set the custom name for the service method that is responsible for updating the report collection.
             * @Default {UpdateReport}
             */
            updateReport?: string;

            /** Allows you to set the custom name for the service method while navigating between the pages in the paged pivot client.
             * @Default {Paging}
             */
            paging?: string;

            /** Allows you to set the custom name for the service method that is responsible for updating the report with the calculated member.
             * @Default {CalculatedMember}
             */
            calculatedMember?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing value sorting operation in the PivotClient.
             * @Default {ValueSorting}
             */
            valueSorting?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing the drill through operation.
             * @Default {DrillThroughHierarchies}
             */
            drillThroughHierarchies?: string;

            /** Allows you to set the custom name for the service method that is responsible for performing the drill through operation in the data table.
             * @Default {DrillThroughDataTable}
             */
            drillThroughDataTable?: string;
        }

        export interface ValueSortSettings {

            /** Contains the header of the specific column to which value sorting is applied.
             */
            headerText?: string;

            /** Allows you to set the string for separating column headers provided in the headerText property.
             */
            headerDelimiters?: string;

            /** Allows you to set the sorting order of values of the field.
             * @Default {ej.PivotAnalysis.SortOrder.Ascending}
             */
            sortOrder?: ej.PivotAnalysis.SortOrder|string;
        }

        enum ClientExportMode {

            ///Exports both the PivotChart and PivotGrid on exporting.
            ChartAndGrid,

            ///Exports the PivotChart control alone on exporting.
            ChartOnly,

            ///Exports the PivotGrid control alone on exporting.
            GridOnly
        }


        enum ControlPlacement {

            ///Displays PivotChart and PivotGrid widgets in separate tabs.
            Tab,

            ///Displays PivotChart and PivotGrid widgets one above the other.
            Tile
        }


        enum DefaultView {

            ///To set PivotChart as a default control in view.
            Chart,

            ///To set PivotGrid as a default control in view.
            Grid
        }


        enum DisplayMode {

            ///To display only PivotChart widget.
            ChartOnly,

            ///To display only PivotGrid widget.
            GridOnly,

            ///To display both PivotChart and PivotGrid widgets.
            ChartAndGrid
        }

    }

    class PivotGauge extends ej.Widget {
        static fn: PivotGauge;
        constructor(element: JQuery | Element, options?: PivotGauge.Model);
        static Locale: any;
        model: PivotGauge.Model;
        defaults: PivotGauge.Model;

        /** Performs an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** This function is used to refresh the PivotGauge at client-side itself.
         * @returns {void}
         */
        refresh(): void;

        /** This function removes the KPI related images from PivotGauge on binding OLAP datasource.
         * @returns {void}
         */
        removeImg(): void;

        /** This function receives the JSON formatted datasource and renders the PivotGauge control.
         * @returns {void}
         */
        renderControlFromJSON(): void;

        /** This function Destroy the PivotGauge widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Returns the OlapReport string maintained along with the axis elements information.
         * @returns {string}
         */
        getOlapReport(): string;

        /** Sets the OlapReport string along with the axis information and maintains it in a property.
         * @returns {void}
         */
        setOlapReport(): void;

        /** Returns the JSON records formed to render the control.
         * @returns {any[]}
         */
        getJSONRecords(): any[];

        /** Sets the JSON records to render the control.
         * @returns {void}
         */
        setJSONRecords(): void;

        /** Returns the JSON records required to render the PivotGauge on performing any action with OLAP data source.
         * @returns {void}
         */
        getJSONData(): void;
    }
    export namespace PivotGauge {

        export interface Model {

            /** Sets the number of columns to arrange the Pivot Gauges.
             * @Default {0}
             */
            columnsCount?: number;

            /** Specifies the CSS class to PivotGauge to achieve custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Object utilized to pass additional information between client-end and service-end on operating in server mode.
             * @Default {{}}
             */
            customObject?: any;

            /** Initializes the data source for the PivotGauge widget, when it functions completely on client-side.
             * @Default {{}}
             */
            dataSource?: DataSource;

            /** Enables/disables the animation of pointer in PivotGauge.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Enables/disables tooltip visibility in PivotGauge.
             * @Default {false}
             */
            enableTooltip?: boolean;

            /** Allows the user to view PivotGauge from right to left.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Specify the frame details of PivotGauge here.
             * @Default {Object}
             */
            frame?: Frame;

            /** Allows the user to enable PivotGaugeâ€™s responsiveness in the browser layout.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Allows the user to change the format of the label values in PivotGauge.
             * @Default {null}
             */
            labelFormatSettings?: LabelFormatSettings;

            /** Allows the user to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the number of rows to arrange the Pivot Gauges.
             * @Default {0}
             */
            rowsCount?: number;

            /** Sets the scale values such as pointers, indicators, etc... for PivotGauge.
             * @Default {{}}
             */
            scales?: any;

            /** Allows the user to set the custom name for the methods at service-end, communicated during AJAX post.
             * @Default {{}}
             */
            serviceMethodSettings?: ServiceMethodSettings;

            /** Enables/disables the header labels in PivotGauge.
             * @Default {true}
             */
            showHeaderLabel?: boolean;

            /** Connects the service using the specified URL for any server updates on server mode operation.
             * @Default {â€œâ€}
             */
            url?: string;

            /** Sets the mode for the PivotGauge widget for binding either OLAP or Relational data source.
             * @Default {ej.Pivot.AnalysisMode.Pivot}
             */
            analysisMode?: ej.Pivot.AnalysisMode|string;

            /** Sets the mode for the PivotGauge widget for binding data source either in server-side or client-side.
             * @Default {ej.Pivot.OperationalMode.ClientMode}
             */
            operationalMode?: ej.Pivot.OperationalMode|string;

            /** Allows you to enable &quot;withCredentials&quot; property inside XMLHttpRequest object for CORS(Cross-Origin Resource Sharing) request.
             * @Default {false}
             */
            enableXHRCredentials?: boolean;

            /** Triggers when it reaches client-side after any AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from PivotGauge to service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers before populating the pivot engine on operating in client mode.
             */
            beforePivotEnginePopulate?(e: BeforePivotEnginePopulateEventArgs): void;

            /** Triggers when PivotGauge started loading at client-side.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when PivotGauge widget completes all operations at client-side after any AJAX request.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Triggers when any error occurred during AJAX request.
             */
            renderFailure?(e: RenderFailureEventArgs): void;

            /** Triggers when PivotGauge successfully reaches client-side after any AJAX request.
             */
            renderSuccess?(e: RenderSuccessEventArgs): void;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the custom object bound with PivotGauge control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGauge control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the custom object bound with PivotGauge control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGauge control.
             */
            element?: any;
        }

        export interface BeforePivotEnginePopulateEventArgs {

            /** returns the current instance of PivotGauge control.
             */
            gaugeObject?: any;
        }

        export interface LoadEventArgs {

            /** returns the current action of PivotGauge control.
             */
            action?: string;

            /** returns the model of PivotGauge control.
             */
            model?: any;

            /** returns the HTML element of the widget.
             */
            element?: any;

            /** returns the custom object bound to the control.
             */
            customObject?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the custom object bound with PivotGauge control.
             */
            customObject?: any;

            /** returns the HTML element of PivotGauge control.
             */
            element?: any;
        }

        export interface RenderFailureEventArgs {

            /** returns the HTML element of PivotGauge control.
             */
            element?: any;

            /** returns the custom object bound with the control.
             */
            customObject?: any;

            /** returns the error message with error code.
             */
            message?: string;
        }

        export interface RenderSuccessEventArgs {

            /** returns the HTML element of PivotGauge control.
             */
            element?: any;

            /** returns the custom object bound with the control.
             */
            customObject?: any;
        }

        export interface DataSourceColumnsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceColumn {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceColumnsFilterItems;
        }

        export interface DataSourceRowsFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceRow {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceRowsFilterItems;
        }

        export interface DataSourceValuesMeasure {

            /** Allows the user to bind the measure from OLAP datasource by using its unique name as field name.
             */
            fieldName?: string;
        }

        export interface DataSourceValue {

            /** Allows the user to bind the item by using its unique name as field name for Relational datasource.
             */
            fieldName?: string;

            /** Allows the user to set the display caption for an item for Relational datasource.
             */
            fieldCaption?: string;

            /** This holds the list of unique names of measures to bind them from the OLAP cube.
             * @Default {[]}
             */
            measures?: DataSourceValuesMeasure[];

            /** Allows to set the axis name to place the measures items.
             * @Default {rows}
             */
            axis?: string;

            /** Indicates whether the field is a calculated field or not with Relational datasource.
             * @Default {false}
             */
            isCalculatedField?: boolean;

            /** Allows to set the formula for calculation of values for calculated members in Relational datasource.
             */
            formula?: string;
        }

        export interface DataSourceFiltersFilterItems {

            /** Sets the type of filter whether to include/exclude the mentioned values.
             * @Default {ej.PivotAnalysis.FilterType.Exclude}
             */
            filterType?: ej.PivotAnalysis.FilterType|string;

            /** Contains the collection of items to be included/excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceFilter {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceFiltersFilterItems;
        }

        export interface DataSource {

            /** Contains the respective cube name from OLAP database as string type.
             * @Default {â€œâ€}
             */
            cube?: string;

            /** To set the data source name to fetch data from that.
             * @Default {â€œâ€}
             */
            sourceInfo?: string;

            /** Set the provider name for PivotGauge to identify whether the provider is SSAS or Mondrian.
             * @Default {ssas}
             */
            providerName?: string;

            /** Provides the raw data source for the PivotGauge.
             * @Default {null}
             */
            data?: any;

            /** In connection with an OLAP database, this property contains the database name as string to fetch the data from the given connection string.
             * @Default {â€œâ€}
             */
            catalog?: string;

            /** Lists out the items to bind in columns section.
             * @Default {[]}
             */
            columns?: DataSourceColumn[];

            /** Lists out the items to bind in rows section.
             * @Default {[]}
             */
            rows?: DataSourceRow[];

            /** Lists out the items supports calculation in PivotGauge.
             * @Default {[]}
             */
            values?: DataSourceValue[];

            /** Lists out the items which supports filtering of values without displaying the members in UI in PivotGauge.
             * @Default {[]}
             */
            filters?: DataSourceFilter[];
        }

        export interface Frame {

            /** Specifies the frame type of PivotGauge.
             * @Default {fullcircle}
             */
            frameType?: string;

            /** Specifies the end angle for the half circular frame.
             * @Default {360}
             */
            halfCircleFrameEndAngle?: number;

            /** Specifies the start angle for the half circular frame.
             * @Default {180}
             */
            halfCircleFrameStartAngle?: number;
        }

        export interface LabelFormatSettings {

            /** Allows the user to change the number format of the label values in PivotGauge.
             * @Default {ej.PivotGauge.NumberFormat.Default}
             */
            numberFormat?: ej.PivotGauge.NumberFormat|string;

            /** Allows you to set the number of digits displayed after decimal point.
             * @Default {5}
             */
            decimalPlaces?: number;

            /** Allows you to add a text at the beginning of the label.
             */
            prefixText?: string;

            /** Allows you to add text at the end of the label.
             */
            suffixText?: string;
        }

        export interface ServiceMethodSettings {

            /** Allows the user to set the custom name for the service method responsible for initializing PivotGauge.
             * @Default {InitializeGauge}
             */
            initialize?: string;
        }

        enum NumberFormat {

            ///To set default format for label values.
            Default,

            ///To set currency format for label values.
            Currency,

            ///To set percentage format for label values.
            Percentage,

            ///To set fraction format for label values.
            Fraction,

            ///To set scientific format for label values.
            Scientific,

            ///To set text format for label values.
            Text,

            ///To set notation format for label values.
            Notation
        }

    }

    class PivotTreeMap extends ej.Widget {
        static fn: PivotTreeMap;
        constructor(element: JQuery | Element, options?: PivotTreeMap.Model);
        static Locale: any;
        model: PivotTreeMap.Model;
        defaults: PivotTreeMap.Model;

        /** Performs an asynchronous HTTP (AJAX) request.
         * @returns {void}
         */
        doAjaxPost(): void;

        /** Performs an asynchronous HTTP (FullPost) submit.
         * @returns {void}
         */
        doPostBack(): void;

        /** Returns the OlapReport string maintained along with the axis elements information.
         * @returns {string}
         */
        getOlapReport(): string;

        /** Sets the OlapReport string along with the axis information and maintains it in a property.
         * @returns {void}
         */
        setOlapReport(): void;

        /** Returns the JSON records formed to render the control.
         * @returns {any[]}
         */
        getJSONRecords(): any[];

        /** Sets the JSON records to render the control.
         * @returns {void}
         */
        setJSONRecords(): void;

        /** Renders the control with the pivot engine obtained from OLAP cube.
         * @returns {void}
         */
        generateJSON(): void;

        /** This function receives the JSON formatted datasource to render the PivotTreeMap control.
         * @returns {void}
         */
        renderTreeMapFromJSON(): void;

        /** This function receives the update from service-end, which would be utilized for rendering the widget.
         * @returns {void}
         */
        renderControlSuccess(): void;

        /** This function Destroy the PivotTreemap widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace PivotTreeMap {

        export interface Model {

            /** Specifies the CSS class to PivotTreeMap to achieve custom theme.
             * @Default {â€œâ€}
             */
            cssClass?: string;

            /** Initializes the data source for the PivotTreeMap widget, when it functions completely on client-side.
             * @Default {{}}
             */
            dataSource?: DataSource;

            /** Object utilized to pass additional information between client-end and service-end.
             * @Default {{}}
             */
            customObject?: any;

            /** Allows the user to enable PivotTreeMapâ€™s responsiveness in the browser layout.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Allows the user to set the localized language for the widget.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the mode for the PivotTreeMap widget for binding data source either in server-side or client-side.
             * @Default {ej.Pivot.OperationalMode.ClientMode}
             */
            operationalMode?: ej.Pivot.OperationalMode|string;

            /** Allows the user to set custom name for the methods at service-end, communicated on AJAX post.
             * @Default {{}}
             */
            serviceMethodSettings?: ServiceMethodSettings;

            /** Connects the service using the specified URL for any server updates.
             * @Default {â€œâ€}
             */
            url?: string;

            /** Allows you to enable &quot;withCredentials&quot; property inside XMLHttpRequest object for CORS(Cross-Origin Resource Sharing) request.
             * @Default {false}
             */
            enableXHRCredentials?: boolean;

            /** Triggers when it reaches client-side after any AJAX request.
             */
            afterServiceInvoke?(e: AfterServiceInvokeEventArgs): void;

            /** Triggers before any AJAX request is passed from PivotTreeMap to service methods.
             */
            beforeServiceInvoke?(e: BeforeServiceInvokeEventArgs): void;

            /** Triggers when PivotTreeMap starts to render.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when drill up/down happens in PivotTreeMap control. And it returns the outer HTML of PivotTreeMap control.
             */
            drillSuccess?(e: DrillSuccessEventArgs): void;

            /** Triggers when PivotTreeMap widget completes all operations at client-side after any AJAX request.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Triggers when any error occurred during AJAX request.
             */
            renderFailure?(e: RenderFailureEventArgs): void;

            /** Triggers when PivotTreeMap successfully reaches client-side after any AJAX request.
             */
            renderSuccess?(e: RenderSuccessEventArgs): void;
        }

        export interface AfterServiceInvokeEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface BeforeServiceInvokeEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface LoadEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface DrillSuccessEventArgs {

            /** return the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface RenderFailureEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;

            /** returns the error stack trace of the original exception.
             */
            message?: string;
        }

        export interface RenderSuccessEventArgs {

            /** returns the current action of PivotTreeMap control.
             */
            action?: string;

            /** returns the custom object bound with PivotTreeMap control.
             */
            customObject?: any;

            /** returns the HTML element of PivotTreeMap control.
             */
            element?: any;
        }

        export interface DataSourceColumnsFilterItems {

            /** Contains the collection of items to be excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceColumn {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows the user to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceColumnsFilterItems;
        }

        export interface DataSourceRowsFilterItems {

            /** Contains the collection of items to be excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceRow {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Allows the user to indicate whether the added item is a named set or not.
             * @Default {false}
             */
            isNamedSets?: boolean;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceRowsFilterItems;
        }

        export interface DataSourceValuesMeasure {

            /** Allows the user to bind the measure from OLAP datasource by using its unique name as field name.
             */
            fieldName?: string;
        }

        export interface DataSourceValue {

            /** This holds the list of unique names of measures to bind them from the OLAP cube.
             * @Default {[]}
             */
            measures?: DataSourceValuesMeasure[];

            /** Allows to set the axis name to place the measures items.
             * @Default {rows}
             */
            axis?: string;
        }

        export interface DataSourceFiltersFilterItems {

            /** Contains the collection of items to be excluded among the field members.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface DataSourceFilter {

            /** Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string;

            /** Applies filter to the field members.
             * @Default {null}
             */
            filterItems?: DataSourceFiltersFilterItems;
        }

        export interface DataSource {

            /** Provides the raw data source for the PivotTreeMap.
             * @Default {null}
             */
            data?: any;

            /** Contains the respective cube name from OLAP database as string type.
             * @Default {â€œâ€}
             */
            cube?: string;

            /** To set the data source name to fetch data from that.
             * @Default {â€œâ€}
             */
            sourceInfo?: string;

            /** Set the provider name for PivotTreeMap to identify whether the provider is SSAS or Mondrian.
             * @Default {ssas}
             */
            providerName?: string;

            /** In connection with an OLAP database, this property contains the database name as string to fetch the data from the given connection string.
             * @Default {â€œâ€}
             */
            catalog?: string;

            /** Lists out the items to be displayed as series of PivotTreeMap.
             * @Default {[]}
             */
            columns?: DataSourceColumn[];

            /** Lists out the items to be displayed as segments of PivotTreeMap.
             * @Default {[]}
             */
            rows?: DataSourceRow[];

            /** Lists out the items supports calculation in PivotTreeMap.
             * @Default {[]}
             */
            values?: DataSourceValue[];

            /** Lists out the items which supports filtering of values without displaying the members in UI in PivotTreeMap.
             * @Default {[]}
             */
            filters?: DataSourceFilter[];
        }

        export interface ServiceMethodSettings {

            /** Allows the user to set the custom name for the service method responsible for initializing PivotTreeMap.
             * @Default {InitializeTreemap}
             */
            initialize?: string;

            /** Allows the user to set the custom name for the service method responsible for drilling up/down operation in PivotTreeMap.
             * @Default {DrillTreeMap}
             */
            drillDown?: string;
        }
    }

    class Schedule extends ej.Widget {
        static fn: Schedule;
        constructor(element: JQuery | Element, options?: Schedule.Model);
        static Locale: any;
        model: Schedule.Model;
        defaults: Schedule.Model;

        /** It is used to add the resources dynamically in the scheduler. It renders the resource based on the index if it is available or else it renders this resource at end of all
         * resources.
         * @param {any} Resource object which can be defined with all the available options of resources.
         * @param {string} Defines the name of the resource collection to which this object needs to be added.
         * @param {number} It is optional. If it is available, this render the resource at the given specified index location. Else render at end of the all resources.
         * @returns {void}
         */
        addResource(resourceObject: any, name: string, index: number): void;

        /** This method is used to delete the appointment based on the guid value or the appointment data passed to it.
         * @param {string|any} GUID value of an appointment element or an appointment object
         * @returns {void}
         */
        deleteAppointment(data: string|any): void;

        /** Destroys the Schedule widget. All the events bound using this._on are unbound automatically and the control is moved to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Exports the appointments from the Schedule control.
         * @param {string} It refers the controller action name to redirect. (For MVC)
         * @param {string} It refers the server event name.(For ASP)
         * @param {string|number} Pass the id of an appointment, in case if a single appointment needs to be exported. Otherwise, it takes the null value.
         * @returns {void}
         */
        exportSchedule(action: string, serverEvent: string, id: string|number): void;

        /** Exports the appointments from the Schedule control and saves it in a Excel file.
         * @param {string} It refers the controller action name to redirect. (For MVC)
         * @param {string} It refers the server event name.(For ASP)
         * @param {boolean} Indicates whether to export all the appointments including or excluding the individual occurrences of the recurrence appointments.
         * @returns {void}
         */
        exportToExcel(action: string, serverEvent: string, type: boolean): void;

        /** Searches and filters the appointments from appointment list of Schedule control.
         * @param {any[]} Holds array of one or more conditional objects for filtering the appointments based on it.
         * @returns {any[]}
         */
        filterAppointments(filterConditions: any[]): any[];

        /** Gets the complete appointment list of Schedule control.
         * @returns {any[]}
         */
        getAppointments(): any[];

        /** Prints the entire Scheduler or a single appointment based on the appointment data passed as an argument to it. Simply calling the print() method, without passing any argument will
         * print the entire Scheduler.
         * @param {any} Either accepts no arguments at all or else accepts an appointment object.
         * @returns {void}
         */
        print(data: any): void;

        /** Refreshes the Scroller of Scheduler while using it within some other controls or application.
         * @returns {void}
         */
        refreshScroller(): void;

        /** It is used to remove the resources dynamically from the scheduler. It removed the resource based on the resource id with the given resource collection name.
         * @param {string|number} Defines the Id of the resource.
         * @param {string} Defines the name of the resource collection which this resource id belongs.
         * @returns {void}
         */
        removeResource(resourceId: string|number, name: string): void;

        /** It is used to save the appointment. The appointment object is based on the argument passed to this method.
         * @param {any} appointment object which includes appointment details
         * @returns {void}
         */
        saveAppointment(appointmentObject: any): void;

        /** Generate the recurrence rule as a string, based on the repeat options selected.
         * @returns {string}
         */
        getRecurrenceRule(): string;

        /** Retrieves the time slot information (start/end time and resource details) of the given element. The parameter is optional - as when no element is passed to it, the currently
         * selected cell information will be retrieved. When multiple cells are selected in the Scheduler, it is not necessary to provide the parameter.
         * @param {any} TD element object rendered as Scheduler work cell
         * @returns {any}
         */
        getSlotByElement(element: any): any;

        /** Searches the appointments from the appointment list of Schedule control based on the provided search string in its argument list.
         * @param {any|string} Defines the search word or the filter condition, based on which the appointments are filtered from the list.
         * @param {string} Defines the field name on which the search is to be made.
         * @param {ej.FilterOperators|string} Defines the filterOperator value for the search operation.
         * @param {boolean} Defines the ignoreCase value for performing the search operation.
         * @returns {any[]}
         */
        searchAppointments(searchString: any|string, field: string, operator: ej.FilterOperators|string, ignoreCase: boolean): any[];

        /** Refreshes the entire Schedule control.
         * @returns {void}
         */
        refresh(): void;

        /** Refreshes only the appointment elements within the Schedule control.
         * @returns {void}
         */
        refreshAppointments(): void;

        /** Passes the server-side action and data to the client-side for rendering the modified appointment list on the Schedule control.
         * @returns {void}
         */
        notifyChanges(): void;
    }
    export namespace Schedule {

        export interface Model {

            /** When set to true, Schedule allows the appointments to be dragged and dropped at required time.
             * @Default {true}
             */
            allowDragAndDrop?: boolean;

            /** When set to true, allows the user to create/edit appointments inline - simply through a single click made either on the Scheduler cells or on the existing appointmentâ€™s Subject
             * text respectively. Pressing enter key after the new Subject text   typed onto the inline created text box, will save/update the appointments appropriately.
             * @Default {false}
             */
            allowInline?: boolean;

            /** When set to false, disables the appointment delete option on the Scheduler.
             * @Default {true}
             */
            allowDelete?: boolean;

            /** When set to true, Scheduler allows interaction through keyboard shortcut keys.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** It includes the dataSource option and the fields related to Schedule appointments. The appointment fields within the appointmentSettings can accept both string and object type
             * values. To apply validation rules on the appointment window fields, then the appointment fields needs to be defined with object type values.
             */
            appointmentSettings?: AppointmentSettings;

            /** Template design that applies on the Schedule appointments. All the field names that are mapped from dataSource to the appropriate field properties within the appointmentSettings
             * can be used within the template.
             * @Default {null}
             */
            appointmentTemplateId?: string;

            /** Accepts the custom CSS class name that defines specific user-defined styles and themes to be applied for partial or complete elements of the Schedule.
             */
            cssClass?: string;

            /** Sets various categorize colors to the Schedule appointments to differentiate it.
             */
            categorizeSettings?: CategorizeSettings;

            /** Sets the height for Schedule cells.
             * @Default {20px}
             */
            cellHeight?: string;

            /** Sets the width for Schedule cells.
             */
            cellWidth?: string;

            /** Holds all options related to the context menu settings of Scheduler.
             */
            contextMenuSettings?: ContextMenuSettings;

            /** Sets current date of the Schedule. The Schedule displays initially with the date that is provided here.
             * @Default {new Date()}
             */
            currentDate?: any;

            /** Sets current view of the Schedule. Schedule renders initially with the view that is specified here. The available views are day, week, workweek, month, agenda and custom view -
             * from which any one of the required view can be set to the Schedule. It accepts both string or enum values. The enum values that are accepted by
             * currentView(ej.Schedule.CurrentView) are as follows,
             * @Default {ej.Schedule.CurrentView.Week}
             */
            currentView?: string|ej.Schedule.CurrentView;

            /** Sets the date format for Schedule.
             */
            dateFormat?: string;

            /** When set to true, shows the previous/next appointment navigator button on the Scheduler.
             * @Default {true}
             */
            showAppointmentNavigator?: boolean;

            /** When set to true, enables the resize behavior of appointments within the Schedule.
             * @Default {true}
             */
            enableAppointmentResize?: boolean;

            /** When set to true, enables the loading of Schedule appointments based on your demand. With this load on demand concept, the data consumption of the Schedule can be limited.
             * @Default {false}
             */
            enableLoadOnDemand?: boolean;

            /** Saves the current model value to browser cookies for state maintenance. When the page gets refreshed, Schedule control values are retained.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** When set to true, the Schedule layout and behavior changes as per the common RTL conventions.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Sets the end hour time limit to be displayed on the Schedule.
             * @Default {24}
             */
            endHour?: number;

            /** To configure resource grouping on the Schedule.
             */
            group?: Group;

            /** Sets the height of the Schedule. Accepts both pixel and percentage values.
             * @Default {1120px}
             */
            height?: string;

            /** To define the work hours within the Schedule control.
             */
            workHours?: WorkHours;

            /** When set to true, enables the Schedule to observe Daylight Saving Time for supported timezones.
             * @Default {false}
             */
            isDST?: boolean;

            /** When set to true, adapts the Schedule layout to fit the screen size of devices on which it renders.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Sets the specific culture to the Schedule.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the maximum date limit to display on the Schedule. Setting maxDate with specific date value disallows the Schedule to navigate beyond that date.
             * @Default {new Date(2099, 12, 31)}
             */
            maxDate?: any;

            /** Sets the minimum date limit to display on the Schedule. Setting minDate with specific date value disallows the Schedule to navigate beyond that date.
             * @Default {new Date(1900, 01, 01)}
             */
            minDate?: any;

            /** Sets the mode of Schedule rendering either in a vertical or horizontal direction. It accepts either string(&quot;vertical&quot; or &quot;horizontal&quot;) or enum values. The enum
             * values that are accepted by orientation(ej.Schedule.Orientation) are as follows,
             * @Default {ej.Schedule.Orientation.Vertical}
             */
            orientation?: string|ej.Schedule.Orientation;

            /** Holds all the options related to priority settings of the Schedule.
             */
            prioritySettings?: PrioritySettings;

            /** When set to true, disables the interaction with the Schedule appointments, simply allowing the date and view navigation to occur.
             * @Default {false}
             */
            readOnly?: boolean;

            /** Holds all the options related to reminder settings of the Schedule.
             */
            reminderSettings?: ReminderSettings;

            /** Defines the specific start and end dates to be rendered in the Schedule control. To render such user-specified custom date ranges in the Schedule control, set the currentView
             * property to ej.Schedule.CurrentView.CustomView.
             * @Default {null}
             */
            renderDates?: RenderDates;

            /** Template design that applies on the Schedule resource header.
             * @Default {null}
             */
            resourceHeaderTemplateId?: string;

            /** Holds all the options related to the resources settings of the Schedule. It is a collection of one or more resource objects, where the levels of resources are rendered on the
             * Schedule based on the order of the resource data provided within this collection.
             * @Default {null}
             */
            resources?: Resource[];

            /** When set to true, displays the all-day row cells on the Schedule.
             * @Default {true}
             */
            showAllDayRow?: boolean;

            /** When set to false, hides the weekend days on all the Scheduler views.
             * @Default {true}
             */
            showWeekend?: boolean;

            /** When set to true, displays the current time indicator on the Schedule.
             * @Default {true}
             */
            showCurrentTimeIndicator?: boolean;

            /** When set to true, displays the header bar on the Schedule.
             * @Default {true}
             */
            showHeaderBar?: boolean;

            /** When set to true, displays the location field additionally on Schedule appointment window.
             * @Default {false}
             */
            showLocationField?: boolean;

            /** When set to false, doesn't render the start and end timezone fields on the Schedule appointment window.
             * @Default {true}
             */
            showTimeZoneFields?: boolean;

            /** When set to true, displays the quick window for every single click made on the Schedule cells or appointments.
             * @Default {true}
             */
            showQuickWindow?: boolean;

            /** Sets the start hour time range to be displayed on the Schedule.
             * @Default {0}
             */
            startHour?: number;

            /** Sets either 12 or 24 hour time mode on the Schedule. It accepts either the string value(&quot;12&quot; or &quot;24&quot;) or the below mentioned enum values. The enum values that
             * are accepted by timeMode(ej.Schedule.TimeMode) are as follows,
             * @Default {null}
             */
            timeMode?: string|ej.Schedule.TimeMode;

            /** Sets the timezone for the Schedule.
             * @Default {null}
             */
            timeZone?: string;

            /** Sets the collection of timezone items to be bound to the Schedule. Only the items bound to this property gets listed out in the timezone field of the appointment window.
             */
            timeZoneCollection?: TimeZoneCollection;

            /** Defines the view collection to be displayed on the Schedule. By default, it displays all the views namely, Day, Week, WorkWeek and Month.
             * @Default {[Day, Week, WorkWeek, Month, Agenda]}
             */
            views?: any[];

            /** Sets the width of the Schedule. Accepts both pixel and percentage values.
             * @Default {100%}
             */
            width?: string;

            /** When set to true, Schedule allows the validation of recurrence pattern to take place before it is being assigned to the appointments. For example, when one of the instance of
             * recurrence appointment is dragged beyond the next or previous instance of the same recurrence appointment, a pop-up is displayed with the validation message disallowing the drag
             * functionality.
             * @Default {true}
             */
            enableRecurrenceValidation?: boolean;

            /** Sets the week to display more than one week appointment summary.
             */
            agendaViewSettings?: AgendaViewSettings;

            /** Sets specific day as the starting day of the week.
             * @Default {null}
             */
            firstDayOfWeek?: string;

            /** Sets different day collection within workWeek view.
             * @Default {[Monday, Tuesday, Wednesday, Thursday, Friday]}
             */
            workWeek?: any[];

            /** Allows to pop-up appointment details in a tooltip while hovering over the appointments.
             */
            tooltipSettings?: TooltipSettings;

            /** Holds all the options related to the time scale of Scheduler. The timeslots either major or minor slots can be customized with this property.
             */
            timeScale?: TimeScale;

            /** When set to true, shows the delete confirmation dialog before deleting an appointment.
             * @Default {true}
             */
            showDeleteConfirmationDialog?: boolean;

            /** Accepts the id value of the template layout defined for the all-day cells and customizes it.
             * @Default {null}
             */
            allDayCellsTemplateId?: string;

            /** Accepts the id value of the template layout defined for the work cells and month cells.
             * @Default {null}
             */
            workCellsTemplateId?: string;

            /** Accepts the id value of the template layout defined for the date header cells and customizes it.
             * @Default {null}
             */
            dateHeaderTemplateId?: string;

            /** when set to false, allows the height of the work-cells to adjust automatically (either expand or collapse) based on the number of appointment count it has.
             * @Default {true}
             */
            showOverflowButton?: boolean;

            /** Allows setting draggable area for the Scheduler appointments. Also, turns on the external drag and drop, when set with some specific external drag area name.
             */
            appointmentDragArea?: string;

            /** When set to true, displays the other months days from the current month on the Schedule.
             * @Default {true}
             */
            showNextPrevMonth?: boolean;

            /** Blocks the user-specific time interval on the Scheduler, so that no appointments can be created on that particular time slots. It includes the dataSource option and also the
             * fields related to block intervals.
             */
            blockoutSettings?: BlockoutSettings;

            /** Triggers on the beginning of every action that starts within the Schedule.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggers after the completion of every action within the Schedule.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggers after an appointment is clicked.
             */
            appointmentClick?(e: AppointmentClickEventArgs): void;

            /** Triggers before the appointment is being removed from the Scheduler.
             */
            beforeAppointmentRemove?(e: BeforeAppointmentRemoveEventArgs): void;

            /** Triggers before the edited appointment is being saved.
             */
            beforeAppointmentChange?(e: BeforeAppointmentChangeEventArgs): void;

            /** Triggers on hovering the mouse over the appointments.
             */
            appointmentHover?(e: AppointmentHoverEventArgs): void;

            /** Triggers before the new appointment gets saved.
             */
            beforeAppointmentCreate?(e: BeforeAppointmentCreateEventArgs): void;

            /** Triggers before the appointment window opens.
             */
            appointmentWindowOpen?(e: AppointmentWindowOpenEventArgs): void;

            /** Triggers before the context menu opens.
             */
            beforeContextMenuOpen?(e: BeforeContextMenuOpenEventArgs): void;

            /** Triggers after the cell is clicked.
             */
            cellClick?(e: CellClickEventArgs): void;

            /** Triggers after the cell is clicked twice.
             */
            cellDoubleClick?(e: CellDoubleClickEventArgs): void;

            /** Triggers on hovering the mouse overs the cells.
             */
            cellHover?(e: CellHoverEventArgs): void;

            /** Triggers when the Scheduler completely renders on the page.
             */
            create?(e: CreateEventArgs): void;

            /** Triggers when the Scheduler and all its sub-components gets destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggers while the appointment is being dragged over the work cells.
             */
            drag?(e: DragEventArgs): void;

            /** Triggers when the appointment dragging begins.
             */
            dragStart?(e: DragStartEventArgs): void;

            /** Triggers when the appointment is dropped.
             */
            dragStop?(e: DragStopEventArgs): void;

            /** Triggers after the menu/sub-menu items within the context menu is clicked.
             */
            menuItemClick?(e: MenuItemClickEventArgs): void;

            /** Triggers after the Schedule view or date is navigated.
             */
            navigation?(e: NavigationEventArgs): void;

            /** Triggers every time before the elements of the scheduler such as work cells, time cells or header cells and so on renders or re-renders on a page.
             */
            queryCellInfo?(e: QueryCellInfoEventArgs): void;

            /** Triggers when the reminder is raised for an appointment based on the alertBefore value.
             */
            reminder?(e: ReminderEventArgs): void;

            /** Triggers while resizing the appointment.
             */
            resize?(e: ResizeEventArgs): void;

            /** Triggers when the appointment resizing begins.
             */
            resizeStart?(e: ResizeStartEventArgs): void;

            /** Triggers when an appointment resizing stops.
             */
            resizeStop?(e: ResizeStopEventArgs): void;

            /** Triggers when the overflow button is clicked.
             */
            overflowButtonClick?(e: OverflowButtonClickEventArgs): void;

            /** Triggers while mouse hovering on the overflow button.
             */
            overflowButtonHover?(e: OverflowButtonHoverEventArgs): void;

            /** Triggers when any of the keyboard keys are pressed.
             */
            keyDown?(e: KeyDownEventArgs): void;

            /** Triggers after the new appointment is saved.
             */
            appointmentCreated?(e: AppointmentCreatedEventArgs): void;

            /** Triggers after an existing appointment is edited.
             */
            appointmentChanged?(e: AppointmentChangedEventArgs): void;

            /** Triggers after the appointment is deleted.
             */
            appointmentRemoved?(e: AppointmentRemovedEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data about the view change action.
             */
            data?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the action begin request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the name of the CRUD action performed.
             */
            currentAction?: string;

            /** Returns the GUid of appointment.
             */
            id?: string;
        }

        export interface ActionCompleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data about view change action.
             */
            data?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the action complete request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the name of the CRUD action performed.
             */
            currentAction?: string;

            /** Returns the appointment data dropped.
             */
            appointment?: any;
        }

        export interface AppointmentClickEventArgs {

            /** Returns the object of appointmentClick event.
             */
            object?: any;

            /** Returns the clicked appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeAppointmentRemoveEventArgs {

            /** Returns the deleted appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the CRUD action performed.
             */
            currentAction?: string;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface BeforeAppointmentChangeEventArgs {

            /** Returns the edited appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the CRUD action performed.
             */
            currentAction?: string;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            requestType?: string;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface AppointmentHoverEventArgs {

            /** Returns the object of appointmentHover event.
             */
            object?: any;

            /** Returns the hovered appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeAppointmentCreateEventArgs {

            /** Returns the appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface AppointmentWindowOpenEventArgs {

            /** returns the object of appointmentWindowOpen event while selecting the detail option from quick window or edit appointment or edit series option.
             */
            object?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the end time of the double clicked cell.
             */
            endTime?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the action name that triggers window open.
             */
            originalEventType?: string;

            /** Returns the start time of the double clicked cell.
             */
            startTime?: any;

            /** Returns the target of the double clicked cell.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the edit appointment object.
             */
            appointment?: any;

            /** Returns the edit occurrence option value.
             */
            edit?: boolean;
        }

        export interface BeforeContextMenuOpenEventArgs {

            /** Returns the object of beforeContextMenuOpen event.
             */
            object?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current cell index value.
             */
            cellIndex?: number;

            /** Returns the current date value.
             */
            currentDate?: any;

            /** Returns the current resource details, when multiple resources are present, otherwise returns null.
             */
            resources?: any;

            /** Returns the current appointment details while opening the menu from appointment.
             */
            appointment?: any;

            /** Returns the object of before opening menu target.
             */
            events?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the index of the cell.
             */
            cellIndex?: number;

            /** Returns the end time of the clicked cell.
             */
            endTime?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns day, date and time information.
             */
            quickString?: string;

            /** Returns the object of the resource.
             */
            resources?: any;

            /** Returns the start time of the clicked cell.
             */
            startTime?: any;

            /** Returns the target of the clicked cell.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellDoubleClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the end time of the double clicked cell.
             */
            endTime?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the object of the resource.
             */
            resources?: any;

            /** Returns the start time of the double clicked cell.
             */
            startTime?: any;

            /** Returns the target of the double clicked cell.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CellHoverEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the index of the hovered cell.
             */
            cellIndex?: number;

            /** Returns the end time of the clicked cell.
             */
            endTime?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the object of the resource.
             */
            resources?: any;

            /** Returns the start time of the clicked cell.
             */
            startTime?: any;

            /** Returns the target of the clicked cell.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface DragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the target of the drag over appointment.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the default dragging interval range in minutes
             */
            interval?: number;
        }

        export interface DragStartEventArgs {

            /** Returns the dragged appointment.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the target of the dragging appointment.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DragStopEventArgs {

            /** Returns the dropped appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface MenuItemClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the object of menu item event.
             */
            events?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the right clicked cell details.
             */
            targetInfo?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface NavigationEventArgs {

            /** Returns the current date object.
             */
            currentDate?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the current view value.
             */
            currentView?: string;

            /** Returns the previous view value.
             */
            previousView?: string;

            /** Returns the target of the action.
             */
            target?: any;

            /** Returns the name of the Scheduler event.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the previous date of the Schedule.
             */
            previousDate?: any;
        }

        export interface QueryCellInfoEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the current appointment data.
             */
            appointment?: any;

            /** Returns the currently rendering DOM element.
             */
            element?: any;

            /** Returns the name of the currently rendering element on the scheduler.
             */
            requestType?: string;

            /** Returns the cell type which is currently rendering on the Scheduler.
             */
            cellType?: string;

            /** Returns the start date of the currently rendering appointment.
             */
            currentAppointmentDate?: any;

            /** Returns the currently rendering cell information.
             */
            cell?: any;

            /** Returns the currently rendering resource details.
             */
            resource?: any;

            /** Returns the currently rendering date information.
             */
            currentDay?: any;
        }

        export interface ReminderEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the appointment object for which the reminder is raised.
             */
            reminderAppointment?: any;
        }

        export interface ResizeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the resize element value.
             */
            element?: any;

            /** Returns the default appointment resizing range .
             */
            interval?: number;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeStartEventArgs {

            /** Returns the object of the resized appointment.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the resize element value.
             */
            element?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ResizeStopEventArgs {

            /** Returns the resized appointment value.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the target of the resized appointment.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface OverflowButtonClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the icon rendered cell information.
             */
            Datas?: any;

            /** Returns the object of menu item event.
             */
            events?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface OverflowButtonHoverEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the icon rendered cell information.
             */
            datas?: any;

            /** Returns the object of menu item event.
             */
            event?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface KeyDownEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the object of menu item event.
             */
            events?: any;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface AppointmentCreatedEventArgs {

            /** Returns the appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            requestType?: string;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface AppointmentChangedEventArgs {

            /** Returns the edited appointment object.
             */
            appointment?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the CRUD action performed.
             */
            currentAction?: string;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            requestType?: string;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface AppointmentRemovedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the deleted appointment object.
             */
            appointment?: any;

            /** Returns the name of the CRDU action performed.
             */
            currentAction?: string;

            /** Returns the Schedule model.
             */
            model?: ej.Schedule.Model;

            /** Returns the name of the Scheduler event.
             */
            requestType?: string;

            /** Returns the name of the Scheduler event.
             */
            type?: string;
        }

        export interface AppointmentSettings {

            /** The dataSource option accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule appointments.
             * @Default {[]}
             */
            dataSource?: any|any[];

            /** It holds either the ej.Query() object or simply the query string that retrieves the specified records from the table.
             * @Default {null}
             */
            query?: string;

            /** Assign the table name from where the records are to be fetched for the Schedule.
             * @Default {null}
             */
            tableName?: string;

            /** When set to false, doesn't consider the time difference offset calculation on appointment time.
             * @Default {true}
             */
            applyTimeOffset?: boolean;

            /** When set to true, introduces a new option to edit only the future occurrences of the appointments in a recurrence series from the currently selected appointment's date.
             * @Default {false}
             */
            editFutureEventsOnly?: boolean;

            /** Binds the id field name in dataSource to the id of Schedule appointments. It denotes the unique id assigned to appointments.
             * @Default {null}
             */
            id?: string;

            /** Binds the name of startTime field in the dataSource with start time of the Schedule appointments. It indicates the date and Time when Schedule appointment actually starts.
             * @Default {null}
             */
            startTime?: string;

            /** Binds the name of endTime field in dataSource with the end time of Schedule appointments. It indicates the date and time when Schedule appointment actually ends.
             * @Default {null}
             */
            endTime?: string;

            /** Binds the name of subject field in the dataSource to appointment Subject. Indicates the Subject or title that gets displayed on Schedule appointments.
             * @Default {null}
             */
            subject?: string;

            /** Binds the description field name in dataSource. It indicates the appointment description.
             * @Default {null}
             */
            description?: string;

            /** Binds the name of recurrence field in dataSource. It indicates whether the appointment is a recurrence appointment or not.
             * @Default {null}
             */
            recurrence?: string;

            /** Binds the name of recurrenceRule field in dataSource. It indicates the recurrence pattern associated with appointments.
             * @Default {null}
             */
            recurrenceRule?: string;

            /** Binds the name of allDay field in dataSource. It indicates whether the appointment is an all-day appointment or not.
             * @Default {null}
             */
            allDay?: string;

            /** Binds one or more fields in resource collection dataSource. It maps the resource field names with appointments denoting the resource of appointments actually belongs.
             * @Default {null}
             */
            resourceFields?: string;

            /** Binds the name of categorize field in dataSource. It indicates the categorize value, red categorize, green, yellow and so on applied to the appointments.
             * @Default {null}
             */
            categorize?: string;

            /** Binds the name of location field in dataSource. It indicates the appointment location.
             * @Default {null}
             */
            location?: string;

            /** Binds the name of the priority field in dataSource. It indicates the priority, high, low, medium and none of the appointments.
             * @Default {null}
             */
            priority?: string;

            /** Binds the name of start timezone field in dataSource. It indicates the timezone of appointment start date. When startTimeZone field is not mentioned, the appointment uses the
             * Schedule timeZone or System timeZone.
             * @Default {null}
             */
            startTimeZone?: string;

            /** Binds the name of end timezone field in dataSource. It indicates the timezone of appointment end date. When the endTimeZone field is not mentioned, the appointment uses the
             * Schedule timeZone or System timeZone.
             * @Default {null}
             */
            endTimeZone?: string;
        }

        export interface CategorizeSettings {

            /** When set to true, enables the multiple selection of categories to be applied for the appointments.
             * @Default {false}
             */
            allowMultiple?: boolean;

            /** When set to true, enables the categories option to be applied for the appointments.
             * @Default {false}
             */
            enable?: boolean;

            /** The dataSource option accepts either the JSON object collection or DataManager [ej.DataManager] instance that contains the categorize data.
             */
            dataSource?: any[]|any;

            /** Binds id field name in the dataSource to id of category data.
             * @Default {id}
             */
            id?: string;

            /** Binds text field name in the dataSource to category text.
             * @Default {text}
             */
            text?: string;

            /** Binds color field name in the dataSource to category color.
             * @Default {color}
             */
            color?: string;

            /** Binds fontColor field name in the dataSource to category font.
             * @Default {fontColor}
             */
            fontColor?: string;
        }

        export interface ContextMenuSettingsMenuItems {

            /** All the appointment related context menu items are grouped under this appointment menu collection.
             */
            appointment?: any[];

            /** All the Scheduler cell related context menu items are grouped under this cells menu item collection.
             */
            cells?: any[];
        }

        export interface ContextMenuSettings {

            /** When set to true, enables the context menu options available for the Schedule cells and appointments.
             * @Default {false}
             */
            enable?: boolean;

            /** Contains all the default context menu options that are applicable for both Schedule cells and appointments. It also supports adding custom menu items to cells or appointment
             * collection.
             */
            menuItems?: ContextMenuSettingsMenuItems;
        }

        export interface Group {

            /** Holds the array of resource names to be grouped on the Schedule.
             */
            resources?: any[];

            /** When set to true, allows performing CRUD actions simultaneously on all the grouped appointments of multiple resources.
             * @Default {false}
             */
            allowGroupEditing?: boolean;
        }

        export interface WorkHours {

            /** When set to true, highlights the work hours of the Schedule.
             * @Default {true}
             */
            highlight?: boolean;

            /** Sets the start time to depict the start of working or business hour in a day.
             * @Default {9}
             */
            start?: number;

            /** Sets the end time to depict the end of working or business hour in a day.
             * @Default {18}
             */
            end?: number;
        }

        export interface PrioritySettings {

            /** When set to true, enables the priority options available for the Schedule appointments.
             * @Default {false}
             */
            enable?: boolean;

            /** The dataSource option can accept the JSON object collection that contains the priority related data.
             * @Default {{% highlight js%}[{ text: None, value: none },{ text: High, value: high },{ text: Medium, value: medium },{ text: Low, value: low }]{% endhighlight %}}
             */
            dataSource?: any|any[];

            /** Binds text field name in the dataSource to prioritySettings text. These text gets listed out in priority field of the appointment window.
             * @Default {text}
             */
            text?: string;

            /** Binds value field name in the dataSource to prioritySettings value. These field names usually accepts four priority values by default, high, low, medium and none.
             * @Default {value}
             */
            value?: string;

            /** Allows priority field customization in the appointment window to add custom icons denoting the priority level for the appointments.
             * @Default {null}
             */
            template?: string;
        }

        export interface ReminderSettings {

            /** When set to true, enables the reminder option available for the Schedule appointments.
             * @Default {false}
             */
            enable?: boolean;

            /** Sets the timing, when the reminders are to be alerted for the Schedule appointments.
             * @Default {5}
             */
            alertBefore?: number;
        }

        export interface RenderDates {

            /** Sets the start of custom date range to be rendered in the Schedule.
             * @Default {null}
             */
            start?: any;

            /** Sets the end limit of the custom date range.
             * @Default {null}
             */
            end?: any;
        }

        export interface ResourcesResourceSettings {

            /** The dataSource option accepts either JSON object collection or DataManager (ejDataManager) instance that contains the resources related data.
             * @Default {[]}
             */
            dataSource?: any|any[];

            /** Binds text field name in the dataSource to resourceSettings text. These text gets listed out in resources field of the appointment window.
             * @Default {null}
             */
            text?: string;

            /** Binds id field name in the dataSource to resourceSettings id.
             * @Default {null}
             */
            id?: string;

            /** Binds groupId field name in the dataSource to resourceSettings groupId.
             * @Default {null}
             */
            groupId?: string;

            /** Binds color field name in the dataSource to resourceSettings color. The color specified here gets applied to the Schedule appointments denoting to the resource it belongs.
             * @Default {null}
             */
            color?: string;

            /** Binds the starting work hour field name in the dataSource. It's optional, but providing it with some numeric value will set the starting work hour for specific resources.
             * @Default {null}
             */
            start?: string;

            /** Binds the end work hour field name in the dataSource. It's optional, but providing it with some numeric value will set the end work hour for specific resources.
             * @Default {null}
             */
            end?: string;

            /** Binds the resources working days field name in the dataSource. It's optional, and accepts the array of strings (week day names). When provided with specific collection of days
             * (array of day names), only those days will render for the specific resources.
             * @Default {null}
             */
            workWeek?: string;

            /** Binds appointmentClass field name in the dataSource. It applies custom CSS class name to appointments depicting to the resource it belongs.
             * @Default {null}
             */
            appointmentClass?: string;
        }

        export interface Resource {

            /** It holds the name of the resource field to be bound to the Schedule appointments that contains the resource Id.
             * @Default {null}
             */
            field?: string;

            /** It holds the title name of the resource field to be displayed on the Schedule appointment window.
             * @Default {null}
             */
            title?: string;

            /** A unique resource name that is used for differentiating various resource objects while grouping it in various levels.
             * @Default {null}
             */
            name?: string;

            /** When set to true, allows multiple selection of resource names, thus creating multiple instances of same appointment for the selected resources.
             * @Default {false}
             */
            allowMultiple?: boolean;

            /** It holds the field names of the resources to be bound to the Schedule and also the dataSource.
             */
            resourceSettings?: ResourcesResourceSettings;
        }

        export interface TimeZoneCollection {

            /** Sets the collection of timezone items to the dataSource that accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule timezones.
             */
            dataSource?: any;

            /** Binds text field name in the dataSource to timeZoneCollection text. These text gets listed out in the timezone fields of the appointment window.
             * @Default {text}
             */
            text?: string;

            /** Binds id field name in the dataSource to timeZoneCollection id.
             * @Default {id}
             */
            id?: string;

            /** Binds value field name in the dataSource to timeZoneCollection value.
             * @Default {value}
             */
            value?: string;
        }

        export interface AgendaViewSettings {

            /** You can display the summary of multiple week's appointment by setting this value.
             * @Default {7}
             */
            daysInAgenda?: number;

            /** You can customize the Date column display based on the requirement.
             * @Default {null}
             */
            dateColumnTemplateId?: string;

            /** You can customize the time column display based on the requirement.
             * @Default {null}
             */
            timeColumnTemplateId?: string;
        }

        export interface TooltipSettings {

            /** Enables or disables the tooltip display.
             * @Default {false}
             */
            enable?: boolean;

            /** Template design that customizes the tooltip. All the field names that are mapped from dataSource to the appropriate field properties within the appointmentSettings can be accessed
             * within the template.
             * @Default {null}
             */
            templateId?: string;
        }

        export interface TimeScale {

            /** When set to true, displays the time slots on the Scheduler.
             * @Default {true}
             */
            enable?: boolean;

            /** When set with some specific value, defines the number of time divisions split per hour(as per value given for the majorTimeSlot). Those time divisions are meant to be the minor
             * slots.
             * @Default {2}
             */
            minorSlotCount?: number;

            /** Accepts the value in minutes. When provided with specific value, displays the appropriate time interval on the Scheduler
             * @Default {60}
             */
            majorSlot?: number;

            /** Template design that customizes the timecells (minor slots) that are partitioned based on minorSlotCount. Accepts id value of the template defined for minor time slots.
             * @Default {null}
             */
            minorSlotTemplateId?: string;

            /** Template design that customizes the timecells (major slots). Accepts id value of the template defined for major time slots.
             * @Default {null}
             */
            majorSlotTemplateId?: string;
        }

        export interface BlockoutSettings {

            /** When set to true, enables the blockout option to be applied on the Scheduler cells.
             * @Default {false}
             */
            enable?: boolean;

            /** Template design that applies on the Schedule block intervals. All the field names that are mapped from dataSource to the appropriate field properties within the blockoutSettings
             * can be used within the template.
             * @Default {null}
             */
            templateId?: string;

            /** The dataSource option accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule block intervals.
             * @Default {[]}
             */
            dataSource?: any|any[];

            /** It holds either the ej.Query() object or simply the query string that retrieves the specified records from the table.
             * @Default {null}
             */
            query?: string;

            /** Assign the table name from where the records are to be fetched for the Schedule.
             * @Default {null}
             */
            tableName?: string;

            /** Binds the id field name in dataSource to the id of block time interval. It denotes the unique id assigned to each of the block records.
             * @Default {null}
             */
            id?: string;

            /** Binds the name of startTime field in the dataSource with start time of block time interval. It indicates the date and time, when the block interval actually starts in the
             * Scheduler.
             * @Default {null}
             */
            startTime?: string;

            /** Binds the name of endTime field in dataSource with the end time of block time interval. It indicates the date and time, when the block interval actually ends in the Scheduler.
             * @Default {null}
             */
            endTime?: string;

            /** Binds the name of subject field in the dataSource to block time Subject. Indicates the Subject or title that gets displayed on the Schedule block intervals.
             * @Default {null}
             */
            subject?: string;

            /** Binds the name of isBlockAppointment field in dataSource. When set to true, disables the appointments that lies on the blocked area and restrict to perform CRUD operations in it.
             * @Default {null}
             */
            isBlockAppointment?: string;

            /** Binds the name of isAllDay field in dataSource. It indicates whether an entire day is blocked or not.
             * @Default {null}
             */
            isAllDay?: string;

            /** Binds the name of resourceId field in dataSource. Specifies the id of the resources, to which the time intervals are needed to be blocked.
             * @Default {null}
             */
            resourceId?: string;

            /** Binds the name of groupId field in dataSource. Specifies the id of the resource group, to which the time intervals are needed to be blocked.
             * @Default {null}
             */
            groupId?: string;

            /** Binds the name of customStyle field in dataSource. It applies the custom CSS to the block intervals.
             * @Default {null}
             */
            customStyle?: string;
        }

        enum CurrentView {

            ///Sets currentView of the Scheduler as Day
            Day,

            ///Sets currentView of the Scheduler as Week
            Week,

            ///Sets currentView of the Scheduler as WorkWeek
            Workweek,

            ///Sets currentView of the Scheduler as Month
            Month,

            ///Sets currentView of the Scheduler as Agenda
            Agenda,

            ///Sets currentView of the Scheduler as CustomView with user-specified date range.
            CustomView
        }


        enum Orientation {

            ///Set orientation as vertical to Scheduler
            Vertical,

            ///Set orientation as horizontal to Scheduler
            Horizontal
        }


        enum TimeMode {

            ///Sets 12 hour time mode to Scheduler
            Hour12,

            ///Sets 24 hour time mode to Scheduler
            Hour24
        }

    }

    class RecurrenceEditor extends ej.Widget {
        static fn: RecurrenceEditor;
        constructor(element: JQuery | Element, options?: RecurrenceEditor.Model);
        static Locale: any;
        model: RecurrenceEditor.Model;
        defaults: RecurrenceEditor.Model;

        /** Generates the recurrence rule with the options selected within the Recurrence Editor.
         * @returns {string}
         */
        getRecurrenceRule(): string;

        /** Generates the collection of date, that lies within the selected recurrence start and end date for which the recurrence pattern applies.
         * @param {string} It refers the recurrence rule.
         * @param {any} It refers the start date of the recurrence.
         * @returns {any}
         */
        recurrenceDateGenerator(recurrenceString: string, startDate: any): any;

        /** It splits and returns the recurrence rule string into object collection.
         * @param {string} It refers the recurrence rule string.
         * @param {any} It refers the appointment dates (ExDate) to be excluded
         * @returns {any}
         */
        recurrenceRuleSplit(recurrenceRule: string, exDate: any): any;
    }
    export namespace RecurrenceEditor {

        export interface Model {

            /** Defines the collection of recurrence frequencies within Recurrence Editor such as Never, Daily, Weekly, Monthly, Yearly and Every Weekday.
             * @Default {[never, daily, weekly, monthly, yearly, everyweekday]}
             */
            frequencies?: any[];

            /** Sets the starting day of the week.
             * @Default {null}
             */
            firstDayOfWeek?: string;

            /** When set to true, enables the spin button of numeric textboxes within the Recurrence Editor.
             * @Default {true}
             */
            enableSpinners?: boolean;

            /** Sets the start date of the recurrence. The Recurrence Editor initially displays the current date as its start date.
             * @Default {new Date()}
             */
            startDate?: any;

            /** Sets the specific culture to the Recurrence Editor.
             * @Default {en-US}
             */
            locale?: string;

            /** Sets the date format for the datepickers available within the Recurrence Editor.
             */
            dateFormat?: string;

            /** When set to true, renders the Recurrence Editor options from Right-to-Left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Sets the active/current repeat type(frequency) on Recurrence Editor based on the index value provided. For example, setting the value 1 will initially set the repeat type as Daily
             * and display its related options.
             * @Default {0}
             */
            selectedRecurrenceType?: number;

            /** Sets the minimum date limit to display on the datepickers defined within the Recurrence Editor. Setting minDate with specific date value disallows the datepickers within
             * Recurrence Editor to navigate beyond that date.
             * @Default {new Date(1900, 01, 01)}
             */
            minDate?: any;

            /** Sets the maximum date limit to display on the datepickers used within the Recurrence Editor. Setting maxDate with specific date value disallows the datepickers within the
             * Recurrence Editor to navigate beyond that date.
             * @Default {new Date(2099, 12, 31)}
             */
            maxDate?: any;

            /** Accepts the custom CSS class name, that defines user-defined styles and themes to be applied on partial or complete elements of the Recurrence Editor.
             */
            cssClass?: string;

            /** Triggers whenever any of the Recurrence Editor's value is changed.
             */
            change?(e: ChangeEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** When set to true, event gets canceled.
             */
            cancel?: boolean;

            /** Returns the Recurrence Editor model
             */
            model?: ej.RecurrenceEditor.Model;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the recurrence rule value.
             */
            recurrenceRule?: string;
        }
    }

    class Gantt extends ej.Widget {
        static fn: Gantt;
        constructor(element: JQuery | Element, options?: Gantt.Model);
        static Locale: any;
        model: Gantt.Model;
        defaults: Gantt.Model;

        /** To add a new item in Gantt
         * @param {any} Item to add in Gantt row.
         * @param {string} Defines in which position the row wants to add
         * @returns {void}
         */
        addRecord(data: any, rowPosition: string): void;

        /** To cancel the edited state of an item in Gantt
         * @returns {void}
         */
        cancelEdit(): void;

        /** To clear all the filtered columns in Gantt.
         * @returns {void}
         */
        clearFilter(): void;

        /** To clear the sorted columns in Gantt.
         * @returns {void}
         */
        clearSorting(): void;

        /** To collapse all the parent items in Gantt
         * @returns {void}
         */
        collapseAllItems(): void;

        /** To delete the dependency between the two tasks.
         * @param {number} taskID of predecessor task
         * @param {number} taskID of successor task
         * @returns {void}
         */
        deleteDependency(fromTaskId: number, toTaskId: number): void;

        /** To delete a selected item in Gantt
         * @returns {void}
         */
        deleteItem(): void;

        /** destroy the Gantt widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To Expand all the parent items in Gantt
         * @returns {void}
         */
        expandAllItems(): void;

        /** To expand and collapse an item in Gantt using item's ID
         * @param {number} Expand or Collapse a record based on task id.
         * @returns {void}
         */
        expandCollapseRecord(taskId: number): void;

        /** Export the Gantt content to excel or PDF document.
         * @param {string} Pass the controller action name corresponding to exporting
         * @param {string} optionalASP server event name corresponding to exporting
         * @param {boolean} optionalPass the multiple exporting value as true/false
         * @returns {void}
         */
        export(action: string, serverEvent?: string, multipleExport?: boolean): void;

        /** Sends filtering request to filter a column in Gantt dynamically.
         * @param {string} Pass the field name of the column.
         * @param {string} string/integer/date operator.
         * @param {string} Pass the value to be filtered in a column.
         * @param {string} Optional - Pass the predicate as and/or.
         * @param {boolean} Optional - pass the match case value as true/false.
         * @returns {void}
         */
        filterColumn(fieldName: string, filterOperator: string, filterValue: string, predicate?: string, matchCase?: boolean): void;

        /** To filter multiple columns with multiple conditions dynamically in Gantt.
         * @param {Gantt.EjPredicate} Pass the filtering column details and conditions as ejPredicate instance. The ejPredicate object is defined as fieldName,filterOperator, filterValue and
         * ignoreCase properties.
         * @returns {void}
         */
        filterContent(ejPredicate: Gantt.EjPredicate): void;

        /** To get available column collection in Gantt.
         * @returns {void}
         */
        getColumns(): void;

        /** To get the column collection which are used to edit the task by using task add/edit dialog in resource view.
         * @returns {void}
         */
        getResourceViewEditColumns(): void;

        /** To hide the column by using header text
         * @param {string} you can pass a header text of a column to hide
         * @returns {void}
         */
        hideColumn(headerText: string): void;

        /** To indent a selected item in Gantt
         * @returns {void}
         */
        indentItem(): void;

        /** To Open the dialog to add new task to the Gantt
         * @returns {void}
         */
        openAddDialog(): void;

        /** To Open the dialog to edit existing task to the Gantt
         * @returns {void}
         */
        openEditDialog(): void;

        /** To outdent a selected item in Gantt
         * @returns {void}
         */
        outdentItem(): void;

        /** To save the edited state of an item in Gantt
         * @returns {void}
         */
        saveEdit(): void;

        /** To search an item with search string provided at the run time
         * @param {string} you can pass a text to search in Gantt Control.
         * @returns {void}
         */
        searchItem(searchString: string): void;

        /** To select cell based on the cell and row index dynamically.
         * @param {any[]} array of cell indexes to be select
         * @param {boolean} Defines that we need to preserve the previously selected cells of not
         * @returns {void}
         */
        selectCells(Indexes: any[], preservePreviousSelectedCell: boolean): void;

        /** To select multiple rows dynamically.
         * @param {any[]} array of row indexes to select
         * @returns {void}
         */
        selectMultipleRows(rowIndexes: any[]): void;

        /** Method to set scroll top value for Gantt control.
         * @param {number} Pass a value to set top position of vertical scroll bar.
         * @returns {void}
         */
        setScrollTop(Top: number): void;

        /** Positions the splitter by the specified column index.
         * @param {number} Set the splitter position based on column index.
         * @returns {void}
         */
        setSplitterIndex(index: number): void;

        /** To set the grid width in Gantt
         * @param {string} you can give either percentage or pixels value
         * @returns {void}
         */
        setSplitterPosition(width: string): void;

        /** To show the column by using header text
         * @param {string} you can pass a header text of a column to show
         * @returns {void}
         */
        showColumn(headerText: string): void;

        /** To show/hide the critical tasks in current project.
         * @param {boolean} To show/hide the critical tasks
         * @returns {void}
         */
        showCriticalPath(isShown: boolean): void;

        /** To sort the column in required direction
         * @param {string} Defines the column's mapping name in which sorting have to be performed
         * @param {string} Defines the sort direction whether the column has to sorted in ascending/descending order. By default it is sorting in an ascending order
         * @returns {void}
         */
        sortColumn(mappingName: string, columnSortDirection: string): void;

        /** To update the predecessor type and offset value for existing task dependency.
         * @param {number} taskID of predecessor task
         * @param {number} taskID of successor task
         * @param {string} Type of dependency task.
         * @param {number} Offset value of dependency task.
         * @returns {void}
         */
        updateDependency(fromTaskId: number, toTaskId: number, predecessorType: string, offset: number): void;

        /** To update the value of Gantt record by using it's task id value.
         * @param {any} object with modified field values and current task id value
         * @returns {void}
         */
        updateRecordByTaskId(data: any): void;

        /** To update the value of Gantt record by using row index.
         * @param {number} index of Gantt record to be updated
         * @param {any} object with modified field value
         * @returns {void}
         */
        updateRecordByIndex(index: number, data: any): void;

        /** To update the schedule start date and schedule end date of project.
         * @param {string} New schedule start date of project
         * @param {string} New schedule end date of project
         * @returns {void}
         */
        updateScheduleDates(startDate: string, endDate: string): void;

        /** To change an existing Gantt ID by new ID value dynamically
         * @param {number} you can pass an existing ID value to be change
         * @param {number} you can pass a new ID value to be change
         * @returns {void}
         */
        updateTaskId(currentId: number, newId: number): void;
    }
    export namespace Gantt {

        export interface EjPredicate {

            /** Pass the field name of the column.
             */
            fieldName?: string;

            /** string/integer/date operator.
             */
            filterOperator?: string;

            /** Pass the value to be filtered in a column.
             */
            filterValue?: string;

            /** Optional - pass the ignore case value as true/false.
             */
            ignoreCase?: boolean;
        }

        export interface Model {

            /** Specifies the fields to be included in the add dialog in Gantt
             * @Default {[]}
             */
            addDialogFields?: AddDialogField[];

            /** Enables or disables the ability to resize column.
             * @Default {false}
             */
            allowColumnResize?: boolean;

            /** Enables or disables the ability to drag and drop the row interactively to reorder the rows
             * @Default {false}
             */
            allowDragAndDrop?: boolean;

            /** Enables or Disables Gantt chart editing in Gantt
             * @Default {true}
             */
            allowGanttChartEditing?: boolean;

            /** Enables or Disables Keyboard navigation in Gantt
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Specifies enabling or disabling multiple sorting for Gantt columns
             * @Default {false}
             */
            allowMultiSorting?: boolean;

            /** Enables or disables the option for multiple exporting
             * @Default {false}
             */
            allowMultipleExporting?: boolean;

            /** Enables or disables the interactive selection of a row.
             * @Default {true}
             */
            allowSelection?: boolean;

            /** Enables or disables sorting. When enabled, we can sort the column by clicking on the column.
             * @Default {false}
             */
            allowSorting?: boolean;

            /** Enables or disables the rendering of unscheduled tasks.
             * @Default {false}
             */
            allowUnscheduledTask?: boolean;

            /** Specifies the baseline background color in Gantt
             * @Default {#fba41c}
             */
            baselineColor?: string;

            /** Specifies the mapping property path for baseline end date in datasource
             */
            baselineEndDateMapping?: string;

            /** Specifies the mapping property path for baseline start date of a task in datasource
             */
            baselineStartDateMapping?: string;

            /** Specifies the template for cell tooltip
             * @Default {null}
             */
            cellTooltipTemplate?: string;

            /** Specifies the mapping property path for sub tasks in datasource
             */
            childMapping?: string;

            /** To Specify the column fields to be displayed in the dialog while inserting a column using column menu.
             * @Default {[]}
             */
            columnDialogFields?: any[];

            /** Specifies the background of connector lines in Gantt
             */
            connectorLineBackground?: string;

            /** Specifies the width of the connector lines in Gantt
             * @Default {1}
             */
            connectorlineWidth?: number;

            /** Specify the CSS class for Gantt to achieve custom theme.
             */
            cssClass?: string;

            /** Collection of data or hierarchical data to represent in Gantt
             * @Default {null}
             */
            dataSource?: any[];

            /** Specifies the dateFormat for Gantt , given format is displayed in tooltip , Grid .
             * @Default {MM/dd/yyyy}
             */
            dateFormat?: string;

            /** Specifies the customized working time for tasks in Gantt
             * @Default {[{ from: 08:00 AM, to: 12:00 PM , background:   }, { from: 01:00 PM, to: 05:00 PM , background:  }]}
             */
            dayWorkingTime?: any[];

            /** Option for customizing the drag tooltip while reordering the rows.
             */
            dragTooltip?: DragTooltip;

            /** Specifies the mapping property path for duration of a task in datasource
             */
            durationMapping?: string;

            /** Specifies the duration unit for each tasks whether days or hours or minutes
             * @Default {ej.Gantt.DurationUnit.Day}
             */
            durationUnit?: ej.Gantt.DurationUnit|string;

            /** Specifies the mapping property path for task duration unit in datasource
             */
            durationUnitMapping?: string;

            /** Specifies the fields to be included in the edit dialog in Gantt
             * @Default {[]}
             */
            editDialogFields?: EditDialogField[];

            /** Specifies the editSettings options in Gantt.
             */
            editSettings?: EditSettings;

            /** Enables or Disables enableAltRow row effect in Gantt
             * @Default {true}
             */
            enableAltRow?: boolean;

            /** Enables or disables the collapse all records when loading the Gantt.
             * @Default {false}
             */
            enableCollapseAll?: boolean;

            /** Enables or disables the contextmenu for Gantt , when enabled contextmenu appears on right clicking Gantt
             * @Default {false}
             */
            enableContextMenu?: boolean;

            /** Enable or disable predecessor validation. When it is true, all the task's start and end dates are aligned based on its predecessors start and end dates.
             * @Default {true}
             */
            enablePredecessorValidation?: boolean;

            /** Indicates whether we can edit the progress of a task interactively in Gantt.
             * @Default {true}
             */
            enableProgressBarResizing?: boolean;

            /** Enables or disables the option for dynamically updating the Gantt size on window resizing
             * @Default {false}
             */
            enableResize?: boolean;

            /** Enables or disables serial number column for Gantt. When enabled, the records will be number sequenced.
             * @Default {false}
             */
            enableSerialNumber?: boolean;

            /** Enables or disables tooltip while editing (dragging/resizing) the taskbar.
             * @Default {true}
             */
            enableTaskbarDragTooltip?: boolean;

            /** Enables or disables tooltip for taskbar.
             * @Default {true}
             */
            enableTaskbarTooltip?: boolean;

            /** Enables/Disables virtualization for rendering Gantt items.
             * @Default {false}
             */
            enableVirtualization?: boolean;

            /** Enables/disables work breakdown structure column.
             * @Default {false}
             */
            enableWBS?: boolean;

            /** Enables/disables WBS predecessor column.
             * @Default {false}
             */
            enableWBSPredecessor?: boolean;

            /** Specifies the mapping property path for end Date of a task in datasource
             */
            endDateMapping?: string;

            /** Specifies the mapping property path for the expand status of a record in data source.
             */
            expandStateMapping?: string;

            /** Options for filtering and customizing filter actions.
             */
            filterSettings?: FilterSettings;

            /** Specifies the data collection for grouping the resources in resource allocation view in Gantt.
             * @Default {[]}
             */
            groupCollection?: any[];

            /** Default Value
             */
            groupIdMapping?: string;

            /** Default Value
             */
            groupNameMapping?: string;

            /** Specifies whether to highlight the non working time in Gantt.
             * @Default {false}
             */
            highlightNonWorkingTime?: boolean;

            /** Specifies whether to highlight the weekends in Gantt .
             * @Default {true}
             */
            highlightWeekends?: boolean;

            /** Collection of holidays with date, background and label information to be displayed in Gantt.
             * @Default {[]}
             */
            holidays?: Holiday[];

            /** Specifies whether to include weekends while calculating the duration of a task.
             * @Default {true}
             */
            includeWeekend?: boolean;

            /** Enables or disables the responsiveness of Gantt
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the data source field name to be displayed as left task label
             */
            leftTaskLabelMapping?: string;

            /** Specifies the template for left task label
             */
            leftTaskLabelTemplate?: string;

            /** Specify the locale for Gantt
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the mapping property path for milestone in datasource
             */
            milestoneMapping?: string;

            /** To Specify the JsRender script Id to customize the mile stone with our preference
             */
            milestoneTemplate?: string;

            /** Specifies the background color for non working time in Gantt.
             */
            nonWorkingBackground?: string;

            /** Specifies the mapping property path for the task description in datasource
             */
            notesMapping?: string;

            /** Specifies the background of parent progressbar in Gantt
             */
            parentProgressbarBackground?: string;

            /** Specifies the mapping property path for parent task Id in self reference datasource
             */
            parentTaskIdMapping?: string;

            /** Specifies the background of parent taskbar in Gantt
             */
            parentTaskbarBackground?: string;

            /** Specifies the template for parent taskbar
             */
            parentTaskbarTemplate?: string;

            /** Specifies the mapping property path for predecessors of a task in datasource
             */
            predecessorMapping?: string;

            /** Specifies the JsRender template id or template script for predecessor tooltip on mouse action.
             */
            predecessorTooltipTemplate?: string;

            /** Specifies the mapping property path for progress percentage of a task in datasource
             */
            progressMapping?: string;

            /** Specifies the background of progressbar in Gantt
             */
            progressbarBackground?: string;

            /** Specified the height of the progressbar in taskbar
             * @Default {100}
             */
            progressbarHeight?: number;

            /** Specifies the template for tooltip on resizing progressbar
             * @Default {null}
             */
            progressbarTooltipTemplate?: string;

            /** Specifies the template ID for customized tooltip for progressbar editing in Gantt
             * @Default {null}
             */
            progressbarTooltipTemplateId?: string;

            /** It receives query to retrieve data from the table (query is same as SQL).
             * @Default {null}
             */
            query?: any;

            /** Enables or disables Gantt to read-only mode
             * @Default {false}
             */
            readOnly?: boolean;

            /** Enables or Disables rendering baselines in Gantt , when enabled baseline is rendered in Gantt
             * @Default {false}
             */
            renderBaseline?: boolean;

            /** Default Value
             */
            resourceCollectionMapping?: string;

            /** Specifies the mapping property name for resource ID in resource Collection in Gantt
             */
            resourceIdMapping?: string;

            /** Specifies the mapping property path for resources of a task in datasource
             */
            resourceInfoMapping?: string;

            /** Specifies the mapping property path for resource name of a task in Gantt
             */
            resourceNameMapping?: string;

            /** Specifies the mapping property path for resource's percent effort involved in a task in datasource
             */
            resourceUnitMapping?: string;

            /** Collection of data regarding resources involved in entire project
             * @Default {[]}
             */
            resources?: any[];

            /** Specifies the data source field name to be displayed as right task label
             */
            rightTaskLabelMapping?: string;

            /** Specifies the template for right task label
             */
            rightTaskLabelTemplate?: string;

            /** Specifies whether rounding off the day working time edits
             * @Default {true}
             */
            roundOffDayworkingTime?: boolean;

            /** Specifies the height of a single row in Gantt. Also, we need to set same height in the CSS style with class name e-rowcell.
             * @Default {30}
             */
            rowHeight?: number;

            /** Specifies end date of the Gantt schedule. By default, end date will be rounded to its next Saturday.
             * @Default {null}
             */
            scheduleEndDate?: string;

            /** Specifies the options for customizing schedule header.
             */
            scheduleHeaderSettings?: ScheduleHeaderSettings;

            /** Specifies start date of the Gantt schedule. By default, start date will be rounded to its previous Sunday.
             * @Default {null}
             */
            scheduleStartDate?: string;

            /** Specifies the selected cell information on rendering Gantt.
             */
            selectedCellIndexes?: SelectedCellIndex[];

            /** Specifies the selected row Index in Gantt , the row with given index will highlighted
             * @Default {-1}
             */
            selectedRowIndex?: number;

            /** Specifies the row selection type.
             * @Default {ej.Gantt.SelectionType.Single}
             */
            selectionType?: ej.Gantt.SelectionType|string;

            /** Specifies the type of selection whether to select row or cell.
             * @Default {ej.Gantt.SelectionMode.Row}
             */
            selectionMode?: ej.Gantt.SelectionMode|string;

            /** Enables or disables the column chooser.
             * @Default {false}
             */
            showColumnChooser?: boolean;

            /** Enables/disables the options for inserting , deleting and renaming  columns.
             * @Default {false}
             */
            showColumnOptions?: boolean;

            /** Specifies the template for cell tooltip
             * @Default {true}
             */
            showGridCellTooltip?: boolean;

            /** Specifies whether to show grid cell tooltip over expander cell alone.
             * @Default {true}
             */
            showGridExpandCellTooltip?: boolean;

            /** Specifies whether display task progress inside taskbar.
             * @Default {true}
             */
            showProgressStatus?: boolean;

            /** Specifies whether to display resource names for a task beside taskbar.
             * @Default {true}
             */
            showResourceNames?: boolean;

            /** Specifies whether to display task name beside task bar.
             * @Default {true}
             */
            showTaskNames?: boolean;

            /** Specifies the size option of Gantt control.
             */
            sizeSettings?: SizeSettings;

            /** Specifies the sorting options for Gantt.
             */
            sortSettings?: SortSettings;

            /** Specifies splitter position in Gantt.
             * @Default {null}
             */
            splitterPosition?: string;

            /** Option to configure the splitter position.
             */
            splitterSettings?: SplitterSettings;

            /** Specifies the mapping property path for start date of a task in datasource
             */
            startDateMapping?: string;

            /** Specifies the options for striplines
             * @Default {[]}
             */
            stripLines?: StripLine[];

            /** Default Value
             */
            taskCollectionMapping?: string;

            /** Specifies the mapping property path for task Id in datasource
             */
            taskIdMapping?: string;

            /** Specifies the mapping property path for task name in datasource
             */
            taskNameMapping?: string;

            /** Specifies the task scheduling mode for a project and this will be set to all the tasks available in the project
             * @Default {ej.Gantt.TaskSchedulingMode.Auto}
             */
            taskSchedulingMode?: ej.Gantt.TaskSchedulingMode|string;

            /** Specifies the mapping property path for the task scheduling mode for a task in datasource
             * @Default {auto}
             */
            taskSchedulingModeMapping?: string;

            /** Specifies the nature of a task for calculating the work,  and it can fixed duration, fixed work and fixed resource unit
             * @Default {ej.Gantt.TaskType.FixedUnit}
             */
            taskType?: ej.Gantt.TaskType|string;

            /** Specifies the background of the taskbar in Gantt
             */
            taskbarBackground?: string;

            /** Specifies the template script for customized tooltip for taskbar editing in Gantt
             */
            taskbarEditingTooltipTemplate?: string;

            /** Specifies the template Id for customized tooltip for taskbar editing in Gantt
             */
            taskbarEditingTooltipTemplateId?: string;

            /** Specifies the height of taskBar in Gantt.
             * @Default {20}
             */
            taskbarHeight?: number;

            /** To Specify the JsRender script Id to customize the task bar with our preference
             */
            taskbarTemplate?: string;

            /** Specifies the template for tooltip on mouse action on taskbars
             */
            taskbarTooltipTemplate?: string;

            /** Specifies the template id for tooltip on mouse action on taskbars
             */
            taskbarTooltipTemplateId?: string;

            /** Specifies the toolbarSettings options.
             */
            toolbarSettings?: ToolbarSettings;

            /** Specifies the tree expander column in Gantt
             * @Default {0}
             */
            treeColumnIndex?: number;

            /** Enables or disables the schedule date validation while connecting a manually scheduled task with predecessor
             * @Default {false}
             */
            validateManualTasksOnLinking?: boolean;

            /** Specifies the view type for a project in the Gantt.
             * @Default {ej.Gantt.ViewType.ProjectView}
             */
            viewType?: ej.Gantt.ViewType|string;

            /** Specifies the weekendBackground color in Gantt
             * @Default {#F2F2F2}
             */
            weekendBackground?: string;

            /** Specifies the mapping property path for the work field of a task in the data source. When it is mapped the end date and duration for a task will be calculated automatically.
             */
            workMapping?: string;

            /** Specifies the unit for the work involved in a task and it can be day, hour or minute
             * @Default {ej.Gantt.WorkUnit.Hour}
             */
            workUnit?: ej.Gantt.WorkUnit|string;

            /** Gets or sets the working days of a week in a project.
             * @Default {[Monday,Tuesday,Wednesday,Thursday,Friday]}
             */
            workWeek?: any[];

            /** Specifies the working time schedule of day
             * @Default {ej.Gantt.workingTimeScale.TimeScale8Hours}
             */
            workingTimeScale?: ej.Gantt.workingTimeScale|string;

            /** Triggered for every Gantt action before its starts.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggered for every Gantt action success event.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggered while enter the edit mode in the TreeGrid cell
             */
            beginEdit?(e: BeginEditEventArgs): void;

            /** Triggered after selected a cell
             */
            cellSelected?(e: CellSelectedEventArgs): void;

            /** Triggered before selecting a cell
             */
            cellSelecting?(e: CellSelectingEventArgs): void;

            /** Triggered after collapsed the Gantt record
             */
            collapsed?(e: CollapsedEventArgs): void;

            /** Triggered while collapsing the Gantt record
             */
            collapsing?(e: CollapsingEventArgs): void;

            /** Triggered while Context Menu is rendered in Gantt control
             */
            contextMenuOpen?(e: ContextMenuOpenEventArgs): void;

            /** Triggered when Gantt is rendered completely.
             */
            create?(e: CreateEventArgs): void;

            /** Triggered after save the modified cellValue in Gantt.
             */
            endEdit?(e: EndEditEventArgs): void;

            /** Triggered after expand the record
             */
            expanded?(e: ExpandedEventArgs): void;

            /** Triggered while expanding the Gantt record
             */
            expanding?(e: ExpandingEventArgs): void;

            /** Triggered while Gantt is loaded
             */
            load?(e: LoadEventArgs): void;

            /** Triggered while rendering each cell in the TreeGrid
             */
            queryCellInfo?(e: QueryCellInfoEventArgs): void;

            /** Triggered while rendering each taskbar in the Gantt
             */
            queryTaskbarInfo?(e: QueryTaskbarInfoEventArgs): void;

            /** Triggered while rendering each row
             */
            rowDataBound?(e: RowDataBoundEventArgs): void;

            /** Triggered while dragging a row in Gantt control
             */
            rowDrag?(e: RowDragEventArgs): void;

            /** Triggered while start to drag row in Gantt control
             */
            rowDragStart?(e: RowDragStartEventArgs): void;

            /** Triggered while drop a row in Gantt control
             */
            rowDragStop?(e: RowDragStopEventArgs): void;

            /** Triggered after the row is selected.
             */
            rowSelected?(e: RowSelectedEventArgs): void;

            /** Triggered before the row is going to be selected.
             */
            rowSelecting?(e: RowSelectingEventArgs): void;

            /** Triggered after splitter resizing action in Gantt
             */
            splitterResized?(e: SplitterResizedEventArgs): void;

            /** Triggered when taskbar item is clicked in Gantt.
             */
            taskbarClick?(e: TaskbarClickEventArgs): void;

            /** Triggered after completing the editing operation in taskbar
             */
            taskbarEdited?(e: TaskbarEditedEventArgs): void;

            /** Triggered while editing the Gantt chart (dragging, resizing the taskbar )
             */
            taskbarEditing?(e: TaskbarEditingEventArgs): void;

            /** Triggered when toolbar item is clicked in Gantt.
             */
            toolbarClick?(e: ToolbarClickEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current grouped column field name.
             */
            columnName?: string;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the direction of sorting ascending or descending
             */
            columnSortDirection?: string;

            /** Returns the value of searching element.
             */
            keyValue?: string;

            /** Returns the data of deleting element.
             */
            data?: string;

            /** Returns selected record index
             */
            recordIndex?: number;

            /** Returns the edit dialog element.
             */
            element?: string;
        }

        export interface ActionCompleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current grouped column field name.
             */
            columnName?: string;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the direction of sorting ascending or descending
             */
            columnSortDirection?: string;

            /** Returns the value of searched element.
             */
            keyValue?: string;

            /** Returns the data of deleted element.
             */
            data?: string;

            /** Returns selected record index
             */
            recordIndex?: number;
        }

        export interface BeginEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of editing cell.
             */
            rowElement?: any;

            /** Returns the Element of editing cell.
             */
            cellElement?: any;

            /** Returns the data of current cell record.
             */
            data?: any;

            /** Returns the column Index of cell belongs.
             */
            columnIndex?: number;
        }

        export interface CellSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the cell index on the selection.
             */
            cellIndex?: number;

            /** Returns the row index on the selection
             */
            rowIndex?: number;

            /** Returns the selecting cell element
             */
            targetCell?: any;

            /** Returns the selecting row element
             */
            targetRow?: any;

            /** Returns the selecting record object
             */
            data?: any;

            /** Returns the Gantt object Model
             */
            model?: any;

            /** Returns the previously selected row data
             */
            previousData?: any;

            /** Returns the previously selected cell index
             */
            previousCellIndex?: any;

            /** Returns the previously selected row index
             */
            previousRowIndex?: any;

            /** Returns the previously selected cell element
             */
            previousTargetCell?: any;

            /** Returns the previously selected row element
             */
            previousTargetRow?: any;
        }

        export interface CellSelectingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the cell index on the selection.
             */
            cellIndex?: number;

            /** Returns the row index on the selection
             */
            rowIndex?: number;

            /** Returns the selecting cell element
             */
            targetCell?: any;

            /** Returns the selecting row element
             */
            targetRow?: any;

            /** Returns the selecting record object
             */
            data?: any;

            /** Returns the Gantt object Model
             */
            model?: any;
        }

        export interface CollapsedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of collapsed record.
             */
            recordIndex?: number;

            /** Returns the data of collapsed record.
             */
            data?: any;

            /** Returns Request Type.
             */
            requestType?: string;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;
        }

        export interface CollapsingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of collapsing record.
             */
            recordIndex?: number;

            /** Returns the data of edited cell record..
             */
            data?: any;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;
        }

        export interface ContextMenuOpenEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the default context menu items to which we add custom items.
             */
            contextMenuItems?: any[];

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Gantt model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of editing cell.
             */
            rowElement?: any;

            /** Returns the Element of editing cell.
             */
            cellElement?: any;

            /** Returns the data of edited cell record.
             */
            data?: any;

            /** Returns the column name of edited cell belongs.
             */
            columnName?: string;

            /** Returns the column object of edited cell belongs.
             */
            columnObject?: any;
        }

        export interface ExpandedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of record.
             */
            recordIndex?: number;

            /** Returns the data of expanded record.
             */
            data?: any;

            /** Returns Request Type.
             */
            requestType?: string;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;
        }

        export interface ExpandingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of record.
             */
            recordIndex?: any;

            /** Returns the data of edited cell record..
             */
            data?: any;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;
        }

        export interface LoadEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Gantt model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface QueryCellInfoEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the selecting cell element.
             */
            cellElement?: any;

            /** Returns the value of cell.
             */
            cellValue?: string;

            /** Returns the data of current cell record.
             */
            data?: any;

            /** Returns the column of cell belongs.
             */
            column?: any;
        }

        export interface QueryTaskbarInfoEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the taskbar background of current item.
             */
            taskbarBackground?: string;

            /** Returns the progressbar background of current item.
             */
            progressbarBackground?: string;

            /** Returns the parent taskbar background of current item.
             */
            parentTaskbarBackground?: string;

            /** Returns the parent progressbar background of current item.
             */
            parentProgressbarBackground?: string;

            /** Returns the taskbar text color of current item.
             */
            taskbarTextColor?: string;

            /** Returns the taskbar border color of current item.
             */
            taskbarBorder?: string;

            /** Returns the parent taskbar border color of current item.
             */
            parentTaskbarBorder?: string;

            /** Returns the progressbar border color of current item.
             */
            progressbarBorder?: string;

            /** Returns the parent progressbar border color of current item.
             */
            parentProgressbarBorder?: string;

            /** Returns the milestone background of current item.
             */
            milestoneBackground?: string;

            /** Returns the baseline background of current item.
             */
            baselineBackground?: string;

            /** Returns the data of the record.
             */
            data?: any;
        }

        export interface RowDataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of rendering row.
             */
            rowElement?: any;

            /** Returns the data of rendering row record..
             */
            data?: any;
        }

        export interface RowDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: number;

            /** Returns the row on which we are dragging.
             */
            targetRow?: any;

            /** Returns the row index on which we are dragging.
             */
            targetRowIndex?: number;

            /** Returns that we can drop over that record or not.
             */
            canDrop?: boolean;

            /** Returns the drop position value on current target row.
             */
            dropPosition?: string;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Duration is rounded off when it is set true.
             */
            roundOffDuration?: boolean;
        }

        export interface RowDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: boolean;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDragStopEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: number;

            /** Returns the row which we are dropped to row.
             */
            targetRow?: any;

            /** Returns the row index which we are dropped to row.
             */
            targetRowIndex?: number;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the selecting row element.
             */
            targetRow?: any;

            /** Returns the index of selecting row record.
             */
            recordIndex?: number;

            /** Returns the data of selected record.
             */
            data?: any;
        }

        export interface RowSelectingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data selecting record.
             */
            data?: any;

            /** Returns the index of selecting row record.
             */
            recordIndex?: string;

            /** Returns the selecting row chart element.
             */
            targetChartRow?: any;

            /** Returns the selecting row grid element.
             */
            targetGridRow?: any;

            /** Returns the previous selected data.
             */
            previousData?: any;

            /** Returns the previous selected row index.
             */
            previousIndex?: string;

            /** Returns the previous selected row chart element.
             */
            previousChartRow?: any;

            /** Returns the previous selected row grid element.
             */
            previousGridRow?: any;
        }

        export interface SplitterResizedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the value based on current splitter position.
             */
            currentSplitterPosition?: string;

            /** To set custom position for splitter after resize action.
             */
            customSplitterPosition?: string;

            /** Returns the value to differentiate whether splitter resizing is performed either by manual resizing or by method
             */
            isOnResize?: boolean;

            /** To differentiate `customSplitterPosition` value was index or position.
             */
            isSplitterIndex?: boolean;

            /** Returns the previous splitter position
             */
            prevSplitterPosition?: string;
        }

        export interface TaskbarClickEventArgs {

            /** Returns currently clicked row data
             */
            data?: any;

            /** Returns the current item index.
             */
            index?: number;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns the clicked row element
             */
            taskbarElement?: any;

            /** Returns the target element.
             */
            target?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface TaskbarEditedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data of edited record.
             */
            data?: any;

            /** Returns the previous data value of edited record.
             */
            previousData?: any;

            /** Returns 'true' if taskbar is dragged.
             */
            dragging?: boolean;

            /** Returns 'true' if taskbar is left resized.
             */
            leftResizing?: boolean;

            /** Returns 'true' if taskbar is right resized.
             */
            rightResizing?: boolean;

            /** Returns 'true' if taskbar is progress resized.
             */
            progressResizing?: boolean;

            /** Returns the field values of record being edited.
             */
            editingFields?: any;

            /** Returns the Gantt model.
             */
            model?: any;
        }

        export interface TaskbarEditingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns the row object being edited.
             */
            rowData?: any;

            /** Returns the field values of record being edited.
             */
            editingFields?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns duration value will be round-off or not.
             */
            roundOffDuration?: boolean;
        }

        export interface ToolbarClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the Gantt model.
             */
            model?: any;

            /** Returns the name of the toolbar item on which mouse click has been performed
             */
            itemName?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface AddDialogField {

            /** Specifies mapping name to include required fields in Gantt
             */
            field?: string;

            /** Specifies editType of fields to be included in the add dialog in Gantt
             */
            editType?: string;

            /** Specifies the custom column field was displayed in General tab of add dialog or not.
             * @Default {false}
             */
            displayInGeneralTab?: boolean;
        }

        export interface DragTooltip {

            /** Specifies option to enable/disable tooltip while drag and drop a row.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Specifies the data source fields to be displayed in the drag tooltip.
             * @Default {[]}
             */
            tooltipItems?: any[];

            /** Specifies the custom template for drag tooltip.
             * @Default {null}
             */
            tooltipTemplate?: string;
        }

        export interface EditDialogField {

            /** Specifies mapping name to include required fields in Gantt
             */
            field?: string;

            /** Specifies editType of fields to be included in the edit dialog in Gantt
             */
            editType?: string;

            /** Specifies the custom column field was displayed in General tab of edit dialog or not.
             * @Default {false}
             */
            displayInGeneralTab?: boolean;
        }

        export interface EditSettings {

            /** Enables or disables add record icon in Gantt toolbar
             * @Default {false}
             */
            allowAdding?: boolean;

            /** Enables or disables delete icon in Gantt toolbar
             * @Default {false}
             */
            allowDeleting?: boolean;

            /** Specifies the option for enabling or disabling editing in Gantt grid part
             * @Default {false}
             */
            allowEditing?: boolean;

            /** Specifies the option for enabling or disabling indent action in Gantt.
             * @Default {false}
             */
            allowIndent?: boolean;

            /** Specifies the mouse action whether single click or double click to begin the editing
             * @Default {ej.Gantt.BeginEditAction.DblClick}
             */
            beginEditAction?: ej.Gantt.BeginEditAction|string;

            /** Specifies the edit mode in Gantt, &quot;normal&quot; is for dialog editing ,&quot;cellEditing&quot; is for cell type editing
             * @Default {normal}
             */
            editMode?: string;

            /** Specifies the position where the new row has to be added.
             * @Default {ej.Gantt.RowPosition.BelowSelectedRow}
             */
            rowPosition?: ej.Gantt.RowPosition|string;

            /** Enable or disable the confirmation dialog while deleting the record.
             * @Default {false}
             */
            showDeleteConfirmDialog?: boolean;
        }

        export interface FilterSettingsFilteredColumn {

            /** Specifies the value to be filtered in Gantt.
             */
            value?: string;

            /** Specifies the field where filtering has to be performed.
             */
            field?: string;

            /** Specifies the predicate(and/or) value to perform filtering.
             */
            predicate?: string;

            /** Specifies the filter condition to filtered column. See operator
             */
            operator?: string;
        }

        export interface FilterSettings {

            /** Specifies the column collection for filtering the Gantt content on initial load
             * @Default {[]}
             */
            filteredColumns?: FilterSettingsFilteredColumn[];
        }

        export interface Holiday {

            /** Specifies holiday date to be displayed in Gantt
             */
            day?: string;

            /** Specifies the background color for holiday date in Gantt Schedule
             */
            background?: string;

            /** Specifies the label to be displayed for rendered holiday in Gantt
             */
            label?: string;
        }

        export interface ScheduleHeaderSettings {

            /** Specified the format for day view in schedule header
             */
            dayHeaderFormat?: string;

            /** Specified the format for Hour view in schedule header
             * @Default {HH}
             */
            hourHeaderFormat?: string;

            /** Specifies the number of minutes per interval
             * @Default {ej.Gantt.minutesPerInterval.Auto}
             */
            minutesPerInterval?: ej.Gantt.minutesPerInterval|string;

            /** Specified the format for month view in schedule header
             * @Default {MMM}
             */
            monthHeaderFormat?: string;

            /** Specifies the schedule mode
             * @Default {ej.Gantt.ScheduleHeaderType.Week}
             */
            scheduleHeaderType?: ej.Gantt.ScheduleHeaderType|string;

            /** Specifies the round-off mode for the start date in schedule header.
             * @Default {ej.Gantt.TimescaleRoundMode.Auto}
             */
            timescaleStartDateMode?: ej.Gantt.TimescaleRoundMode|string;

            /** Specified the background for weekends in Gantt
             * @Default {#F2F2F2}
             */
            weekendBackground?: string;

            /** Specified the format for week view in schedule header
             * @Default {MMM dd , yyyy}
             */
            weekHeaderFormat?: string;

            /** Specified the format for year view in schedule header
             * @Default {yyyy}
             */
            yearHeaderFormat?: string;

            /** Specifies the size of the lowest time unit along the timescale, with minimum value as &quot;50%&quot; and maximum value as &quot;500%&quot;. It is also possible to set the value
             * in pixels.
             * @Default {100%}
             */
            timescaleUnitSize?: string;

            /** Specifies the start day of the week in week timescale mode
             * @Default {0}
             */
            weekStartDay?: number;

            /** Enable or disable the automatic timescale update on cell editing, dialog editing and taskbar editing.
             * @Default {true}
             */
            updateTimescaleView?: boolean;
        }

        export interface SelectedCellIndex {

            /** Specifies the row index of the cell to be selected Gantt control
             * @Default {-1}
             */
            rowIndex?: number;

            /** Specifies the cell index to be selected in the row.
             * @Default {-1}
             */
            cellIndex?: number;
        }

        export interface SizeSettings {

            /** Specifies the height of Gantt control
             */
            height?: string;

            /** Specifies the width of Gantt control
             */
            width?: string;
        }

        export interface SortSettingsSortedColumn {

            /** Specifies the field to be sorted in Gantt
             */
            field?: string;

            /** Specifies the sort direction in Gantt
             */
            direction?: string;
        }

        export interface SortSettings {

            /** Specifies the sorted columns for Gantt
             * @Default {[]}
             */
            sortedColumns?: SortSettingsSortedColumn[];
        }

        export interface SplitterSettings {

            /** Specifies position of the splitter in Gantt , splitter can be placed either based on percentage values or pixel values.
             */
            position?: string;

            /** Specifies the position of splitter in Gantt, based on column index in Gantt.
             */
            index?: string;
        }

        export interface StripLine {

            /** Specifies date to render striplines in Gantt
             */
            day?: string;

            /** Specifies label to be displayed for striplines in Gantt
             */
            label?: string;

            /** Specifies line style for rendered striplines in Gantt
             */
            lineStyle?: string;

            /** Specifies the line color for rendered striplines in Gantt
             */
            lineColor?: string;

            /** Specifies the width of the stripline in Gantt
             */
            lineWidth?: string;
        }

        export interface ToolbarSettingsCustomToolbarItem {

            /** Allows the user to insert the custom icons in toolbar using CSS class name selector.
             */
            text?: string;

            /** Allows the user to insert the custom icons in toolbar using script templates. Using this property we can bind HTML elements and other EJ controls to Gantt toolbar.
             */
            templateID?: string;

            /** Allows the user to display custom tooltip text for Gantt custom toolbar items.
             */
            tooltipText?: string;
        }

        export interface ToolbarSettings {

            /** Specifies the state of enabling or disabling toolbar
             * @Default {true}
             */
            showToolbar?: boolean;

            /** Specifies the list of toolbar items to be rendered in Gantt toolbar
             * @Default {[]}
             */
            toolbarItems?: Array<ej.Gantt.ToolbarItems|string>;

            /** Allows the user to insert custom toolbar items.
             */
            customToolbarItems?: ToolbarSettingsCustomToolbarItem[];
        }

        enum DurationUnit {

            ///Sets the Duration Unit as day.
            Day,

            ///Sets the Duration Unit as hour.
            Hour,

            ///Sets the Duration Unit as minute.
            Minute
        }


        enum BeginEditAction {

            ///you can begin the editing at double click
            DblClick,

            ///you can begin the editing at single click
            Click
        }


        enum RowPosition {

            ///you can add a new row at top.
            Top,

            ///you can add a new row at bottom.
            Bottom,

            ///you can add a new row to above selected row.
            AboveSelectedRow,

            ///you can add a new row to below selected row.
            BelowSelectedRow,

            ///you can add a new row as a child for selected row.
            Child
        }


        enum minutesPerInterval {

            ///Sets the interval automatically according with schedule start and end date.
            Auto,

            ///Sets one minute intervals per hour.
            OneMinute,

            ///Sets Five minute intervals per hour.
            FiveMinutes,

            ///Sets fifteen minute intervals per hour.
            FifteenMinutes,

            ///Sets thirty minute intervals per hour.
            ThirtyMinutes
        }


        enum ScheduleHeaderType {

            ///Sets year Schedule Mode.
            Year,

            ///Sets month Schedule Mode.
            Month,

            ///Sets week Schedule Mode.
            Week,

            ///Sets day Schedule Mode.
            Day,

            ///Sets hour Schedule Mode.
            Hour
        }


        enum TimescaleRoundMode {

            ///The round-off value will be automatically calculated based on the data source values.
            Auto,

            ///Schedule header start date will round-off to the immediate week.
            Week,

            ///Schedule headers start date will round off to the immediate month
            Month,

            ///Schedule headers start date will round off to the immediate year
            Year
        }


        enum SelectionType {

            ///you can select a single row.
            Single,

            ///you can select a multiple row.
            Multiple
        }


        enum SelectionMode {

            ///you can select a row.
            Row,

            ///you can select a cell.
            Cell
        }


        enum TaskSchedulingMode {

            ///All the tasks in the project will be displayed in auto scheduled mode, where the tasks are scheduled automatically over non-working days and holidays.
            Auto,

            ///All the tasks in the project will be displayed in manually scheduled mode.
            Manual,

            ///Project consists of tasks with both auto and manually scheduled modes, based on the datasource values
            Custom
        }


        enum TaskType {

            ///Resource unit remains constant while editing the work and duration values.
            FixedUnit,

            ///Work value of a task remains constant while editing duration and resource unit values.
            FixedWork,

            ///Duration value remains constant while editing work and resource unit values.
            FixedDuration
        }


        enum ToolbarItems {

            ///Enables the add icon in toolbar
            Add,

            ///Enables the edit icon in toolbar
            Edit,

            ///Enables the edit icon in toolbar
            Delete,

            ///Enables the update icon in toolbar
            Update,

            ///Enables the cancel icon in toolbar
            Cancel,

            ///Enables the search icon in toolbar
            Search,

            ///Enables the indent icon in toolbar
            Indent,

            ///Enables the outdent icon in toolbar
            Outdent,

            ///Enables the expand all icon in toolbar
            ExpandAll,

            ///Enables the collapse all icon in toolbar
            CollapseAll,

            ///Enables the previous time span icon in toolbar
            PrevTimeSpan,

            ///Enables the next time span icon in toolbar
            NextTimeSpan,

            ///Enables the critical path icon in toolbar
            CriticalPath,

            ///Enables the excel export toolbar icon
            ExcelExport,

            ///Enables the pdf export toolbar icon
            PdfExport
        }


        enum ViewType {

            ///Displays the project in task view in Gantt.
            ProjectView,

            ///Displays the project in resource allocation view in Gantt.
            ResourceView,

            ///Displays the project in histogram view in Gantt
            HistogramView
        }


        enum WorkUnit {

            ///Displays the work involved in a task in days.
            Day,

            ///Displays the work involved in a task in hours.
            Hour,

            ///Displays the work involved in a task in minutes
            Minute
        }


        enum workingTimeScale {

            ///Sets eight hour timescale.
            TimeScale8Hours,

            ///Sets twenty four hour timescale.
            TimeScale24Hours
        }

    }

    class ReportViewer extends ej.Widget {
        static fn: ReportViewer;
        constructor(element: JQuery | Element, options?: ReportViewer.Model);
        static Locale: any;
        model: ReportViewer.Model;
        defaults: ReportViewer.Model;

        /** Export the report to the specified format.
         * @returns {void}
         */
        exportReport(): void;

        /** Fit the report page to the container.
         * @returns {void}
         */
        fitToPage(): void;

        /** Fit the report page height to the container.
         * @returns {void}
         */
        fitToPageHeight(): void;

        /** Fit the report page width to the container.
         * @returns {void}
         */
        fitToPageWidth(): void;

        /** Get the available datasets name of the rdlc report.
         * @returns {void}
         */
        getDataSetNames(): void;

        /** Get the available parameters of the report.
         * @returns {void}
         */
        getParameters(): void;

        /** Navigate to first page of report.
         * @returns {void}
         */
        gotoFirstPage(): void;

        /** Navigate to last page of the report.
         * @returns {void}
         */
        gotoLastPage(): void;

        /** Navigate to next page from the current page.
         * @returns {void}
         */
        gotoNextPage(): void;

        /** Go to specific page index of the report.
         * @returns {void}
         */
        gotoPageIndex(): void;

        /** Navigate to previous page from the current page.
         * @returns {void}
         */
        gotoPreviousPage(): void;

        /** Print the report.
         * @returns {void}
         */
        print(): void;

        /** Apply print layout to the report.
         * @returns {void}
         */
        printLayout(): void;

        /** Refresh the report.
         * @returns {void}
         */
        refresh(): void;
    }
    export namespace ReportViewer {

        export interface Model {

            /** Gets or sets the list of data sources for the RDLC report.
             * @Default {[]}
             */
            dataSources?: DataSource[];

            /** Enables or disables the page cache of report.
             * @Default {false}
             */
            enablePageCache?: boolean;

            /** Specifies the export settings.
             */
            exportSettings?: ExportSettings;

            /** When set to true, adapts the report layout to fit the screen size of devices on which it renders.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Specifies the locale for report viewer.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the page settings.
             */
            pageSettings?: PageSettings;

            /** Gets or sets the list of parameters associated with the report.
             * @Default {[]}
             */
            parameters?: Parameter[];

            /** Specifies the parameter settings.
             */
            parameterSettings?: ParameterSettings;

            /** Enables and disables the print mode.
             * @Default {false}
             */
            printMode?: boolean;

            /** Specifies the print option of the report.
             * @Default {ej.ReportViewer.PrintOptions.Default}
             */
            printOption?: ej.ReportViewer.PrintOptions|string;

            /** Specifies the processing mode of the report.
             * @Default {ej.ReportViewer.ProcessingMode.Remote}
             */
            processingMode?: ej.ReportViewer.ProcessingMode|string;

            /** Specifies the render layout.
             * @Default {ej.ReportViewer.RenderMode.Default}
             */
            renderMode?: ej.ReportViewer.RenderMode|string;

            /** Gets or sets the path of the report file.
             * @Default {empty}
             */
            reportPath?: string;

            /** Gets or sets the reports server URL.
             * @Default {empty}
             */
            reportServerUrl?: string;

            /** Specifies the report Web API service URL.
             * @Default {empty}
             */
            reportServiceUrl?: string;

            /** Specifies the toolbar settings.
             */
            toolbarSettings?: ToolbarSettings;

            /** Gets or sets the zoom factor for report viewer.
             * @Default {1}
             */
            zoomFactor?: number;

            /** Specifies the token for authorizing reporting service url to process the reports.
             * @Default {empty}
             */
            serviceAuthorizationToken?: string;

            /** Enables and disables the parameter block scroller.
             * @Default {true}
             */
            enableParameterBlockScroller?: boolean;

            /** Enables and disables the data source credential block scroller.
             * @Default {true}
             */
            enableDatasourceBlockScroller?: boolean;

            /** Render the ReportViewer height based on the report content size.
             * @Default {false}
             */
            sizeToReportContent?: boolean;

            /** Enables and disables the rendering of Viewer when default values are specified for the parameters.
             * @Default {true}
             */
            autoRender?: boolean;

            /** Enables and disables the Error Notification bar.
             * @Default {true}
             */
            enableNotificationBar?: boolean;

            /** Enables and disables the drop-down parameter search.
             * @Default {false}
             */
            enableDropDownSearch?: boolean;

            /** Enables and disables the PageVirtualization.
             * @Default {false}
             */
            enablePageVirtualization?: boolean;

            /** Gets or sets the showExceptionsInDialog for report viewer.
             * @Default {false}
             */
            showExceptionsInDialog?: boolean;

            /** Fires when the report viewer is destroyed successfully.If you want to perform any operation after destroying the reportviewer control,you can make use of the destroy event.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires during drill through action done in report.If you want to perform any operation when a drill through action is performed, you can make use of the drillThrough event.
             */
            drillThrough?(e: DrillThroughEventArgs): void;

            /** Fires before report rendering is completed.If you want to perform any operation before the rendering of report,you can make use of the renderingBegin event.
             */
            renderingBegin?(e: RenderingBeginEventArgs): void;

            /** Fires after report rendering completed.If you want to perform any operation after the rendering of report,you can make use of this renderingComplete event.
             */
            renderingComplete?(e: RenderingCompleteEventArgs): void;

            /** Fires when any error occurred while rendering the report.If you want to perform any operation when an error occurs in the report, you can make use of the reportError event.
             */
            reportError?(e: ReportErrorEventArgs): void;

            /** Fires when the report is being exported.If you want to perform any operation before exporting of report, you can make use of the reportExport event.
             */
            reportExport?(e: ReportExportEventArgs): void;

            /** Fires when the report is loaded.If you want to perform any operation after the successful loading of report, you can make use of the reportLoaded event.
             */
            reportLoaded?(e: ReportLoadedEventArgs): void;

            /** Fires when user clicks on a failed report item in the rendered report, before displaying error details dialog. If you want to show custom error detail or perform any action before
             * viewing error detail, you can make use of the showError event.
             */
            showError?(e: ShowErrorEventArgs): void;

            /** Fires when click the View Report Button.
             */
            viewReportClick?(e: ViewReportClickEventArgs): void;

            /** Fires when the export progress is changed. To perform any operation when the export progress is changed, use the exportProgressChanged event.
             */
            exportProgressChanged?(e: ExportProgressChangedEventArgs): void;

            /** Fires when the print progress is changed. To perform any operation when the print progress is changed, use the printProgressChanged event.
             */
            printProgressChanged?(e: PrintProgressChangedEventArgs): void;

            /** Fires when the export items are clicked. To perform any operation when the export items are clicked, use the exportItemClick event.
             */
            exportItemClick?(e: ExportItemClickEventArgs): void;

            /** This event will be triggered on rendering the Report Viewer toolbar.
             */
            toolbarRendering?(e: ToolbarRenderingEventArgs): void;

            /** Fires when the toolbar items are clicked. To perform any operation when the toolbar items are clicked, use the toolBarItemClick event.
             */
            toolBarItemClick?(e: ToolBarItemClickEventArgs): void;

            /** Fires when the hyperlink action is performed in the report. To perform any operation during the hyperlink action, use the hyperlink event.
             */
            hyperlink?(e: HyperlinkEventArgs): void;

            /** Fires when the report print action is performed in the report. To perform any operation during the report print action, use the ReportPrint event.
             */
            reportPrint?(e: ReportPrintEventArgs): void;

            /** Fires before the ajax request process started.
             */
            ajaxBeforeLoad?(e: AjaxBeforeLoadEventArgs): void;

            /** Fires when ajax post call succeed.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** Fires when ajax request failed.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** Fires when the dependent parameter value is the parameter block. You can add custom user interface, loading indicator and modify the default progress text, using the
             * ParameterUpdateStateChange event.
             */
            parameterUpdateStateChange?(e: ParameterUpdateStateChangeEventArgs): void;
        }

        export interface DestroyEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface DrillThroughEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the actionInfo's parameters bookmarkLink, reportName, parameters.
             */
            actionInfo?: any;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface RenderingBeginEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface RenderingCompleteEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** returns the collection of parameters.
             */
            reportParameters?: any;
        }

        export interface ReportErrorEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the error details.
             */
            error?: string;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ReportExportEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ReportLoadedEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ShowErrorEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the error code.
             */
            errorCode?: string;

            /** returns the error message.
             */
            message?: string;

            /** returns the detailed error information.
             */
            detail?: string;
        }

        export interface ViewReportClickEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the parameter collection.
             */
            parameters?: any;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ExportProgressChangedEventArgs {

            /** returns the export format
             */
            format?: string;

            /** returns the stage of export processing.
             */
            stage?: string;

            /** true if the event should be handled; otherwise, false.
             */
            handled?: boolean;

            /** returns ReportViewer container Id.
             */
            containerId?: string;
        }

        export interface PrintProgressChangedEventArgs {

            /** returns the stage of export processing.
             */
            stage?: string;

            /** returns the currentPage value
             */
            currentPage?: string;

            /** returns the totalPages value
             */
            totalPages?: string;

            /** true if the event should be handled; otherwise, false.
             */
            handled?: boolean;

            /** returns ReportViewer container Id.
             */
            containerId?: string;
        }

        export interface ExportItemClickEventArgs {

            /** returns the export format value.
             */
            value?: string;
        }

        export interface ToolbarRenderingEventArgs {
        }

        export interface ToolBarItemClickEventArgs {

            /** returns the toolbar clicked item name .
             */
            target?: string;

            /** returns the CSS class name specified for the toolbar item
             */
            cssClass?: string;

            /** returns the Toolbar item rendered group index
             */
            groupIndex?: string;

            /** returns the Toolbar item rendered index
             */
            Index?: string;

            /** returns the Toolbar item value.
             */
            value?: string;
        }

        export interface HyperlinkEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the actionInfo's hyperLink detail
             */
            actionInfo?: any;

            /** returns the report model.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;
        }

        export interface ReportPrintEventArgs {

            /** true if you have to load the external style file; otherwise, false.
             */
            isStyleLoad?: boolean;
        }

        export interface AjaxBeforeLoadEventArgs {

            /** returns the reportViewerToken.
             */
            reportViewerToken?: string;

            /** returns the serviceAuthorizationToken.
             */
            serviceAuthorizationToken?: string;

            /** Send the headerReq collection.
             */
            headerReq?: any;

            /** Send the headers collection.
             */
            headers?: any;

            /** Send the custom data.
             */
            data?: string;
        }

        export interface AjaxSuccessEventArgs {

            /** returns the success data.
             */
            data?: any;
        }

        export interface AjaxErrorEventArgs {

            /** returns the error details
             */
            msg?: string;
        }

        export interface ParameterUpdateStateChangeEventArgs {

            /** true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** true, if the event handled by user; otherwise, false.
             */
            handled?: boolean;

            /** The processing state.
             */
            state?: string;

            /** returns the report model
             */
            model?: any;

            /** The parameter block id.
             */
            containerId?: string;

            /** Its only to notify the the current parameter.
             */
            name?: string;

            /** Its only to notify the current parameter prompt value.
             */
            prompt?: string;

            /** The progress text that is displayed on the loading indicator.
             */
            progressText?: string;
        }

        export interface DataSource {

            /** Gets or sets the name of the data source.
             * @Default {empty}
             */
            name?: string;

            /** Gets or sets the values of data source.
             * @Default {[]}
             */
            value?: any[];
        }

        export interface ExportSettings {

            /** Specifies the export formats.
             * @Default {ej.ReportViewer.ExportOptions.All}
             */
            exportOptions?: ej.ReportViewer.ExportOptions|string;

            /** Specifies the excel export format.
             * @Default {ej.ReportViewer.ExcelFormats.Excel97to2003}
             */
            excelFormat?: ej.ReportViewer.ExcelFormats|string;

            /** Specifies the word export format.
             * @Default {ej.ReportViewer.WordFormats.Doc}
             */
            wordFormat?: ej.ReportViewer.WordFormats|string;

            /** Specifies the ppt export format.
             * @Default {ej.ReportViewer.PPTFormats.PowerPoint97to2003}
             */
            pptFormat?: ej.ReportViewer.PPTFormats|string;

            /** Add the custom icon item to the export options.
             * @Default {empty}
             */
            customItems?: any[];
        }

        export interface PageSettings {

            /** Specifies the print layout orientation.
             * @Default {null}
             */
            orientation?: ej.ReportViewer.Orientation|string;

            /** Specifies the paper size of print layout.
             * @Default {null}
             */
            paperSize?: ej.ReportViewer.PaperSize|string;
        }

        export interface Parameter {

            /** Gets or sets the parameter labels.
             * @Default {null}
             */
            labels?: any[];

            /** Gets or sets the name of the parameter.
             * @Default {empty}
             */
            name?: string;

            /** Gets or sets whether the parameter allows nullable value or not.
             * @Default {false}
             */
            nullable?: boolean;

            /** Gets or sets the prompt message associated with the specified parameter.
             * @Default {empty}
             */
            prompt?: string;

            /** Gets or sets the parameter values.
             * @Default {[]}
             */
            values?: any[];
        }

        export interface ParameterSettings {

            /** Sets the separator when the multiSelectMode with delimiter option or checkbox is enabled with the dropdown. When you enter the delimiter value, the texts after the delimiter are
             * considered as a separate word or query. The delimiter string is a single character and must be a symbol. Mostly, the delimiter symbol is used as comma (,) or semi-colon (;) or
             * any other special character.
             * @Default {,}
             */
            delimiterChar?: string;

            /** Specifies the height of the combobox parameter popup list. By default, the popup height value is &quot;152px&quot;.
             * @Default {152px}
             */
            popupHeight?: string;

            /** Specifies the width of the combobox parameter popup list. By default, the popup width sets based on the width of the component.
             * @Default {auto}
             */
            popupWidth?: string;

            /** Specifies the width of the parameter item. By default, the item width value is set as &quot;185px&quot;.
             * @Default {185px}
             */
            itemWidth?: string;

            /** Specifies the width of the parameter label. By default, the parameter label width value is set as &quot;110px&quot;.
             * @Default {110px}
             */
            labelWidth?: string;
        }

        export interface ToolbarSettings {

            /** Fires when user click on toolbar item in the toolbar.
             * @Default {empty}
             */
            click?: string;

            /** Specifies the toolbar items.
             * @Default {ej.ReportViewer.ToolbarItems.All}
             */
            items?: ej.ReportViewer.ToolbarItems|string;

            /** Shows or hides the toolbar.
             * @Default {true}
             */
            showToolbar?: boolean;

            /** Shows or hides the tooltip of toolbar items.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Specifies the toolbar template ID.
             * @Default {empty}
             */
            templateId?: string;

            /** Add the custom icon item to the toolbar.
             * @Default {empty}
             */
            customItems?: any[];

            /** Add the custom icon groups to the toolbar.
             * @Default {empty}
             */
            customGroups?: any[];
        }

        enum ExportOptions {

            ///Specifies the All property in ExportOptions to get all available options.
            All,

            ///Specifies the Pdf property in ExportOptions to get Pdf option.
            Pdf,

            ///Specifies the Word property in ExportOptions to get Word option.
            Word,

            ///Specifies the Excel property in ExportOptions to get Excel option.
            Excel,

            ///Specifies the Html property in ExportOptions to get Html option.
            Html,

            ///Specifies the PPT property in ExportOptions to get PPT option.
            PPT,

            ///Specifies the CSV property in ExportOptions to get CSV option.
            CSV,

            ///Specifies the customItems property in ExportOptions to get customItems option.
            CustomItems
        }


        enum ExcelFormats {

            ///Specifies the Excel97to2003 property in ExcelFormats to get specified version of exported format.
            Excel97to2003,

            ///Specifies the Excel2007 property in ExcelFormats to get specified version of exported format.
            Excel2007,

            ///Specifies the Excel2010 property in ExcelFormats to get specified version of exported format.
            Excel2010,

            ///Specifies the Excel2013 property in ExcelFormats to get specified version of exported format.
            Excel2013
        }


        enum WordFormats {

            ///Specifies the Doc property in WordFormats to get specified version of exported format.
            Doc,

            ///Specifies the Dot property in WordFormats to get specified version of exported format.
            Dot,

            ///Specifies the DOCX property in WordFormats to get specified version of exported format.
            DOCX,

            ///Specifies the Word2007 property in WordFormats to get specified version of exported format.
            Word2007,

            ///Specifies the Word2010 property in WordFormats to get specified version of exported format.
            Word2010,

            ///Specifies the Word2013 property in WordFormats to get specified version of exported format.
            Word2013,

            ///Specifies the Word2007Dotx property in WordFormats to get specified version of exported format.
            Word2007Dotx,

            ///Specifies the Word2010Dotx property in WordFormats to get specified version of exported format.
            Word2010Dotx,

            ///Specifies the Word2013Dotx property in WordFormats to get specified version of exported format.
            Word2013Dotx,

            ///Specifies the Word2007Docm property in WordFormats to get specified version of exported format.
            Word2007Docm,

            ///Specifies the Word2010Docm property in WordFormats to get specified version of exported format.
            Word2010Docm,

            ///Specifies the Word2013Docm property in WordFormats to get specified version of exported format.
            Word2013Docm,

            ///Specifies the Word2007Dotm property in WordFormats to get specified version of exported format.
            Word2007Dotm,

            ///Specifies the Word2010Dotm property in WordFormats to get specified version of exported format.
            Word2010Dotm,

            ///Specifies the Word2013Dotm property in WordFormats to get specified version of exported format.
            Word2013Dotm,

            ///Specifies the RTF property in WordFormats to get specified version of exported format.
            RTF,

            ///Specifies the Txt property in WordFormats to get specified version of exported format.
            Txt,

            ///Specifies the EPUB property in WordFormats to get specified version of exported format.
            EPUB,

            ///Specifies the HTML property in WordFormats to get specified version of exported format.
            HTML,

            ///Specifies the XML property in WordFormats to get specified version of exported format.
            XML,

            ///Specifies the Automatic property in WordFormats to get specified version of exported format.
            Automatic
        }


        enum PPTFormats {

            ///Represents PowerPoint97to2003 version.
            PowerPoint97to2003,

            ///Represents PowerPoint2007 version.
            PowerPoint2007,

            ///Represents PowerPoint2010 version.
            PowerPoint2010,

            ///Represents PowerPoint2013 version.
            PowerPoint2013
        }


        enum Orientation {

            ///Specifies the Landscape property in pageSettings.orientation to get specified layout.
            Landscape,

            ///Specifies the portrait property in pageSettings.orientation to get specified layout.
            Portrait
        }


        enum PaperSize {

            ///Specifies the A3 as value in pageSettings.paperSize to get specified size.
            A3,

            ///Specifies the A4 as value in pageSettings.paperSize to get specified size.
            Portrait,

            ///Specifies the B4(JIS) as value in pageSettings.paperSize to get specified size.
            B4_JIS,

            ///Specifies the B5(JIS) as value in pageSettings.paperSize to get specified size.
            B5_JIS,

            ///Specifies the Envelope #10 as value in pageSettings.paperSize to get specified size.
            Envelope_10,

            ///Specifies the Envelope as value in pageSettings.paperSize to get specified size.
            Envelope_Monarch,

            ///Specifies the Executive as value in pageSettings.paperSize to get specified size.
            Executive,

            ///Specifies the Legal as value in pageSettings.paperSize to get specified size.
            Legal,

            ///Specifies the Letter as value in pageSettings.paperSize to get specified size.
            Letter,

            ///Specifies the Tabloid as value in pageSettings.paperSize to get specified size.
            Tabloid,

            ///Specifies the Custom as value in pageSettings.paperSize to get specified size.
            Custom
        }


        enum PrintOptions {

            ///Specifies the Default property in printOptions.
            Default,

            ///Specifies the NewTab property in printOptions.
            NewTab,

            ///Specifies the None property in printOptions.
            None
        }


        enum ProcessingMode {

            ///Specifies the Remote property in processingMode.
            Remote,

            ///Specifies the Local property in processingMode.
            Local
        }


        enum RenderMode {

            ///Specifies the Default property in RenderMode to get default output.
            Default,

            ///Specifies the Mobile property in RenderMode to get specified output.
            Mobile,

            ///Specifies the Desktop property in RenderMode to get specified output.
            Desktop
        }


        enum ToolbarItems {

            ///Specifies the Print as value in ToolbarItems to get specified item.
            Print,

            ///Specifies the Refresh as value in ToolbarItems to get specified item.
            Refresh,

            ///Specifies the Zoom as value in ToolbarItems to get specified item.
            Zoom,

            ///Specifies the FittoPage as value in ToolbarItems to get specified item.
            FittoPage,

            ///Specifies the Export as value in ToolbarItems to get specified item.
            Export,

            ///Specifies the PageNavigation as value in ToolbarItems to get specified item.
            PageNavigation,

            ///Specifies the Parameters as value in ToolbarItems to get specified item.
            Parameters,

            ///Specifies the PrintLayout as value in ToolbarItems to get specified item.
            PrintLayout,

            ///Specifies the PageSetup as value in ToolbarItems to get specified item.
            PageSetup
        }

    }

    class TreeGrid extends ej.Widget {
        static fn: TreeGrid;
        constructor(element: JQuery | Element, options?: TreeGrid.Model);
        static Locale: any;
        model: TreeGrid.Model;
        defaults: TreeGrid.Model;

        /** Add a new row in TreeGrid, while allowAdding is set to true
         * @param {any} Item to add in TreeGrid row.
         * @param {string} Defines in which position the row wants to be added
         * @returns {void}
         */
        addRow(data: any, rowPosition: string): void;

        /** Clears the filter applied to a specific column.
         * @param {string} Pass the column field name to clear filtering done in that column.
         * @returns {void}
         */
        clearFilter(fieldName: string): void;

        /** To clear all the selection in TreeGrid
         * @param {number} you can pass a row index to clear the row selection.
         * @returns {void}
         */
        clearSelection(index: number): void;

        /** To clear the sorting from sorted columns in TreeGrid.
         * @returns {void}
         */
        clearSorting(): void;

        /** To collapse all the parent items in tree grid
         * @returns {void}
         */
        collapseAll(): void;

        /** Collapses the records at specific hierarchical level
         * @param {number} you can pass the particular level as index.
         * @returns {void}
         */
        collapseAtLevel(index: number): void;

        /** To change the index of the tree column in TreeGrid.
         * @param {number} Pass the column index to make the column as treeColumnIndex.
         * @returns {void}
         */
        columnIndex(Index: number): void;

        /** To delete the specified column
         * @param {number} Index of the column to be deleted
         * @returns {void}
         */
        deleteColumn(columnIndex: number): void;

        /** To expand all the root level nodes in TreeGrid.
         * @returns {void}
         */
        expandAll(): void;

        /** Expands the records at specific hierarchical level
         * @param {number} you can pass the level as index number to expand
         * @returns {void}
         */
        expandAtLevel(index: number): void;

        /** To expand and collapse an item in TreeGrid using itemâ€™s index.
         * @param {number} Pass the row index of row to expand/collapse.
         * @returns {void}
         */
        expandCollapseRow(Index: number): void;

        /** To expand collapse the total summary row.
         * @param {boolean} Decides to expand/collapse the total summary
         * @returns {void}
         */
        expandCollapseTotalSummary(expanded: boolean): void;

        /** Sends filtering request to filter a column in TreeGrid.
         * @param {string} Pass the field name of the column.
         * @param {string} string/integer/dateTime operator.
         * @param {string} Pass the value to be filtered in a column.
         * @param {string} Pass the predicate as and/or.
         * @param {boolean} Optional pass the match case value as true/false.
         * @param {any} Optional actualFilterValue denote the filter object of current filtered columns.
         * @returns {void}
         */
        filterColumn(fieldName: string, filterOperator: string, filterValue: string, predicate: string, matchcase: boolean, actualFilterValue: any): void;

        /** To filter multiple columns with multiple conditions dynamically in TreeGrid.
         * @param {TreeGrid.EjPredicate} Pass the filtering column details and conditions as ejPredicate instance. ejPredicate object is defined as fieldName,filterOperator, filterValue and
         * ignoreCase properties
         * @returns {void}
         */
        filterContent(ejPredicate: TreeGrid.EjPredicate): void;

        /** Freeze/unfreeze the specified column.
         * @param {string} Freeze/Unfreeze this field column.
         * @param {boolean} Decides to Freeze/Unfreeze this field column.
         * @returns {void}
         */
        freezeColumn(field: string, isFrozen: boolean): void;

        /** Freeze all the columns preceding to the column specified by the field name.
         * @param {string} Freeze all Columns before this field column.
         * @returns {void}
         */
        freezePrecedingColumns(field: string): void;

        /** Gets the column object of specific column.
         * @param {string} Pass the column field name to get details of that column.
         * @returns {any}
         */
        getColumnByField(fieldName: string): any;

        /** Gets the column object of specific column.
         * @param {string} Pass the column header text to get details of that column.
         * @returns {any}
         */
        getColumnByHeaderText(headerText: string): any;

        /** Gets the column index of specific column with data source field.
         * @param {string} Pass the column field name to get its index.
         * @returns {number}
         */
        getColumnIndexByField(fieldName: string): number;

        /** Gets the column field name using column header text.
         * @param {string} Pass the column header text to get its field name.
         * @returns {string}
         */
        getFieldNameByHeaderText(headerText: string): string;

        /** Gets the scroll left offset of TreeGrid.
         * @returns {number}
         */
        getScrollLeftOffset(): number;

        /** Gets the scroll top offset of TreeGrid.
         * @returns {number}
         */
        getScrollTopOffset(): number;

        /** Gets the selected cell(s) element details in TreeGrid.
         * @returns {any[]}
         */
        getSelectedCells(): any[];

        /** To get the updated data source of TreeGrid.
         * @returns {any[]}
         */
        getUpdatedRecords(): any[];

        /** Sends request to navigate to a specific page in TreeGrid.
         * @param {number} Pass the page index to perform paging at specified page index.
         * @returns {void}
         */
        gotoPage(PageIndex: number): void;

        /** To hide the column by using header text
         * @param {string} you can pass a header text of a column to hide.
         * @returns {void}
         */
        hideColumn(headerText: string): void;

        /** To move the TreeGrid rows programmatically with from index ,to index and position.
         * @param {number} you can pass drag Index of the row
         * @param {number} you can pass target Index of the row.
         * @param {string} you can pass the drop position as above,below,child
         * @returns {void}
         */
        moveRow(fromIndex: number, toIndex: number, position: string): void;

        /** To refresh the changes in tree grid
         * @param {any[]} Pass which data source you want to show in tree grid
         * @param {any} Pass which data you want to show in tree grid
         * @returns {void}
         */
        refresh(dataSource: any[], query: any): void;

        /** To rename a column with the specified name
         * @param {number} Index of the column to be renamed
         * @param {string} Header text of the column
         * @returns {void}
         */
        renameColumn(columnIndex: number, name: string): void;

        /** To reorder the column with field name and target index values
         * @param {string} you can pass a name of column to reorder.
         * @param {string} you can pass a target column index to be inserted.
         * @returns {void}
         */
        reorderColumn(fieldName: string, targetIndex: string): void;

        /** To save the edited cell in TreeGrid
         * @returns {void}
         */
        saveCell(): void;

        /** Sets the scroll left and scroll top offsets of TreeGrid.
         * @param {string} Pass a value to set left position of horizontal scroll bar.
         * @param {string} Pass a value to set top position of vertical scroll bar.
         * @returns {void}
         */
        scrollOffset(Left: string, Top: string): void;

        /** Sets the scroll top offset of TreeGrid to maximum value.
         * @returns {void}
         */
        scrollToBottom(): void;

        /** Sets the scroll top offset of TreeGrid to 0.
         * @returns {void}
         */
        scrollToTop(): void;

        /** To select cell based on the cell and row index dynamically.
         * @param {any[]} array of cell indexes to be select
         * @param {boolean} Defines that we need to preserve the previously selected cells or not
         * @returns {void}
         */
        selectCells(Indexes: any[], preservePreviousSelectedCell: boolean): void;

        /** To open the dialog to add new record/row in TreeGrid.
         * @returns {void}
         */
        showAddDialog(): void;

        /** To show the column by using header text
         * @param {string} you can pass a header text of a column to show.
         * @returns {void}
         */
        showColumn(headerText: string): void;

        /** To open the dialog to edit a row/record in TreeGrid.
         * @param {number} Pass the index of row to be edit.
         * @returns {void}
         */
        showEditDialog(Index: number): void;

        /** Show/Hide the detail row of a specific record.
         * @param {number} Pass the row index of record to show/hide the detail row.
         * @returns {void}
         */
        showHideDetailsRow(rowIndex: number): void;

        /** To sorting the data based on the particular fields
         * @param {string} you can pass a name of column to sort.
         * @param {string} you can pass a sort direction to sort the column.
         * @returns {void}
         */
        sortColumn(fieldName: string, columnSortDirection: string): void;

        /** To change the checkbox selection to any column.
         * @param {string} Pass the column field name to check box selection to that column.
         * @returns {void}
         */
        updateCheckboxColumn(fieldName: string): void;

        /** To update the value of TreeGrid row by using row index.
         * @param {number} index of record to be updated
         * @param {any} object with modified field value
         * @returns {void}
         */
        updateRecordByIndex(index: number, data: any): void;

        /** Sets the minimum responsive width for TreeGrid.
         * @param {string} Pass the minimum responsive width, above which the TreeGrid needs to work in responsive mode.
         * @returns {void}
         */
        updateResponsiveMinWidth(width: string): void;
    }
    export namespace TreeGrid {

        export interface EjPredicate {

            /** Pass the field name of the column.
             */
            fieldName?: string;

            /** string/integer/date operator.
             */
            filterOperator?: string;

            /** Pass the value to be filtered in a column.
             */
            filterValue?: string;

            /** Optional - pass the ignore case value as true/false.
             */
            ignoreCase?: boolean;
        }

        export interface Model {

            /** Enables or disables the option for column reordering
             * @Default {false}
             */
            allowColumnReordering?: boolean;

            /** Enables or disables the ability to resize the column width interactively.
             * @Default {false}
             */
            allowColumnResize?: boolean;

            /** Enables or disables the ability to drag and drop the row interactively to reorder the rows.
             * @Default {false}
             */
            allowDragAndDrop?: boolean;

            /** Enables or disables the ability to filter the data on all the columns. Enabling this property will display a row with editor controls corresponding to each column. You can
             * restrict filtering on particular column by disabling this property directly on that column instance itself.
             * @Default {false}
             */
            allowFiltering?: boolean;

            /** Enables or disables keyboard navigation.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Enables or disables the ability to sort the rows based on multiple columns/fields by clicking on each column header. Rows will be sorted recursively on clicking the column headers.
             * @Default {false}
             */
            allowMultiSorting?: boolean;

            /** Enables/disables pagination of rows in TreeGrid
             * @Default {false}
             */
            allowPaging?: boolean;

            /** Enables or disables the toolbar searching in TreeGrid.
             * @Default {false}
             */
            allowSearching?: boolean;

            /** Enables or disables the ability to select a row interactively.
             * @Default {true}
             */
            allowSelection?: boolean;

            /** Enables or disables the ability to sort the rows based on a single field/column by clicking on that column header. When enabled, rows can be sorted only by single field/column.
             * @Default {false}
             */
            allowSorting?: boolean;

            /** Gets or sets a value that indicates whether the Content will wrap to the next line if the content exceeds the boundary of the Column Cells.
             * @Default {false}
             */
            allowTextWrap?: boolean;

            /** Specifies the id of the template that has to be applied for alternate rows.
             */
            altRowTemplateID?: string;

            /** Specifies the template for cell tooltip
             * @Default {null}
             */
            cellTooltipTemplate?: string;

            /** Specifies the mapping property path for sub tasks in datasource
             */
            childMapping?: string;

            /** Enables or disables the expandable/collapsible footer summary row. By default expander icon for footer summary will be rendered in first column of first summary row.
             * @Default {false}
             */
            collapsibleTotalSummary?: boolean;

            /** To Specify the column fields to be displayed in the dialog while inserting a column using column menu.
             * @Default {[]}
             */
            columnDialogFields?: any[];

            /** Specifies the settings for column resize
             */
            columnResizeSettings?: ColumnResizeSettings;

            /** Option for adding columns; each column has the option to bind to a field in the dataSource.
             */
            columns?: Column[];

            /** Defines the common width for all the columns in TreeGrid
             * @Default {150}
             */
            commonWidth?: number;

            /** Options for displaying and customizing context menu items.
             */
            contextMenuSettings?: ContextMenuSettings;

            /** Specify the CSS class for TreeGrid to achieve custom theme.
             */
            cssClass?: string;

            /** Specifies hierarchical or self-referential data to populate the TreeGrid.
             * @Default {null}
             */
            dataSource?: any[];

            /** Specifies the template for details view
             */
            detailsTemplate?: string;

            /** Specifies the row height of the details view
             * @Default {100}
             */
            detailsRowHeight?: number;

            /** Options for displaying and customizing the tooltip. This tooltip will show the preview of the row that is being dragged.
             */
            dragTooltip?: DragTooltip;

            /** Options for enabling and configuring the editing related operations.
             */
            editSettings?: EditSettings;

            /** Specifies whether to render alternate rows in different background colors.
             * @Default {true}
             */
            enableAltRow?: boolean;

            /** Specifies whether to load all the rows in collapsed state when the TreeGrid is rendered for the first time.
             * @Default {false}
             */
            enableCollapseAll?: boolean;

            /** Gets or sets a value that indicates whether to enable load on demand approach, for rendering child records and page records.
             * @Default {false}
             */
            enableLoadOnDemand?: boolean;

            /** Specifies whether to resize TreeGrid whenever window size changes.
             * @Default {false}
             */
            enableResize?: boolean;

            /** Specifies whether to render only the visual elements that are visible in the UI. When you enable this property, it will reduce the loading time for loading large number of records.
             * @Default {false}
             */
            enableVirtualization?: boolean;

            /** Specifies the mapping property path for the expand status of a record in data source.
             */
            expandStateMapping?: string;

            /** Options for filtering and customizing filter actions.
             */
            filterSettings?: FilterSettings;

            /** Specifies whether to wrap the header text when it is overflown i.e., when it exceeds the header width.
             * @Default {ej.TreeGrid.HeaderTextOverflow.None}
             */
            headerTextOverflow?: ej.TreeGrid.HeaderTextOverflow|string;

            /** Specifies the name of the field in the dataSource, which contains the id of that row.
             */
            idMapping?: string;

            /** Enables or disables the responsiveness of TreeGrid
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the localization information to customize the User Interface (UI) to support regional language and culture
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the options for customizing the pager.
             */
            pageSettings?: PageSettings;

            /** Specifies the name of the field in the dataSource, which contains the parent's id. This is necessary to form a parent-child hierarchy, if the dataSource contains self-referential
             * data.
             */
            parentIdMapping?: string;

            /** Enables or disables internal parsing of a row. When disabled this property, row will be displayed using the defined template without any internal event bindings.
             * @Default {true}
             */
            parseRowTemplate?: boolean;

            /** Specifies ej.Query to select data from the dataSource. This property is applicable only when the dataSource is ej.DataManager.
             * @Default {null}
             */
            query?: any;

            /** Specifies the height of a single row in tree grid. Also, we need to set same height in the CSS style with class name e-rowcell.
             * @Default {30}
             */
            rowHeight?: number;

            /** Specifies the id of the template to be applied for all the rows.
             */
            rowTemplateID?: string;

            /** Specifies the toolbar searching customizations.
             */
            searchSettings?: SearchSettings;

            /** Specifies the selected cell information on rendering TreeGrid.
             */
            selectedCellIndexes?: SelectedCellIndex[];

            /** Specifies the index of the selected row.
             * @Default {-1}
             */
            selectedRowIndex?: number;

            /** Specifies the settings for row and cell selection.
             */
            selectionSettings?: SelectionSettings;

            /** Controls the visibility of the menu button, which is displayed on the column header. Clicking on this button will show a popup menu. When you choose Columns item from this popup,
             * a list box with column names will be shown, from which you can select/deselect a column name to control the visibility of the respective columns.
             * @Default {false}
             */
            showColumnChooser?: boolean;

            /** Enables/disables the options for inserting , deleting and renaming  columns.
             * @Default {false}
             */
            showColumnOptions?: boolean;

            /** Specifies the visibility of details view
             * @Default {false}
             */
            showDetailsRow?: boolean;

            /** Specifies the visibility of the expander column which is used to expand or collapse the details view
             * @Default {false}
             */
            showDetailsRowInfoColumn?: boolean;

            /** Specifies whether to show tooltip when mouse is hovered on the cell.
             * @Default {true}
             */
            showGridCellTooltip?: boolean;

            /** Specifies whether to show tooltip for the cells, which has expander button.
             * @Default {true}
             */
            showGridExpandCellTooltip?: boolean;

            /** Gets or sets a value that indicates stacked header should be shown on TreeGrid layout when the property â€œstackedHeaderRowsâ€ is set.
             * @Default {false}
             */
            showStackedHeader?: boolean;

            /** Specifies the visibility of summary row
             * @Default {false}
             */
            showSummaryRow?: boolean;

            /** Specifies the visibility of total summary row for the corresponding summary column
             * @Default {false}
             */
            showTotalSummary?: boolean;

            /** Options for setting width and height for TreeGrid.
             */
            sizeSettings?: SizeSettings;

            /** Options for sorting the rows.
             */
            sortSettings?: SortSettings;

            /** Gets or sets an object that indicates to managing the collection of stacked header rows for the TreeGrid.
             * @Default {[]}
             */
            stackedHeaderRows?: StackedHeaderRow[];

            /** Specifies the summary row collection object to be displayed
             * @Default {[]}
             */
            summaryRows?: SummaryRow[];

            /** Options for displaying and customizing the toolbar items.
             */
            toolbarSettings?: ToolbarSettings;

            /** Specifies the height of footer summary container.
             * @Default {90}
             */
            totalSummaryHeight?: number;

            /** Specifies the index of the column that needs to have the expander button. By default, cells in the first column contain the expander button.
             * @Default {0}
             */
            treeColumnIndex?: number;

            /** Triggered before every success event of TreeGrid action.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggered for every TreeGrid action success event.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggered before the printing initiated in TreeGrid.
             */
            beforePrint?(e: BeforePrintEventArgs): void;

            /** Triggered while enter the edit mode in the TreeGrid cell
             */
            beginEdit?(e: BeginEditEventArgs): void;

            /** Triggered after selected a cell
             */
            cellSelected?(e: CellSelectedEventArgs): void;

            /** Triggered before selecting a cell
             */
            cellSelecting?(e: CellSelectingEventArgs): void;

            /** Triggered after collapsed the TreeGrid record
             */
            collapsed?(e: CollapsedEventArgs): void;

            /** Triggered while collapsing the TreeGrid record
             */
            collapsing?(e: CollapsingEventArgs): void;

            /** Triggered while dragging a column
             */
            columnDrag?(e: ColumnDragEventArgs): void;

            /** Triggered  when you start to drag a column
             */
            columnDragStart?(e: ColumnDragStartEventArgs): void;

            /** Triggered when a column is dropped
             */
            columnDrop?(e: ColumnDropEventArgs): void;

            /** Triggered when a column has been resized
             */
            columnResizeEnd?(e: ColumnResizeEndEventArgs): void;

            /** Triggered while start to resize a column
             */
            columnResizeStart?(e: ColumnResizeStartEventArgs): void;

            /** Triggered after a column resized
             */
            columnResized?(e: ColumnResizedEventArgs): void;

            /** Triggered while Context Menu is rendered in TreeGrid control
             */
            contextMenuOpen?(e: ContextMenuOpenEventArgs): void;

            /** Triggered when TreeGrid is rendered completely
             */
            create?(e: CreateEventArgs): void;

            /** Triggered while rendering details template in TreeGrid
             */
            detailsDataBound?(e: DetailsDataBoundEventArgs): void;

            /** Triggered when details template pop-up is hidden.
             */
            detailsHidden?(e: DetailsHiddenEventArgs): void;

            /** Triggered when details template pop-up is shown.
             */
            detailsShown?(e: DetailsShownEventArgs): void;

            /** Triggered after saved the modified cellValue in TreeGrid
             */
            endEdit?(e: EndEditEventArgs): void;

            /** Triggered after expand the record
             */
            expanded?(e: ExpandedEventArgs): void;

            /** Triggered while expanding the TreeGrid record
             */
            expanding?(e: ExpandingEventArgs): void;

            /** Triggered while Treegrid is loaded
             */
            load?(e: LoadEventArgs): void;

            /** Triggered while rendering each cell in the TreeGrid
             */
            queryCellInfo?(e: QueryCellInfoEventArgs): void;

            /** Triggered while clicking a row, even when allowSelection property is disabled.
             */
            recordClick?(e: RecordClickEventArgs): void;

            /** Triggered during record double click action, even when allowSelection property is disabled.
             */
            recordDoubleClick?(e: RecordDoubleClickEventArgs): void;

            /** Triggered while rendering each row
             */
            rowDataBound?(e: RowDataBoundEventArgs): void;

            /** Triggered while dragging a row in TreeGrid control
             */
            rowDrag?(e: RowDragEventArgs): void;

            /** Triggered while start to drag row in TreeGrid control
             */
            rowDragStart?(e: RowDragStartEventArgs): void;

            /** Triggered while drop a row in TreeGrid control
             */
            rowDragStop?(e: RowDragStopEventArgs): void;

            /** Triggered before row drop action begins.
             */
            rowDropActionBegin?(e: RowDropActionBeginEventArgs): void;

            /** Triggered after the row is selected.
             */
            rowSelected?(e: RowSelectedEventArgs): void;

            /** Triggered before the row is going to be selected.
             */
            rowSelecting?(e: RowSelectingEventArgs): void;

            /** Triggered when toolbar item is clicked in TreeGrid.
             */
            toolbarClick?(e: ToolbarClickEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current grouped column field name.
             */
            columnName?: string;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the direction of sorting ascending or descending.
             */
            columnSortDirection?: string;

            /** Returns the value of expanding parent element.
             */
            keyValue?: string;

            /** Returns the data or deleting element.
             */
            data?: string;
        }

        export interface ActionCompleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the grid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the current grouped column field name.
             */
            columnName?: string;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the direction of sorting ascending or descending
             */
            columnSortDirection?: string;

            /** Returns the value of searched element.
             */
            keyValue?: string;

            /** Returns the data of deleted element.
             */
            data?: string;

            /** Returns selected record index
             */
            recordIndex?: number;
        }

        export interface BeforePrintEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the TreeGrid element which is going to be print
             */
            element?: any;

            /** Returns request type.
             */
            requestType?: string;
        }

        export interface BeginEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of editing cell.
             */
            rowElement?: any;

            /** Returns the Element of editing cell.
             */
            cellElement?: any;

            /** Returns the data of current cell record.
             */
            data?: any;

            /** Returns the column Index of cell belongs.
             */
            columnIndex?: number;
        }

        export interface CellSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the cell index on the selection.
             */
            cellIndex?: number;

            /** Returns the row index on the selection
             */
            rowIndex?: number;

            /** Returns the selecting cell element
             */
            targetCell?: any;

            /** Returns the selecting row element
             */
            targetRow?: any;

            /** Returns the selecting record object
             */
            data?: any;

            /** Returns the Gantt object Model
             */
            model?: any;

            /** Returns the previously selected row data
             */
            previousData?: any;

            /** Returns the previously selected cell index
             */
            previousCellIndex?: any;

            /** Returns the previously selected row index
             */
            previousRowIndex?: any;

            /** Returns the previously selected cell element
             */
            previousTargetCell?: any;

            /** Returns the previously selected row element
             */
            previousTargetRow?: any;
        }

        export interface CellSelectingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the cell index on the selection.
             */
            cellIndex?: number;

            /** Returns the row index on the selection
             */
            rowIndex?: number;

            /** Returns the selecting cell element
             */
            targetCell?: any;

            /** Returns the selecting row element
             */
            targetRow?: any;

            /** Returns the selecting record object
             */
            data?: any;

            /** Returns the Gantt object Model
             */
            model?: any;
        }

        export interface CollapsedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of collapsed record.
             */
            recordIndex?: number;

            /** Returns the data of collapsed record..
             */
            data?: any;

            /** Returns Request Type.
             */
            requestType?: string;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;

            /** Returns the event type.
             */
            type?: string;
        }

        export interface CollapsingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of collapsing record.
             */
            recordIndex?: number;

            /** Returns the data of collapsing record..
             */
            data?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns state of a record whether it is in expanded or collapsing state.
             */
            expanded?: boolean;
        }

        export interface ColumnDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data which is dragged
             */
            draggedColumn?: any;

            /** Returns the index of the column being dragged
             */
            draggedColumnIndex?: number;

            /** Returns the target column data
             */
            targetColumn?: any;

            /** Returns the index of the target column
             */
            targetColumnIndex?: number;

            /** Returns that we can drop over the column or not.
             */
            canDrop?: boolean;
        }

        export interface ColumnDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data which is dragged
             */
            draggedColumn?: any;

            /** Returns the index of the column being dragged
             */
            draggedColumnIndex?: number;
        }

        export interface ColumnDropEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data which is dragged
             */
            draggedColumn?: any;

            /** Returns the index of the column being dragged
             */
            draggedColumnIndex?: number;

            /** Returns the target column data
             */
            targetColumn?: any;

            /** Returns the index of the target column
             */
            targetColumnIndex?: number;
        }

        export interface ColumnResizeEndEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data in which the resizing started
             */
            column?: any;

            /** Returns the column index in which the resizing started
             */
            columnIndex?: number;

            /** Returns the column width difference, before and after the resizing
             */
            extra?: number;

            /** Returns the new column width after resized
             */
            newWidth?: number;

            /** Returns column width before dragging
             */
            oldWidth?: number;

            /** Returns initial column element object.
             */
            target?: any;
        }

        export interface ColumnResizeStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data in which the resizing started
             */
            column?: any;

            /** Returns the column index in which the resizing started
             */
            columnIndex?: number;

            /** Returns column width before dragging
             */
            oldWidth?: number;

            /** Returns initial column element object.
             */
            target?: any;
        }

        export interface ColumnResizedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the control model values.
             */
            model?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns the column data which is resized
             */
            column?: any;

            /** Returns the index of the column being resized.
             */
            columnIndex?: number;

            /** Returns resized column width after resized.
             */
            newWidth?: number;

            /** Returns resized column width before resizing
             */
            oldWidth?: number;
        }

        export interface ContextMenuOpenEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the default context menu items to which we add custom items.
             */
            contextMenuItems?: any[];

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the TreeGrid model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsDataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data collection of selected row.
             */
            data?: any;

            /** Returns the details element of selected row.
             */
            detailsElement?: any;

            /** Returns the rowIndex of selected row.
             */
            rowIndex?: number;

            /** Returns the TreeGrid model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsHiddenEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the TreeGrid model
             */
            model?: any;

            /** Returns the data collection of hidden details Template
             */
            rowData?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DetailsShownEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data collection of selected row.
             */
            data?: any;

            /** Returns the details element of selected row.
             */
            detailsElement?: any;

            /** Returns the rowIndex of selected row.
             */
            rowIndex?: number;

            /** Returns the TreeGrid model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface EndEditEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of editing cell.
             */
            rowElement?: any;

            /** Returns the Element of editing cell.
             */
            cellElement?: any;

            /** Returns the data of edited cell record.
             */
            data?: any;

            /** Returns the column name of edited cell belongs.
             */
            columnName?: string;

            /** Returns the column object of edited cell belongs.
             */
            columnObject?: any;
        }

        export interface ExpandedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of expanded record.
             */
            recordIndex?: number;

            /** Returns the data of expanded record..
             */
            data?: any;

            /** Returns Request Type.
             */
            requestType?: string;

            /** Returns state of a record whether it is in expanded or expanded state.
             */
            expanded?: boolean;

            /** Returns the event type.
             */
            type?: string;
        }

        export interface ExpandingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row index of expanding record.
             */
            recordIndex?: number;

            /** Returns the data of expanding record..
             */
            data?: any;

            /** Returns the event Type.
             */
            type?: string;

            /** Returns state of a record whether it is in expanded or collapsed state.
             */
            expanded?: boolean;
        }

        export interface LoadEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the TreeGrid model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface QueryCellInfoEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the selecting cell element.
             */
            cellElement?: any;

            /** Returns the value of cell.
             */
            cellValue?: string;

            /** Returns the data of current cell record.
             */
            data?: any;

            /** Returns the column of cell belongs.
             */
            column?: any;
        }

        export interface RecordClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the element of clicked cell.
             */
            cell?: any;

            /** Returns the index of the clicked cell.
             */
            cellIndex?: number;

            /** Returns the data of clicked cell.
             */
            cellValue?: any;

            /** Returns the element of the clicked row.
             */
            row?: any;

            /** Returns the index of the clicked row.
             */
            rowIndex?: number;

            /** Returns the column name of the clicked cell.
             */
            columnName?: string;
        }

        export interface RecordDoubleClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the element of clicked cell.
             */
            cell?: any;

            /** Returns the index of the clicked cell.
             */
            cellIndex?: number;

            /** Returns the data of clicked cell.
             */
            cellValue?: any;

            /** Returns the element of the clicked row.
             */
            row?: any;

            /** Returns the index of the clicked row.
             */
            rowIndex?: number;

            /** Returns the column name of the clicked cell.
             */
            columnName?: string;
        }

        export interface RowDataBoundEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row element of rendering row.
             */
            rowElement?: any;

            /** Returns the data of rendering row record.
             */
            data?: any;
        }

        export interface RowDragEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: number;

            /** Returns the drop position details such as insertAbove,insertBelow,insertAsChild and invalidPosition
             */
            dropPosition?: string;

            /** Returns the row on which we are dragging.
             */
            targetRow?: any;

            /** Returns the row index on which we are dragging.
             */
            targetRowIndex?: number;

            /** Returns that we can drop over that record or not.
             */
            canDrop?: boolean;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDragStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: boolean;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDragStopEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: number;

            /** Returns the row which we are dropped to row.
             */
            targetRow?: any;

            /** Returns the row index which we are dropped to row.
             */
            targetRowIndex?: number;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowDropActionBeginEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the row which we start to drag.
             */
            draggedRow?: any;

            /** Returns the row index which we start to drag.
             */
            draggedRowIndex?: number;

            /** Returns the multiple dragged row collection for multiple reorder
             */
            draggedRecords?: any[];

            /** Returns the drop position.
             */
            dropPosition?: string;

            /** Returns the row which we are dropped to row.
             */
            targetRow?: any;

            /** Returns the row index which we are dropped to row.
             */
            targetRowIndex?: number;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface RowSelectedEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the selecting row element.
             */
            targetRow?: any;

            /** Returns the index of selecting row record.
             */
            recordIndex?: number;

            /** Returns the data of selected record.
             */
            data?: any;

            /** Returns the event type.
             */
            type?: string;
        }

        export interface RowSelectingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the data selecting record.
             */
            data?: any;

            /** Returns the index of selecting row record.
             */
            recordIndex?: string;

            /** Returns the selecting row element.
             */
            targetRow?: any;

            /** Returns the previous selected data.
             */
            previousData?: any;

            /** Returns the previous selected row index.
             */
            previousIndex?: string;

            /** Returns the previous selected row element.
             */
            previousTreeGridRow?: any;
        }

        export interface ToolbarClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the current item.
             */
            currentTarget?: any;

            /** Returns the TreeGrid model.
             */
            model?: any;

            /** Returns the name of the toolbar item on which mouse click has been performed
             */
            itemName?: string;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ColumnResizeSettings {

            /** Specifies the mode for column resizing
             * @Default {ej.TreeGrid.ColumnResizeMode.Normal}
             */
            columnResizeMode?: ej.TreeGrid.ColumnResizeMode|string;
        }

        export interface ColumnsCommand {

            /** Gets or sets an object to customize command button with available ejButton properties.
             */
            buttonOptions?: any;

            /** Gets or sets a value that define the command column buttons to be displayed.
             */
            type?: ej.TreeGrid.UnboundType|string;
        }

        export interface Column {

            /** Enables/disables cell selection.
             * @Default {false}
             */
            allowCellSelection?: boolean;

            /** Enables or disables the ability to edit a row or cell.
             * @Default {false}
             */
            allowEditing?: boolean;

            /** Enables or disables the ability to filter the rows based on this column.
             * @Default {false}
             */
            allowFiltering?: boolean;

            /** Enables the blanks option in ejDropDownList mapped in TreeGrid column
             * @Default {true}
             */
            allowFilteringBlankContent?: boolean;

            /** Enables or disables the ability to freeze/unfreeze the columns
             * @Default {false}
             */
            allowFreezing?: boolean;

            /** Enables or disables the ability to sort the rows based on this column/field.
             * @Default {false}
             */
            allowSorting?: boolean;

            /** Specifies the template ID or the template string of the AngularJS script element to enable column template for a column.
             */
            angularTemplate?: string;

            /** Sets the clip mode for TreeGrid cell as ellipsis or clipped content(both header and content)
             * @Default {ej.TreeGrid.ClipMode.Clip}
             */
            clipMode?: ej.TreeGrid.ClipMode|string;

            /** Gets or sets an object to define a command column in TreeGrid.
             * @Default {[]}
             */
            commands?: ColumnsCommand[];

            /** Gets or sets a value that indicates to display a column value as checkbox or string
             * @Default {false}
             */
            displayAsCheckbox?: boolean;

            /** To bind the dropdown data for TreeGrid column mapped with ejDropDownList
             */
            dropdownData?: string;

            /** To customize the ej controls defined in TreeGrid column with their native property.
             */
            editParams?: any;

            /** Gets or sets a template that displays a custom editor for editing the column values.
             * @Default {null}
             */
            editTemplate?: any;

            /** Specifies the edit type of the column.
             * @Default {ej.TreeGrid.EditingType.String}
             */
            editType?: ej.TreeGrid.EditingType|string;

            /** Specifies the name of the field from the dataSource to bind with this column.
             */
            field?: string;

            /** Specifies the type of the editor control to be used to filter the rows.
             * @Default {ej.TreeGrid.EditingType.String}
             */
            filterEditType?: ej.TreeGrid.EditingType|string;

            /** Gets or sets a value to render either excel or menu filtering in TreeGrid column filtering.
             * @Default {null}
             */
            filterType?: ej.TreeGrid.FilterType|string;

            /** Specifies the display format of a column
             * @Default {null}
             */
            format?: any;

            /** Specifies the header template value for the column header
             */
            headerTemplateID?: string;

            /** Header text of the column.
             * @Default {null}
             */
            headerText?: string;

            /** Specifies the alignment of the column header text
             * @Default {ej.TextAlign.Left}
             */
            headerTextAlign?: ej.TextAlign|string;

            /** Sets the tooltip template for the column header
             * @Default {null}
             */
            headerTooltip?: string;

            /** Specifies whether the column is frozen
             * @Default {false}
             */
            isFrozen?: boolean;

            /** Specifies whether the column is a template column
             * @Default {false}
             */
            isTemplateColumn?: boolean;

            /** Gets or sets the priority value of the column. It is used to show/hide TreeGrid columns in responsive mode.
             * @Default {-1}
             */
            priority?: number;

            /** Enables or disables the checkbox visibility in a column for checkbox selection.
             * @Default {false}
             */
            showCheckbox?: boolean;

            /** We can include or exclude particular column from column visibility list in column menu.
             * @Default {true}
             */
            showInColumnChooser?: boolean;

            /** Specifies the template string of the script element to enable column template for a column.
             */
            template?: string;

            /** Specifies the template ID of the script element to enable column template for a column.
             */
            templateID?: string;

            /** Specifies the text alignment for the column
             * @Default {ej.TextAlign.Left}
             */
            textAlign?: ej.TextAlign|string;

            /** Sets the tooltip template for the specific column.
             * @Default {null}
             */
            tooltip?: string;

            /** specifies the conditions for saving data to the database while adding or editing the fields.
             */
            validationRules?: any;

            /** Controls the visibility of the column.
             * @Default {true}
             */
            visible?: boolean;

            /** Gets or sets a value for TreeGrid column width
             */
            width?: number;
        }

        export interface ContextMenuSettings {

            /** Option for adding items to context menu.
             * @Default {[]}
             */
            contextMenuItems?: Array<ej.TreeGrid.ContextMenuItems|string>;

            /** Shows/hides the context menu.
             * @Default {false}
             */
            showContextMenu?: boolean;
        }

        export interface DragTooltip {

            /** Specifies whether to show tooltip while dragging a row.
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Option to add field names whose corresponding values in the dragged row needs to be shown in the preview tooltip.
             * @Default {[]}
             */
            tooltipItems?: any[];

            /** Custom template for that tooltip that is shown while dragging a row.
             * @Default {null}
             */
            tooltipTemplate?: string;
        }

        export interface EditSettingsBatchEditSettings {

            /** Specifies the batch edit mode whether it is cell, row or dialog.
             * @Default {ej.TreeGrid.BatchEditMode.Cell}
             */
            editMode?: ej.TreeGrid.BatchEditMode|string;
        }

        export interface EditSettings {

            /** Enables or disables the button to add new row in context menu as well as in toolbar.
             * @Default {true}
             */
            allowAdding?: boolean;

            /** Enables or disables the button to delete the selected row in context menu as well as in toolbar.
             * @Default {true}
             */
            allowDeleting?: boolean;

            /** Enables or disables the ability to edit a row or cell.
             * @Default {false}
             */
            allowEditing?: boolean;

            /** specifies the batch edit mode in TreeGrid.
             */
            batchEditSettings?: EditSettingsBatchEditSettings;

            /** Specifies the mouse action whether single click or double click to begin the editing
             * @Default {ej.TreeGrid.BeginEditAction.DblClick}
             */
            beginEditAction?: ej.TreeGrid.BeginEditAction|string;

            /** Specifies the template ID for the custom dialog.
             * @Default {null}
             */
            dialogEditorTemplateID?: string;

            /** specifies the edit mode in TreeGrid , &quot;cellEditing&quot; is for cell type editing and &quot;rowEditing&quot; is for entire row.
             * @Default {ej.TreeGrid.EditMode.CellEditing}
             */
            editMode?: ej.TreeGrid.EditMode|string;

            /** Specifies the position where the new row has to be added.
             * @Default {ej.TreeGrid.RowPosition.Top}
             */
            rowPosition?: ej.TreeGrid.RowPosition|string;

            /** Enable or disable the confirmation dialog while deleting the record.
             * @Default {false}
             */
            showDeleteConfirmDialog?: boolean;
        }

        export interface FilterSettingsFilteredColumn {

            /** Specifies the field where filtering has to be performed.
             */
            field?: string;

            /** Specifies the filter condition to filtered column. See operator
             */
            operator?: string;

            /** Specifies the predicate(and/or) value to perform filtering.
             */
            predicate?: string;

            /** Specifies the value to be filtered in TreeGrid.
             */
            value?: string;
        }

        export interface FilterSettings {

            /** Gets or sets a value that indicates to perform the filter operation with case sensitive in excel styled filter menu mode.
             * @Default {false}
             */
            enableCaseSensitivity?: boolean;

            /** Enables or disables the ability to filter the columns with empty, null and undefined values.
             * @Default {true}
             */
            enableComplexBlankFilter?: boolean;

            /** Specifies the mode on which column filtering should start
             * @Default {immediate}
             */
            filterBarMode?: string;

            /** Specifies the mode of filtering to filter the record with or without hierarchy.
             * @Default {ej.TreeGrid.FilterHierarchyMode.Parent}
             */
            filterHierarchyMode?: ej.TreeGrid.FilterHierarchyMode|string;

            /** Specifies the type of column filtering.
             * @Default {ej.TreeGrid.FilterType.FilterBar}
             */
            filterType?: ej.TreeGrid.FilterType|string;

            /** Specifies the column collection for filtering the TreeGrid content on initial load
             * @Default {[]}
             */
            filteredColumns?: FilterSettingsFilteredColumn[];

            /** Gets or sets a value that indicates the maximum number of filter choices that can be showed in the excel styled filter menu.
             * @Default {1000}
             */
            maxFilterChoices?: number;
        }

        export interface PageSettings {

            /** Specifies the current page to display at load time.
             * @Default {1}
             */
            currentPage?: number;

            /** Using this property we can specify the number of pages should pager contains, according to this count TreeGrid height will be updated.
             * @Default {8}
             */
            pageCount?: number;

            /** This specifies the number of rows to display in each page.
             * @Default {12}
             */
            pageSize?: number;

            /** Specifies the mode of record count in a page, whether it should count all the records or the root to count zero level parent records.
             * @Default {ej.TreeGrid.PageSizeMode.All}
             */
            pageSizeMode?: ej.TreeGrid.PageSizeMode|string;

            /** Specifies the mode of printing the control, whether it should print the all the records or the current page content.
             * @Default {ej.TreeGrid.PrintMode.AllPages}
             */
            printMode?: ej.TreeGrid.PrintMode|string;

            /** Specifies the Custom template for Pager control.
             * @Default {null}
             */
            template?: string;

            /** Get the value of records which is bound to TreeGrid. The totalRecordsCount value is calculated based on the datasource bound to TreeGrid.
             * @Default {null}
             */
            totalRecordsCount?: number;
        }

        export interface SearchSettings {

            /** Default Value
             * @Default {[]}
             */
            fields?: any[];

            /** Default Value
             * @Default {true}
             */
            ignoreCase?: boolean;

            /** Default Value
             */
            key?: string;

            /** Specifies the operator for the search key words in toolbar searching.
             * @Default {contains}
             */
            operator?: string;

            /** Specifies the search mode of records in searching.
             * @Default {ej.TreeGrid.SearchHierarchyMode.Parent}
             */
            searchHierarchyMode?: ej.TreeGrid.SearchHierarchyMode|string;
        }

        export interface SelectedCellIndex {

            /** Specifies the cell index to be selected in the row.
             */
            cellIndex?: number;

            /** Specifies the row index of the cell to be selected in TreeGrid control
             */
            rowIndex?: number;
        }

        export interface SelectionSettings {

            /** Enables or disables the selection by hierarchy in check box selection
             * @Default {true}
             */
            enableHierarchySelection?: boolean;

            /** Toggles the visibility of the checkbox in column header, using which all the check boxes can be selected or unselected.
             * @Default {true}
             */
            enableSelectAll?: boolean;

            /** Specifies the type of selection whether to select row or cell.
             * @Default {ej.TreeGrid.SelectionMode.Row}
             */
            selectionMode?: ej.TreeGrid.SelectionMode|string;

            /** Specifies the type of selection whether single, multiple or checkbox.
             * @Default {ej.TreeGrid.SelectionType.Single}
             */
            selectionType?: ej.TreeGrid.SelectionType|string;
        }

        export interface SizeSettings {

            /** Height of the TreeGrid.
             * @Default {450px}
             */
            height?: string;

            /** Width of the TreeGrid.
             * @Default {100%}
             */
            width?: string;
        }

        export interface SortSettingsSortedColumn {

            /** Specifies the sort direction in TreeGrid
             */
            direction?: string;

            /** Specifies the field to be sorted in TreeGrid
             */
            field?: string;
        }

        export interface SortSettings {

            /** Option to add columns based on which the rows have to be sorted recursively.
             * @Default {[]}
             */
            sortedColumns?: SortSettingsSortedColumn[];
        }

        export interface StackedHeaderRowsStackedHeaderColumn {

            /** Gets or sets a value that indicates the header text for the particular stacked header column.
             * @Default {null}
             */
            column?: any;

            /** Gets or sets a value that indicates class to the corresponding stackedHeaderColumn.
             * @Default {null}
             */
            cssClass?: string;

            /** Gets or sets a value that indicates the header text for the particular stacked header column.
             * @Default {null}
             */
            headerText?: string;

            /** Gets or sets a value that indicates the text alignment of the corresponding headerText.
             * @Default {ej.TextAlign.Left}
             */
            textAlign?: string;

            /** Sets the template for tooltip for the Grid stackedHeaderColumns.
             * @Default {null}
             */
            tooltip?: string;
        }

        export interface StackedHeaderRow {

            /** Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows
             * @Default {[]}
             */
            stackedHeaderColumns?: StackedHeaderRowsStackedHeaderColumn[];
        }

        export interface SummaryRowsSummaryColumn {

            /** Specifies the custom summary calculate function or text.
             */
            customSummaryValue?: string;

            /** Specifies summary column used to perform the summary calculation.
             */
            dataMember?: string;

            /** Specifies the required column to display the summary.
             */
            displayColumn?: string;

            /** Specifies the format to be applied on the summary column value.
             */
            format?: string;

            /** Specifies the text to be displayed before the summary column value.
             */
            prefix?: string;

            /** Specifies the text to be displayed after the summary column value.
             */
            suffix?: string;

            /** Specifies the summary type to perform calculations in a corresponding summary column. See summaryType.
             */
            summaryType?: ej.TreeGrid.SummaryType|string;
        }

        export interface SummaryRow {

            /** Specifies the summary columns in the summary rows.
             */
            summaryColumns?: SummaryRowsSummaryColumn[];

            /** Specifies the title for summary row collection in TreeGrid
             */
            title?: string;
        }

        export interface ToolbarSettingsCustomToolbarItem {

            /** Allows the user to insert the custom icons in toolbar using CSS class name selector.
             */
            text?: string;

            /** Allows the user to insert the custom icons in toolbar using script templates. Using this property we can bind HTML elements and other EJ controls to TreeGrid toolbar.
             */
            templateID?: string;

            /** Allows the user to display custom tooltip text for TreeGrid custom toolbar items.
             */
            tooltipText?: string;
        }

        export interface ToolbarSettings {

            /** Allows the user to insert custom toolbar items.
             */
            customToolbarItems?: ToolbarSettingsCustomToolbarItem[];

            /** Shows/hides the toolbar.
             * @Default {false}
             */
            showToolbar?: boolean;

            /** Specifies the list of toolbar items to be rendered in TreeGrid toolbar
             * @Default {[]}
             */
            toolbarItems?: Array<ej.TreeGrid.ToolbarItems|string>;
        }

        enum ColumnResizeMode {

            ///At load time column are rendered with given width value, while resizing the column only current column width is changed
            FixedColumns,

            ///At load time columns are stretched with control width, while resizing the column, current column width adjusted based on next column
            NextColumn,

            ///In this mode columns are stretched with control width in load time and on resizing action current column width was adjusted with all columns.
            Normal
        }


        enum ClipMode {

            ///Shows ellipsis for the overflown cell.
            Ellipsis,

            ///Truncate the text in the cell.
            Clip
        }


        enum UnboundType {

            ///Unbound type to perform edit action
            Edit,

            ///Unbound type to perform save action
            Save,

            ///Unbound type to perform delete action
            Delete,

            ///Unbound type to perform cancel action
            Cancel
        }


        enum EditingType {

            ///It Specifies String edit type.
            String,

            ///It Specifies Boolean edit type.
            Boolean,

            ///It Specifies Numeric edit type.
            Numeric,

            ///It Specifies Dropdown edit type.
            Dropdown,

            ///It Specifies DatePicker edit type.
            DatePicker,

            ///It Specifies DateTimePicker edit type.
            DateTimePicker,

            ///It Specifies Maskedit edit type.
            Maskedit
        }


        enum FilterType {

            ///Specifies the filter type as menu.
            Menu,

            ///Specifies the filter type as excel.
            Excel
        }


        enum ContextMenuItems {

            ///Enables the add menu item in context menu
            Add,

            ///Enables the edit menu item in context menu
            Edit,

            ///Enables the edit menu item in context menu
            Delete
        }


        enum BatchEditMode {

            ///you can edit a cell
            Cell,

            ///you can edit a row
            Row,

            ///you can edit a row in dialog form
            Dialog
        }


        enum BeginEditAction {

            ///you can begin the editing at double click
            DblClick,

            ///you can begin the editing at single click
            Click
        }


        enum EditMode {

            ///you can edit a cell.
            CellEditing,

            ///you can edit a row.
            RowEditing,

            ///you can edit a row in dialog form.
            DialogEditing,

            ///you can edit and save bulk of records
            BatchEditing
        }


        enum RowPosition {

            ///you can add a new row at top.
            Top,

            ///you can add a new row at bottom.
            Bottom,

            ///you can add a new row to above selected row.
            Above,

            ///you can add a new row to below selected row.
            Below,

            ///you can add a new row as a child for selected row.
            Child
        }


        enum FilterHierarchyMode {

            ///Shows the filtered record with parent record
            Parent,

            ///Shows the filtered record with child record
            Child,

            ///shows the filtered record with both parent and child record
            Both,

            ///Shows only filtered record.
            None
        }


        enum HeaderTextOverflow {

            ///You can disable the word wrap
            None,

            ///You can wrap the header content
            Wrap
        }


        enum PageSizeMode {

            ///To count all the parent and child records.
            All,

            ///To count the Zeroth level parent records.
            Root
        }


        enum PrintMode {

            ///To print all the pages
            AllPages,

            ///To print only the current page content.
            CurrentPage
        }


        enum SearchHierarchyMode {

            ///Parent level records will be included in searching
            Parent,

            ///Filtered child records will be displayed and parent records displayed along with its children.
            Child,

            ///Filtered child records will be displayed with parents and parents will be displayed along with its children
            Both,

            ///Filtered records alone will be displayed without it parents or children
            None
        }


        enum SelectionMode {

            ///you can select a row.
            Row,

            ///you can select a cell.
            Cell
        }


        enum SelectionType {

            ///you can select a single row.
            Single,

            ///you can select a multiple row.
            Multiple,

            ///you can select rows using checkbox.
            Checkbox
        }


        enum SummaryType {

            ///Displays the sum of summary column
            Sum,

            ///Displays the average of summary column
            Average,

            ///Displays the maximum value of summary column
            Maximum,

            ///Displays the minimum value of summary column
            Minimum,

            ///Displays the total count of summary column
            Count,

            ///Displays the minimum date value in summary column
            MinimumDate,

            ///Displays the maximum date value in summary column
            MaximumDate,

            ///Displays the true count value for boolean summary columns
            TrueCount,

            ///Displays the false count value for boolean summary columns
            FalseCount,

            ///Displays the value from custom summary function
            Custom
        }


        enum ToolbarItems {

            ///Enables the add icon in toolbar
            Add,

            ///Enables the edit icon in toolbar
            Edit,

            ///Enables the edit icon in toolbar
            Delete,

            ///Enables the update icon in toolbar
            Update,

            ///Enables the cancel icon in toolbar
            Cancel,

            ///Enables the expand all icon in toolbar
            ExpandAll,

            ///Enables the collapse all icon in toolbar
            CollapseAll,

            ///Enables the PDF export icon in toolbar
            PdfExport,

            ///Enables the excel export icon in toolbar
            ExcelExport,

            ///Enables the printing icon in toolbar
            Print,

            ///Enables the search textbox in toolbar
            Search
        }

    }

    class GroupButton extends ej.Widget {
        static fn: GroupButton;
        constructor(element: JQuery | Element, options?: GroupButton.Model);
        static Locale: any;
        model: GroupButton.Model;
        defaults: GroupButton.Model;

        /** Remove the selection state of the specified the button element from the GroupButton
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        deselectItem(element: JQuery): void;

        /** Destroy the GroupButton widget all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the GroupButton control
         * @returns {void}
         */
        disable(): void;

        /** Disable the specified button element from the ejGroupButton control.
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        disableItem(element: JQuery): void;

        /** Enables the disabled ejGroupButton control.
         * @returns {void}
         */
        enable(): void;

        /** Enable the specified disabled button element from the ejGroupButton control.
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        enableItem(element: JQuery): void;

        /** Returns the index value for specified button element in the GroupButton control.
         * @param {JQuery} Specific button element
         * @returns {number}
         */
        getIndex(element: JQuery): number;

        /** This method returns the list of active state button elements from the GroupButton control.
         * @returns {any}
         */
        getSelectedItem(): any;

        /** Hides the GroupButton control
         * @returns {void}
         */
        hide(): void;

        /** Hide the specified button element from the ejGroupButton control.
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        hideItem(element: JQuery): void;

        /** Returns the disabled state of the specified element button element in GroupButton as Boolean.
         * @returns {boolean}
         */
        isDisabled(): boolean;

        /** Returns the state of the specified button element as Boolean.
         * @returns {boolean}
         */
        isSelected(): boolean;

        /** Public method used to select the specified button element from the ejGroupButton control.
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        selectItem(element: JQuery): void;

        /** Shows the GroupButton control, if its hide.
         * @returns {void}
         */
        show(): void;

        /** Show the specified hidden button element from the ejGroupButton control.
         * @param {JQuery} Specific button element
         * @returns {void}
         */
        showItem(element: JQuery): void;
    }
    export namespace GroupButton {

        export interface Model {

            /** Sets the specified class to GroupButton wrapper element, which allows for custom skinning option in ejGroupButton control.
             */
            cssClass?: string;

            /** To set the local JSON data, define a JSON array and initialize the GroupButton with dataSource property. Specify the column names in the fields property.
             * @Default {null}
             */
            dataSource?: any;

            /** Displays the ejGroupButton in Right to Left direction.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Used to enable or disable the ejGroupButton control.
             * @Default {true}
             */
            enabled?: boolean;

            /** Gets or sets a value that indicates to display the values of the data.
             * @Default {null}
             */
            fields?: any;

            /** Sets the GroupButton behavior to works as Checkbox mode/ radio button mode based on the specified option.
             * @Default {ej.GroupButtonMode.RadioButton}
             */
            groupButtonMode?: ej.GroupButtonMode|string;

            /** Used to sets the height of the ejGroupButton control.
             * @Default {28}
             */
            height?: string|number;

            /** Defines the characteristics of the ejGroupButton control and extend the capability of an HTML element by adding specified attributes to element tag and by performing the related
             * actions
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Specify the orientation of the GroupButton. See below to get available orientations
             * @Default {ej.Orientation.Horizontal}
             */
            orientation?: ej.Orientation|string;

            /** Query the dataSource from the table for Groupbutton
             * @Default {null}
             */
            query?: any;

            /** Sets the list of button elements to be selected. To enable this option groupButtonMode should be in â€œcheckboxâ€ mode.
             * @Default {[]}
             */
            selectedItemIndex?: number[]|string[];

            /** Sets the rounder corner to the GroupButton, if sets as true.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Specifies the size of the button. See available size
             * @Default {ej.ButtonSize.Normal}
             */
            size?: ej.ButtonSize|string;

            /** Defines the width of the ejGroupButton control.
             */
            width?: string|number;

            /** Triggered before any button element in the GroupButton get selected.
             */
            beforeSelect?(e: BeforeSelectEventArgs): void;

            /** Fires after GroupButton control is created.If the user want to perform any operation after the button control creation then the user can make use of this create event.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when the GroupButton is destroyed successfully.If the user want to perform any operation after the destroy button control then the user can make use of this destroy event.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Triggered once the key is pressed, when the control is in focused state.
             */
            keyPress?(e: KeyPressEventArgs): void;

            /** Triggered when the button element get selected.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface BeforeSelectEventArgs {

            /** Boolean value based on whether the button element is disabled or not.
             */
            disabled?: boolean;

            /** Returns the selection button element.
             */
            element?: any;

            /** Event object
             */
            event?: any;

            /** Return the button element ID.
             */
            id?: string;

            /** Button item index.
             */
            index?: number;

            /** returns the button model
             */
            model?: ej.GroupButton.Model;

            /** Boolean value based on whether the button element is selected or not.
             */
            selected?: boolean;

            /** returns the name of the event
             */
            type?: string;

            /** return the button state
             */
            status?: boolean;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the GroupButton model
             */
            model?: ej.GroupButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the GroupButton model
             */
            model?: ej.GroupButton.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface KeyPressEventArgs {

            /** Boolean value based on whether the button element is disabled or not.
             */
            disabled?: boolean;

            /** Returns the selection button element.
             */
            element?: any;

            /** Event object
             */
            event?: any;

            /** Return the button element ID.
             */
            id?: string;

            /** Button item index.
             */
            index?: number;

            /** returns the button model
             */
            model?: ej.GroupButton.Model;

            /** Boolean value based on whether the button element is selected or not.
             */
            selected?: boolean;

            /** returns the name of the event
             */
            type?: string;

            /** return the button state
             */
            status?: boolean;
        }

        export interface SelectEventArgs {

            /** Boolean value based on whether the selected button element is disabled or not.
             */
            disabled?: boolean;

            /** Returns the selection button element.
             */
            element?: any;

            /** Event object
             */
            event?: any;

            /** Return the selected button element ID.
             */
            id?: string;

            /** Selected button item index.
             */
            index?: number;

            /** returns the button model
             */
            model?: ej.GroupButton.Model;

            /** Boolean value based on whether the button element is selected or not.
             */
            selected?: boolean;

            /** returns the name of the event
             */
            type?: string;

            /** return the button state
             */
            status?: boolean;
        }
    }
    enum GroupButtonMode {
        //Sets the GroupButton to work as checkbox mode
        CheckBox,
        //Sets the RadioButton to work as radio button mode
        RadioButton,
    }

    class NavigationDrawer extends ej.Widget {
        static fn: NavigationDrawer;
        constructor(element: JQuery | Element, options?: NavigationDrawer.Model);
        static Locale: any;
        model: NavigationDrawer.Model;
        defaults: NavigationDrawer.Model;

        /** To close the navigation drawer control
         * @returns {void}
         */
        close(): void;

        /** To load AJAX content into NavigationDrawer container.
         * @returns {void}
         */
        loadContent(): void;

        /** To open the navigation drawer control
         * @returns {void}
         */
        open(): void;

        /** To Toggle the navigation drawer control
         * @returns {void}
         */
        toggle(): void;
    }
    export namespace NavigationDrawer {

        export interface Model {

            /** Specifies the ajaxSettings option to load the content to the NavigationDrawer control.
             * @Default {null}
             */
            ajaxSettings?: AjaxSettings;

            /** Specifies the contentId for navigation drawer, where the AJAX content need to updated
             * @Default {null}
             */
            contentId?: string;

            /** Sets the root class for NavigationDrawer theme. This cssClass API helps to use custom skinning option for NavigationDrawer control. By defining the root class using this API, we
             * need to include this root class in CSS.
             */
            cssClass?: string;

            /** Sets the Direction for the control. See Direction
             * @Default {left}
             */
            direction?: ej.Direction|string;

            /** Sets the listview to be enabled or not
             * @Default {false}
             */
            enableListView?: boolean;

            /** Specifies the listview items as an array of object.
             * @Default {[]}
             */
            items?: any[];

            /** Sets all the properties of listview to render in navigation drawer
             */
            listViewSettings?: any;

            /** Specifies position whether it is in fixed or relative to the page. See Position
             * @Default {normal}
             */
            position?: string;

            /** Specifies the targetId for navigation drawer
             */
            targetId?: string;

            /** Sets the rendering type of the control. See Type
             * @Default {overlay}
             */
            type?: string;

            /** Specifies the width of the control
             * @Default {auto}
             */
            width?: number;

            /** Navigation pane opened initially when isPaneOpen property is true.
             * @Default {false}
             */
            isPaneOpen?: boolean;

            /** Event triggers after the AJAX content loaded completely.
             */
            ajaxComplete?(e: AjaxCompleteEventArgs): void;

            /** Event triggers when the AJAX request failed.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** Event triggers after the AJAX content loaded successfully.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** Event triggers before the control gets closed.
             */
            beforeClose?(e: BeforeCloseEventArgs): void;

            /** Event triggers when the control open.
             */
            open?(e: OpenEventArgs): void;

            /** Event triggers when the Swipe happens.
             */
            swipe?(e: SwipeEventArgs): void;
        }

        export interface AjaxCompleteEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the navigation drawer model object.
             */
            model?: ej.NavigationDrawer.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Response content.
             */
            data?: string;
        }

        export interface AjaxErrorEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the navigation drawer model object.
             */
            model?: ej.NavigationDrawer.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Error page content.
             */
            responseText?: string;

            /** Error code.
             */
            status?: number;

            /** The corresponding error description.
             */
            statusText?: string;
        }

        export interface AjaxSuccessEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the navigation drawer model object.
             */
            model?: ej.NavigationDrawer.Model;

            /** Name of the event.
             */
            type?: string;

            /** URL of the content.
             */
            URL?: string;

            /** Response content.
             */
            data?: string;
        }

        export interface BeforeCloseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Navigation Drawer model
             */
            model?: ej.NavigationDrawer.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface OpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Navigation Drawer model
             */
            model?: ej.NavigationDrawer.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface SwipeEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Navigation Drawer model
             */
            model?: ej.NavigationDrawer.Model;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface AjaxSettings {

            /** It specifies, whether to enable or disable asynchronous request.
             */
            async?: boolean;

            /** It specifies the page will be cached in the web browser.
             */
            cache?: boolean;

            /** It specifies the type of data is send in the query string.
             */
            contentType?: string;

            /** It specifies the data as an object, will be passed in the query string.
             */
            data?: any;

            /** It specifies the type of data that you're expecting back from the response.
             */
            dataType?: string;

            /** It specifies the HTTP request type.
             */
            type?: string;
        }
    }

    class RadialMenu extends ej.Widget {
        static fn: RadialMenu;
        constructor(element: JQuery | Element, options?: RadialMenu.Model);
        static Locale: any;
        model: RadialMenu.Model;
        defaults: RadialMenu.Model;

        /** To hide the radialmenu
         * @returns {void}
         */
        hide(): void;

        /** To hide the radialmenu items
         * @returns {void}
         */
        hideMenu(): void;

        /** To Show the radial menu
         * @returns {void}
         */
        show(): void;

        /** To show menu items
         * @returns {void}
         */
        showMenu(): void;

        /** To enable menu item using index
         * @param {number} Index of the Radialmenu to be enabled.
         * @returns {void}
         */
        enableItemByIndex(itemIndex: number): void;

        /** To enable menu items using indices
         * @param {any[]} Index of the Radialmenu to be enabled.
         * @returns {void}
         */
        enableItemsByIndices(itemIndices: any[]): void;

        /** To disable menu item using index
         * @param {number} Index of the Radialmenu to be disabled.
         * @returns {void}
         */
        disableItemByIndex(itemIndex: number): void;

        /** To disable menu items using indices
         * @param {any[]} items of the Radialmenu to disable.
         * @returns {void}
         */
        disableItemsByIndices(itemIndices: any[]): void;

        /** To enable menu item using item text
         * @param {string} item of the Radialmenu item to enable.
         * @returns {void}
         */
        enableItem(item: string): void;

        /** To disable menu item using item text
         * @param {string} item of the Radialmenu item to disable.
         * @returns {void}
         */
        disableItem(item: string): void;

        /** To enable menu items using item texts
         * @param {any[]} items of the Radialmenu item to enable.
         * @returns {void}
         */
        enableItems(items: any[]): void;

        /** To disable menu items using item texts
         * @param {any[]} items of the Radialmenu item to disable.
         * @returns {void}
         */
        disableItems(items: any[]): void;

        /** To update menu item badge value
         * @param {number} The index value to add the given items at the specified index. If index is not specified, the given value will not be updated.
         * @param {number} The Value to be updated in the badge. It will be updated based on the given index
         * @returns {void}
         */
        updateBadgeValue(index: number, value: number): void;

        /** To show menu item badge
         * @param {number} Index of the Radialmenu item to be shown badge.
         * @returns {void}
         */
        showBadge(index: number): void;

        /** To hide menu item badge
         * @param {number} Index of the Radialmenu item to hide the badge.
         * @returns {void}
         */
        hideBadge(index: number): void;
    }
    export namespace RadialMenu {

        export interface Model {

            /** To show the Radial in initial render.
             */
            autoOpen?: boolean;

            /** Renders the back button Image for Radial using class.
             */
            backImageClass?: string;

            /** Sets the root class for RadialMenu theme. This cssClass API helps to use custom skinning option for RadialMenu control. By defining the root class using this API, we need to
             * include this root class in CSS.
             */
            cssClass?: string;

            /** To enable Animation for Radial Menu.
             */
            enableAnimation?: boolean;

            /** Renders the Image for Radial using Class.
             */
            imageClass?: string;

            /** Specify the items of radial menu
             */
            items?: Item[];

            /** Specifies the radius of radial menu
             */
            radius?: number;

            /** To show the Radial while clicking given target element.
             */
            targetElementId?: string;

            /** To set radial render position.
             */
            position?: any;

            /** Event triggers when we click an item.
             */
            click?(e: ClickEventArgs): void;

            /** Event triggers when the menu is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Event triggers when the menu is closed.
             */
            close?(e: CloseEventArgs): void;
        }

        export interface ClickEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialmenu model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the item of element
             */
            item?: any;

            /** returns the name of item
             */
            itemName?: string;
        }

        export interface OpenEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialmenu model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface CloseEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialmenu model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ItemsBadge {

            /** Specifies whether to enable radialmenu item badge or not.
             */
            enabled?: boolean;

            /** Specifies the value of radial menu item badge.
             */
            value?: number;
        }

        export interface ItemsSliderSettings {

            /** Specifies the sliderSettings ticks values of nested radial menu items.
             */
            ticks?: any[];

            /** Specifies the sliderSettings stroke Width value.
             */
            strokeWidth?: number;

            /** Specifies the value of sliderSettings labelSpace .
             */
            labelSpace?: number;
        }

        export interface Item {

            /** Specify the URL of the frame background image for radial menu item.
             */
            imageUrl?: string;

            /** Specifies the template property of RadialMenu for SVG icon.
             */
            prependTo?: string;

            /** Specifies the text of RadialMenu item.
             */
            text?: string;

            /** Specifies the enable state of RadialMenu item.
             */
            enabled?: boolean;

            /** specify the click event to corresponding image/text for performing some specific action.
             */
            click?: string;

            /** Specifies radialmenu item badges.
             */
            badge?: ItemsBadge;

            /** Specifies the type of nested radial menu item.
             */
            type?: string;

            /** Specifies the sliderSettings ticks for nested radial menu items.
             */
            sliderSettings?: ItemsSliderSettings;

            /** Specifies to add sub level items .
             */
            items?: any[];
        }
    }

    class Tile extends ej.Widget {
        static fn: Tile;
        constructor(element: JQuery | Element, options?: Tile.Model);
        static Locale: any;
        model: Tile.Model;
        defaults: Tile.Model;

        /** Update the image template of tile item to another one.
         * @param {string} UpdateTemplate by using id
         * @param {number} index of the tile
         * @returns {void}
         */
        updateTemplate(id: string, index: number): void;
    }
    export namespace Tile {

        export interface Model {

            /** Section for badge specific functionalities and it represents the notification for tile items.
             */
            badge?: Badge;

            /** Section for caption specific functionalities and it represents the notification for tile items.
             */
            caption?: Caption;

            /** Sets the root class for Tile theme. This cssClass API helps to use custom skinning option for Tile control. By defining the root class using this API, we need to include this root
             * class in CSS.
             */
            cssClass?: string;

            /** Saves current model value to browser cookies for state maintains. While refreshing the page retains the model value applies from browser cookies.
             * @Default {false}
             */
            enablePersistence?: boolean;

            /** Customize the tile size height.
             * @Default {null}
             */
            height?: string|number;

            /** Specifies Tile imageClass, using this property we can give images for each tile through CSS classes.
             * @Default {null}
             */
            imageClass?: string;

            /** Specifies the position of tile image.
             * @Default {center}
             */
            imagePosition?: ej.Tile.ImagePosition|string;

            /** Specifies the tile image in outside of template content.
             * @Default {null}
             */
            imageTemplateId?: string;

            /** Specifies the URL of tile image.
             * @Default {null}
             */
            imageUrl?: string;

            /** Set the localization culture for Tile Widget.
             */
            locale?: string;

            /** Section for liveTile specific functionalities.
             */
            liveTile?: LiveTile;

            /** Specifies the size of a tile.  See tileSize
             * @Default {small}
             */
            tileSize?: ej.Tile.TileSize|string;

            /** Customize the tile size width.
             * @Default {null}
             */
            width?: string|number;

            /** Sets the rounded corner to  tile.
             * @Default {false}
             */
            showRoundedCorner?: boolean;

            /** Sets allowSelection to  tile.
             * @Default {false}
             */
            allowSelection?: boolean;

            /** Sets the background color to  tile.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Event triggers when the mouseDown happens in the tile
             */
            mouseDown?(e: MouseDownEventArgs): void;

            /** Event triggers when the mouseUp happens in the tile
             */
            mouseUp?(e: MouseUpEventArgs): void;
        }

        export interface MouseDownEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tile model
             */
            model?: boolean;

            /** returns the name of the event
             */
            type?: boolean;

            /** returns the current tile text
             */
            text?: string;

            /** returns the index of current tile item
             */
            index?: number;
        }

        export interface MouseUpEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the tile model
             */
            model?: boolean;

            /** returns the name of the event
             */
            type?: boolean;

            /** returns the current tile text
             */
            text?: boolean;

            /** returns the index of current tile item
             */
            index?: number;
        }

        export interface Badge {

            /** Specifies whether to enable badge or not.
             * @Default {false}
             */
            enabled?: boolean;

            /** Specifies maximum value for tile badge.
             * @Default {100}
             */
            maxValue?: number;

            /** Specifies minimum value for tile badge.
             * @Default {1}
             */
            minValue?: number;

            /** Specifies text instead of number for tile badge.
             * @Default {null}
             */
            text?: string;

            /** Sets value for tile badge.
             * @Default {1}
             */
            value?: number;

            /** Sets position for tile badge.
             * @Default {â€œbottomrightâ€}
             */
            position?: ej.Tile.BadgePosition|string;
        }

        export interface Caption {

            /** Specifies whether the tile text to be shown or hidden.
             * @Default {true}
             */
            enabled?: boolean;

            /** Changes the text of a tile.
             * @Default {Text}
             */
            text?: string;

            /** It is used to align the text of a tile.
             * @Default {normal}
             */
            alignment?: ej.Tile.CaptionAlignment|string;

            /** It is used to specify the caption position like Inner top,  inner bottom and outer.
             * @Default {Innerbottom}
             */
            position?: ej.Tile.CaptionPosition|string;

            /** sets the icon instead of text.
             * @Default {null}
             */
            icon?: string;
        }

        export interface LiveTile {

            /** Specifies whether to enable liveTile or not.
             * @Default {false}
             */
            enabled?: boolean;

            /** Specifies liveTile images in CSS classes.
             * @Default {null}
             */
            imageClass?: any[];

            /** Specifies liveTile images in templates.
             * @Default {null}
             */
            imageTemplateId?: any[];

            /** Specifies liveTile images in CSS classes.
             * @Default {null}
             */
            imageUrl?: any[];

            /** Specifies liveTile type for Tile. See orientation
             * @Default {flip}
             */
            type?: ej.Tile.liveTileType|string;

            /** Specifies time interval between two successive liveTile animation
             * @Default {2000}
             */
            updateInterval?: number;

            /** Sets the text to each living tile
             * @Default {Null}
             */
            text?: any[];
        }

        enum BadgePosition {

            ///To set the topright position of tile badge
            Topright,

            ///To set the bottomright of tile badge
            Bottomright
        }


        enum CaptionAlignment {

            ///To set the normal alignment of text in tile control
            Normal,

            ///To set the left alignment of text in tile control
            Left,

            ///To set the right alignment of text in tile control
            Right,

            ///To set the center alignment of text in tile control
            Center
        }


        enum CaptionPosition {

            ///To set the inner top position of the tile text
            Innertop,

            ///To set the inner bottom position of the tile text
            Innerbottom,

            ///To set the outer position of the tile text
            Outer
        }


        enum ImagePosition {

            ///To set the center position of tile image
            Center,

            ///To set the top center position of tile image
            TopCenter,

            ///To set the bottom center position of tile image
            BottomCenter,

            ///To set the right center position of tile image
            RightCenter,

            ///To set the left center position of tile image
            LeftCenter,

            ///To set the topleft position of tile image
            TopLeft,

            ///To set the topright position of tile image
            TopRight,

            ///To set the bottomright position of tile image
            BottomRight,

            ///To set the bottomleft position of tile image
            BottomLeft,

            ///To set the fill position of tile image
            Fill
        }


        enum liveTileType {

            ///To set flip type of liveTile for tile control
            Flip,

            ///To set slide type of liveTile for tile control
            Slide,

            ///To set carousel type of liveTile for tile control
            Carousel
        }


        enum TileSize {

            ///To set the medium size for tile control
            Medium,

            ///To set the small size for tile control
            Small,

            ///To set the large size for tile control
            Large,

            ///To set the wide size for tile control
            Wide
        }

    }

    class Signature extends ej.Widget {
        static fn: Signature;
        constructor(element: JQuery | Element, options?: Signature.Model);
        static Locale: any;
        model: Signature.Model;
        defaults: Signature.Model;

        /** Clears the strokes in the signature.
         * @returns {void}
         */
        clear(): void;

        /** Destroys the signature widget.
         * @returns {void}
         */
        destroy(): void;

        /** Disables the signature widget.
         * @returns {void}
         */
        disable(): void;

        /** Enables the signature widget.
         * @returns {void}
         */
        enable(): void;

        /** Hides the signature widget.
         * @returns {void}
         */
        hide(): void;

        /** redo the last drawn stroke of the signature
         * @returns {void}
         */
        redo(): void;

        /** Refreshes the Signature widget
         * @returns {void}
         */
        refresh(): void;

        /** used to save the drawn image.
         * @param {string} The file name of the signature to be downloaded.
         * @returns {void}
         */
        save(Filename: string): void;

        /** Used to Show the signature widget, if it is already hidden.
         * @returns {void}
         */
        show(): void;

        /** undo the last drawn stroke of the signature.
         * @returns {void}
         */
        undo(): void;
    }
    export namespace Signature {

        export interface Model {

            /** This property is used to set the background color for the signature.
             * @Default {#ffffff}
             */
            backgroundColor?: string;

            /** This property is used to set the background image for the signature.
             */
            backgroundImage?: string;

            /** Enables or disables the Signature textbox widget.
             * @Default {true}
             */
            enabled?: boolean;

            /** Sets the height of the Signature control.
             * @Default {100%}
             */
            height?: string;

            /** Enables/disables responsive support for the signature control (i.e) maintain the signature drawing during the window resizing time.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Allows the type of the image format to be saved when the signature image is saved.
             */
            saveImageFormat?: ej.Signature.SaveImageFormat|string;

            /** Allows the signature image to be saved along with its background.
             * @Default {false}
             */
            saveWithBackground?: boolean;

            /** Enables or disables rounded corner.
             * @Default {true}
             */
            showRoundedCorner?: boolean;

            /** Sets the stroke color for the stroke of the signature.
             * @Default {#000000}
             */
            strokeColor?: string;

            /** Sets the stroke width for the stroke of the signature.
             * @Default {2}
             */
            strokeWidth?: number;

            /** Sets the width of the Signature control.
             * @Default {100%}
             */
            width?: string;

            /** Triggers when the stroke is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Triggered when the pointer is clicked or touched in the signature canvas.
             */
            mouseDown?(e: MouseDownEventArgs): void;

            /** Triggered when the pointer is moved in the signature canvas.
             */
            mouseMove?(e: MouseMoveEventArgs): void;

            /** Triggered when the pointer is released after click or touch in the signature canvas.
             */
            mouseUp?(e: MouseUpEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the signature model object.
             */
            model?: ej.Signature.Model;

            /** Name of the event.
             */
            type?: string;

            /** Gives the last stored image
             */
            lastImage?: string;
        }

        export interface MouseDownEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the signature model object.
             */
            model?: ej.Signature.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns all the event values
             */
            value?: any;
        }

        export interface MouseMoveEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the signature model object.
             */
            model?: ej.Signature.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns all the event values
             */
            value?: any;
        }

        export interface MouseUpEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the signature model object.
             */
            model?: ej.Signature.Model;

            /** Name of the event.
             */
            type?: string;

            /** returns all the event values
             */
            value?: any;
        }

        enum SaveImageFormat {

            ///To save the signature image with PNG format only.
            PNG,

            ///To save the signature image with JPG format only.
            JPG,

            ///To save the signature image with BMP format only.
            BMP,

            ///To save the signature image with TIFF format only.
            TIFF
        }

    }

    class RadialSlider extends ej.Widget {
        static fn: RadialSlider;
        constructor(element: JQuery | Element, options?: RadialSlider.Model);
        static Locale: any;
        model: RadialSlider.Model;
        defaults: RadialSlider.Model;

        /** To show the radialslider
         * @returns {void}
         */
        show(): void;

        /** To hide the radialslider
         * @returns {void}
         */
        hide(): void;
    }
    export namespace RadialSlider {

        export interface Model {

            /** To show the RadialSlider in initial render.
             * @Default {false}
             */
            autoOpen?: boolean;

            /** Sets the root class for RadialSlider theme. This cssClass API helps to use custom skinning option for RadialSlider control. By defining the root class using this API, we need to
             * include this root class in CSS.
             */
            cssClass?: string;

            /** To enable Animation for Radial Slider.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Enable/Disable the Roundoff property of RadialSlider
             * @Default {true}
             */
            enableRoundOff?: boolean;

            /** Specifies the endAngle value for radial slider circle.
             * @Default {360}
             */
            endAngle?: number;

            /** Specifies the inline for label show or not on given radius.
             * @Default {false}
             */
            inline?: boolean;

            /** Specifies innerCircleImageClass, using this property we can give images for center radial circle through CSS classes.
             * @Default {null}
             */
            innerCircleImageClass?: string;

            /** Specifies the file name of center circle icon
             * @Default {null}
             */
            innerCircleImageUrl?: string;

            /** Specifies the Space between the radial slider element and the label.
             * @Default {30}
             */
            labelSpace?: number;

            /** Change the Radial Slider ticks value based on the given culture.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the radius of radial slider
             * @Default {200}
             */
            radius?: number;

            /** To show the RadialSlider inner circle.
             * @Default {true}
             */
            showInnerCircle?: boolean;

            /** Specifies the endAngle value for radial slider circle.
             * @Default {0}
             */
            startAngle?: number;

            /** Specifies the  strokeWidth for customize the needle, outer circle and inner circle.
             * @Default {2}
             */
            strokeWidth?: number;

            /** Specifies the ticks value of radial slider
             */
            ticks?: any[];

            /** Specifies the value of radial slider
             * @Default {10}
             */
            value?: number;

            /** Event triggers when the change occurs.
             */
            change?(e: ChangeEventArgs): void;

            /** Event triggers when the radial slider is created.
             */
            create?(e: CreateEventArgs): void;

            /** Event triggers when the mouse pointer is dragged over the radial slider.
             */
            mouseover?(e: MouseoverEventArgs): void;

            /** Event triggers when the Radial slider slides.
             */
            slide?(e: SlideEventArgs): void;

            /** Event triggers when the radial slider starts.
             */
            start?(e: StartEventArgs): void;

            /** Event triggers when the radial slider stops.
             */
            stop?(e: StopEventArgs): void;
        }

        export interface ChangeEventArgs {

            /** returns the Radialslider model
             */
            model?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the initial value of Radial slider
             */
            oldValue?: number;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current value of the Radial slider
             */
            value?: number;
        }

        export interface CreateEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialslider model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface MouseoverEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialslider model
             */
            model?: any;

            /** returns the value selected
             */
            selectedValue?: number;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current value selected in Radial slider
             */
            value?: number;
        }

        export interface SlideEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialslider model
             */
            model?: any;

            /** returns the value selected in Radial slider
             */
            selectedValue?: number;

            /** returns the name of the event
             */
            type?: string;

            /** returns the currently selected value
             */
            value?: number;
        }

        export interface StartEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialslider model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current value selected in Radial slider
             */
            value?: number;
        }

        export interface StopEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Radialslider model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** returns the current value selected in Radial slider
             */
            value?: number;
        }
    }

    class Spreadsheet extends ej.Widget {
        static fn: Spreadsheet;
        constructor(element: JQuery | Element, options?: Spreadsheet.Model);
        static Locale: any;
        model: Spreadsheet.Model;
        defaults: Spreadsheet.Model;

        /** This method is used to add custom formulas in Spreadsheet.
         * @param {string} Pass the name of the formula.
         * @param {string} Pass the name of the function.
         * @returns {void}
         */
        addCustomFormula(formulaName: string, functionName: string): void;

        /** This method is used to add a new sheet in the last position of the sheet container.
         * @returns {void}
         */
        addNewSheet(): void;

        /** This method is used to blank the workbook in Spreadsheet.
         * @returns {void}
         */
        blankWorkbook(): void;

        /** It is used to clear all the data and format in the specified range of cells in Spreadsheet.
         * @param {string|any[]} Optional. If range is specified, then it will clear all content in the specified range else it will use the current selected range.
         * @returns {void}
         */
        clearAll(range?: string|any[]): void;

        /** This property is used to clear all the formats applied in the specified range in Spreadsheet.
         * @param {string|any[]} Optional. If range is specified, then it will clear all format in the specified range else it will use the current selected range.
         * @returns {void}
         */
        clearAllFormat(range?: string|any[]): void;

        /** Used to clear the applied border in the specified range in Spreadsheet.
         * @param {string|any[]} Optional. If range is specified, then it will clear border in the specified range else it will use the current selected range.
         * @returns {void}
         */
        clearBorder(range?: string|any[]): void;

        /** This property is used to clear the contents in the specified range in Spreadsheet.
         * @param {string|any[]} Optional. If the range is specified, then it will clear the content in the specified range else it will use the current selected range.
         * @returns {void}
         */
        clearContents(range?: string|any[]): void;

        /** This method is used to remove only the data in the range denoted by the specified range name.
         * @param {string} Pass the defined rangeSettings property name.
         * @returns {void}
         */
        clearRange(rangeName: string): void;

        /** It is used to remove data in the specified range of cells based on the defined property.
         * @param {any[]|string} Optional. If range is specified, it will clear data for the specified range else it will use the current selected range.
         * @param {string} Optional. If property is specified, it will remove the specified property in the range else it will remove default properties
         * @param {HTMLElement} Optional.
         * @param {boolean} Optional. pass {{'`true`' | markdownify}}, if you want to skip the hidden rows
         * @param {string} Optional. Pass the status to perform undo and redo operation.
         * @param {boolean} Optional. It specifies whether to skip element processing or not.
         * @returns {void}
         */
        clearRangeData(range?: any[]|string, property?: string, cells?: HTMLElement, skipHiddenRow?: boolean, status?: string, skipCell?: boolean): void;

        /** This method is used to clear undo and redo collections in the Spreadsheet.
         * @returns {void}
         */
        clearUndoRedo(): void;

        /** This method is used to copy or move the sheets in Spreadsheet.
         * @param {number} Pass the sheet index that you want to copy or move.
         * @param {number} Pass the position index where you want to copy or move.
         * @param {boolean} Pass {{'`true`' | markdownify}},If you want to copy sheet or else it will move sheet.
         * @returns {void}
         */
        copySheet(fromIdx: number, toIdx: number, isCopySheet: boolean): void;

        /** This method is used to delete the entire column which is selected.
         * @param {number} Pass the start column index.
         * @param {number} Pass the end column index.
         * @returns {void}
         */
        deleteEntireColumn(startCol: number, endCol: number): void;

        /** This method is used to delete the entire row which is selected.
         * @param {number} Pass the start row index.
         * @param {number} Pass the end row index.
         * @returns {void}
         */
        deleteEntireRow(startRow: number, endRow: number): void;

        /** This method is used to delete a particular sheet in the Spreadsheet.
         * @param {number} Pass the sheet index to perform delete action.
         * @returns {void}
         */
        deleteSheet(idx: number): void;

        /** This method is used to delete the selected cells and shift the remaining cells to left.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @returns {void}
         */
        deleteShiftLeft(startCell: Spreadsheet.CellIndex, endCell: Spreadsheet.CellIndex): void;

        /** This method is used to delete the selected cells and shift the remaining cells up.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @returns {void}
         */
        deleteShiftUp(startCell: Spreadsheet.CellIndex, endCell: Spreadsheet.CellIndex): void;

        /** This method is used to edit data in the specified range of cells based on its corresponding rangeSettings.
         * @param {string} Pass the defined rangeSettings property name.
         * @param {() => void} Pass the function that you want to perform range edit.
         * @returns {void}
         */
        editRange(rangeName: string, fn: () => void): void;

        /** This method is used to get the activation panel in the Spreadsheet.
         * @returns {HTMLElement}
         */
        getActivationPanel(): HTMLElement;

        /** This method is used to get the active cell object in Spreadsheet. It will returns object which contains rowIndex and colIndex of the active cell.
         * @param {number} Optional. If sheetIdx is specified, it will return the active cell object in specified sheet index else it will use the current sheet index
         * @returns {any}
         */
        getActiveCell(sheetIdx?: number): any;

        /** This method is used to get the active cell element based on the given sheet index in the Spreadsheet.
         * @param {number} Optional. If sheetIndex is specified, it will return the active cell element in specified sheet index else it will use the current active sheet index.
         * @returns {HTMLElement}
         */
        getActiveCellElem(sheetIdx?: number): HTMLElement;

        /** This method is used to get the current active sheet index in Spreadsheet.
         * @returns {number}
         */
        getActiveSheetIndex(): number;

        /** This method is used to get the auto fill element in Spreadsheet.
         * @returns {HTMLElement}
         */
        getAutoFillElem(): HTMLElement;

        /** This method is used to get the alpha range of the given index in Spreadsheet.
         * @param {number} Pass the start row index.
         * @param {number} Pass the start column index.
         * @param {number} Pass the end row index.
         * @param {number} Pass the end column index.
         * @returns {String}
         */
        getAlphaRange(sRIndex: number, sCIndex: number, eRIndex: number, eCIndex: number): String;

        /** This method is used to get the cell element based on specified row and column index in the Spreadsheet.
         * @param {number} Pass the row index.
         * @param {number} Pass the column index.
         * @param {number} Optional. Pass the sheet index that you want to get cell.
         * @returns {HTMLElement}
         */
        getCell(rowIdx: number, colIdx: number, sheetIdx?: number): HTMLElement;

        /** This method is used to get the data settings in the Spreadsheet.
         * @param {number} Pass the sheet index.
         * @returns {number}
         */
        getDataSettings(sheetIdx: number): number;

        /** This method is used to get the frozen columns index in the Spreadsheet.
         * @param {number} Pass the sheet index.
         * @returns {number}
         */
        getFrozenColumns(sheetIdx: number): number;

        /** This method is used to get the frozen row index in Spreadsheet.
         * @param {number} Pass the sheet index.
         * @returns {number}
         */
        getFrozenRows(sheetIdx: number): number;

        /** This method is used to get the hyperlink data as object from the specified cell in Spreadsheet.
         * @param {HTMLElement} Pass the DOM element to get hyperlink
         * @returns {any}
         */
        getHyperlink(cell: HTMLElement): any;

        /** This method is used to get the keys from the given object in Spreadsheet.
         * @param {any} Pass the Object
         * @returns {any[]}
         */
        getObjectKeys(obj: any): any[];

        /** This method is used to get all cell elements in the specified range.
         * @param {string} Pass the range that you want to get the cells.
         * @param {number} Pass the index of the sheet.
         * @param {boolean} Optional. Pass {{'`true`' | markdownify}}, if you want to skip the hidden rows.
         * @returns {HTMLElement}
         */
        getRange(range: string, sheetIdx: number, skipHiddenRow?: boolean): HTMLElement;

        /** This method is used to get the data in specified range in Spreadsheet.
         * @param {any} Optional. Pass the range, property, sheetIdx, valueOnly in options
         * @returns {any[]}
         */
        getRangeData(options?: any): any[];

        /** This method is used to get the data as object in the specified range.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {boolean} Optional. Pass {{'`true`' | markdownify}}, if you want to skip the hidden rows.
         * @returns {any}
         */
        getRangeDataAsObject(startcell: Spreadsheet.CellIndex, endcell: Spreadsheet.CellIndex, skipHiddenRow?: boolean): any;

        /** This method is used to get the range indices array based on the specified alpha range in Spreadsheet.
         * @param {string} Pass the alpha range that you want to get range indices.
         * @returns {any[]}
         */
        getRangeIndices(range: string): any[];

        /** This method is used to get the sheet details based on the given sheet index in Spreadsheet.
         * @param {number} Pass the sheet index to get the sheet object.
         * @returns {any}
         */
        getSheet(sheetIdx: number): any;

        /** This method is used to get the sheet content div element of Spreadsheet.
         * @param {number} Pass the sheet index to get the sheet content.
         * @returns {HTMLElement}
         */
        getSheetElement(sheetIdx: number): HTMLElement;

        /** This method is used to get all the sheets in workbook.
         * @returns {any[]}
         */
        getSheets(): any[];

        /** This method is used to send a paging request to the specified sheet Index in the Spreadsheet.
         * @param {number} Pass the sheet index to perform paging at specified sheet index
         * @param {boolean} Pass {{'`true`' | markdownify}} to create a new sheet. If the specified sheet index is already exist, it navigate to that sheet else it create a new sheet.
         * @returns {void}
         */
        gotoPage(sheetIdx: number, newSheet: boolean): void;

        /** This method is used to get the visible cell details in Spreadsheet.
         * @returns {void}
         */
        getVisibleCellDetails(): void;

        /** This method is used to hide the pivot table activationPanel in the Spreadsheet.
         * @returns {void}
         */
        hideActivationPanel(): void;

        /** This method is used to hide the entire columns from the specified range (startCol, endCol) in Spreadsheet.
         * @param {number} Index of the start column.
         * @param {number} Optional. Index of the end column.
         * @returns {void}
         */
        hideColumn(startCol: number, endCol: number): void;

        /** This method is used to hide the formula bar in Spreadsheet.
         * @returns {void}
         */
        hideFormulaBar(): void;

        /** This method is used to hide the rows, based on the specified row index in Spreadsheet.
         * @param {number} Index of the start row.
         * @param {number}  Optional. Index of the end row.
         * @returns {void}
         */
        hideRow(startRow: number, endRow: number): void;

        /** This method is used to hide the sheet based on the specified sheetIndex or sheet name in the Spreadsheet.
         * @param {string|number} Pass the sheet name or index that you want to hide.
         * @returns {void}
         */
        hideSheet(sheetIdx: string|number): void;

        /** This method is used to hide the displayed waiting pop-up in Spreadsheet.
         * @returns {void}
         */
        hideWaitingPopUp(): void;

        /** This method is used to insert a column before the active cell's column in the Spreadsheet.
         * @param {number} Pass start column.
         * @param {number} Pass end column.
         * @returns {void}
         */
        insertEntireColumn(startCol: number, endCol: number): void;

        /** This method is used to insert a row before the active cell's row in the Spreadsheet.
         * @param {number} Pass start row.
         * @param {number} Pass end row.
         * @returns {void}
         */
        insertEntireRow(startRow: number, endRow: number): void;

        /** This method is used to insert a new sheet to the left of the current active sheet.
         * @returns {void}
         */
        insertSheet(): void;

        /** This method is used to insert cells in the selected or specified range and shift remaining cells to bottom.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @returns {void}
         */
        insertShiftBottom(startCell: Spreadsheet.CellIndex, endCell: Spreadsheet.CellIndex): void;

        /** This method is used to insert cells in the selected or specified range and shift remaining cells to right.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @returns {void}
         */
        insertShiftRight(startCell: Spreadsheet.CellIndex, endCell: Spreadsheet.CellIndex): void;

        /** This method is used to import excel file manually by using form data.
         * @param {Spreadsheet.ImportingOptions} Pass the form data object to import files manually.
         * @returns {void}
         */
        import(importRequest: Spreadsheet.ImportingOptions): void;

        /** This method is used to load JSON data in Spreadsheet.
         * @param {HTMLElement} Pass the response that you want to load.
         * @returns {void}
         */
        loadFromJSON(response: HTMLElement): void;

        /** This method is used to lock/unlock the range of cells in active sheet. Lock cells are activated only after the sheet is protected. Once the sheet is protected it is unable to
         * lock/unlock cells.
         * @param {string|any[]} Pass the alpha range cells or array range of cells.
         * @param {string} Optional. By default is {{'`true`' | markdownify}}. If it is {{'`false`' | markdownify}} locked cells are unlocked.
         * @returns {void}
         */
        lockCells(range: string|any[], isLocked?: string): void;

        /** This method is used to merge cells by across in the Spreadsheet.
         * @param {string} Optional. To pass the cell range or selected cells are process.
         * @param {boolean} Optional. If pass {{'`true`' | markdownify}} it does not show alert.
         * @returns {void}
         */
        mergeAcrossCells(range?: string, alertStatus?: boolean): void;

        /** This method is used to merge the selected cells in the Spreadsheet.
         * @param {string|any[]} Optional. To pass the cell range or selected cells are process.
         * @param {boolean} Optional. If pass {{'`true`' | markdownify}} it does not show alert.
         * @returns {void}
         */
        mergeCells(range?: string|any[], alertStatus?: boolean): void;

        /** This method is used to select a cell or range in the Spreadsheet.
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @param {Spreadsheet.CellIndex} Pass the Object "CellIndex"
         * @returns {void}
         */
        performSelection(startCell: Spreadsheet.CellIndex, endCell: Spreadsheet.CellIndex): void;

        /** This method is used to protect or unprotect active sheet.
         * @param {boolean} Optional. By default is {{'`true`' | markdownify}}. If it is {{'`false`' | markdownify}} active sheet is unprotected.
         * @returns {void}
         */
        protectSheet(isProtected?: boolean): void;

        /** This method is used to perform the redo action in Spreadsheet.
         * @returns {void}
         */
        redo(): void;

        /** This method is used to refresh the Spreadsheet based on the sheet model values.
         * @param {number} Pass the index of the sheet.
         * @returns {void}
         */
        refreshContent(sheetIdx: number): void;

        /** This method is used to refresh the Spreadsheet element based on the page layout.
         * @returns {void}
         */
        refreshSpreadsheet(): void;

        /** This method destroys and re-creates the entire Spreadsheet control.
         * @returns {void}
         */
        refresh(): void;

        /** This method is used to remove custom formulae in Spreadsheet.
         * @param {string} Pass the name of the formula.
         * @param {string} Pass the name of the function.
         * @returns {void}
         */
        removeCustomFormula(formulaName: string, functionName: string): void;

        /** This method is used to remove the hyperlink from selected cells of current sheet.
         * @param {string} Hyperlink remove from the specified range.
         * @param {boolean} Optional. If it is {{'`true`' | markdownify}}, It will clear link only not format.
         * @param {boolean} Optional. Pass the status to perform undo and redo operations.
         * @param {string|any[]} Optional. Pass the cells that you want to remove hyperlink.
         * @param {boolean} Optional. Pass {{'`true`' | markdownify}}, if you want to skip the hidden rows.
         * @returns {void}
         */
        removeHyperlink(range: string, isClearHLink?: boolean, status?: boolean, cells?: string|any[], skipHiddenRow?: boolean): void;

        /** This method is used to remove the range data and its defined rangeSettings property based on the specified range name.
         * @param {string} Pass the defined rangeSetting property name.
         * @returns {void}
         */
        removeRange(rangeName: string): void;

        /** This method is used to remove the readonly option for the specified range.
         * @param {string|any[]} Pass the range.
         * @returns {void}
         */
        removeReadOnly(range?: string|any[]): void;

        /** This method is used to save JSON data in Spreadsheet.
         * @returns {any}
         */
        saveAsJSON(): any;

        /** This method is used to save batch changes in Spreadsheet.
         * @param {number} Pass the sheet index for Spreadsheet.
         * @returns {void}
         */
        saveBatchChanges(sheetIdx: number): void;

        /** This method is used to set the active cell in the Spreadsheet.
         * @param {number} Pass the row index.
         * @param {number} Pass the column index.
         * @param {number} Pass the index of the sheet.
         * @returns {void}
         */
        setActiveCell(rowIdx: number, colIdx: number, sheetIdx: number): void;

        /** This method is used to set active sheet index for the Spreadsheet.
         * @param {number} Pass the active sheet index for Spreadsheet.
         * @returns {void}
         */
        setActiveSheetIndex(sheetIdx: number): void;

        /** This method is used to set border for the specified range of cells in the Spreadsheet.
         * @param {Spreadsheet.BorderOptions} Pass the Object "BorderOptions".
         * @param {string} Optional. If range is specified, it will set border for the specified range else it will use the selected range.
         * @returns {void}
         */
        setBorder(property: Spreadsheet.BorderOptions, range?: string): void;

        /** This method is used to set the height for the rows in the Spreadsheet.
         * @param {any[]|any} Pass the row index and height of the rows.
         * @returns {void}
         */
        setHeightToRows(heightColl: any[]|any): void;

        /** This method is used to set the hyperlink in selected cells of the current sheet.
         * @param {string|any[]} If range is specified, it will set the hyperlink in range of the cells.
         * @param {Spreadsheet.LinkOptions} Pass the Object "LinkOptions"
         * @param {number} If we pass cellAddress then which sheet to be navigate in the applied link.
         * @returns {void}
         */
        setHyperlink(range: string|any[], link: Spreadsheet.LinkOptions, sheetIdx: number): void;

        /** This method is used to set the readonly option for the specified range.
         * @param {string|any[]} Pass the range.
         * @returns {void}
         */
        setReadOnly(range?: string|any[]): void;

        /** This method is used to set the focus to the Spreadsheet.
         * @returns {void}
         */
        setSheetFocus(): void;

        /** This method is used to set the width for the columns in the Spreadsheet.
         * @param {any[]|any} Pass the column index and width of the columns.
         * @param {number} Optional. If sheetIdx is specified, it will set the width for columns to the specified sheet else it will use active sheet.
         * @returns {void}
         */
        setWidthToColumns(widthColl: any[]|any, sheetIndex?: number): void;

        /** This method is used to rename the active sheet.
         * @param {string} Pass the sheet name that you want to change the current active sheet name.
         * @returns {void}
         */
        sheetRename(sheetName: string): void;

        /** This method is used to display the activationPanel for the specified range name.
         * @param {string} Pass the range name that you want to display the activation panel.
         * @returns {void}
         */
        showActivationPanel(rangeName: string): void;

        /** This method is used to show the hidden columns within the specified range in the Spreadsheet.
         * @param {number} Index of the start column.
         * @param {number} Optional. Index of the end column.
         * @returns {void}
         */
        showColumn(startColIdx: number, endColIdx: number): void;

        /** This method is used to show the formula bar in Spreadsheet.
         * @returns {void}
         */
        showFormulaBar(): void;

        /** This method is used to show/hide gridlines in active sheet in the Spreadsheet.
         * @param {boolean} Pass {{'`true`' | markdownify}} to show the gridlines
         * @returns {void}
         */
        showGridlines(status: boolean): void;

        /** This method is used to show/hide the headers in active sheet in the Spreadsheet.
         * @param {boolean} Pass {{'`true`' | markdownify}} to show the sheet headers.
         * @returns {void}
         */
        showHeadings(startRow: boolean): void;

        /** This method is used to show/hide pager in the Spreadsheet.
         * @param {boolean} Pass {{'`true`' | markdownify}} to show pager.
         * @returns {void}
         */
        showPager(status: boolean): void;

        /** This method is used to show the hidden rows in the specified range in the Spreadsheet.
         * @param {number} Index of the start row.
         * @param {number} Optional. Index of the end row.
         * @returns {void}
         */
        showRow(startRow: number, endRow: number): void;

        /** This method is used to show waiting pop-up in Spreadsheet.
         * @returns {void}
         */
        showWaitingPopUp(): void;

        /** This method is used to perform the undo action in Spreadsheet.
         * @returns {void}
         */
        undo(): void;

        /** This method is used to unhide the sheet based on specified sheet name or sheet index.
         * @param {string|number} Pass the sheet name or index that you want to unhide.
         * @returns {void}
         */
        unhideSheet(sheetInfo: string|number): void;

        /** This method is used to unmerge the selected range of cells in the Spreadsheet.
         * @param {string} Optional. If the range is specified, then it will un merge the specified range else it will use the current selected range.
         * @returns {void}
         */
        unmergeCells(range?: string): void;

        /** This method is used to unwrap the selected range of cells in the Spreadsheet.
         * @param {any[]|string} Optional. If the range is specified, then it will update unwrap in the specified range else it will use the current selected range.
         * @returns {void}
         */
        unWrapText(range?: any[]|string): void;

        /** This method is used to update the data for the specified range of cells in the Spreadsheet.
         * @param {Spreadsheet.DataOptions} Pass the Object "DataOptions"
         * @param {any[]|string} Optional. If range is specified, it will update data for the specified range  else it will use the current selected range.
         * @returns {void}
         */
        updateData(data: Spreadsheet.DataOptions, range?: any[]|string): void;

        /** This method is used to update the formula bar in the Spreadsheet.
         * @returns {void}
         */
        updateFormulaBar(): void;

        /** This method is used to update the range of cells based on the specified settings which we want to update in the Spreadsheet.
         * @param {number} Pass the sheet index that you want to update.
         * @param {Spreadsheet.RangeOptions} Pass the Object "RangeOptions"
         * @returns {void}
         */
        updateRange(sheetIdx: number, settings: Spreadsheet.RangeOptions): void;

        /** This method is used to update the details for custom undo and redo operations.
         * @param {Spreadsheet.UndoRedoOptions} Pass the Object "UndoRedoOptions"
         * @returns {void}
         */
        updateUndoRedoCollection(details: Spreadsheet.UndoRedoOptions): void;

        /** This method is used to update the unique data for the specified range of cells in Spreadsheet.
         * @param {Spreadsheet.DataOptions} Pass the Object "DataOptions"
         * @param {any[]|string} Optional. If range is specified, it will update data for the specified range else it will use the current selected range.
         * @param {boolean} Optional. It specifies whether to skip element processing or not.
         * @returns {void}
         */
        updateUniqueData(data: Spreadsheet.DataOptions, range?: any[]|string, skipCell?: boolean): void;

        /** This method is used to wrap the selected range of cells in the Spreadsheet.
         * @param {any[]|string} Optional. If the range is specified, then it will update wrap in the specified  range else it will use the current selected range.
         * @returns {void}
         */
        wrapText(range?: any[]|string): void;

        XLCellType: Spreadsheet.XLCellType;

        XLCFormat: Spreadsheet.XLCFormat;

        XLChart: Spreadsheet.XLChart;

        XLClipboard: Spreadsheet.XLClipboard;

        XLComment: Spreadsheet.XLComment;

        XLCMenu: Spreadsheet.XLCMenu;

        XLDragDrop: Spreadsheet.XLDragDrop;

        XLDragFill: Spreadsheet.XLDragFill;

        XLEdit: Spreadsheet.XLEdit;

        XLExport: Spreadsheet.XLExport;

        XLFilter: Spreadsheet.XLFilter;

        XLFormat: Spreadsheet.XLFormat;

        XLFreeze: Spreadsheet.XLFreeze;

        XLPivot: Spreadsheet.XLPivot;

        XLPrint: Spreadsheet.XLPrint;

        XLResize: Spreadsheet.XLResize;

        XLRibbon: Spreadsheet.XLRibbon;

        XLScroll: Spreadsheet.XLScroll;

        XLSearch: Spreadsheet.XLSearch;

        XLSelection: Spreadsheet.XLSelection;

        XLShape: Spreadsheet.XLShape;

        XLSort: Spreadsheet.XLSort;

        XLSparkline: Spreadsheet.XLSparkline;

        XLValidate: Spreadsheet.XLValidate;
    }
    export namespace Spreadsheet {

        export interface CellIndex {

            /** Pass the row index of the starting cell
             */
            rowIndex?: number;

            /** Pass the column index of the starting cell
             */
            colIndex?: number;
        }

        export interface ImportingOptions {

            /** Pass the file to import manually
             */
            file?: string;

            /** Pass the password to import manually
             */
            password?: string;

            /** Pass the url to import manually
             */
            Url?: string;

            /** Pass the file stream to import manually
             */
            fileStream?: string;

            /** Pass the filetype to import manually
             */
            fileType?: string;
        }

        export interface BorderOptions {

            /** Pass the style to set border of the cell
             */
            style?: string;

            /** Pass the type to set border of the cell
             */
            type?: string;

            /** Pass the color to set border of the cell
             */
            color?: string;
        }

        export interface LinkOptions {

            /** Pass the cell address in the cell
             */
            cellAddress?: string;

            /** Pass the text address in the cell
             */
            text?: string;

            /** Pass the web address in the cell
             */
            webAddress?: string;
        }

        export interface DataOptions {

            /** Pass the value to update
             */
            value?: number;

            /** Pass the value2 to update
             */
            value2?: number;

            /** Pass the type to update
             */
            type?: string;
        }

        export interface RangeOptions {

            /** Pass the datasource object values as settings
             */
            dataSource?: any;

            /** Pass the showheader condition as settings
             */
            showHeader?: boolean;

            /** Pass the startcell values as settings
             */
            startCell?: string;
        }

        export interface UndoRedoOptions {

            /** Pass the action to update undo and redo collection
             */
            action?: string;

            /** Pass the cell to update undo and redo collection
             */
            cell?: HTMLElement;

            /** Pass the sheet index to update undo and redo collection
             */
            sheetIndex?: number;
        }

        export interface CellTypeSettings {

            /** Specifies the button type of Custom Cell type.
             */
            type?: ej.Spreadsheet.CustomCellType;

            /** Specifies the button text of Custom Cell type.
             */
            text?: string;

            /** Specifies the button background color of Custom Cell type.
             */
            backgroundColor?: string;

            /** Specifies the dropdown list data source range of Custom Cell type.
             */
            dataSourceRange?: string;

            /** Specifies the dropdown list data source sheet index of Custom Cell type.
             */
            dataSourceSheetIndex?: number;

            /** Specifies the text and value of field in dropdown list.
             */
            field?: any;

            /** Specifies the checkbox is set true or false of Custom Cell type.
             */
            isChecked?: boolean;

            /** Specifies the datepicker of Custom Cell type.
             */
            value?: string;
        }

        export interface XLCellType {

            /** This method is used to set a cell type from the specified range of cells in the spreadsheet.
             * @param {string} Pass the range where you want apply cell type.
             * @param {Spreadsheet.CellTypeSettings} Pass the Object "CellTypeSettings"
             * @param {number} Optional. Pass sheet index.
             * @returns {void}
             */
            addCellTypes(range: string, settings: Spreadsheet.CellTypeSettings, sheetIdx: number): void;

            /** This method is used to remove cell type from the specified range of cells in the Spreadsheet.
             * @param {string|any[]} Pass the range where you want remove cell type.
             * @param {number} Optional. Pass sheet index.
             * @returns {void}
             */
            removeCellTypes(range: string|any[], sheetIdx: number): void;
        }

        export interface CFormatOptions {

            /** Pass the condition to set the conditional formatting
             */
            action?: string;

            /** Pass the color to set the conditional formatting
             */
            color?: string;

            /** Pass the inputs to set the conditional formatting
             */
            inputs?: any[]|string;

            /** Pass the bgColor to set the conditional formatting
             */
            bgColor?: string;

            /** Pass the range to set the conditional formatting
             */
            range?: string;
        }

        export interface XLCFormat {

            /** This method is used to clear the applied conditional formatting rules in the Spreadsheet.
             * @param {any[]|string} Optional. If range is specified, it will clear rules for the specified range else it will use the current selected range.
             * @returns {void}
             */
            clearCF(range: any[]|string): void;

            /** This method is used to get the applied conditional formatting rules as array of objects based on the specified row Index and column Index in the Spreadsheet.
             * @param {number} Pass the row index.
             * @param {number} Pass the column index.
             * @returns {any[]}
             */
            getCFRule(rowIdx: number, colIdx: number): any[];

            /** This method is used to set the conditional formatting rule in the Spreadsheet.
             * @param {Spreadsheet.CFormatOptions} Pass the Object "CFormatOptions"
             * @returns {void}
             */
            setCFRule(rule: Spreadsheet.CFormatOptions): void;
        }

        export interface ChartOptions {

            /** Pass the chart type
             */
            type?: string;

            /** Pass the enable3D condition
             */
            enable3D?: boolean;

            /** Pass the marker object to change type
             */
            marker?: any;
        }

        export interface XLChart {

            /** This method is used to change the theme of the chart in the Spreadsheet.
             * @param {string} Pass the chart id.
             * @param {ej.datavisualization.Chart.Theme} Pass the chart theme which want to update.
             * @returns {void}
             */
            changeTheme(chartId: string, theme: ej.datavisualization.Chart.Theme): void;

            /** This method is used to change the type of the chart in the Spreadsheet.
             * @param {string} Pass the chart id.
             * @param {Spreadsheet.ChartOptions} Pass Object ChartOptions.
             * @returns {void}
             */
            changeType(chartId: string, option: Spreadsheet.ChartOptions): void;

            /** This method is used to change the data range of the chart in the Spreadsheet.
             * @param {string} Pass the chart id.
             * @param {string} X axis range of chart data.
             * @param {string} Y axis range of chart data.
             * @param {string} Legend range of chart data.
             * @returns {void}
             */
            changeDataRange(chartId: string, xRange: string, yRange: string, lRange: string): void;

            /** This method is used to create a chart for specified range in Spreadsheet.
             * @param {string|any[]} Optional. If range is specified, it will create chart for the specified range else it will use the current selected range.
             * @param {Spreadsheet.ChartOptions} Optional.
             * @returns {void}
             */
            createChart(range: string|any[], options: Spreadsheet.ChartOptions): void;

            /** This method is used to refresh the chart in the Spreadsheet.
             * @param {string} To pass the chart Id.
             * @param {Spreadsheet.ChartOptions} NameTypeDescriptiontypestringPass the chart typeenable3DbooleanPass the enable3D conditionmarkerobjectPass the marker object
             * @returns {void}
             */
            refreshChart(id: string, options: Spreadsheet.ChartOptions): void;

            /** This method is used to resize the chart of specified id in the Spreadsheet.
             * @param {string} To pass the chart id.
             * @param {number} To pass height value.
             * @param {number} To pass the width value.
             * @returns {void}
             */
            resizeChart(id: string, height: number, width: number): void;

            /** This method is used to update the chart element, such as axes, titles, data labels, grid lines and legends in the Spreadsheet.
             * @param {string} Pass the chart id.
             * @param {ej.Spreadsheet.ChartProperties} Pass chart element value which you want to update.
             * @returns {void}
             */
            updateChartElement(chartId: string, value: ej.Spreadsheet.ChartProperties): void;

            /** This method is used switch row to columns and vice versa for chart in the Spreadsheet. So that the data is displayed in the chart the way you want.
             * @param {string} Pass the chart id.
             * @returns {void}
             */
            switchRowColumn(chartId: string): void;
        }

        export interface XLClipboard {

            /** This method is used to copy the selected cells in the Spreadsheet.
             * @returns {void}
             */
            copy(): void;

            /** This method is used to cut the selected cells in the Spreadsheet.
             * @returns {void}
             */
            cut(): void;

            /** This method is used to paste the cut or copied cells data in the Spreadsheet.
             * @returns {void}
             */
            paste(): void;
        }

        export interface XLComment {

            /** This method is used to delete the comment in the specified range in Spreadsheet.
             * @param {any[]|string} Optional. If range is specified, it will delete comments for the specified range else it will use the current selected range.
             * @param {number} Optional. If sheetIdx is specified, it will delete comment in specified sheet else it will use active sheet.
             * @param {boolean} Optional. Pass {{'`true`' | markdownify}}, if you want to skip the hidden rows data.
             * @returns {void}
             */
            deleteComment(range: any[]|string, sheetIdx: number, skipHiddenRow: boolean): void;

            /** This method is used to edit the comment in the target Cell in Spreadsheet.
             * @param {Spreadsheet.CellIndex} Optional.
             * @returns {void}
             */
            editComment(targetCell: Spreadsheet.CellIndex): void;

            /** This method is used to find the next comment from the active cell in Spreadsheet.
             * @returns {boolean}
             */
            findNextComment(): boolean;

            /** This method is used to find the previous comment from the active cell in Spreadsheet.
             * @returns {boolean}
             */
            findPrevComment(): boolean;

            /** This method is used to get comment data for the specified cell.
             * @param {HTMLElement} Pass the DOM element to get comment data as object.
             * @returns {any}
             */
            getComment(cell: HTMLElement): any;

            /** This method is used to set new comment in Spreadsheet.
             * @param {string|any[]} Optional. If we pass the range comment will set in the range otherwise it will set with selected cells.
             * @param {string} Optional. Pass the comment data.
             * @param {boolean} Optional. Pass {{'`true`' | markdownify}} to show comment in edit mode
             * @param {boolean} Optional. Pass {{'`true`' | markdownify}} to show the user name
             * @returns {void}
             */
            setComment(range: string|any[], data: string, showEditPanel: boolean, showUserName: boolean): void;

            /** This method is used to show all the comments in the Spreadsheet.
             * @returns {void}
             */
            showAllComments(): void;

            /** This method is used to show or hide the specific comment in the Spreadsheet.
             * @param {HTMLElement} Optional. Pass the cell DOM element to show or hide its comment. If pass empty argument active cell will processed.
             * @returns {void}
             */
            showHideComment(targetCell: HTMLElement): void;
        }

        export interface XLCMenu {

            /** This method is used to dynamically add items in the context menu.
             * @param {ej.Spreadsheet.ContextMenuType} Specifies the context menu type in which the item to be inserted.
             * @param {any[]} Pass the items to be inserted
             * @param {string} Specifies the type of operation to be performed
             * @param {number} Specifies the item index
             * @returns {void}
             */
            addItem(target: ej.Spreadsheet.ContextMenuType, itemColl: any[], operation: string, itemIdx: number): void;

            /** This method is used to change data source in the context menu.
             * @param {string} Specifies the context menu type to bind the data source.
             * @param {any[]} Pass the data source to be binded
             * @returns {void}
             */
            changeDataSource(target: string, data: any[]): void;

            /** This method is used to disable the items in the context menu.
             * @param {string} Specifies the context menu type in which the item to be disabled.
             * @param {any[]} Specifies the Menu Item id collection to be disabled
             * @returns {void}
             */
            disableItem(target: string, idxColl: any[]): void;

            /** This method is used to enable the items in the context menu.
             * @param {string} Specifies the context menu type in which the item to be enabled.
             * @param {any[]} Specifies the Menu Item id collection to be enabled
             * @returns {void}
             */
            enableItem(target: string, idxColl: any[]): void;

            /** This method is used to hide the items in the context menu.
             * @param {string} Specifies the context menu type in which the item to be hides.
             * @param {any[]} Specifies the Menu Item id collection to be hides
             * @returns {void}
             */
            hideItem(cMenuType: string, idxColl: any[]): void;

            /** This method is used to remove the items in the context menu.
             * @param {string} Specifies the context menu type in which the item to be removed.
             * @param {any[]} Specifies the Menu Item id collection to be removed
             * @returns {void}
             */
            removeItem(target: string, idxColl: any[]): void;

            /** This method is used to show the items in the context menu.
             * @param {string} Specifies the context menu type in which the item to be shown.
             * @param {any[]} Specifies the Menu Item id collection to be shown
             * @returns {void}
             */
            showItem(cMenuType: string, idxColl: any[]): void;
        }

        export interface XLDragDrop {

            /** This method is used to drag and drop the selected range of cells to destination range in the Spreadsheet.
             * @param {any|any[]} Pass the source range to perform drag and drop.
             * @param {any|any[]} Pass the destination range to drop the dragged cells.
             * @returns {void}
             */
            moveRangeTo(sourceRange: any|any[], destinationRange: any|any[]): void;
        }

        export interface AutoFillObject {

            /** Pass the data range to autofill
             */
            dataRange?: string;

            /** Pass the direction to autofill
             */
            direction?: string;

            /** Pass the fill range to autofill
             */
            fillRange?: string;

            /** Pass the fill type to perform autofill in spreadsheet
             */
            fillType?: string;
        }

        export interface XLDragFill {

            /** This method is used to perform auto fill in Spreadsheet.
             * @param {Spreadsheet.AutoFillObject} Pass Object AutoFillObject.
             * @returns {void}
             */
            autoFill(options: Spreadsheet.AutoFillObject): void;

            /** This method is used to hide the auto fill element in the Spreadsheet.
             * @returns {void}
             */
            hideAutoFillElement(): void;

            /** This method is used to hide the auto fill options in the Spreadsheet.
             * @returns {void}
             */
            hideAutoFillOptions(): void;

            /** This method is used to set position of the auto fill element in the Spreadsheet.
             * @param {boolean} Pass the isDragFill option as {{'`boolean`' | markdownify}} value to show auto fill options in Spreadsheet.
             * @returns {void}
             */
            positionAutoFillElement(isDragFill: boolean): void;
        }

        export interface XLEdit {

            /** This method is used to calculate formulas in the specified sheet.
             * @param {number} Optional. If sheet index is specified, then it will calculate formulas in the specified sheet only else it will calculate formulas in all sheets.
             * @returns {void}
             */
            calcNow(sheetIdx: number): void;

            /** This method is used to edit a particular cell based on the row index and column index in the Spreadsheet.
             * @param {number} Pass the row index to edit particular cell.
             * @param {number} Pass the column index to edit particular cell.
             * @param {boolean} Pass {{'`true`' | markdownify}}, if you want to maintain previous cell value.
             * @returns {void}
             */
            editCell(rowIdx: number, colIdx: number, oldData: boolean): void;

            /** This method is used to get the column index with specified field value in Spreadsheet.
             * @param {string} Pass the column field value
             * @returns {void}
             */
            getColumnIndexByField(field: string): void;

            /** This method is used to get the property value of particular cell, based on the row and column index in the Spreadsheet.
             * @param {number} Pass the row index to get the property value.
             * @param {number} Pass the column index to get the property value.
             * @param {string} Optional. Pass the property name that you want("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture",
             * "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader",  "filterState", "tableName", "comment", "formatStr", "decimalPlaces",
             * "cellType").
             * @param {number} Optional. Pass the index of the sheet.
             * @returns {any|string|any[]}
             */
            getPropertyValue(rowIdx: number, colIdx: number, prop: string, sheetIdx: number): any|string|any[];

            /** This method is used to get the property value in specified cell in Spreadsheet.
             * @param {HTMLElement} Pass the cell element to get property value.
             * @param {string} Pass the property name that you want ("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart",
             * "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader", "filterState", "tableName", "comment", "formatStr", "decimalPlaces",
             * "cellType").
             * @param {number} Pass the index of sheet.
             * @returns {any|string|any[]}
             */
            getPropertyValueByElem(elem: HTMLElement, property: string, sheetIdx: number): any|string|any[];

            /** This method is used to save the edited cell value in the Spreadsheet.
             * @returns {void}
             */
            saveCell(): void;

            /** This method is used to update a particular cell value in the Spreadsheet.
             * @param {Spreadsheet.CellIndex} Pass Object CellIndex.
             * @param {string|number} Pass the cell value.
             * @returns {void}
             */
            updateCell(cell: Spreadsheet.CellIndex, value: string|number): void;

            /** This method is used to update a particular cell value and its format in the Spreadsheet.
             * @param {Spreadsheet.CellIndex} Pass Object CellIndex.
             * @param {string|number} Pass the cell value.
             * @param {string} Pass the class name to update format.
             * @param {number} Pass sheet index.
             * @returns {void}
             */
            updateCellValue(cellIdx: Spreadsheet.CellIndex, val: string|number, formatClass: string, sheetIdx: number): void;

            /** This method is used to update a particular cell value and its format in the Spreadsheet.
             * @param {string} Pass the range.
             * @param {string|number} Pass the cell value.
             * @param {string} Pass the class name to update format.
             * @param {number} Pass sheet index.
             * @returns {void}
             */
            updateValue(aRange: string, val: string|number, formatClass: string, sheetIdx: number): void;
        }

        export interface XLExport {

            /** This method is used to save the sheet data as Excel ,CSV or PDF document (.xls, .xlsx .csv, .pdf) in Spreadsheet.
             * @param {string} Pass the export type that you want.
             * @param {ej.Spreadsheet.ExportType} Pass the export filename that you want.
             * @returns {void}
             */
            export(type: string, fileName: ej.Spreadsheet.ExportType): void;

            /** This method is used to get the export properties in the Spreadsheet.
             * @returns {any}
             */
            getExportProps(): any;
        }

        export interface XLFilter {

            /** This method is used to clear the filter in filtered columns in the Spreadsheet.
             * @returns {void}
             */
            clearFilter(): void;

            /** This method is used to apply filter for the selected range of cells in the Spreadsheet.
             * @param {string|any[]} Pass the range of the selected cells.
             * @returns {void}
             */
            filter(range: string|any[]): void;

            /** This method is used to apply filter for the column by active cell's value in the Spreadsheet.
             * @returns {void}
             */
            filterByActiveCell(): void;
        }

        export interface NumberFormatOptions {

            /** Pass the number format object
             */
            NumFormat?: any;

            /** Pass the style object
             */
            style?: any;
        }

        export interface TableIDOptions {

            /** Pass the sheet index
             */
            sheetIdx?: number;

            /** Pass the table id
             */
            tableId?: number;
        }

        export interface TableOptions {

            /** Pass the header boolean condition of table
             */
            header?: boolean;

            /** Pass the name of the table
             */
            name?: string;

            /** Pass the format name of table
             */
            formatName?: string;
        }

        export interface FormatObjectOptions {

            /** Pass the style object in a cell
             */
            style?: any;

            /** Pass the type of cell
             */
            type?: string;

            /** Pass the thousand separator in cell
             */
            thousandSeparator?: string;

            /** Pass the decimal places in cell
             */
            decimalPlaces?: string;

            /** Pass the format str in cell
             */
            formatStr?: string;
        }

        export interface FontOptions {

            /** Pass the font family
             */
            fontFamily?: any;

            /** Pass the font weight
             */
            fontWeight?: string;

            /** Pass the font style
             */
            fontStyle?: string;

            /** Pass the font size
             */
            fontSize?: string;

            /** Pass the color
             */
            color?: string;

            /** Pass the text decoration
             */
            textDecoration?: string;
        }

        export interface CustomStyleOptions {

            /** Pass the style object
             */
            style?: any;

            /** Pass the number format object
             */
            NumFormat?: any;
        }

        export interface FormatOptions {

            /** Pass the cell style to be removed
             */
            cellStyle?: boolean;

            /** Pass the table style to be removed
             */
            tableStyle?: boolean;

            /** Pass the format
             */
            format?: boolean;

            /** Pass the border condition
             */
            border?: boolean;
        }

        export interface XLFormat {

            /** This method is used to add the custom Date &amp; Time format and recognize it as a preferred pattern in spreadsheet.
             * @param {string} Pass the name for custom format.
             * @param {string} Pass the custom format string.
             * @param {string} Pass the type for custom format.
             * @returns {void}
             */
            addCustomFormatSpecifier(name: string, formatSpecifier: string, type: string): void;

            /** This method is used to add the font to the Ribbon font family dropdown.
             * @param {string} Font name which needs to add into the font family option.
             * @returns {void}
             */
            addFontFamily(fontName: string): void;

            /** This method is used to add the new custom cell style in spreadsheet.
             * @param {string} Pass the style name.
             * @param {Spreadsheet.NumberFormatOptions} Pass Object NumberFormatOptions.
             * @returns {void}
             */
            addNewCustomStyle(styleName: string, options: Spreadsheet.NumberFormatOptions): void;

            /** This method is used to apply the custom cell style in the specified range.
             * @param {string} Pass the style name.
             * @param {string} Pass the range to applied.
             * @returns {void}
             */
            applyCustomCellStyle(styleName: string, range: string): void;

            /** This method is used to convert table range to normal range.
             * @param {Spreadsheet.TableIDOptions} Pass Object TableIDOptions.
             * @returns {void}
             */
            convertToRange(options: Spreadsheet.TableIDOptions): void;

            /** This method is used to create a table for the selected range of cells in the Spreadsheet.
             * @param {Spreadsheet.TableOptions} Pass Object TableOptions.
             * @param {string|any[]} Optional. If the range is specified, then it will create table in the specified range else it will use the current selected range.
             * @returns {string}
             */
            createTable(tableObject: Spreadsheet.TableOptions, range: string|any[]): string;

            /** This method is used to delete the added custom cell style in spreadsheet.
             * @param {string} Pass the cell style name
             * @returns {void}
             */
            deleteCustomStyle(styleName: string): void;

            /** This method is used to set format style and values in a cell or range of cells.
             * @param {Spreadsheet.FormatObjectOptions} Pass Object FormatObjectOptions.
             * @param {string} Pass the range to format cells.
             * @returns {void}
             */
            format(formatObj: Spreadsheet.FormatObjectOptions, range: string): void;

            /** This method is used to get the border from hashcode in the Spreadsheet.
             * @param {string} Pass the border hashcode.
             * @param {boolean} Optional. pass `true` to get the complete border object
             * @returns {any}
             */
            getBorderFromHashCode(code: string, isComplete: boolean): any;

            /** This method is used to get the format class in spreadsheet.
             * @param {string} Pass the style name.
             * @param {boolean} Optional. Pass true to get the border class.
             * @returns {void}
             */
            getFormatClass(classname: string, isborder: boolean): void;

            /** This method is used to get the format from the given hashcode in spreadsheet.
             * @param {string} Pass the hashcode.
             * @returns {void}
             */
            getFormatFromHashCode(hashCode: string): void;

            /** This method is used to get the hashcode from the given style object in spreadsheet.
             * @param {Spreadsheet.FontOptions} Pass Object FontOptions.
             * @returns {void}
             */
            getFormatHashCode(style: Spreadsheet.FontOptions): void;

            /** This method is used to get the format as array from the given specified range in spreadsheet.
             * @param {string} Pass the range.
             * @returns {void}
             */
            getHashCodeClassAsArray(range: string): void;

            /** This method is used to modify the added custom cell style in spreadsheet.
             * @param {string} pass the old style name
             * @param {Spreadsheet.CustomStyleOptions} Pass Object CustomStyleOptions.
             * @param {string} pass the new style name
             * @returns {void}
             */
            modifyCustomStyle(oldStyleName: string, options: Spreadsheet.CustomStyleOptions, newStyleName: string): void;

            /** This method is used to remove the font from the Ribbon font family dropdown.
             * @param {string} Font name which needs to remove from the font family drop down.
             * @returns {void}
             */
            removeFontFamily(fontName: string): void;

            /** This method is used to remove the style in the specified range.
             * @param {any[]|string} Pass the cell range .
             * @param {Spreadsheet.FormatOptions} Optional.
             * @returns {void}
             */
            removeStyle(range: any[]|string, options: Spreadsheet.FormatOptions): void;

            /** This method is used to remove table with specified tableId in the Spreadsheet.
             * @param {number} Pass the tableId that you want to remove.
             * @returns {void}
             */
            removeTable(tableId: number): void;

            /** This method is used to update the decimal places for numeric value for the selected range of cells in the Spreadsheet.
             * @param {string} Pass the decimal places type in IncreaseDecimal/DecreaseDecimal.
             * @param {string|any[]} Pass the range.
             * @returns {void}
             */
            updateDecimalPlaces(type: string, range: string|any[]): void;

            /** This method is used to update the format for the selected range of cells in the Spreadsheet.
             * @param {Spreadsheet.BorderOptions} Pass Object BorderOptions.
             * @param {any[]} Optional. If the range is specified, then it will update format in the specified range else it will use the current selected range.
             * @returns {void}
             */
            updateFormat(formatObj: Spreadsheet.BorderOptions, range: any[]): void;

            /** This method is used to update the unique format for selected range of cells in the Spreadsheet.
             * @param {string} Pass the unique format class.
             * @param {any[]} Optional. If the range is specified, then it will update format in the specified range else it will use the current selected range.
             * @returns {void}
             */
            updateUniqueFormat(formatClass: string, range: any[]): void;
        }

        export interface XLFreeze {

            /** This method is used to freeze columns upto the specified column index in the Spreadsheet.
             * @param {number} Index of the column to be freeze.
             * @returns {void}
             */
            freezeColumns(colIdx: number): void;

            /** This method is used to freeze the first column in the Spreadsheet.
             * @returns {void}
             */
            freezeLeftColumn(): void;

            /** This method is used to freeze rows and columns before the specified cell in the Spreadsheet.
             * @param {number} Index of the row to be freeze.
             * @param {number} Index of the column to be freeze.
             * @returns {void}
             */
            freezePanes(rowIdx: number, colIdx: number): void;

            /** This method is used to freeze rows upto the specified row index in the Spreadsheet.
             * @param {number} Index of the row to be freeze.
             * @returns {void}
             */
            freezeRows(rowIdx: number): void;

            /** This method is used to freeze the top row in the Spreadsheet.
             * @returns {void}
             */
            freezeTopRow(): void;

            /** This method is used to unfreeze the frozen rows and columns in the Spreadsheet.
             * @returns {void}
             */
            unfreezePanes(): void;
        }

        export interface PivotOptions {

            /** Pass the rows object to create pivot table
             */
            rows?: any;

            /** Pass the column object to create pivot table
             */
            columns?: any;

            /** Pass the values to create pivot table
             */
            values?: any;

            /** Pass the filter object to create pivot table
             */
            filter?: any;
        }

        export interface XLPivot {

            /** This property is used to clear the pivot table list in Spreadsheet.
             * @param {string} Pass the name of the pivot table.
             * @returns {void}
             */
            clearPivotFieldList(pivotName: string): void;

            /** This method is used to create pivot table.
             * @param {string} It specifies the range for which the pivot table is created.
             * @param {string} It specifies the location in which the pivot table is created.
             * @param {string} It specifies the name of the pivot table.
             * @param {Spreadsheet.PivotOptions} Pass Object PivotOptions.
             * @param {any} Pass the pivot range, sheet index, address and data source .
             * @returns {string}
             */
            createPivotTable(range: string, location: string, name: string, settings: Spreadsheet.PivotOptions, pvt: any): string;

            /** This method is used to delete the pivot table which is selected.
             * @param {string} Pass the name of the pivot table.
             * @returns {void}
             */
            deletePivotTable(pivotName: string): void;

            /** This method is used to refresh data in pivot table.
             * @param {string} Optional. Pass the name of the pivot table.
             * @param {number} Optional. Pass the index of the sheet.
             * @returns {void}
             */
            refreshDataSource(name: string, sheetIdx: number): void;
        }

        export interface XLPrint {

            /** This method is used to print the selected contents in the Spreadsheet.
             * @returns {void}
             */
            printSelection(): void;

            /** This method is used to print the entire contents in the active sheet.
             * @returns {void}
             */
            printSheet(): void;
        }

        export interface XLResize {

            /** This method is used to fit the height of rows in the Spreadsheet.
             * @param {any[]} Optional. Pass row index collection that you want to fit its height.
             * @returns {void}
             */
            fitHeight(rowIndexes: any[]): void;

            /** This method is used to fit the width of columns in the Spreadsheet.
             * @param {any[]} Optional. Pass column index collection that you want to fit its width.
             * @returns {void}
             */
            fitWidth(colIndexes: any[]): void;

            /** This method is used to get the column width of the specified column index in the Spreadsheet.
             * @param {number} Pass the column index.
             * @returns {number}
             */
            getColWidth(colIdx: number): number;

            /** This method is used to get the row height of the specified row index in the Spreadsheet.
             * @param {number} Pass the row index which you want to find its height.
             * @returns {number}
             */
            getRowHeight(rowIdx: number): number;

            /** This method is used to set the column width of the specified column index in the Spreadsheet.
             * @param {number} Pass the column index.
             * @param {number} Pass the width value that you want to set.
             * @returns {void}
             */
            setColWidth(colIdx: number, size: number): void;

            /** This method is used to set the row height of the specified row index in the Spreadsheet.
             * @param {number} Pass the row index.
             * @param {number} Pass the height value that you want to set.
             * @returns {void}
             */
            setRowHeight(rowIdx: number, size: number): void;
        }

        export interface BackstageOptions {

            /** Pass the id to added in backstage
             */
            id?: string;

            /** Pass the text to added in backstage
             */
            text?: string;

            /** Pass the item type to added in backstage
             */
            itemType?: HTMLElement;
        }

        export interface ContextualTabOptions {

            /** Pass the background color
             */
            backgroundColor?: string;

            /** Pass the border color
             */
            borderColor?: string;

            /** Pass the tabs object to add in ribbon
             */
            tabs?: any;
        }

        export interface TabOptions {

            /** Pass the text to displayed in ribbon tab
             */
            text?: string;

            /** Pass the align type
             */
            alignType?: HTMLElement;

            /** Pass the content object to be displayed in ribbon tab
             */
            contents?: any;

            /** Pass the defaults object to be displayed in ribbon tab
             */
            defaults?: any;
        }

        export interface MenuItemOptions {

            /** Pass the id to update the menu item
             */
            id?: string;

            /** Pass the text to update the menu item
             */
            text?: string;

            /** Pass the parent id to update the menu item
             */
            parentId?: string;

            /** Pass the sprite css class to update the menu item
             */
            spriteCssClass?: string;
        }

        export interface XLRibbon {

            /** This method is used to add a new item in the backstage.
             * @param {Spreadsheet.BackstageOptions} Pass Object BackstageOptions.
             * @param {number} pass the index of the item to be added in the backstage.
             * @returns {void}
             */
            addBackStageItem(pageItem: Spreadsheet.BackstageOptions, index: number): void;

            /** This method is used to dynamically add the contextual tabs in the ribbon.
             * @param {Spreadsheet.ContextualTabOptions} Pass Object ContextualTabOptions.
             * @param {number} pass the index of the contextual tab.
             * @returns {void}
             */
            addContextualTabs(contextualTabSet: Spreadsheet.ContextualTabOptions, index: number): void;

            /** This method is used to dynamically add the menu item in the file menu.
             * @param {any[]} Specifies the item to be added
             * @param {number} pass the index of the menu item.
             * @returns {void}
             */
            addMenuItem(item: any[], index: number): void;

            /** This method is used to add a new name in the Spreadsheet name manager.
             * @param {string} Pass the name that you want to define in name manager.
             * @param {string} Pass the cell reference.
             * @param {string} Optional. Pass comment, if you want.
             * @param {number} Optional. Pass the sheet index.
             * @param {string} Optional. Pass the scope of the name manager.
             * @returns {void}
             */
            addNamedRange(name: string, refersTo: string, comment: string, sheetIdx: number, scope: string): void;

            /** This method is used to dynamically add the tab in the ribbon.
             * @param {string} Specifies the text to be displayed in the tab.
             * @param {any[]} pass the groups to be displayed in the ribbon tab.
             * @param {number} pass the index of the tab.
             * @returns {void}
             */
            addTab(tabText: string, ribbonGroups: any[], index: number): void;

            /** This method is used to dynamically add the tab group in the ribbon.
             * @param {number} Specifies the ribbon tab index.
             * @param {Spreadsheet.TabOptions} Pass Object TabOptions.
             * @param {number} pass the index of the ribbon group.
             * @returns {void}
             */
            addTabGroup(tabIndex: number, tabGroup: Spreadsheet.TabOptions, groupIndex: number): void;

            /** This method is used to insert the few type (SUM, MAX, MIN, AVG, COUNT) of formulas in the selected range of cells in the Spreadsheet.
             * @param {string} To pass the type("SUM","MAX","MIN","AVG","COUNT").
             * @param {string|any[]} If range is specified, it will apply auto sum for the specified range else it will use the current selected range.
             * @returns {void}
             */
            autoSum(type: string, range: string|any[]): void;

            /** This method is used to hide the file menu in the ribbon tab.
             * @returns {void}
             */
            hideMenu(): void;

            /** This method is used to remove the item from the backstage in the spreadsheet.
             * @param {number} Specifies the index of the item to be removed from backstage.
             * @returns {void}
             */
            removeBackStageItem(index: number): void;

            /** This method is used to remove the menu item form file menu in spreadsheet.
             * @param {number} Specifies the index of the item to be removed from the file menu.
             * @returns {void}
             */
            removeMenuItem(index: number): void;

            /** This method is used to delete the defined name in the Spreadsheet name manager.
             * @param {string} Pass the defined name that you want to remove from name manager.
             * @param {string} Optional. Pass the scope of the name manager.
             * @returns {void}
             */
            removeNamedRange(name: string, scope: string): void;

            /** This method is used to remove the tab form ribbon in the spreadsheet.
             * @param {number} Specifies the index of the tab to be removed from the ribbon.
             * @param {boolean} pass the boolean value to remove the tab from ribbon
             * @returns {void}
             */
            removeTab(index: number, isRemoveMenu: boolean): void;

            /** This method is used to remove the tab group form ribbon in the spreadsheet.
             * @param {number} Specifies the index of the tab group to be removed from the ribbon.
             * @param {string} Specifies the text to be displayed in the tab group
             * @returns {void}
             */
            removeTabGroup(tabIndex: number, groupText: string): void;

            /** This method is used to show the file menu in the ribbon tab.
             * @returns {void}
             */
            showMenu(): void;

            /** This method is used to update the menu item in the file menu.
             * @param {Spreadsheet.MenuItemOptions} Pass Object MenuItemOptions.
             * @param {number} pass the index of the item to be updated
             * @returns {void}
             */
            updateMenuItem(item: Spreadsheet.MenuItemOptions, index: number): void;

            /** This method is used to update the ribbon icons in the Spreadsheet.
             * @returns {void}
             */
            updateRibbonIcons(): void;
        }

        export interface XLScroll {

            /** This method is used to scroll the sheet content to the specified cell address in the Spreadsheet.
             * @param {string} Pass the cell address that you want to scroll to it.
             * @returns {void}
             */
            scrollToCell(range: string): void;
        }

        export interface XLSearch {

            /** This method is used to find and replace all data by workbook in the Spreadsheet.
             * @param {string} Pass the search data.
             * @param {string} Pass the replace data.
             * @param {boolean} Pass {{'`true`' | markdownify}}, if you want to match with case-sensitive.
             * @param {boolean} Pass {{'`true`' | markdownify}}, if you want to match with entire cell contents.
             * @returns {void}
             */
            replaceAllByBook(findData: string, replaceData: string, isCSen: boolean, isEMatch: boolean): void;

            /** This method is used to find and replace all data by sheet in Spreadsheet.
             * @param {string} Pass the search data.
             * @param {string} Pass the replace data.
             * @param {boolean} Pass {{'`true`' | markdownify}}, if you want to match with case-sensitive.
             * @param {boolean} Pass {{'`true`' | markdownify}}, if you want to match with entire cell contents.
             * @returns {void}
             */
            replaceAllBySheet(findData: string, replaceData: string, isCSen: boolean, isEMatch: boolean): void;
        }

        export interface XLSelection {

            /** This method is used to clear the selection of the active sheet in the Spreadsheet.
             * @returns {void}
             */
            clearAll(): void;

            /** This method is used to get the selected cells element based on specified sheet index in the Spreadsheet.
             * @param {number} Pass the sheet index to get the cells element.
             * @returns {HTMLElement}
             */
            getSelectedCells(sheetIdx: number): HTMLElement;

            /** This method is used to refresh the selection in the Spreadsheet.
             * @param {any[]|string} Optional. Pass range to refresh selection.
             * @returns {void}
             */
            refreshSelection(range: any[]|string): void;

            /** This method is used to select a single column in the Spreadsheet.
             * @param {number} Pass the column index value.
             * @returns {void}
             */
            selectColumn(colIdx: number): void;

            /** This method is used to select entire columns in a specified range (start index and end index) in the Spreadsheet.
             * @param {number} Pass the column start index.
             * @param {number} Pass the column end index.
             * @returns {void}
             */
            selectColumns(startIdx: number, endIdx: number): void;

            /** This method is used to select the specified range of cells in the Spreadsheet.
             * @param {string} Pass range which want to select.
             * @returns {void}
             */
            selectRange(range: string): void;

            /** This method is used to select a single row in the Spreadsheet.
             * @param {number} Pass the row index value.
             * @returns {void}
             */
            selectRow(rowIdx: number): void;

            /** This method is used to select entire rows in a specified range (start index and end index) in the Spreadsheet.
             * @param {number} Pass the start row index.
             * @param {number} Pass the end row index.
             * @returns {void}
             */
            selectRows(startIdx: number, endIdx: number): void;

            /** This method is used to select all cells in active sheet.
             * @returns {void}
             */
            selectSheet(): void;
        }

        export interface XLShape {

            /** This method is used to set a picture in the Spreadsheet.
             * @param {string} Pass the range of the cell.
             * @param {string} Pass the path of the specified image.
             * @param {number} Optional. Pass the width of the image that you want to set.
             * @param {number} Optional. Pass the height of the image that you want to set.
             * @param {number} Optional. Pass the top of the image that you want to set.
             * @param {number} Optional. Pass the left of the image that you want to set.
             * @returns {string}
             */
            setPicture(range: string, url: string, width: number, height: number, top: number, left: number): string;
        }

        export interface ColorOptions {

            /** Pass the background color to sort the cell
             */
            backgroundColor?: string;

            /** Pass the color to sort the cell
             */
            color?: string;
        }

        export interface XLSort {

            /** This method is used to sort a particular range of cells based on its cell or font color in the Spreadsheet.
             * @param {string} Pass {{'`PutCellColor`' | markdownify}} to sort by cell color or {{'`PutFontColor`' | markdownify}} for sort by font color.
             * @param {Spreadsheet.ColorOptions} Pass Object ColorOptions.
             * @param {string} Pass the range
             * @returns {void}
             */
            sortByColor(operation: string, color: Spreadsheet.ColorOptions, range: string): void;

            /** This method is used to sort a particular range of cells based on its values in the Spreadsheet.
             * @param {any[]|string} Pass the range to sort.
             * @param {string} Pass the column name.
             * @param {string} Pass the direction to sort
             * @returns {boolean}
             */
            sortByRange(range: any[]|string, columnName: string, direction: string): boolean;
        }

        export interface SparklineOptions {

            /** Pass the marker settings object to create sparkline
             */
            markerSettings?: any;

            /** Pass the high point color to create sparkline
             */
            highPointColor?: string;

            /** Pass the negative point color to create sparkline
             */
            negativePointColor?: string;

            /** Pass the start point color to create sparkline
             */
            startPointColor?: string;
        }

        export interface XLSparkline {

            /** This method used for creating the sparkline chart for specified range in spreadsheet.
             * @param {string} Pass the data range
             * @param {string} Pass the location range
             * @param {string} Pass the sparkline chart type
             * @param {Spreadsheet.SparklineOptions} Pass Object SparklineOptions.
             * @param {number} Pass the sheetIndex
             * @returns {void}
             */
            createSparkline(dataRange: string, locationRange: string, type: string, options: Spreadsheet.SparklineOptions, sheetIndex: number): void;

            /** This method used to change the sparkline color and marker point color in the spreadsheet.
             * @param {string} Pass the sparkline ID
             * @param {any}  pass the high point color as object.
             * @param {number} Optional. Pass the sheet index
             * @returns {void}
             */
            changePointColor(sparklineId: string, option: any, sheetIdx: number): void;

            /** This method used to change the sparkline type in the spreadsheet.
             * @param {string} Pass the sparkline ID
             * @param {string} Pass the sparkline type
             * @param {number} Optional. Pass the sheet index
             * @returns {void}
             */
            changeType(sparklineId: string, type: string, sheetIdx: number): void;
        }

        export interface XLValidate {

            /** This method is used to apply data validation rules in a selected range of cells based on the defined condition in the Spreadsheet.
             * @param {string|any[]} If range is specified, it will apply rules for the specified range else it will use the current selected range.
             * @param {any[]} Pass the validation condition, value1 and value2.
             * @param {string} Pass the data type.
             * @param {boolean} Pass {{'`true`' | markdownify}} if you ignore blank values.
             * @param {boolean} Pass {{'`true`' | markdownify}} if you want to show an error alert.
             * @returns {void}
             */
            applyDVRules(range: string|any[], values: any[], type: string, required: boolean, showErrorAlert: boolean): void;

            /** This method is used to clear the applied validation rules in a specified range of cells in the Spreadsheet.
             * @param {string|any[]} Optional. If range is specified, it will clear rules for the specified range else it will use the current selected range.
             * @returns {void}
             */
            clearDV(range: string|any[]): void;

            /** This method is used to highlight invalid data in a specified range of cells in the Spreadsheet.
             * @param {string|any[]} Optional. If range is specified, it will clear rules for the specified range else it will use the current selected range.
             * @returns {void}
             */
            highlightInvalidData(range: string|any[]): void;
        }

        export interface Model {

            /** Gets or sets an active sheet index in the Spreadsheet. By defining this value, you can specify which sheet should be active in workbook.
             * @Default {1}
             */
            activeSheetIndex?: number;

            /** Gets or sets a value that indicates whether to enable or disable auto rendering of cell type in the Spreadsheet.
             * @Default {false}
             */
            allowAutoCellType?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable auto fill feature in the Spreadsheet.
             * @Default {true}
             */
            allowAutoFill?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable auto sum feature in the Spreadsheet.
             * @Default {true}
             */
            allowAutoSum?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable cell format feature in the Spreadsheet. By enabling this, you can customize styles and number formats.
             * @Default {true}
             */
            allowCellFormatting?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable cell type feature in the Spreadsheet.
             * @Default {false}
             */
            allowCellType?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable chart feature in the Spreadsheet. By enabling this feature, you can create and customize charts in Spreadsheet.
             * @Default {true}
             */
            allowCharts?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable clear feature in the Spreadsheet.
             * @Default {true}
             */
            allowClear?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable clipboard feature in the Spreadsheet. By enabling this feature, you can perform cut/copy and paste operations in
             * Spreadsheet.
             * @Default {true}
             */
            allowClipboard?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable comment feature in the Spreadsheet. By enabling this, you can add/delete/modify comments in Spreadsheet.
             * @Default {true}
             */
            allowComments?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable Conditional Format feature in the Spreadsheet. By enabling this, you can apply formatting to the selected range of
             * cells based on the provided conditions (Greater than, Less than, Equal, Between, Contains, etc.).
             * @Default {true}
             */
            allowConditionalFormats?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable data validation feature in the Spreadsheet.
             * @Default {true}
             */
            allowDataValidation?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable the delete action in the Spreadsheet. By enabling this feature, you can delete existing rows, columns, cells and
             * sheet.
             * @Default {true}
             */
            allowDelete?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable drag and drop feature in the Spreadsheet.
             * @Default {true}
             */
            allowDragAndDrop?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable the edit action in the Spreadsheet.
             * @Default {true}
             */
            allowEditing?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable filtering feature in the Spreadsheet. Filtering can be used to limit the data displayed using required criteria.
             * @Default {true}
             */
            allowFiltering?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable table feature in the Spreadsheet. By enabling this, you can render table in selected range.
             * @Default {true}
             */
            allowFormatAsTable?: boolean;

            /** Get or sets a value that indicates whether to enable or disable format painter feature in the Spreadsheet. By enabling this feature, you can copy the format from the selected
             * range and apply it to another range.
             * @Default {true}
             */
            allowFormatPainter?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable formula bar in the Spreadsheet.
             * @Default {true}
             */
            allowFormulaBar?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable freeze pane support in Spreadsheet. By enabling this feature, you can use freeze top row, freeze first column and
             * freeze panes options.
             * @Default {true}
             */
            allowFreezing?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable hyperlink feature in the Spreadsheet. By enabling this feature, you can add hyperlink which is used to easily
             * navigate to the cell reference from one sheet to another or a web page.
             * @Default {true}
             */
            allowHyperlink?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable import feature in the Spreadsheet. By enabling this feature, you can open existing Spreadsheet documents.
             * @Default {true}
             */
            allowImport?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable the insert action in the Spreadsheet. By enabling this feature, you can insert new rows, columns, cells and sheet.
             * @Default {true}
             */
            allowInsert?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable keyboard navigation feature in the Spreadsheet.
             * @Default {true}
             */
            allowKeyboardNavigation?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable lock cell feature in the Spreadsheet.
             * @Default {true}
             */
            allowLockCell?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable merge feature in the Spreadsheet.
             * @Default {true}
             */
            allowMerging?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable overflow feature in the Spreadsheet.
             * @Default {true}
             */
            allowOverflow?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable resizing feature in the Spreadsheet. By enabling this feature, you can change the column width and row height by
             * dragging its header boundaries.
             * @Default {true}
             */
            allowResizing?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable find and replace feature in the Spreadsheet. By enabling this, you can easily find and replace a specific value in
             * the sheet or workbook. By using goto behavior, you can select and highlight all cells that contains specific data or data types.
             * @Default {true}
             */
            allowSearching?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable selection in the Spreadsheet. By enabling this feature, selected items will be highlighted.
             * @Default {true}
             */
            allowSelection?: boolean;

            /** Gets or sets a value that indicates whether to enable the sorting feature in the Spreadsheet.
             * @Default {true}
             */
            allowSorting?: boolean;

            /** Gets or sets a value that indicates whether to enable the sparkline feature in the Spreadsheet.
             * @Default {false}
             */
            allowSparkline?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable undo and redo feature in the Spreadsheet.
             * @Default {true}
             */
            allowUndoRedo?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable wrap text feature in the Spreadsheet. By enabling this, cell content can wrap to the next line, if the cell
             * content exceeds the boundary of the cell.
             * @Default {true}
             */
            allowWrap?: boolean;

            /** Gets or sets a value that indicates to define the width of the activation panel in Spreadsheet.
             * @Default {300}
             */
            apWidth?: number;

            /** Gets or sets an object that indicates to customize the auto fill behavior in the Spreadsheet.
             */
            autoFillSettings?: AutoFillSettings;

            /** Gets or sets an object that indicates to customize the chart behavior in the Spreadsheet.
             */
            chartSettings?: ChartSettings;

            /** Gets or sets a value that defines the number of columns displayed in the sheet.
             * @Default {21}
             */
            columnCount?: number;

            /** Gets or sets a value that indicates to define the common width for each column in the Spreadsheet.
             * @Default {64}
             */
            columnWidth?: number;

            /** Gets or sets a value to add root CSS class for customizing Spreadsheet skins.
             */
            cssClass?: string;

            /** Gets or sets a value that indicates custom formulas in Spreadsheet.
             * @Default {[]}
             */
            customFormulas?: any[];

            /** Gets or sets a value that indicates whether to enable or disable context menu in the Spreadsheet.
             * @Default {true}
             */
            enableContextMenu?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable pivot table in the Spreadsheet.
             * @Default {false}
             */
            enablePivotTable?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable touch support in the Spreadsheet.
             * @Default {true}
             */
            enableTouch?: boolean;

            /** Gets or sets an object that indicates to customize the exporting behavior in Spreadsheet.
             */
            exportSettings?: ExportSettings;

            /** Gets or sets an object that indicates to customize the format behavior in the Spreadsheet.
             */
            formatSettings?: FormatSettings;

            /** Gets or sets an object that indicates to customize the import behavior in the Spreadsheet.
             */
            importSettings?: ImportSettings;

            /** Gets a value that indicates whether importing or not while loading the sheets in Spreadsheet.
             * @Default {false}
             */
            isImport?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable readonly support in the Spreadsheet.
             * @Default {false}
             */
            isReadOnly?: boolean;

            /** Gets or sets a value that indicates whether to customizing the user interface (UI) as locale-specific in order to display regional data (i.e.) in a language and culture specific
             * to a particular country or region.
             * @Default {en-US}
             */
            locale?: string;

            /** Gets or sets a value that indicates name manager in Spreadsheet.
             */
            nameManager?: NameManager[];

            /** Gets or sets an object that indicates to customize the picture behavior in the Spreadsheet.
             */
            pictureSettings?: PictureSettings;

            /** Gets or sets an object that indicates to customize the print option in Spreadsheet.
             */
            printSettings?: PrintSettings;

            /** Gets or sets an object that indicates to customize the ribbon settings in Spreadsheet.
             */
            ribbonSettings?: RibbonSettings;

            /** Gets or sets a value that indicates whether to define the number of rows to be displayed in the sheet.
             * @Default {20}
             */
            rowCount?: number;

            /** Gets or sets a value that indicates to define the common height for each row in the sheet.
             * @Default {20}
             */
            rowHeight?: number;

            /** Gets or sets an object that indicates to customize the scroll options in the Spreadsheet.
             */
            scrollSettings?: ScrollSettings;

            /** Gets or sets an object that indicates to customize the selection options in the Spreadsheet.
             */
            selectionSettings?: SelectionSettings;

            /** Gets or sets a value that indicates to define the number of sheets to be created at the initial load.
             * @Default {1}
             */
            sheetCount?: number;

            /** Gets or sets an object that indicates to customize the sheet behavior in Spreadsheet.
             */
            sheets?: Sheet[];

            /** Gets or sets a value that indicates whether to show or hide pager in the Spreadsheet.
             * @Default {true}
             */
            showPager?: boolean;

            /** Gets or sets a value that indicates whether to show or hide ribbon in the Spreadsheet.
             * @Default {true}
             */
            showRibbon?: boolean;

            /** This is used to set the number of undo-redo steps in the Spreadsheet.
             * @Default {20}
             */
            undoRedoStep?: number;

            /** Define the username for the Spreadsheet which is displayed in comment.
             * @Default {User Name}
             */
            userName?: string;

            /** Triggered for every action before its starts.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggered for every action complete.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggered when the auto fill operation begins.
             */
            autoFillBegin?(e: AutoFillBeginEventArgs): void;

            /** Triggered when the auto fill operation completes.
             */
            autoFillComplete?(e: AutoFillCompleteEventArgs): void;

            /** Triggered before the batch save.
             */
            beforeBatchSave?(e: BeforeBatchSaveEventArgs): void;

            /** Triggered before the cells to be formatted.
             */
            beforeCellFormat?(e: BeforeCellFormatEventArgs): void;

            /** Triggered before the cell selection.
             */
            beforeCellSelect?(e: BeforeCellSelectEventArgs): void;

            /** Triggered before the selected cells are dropped.
             */
            beforeDrop?(e: BeforeDropEventArgs): void;

            /** Triggered while start to edit the comment.
             */
            beforeEditComment?(e: BeforeEditCommentEventArgs): void;

            /** Triggered before the contextmenu is open.
             */
            beforeOpen?(e: BeforeOpenEventArgs): void;

            /** Triggered before the activation panel is open.
             */
            beforePanelOpen?(e: BeforePanelOpenEventArgs): void;

            /** Triggered when click on sheet cell.
             */
            cellClick?(e: CellClickEventArgs): void;

            /** Triggered when the cell is edited.
             */
            cellEdit?(e: CellEditEventArgs): void;

            /** Triggered while cell is formatting.
             */
            cellFormatting?(e: CellFormattingEventArgs): void;

            /** Triggered when mouse hover on cell in sheets.
             */
            cellHover?(e: CellHoverEventArgs): void;

            /** Triggered when save the edited cell.
             */
            cellSave?(e: CellSaveEventArgs): void;

            /** Triggered when the cell is selected.
             */
            cellSelected?(e: CellSelectedEventArgs): void;

            /** Triggered when click the contextmenu items.
             */
            contextMenuClick?(e: ContextMenuClickEventArgs): void;

            /** Triggered when the selected cells are being dragged.
             */
            drag?(e: DragEventArgs): void;

            /** Triggered when you start to drag the picture or chart.
             */
            dragShape?(e: DragShapeEventArgs): void;

            /** Triggered when the selected cells are initiated to drag.
             */
            dragStart?(e: DragStartEventArgs): void;

            /** Triggered when the selected cells are dropped.
             */
            drop?(e: DropEventArgs): void;

            /** Triggered before the range editing starts.
             */
            editRangeBegin?(e: EditRangeBeginEventArgs): void;

            /** Triggered after range editing completes.
             */
            editRangeComplete?(e: EditRangeCompleteEventArgs): void;

            /** Triggered when the key is pressed down.
             */
            keyDown?(e: KeyDownEventArgs): void;

            /** Triggered when the key is released.
             */
            keyUp?(e: KeyUpEventArgs): void;

            /** Triggered before the sheet is loaded.
             */
            load?(e: LoadEventArgs): void;

            /** Triggered after the sheet is loaded.
             */
            loadComplete?(e: LoadCompleteEventArgs): void;

            /** Triggered every click of the menu item.
             */
            menuClick?(e: MenuClickEventArgs): void;

            /** Triggered when a file is imported.
             */
            onImport?(e: OnImportEventArgs): void;

            /** Triggered when import sheet is failed to open.
             */
            openFailure?(e: OpenFailureEventArgs): void;

            /** Triggered when pager item is clicked in the Spreadsheet.
             */
            pagerClick?(e: PagerClickEventArgs): void;

            /** Triggered when you start resizing the chart, picture, row and column.
             */
            resizeStart?(e: ResizeStartEventArgs): void;

            /** Triggered after end of resizing the chart, picture, row and column.
             */
            resizeEnd?(e: ResizeEndEventArgs): void;

            /** Triggered when click on the ribbon.
             */
            ribbonClick?(e: RibbonClickEventArgs): void;

            /** Triggered after end of vertical and horizontal scrolling.
             */
            scrollStop?(e: ScrollStopEventArgs): void;

            /** Triggered when click the ribbon tab.
             */
            tabClick?(e: TabClickEventArgs): void;

            /** Triggered when select the ribbon tab.
             */
            tabSelect?(e: TabSelectEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** Returns the applied style format object.
             */
            afterFormat?: any;

            /** Returns the applied style format object.
             */
            beforeFormat?: any;

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the cell range.
             */
            range?: any[];

            /** Returns the action format.
             */
            reqType?: string;

            /** Returns goto index while paging.
             */
            gotoIdx?: number;

            /** Returns boolean value. If create new sheet it returns true.
             */
            newSheet?: boolean;

            /** Return column name while sorting.
             */
            columnName?: string;

            /** Returns selected columns while sorting or filtering begins.
             */
            colSelected?: number;

            /** Returns sort direction while sort action begins.
             */
            sortDirection?: string;
        }

        export interface ActionCompleteEventArgs {

            /** Returns Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the applied cell format object.
             */
            selectedCell?: any[]|any;

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the request type.
             */
            reqType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface AutoFillBeginEventArgs {

            /** Returns auto fill begin cell range.
             */
            dataRange?: any[];

            /** Returns which direction drag the auto fill.
             */
            direction?: string;

            /** Returns fill cells range.
             */
            fillRange?: any[];

            /** Returns the auto fill type.
             */
            fillType?: string;

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface AutoFillCompleteEventArgs {

            /** Returns auto fill begin cell range.
             */
            dataRange?: any[];

            /** Returns which direction to drag the auto fill.
             */
            direction?: string;

            /** Returns fill cells range.
             */
            fillRange?: any[];

            /** Returns the auto fill type.
             */
            fillType?: string;

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface BeforeBatchSaveEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the query, primary key,batch changes for the data Source.
             */
            dataSetting?: any;

            /** Returns the changed record object.
             */
            batchChanges?: any;
        }

        export interface BeforeCellFormatEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the applied style format object.
             */
            format?: any;

            /** Returns the selected cells.
             */
            cells?: any[]|any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface BeforeCellSelectEventArgs {

            /** Returns the previous cell range.
             */
            prevRange?: any[];

            /** Returns the current cell range.
             */
            currRange?: any[];

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface BeforeDropEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the current cell row and column index.
             */
            currentCell?: any;

            /** Returns the drag cells range object.
             */
            dragAndDropRange?: any;

            /** Returns the cell Overwriting alert option value.
             */
            preventAlert?: boolean;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the target item.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface BeforeEditCommentEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the comment cell index.
             */
            cellIndex?: any;

            /** Returns the disable option value.
             */
            disable?: boolean;

            /** Returns the Spreadsheet model.
             */
            model?: any;

            /** Returns the value of the comment
             */
            value?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface BeforeOpenEventArgs {

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface BeforePanelOpenEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the activation panel element.
             */
            activationPanel?: any;

            /** Returns the range option value.
             */
            range?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface CellClickEventArgs {

            /** Returns the click cell element.
             */
            cell?: HTMLElement;

            /** Returns the column index of clicked cell.
             */
            columnIndex?: number;

            /** Returns the row index of clicked cell.
             */
            rowIndex?: number;

            /** Returns the column name of clicked cell.
             */
            columnName?: string;

            /** Returns the column information.
             */
            columnObject?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the value of the cell.
             */
            value?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface CellEditEventArgs {

            /** Returns the click cell element.
             */
            cell?: HTMLElement;

            /** Returns the columnName of clicked cell.
             */
            columnName?: string;

            /** Returns the column field information.
             */
            columnObject?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface CellFormattingEventArgs {

            /** Returns the sheet index
             */
            SheetIdx?: number;

            /** Returns the applied style format object
             */
            Format?: any;

            /** Returns the cell index.
             */
            Cell?: number;

            /** Returns the name of the CSS theme.
             */
            cssClass?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;
        }

        export interface CellHoverEventArgs {

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface CellSaveEventArgs {

            /** Returns the save cell element.
             */
            cell?: HTMLElement;

            /** Returns the columnName of clicked cell.
             */
            columnName?: string;

            /** Returns the column field information.
             */
            columnObject?: any;

            /** Returns the index of the row.
             */
            rowIndex?: number;

            /** Returns the index of the column.
             */
            colIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cell previous value.
             */
            prevValue?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cell value.
             */
            value?: string;
        }

        export interface CellSelectedEventArgs {

            /** Returns the active sheet index.
             */
            sheetIdx?: number;

            /** Returns the selected range.
             */
            selectedRange?: any[];

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface ContextMenuClickEventArgs {

            /** Returns target element Id.
             */
            Id?: string;

            /** Returns the target element.
             */
            element?: HTMLElement;

            /** Returns event information.
             */
            event?: any;

            /** Returns target element and event information.
             */
            events?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns target element parent Id.
             */
            parentId?: string;

            /** Returns target element parent text.
             */
            parentText?: string;

            /** Returns target element text.
             */
            text?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface DragEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the current cell row and column index.
             */
            currentCell?: any;

            /** Returns the drag cells range object.
             */
            dragAndDropRange?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the target item.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface DragShapeEventArgs {

            /** Returns the Spreadsheet model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface DragStartEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the current cell row and column index.
             */
            currentCell?: any;

            /** Returns the drag cells range object.
             */
            dragAndDropRange?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the target item.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface DropEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the current cell row and column index.
             */
            currentCell?: any;

            /** Returns the drag cells range object.
             */
            dragAndDropRange?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the target item.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface EditRangeBeginEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the range option value.
             */
            range?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface EditRangeCompleteEventArgs {

            /** Returns the sheet index.
             */
            sheetIdx?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the range option value.
             */
            range?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface KeyDownEventArgs {

            /** Returns the sheet index.
             */
            sheetIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the boolean value.
             */
            isCommentEdit?: boolean;

            /** Returns the boolean value.
             */
            isEdit?: boolean;

            /** Returns the boolean value.
             */
            isSheetRename?: boolean;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface KeyUpEventArgs {

            /** Returns the sheet index.
             */
            sheetIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the boolean value.
             */
            isCommentEdit?: boolean;

            /** Returns the boolean value.
             */
            isEdit?: boolean;

            /** Returns the boolean value.
             */
            isSheetRename?: boolean;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface LoadEventArgs {

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the active sheet index.
             */
            sheetIndex?: number;
        }

        export interface LoadCompleteEventArgs {

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface MenuClickEventArgs {

            /** Returns menu click element.
             */
            element?: HTMLElement;

            /** Returns the event information.
             */
            event?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns target element parent Id.
             */
            parentId?: string;

            /** Returns target element parent text.
             */
            parentText?: string;

            /** Returns target element text.
             */
            text?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface OnImportEventArgs {

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the imported data.
             */
            importData?: any;
        }

        export interface OpenFailureEventArgs {

            /** Returns the failure type.
             */
            failureType?: string;

            /** Returns the status index.
             */
            status?: number;

            /** Returns the status in text.
             */
            statusText?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface PagerClickEventArgs {

            /** Returns the active sheet index.
             */
            activeSheet?: number;

            /** Returns the new sheet index.
             */
            gotoSheet?: number;

            /** Returns whether new sheet icon is clicked.
             */
            newSheet?: boolean;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface ResizeStartEventArgs {

            /** Returns the column index which column you start to resize.
             */
            colIndex?: number;

            /** Returns the row index which row you start to resize.
             */
            rowIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: any;

            /** Returns type of the request.
             */
            reqType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface ResizeEndEventArgs {

            /** Returns the column index which you resized.
             */
            colIndex?: number;

            /** Returns old width of the column or shape.
             */
            oldWidth?: number;

            /** Returns new width of the column or shape.
             */
            newWidth?: number;

            /** Returns the row index which you resized.
             */
            rowIndex?: number;

            /** Returns old height of the row or shape.
             */
            oldHeight?: number;

            /** Returns new height of the row or shape.
             */
            newHeight?: number;

            /** Returns the Spreadsheet model.
             */
            model?: any;

            /** Returns type of the request.
             */
            reqType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface RibbonClickEventArgs {

            /** Returns element Id.
             */
            Id?: string;

            /** Returns target information.
             */
            prop?: any;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns status.
             */
            status?: boolean;

            /** Returns isChecked in boolean.
             */
            isChecked?: boolean;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface ScrollStopEventArgs {

            /** Returns the request type.
             */
            reqType?: string;

            /** Returns the scrolled position.
             */
            position?: number;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the scrolling data
             */
            scrollData?: any;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface TabClickEventArgs {

            /** Returns the active tab index.
             */
            activeIndex?: number;

            /** Returns active tab header element.
             */
            activeHeader?: any;

            /** Returns previous active tab header element.
             */
            prevActiveHeader?: any;

            /** Returns previous active tab index.
             */
            prevActiveIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface TabSelectEventArgs {

            /** Returns the active tab index.
             */
            activeIndex?: number;

            /** Returns active tab header element.
             */
            activeHeader?: any;

            /** Returns previous active tab header element.
             */
            prevActiveHeader?: any;

            /** Returns previous active tab index.
             */
            prevActiveIndex?: number;

            /** Returns the Spreadsheet model.
             */
            model?: ej.Spreadsheet.Model;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the target element.
             */
            target?: HTMLElement;

            /** Returns the cancel option value.
             */
            cancel?: boolean;
        }

        export interface AutoFillSettings {

            /** This property is used to set fillType unit in Spreadsheet. It has five types which are CopyCells, FillSeries, FillFormattingOnly, FillWithoutFormatting and FlashFill.
             * @Default {ej.Spreadsheet.AutoFillOptions.FillSeries}
             */
            fillType?: ej.Spreadsheet.AutoFillOptions|string;

            /** Gets or sets a value that indicates to enable or disable auto fill options in the Spreadsheet.
             * @Default {true}
             */
            showFillOptions?: boolean;
        }

        export interface ChartSettings {

            /** Gets or sets a value that defines the chart height in Spreadsheet.
             * @Default {220}
             */
            height?: number;

            /** Gets or sets a value that defines the chart width in the Spreadsheet.
             * @Default {440}
             */
            width?: number;
        }

        export interface ExportSettings {

            /** Gets or sets a value that indicates whether to enable or disable save feature in Spreadsheet. By enabling this feature, you can save existing Spreadsheet.
             * @Default {true}
             */
            allowExporting?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable formula calculation in Spreadsheet. By enabling this feature, formula calculated while export the Spreadsheet in
             * protected mode.
             * @Default {false}
             */
            enableFormulaCalculation?: boolean;

            /** Gets or sets a value that indicates to define csvUrl for export to CSV format.
             * @Default {null}
             */
            csvUrl?: string;

            /** Gets or sets a value that indicates to define excelUrl for export to excel format.
             * @Default {null}
             */
            excelUrl?: string;

            /** Gets or sets a value that indicates to define password while export to excel format.
             * @Default {null}
             */
            password?: string;

            /** Gets or sets a value that indicates to define pdfUrl for export to PDF format.
             * @Default {null}
             */
            pdfUrl?: string;
        }

        export interface FormatSettings {

            /** Gets or sets a value that indicates whether to enable or disable cell border feature in the Spreadsheet.
             * @Default {true}
             */
            allowCellBorder?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable decimal places in the Spreadsheet.
             * @Default {true}
             */
            allowDecimalPlaces?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable font family feature in Spreadsheet.
             * @Default {true}
             */
            allowFontFamily?: boolean;
        }

        export interface ImportSettings {

            /** Sets import mapper to perform import feature in Spreadsheet.
             */
            importMapper?: string;

            /** Gets or sets a value that indicates whether to enable or disable import while initial loading.
             * @Default {false}
             */
            importOnLoad?: boolean;

            /** Sets import URL to access the online files in the Spreadsheet.
             */
            importUrl?: string;

            /** Gets or sets a value that indicates to define password while importing in the Spreadsheet.
             */
            password?: string;
        }

        export interface NameManager {

            /** Specifies the name for the cell or a range.
             */
            name?: string;

            /** Specifies the address for the cell or a range.
             */
            refersto?: string;
        }

        export interface PictureSettings {

            /** Gets or sets a value that indicates whether to enable or disable picture feature in Spreadsheet. By enabling this, you can add pictures in Spreadsheet.
             * @Default {true}
             */
            allowPictures?: boolean;

            /** Gets or sets a value that indicates to define height to picture in the Spreadsheet.
             * @Default {220}
             */
            height?: number;

            /** Gets or sets a value that indicates to define width to picture in the Spreadsheet.
             * @Default {440}
             */
            width?: number;
        }

        export interface PrintSettings {

            /** Gets or sets a value that indicates whether to enable or disable page setup support for printing in Spreadsheet.
             * @Default {true}
             */
            allowPageSetup?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable page size support for printing in Spreadsheet.
             * @Default {false}
             */
            allowPageSize?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable print feature in the Spreadsheet.
             * @Default {true}
             */
            allowPrinting?: boolean;
        }

        export interface RibbonSettingsApplicationTabMenuSettings {

            /** Gets or sets a value that indicates whether to enable or disable isAppend property in ribbon settings.
             * @Default {false}
             */
            isAppend?: boolean;

            /** Specifies the data source to append in application tab.
             * @Default {[]}
             */
            dataSource?: any[];
        }

        export interface RibbonSettingsApplicationTab {

            /** Gets or sets a value that indicates to set application tab type in Spreadsheet. It has two types, Menu and Backstage.
             * @Default {ej.Ribbon.ApplicationTabType.Backstage}
             */
            type?: ej.Ribbon.ApplicationTabType|string;

            /** Gets or sets an object that indicates menu settings for application tab in Spreadsheet.
             */
            menuSettings?: RibbonSettingsApplicationTabMenuSettings;
        }

        export interface RibbonSettings {

            /** Gets or sets an object that indicates application tab settings in Spreadsheet.
             */
            applicationTab?: RibbonSettingsApplicationTab;
        }

        export interface ScrollSettings {

            /** Gets or sets a value that indicates whether to enable or disable scrolling in Spreadsheet.
             * @Default {true}
             */
            allowScrolling?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable sheet on demand. By enabling this, it render only the active sheet element while paging remaining sheets are
             * created one by one.
             * @Default {false}
             */
            allowSheetOnDemand?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable virtual scrolling feature in the Spreadsheet.
             * @Default {true}
             */
            allowVirtualScrolling?: boolean;

            /** Gets or sets the value that indicates to define the height of spreadsheet.
             * @Default {100%}
             */
            height?: number|string;

            /** Gets or sets the value that indicates whether to enable or disable responsive mode in the Spreadsheet.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Gets or sets a value that indicates to set scroll mode in Spreadsheet. It has two scroll modes, Normal and Infinite.
             * @Default {ej.Spreadsheet.scrollMode.Infinite}
             */
            scrollMode?: ej.Spreadsheet.scrollMode|string;

            /** Gets or sets the value that indicates to define the height of the spreadsheet.
             * @Default {100%}
             */
            width?: number|string;
        }

        export interface SelectionSettings {

            /** Gets or sets a value that indicates to define active cell in spreadsheet.
             */
            activeCell?: string;

            /** Gets or sets a value that indicates to define animation time while selection in the Spreadsheet.
             * @Default {0.001}
             */
            animationTime?: number;

            /** Gets or sets a value that indicates to enable or disable animation while selection.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Gets or sets a value that indicates to set selection type in Spreadsheet. It has three types which are Column, Row and Default.
             * @Default {ej.Spreadsheet.SelectionType.Default}
             */
            selectionType?: ej.Spreadsheet.SelectionType|string;

            /** Gets or sets a value that indicates to set selection unit in Spreadsheet. It has three types which are Single, Range and MultiRange.
             * @Default {ej.Spreadsheet.SelectionUnit.MultiRange}
             */
            selectionUnit?: ej.Spreadsheet.SelectionUnit|string;
        }

        export interface SheetsBorder {

            /** Specifies border type in the Spreadsheet.
             */
            type?: ej.Spreadsheet.BorderType|string;

            /** Specifies border color for range of cells in Spreadsheet.
             */
            color?: string;

            /** To apply border for the specified range of cell.
             */
            range?: string;
        }

        export interface SheetsCFormatRule {

            /** Specifies the conditions to apply for the range of cells in Spreadsheet.
             */
            action?: ej.Spreadsheet.CFormatRule|string;

            /** Specifies the color to apply for the range of cell while conditional formatting.
             */
            color?: ej.Spreadsheet.CFormatHighlightColor|string;

            /** Specifies the inputs for conditional formatting in Spreadsheet.
             * @Default {[]}
             */
            inputs?: any[];

            /** Specifies the range for conditional formatting in Spreadsheet.
             */
            range?: string;
        }

        export interface SheetsRangeSetting {

            /** Gets or sets the data to render the Spreadsheet.
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies the header styles for the headers in datasource range.
             * @Default {null}
             */
            headerStyles?: any;

            /** Specifies the primary key for the datasource in Spreadsheet.
             */
            primaryKey?: string;

            /** Specifies the query for the datasource in Spreadsheet.
             * @Default {null}
             */
            query?: any;

            /** Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
             * @Default {true}
             */
            showHeader?: boolean;

            /** Specifies the start cell for the datasource range in Spreadsheet.
             * @Default {A1}
             */
            startCell?: string;
        }

        export interface SheetsRowsCellsComment {

            /** Get or sets the value that indicates whether to show or hide comments in Spreadsheet.
             * @Default {false}
             */
            isVisible?: boolean;

            /** Specifies the value for the comment in Spreadsheet.
             */
            value?: string;
        }

        export interface SheetsRowsCellsFormat {

            /** Specifies the number of decimal places for the given input.
             * @Default {2}
             */
            decimalPlaces?: number;

            /** Specifies the string format for the given input.
             */
            formatStr?: string;

            /** Specifies the thousand separator for the given input.
             * @Default {false}
             */
            thousandSeparator?: boolean;

            /** Specifies the type of the format in Spreadsheet.
             */
            type?: string;
        }

        export interface SheetsRowsCellsHyperlink {

            /** Specifies the web address for the hyperlink of a cell.
             */
            webAddr?: string;

            /** Specifies the cell address for the hyperlink of a cell.
             */
            cellAddr?: string;

            /** Specifies the sheet index to which the cell is referred.
             * @Default {1}
             */
            sheetIndex?: number;
        }

        export interface SheetsRowsCellsStyle {

            /** Specifies the background color of a cell in the Spreadsheet.
             */
            backgroundColor?: string;

            /** Specifies the font color of a cell in the Spreadsheet.
             */
            color?: string;

            /** Specifies the font weight of a cell in the Spreadsheet.
             */
            fontWeight?: string;
        }

        export interface SheetsRowsCell {

            /** Specifies the comment for a cell in Spreadsheet.
             * @Default {null}
             */
            comment?: SheetsRowsCellsComment;

            /** Specifies the format of a cell in Spreadsheet.
             * @Default {null}
             */
            format?: SheetsRowsCellsFormat;

            /** Specifies the hyperlink for a cell in Spreadsheet.
             * @Default {null}
             */
            hyperlink?: SheetsRowsCellsHyperlink;

            /** Specifies the index of a cell in Spreadsheet.
             * @Default {0}
             */
            index?: number;

            /** Specifies whether to lock or unlock a particular cell.
             * @Default {false}
             */
            isLocked?: boolean;

            /** Specifies the styles of a cell in Spreadsheet.
             * @Default {null}
             */
            style?: SheetsRowsCellsStyle;

            /** Specifies the value for a cell in Spreadsheet.
             */
            value?: string;
        }

        export interface SheetsRow {

            /** Gets or sets the height of a row in Spreadsheet.
             * @Default {20}
             */
            height?: number;

            /** Specifies the cells of a row in Spreadsheet.
             * @Default {[]}
             */
            cells?: SheetsRowsCell[];

            /** Gets or sets the index of a row in Spreadsheet.
             * @Default {0}
             */
            index?: number;
        }

        export interface Sheet {

            /** Specifies the border for the cell in the Spreadsheet.
             * @Default {[]}
             */
            border?: SheetsBorder[];

            /** Specifies the cell types for a cell or range in Spreadsheet.
             * @Default {[]}
             */
            cellTypes?: any[];

            /** Specifies the conditional formatting for the range of cell in Spreadsheet.
             * @Default {[]}
             */
            cFormatRule?: SheetsCFormatRule[];

            /** Gets or sets a value that indicates to define column count in the Spreadsheet.
             * @Default {21}
             */
            colCount?: number;

            /** Gets or sets a value that indicates to define column width in the Spreadsheet.
             * @Default {64}
             */
            columnWidth?: number;

            /** Gets or sets the data to render the Spreadsheet.
             * @Default {null}
             */
            dataSource?: any;

            /** Gets or sets a value that indicates whether to enable or disable field as column header in the Spreadsheet.
             * @Default {false}
             */
            fieldAsColumnHeader?: boolean;

            /** Gets or sets a value to freeze rows in the Spreadsheet.
             * @Default {0}
             */
            frozenRows?: number;

            /** Gets or sets a value to freeze columns in the Spreadsheet.
             * @Default {0}
             */
            frozenColumns?: number;

            /** Specifies the header styles for the headers in datasource range.
             * @Default {null}
             */
            headerStyles?: any;

            /** To hide the specified columns in Spreadsheet.
             * @Default {[]}
             */
            hideColumns?: any[];

            /** To hide the specified rows in Spreadsheet.
             * @Default {[]}
             */
            hideRows?: any[];

            /** To merge specified ranges in Spreadsheet.
             * @Default {[]}
             */
            mergeCells?: any[];

            /** Specifies the primary key for the datasource in Spreadsheet.
             */
            primaryKey?: string;

            /** Specifies the query for the dataSource in Spreadsheet.
             * @Default {null}
             */
            query?: any;

            /** Specifies single range or multiple range settings for a sheet in Spreadsheet.
             * @Default {[]}
             */
            rangeSettings?: SheetsRangeSetting[];

            /** Gets or sets a value that indicates to define row count in the Spreadsheet.
             * @Default {20}
             */
            rowCount?: number;

            /** Specifies the rows for a sheet in Spreadsheet.
             * @Default {[]}
             */
            rows?: SheetsRow[];

            /** Gets or sets a value that indicates whether to show or hide grid lines in the Spreadsheet.
             * @Default {true}
             */
            showGridlines?: boolean;

            /** Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
             * @Default {true}
             */
            showHeader?: boolean;

            /** Gets or sets a value that indicates whether to show or hide headings in the Spreadsheet.
             * @Default {true}
             */
            showHeadings?: boolean;

            /** Specifies the name for sheet in the Spreadsheet.
             * @Default {string}
             */
            sheetName?: string;

            /** Specifies the start cell for the datasource range in Spreadsheet.
             * @Default {A1}
             */
            startCell?: string;
        }

        enum AutoFillOptions {

            ///Specifies the CopyCells property in AutoFillOptions.
            CopyCells,

            ///Specifies the FillSeries property in AutoFillOptions.
            FillSeries,

            ///Specifies the FillFormattingOnly property in AutoFillOptions.
            FillFormattingOnly,

            ///Specifies the FillWithoutFormatting property in AutoFillOptions.
            FillWithoutFormatting,

            ///Specifies the FlashFill property in AutoFillOptions.
            FlashFill
        }


        enum scrollMode {

            ///To enable Infinite scroll mode for Spreadsheet.
            Infinite,

            ///To enable Normal scroll mode for Spreadsheet.
            Normal
        }


        enum SelectionType {

            ///To select only Column in Spreadsheet.
            Column,

            ///To select only Row in Spreadsheet.
            Row,

            ///To select both Column/Row in Spreadsheet.
            Default
        }


        enum SelectionUnit {

            ///To enable Single selection in Spreadsheet
            Single,

            ///To enable Range selection in Spreadsheet
            Range,

            ///To enable MultiRange selection in Spreadsheet
            MultiRange
        }


        enum BorderType {

            ///To apply top border for the given range of cell.
            Top,

            ///To apply left border for the given range of cell.
            Left,

            ///To apply right border for the given range of cell.
            Right,

            ///To apply bottom border for the given range of cell.
            Bottom,

            ///To apply outside border for the given range of cell.
            OutSide,

            ///To apply all border for the given range of cell.
            AllBorder,

            ///To apply thick box border for the given range of cell.
            ThickBox,

            ///To apply thick bottom border for the given range of cell.
            ThickBottom,

            ///To apply top and bottom border for the given range of cell.
            TopandBottom,

            ///To apply top and thick bottom border for the given range of cell.
            TopandThickBottom
        }


        enum CFormatRule {

            ///To identify greater than values in the given range of cells.
            GreaterThan,

            ///To identify less than values in the given range of cells.
            LessThan,

            ///To identify in between values in the given range of cells.
            Between,

            ///To identify the equal values in the given range of cells.
            EqualTo,

            ///To identify the specified text in the range of cells.
            TextContains,

            ///To identify the specified date in the range of cells.
            DateOccurs
        }


        enum CFormatHighlightColor {

            ///Highlights red with dark red text color.
            RedFillwithDarkRedText,

            ///Highlights yellow with dark yellow text color.
            YellowFillwithDarkYellowText,

            ///Highlights green with dark green text color.
            GreenFillwithDarkGreenText,

            ///Highlights with red fill.
            RedFill,

            ///Highlights with red text.
            RedText
        }


        enum CustomCellType {

            ///To insert the Button in cell.
            Button,

            ///To insert the Checkbox in cell.
            CheckBox,

            ///To insert the Datepicker in cell.
            DatePicker,

            ///To insert the Dropdownlist in cell.
            DropDownList
        }


        enum ChartProperties {

            ///Specifies to make the data label center of the chart.
            DataLabelCenter,

            ///Specifies to make the data label inside base of the chart.
            DataLabelInsideBase,

            ///Specifies to make the data label inside end of the chart.
            DataLabelInsideEnd,

            ///Specifies to make the data label none of the chart.
            DataLabelNone,

            ///Specifies to make the data label outside end of the chart.
            DataLabelOutsideEnd,

            ///Specifies to make the legends to bottom of the chart.
            LegendsBottom,

            ///Specifies to make the legends to left of the chart.
            LegendsLeft,

            ///Specifies to make the legends to none of the chart.
            LegendsNone,

            ///Specifies to make the legends to right of the chart.
            LegendsRight,

            ///Specifies to make the legends to top of the chart.
            LegendsTop,

            ///To set the primary horizontal of the chart.
            PrimaryHorizontal,

            ///To set the primary horizontal axis title of the chart.
            PrimaryHorizontalAxisTitle,

            ///To set the primary major horizontal of the chart.
            PrimaryMajorHorizontal,

            ///To set the primary major vertical of the chart.
            PrimaryMajorVertical,

            ///To set the primary minor horizontal of the chart.
            PrimaryMinorHorizontal,

            ///To set the primary minor vertical of the chart.
            PrimaryMinorVertical,

            ///To set the primary vertical of the chart.
            PrimaryVertical,

            ///To set the primary vertical axis title of the chart.
            PrimaryVerticalAxisTitle,

            ///Specifies to make the title to center of the chart.
            TitleCenter,

            ///Specifies to make the title to far of the chart.
            TitleFar,

            ///Specifies to make the title to near of the chart.
            TitleNear,

            ///Specifies to make the title to none of the chart.
            TitleNone
        }


        enum ContextMenuType {

            ///To specify cell Context Menu.
            Cell,

            ///To specify row header Context Menu.
            RowHeader,

            ///To specify column header Context Menu.
            ColumnHeader,

            ///To specify footer Context Menu.
            Footer
        }


        enum ExportType {

            ///Specifies to export the file in Excel format.
            Excel,

            ///Specifies to export the file in Csv format.
            Csv,

            ///Specifies to export the file in Pdf format.
            Pdf
        }

    }

    class PdfViewer extends ej.Widget {
        static fn: PdfViewer;
        constructor(element: JQuery | Element, options?: PdfViewer.Model);
        static Locale: any;
        model: PdfViewer.Model;
        defaults: PdfViewer.Model;

        /** Loads the document with the filename and displays it in PDF viewer.
         * @param {string} File name to be loaded
         * @returns {void}
         */
        load(fileName: string): void;

        /** Shows/hides the toolbar in the PDF viewer.
         * @param {boolean} shows/hides the toolbar
         * @returns {void}
         */
        showToolbar(show: boolean): void;

        /** Prints the PDF document.
         * @returns {void}
         */
        print(): void;

        /** Abort the printing function and restores the PDF viewer.
         * @returns {void}
         */
        abortPrint(): void;

        /** Aborts the download operation.
         * @returns {void}
         */
        abortDownload(): void;

        /** Shows/hides the print icon in the toolbar.
         * @param {boolean} shows/hides print button in the toolbar
         * @returns {void}
         */
        showPrintTools(show: boolean): void;

        /** Downloads the PDF document being loaded in the ejPdfViewer control.
         * @returns {void}
         */
        download(): void;

        /** Shows/hides the download tool in the toolbar.
         * @param {boolean} shows/hides download button in the toolbar
         * @returns {void}
         */
        showDownloadTool(show: boolean): void;

        /** Shows/hides the page navigation tools in the toolbar
         * @param {boolean} shows/hides navigation tools in the toolbar
         * @returns {void}
         */
        showPageNavigationTools(show: boolean): void;

        /** Shows/hides the text markup annotation tools in the toolbar.
         * @param {boolean} shows/hides text markup annotation tools in the toolbar
         * @returns {void}
         */
        showTextMarkupAnnotationTools(show: boolean): void;

        /** Shows/hides the signature tool in the toolbar.
         * @param {boolean} shows/hides signature tool in the toolbar
         * @returns {void}
         */
        showSignatureTool(show: boolean): void;

        /** Shows/hides the selection tool in the toolbar.
         * @param {boolean} shows/hides selection tool in the toolbar
         * @returns {void}
         */
        showSelectionTool(show: boolean): void;

        /** Navigates to the specific page in the PDF document. If the page is not available for the given pageNumber, PDF viewer retains the existing page in view.
         * @param {number} navigates to the page number in the PDF document
         * @returns {void}
         */
        goToPage(pageNumber: number): void;

        /** Navigates to the last page of the PDF document.
         * @returns {void}
         */
        goToLastPage(): void;

        /** Navigates to the first page of PDF document.
         * @returns {void}
         */
        goToFirstPage(): void;

        /** Navigates to the next page of the PDF document.
         * @returns {void}
         */
        goToNextPage(): void;

        /** Navigates to the previous page of the PDF document.
         * @returns {void}
         */
        goToPreviousPage(): void;

        /** Shows/hides the zoom tools in the toolbar.
         * @param {boolean} shows/hides zoom tools in the toolbar
         * @returns {void}
         */
        showMagnificationTools(show: boolean): void;

        /** Shows/hides the search tool in the toolbar.
         * @param {boolean} shows/hides search tool in the toolbar
         * @returns {void}
         */
        showTextSearchTool(show: boolean): void;

        /** Scales the page to fit the page in the container in the control.
         * @returns {void}
         */
        fitToPage(): void;

        /** Scales the page to fit the page width to the width of the container in the control.
         * @returns {void}
         */
        fitToWidth(): void;

        /** Magnifies the page to the next value in the zoom drop down list.
         * @returns {void}
         */
        zoomIn(): void;

        /** Shrinks the page to the previous value in the magnification in the drop down list.
         * @returns {void}
         */
        zoomOut(): void;

        /** Resize the viewer based on the parent element height.
         * @returns {void}
         */
        updateViewerSize(): void;

        /** Scales the page to the specified percentage ranging from 50 to 400. If the given zoomValue is less than 50 or greater than 400; the PDF viewer scales the page to 50 and 400
         * respectively.
         * @param {number} zoom value for scaling the pages in the PDF Viewer
         * @returns {void}
         */
        zoomTo(zoomValue: number): void;

        /** Searches the target text in the PDF document and highlights the occurrences in the pages.
         * @param {string} The text to be searched in the pages in the PDF viewer.
         * @returns {void}
         */
        searchText(targetText: string): void;

        /** Searches the next occurrence of the searched text from the current occurrence in the PDF viewer control.
         * @returns {void}
         */
        searchNext(): void;

        /** Searches the previous occurrence of the searched text from the current occurrence in the PDF viewer control.
         * @returns {void}
         */
        searchPrevious(): void;

        /** Set the JSON data that are formed for rendering the document content in PDF viewer.
         * @param {any} Set the JSON data that are formed for rendering the document content.
         * @returns {void}
         */
        setJSONData(jsonData: any): void;

        /** Searches the target text with its casing.
         * @param {boolean} Specifies whether the text search must be performed with match case or not.
         * @returns {void}
         */
        matchCase(enableMatchCase: boolean): void;

        /** Cancels the text search and removes the highlighted occurrences from the PDF viewer.
         * @returns {void}
         */
        cancelSearchText(): void;

        /** Adds annotations to the PDF document.
         * @param {ej.PdfViewer.AnnotationType} type of the annotation to be added in the PDF document.
         * @returns {void}
         */
        addAnnotation(annotationType: ej.PdfViewer.AnnotationType): void;

        /** Performs undo function for the included annotations in the PDF document.
         * @returns {void}
         */
        undo(): void;

        /** Performs redo function for the included annotations in the PDF document.
         * @returns {void}
         */
        redo(): void;

        /** Unloads the PDF document being displayed in the PDF viewer.
         * @returns {void}
         */
        unload(): void;
    }
    export namespace PdfViewer {

        export interface Model {

            /** Specifies the locale information of the PDF viewer.
             */
            locale?: string;

            /** Specifies the toolbar settings.
             */
            toolbarSettings?: ToolbarSettings;

            /** Specifies the name of the action method in the server.
             */
            serverActionSettings?: ServerActionSettings;

            /** Sets the PDF Web API service URL
             */
            serviceUrl?: string;

            /** Sets the PDF document path for initial loading.
             */
            documentPath?: string;

            /** Enables or disables the text markup annotations.
             */
            enableTextMarkupAnnotations?: boolean;

            /** Enables or disables the highlight annotation.
             */
            enableHighlightAnnotation?: boolean;

            /** Enables or disables the underline annotation.
             */
            enableUnderlineAnnotation?: boolean;

            /** Enables or disables the strikethrough annotation.
             */
            enableStrikethroughAnnotation?: boolean;

            /** Enables or disables the adding of handwritten signature over the PDF document.
             */
            enableSignature?: boolean;

            /** Gets/sets the settings of the strikethrough annotation.
             */
            strikethroughSettings?: StrikethroughSettings;

            /** Gets/sets the settings of the underline annotation.
             */
            underlineSettings?: UnderlineSettings;

            /** Gets/sets the settings of the highlight annotation.
             */
            highlightSettings?: HighlightSettings;

            /** Gets/sets the settings of the handwritten signature.
             */
            signatureSettings?: SignatureSettings;

            /** Enables/ disables the text selection context menu.
             */
            textSelectionContextMenu?: TextSelectionContextMenu;

            /** Enables/disables the annotation context menu.
             */
            annotationContextMenu?: AnnotationContextMenu;

            /** Specifies the type of the annotations.
             */
            annotationType?: ej.PdfViewer.AnnotationType|string;

            /** Gets the total number of pages in PDF document.
             */
            pageCount?: number;

            /** Gets the number of the page being displayed in the PDF viewer.
             */
            currentPageNumber?: number;

            /** Gets the current zoom percentage of the PDF document in viewer.
             */
            zoomPercentage?: number;

            /** Specifies the location of the supporting PDF service
             */
            pdfService?: ej.PdfViewer.PdfService|string;

            /** Specifies the viewer interaction mode.
             */
            interactionMode?: ej.PdfViewer.InteractionMode|string;

            /** Gets or sets the buffering mode of the PDF viewer control when allowClientBuffering is set to true.
             */
            bufferingMode?: ej.PdfViewer.BufferingMode|string;

            /** Specifies the open state of the hyperlink in the PDF document.
             */
            hyperlinkOpenState?: ej.PdfViewer.LinkTarget|string;

            /** Enables or disables the hyperlinks in PDF document.
             */
            enableHyperlink?: boolean;

            /** Enables or disables the text selection in PDF document.
             */
            enableTextSelection?: boolean;

            /** Enables or disables the responsiveness of the PDF viewer control during the window resize.
             */
            isResponsive?: boolean;

            /** Checks whether the PDF document is edited.
             */
            isDocumentEdited?: boolean;

            /** Enables or disables the buffering of the PDF pages in the client side.
             */
            allowClientBuffering?: boolean;

            /** Gets the name of the PDF document which loaded in the ejPdfViewer control for downloading.
             */
            fileName?: string;

            /** Triggers when the PDF document gets loaded and is ready to view in the Control.
             */
            documentLoad?(e: DocumentLoadEventArgs): void;

            /** Triggers when the PDF document gets unloaded from the PDF viewer.
             */
            documentUnload?(e: DocumentUnloadEventArgs): void;

            /** Triggers when there is change in current page number.
             */
            pageChange?(e: PageChangeEventArgs): void;

            /** Triggers when the AJAX request is failed.
             */
            ajaxRequestFailure?(e: AjaxRequestFailureEventArgs): void;

            /** Triggers when the ajax request is Success.
             */
            ajaxRequestSuccess?(e: AjaxRequestSuccessEventArgs): void;

            /** Triggers when there is change in the magnification value.
             */
            zoomChange?(e: ZoomChangeEventArgs): void;

            /** Triggers when hyperlink in the PDF Document is clicked
             */
            hyperlinkClick?(e: HyperlinkClickEventArgs): void;

            /** Triggers before the printing starts.
             */
            beforePrint?(e: BeforePrintEventArgs): void;

            /** Triggers after the printing is completed.
             */
            afterPrint?(e: AfterPrintEventArgs): void;

            /** Triggers when the mouse click is performed over the page of the PDF document.
             */
            pageClick?(e: PageClickEventArgs): void;

            /** Triggers when an annotation is added over the page of the PDF document.
             */
            annotationAdd?(e: AnnotationAddEventArgs): void;

            /** Triggers when an annotation is removed from the page of the PDF document.
             */
            annotationRemove?(e: AnnotationRemoveEventArgs): void;

            /** Triggers when the property of the annotation is changed in the page of the PDF document.
             */
            annotationPropertiesChange?(e: AnnotationPropertiesChangeEventArgs): void;

            /** Triggers when a handwritten signature is added over the page of the PDF document.
             */
            signatureAdd?(e: SignatureAddEventArgs): void;

            /** Triggers when a handwritten signature is removed from the page of the PDF document.
             */
            signatureDelete?(e: SignatureDeleteEventArgs): void;

            /** Triggers when a handwritten signature properties is changed in the PDF document.
             */
            signaturePropertiesChange?(e: SignaturePropertiesChangeEventArgs): void;

            /** Triggers when a handwritten signature is resized in the PDF document.
             */
            signatureResize?(e: SignatureResizeEventArgs): void;

            /** Triggers when the client buffering process starts.
             */
            bufferStart?(e: BufferStartEventArgs): void;

            /** Triggers when the client buffering process ends.
             */
            bufferEnd?(e: BufferEndEventArgs): void;

            /** Triggers when the download is started.
             */
            downloadStart?(e: DownloadStartEventArgs): void;

            /** Triggers when the download is completed or aborted.
             */
            downloadEnd?(e: DownloadEndEventArgs): void;

            /** Triggers when PDF viewer control is destroyed successfully.
             */
            destroy?(e: DestroyEventArgs): void;
        }

        export interface DocumentLoadEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the PDF document name displaying in the PDF viewer.
             */
            fileName?: string;
        }

        export interface DocumentUnloadEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface PageChangeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the current page number in view.
             */
            currentPageNumber?: number;
        }

        export interface AjaxRequestFailureEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the exception details.
             */
            message?: string;
        }

        export interface AjaxRequestSuccessEventArgs {

            /** true, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the response data on ajax success.
             */
            responseData?: string;
        }

        export interface ZoomChangeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the previous zoom percentage of the PDF viewer control
             */
            previousZoomPercentage?: number;

            /** Returns the current zoom percentage of the PDF viewer control
             */
            currentZoomPercentage?: number;
        }

        export interface HyperlinkClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the clicked hyperlink
             */
            hyperlink?: string;
        }

        export interface BeforePrintEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface AfterPrintEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface PageClickEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the current X position
             */
            offsetX?: number;

            /** Returns the current Y position
             */
            offsetY?: number;
        }

        export interface AnnotationAddEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the settings of the annotation added to the PDF document.
             */
            annotationSettings?: any;

            /** Returns the id of the annotation added in the page of the PDF document.
             */
            annotationID?: number;

            /** Returns the bounds of the annotation added in the page of the PDF document.
             */
            annotationBound?: any[];

            /** Returns the page number in which the annotation is added.
             */
            pageID?: number;

            /** Returns the type of the annotation added in the page of the PDF document.
             */
            annotationType?: string;
        }

        export interface AnnotationRemoveEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the id of the annotation removed from the page of the PDF document.
             */
            annotationID?: number;

            /** Returns the page number in which the annotation is removed.
             */
            pageID?: number;

            /** Returns the type of the annotation removed from the page of the PDF document.
             */
            annotationType?: string;
        }

        export interface AnnotationPropertiesChangeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the id of the annotation added in the page of the PDF document.
             */
            annotationID?: number;

            /** Returns the page number in which the annotation is added.
             */
            pageID?: number;

            /** Returns the type of the annotation added in the page of the PDF document.
             */
            annotationType?: string;

            /** Specifies that the color of the annotation is changed.
             */
            isColorChanged?: boolean;

            /** Specifies that the opacity of the annotation is changed.
             */
            isOpacityChanged?: boolean;
        }

        export interface SignatureAddEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the settings of the signature added to the PDF document.
             */
            signatureSettings?: any;

            /** Returns the bounds of the signature added in the page of the PDF document.
             */
            signatureBound?: any[];

            /** Returns the page number in which the signature is added.
             */
            pageNumber?: number;
        }

        export interface SignatureDeleteEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the page number in which the signature is removed.
             */
            pageNumber?: number;
        }

        export interface SignaturePropertiesChangeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the page number in which the signature properties is changed.
             */
            pageID?: number;

            /** Specifies that the color of the signature is changed.
             */
            isColorChange?: boolean;

            /** Specifies that the opacity of the signature is changed.
             */
            isOpacityChange?: boolean;

            /** Returns the previous color of the signature.
             */
            previousColor?: string;

            /** Returns the current color of the signature.
             */
            currentColor?: string;

            /** Returns the previous opacity of the signature.
             */
            previousOpacity?: number;

            /** Returns the current opacity of the signature.
             */
            currentOpacity?: number;
        }

        export interface SignatureResizeEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the settings of the signature added to the PDF document.
             */
            signatureSettings?: any;

            /** Returns the page number in which the signature is added.
             */
            pageNumber?: number;

            /** Returns the current bounds of the signature resized in the page of the PDF document.
             */
            signatureCurrentBound?: any[];

            /** Returns the previous bounds of the signature resized in the page of the PDF document.
             */
            signaturePreviousBound?: any[];
        }

        export interface BufferStartEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Specifies the state of the buffering
             */
            isBuffering?: boolean;
        }

        export interface BufferEndEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Specifies the state of the buffering
             */
            isBuffering?: boolean;
        }

        export interface DownloadStartEventArgs {

            /** true, if the event should be canceled; otherwise, false
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the name of the file being displayed in the PDF viewer.
             */
            fileName?: string;

            /** Returns the status about the download is started.
             */
            status?: string;
        }

        export interface DownloadEndEventArgs {

            /** true, if the event should be canceled; otherwise, false
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** Returns the name of the file being displayed in the PDF viewer.
             */
            fileName?: string;

            /** Returns the status about the download is completed or aborted.
             */
            status?: string;
        }

        export interface DestroyEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the PDF viewer model
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;
        }

        export interface ToolbarSettings {

            /** Shows or hides the tooltip of the toolbar items.
             */
            showToolTip?: boolean;

            /** Shows or hides the grouped items in the toolbar with the help of enum ej.PdfViewer.ToolbarItems
             */
            toolbarItem?: ej.PdfViewer.ToolbarItems|string;
        }

        export interface ServerActionSettings {

            /** Specifies the name of the action method used for loading the PDF document.
             */
            load?: string;

            /** Specifies the name of the action method used for uploading the PDF document to the PDF viewer control.
             */
            fileUpload?: string;

            /** Specifies the name of the action method used for printing the PDF document in the PDF viewer control.
             */
            print?: string;

            /** Specifies the name of the action method used for downloading the PDF document from the PDF viewer control.
             */
            download?: string;
        }

        export interface StrikethroughSettings {

            /** Gets/sets the color of the strikethrough annotation.
             */
            color?: string;

            /** Gets/sets the author of the strikethrough annotation.
             */
            author?: string;

            /** Gets/sets the opacity of the strikethrough annotation.
             */
            opacity?: number;

            /** Gets/sets the subject of the strikethrough annotation.
             */
            subject?: string;

            /** Gets/sets the modified Date of the strikethrough annotation.
             */
            modifiedDate?: string;

            /** Gets/sets the locked property of the strikethrough annotation.
             */
            isLocked?: boolean;
        }

        export interface UnderlineSettings {

            /** Gets/sets the color of the underline annotation.
             */
            color?: string;

            /** Gets/sets the author of the underline annotation.
             */
            author?: string;

            /** Gets/sets the opacity of the underline annotation.
             */
            opacity?: number;

            /** Gets/sets the subject of the underline annotation.
             */
            subject?: string;

            /** Gets/sets the modified Date of the underline annotation.
             */
            modifiedDate?: string;

            /** Gets/sets the locked property of the underline annotation.
             */
            isLocked?: boolean;
        }

        export interface HighlightSettings {

            /** Gets/sets the color of the highlight  annotation.
             */
            color?: string;

            /** Gets/sets the author of the highlight annotation.
             */
            author?: string;

            /** Gets/sets the opacity of the highlight annotation.
             */
            opacity?: number;

            /** Gets/sets the subject of the highlight annotation.
             */
            subject?: string;

            /** Gets/sets the modified Date of the highlight annotation.
             */
            modifiedDate?: string;

            /** Gets/sets the locked property of the highlight annotation.
             */
            isLocked?: boolean;
        }

        export interface SignatureSettings {

            /** Gets/sets the color of the handwritten signature.
             */
            color?: string;

            /** Gets/sets the opacity of the handwritten signature.
             */
            opacity?: number;
        }

        export interface TextSelectionContextMenu {

            /** Enables/ disables the text selection context menu.
             */
            isEnable?: boolean;

            /** Enables/disables the copy menu in the text selection context menu.
             */
            isCopyEnable?: boolean;

            /** Enables/disables the search menu in the text selection context menu.
             */
            isSearchEnable?: boolean;

            /** Enables/disables the highlight annotation menu in the text selection context menu.
             */
            isHighlightEnable?: boolean;

            /** Enables/disables the strikeout annotation menu in the text selection context menu.
             */
            isStrikeoutEnable?: boolean;
        }

        export interface AnnotationContextMenu {

            /** Enables/disables the annotation context menu.
             */
            isEnable?: boolean;

            /** Enables/disables the popup menu in the annotation context menu.
             */
            isPopupEnable?: boolean;

            /** Enables/disables the delete menu in the annotation context menu.
             */
            isDeleteEnable?: boolean;

            /** Enables/disables the properties menu in the annotation context menu.
             */
            isPropertiesEnable?: boolean;
        }

        enum ToolbarItems {

            ///Shows only magnification tools in the toolbar.
            MagnificationTools,

            ///Shows only page navigation tools in the toolbar.
            PageNavigationTools,

            ///Shows only print tool in the toolbar.
            PrintTools,

            ///Shows only download tool in the toolbar.
            DownloadTool,

            ///Shows only text search tool in the toolbar.
            TextSearchTool,

            ///Shows only text markup annotation tools in the toolbar.
            TextMarkupAnnotationTools,

            ///Shows only signature tool in the toolbar.
            SignatureTool,

            ///Shows only selection tool in the toolbar.
            SelectionTool,

            ///Shows all the toolbar items.
            All
        }


        enum AnnotationType {

            ///Specifies the underline annotation.
            Underline,

            ///Specifies the strikethrough annotation.
            Strikethrough,

            ///Specifies the highlight annotation.
            Highlight
        }


        enum PdfService {

            ///Denotes that the service is located in the local project
            Local,

            ///Denotes that the service is hosted in the remote server
            Remote
        }


        enum InteractionMode {

            ///To set the text selection mode to the PDF viewer control.
            TextSelection,

            ///To set the panning mode to the PDF viewer control.
            Pan
        }


        enum BufferingMode {

            ///Retrieves details to render first two pages in a request and rest of the pages in other request.
            Default,

            ///Retrieves complete details to render all the pages in a single request.
            Complete
        }


        enum LinkTarget {

            ///Opens the hyperlink in the same tab of the browser.
            Default,

            ///Opens the hyperlink in a new tab of the browser.
            NewTab,

            ///Opens the hyperlink in a new window of the browser.
            NewWindow
        }

    }

    class SpellCheck extends ej.Widget {
        static fn: SpellCheck;
        constructor(element: JQuery | Element, options?: SpellCheck.Model);
        static Locale: any;
        model: SpellCheck.Model;
        defaults: SpellCheck.Model;

        /** Open the dialog to correct the spelling of the target content.
         * @returns {void}
         */
        showInDialog(): void;

        /** Highlighting the error word in the target area itself and correct the spelling using the context menu.
         * @returns {void}
         */
        validate(): void;

        /** To get the error word highlighted string by passing the given input sentence.
         * @param {string} Content to be spell check
         * @param {string} Class name that contains style value to highlight the error word
         * @returns {any}
         */
        spellCheck(targetSentence: string, misspellWordCss: string): any;

        /** To ignore all the error word occurrences from the given input sentence.
         * @param {string} Error word to ignore from the target content
         * @param {string} Content to perform the ignore all operation
         * @returns {any}
         */
        ignoreAll(word: string, targetSentence: string): any;

        /** To ignore the error word once from the given input sentence.
         * @param {string} Error word to ignore from the target content
         * @param {string} Content to perform the ignore operation
         * @param {number} Index of the error word present in the target content
         * @returns {any}
         */
        ignore(word: string, targetSentence: string, index: number): any;

        /** To change the error word once from the given input sentence.
         * @param {string} Error word to change from the target content
         * @param {string} Content to perform the change operation
         * @param {string} Word to replace with the error word
         * @param {number} Index of the error word present in the target content
         * @returns {any}
         */
        change(word: string, targetSentence: string, changeWord: string, index: number): any;

        /** To change all the error word occurrences from the given input sentence.
         * @param {string} Error word to change from the target content
         * @param {string} Content to perform the change all operation
         * @param {string} Word to replace with the error word
         * @returns {any}
         */
        changeAll(word: string, targetSentence: string, changeWord: string): any;

        /** To add the words into the custom dictionary.
         * @param {string} Word to add into the dictionary file
         * @returns {any}
         */
        addToDictionary(customWord: string): any;

        /** Retrieves the possible suggestion words for the error word passed as an argument.
         * @param {string} Error word to get the suggestions
         * @returns {any}
         */
        getSuggestionWords(errorWord: string): any;
    }
    export namespace SpellCheck {

        export interface Model {

            /** It includes the service method path to find the error words and its suggestions also adding the custom word into the custom dictionary.
             */
            dictionarySettings?: DictionarySettings;

            /** To display the error word in a customized style.
             * @Default {e-errorword}
             */
            misspellWordCss?: string;

            /** Sets the specific culture to the SpellCheck.
             * @Default {en-US}
             */
            locale?: string;

            /** To set the maximum suggestion display count.
             * @Default {6}
             */
            maxSuggestionCount?: number;

            /** To ignore the words from the error word consideration.
             * @Default {[]}
             */
            ignoreWords?: any[];

            /** Holds all options related to the context menu settings of SpellCheck.
             */
            contextMenuSettings?: ContextMenuSettings;

            /** It helps to ignore the uppercase, mixed case words, alpha numeric words, file path and email addresses based on the property values.
             */
            ignoreSettings?: IgnoreSettings;

            /** When set to true, allows the spellcheck to render based upon screen size.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Gets or sets a value that indicates whether to enable the spellcheck operation on Enter/Space key-press.
             * @Default {false}
             */
            enableValidateOnType?: boolean;

            /** It allows to spell check the multiple target HTML element's texts and correct its error words.
             * @Default {null}
             */
            controlsToValidate?: string;

            /** When set to true, allows sending Asynchronous ajax request for checking the spelling errors.
             * @Default {true}
             */
            enableAsync?: boolean;

            /** To set either â€˜Postâ€™ or â€˜Getâ€™ for ajax request type which invokes when validate, get suggestion and dictionary action.Possible values are â€˜POSTâ€™ or â€˜GETâ€™
             * @Default {GET}
             */
            ajaxRequestType?: string;

            /** Sets the data type for the ajax call used within the SpellCheck control, denoting the type of data that are expected to be retrieved from the server. The applicable values are
             * json and jsonp.
             * @Default {jsonp}
             */
            ajaxDataType?: string;

            /** Triggers on the success of AJAX call request.
             */
            actionSuccess?(e: ActionSuccessEventArgs): void;

            /** Triggers on the AJAX call request beginning.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggers when the AJAX call request failure.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Triggers when the dialog mode spell check starting.
             */
            start?(e: StartEventArgs): void;

            /** Triggers when the spell check operations completed through dialog mode.
             */
            complete?(e: CompleteEventArgs): void;

            /** Triggers before context menu opening.
             */
            contextOpen?(e: ContextOpenEventArgs): void;

            /** Triggers when the context menu item clicked.
             */
            contextClick?(e: ContextClickEventArgs): void;

            /** Triggers before the spell check dialog opens.
             */
            dialogBeforeOpen?(e: DialogBeforeOpenEventArgs): void;

            /** Triggers after the spell check dialog opens.
             */
            dialogOpen?(e: DialogOpenEventArgs): void;

            /** Triggers when the spell check dialog closed.
             */
            dialogClose?(e: DialogCloseEventArgs): void;

            /** Triggers when the spell check control performing the spell check operations such as ignore, ignoreAll, change, changeAll and addToDictionary.
             */
            validating?(e: ValidatingEventArgs): void;

            /** Triggers before loading the target HTML element text into the dialog sentence area.
             */
            targetUpdating?(e: TargetUpdatingEventArgs): void;
        }

        export interface ActionSuccessEventArgs {

            /** Returns the error word highlighted string.
             */
            resultHTML?: string;

            /** Returns the error word details of the given input.
             */
            errorWordDetails?: any;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ActionBeginEventArgs {

            /** Returns the input string.
             */
            targetSentence?: string;

            /** Returns the misspellWordCss class name.
             */
            misspellWordCss?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ActionFailureEventArgs {

            /** Returns AJAX request failure error message.
             */
            errorMessage?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface StartEventArgs {

            /** Returns the input string.
             */
            targetSentence?: string;

            /** Returns the error words details.
             */
            errorWords?: any;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface CompleteEventArgs {

            /** Returns the error word highlighted string.
             */
            resultHTML?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ContextOpenEventArgs {

            /** Returns the selected error word.
             */
            selectedErrorWord?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ContextClickEventArgs {

            /** Returns the selected error word.
             */
            selectedValue?: string;

            /** Returns the selected option in the context menu.
             */
            selectedOption?: string;

            /** Returns the input string.
             */
            targetContent?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DialogBeforeOpenEventArgs {

            /** Returns the spell check window details.
             */
            spellCheckDialog?: any;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DialogOpenEventArgs {

            /** Returns the target input.
             */
            targetText?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DialogCloseEventArgs {

            /** Returns the error corrected string.
             */
            updatedText?: string;

            /** Returns the request type value.
             */
            requestType?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ValidatingEventArgs {

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the error word to ignore.
             */
            ignoreWord?: string;

            /** Returns the target content.
             */
            targetContent?: string;

            /** Returns the index of an error word.
             */
            index?: number;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the validating request type.
             */
            requestType?: string;

            /** Returns the name of the event.
             */
            type?: string;

            /** Returns the error word to change.
             */
            changeableWord?: string;

            /** Returns the change word to replace the error word.
             */
            changeWord?: string;

            /** Returns the custom word to add into dictionary file.
             */
            customWord?: string;
        }

        export interface TargetUpdatingEventArgs {

            /** Returns the previous target element value.
             */
            previousElement?: any;

            /** Returns the current target element value.
             */
            currentElement?: any;

            /** Returns the target html value.
             */
            targetHtml?: string;

            /** Returns the cancel option value.
             */
            cancel?: boolean;

            /** Returns the SpellCheck model.
             */
            model?: ej.SpellCheck.Model;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface DictionarySettings {

            /** The dictionaryUrl option accepts string, which is the method path to find the error words and get the suggestions to correct the errors.
             */
            dictionaryUrl?: string;

            /** The customDictionaryUrl option accepts string, which is the method path to add the error word into the custom dictionary.
             */
            customDictionaryUrl?: string;
        }

        export interface ContextMenuSettings {

            /** When set to true, enables the context menu options available for the SpellCheck.
             * @Default {true}
             */
            enable?: boolean;

            /** Contains all the default context menu options that are applicable for SpellCheck. It also supports adding custom menu items. All the SpellCheck related context menu items are
             * grouped under this menu collection.
             * @Default {{% highlight javascript %}[{ id: IgnoreAll, text: Ignore All },{ id: AddToDictionary, text: Add To Dictionary }]{% endhighlight %}}
             */
            menuItems?: any[];
        }

        export interface IgnoreSettings {

            /** When set to true, ignoring the alphanumeric words from the error word consideration.
             * @Default {true}
             */
            ignoreAlphaNumericWords?: string;

            /** When set to true, ignoring the Email address from the error word consideration.
             * @Default {true}
             */
            ignoreEmailAddress?: boolean;

            /** When set to true, ignoring the MixedCase words from the error word consideration.
             * @Default {true}
             */
            ignoreMixedCaseWords?: boolean;

            /** When set to true, ignoring the UpperCase words from the error word consideration.
             * @Default {true}
             */
            ignoreUpperCase?: boolean;

            /** When set to true, ignoring the Url from the error word consideration.
             * @Default {true}
             */
            ignoreUrl?: boolean;

            /** When set to true, ignoring the file address path from the error word consideration.
             * @Default {true}
             */
            ignoreFileNames?: boolean;
        }
    }

    class DocumentEditor extends ej.Widget {
        static fn: DocumentEditor;
        constructor(element: JQuery | Element, options?: DocumentEditor.Model);
        static Locale: any;
        model: DocumentEditor.Model;
        defaults: DocumentEditor.Model;

        /** Loads the document from specified path using web API provided by importUrl.
         * @param {string} Specifies the file path.
         * @returns {void}
         */
        load(path: string): void;

        /** Gets the page number of current selection in the document.
         * @returns {number}
         */
        getCurrentPageNumber(): number;

        /** Gets the total number of pages in the document.
         * @returns {number}
         */
        getPageCount(): number;

        /** Gets the text of current selection in the document.
         * @returns {string}
         */
        getSelectedText(): string;

        /** Gets the current zoom factor value of the document editor.
         * @returns {number}
         */
        getZoomFactor(): number;

        /** Scales the document editor with the specified zoom factor. The range of zoom factor should be 0.10 to 5.00 (10 - 500 %).
         * @param {number} Specifies the factor for zooming.
         * @returns {void}
         */
        setZoomFactor(factor: number): void;

        /** Prints the document content as page by page.
         * @returns {void}
         */
        print(): void;

        /** Finds the first occurrence of specified text from current selection and  highlights the result. If the document end is reached, find operation will occur from the document start
         * position.
         * @param {string} Specifies the text to search in a document.
         * @returns {void}
         */
        find(text: string): void;
    }
    export namespace DocumentEditor {

        export interface Model {

            /** Gets or sets an object that indicates initialization of importing and exporting documents in document editor.
             */
            importExportSettings?: ImportExportSettings;

            /** Triggers when the document changes.
             */
            onDocumentChange?(e: OnDocumentChangeEventArgs): void;

            /** Triggers when the selection changes.
             */
            onSelectionChange?(e: OnSelectionChangeEventArgs): void;

            /** Triggers when the zoom factor changes.
             */
            onZoomFactorChange?(e: OnZoomFactorChangeEventArgs): void;

            /** Triggers when the hyperlink is clicked.
             */
            onRequestNavigate?(e: OnRequestNavigateEventArgs): void;
        }

        export interface OnDocumentChangeEventArgs {

            /** True, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the document editor model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface OnSelectionChangeEventArgs {

            /** True, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the document editor model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface OnZoomFactorChangeEventArgs {

            /** True, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the document editor model.
             */
            model?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface OnRequestNavigateEventArgs {

            /** true, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the document editor model.
             */
            model?: any;

            /** Returns the link type and navigation link.
             */
            hyperlink?: any;

            /** Returns the name of the event.
             */
            type?: string;
        }

        export interface ImportExportSettings {

            /** Gets or sets URL of Web API that should be used to parse the document while loading.
             */
            importUrl?: string;
        }
    }

    class ComboBox extends ej.Widget {
        static fn: ComboBox;
        constructor(element: JQuery | Element, options?: ComboBox.Model);
        static Locale: any;
        model: ComboBox.Model;
        defaults: ComboBox.Model;

        /** Adds a new item to the popup list. By default, new item appends to the list as the last item, but you can insert based on the index parameter.
         * @returns {void}
         */
        addItem(): void;

        /** Sets the focus to the component for interaction.
         * @returns {void}
         */
        focusIn(): void;

        /** Moves the focus from the component if the component is already focused.
         * @returns {void}
         */
        focusOut(): void;

        /** Gets the data object that matches the given value.
         * @returns {any}
         */
        getDataByValue(): any;

        /** Gets all the list items bound on this component.
         * @returns {Element[]}
         */
        getItems(): Element[];

        /** Hides the popup if it is in open state.
         * @returns {void}
         */
        hidePopup(): void;

        /** Opens the popup that displays the list of items.
         * @returns {void}
         */
        showPopup(): void;
    }
    export namespace ComboBox {

        export interface Model {

            /** Accepts the template and assigns it to the popup list content of the component when the data fetch request from the remote server fails.
             * @Default {The Request Failed}
             */
            actionFailureTemplate?: string;

            /** Specifies whether the component allows user defined value which does not exist in data source.
             * @Default {true}
             */
            allowCustom?: boolean;

            /** When allowFiltering is set to true, show the filter bar (search box) of the component. The filter action retrieves matched items through the filtering event based on the
             * characters typed in the search TextBox. If no match is found, the value of the noRecordsTemplate property will be displayed.
             * @Default {false}
             */
            allowFiltering?: boolean;

            /** Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.
             * @Default {false}
             */
            autofill?: boolean;

            /** Sets CSS classes to the root element of the component that helps customize the UI styles.
             * @Default {null}
             */
            cssClass?: string;

            /** Accepts the list items either through local or remote service and binds it to the component. It can be an array of JSON objects or an instance of DataManager.
             * @Default {[]}
             */
            dataSource?: any|any[];

            /** When set to true, enables RTL mode of the component that displays the content in the right-to-left direction.
             * @Default {false}
             */
            enableRtl?: boolean;

            /** Specifies a value that indicates whether the component is enabled or not.
             * @Default {true}
             */
            enabled?: boolean;

            /** The fields property maps the columns of the data table and binds the data to the component.
             */
            fields?: Fields;

            /** Accepts the template design and assigns it to the footer container of the popup list.
             * @Default {null}
             */
            footerTemplate?: string;

            /** Accepts the template design and assigns it to the group headers present in the popup list.
             * @Default {null}
             */
            groupTemplate?: string;

            /** Accepts the template design and assigns it to the header container of the popup list.
             * @Default {null}
             */
            headerTemplate?: string;

            /** Allows additional HTML attributes such as title, name, etc., and accepts n number of attributes in a key-value pair format.
             * @Default {{}}
             */
            htmlAttributes?: any;

            /** Gets or sets the index of the selected item in the component.
             * @Default {null}
             */
            index?: number;

            /** Accepts the template design and assigns it to each list item present in the popup.
             * @Default {null}
             */
            itemTemplate?: string;

            /** Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
             * @Default {en-US}
             */
            locale?: string;

            /** Accepts the template design and assigns it to popup list of component when no data is available on the component.
             * @Default {No Records Found}
             */
            noRecordsTemplate?: string;

            /** Accepts the value to be displayed as a watermark text on the component input.
             * @Default {null}
             */
            placeholder?: string;

            /** Specifies the height of the popup list.
             * @Default {300px}
             */
            popupHeight?: string|number;

            /** Specifies the width of the popup list. By default, the popup width sets based on the width of the component.
             * @Default {100%}
             */
            popupWidth?: string|number;

            /** The query to retrieve the data from the data source.
             * @Default {null}
             */
            query?: ej.Query;

            /** When set to true, the user interactions on the component are disabled.
             * @Default {false}
             */
            readonly?: boolean;

            /** Specifies whether to show or hide the clear button. When the clear button is clicked, value, text, and index properties are reset to null.
             * @Default {true}
             */
            showClearButton?: boolean;

            /** Specifies the sortOrder to sort the data source. The available type of sort orders are
             * @Default {ej.SortOrder.None}
             */
            sortOrder?: ej.ComboBox.SortOrder|string;

            /** Gets or sets the display text of the selected item in the component.
             * @Default {null}
             */
            text?: string;

            /** Gets or sets the value of the selected item in the component.
             * @Default {null}
             */
            value?: number|string;

            /** Specifies the width of the component. By default, the component width sets based on the width of its parent container. You can also set the width in pixel values.
             * @Default {100%}
             */
            width?: number|string;

            /** Triggers before fetching data from the remote server.
             */
            actionBegin?(e: ActionBeginEventArgs): void;

            /** Triggers after data is fetched successfully from the remote server.
             */
            actionComplete?(e: ActionCompleteEventArgs): void;

            /** Triggers when the data fetch request from the remote server fails.
             */
            actionFailure?(e: ActionFailureEventArgs): void;

            /** Triggers when an item in a popup is selected or when the model value is changed.
             */
            change?(e: ChangeEventArgs): void;

            /** Triggers when the popup is closed.
             */
            close?(e: CloseEventArgs): void;

            /** Triggers when ComboBox widget is created.
             */
            create?(e: CreateEventArgs): void;

            /** Triggers on set a custom value to this component.
             */
            customValueSpecifier?(e: CustomValueSpecifierEventArgs): void;

            /** Triggers on typing a character in the component.
             */
            filtering?(e: FilteringEventArgs): void;

            /** Triggers when the component is focused.
             */
            focus?(e: FocusEventArgs): void;

            /** Triggers after the suggestion list is opened.
             */
            open?(e: OpenEventArgs): void;

            /** Triggers when an item in the popup is selected.
             */
            select?(e: SelectEventArgs): void;
        }

        export interface ActionBeginEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the ComboBox model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionCompleteEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the Autocomplete model
             */
            model?: any;

            /** Returns the query for data retrieval from the Database
             */
            e?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ActionFailureEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** Returns the error message
             */
            e?: any;

            /** returns the Autocomplete model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ChangeEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the combobox textbox.
             */
            value?: string|number;

            /** Li element of the selected item.
             */
            Item?: any;

            /** Event argument.
             */
            e?: any;

            /** value of the interaction
             */
            isInteracted?: boolean;
        }

        export interface CloseEventArgs {

            /** Element of the combobox popup list
             */
            popup?: any;
        }

        export interface CreateEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface CustomValueSpecifierEventArgs {

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** text of the combobox.
             */
            text?: string;
        }

        export interface FilteringEventArgs {

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** text of the combobox.
             */
            text?: string;

            /** Function used to update the filtering value.
             */
            updateData?: any;
        }

        export interface FocusEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;
        }

        export interface OpenEventArgs {

            /** Element of the combobox popup list
             */
            popup?: any;
        }

        export interface SelectEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the combobox model object.
             */
            model?: ej.ComboBox.Model;

            /** Name of the event.
             */
            type?: string;

            /** Value of the combobox textbox.
             */
            value?: string|number;

            /** Text of the selected item.
             */
            text?: string;

            /** Data object of the selected item.
             */
            itemData?: ej.ComboBox.Model;

            /** Li element of the selected item.
             */
            Item?: any;

            /** Event argument.
             */
            e?: any;

            /** value of the interaction
             */
            isInteracted?: boolean;
        }

        export interface Fields {

            /** Used to group the popup list items.
             * @Default {null}
             */
            groupBy?: string;

            /** Defines class for the item.
             * @Default {null}
             */
            iconCss?: string;

            /** Defines the specific field name which contains unique values for the list items.
             * @Default {null}
             */
            value?: string;

            /** Defines the specific field name in the data source to load the popup list with data.
             * @Default {null}
             */
            text?: string;
        }

        enum SortOrder {

            ///The data source is not sorting.
            None,

            ///The data source is sorting with ascending order.
            Ascending,

            ///The data source is sorting with descending order.
            Descending
        }

    }

    class ReportDesigner extends ej.Widget {
        static fn: ReportDesigner;
        constructor(element: JQuery | Element, options?: ReportDesigner.Model);
        static Locale: any;
        model: ReportDesigner.Model;
        defaults: ReportDesigner.Model;

        /** Add a dataset to the report at runtime.
         * @param {any} a JSON to define a connection properties for dataset.
         * @returns {void}
         */
        addDataSet(dataset: any): void;

        /** Add a datasource to the report at runtime.
         * @param {any} a JSON to define a connection properties for datasource.
         * @returns {void}
         */
        addDataSource(datasource: any): void;

        /** Add a report item to the report at runtime.
         * @param {any} JSON for the new report item to be added
         * @returns {void}
         */
        addItem(item: any): void;

        /** Visually move the selected report item over its closest intersected report items.
         * @returns {void}
         */
        bringForward(): void;

        /** Visually move the selected report item over all other intersected report items.
         * @returns {void}
         */
        bringToFront(): void;

        /** Determines whether a copy operation is possible.
         * @returns {boolean}
         */
        canCopy(): boolean;

        /** Determines whether a cut operation is possible.
         * @returns {boolean}
         */
        canCut(): boolean;

        /** Determines whether a paste operation is possible.
         * @returns {boolean}
         */
        canPaste(): boolean;

        /** Returns the boolean value indicating whether the user can redo the previous action in the report.
         * @returns {boolean}
         */
        canRedo(): boolean;

        /** Determines whether a delete operation is possible.
         * @returns {boolean}
         */
        canRemove(): boolean;

        /** Returns a boolean value indicating whether the user can undo the previous action in the report.
         * @returns {boolean}
         */
        canUndo(): boolean;

        /** Clone the existing dataset in the report at runtime.
         * @param {string} Name of the existing dataset.
         * @returns {void}
         */
        cloneDataSet(name: string): void;

        /** Clone the existing datasource in the report at runtime.
         * @param {string} Name of the existing datasource.
         * @returns {void}
         */
        cloneDataSource(name: string): void;

        /** Copies the selected report item from design panel to the Report Designer internal clipboard.
         * @returns {void}
         */
        copy(): void;

        /** Cuts the selected report item from design panel to the Report Designer internal clipboard.
         * @returns {void}
         */
        cut(): void;

        /** Returns the boolean value that specifies whether the report has changes or not.
         * @returns {boolean}
         */
        hasReportChanges(): boolean;

        /** Returns the boolean value that specifies whether the currently processing report is a new report or not.
         * @returns {boolean}
         */
        isNewReport(): boolean;

        /** Returns the boolean value that specifies whether the currently processing report is a new server report or not.
         * @returns {boolean}
         */
        isNewServerReport(): boolean;

        /** Returns the boolean value that specifies whether the currently processing report is obtained from the server or local.
         * @returns {boolean}
         */
        isServerReport(): boolean;

        /** To create a new report.
         * @returns {void}
         */
        newReport(): void;

        /** To create a new report in the server.
         * @returns {void}
         */
        newServerReport(): void;

        /** This method opens the report from the server.
         * @returns {void}
         */
        openReport(): void;

        /** This method opens the report using raw report data.
         * @returns {void}
         */
        openReportDefinition(): void;

        /** Opens the client browse dialog to browse the report.
         * @returns {void}
         */
        openReportFromDevice(): void;

        /** Opens the report designer browse dialog to browse the available reports in the reportserver.
         * @returns {void}
         */
        openServerReportDialog(): void;

        /** Pastes the selected report item from the Report Designer internal clipboard to design panel.
         * @returns {void}
         */
        paste(): void;

        /** Reverses the action of the last Undo command.
         * @returns {void}
         */
        redo(): void;

        /** Deletes the selected report item from the report.
         * @returns {void}
         */
        remove(): void;

        /** Remove a dataset from the report at runtime.
         * @param {string} Name of the dataset.
         * @returns {void}
         */
        removeDataSet(dataset: string): void;

        /** Remove a datasource from the report at runtime.
         * @param {string} Name of the datasource.
         * @returns {void}
         */
        removeDatasource(datasource: string): void;

        /** Remove the given report item from the report.
         * @param {string} Name of the report item to be removed from report
         * @returns {void}
         */
        removeItem(itemName: string): void;

        /** This method saves the report into the server.
         * @returns {void}
         */
        saveReport(): void;

        /** This method returns the report in JSON or XML format.
         * @returns {void}
         */
        saveReportDefinition(): void;

        /** Opens the report designer browse dialog to save the report into server.
         * @returns {void}
         */
        saveServerReportDialog(): void;

        /** To download the designed report.
         * @returns {void}
         */
        saveToDevice(): void;

        /** Update the selection to report items at runtime.
         * @param {any[]} Name of the report items as string array.
         * @returns {void}
         */
        selectItems(itemNames: any[]): void;

        /** Visually move the selected report item behind its closest intersected report item.
         * @returns {void}
         */
        sendBackward(): void;

        /** Visually move the selected report item behind all other intersected report items.
         * @returns {void}
         */
        sendToBack(): void;

        /** Performs switch action from viewer to designer at runtime.
         * @returns {void}
         */
        showDesign(): void;

        /** To open the new report dialog.
         * @returns {void}
         */
        showNewReportDialog(): void;

        /** To open the server browse dialog.
         * @returns {void}
         */
        showOpenSaveReportDialog(): void;

        /** Performs switch action from designer to viewer at runtime.
         * @returns {void}
         */
        showPreview(): void;

        /** Reverses the last action that was performed.
         * @returns {void}
         */
        undo(): void;

        /** Update the dataset in the report at runtime.
         * @param {string} Name of the existing dataset.
         * @param {any} a JSON to define a connection properties for dataset.
         * @returns {void}
         */
        updateDataset(datasetName: string, dataset: any): void;

        /** Update the datasource in the report at runtime.
         * @param {string} Name of the existing datasource.
         * @param {any} a JSON to define a connection properties for datasource.
         * @returns {void}
         */
        updateDatasource(datasourceName: string, datasource: any): void;
    }
    export namespace ReportDesigner {

        export interface Model {

            /** Shows or hides the items of configuration pane in ReportDesigner control.
             */
            configurePaneSettings?: ConfigurePaneSettings;

            /** Specifies the locale for report designer.
             * @Default {en-US}
             */
            locale?: string;

            /** Shows or hides the create, edit, and delete options in data source and dataset panels.
             * @Default {ej.ReportDesigner.Permission.All}
             */
            permissionSettings?: PermissionSettings;

            /** Gets or sets the list of custom data extension items.
             * @Default {[]}
             */
            reportDataExtensions?: ReportDataExtension[];

            /** Gets or sets the list of custom report items.
             * @Default {[]}
             */
            reportItemExtensions?: ReportItemExtension[];

            /** Gets or sets the report path of server.
             * @Default {null}
             */
            reportPath?: string;

            /** Gets or sets the report type.
             * @Default {ej.ReportDesigner.ReportType.RDL}
             */
            reportType?: string;

            /** Gets or sets the reports server URL.
             * @Default {null}
             */
            reportServerUrl?: string;

            /** Gets or sets the serviceAuthorizationToken to access the Report Server API services.
             * @Default {empty}
             */
            serviceAuthorizationToken?: string;

            /** Gets or sets the URL of the  WebAPI service; it will be used for processing the report.
             * @Default {null}
             */
            serviceUrl?: string;

            /** Gets or sets the tenant name of the user groups; it will be used when integrating report designer with server.
             * @Default {null}
             */
            tenantName?: string;

            /** Defines the settings of the ReportDesigner toolbar.
             */
            toolbarSettings?: ToolbarSettings;

            /** This event will be triggered before AJAX loads.
             */
            ajaxBeforeLoad?(e: AjaxBeforeLoadEventArgs): void;

            /** This event will be triggered when AJAX result is failed.
             */
            ajaxError?(e: AjaxErrorEventArgs): void;

            /** This event will be triggered when AJAX result is succeeded.
             */
            ajaxSuccess?(e: AjaxSuccessEventArgs): void;

            /** This event will be triggered when the Report Designer widget is created.
             */
            create?(e: CreateEventArgs): void;

            /** This event will be triggered when the Report Designer widget is destroyed.
             */
            destroy?(e: DestroyEventArgs): void;

            /** This event will be triggered while initiating new data click action. You can suppress the new data creation panel and perform custom actions.
             */
            newDataClick?(e: NewDataClickEventArgs): void;

            /** This event will be triggered while clicking open menu items.
             */
            openReportClick?(e: OpenReportClickEventArgs): void;

            /** This event will be triggered while previewing the report in RDLC mode. It can be used to suppress the preview data dialog in RDLC mode.
             */
            previewReport?(e: PreviewReportEventArgs): void;

            /** This event will be triggered when the report is modified.
             */
            reportModified?(e: ReportModifiedEventArgs): void;

            /** This event will be triggered when the report is opened.
             */
            reportOpened?(e: ReportOpenedEventArgs): void;

            /** This event will be triggered when the report is saved.
             */
            reportSaved?(e: ReportSavedEventArgs): void;

            /** This event will be triggered when the save menu items are clicked.
             */
            saveReportClick?(e: SaveReportClickEventArgs): void;

            /** This event will be triggered while clicking the toolbar items.
             */
            toolbarClick?(e: ToolbarClickEventArgs): void;

            /** This event will be triggered on rendering the Report Designer toolbar.
             */
            toolbarRendering?(e: ToolbarRenderingEventArgs): void;
        }

        export interface AjaxBeforeLoadEventArgs {

            /** AJAX headers, we can pass any custom header through this property.
             */
            headers?: any[];

            /** To pass the custom data while AJAX post back.
             */
            data?: any;

            /** Token of report designer.
             */
            reportDesignerToken?: string;

            /** Token of ReportingService.
             */
            serviceAuthorizationToken?: string;

            /** Action type of AJAX call back.
             */
            actionType?: string;
        }

        export interface AjaxErrorEventArgs {
        }

        export interface AjaxSuccessEventArgs {
        }

        export interface CreateEventArgs {
        }

        export interface DestroyEventArgs {
        }

        export interface NewDataClickEventArgs {
        }

        export interface OpenReportClickEventArgs {

            /** DOM of the clicked target.
             */
            target?: JQuery;

            /** Name of selected item.
             */
            select?: string;
        }

        export interface PreviewReportEventArgs {

            /** Contains the instance of Report Viewer component.
             */
            reportViewer?: any;

            /** Specifies whether to show or hide preview data dialog.
             */
            cancelDataInputDialog?: boolean;

            /** Contains the required data to load the report.
             */
            dataSets?: any[];
        }

        export interface ReportModifiedEventArgs {

            /** Specifies whether the report is modified or not.
             */
            isModified?: boolean;

            /** Name of Opened Report.
             */
            reportName?: string;
        }

        export interface ReportOpenedEventArgs {

            /** Specifies whether report opened from device or server.
             */
            isServerReport?: boolean;

            /** Name of Opened Report.
             */
            reportName?: string;
        }

        export interface ReportSavedEventArgs {

            /** Specifies whether report opened from device or server.
             */
            isServerReport?: boolean;

            /** States whether report is downloaded from ReportServer.
             */
            reportAction?: string;
        }

        export interface SaveReportClickEventArgs {

            /** DOM of the clicked target.
             */
            target?: JQuery;

            /** Name of selected item.
             */
            select?: string;
        }

        export interface ToolbarClickEventArgs {

            /** DOM of the clicked target.
             */
            target?: JQuery;

            /** Name of clicked item.
             */
            click?: string;
        }

        export interface ToolbarRenderingEventArgs {
        }

        export interface ConfigurePaneSettings {

            /** Shows or hides the grouped items in the configuration pane with the help of enum ej.ReportDesigner.ConfigureItems
             * @Default {ej.ReportDesigner.ConfigureItems.All}
             */
            items?: ej.ReportDesigner.ConfigureItems|string;

            /** Shows or hides the configuration pane in ReportDesigner control.
             * @Default {true}
             */
            showConfigurePane?: boolean;
        }

        export interface PermissionSettings {

            /** Shows or hides the create, edit and delete options in data source pane with the help of ej.ReportDesigner.Permission enum.
             * @Default {ej.ReportDesigner.Permission.All}
             */
            dataSource?: ej.ReportDesigner.Permission|string;
        }

        export interface ReportDataExtension {

            /** Gets or sets the name of the datasource type.
             * @Default {empty}
             */
            name?: string;

            /** Gets or sets the class name of the data extension.
             * @Default {empty}
             */
            className?: string;

            /** Gets or sets the image class name to load image in data pane tile.
             * @Default {empty}
             */
            imageClass?: string;

            /** Gets or sets the name for data extension item to display in the data pane tile.
             * @Default {empty}
             */
            displayName?: string;
        }

        export interface ReportItemExtension {

            /** Gets or sets the name for the report item.
             * @Default {empty}
             */
            name?: string;

            /** Gets or sets the class name of the report item.
             * @Default {empty}
             */
            className?: string;

            /** Gets or sets the image class name to load image in widgets pane tile.
             * @Default {empty}
             */
            imageClass?: string;

            /** Gets or sets the name for custom report item to display in the widgets pane tile.
             * @Default {empty}
             */
            displayName?: string;

            /** Gets or sets the category name for the report item.
             * @Default {empty}
             */
            category?: string;

            /** Gets information to provide content for custom report item tooltip.
             * @Default {null}
             */
            toolTip?: any;
        }

        export interface ToolbarSettings {

            /** Shows or hides the grouped items in the toolbar with the help of enum ej.ReportDesigner.ToolbarItems.
             * @Default {ej.ReportDesigner.ToolbarItems.All}
             */
            items?: ej.ReportDesigner.ToolbarItems|string;

            /** Shows or hides the toolbar.
             * @Default {true}
             */
            showToolbar?: boolean;

            /** Specifies the toolbar template ID.
             * @Default {empty}
             */
            templateId?: string;
        }

        enum ConfigureItems {

            ///Shows or hides the properties panel in configuration pane.
            Property,

            ///Shows or hides the data panel in configuration pane.
            Data,

            ///Shows or hides the parameter panel in configuration pane.
            Parameter,

            ///Shows or hides the image manager panel in configuration pane.
            ImageManager,

            ///Shows all the configuration pane items.
            All
        }


        enum Permission {

            ///Shows or hides create option in data source pane.
            Create,

            ///Shows or hides the edit option in data source pane.
            Edit,

            ///Shows or hides the delete option in data source pane.
            Delete,

            ///Shows all the options in data source pane.
            All
        }


        enum ToolbarItems {

            ///Creates a new, blank report.
            New,

            ///Displays the Open dialog box to retrieve an existing report.
            Open,

            ///Saves the active report to a specified location.
            Save,

            ///Removes the selected item from the active report.
            Cut,

            ///Copies selected text or object to the clipboard.
            Copy,

            ///Pastes the item that cut or copied into (the position of the insertion point) the report from the clipboard.
            Paste,

            ///Deletes the selected item or text from the report.
            Delete,

            ///Reverses the last action or deletes the last entry that is typed.
            Undo,

            ///Reverses the action of the last Undo command.
            Redo,

            ///Used to "zoom in" to get a close-up view of a report or "zoom out" to see more of the page at a reduced size.
            Zoom,

            ///Used to change the layout order of report items in design area surface.
            Order,

            ///Aligns all report items to the center position of design surface in horizontal or vertical direction.
            Center,

            ///Aligns the selected report item in the design surface.
            Alignment,

            ///Distributes selected report items at equal intervals from each other.
            Distribute,

            ///Equally size the selected report items in the design surface.
            Sizing,

            ///Snaps the selected report items to the closest gridline.
            AlignGrid,

            ///Switches from preview to design view of the report.
            EditDesign,

            ///Contains options to show or hide `Header`, `Footer`, `Grid Lines`, `Snap To Shape` in the report design.
            View,

            ///Previews the active report in report viewer.
            Preview,

            ///Shows all the toolbar items.
            All
        }

    }

}
declare namespace ej.datavisualization {
    class SymbolPalette extends ej.Widget {
        static fn: SymbolPalette;
        constructor(element: JQuery | Element, options?: SymbolPalette.Model);
        static Locale: any;
        model: SymbolPalette.Model;
        defaults: SymbolPalette.Model;

        /** Add items to Palettes at runtime
         * @param {string} name of the Palette
         * @param {any} JSON for the new items to added in Palette
         * @returns {void}
         */
        addPaletteItem(paletteName: string, node: any): void;

        /** Remove items to Palettes at runtime
         * @param {string} name of the Palette
         * @param {any} JSON for the new node to removed in Palette
         * @returns {void}
         */
        removePaletteItem(paletteName: string, node: any): void;
    }
    export namespace SymbolPalette {

        export interface Model {

            /** Defines whether the symbols can be dragged from palette or not
             * @Default {true}
             */
            allowDrag?: boolean;

            /** Customizes the style of the symbol palette
             * @Default {e-symbolpalette}
             */
            cssClass?: string;

            /** Defines the default properties of nodes and connectors
             */
            defaultSettings?: DefaultSettings;

            /** Sets the Id of the diagram, over which the symbols will be dropped
             * @Default {null}
             */
            diagramId?: string;

            /** Sets the height of the palette headers
             * @Default {30}
             */
            headerHeight?: number;

            /** Defines the height of the symbol palette
             * @Default {400}
             */
            height?: number;

            /** Defines the height of the palette items
             * @Default {50}
             */
            paletteItemHeight?: number;

            /** Defines the width of the palette items
             * @Default {50}
             */
            paletteItemWidth?: number;

            /** An array of JSON objects, where each object represents a node/connector
             * @Default {[]}
             */
            palettes?: Palette[];

            /** Defines the preview height of the symbols
             * @Default {100}
             */
            previewHeight?: number;

            /** Defines the offset value to be left between the mouse cursor and symbol previews
             * @Default {(110, 110)}
             */
            previewOffset?: any;

            /** Defines the width of the symbol previews
             * @Default {100}
             */
            previewWidth?: number;

            /** Enable or disable the palette item text
             * @Default {true}
             */
            showPaletteItemText?: boolean;

            /** The width of the palette
             * @Default {250}
             */
            width?: number;

            /** Triggers when a palette item is selected or unselected
             */
            selectionChange?(e: SelectionChangeEventArgs): void;
        }

        export interface SelectionChangeEventArgs {

            /** returns whether an element is selected or unselected
             */
            changeType?: string;

            /** returns the node or connector that is selected or unselected
             */
            element?: any;
        }

        export interface DefaultSettings {

            /** Defines the default properties of the nodes
             * @Default {null}
             */
            node?: any;

            /** Defines the default properties of the connectors
             * @Default {null}
             */
            connector?: any;
        }

        export interface Palette {

            /** Defines the name of the palette
             * @Default {null}
             */
            name?: string;

            /** Defines whether the palette must be in expanded state or in collapsed state
             * @Default {true}
             */
            expanded?: boolean;

            /** Defines the palette items
             * @Default {[]}
             */
            items?: any[];
        }
    }

    class LinearGauge extends ej.Widget {
        static fn: LinearGauge;
        constructor(element: JQuery | Element, options?: LinearGauge.Model);
        static Locale: any;
        model: LinearGauge.Model;
        defaults: LinearGauge.Model;

        /** destroy the linear gauge all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To export Image
         * @param {number} for the Image
         * @param {number} for the Image
         * @returns {void}
         */
        exportImage(fileName: number, fileType: number): void;

        /** To get Bar Distance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getBarDistanceFromScale(scaleIndex: number, pointerIndex: number): any;

        /** To get Bar Pointer Value in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getBarPointerValue(scaleIndex: number, pointerIndex: number): any;

        /** To get Bar Width in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getBarWidth(scaleIndex: number, pointerIndex: number): any;

        /** To get CustomLabel Angle in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @returns {any}
         */
        getCustomLabelAngle(scaleIndex: number, customLabelIndex: number): any;

        /** To get CustomLabel Value in string
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @returns {any}
         */
        getCustomLabelValue(scaleIndex: number, customLabelIndex: number): any;

        /** To get Label Angle in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getLabelAngle(scaleIndex: number, labelIndex: number): any;

        /** To get LabelPlacement in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getLabelPlacement(scaleIndex: number, labelIndex: number): any;

        /** To get LabelStyle in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getLabelStyle(scaleIndex: number, labelIndex: number): any;

        /** To get Label XDistance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getLabelXDistanceFromScale(scaleIndex: number, labelIndex: number): any;

        /** To get PointerValue in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getLabelYDistanceFromScale(scaleIndex: number, labelIndex: number): any;

        /** To get Major Interval Value in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMajorIntervalValue(scaleIndex: number): any;

        /** To get MarkerStyle in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getMarkerStyle(scaleIndex: number, pointerIndex: number): any;

        /** To get Maximum Value in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMaximumValue(scaleIndex: number): any;

        /** To get PointerValue in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getMinimumValue(scaleIndex: number, pointerIndex: number): any;

        /** To get Minor Interval Value in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMinorIntervalValue(scaleIndex: number): any;

        /** To get Pointer Distance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerDistanceFromScale(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerHeight in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerHeight(scaleIndex: number, pointerIndex: number): any;

        /** To get Pointer Placement in String
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerPlacement(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerValue in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerValue(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerWidth in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerWidth(scaleIndex: number, pointerIndex: number): any;

        /** To get Range Border Width in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeBorderWidth(scaleIndex: number, rangeIndex: number): any;

        /** To get Range Distance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeDistanceFromScale(scaleIndex: number, rangeIndex: number): any;

        /** To get Range End Value in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeEndValue(scaleIndex: number, rangeIndex: number): any;

        /** To get Range End Width in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeEndWidth(scaleIndex: number, rangeIndex: number): any;

        /** To get Range Position in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangePosition(scaleIndex: number, rangeIndex: number): any;

        /** To get Range Start Value in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeStartValue(scaleIndex: number, rangeIndex: number): any;

        /** To get Range Start Width in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeStartWidth(scaleIndex: number, rangeIndex: number): any;

        /** To get ScaleBarLength in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleBarLength(scaleIndex: number): any;

        /** To get Scale Bar Size in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getScaleBarSize(scaleIndex: number, pointerIndex: number): any;

        /** To get Scale Border Width in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleBorderWidth(scaleIndex: number): any;

        /** To get Scale Direction in number
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleDirection(scaleIndex: number): any;

        /** To get Scale Location in object
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleLocation(scaleIndex: number): any;

        /** To get Scale Style in string
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleStyle(scaleIndex: number): any;

        /** To get Tick Angle in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickAngle(scaleIndex: number, tickIndex: number): any;

        /** To get Tick Height in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickHeight(scaleIndex: number, tickIndex: number): any;

        /** To get getTickPlacement in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickPlacement(scaleIndex: number, tickIndex: number): any;

        /** To get Tick Style in string
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickStyle(scaleIndex: number, tickIndex: number): any;

        /** To get Tick Width in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickWidth(scaleIndex: number, tickIndex: number): any;

        /** To get get Tick XDistance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickXDistanceFromScale(scaleIndex: number, tickIndex: number): any;

        /** To get Tick YDistance From Scale in number
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @returns {any}
         */
        getTickYDistanceFromScale(scaleIndex: number, tickIndex: number): any;

        /** Specifies the scales.
         * @returns {void}
         */
        scales(): void;

        /** To set setBarDistanceFromScale
         * @param {number} scaleIndex,value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} Bar DistanceFromScale value for Gauge
         * @returns {void}
         */
        setBarDistanceFromScale(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set setBarPointerValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} Bar Pointer Value for Gauge
         * @returns {void}
         */
        setBarPointerValue(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set setBarWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} Bar Width for Gauge
         * @returns {void}
         */
        setBarWidth(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set setCustomLabelAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @param {number} Custom Label Angle for Gauge
         * @returns {void}
         */
        setCustomLabelAngle(scaleIndex: number, customLabelIndex: number, value: number): void;

        /** To set setCustomLabelValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @param {number} CustomLabel value for Gauge
         * @returns {void}
         */
        setCustomLabelValue(scaleIndex: number, customLabelIndex: number, value: number): void;

        /** To set setLabelAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Label Angle for Gauge
         * @returns {void}
         */
        setLabelAngle(scaleIndex: number, labelIndex: number, angle: number): void;

        /** To set setLabelPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Label Placement for Gauge
         * @returns {void}
         */
        setLabelPlacement(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set setLabelStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {string} Label Style for Gauge
         * @returns {void}
         */
        setLabelStyle(scaleIndex: number, labelIndex: number, value: string): void;

        /** To set setLabelXDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Label XDistance From Scale for Gauge
         * @returns {void}
         */
        setLabelXDistanceFromScale(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set setLabelYDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Label YDistance From Scale for Gauge
         * @returns {void}
         */
        setLabelYDistanceFromScale(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set setMajorIntervalValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} Major Interval Value for Gauge
         * @returns {void}
         */
        setMajorIntervalValue(scaleIndex: number, value: number): void;

        /** To set setMarkerStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {string} marker Style for Gauge
         * @returns {void}
         */
        setMarkerStyle(scaleIndex: number, pointerIndex: number, value: string): void;

        /** To set setMaximumValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} MaximumValue for Gauge
         * @returns {void}
         */
        setMaximumValue(scaleIndex: number, value: number): void;

        /** To set setMinimumValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} MinimumValue for Gauge
         * @returns {void}
         */
        setMinimumValue(scaleIndex: number, value: number): void;

        /** To set setMinorIntervalValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} Minor Interval Value for Gauge
         * @returns {void}
         */
        setMinorIntervalValue(scaleIndex: number, value: number): void;

        /** To set setPointerDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} for Gauge
         * @returns {void}
         */
        setPointerDistanceFromScale(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerHeight
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} for Gauge
         * @returns {void}
         */
        setPointerHeight(scaleIndex: number, pointerIndex: number, height: number): void;

        /** To set setPointerPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} pointer placement for Gauge
         * @returns {void}
         */
        setPointerPlacement(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} Pointer value for Gauge
         * @returns {void}
         */
        setPointerValue(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @param {number} Pointer width for Gauge
         * @returns {void}
         */
        setPointerWidth(scaleIndex: number, pointerIndex: number, width: number): void;

        /** To set setRangeBorderWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range Border Width for Gauge
         * @returns {void}
         */
        setRangeBorderWidth(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangeDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range Distance FromScale for Gauge
         * @returns {void}
         */
        setRangeDistanceFromScale(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangeEndValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range end value for Gauge
         * @returns {void}
         */
        setRangeEndValue(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangeEndWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range End Width for Gauge
         * @returns {void}
         */
        setRangeEndWidth(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangePosition
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range Position for Gauge
         * @returns {void}
         */
        setRangePosition(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangeStartValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} range start value for Gauge
         * @returns {void}
         */
        setRangeStartValue(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setRangeStartWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @param {number} Range Start Width for Gauge
         * @returns {void}
         */
        setRangeStartWidth(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set setScaleBarLength
         * @param {number} scaleIndex value for the Gauge
         * @param {number} Scale Bar Length for Gauge
         * @returns {void}
         */
        setScaleBarLength(scaleIndex: number, value: number): void;

        /** To set setScaleBarSize
         * @param {number} scaleIndex value for the Gauge
         * @param {number} ScaleBarSize for Gauge
         * @returns {void}
         */
        setScaleBarSize(scaleIndex: number, value: number): void;

        /** To set setScaleBorderWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} Scale Border Width for Gauge
         * @returns {void}
         */
        setScaleBorderWidth(scaleIndex: number, value: number): void;

        /** To set setScaleDirection
         * @param {number} scaleIndex value for the Gauge
         * @param {number} Scale Direction for Gauge
         * @returns {void}
         */
        setScaleDirection(scaleIndex: number, value: number): void;

        /** To set setScaleLocation
         * @param {number} scaleIndex value for the Gauge
         * @param {any} Scale position for Gauge
         * @returns {void}
         */
        setScaleLocation(scaleIndex: number, value: any): void;

        /** To set setScaleStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} for Gauge
         * @returns {void}
         */
        setScaleStyle(scaleIndex: number, value: number): void;

        /** To set setTickAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick Angle for Gauge
         * @returns {void}
         */
        setTickAngle(scaleIndex: number, tickIndex: number, angle: number): void;

        /** To set setTickHeight
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick Height for Gauge
         * @returns {void}
         */
        setTickHeight(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set setTickPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick Placement for Gauge
         * @returns {void}
         */
        setTickPlacement(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set setTickStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {string} Tick Style for Gauge
         * @returns {void}
         */
        setTickStyle(scaleIndex: number, tickIndex: number, value: string): void;

        /** To set setTickWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick Width for Gauge
         * @returns {void}
         */
        setTickWidth(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set setTickXDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick XDistance From Scale for Gauge
         * @returns {void}
         */
        setTickXDistanceFromScale(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set setTickYDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} value for the Gauge
         * @param {number} Tick YDistance From Scale for Gauge
         * @returns {void}
         */
        setTickYDistanceFromScale(scaleIndex: number, tickIndex: number, value: number): void;
    }
    export namespace LinearGauge {

        export interface Model {

            /** Specifies the animationSpeed
             * @Default {500}
             */
            animationSpeed?: number;

            /** Specifies the backgroundColor for Linear gauge.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the borderColor for Linear gauge.
             * @Default {null}
             */
            borderColor?: string;

            /** Specifies the animate state
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Specifies the animate state for marker pointer
             * @Default {true}
             */
            enableMarkerPointerAnimation?: boolean;

            /** This provides options for customizing export settings
             */
            exportSettings?: ExportSettings;

            /** Specifies the can resize state.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Used to Convert the date object to  string while using the  locale settings
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Responsiveness of the linear gauge is controlled
             * @Default {false}
             */
            enableResize?: boolean;

            /** Specify frame of linear gauge
             * @Default {null}
             */
            frame?: Frame;

            /** Specifies the height of Linear gauge.
             * @Default {400}
             */
            height?: number;

            /** Specifies the labelColor for Linear gauge.
             * @Default {null}
             */
            labelColor?: string;

            /** Set the  localization culture  for the Linear gauge
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the maximum value of Linear gauge.
             * @Default {100}
             */
            maximum?: number;

            /** Specifies the minimum value of Linear gauge.
             * @Default {0}
             */
            minimum?: number;

            /** Specifies the orientation for Linear gauge.
             * @Default {Vertical}
             */
            orientation?: string;

            /** Specify labelPosition value of Linear gauge See
             * @Default {bottom}
             */
            outerCustomLabelPosition?: ej.datavisualization.LinearGauge.OuterCustomLabelPosition|string;

            /** Specifies the pointerGradient1 for Linear gauge.
             * @Default {null}
             */
            pointerGradient1?: any;

            /** Specifies the pointerGradient2 for Linear gauge.
             * @Default {null}
             */
            pointerGradient2?: any;

            /** Specifies the read only state.
             * @Default {true}
             */
            readOnly?: boolean;

            /** Specifies the scales
             * @Default {null}
             */
            scales?: Scale[];

            /** Specifies the theme for Linear gauge. See LinearGauge.Themes
             * @Default {flatlight}
             */
            theme?: ej.datavisualization.LinearGauge.Themes|string;

            /** Specifies the tick Color for Linear gauge.
             * @Default {null}
             */
            tickColor?: string;

            /** Specify tooltip options of linear gauge
             * @Default {false}
             */
            tooltip?: Tooltip;

            /** Specifies the value of the Gauge.
             * @Default {0}
             */
            value?: number;

            /** Specifies the width of Linear gauge.
             * @Default {150}
             */
            width?: number;

            /** Triggers while the bar pointer are being drawn on the gauge.
             */
            drawBarPointers?(e: DrawBarPointersEventArgs): void;

            /** Triggers while the customLabel are being drawn on the gauge.
             */
            drawCustomLabel?(e: DrawCustomLabelEventArgs): void;

            /** Triggers while the Indicator are being drawn on the gauge.
             */
            drawIndicators?(e: DrawIndicatorsEventArgs): void;

            /** Triggers while the label are being drawn on the gauge.
             */
            drawLabels?(e: DrawLabelsEventArgs): void;

            /** Triggers while the marker are being drawn on the gauge.
             */
            drawMarkerPointers?(e: DrawMarkerPointersEventArgs): void;

            /** Triggers while the range are being drawn on the gauge.
             */
            drawRange?(e: DrawRangeEventArgs): void;

            /** Triggers while the ticks are being drawn on the gauge.
             */
            drawTicks?(e: DrawTicksEventArgs): void;

            /** Triggers when the gauge is initialized.
             */
            init?(e: InitEventArgs): void;

            /** Triggers while the gauge start to Load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when the left mouse button is clicked.
             */
            mouseClick?(e: MouseClickEventArgs): void;

            /** Triggers when clicking and dragging the mouse pointer over the gauge pointer.
             */
            mouseClickMove?(e: MouseClickMoveEventArgs): void;

            /** Triggers when the mouse click is released.
             */
            mouseClickUp?(e: MouseClickUpEventArgs): void;

            /** Triggers while the rendering of the gauge completed.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Fires, on double clicking the gauge.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the gauge.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface DrawBarPointersEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the pointer
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the current Bar pointer element.
             */
            barElement?: any;

            /** returns the index of the bar pointer.
             */
            barPointerIndex?: number;

            /** returns the value of the bar pointer.
             */
            PointerValue?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawCustomLabelEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the customLabel
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the customLabel style
             */
            style?: any;

            /** returns the current customLabel element.
             */
            customLabelElement?: any;

            /** returns the index of the customLabel.
             */
            customLabelIndex?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawIndicatorsEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the Indicator
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the Indicator style
             */
            style?: string;

            /** returns the current Indicator element.
             */
            IndicatorElement?: any;

            /** returns the index of the Indicator.
             */
            IndicatorIndex?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawLabelsEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the label
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the label belongs.
             */
            scaleIndex?: number;

            /** returns the label style
             */
            style?: string;

            /** returns the angle of the label.
             */
            angle?: number;

            /** returns the current label element.
             */
            element?: any;

            /** returns the index of the label.
             */
            index?: number;

            /** returns the label value of the label.
             */
            value?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawMarkerPointersEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the pointer
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the ticks style
             */
            style?: string;

            /** returns the current marker pointer element.
             */
            markerElement?: any;

            /** returns the index of the marker pointer.
             */
            markerPointerIndex?: number;

            /** returns the value of the marker pointer.
             */
            pointerValue?: number;

            /** returns the angle of the marker pointer.
             */
            pointerAngle?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawRangeEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the range
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the range style
             */
            style?: string;

            /** returns the current range element.
             */
            rangeElement?: any;

            /** returns the index of the range.
             */
            rangeIndex?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DrawTicksEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the ticks
             */
            position?: any;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the tick belongs.
             */
            scaleIndex?: number;

            /** returns the ticks style
             */
            style?: string;

            /** returns the angle of the tick.
             */
            angle?: number;

            /** returns the current tick element.
             */
            element?: any;

            /** returns the index of the tick.
             */
            index?: number;

            /** returns the tick value of the tick.
             */
            value?: number;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface InitEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the entire scale element.
             */
            scaleElement?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface LoadEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the entire scale element.
             */
            scaleElement?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface MouseClickEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element* @param {Object} args.markerpointer returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            markerPointerIndex?: number;

            /** returns the pointer element.
             */
            markerPointerElement?: any;

            /** returns the value of the pointer.
             */
            markerPointerValue?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface MouseClickMoveEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            index?: number;

            /** returns the pointer element.
             */
            element?: any;

            /** returns the value of the pointer.
             */
            value?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface MouseClickUpEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element* @param {Object} args.markerPointer returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            markerPointerIndex?: number;

            /** returns the pointer element.
             */
            markerPointerElement?: any;

            /** returns the value of the pointer.
             */
            markerPointerValue?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the entire scale element.
             */
            scaleElement?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the name of the event
             */
            type?: any;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to gauge area.id - ID of the target element.    size - Width and height of the gauge.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to gauge area.id - ID of the target element.    size - Width and height of the gauge.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface ExportSettings {

            /** Specifies the downloading filename
             * @Default {LinearGauge}
             */
            filename?: string;

            /** Specifies the format of the file to export
             * @Default {png}
             */
            type?: ej.datavisualization.LinearGauge.ExportingType|string;

            /** Specifies the name of the action URL
             */
            action?: string;

            /** Specifies the mode of exporting
             * @Default {client}
             */
            mode?: ej.datavisualization.LinearGauge.ExportingMode|string;
        }

        export interface Frame {

            /** Specifies the frame background image URL of linear gauge
             * @Default {null}
             */
            backgroundImageUrl?: string;

            /** Specifies the frame InnerWidth
             * @Default {8}
             */
            innerWidth?: number;

            /** Specifies the frame OuterWidth
             * @Default {12}
             */
            outerWidth?: number;
        }

        export interface ScalesBarPointersBorder {

            /** Specifies the border Color of bar pointer
             * @Default {null}
             */
            color?: string;

            /** Specifies the border Width of bar pointer
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesBarPointer {

            /** Specifies the backgroundColor of bar pointer
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the border of bar pointer
             * @Default {null}
             */
            border?: ScalesBarPointersBorder;

            /** Specifies the distanceFromScale of bar pointer
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specifies the scaleBar Gradient of bar pointer
             * @Default {null}
             */
            gradients?: any;

            /** Specifies the opacity of bar pointer
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the value of bar pointer
             * @Default {null}
             */
            value?: number;

            /** Specifies the pointer Width of bar pointer
             * @Default {width=30}
             */
            width?: number;
        }

        export interface ScalesBorder {

            /** Specifies the border color of the Scale.
             * @Default {null}
             */
            color?: string;

            /** Specifies the border width of the Scale.
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesCustomLabelsFont {

            /** Specifies the fontFamily in customLabels
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specifies the fontStyle in customLabels. See
             * @Default {Bold}
             */
            fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

            /** Specifies the font size in customLabels
             * @Default {11px}
             */
            size?: string;
        }

        export interface ScalesCustomLabelsPosition {

            /** Specifies the position x in customLabels
             * @Default {0}
             */
            x?: number;

            /** Specifies the y in customLabels
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesCustomLabel {

            /** Specifies the label Color in customLabels
             * @Default {null}
             */
            color?: number;

            /** Specifies the font in customLabels
             * @Default {null}
             */
            font?: ScalesCustomLabelsFont;

            /** Specifies the opacity in customLabels
             * @Default {0}
             */
            opacity?: string;

            /** Specifies the position in customLabels
             * @Default {null}
             */
            position?: ScalesCustomLabelsPosition;

            /** Specifies the positionType in customLabels.See CustomLabelPositionType
             * @Default {null}
             */
            positionType?: any;

            /** Specifies the textAngle in customLabels
             * @Default {0}
             */
            textAngle?: number;

            /** Specifies the label Value in customLabels
             */
            value?: string;
        }

        export interface ScalesIndicatorsBorder {

            /** Specifies the border Color in bar indicators
             * @Default {null}
             */
            color?: string;

            /** Specifies the border Width in bar indicators
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesIndicatorsFont {

            /** Specifies the fontFamily of font in bar indicators
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of font in bar indicators. See FontStyle
             * @Default {ej.datavisualization.LinearGauge.FontStyle.Bold}
             */
            fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

            /** Specifies the size of font in bar indicators
             * @Default {11px}
             */
            size?: string;
        }

        export interface ScalesIndicatorsPosition {

            /** Specifies the x position in bar indicators
             * @Default {0}
             */
            x?: number;

            /** Specifies the y position in bar indicators
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesIndicatorsStateRange {

            /** Specifies the backgroundColor in bar indicators state ranges
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the borderColor in bar indicators state ranges
             * @Default {null}
             */
            borderColor?: string;

            /** Specifies the endValue in bar indicators state ranges
             * @Default {60}
             */
            endValue?: number;

            /** Specifies the startValue in bar indicators state ranges
             * @Default {50}
             */
            startValue?: number;

            /** Specifies the text in bar indicators state ranges
             */
            text?: string;

            /** Specifies the textColor in bar indicators state ranges
             * @Default {null}
             */
            textColor?: string;
        }

        export interface ScalesIndicatorsTextLocation {

            /** Specifies the textLocation position in bar indicators
             * @Default {0}
             */
            x?: number;

            /** Specifies the Y position in bar indicators
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesIndicator {

            /** Specifies the backgroundColor in bar indicators
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the border in bar indicators
             * @Default {null}
             */
            border?: ScalesIndicatorsBorder;

            /** Specifies the font of bar indicators
             * @Default {null}
             */
            font?: ScalesIndicatorsFont;

            /** Specifies the indicator Height of bar indicators
             * @Default {30}
             */
            height?: number;

            /** Specifies the opacity in bar indicators
             * @Default {null}
             */
            opacity?: number;

            /** Specifies the position in bar indicators
             * @Default {null}
             */
            position?: ScalesIndicatorsPosition;

            /** Specifies the state ranges in bar indicators
             * @Default {Array}
             */
            stateRanges?: ScalesIndicatorsStateRange[];

            /** Specifies the textLocation in bar indicators
             * @Default {null}
             */
            textLocation?: ScalesIndicatorsTextLocation;

            /** Specifies the indicator Style of font in bar indicators
             * @Default {ej.datavisualization.LinearGauge.IndicatorType.Rectangle}
             */
            type?: ej.datavisualization.LinearGauge.IndicatorTypes|string;

            /** Specifies the indicator Width in bar indicators
             * @Default {30}
             */
            width?: number;
        }

        export interface ScalesLabelsDistanceFromScale {

            /** Specifies the xDistanceFromScale of labels.
             * @Default {-10}
             */
            x?: number;

            /** Specifies the yDistanceFromScale of labels.
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesLabelsFont {

            /** Specifies the fontFamily of font.
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of font.See FontStyle
             * @Default {ej.datavisualization.LinearGauge.FontStyle.Bold}
             */
            fontStyle?: ej.datavisualization.LinearGauge.FontStyle|string;

            /** Specifies the size of font.
             * @Default {11px}
             */
            size?: string;
        }

        export interface ScalesLabel {

            /** Specifies the angle of labels.
             * @Default {0}
             */
            angle?: number;

            /** Specifies the DistanceFromScale of labels.
             * @Default {null}
             */
            distanceFromScale?: ScalesLabelsDistanceFromScale;

            /** Specifies the font of labels.
             * @Default {null}
             */
            font?: ScalesLabelsFont;

            /** need to includeFirstValue.
             * @Default {true}
             */
            includeFirstValue?: boolean;

            /** Specifies the opacity of label.
             * @Default {0}
             */
            opacity?: number;

            /** Specifies the label Placement of label. See
             * @Default {Near}
             */
            placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

            /** Specifies the textColor of font.
             * @Default {null}
             */
            textColor?: string;

            /** Specifies the label Style of label. See
             * @Default {ej.datavisualization.LinearGauge.LabelType.Major}
             */
            type?: ej.datavisualization.LinearGauge.ScaleType|string;

            /** Specifies the unitText of label.
             */
            unitText?: string;

            /** Specifies the unitText Position of label.See
             * @Default {Back}
             */
            unitTextPlacement?: ej.datavisualization.LinearGauge.UnitTextPlacement|string;
        }

        export interface ScalesMarkerPointersBorder {

            /** Specifies the border color of marker pointer
             * @Default {null}
             */
            color?: string;

            /** Specifies the border of marker pointer
             * @Default {number}
             */
            width?: number;
        }

        export interface ScalesMarkerPointer {

            /** Specifies the backgroundColor of marker pointer
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the border of marker pointer
             * @Default {null}
             */
            border?: ScalesMarkerPointersBorder;

            /** Specifies the distanceFromScale of marker pointer
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specifies the pointer Gradient of marker pointer
             * @Default {null}
             */
            gradients?: any;

            /** Specifies the pointer Length of marker pointer
             * @Default {30}
             */
            length?: number;

            /** Specifies the opacity of marker pointer
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the pointer Placement of marker pointer See PointerPlacement
             * @Default {Far}
             */
            placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

            /** Specifies the marker Style of marker pointerSee
             * @Default {Triangle}
             */
            type?: ej.datavisualization.LinearGauge.MarkerType|string;

            /** Specifies the value of marker pointer
             * @Default {null}
             */
            value?: number;

            /** Specifies the pointer Width of marker pointer
             * @Default {30}
             */
            width?: number;
        }

        export interface ScalesPosition {

            /** Specifies the Horizontal position
             * @Default {50}
             */
            x?: number;

            /** Specifies the vertical position
             * @Default {50}
             */
            y?: number;
        }

        export interface ScalesRangesBorder {

            /** Specifies the border color in the ranges.
             * @Default {null}
             */
            color?: string;

            /** Specifies the border width in the ranges.
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesRange {

            /** Specifies the backgroundColor in the ranges.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the border in the ranges.
             * @Default {null}
             */
            border?: ScalesRangesBorder;

            /** Specifies the distanceFromScale in the ranges.
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specifies the endValue in the ranges.
             * @Default {60}
             */
            endValue?: number;

            /** Specifies the endWidth in the ranges.
             * @Default {10}
             */
            endWidth?: number;

            /** Specifies the range Gradient in the ranges.
             * @Default {null}
             */
            gradients?: any;

            /** Specifies the opacity in the ranges.
             * @Default {null}
             */
            opacity?: number;

            /** Specifies the range Position in the ranges. See RangePlacement
             * @Default {Center}
             */
            placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

            /** Specifies the startValue in the ranges.
             * @Default {20}
             */
            startValue?: number;

            /** Specifies the startWidth in the ranges.
             * @Default {10}
             */
            startWidth?: number;
        }

        export interface ScalesTicksDistanceFromScale {

            /** Specifies the xDistanceFromScale in the tick.
             * @Default {0}
             */
            x?: number;

            /** Specifies the yDistanceFromScale in the tick.
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesTick {

            /** Specifies the angle in the tick.
             * @Default {0}
             */
            angle?: number;

            /** Specifies the tick Color in the tick.
             * @Default {null}
             */
            color?: string;

            /** Specifies the DistanceFromScale in the tick.
             * @Default {null}
             */
            distanceFromScale?: ScalesTicksDistanceFromScale;

            /** Specifies the tick Height in the tick.
             * @Default {10}
             */
            height?: number;

            /** Specifies the opacity in the tick.
             * @Default {0}
             */
            opacity?: number;

            /** Specifies the tick Placement in the tick. See TickPlacement
             * @Default {Near}
             */
            placement?: ej.datavisualization.LinearGauge.PointerPlacement|string;

            /** Specifies the tick Style in the tick. See
             * @Default {MajorInterval}
             */
            type?: ej.datavisualization.LinearGauge.TicksType|string;

            /** Specifies the tick Width in the tick.
             * @Default {3}
             */
            width?: number;
        }

        export interface Scale {

            /** Specifies the backgroundColor of the Scale.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specifies the scaleBar Gradient of bar pointer
             * @Default {Array}
             */
            barPointers?: ScalesBarPointer[];

            /** Specifies the border of the Scale.
             * @Default {null}
             */
            border?: ScalesBorder;

            /** Specifies the customLabel
             * @Default {Array}
             */
            customLabels?: ScalesCustomLabel[];

            /** Specifies the scale Direction of the Scale. See
             * @Default {CounterClockwise}
             */
            direction?: ej.datavisualization.LinearGauge.Direction|string;

            /** Specifies the indicator
             * @Default {Array}
             */
            indicators?: ScalesIndicator[];

            /** Specifies the labels.
             * @Default {Array}
             */
            labels?: ScalesLabel[];

            /** Specifies the scaleBar Length.
             * @Default {290}
             */
            length?: number;

            /** Specifies the majorIntervalValue of the Scale.
             * @Default {10}
             */
            majorIntervalValue?: number;

            /** Specifies the markerPointers
             * @Default {Array}
             */
            markerPointers?: ScalesMarkerPointer[];

            /** Specifies the maximum of the Scale.
             * @Default {null}
             */
            maximum?: number;

            /** Specifies the minimum of the Scale.
             * @Default {null}
             */
            minimum?: number;

            /** Specifies the minorIntervalValue of the Scale.
             * @Default {2}
             */
            minorIntervalValue?: number;

            /** Specifies the opacity of the Scale.
             * @Default {NaN}
             */
            opacity?: number;

            /** Specifies the position
             * @Default {null}
             */
            position?: ScalesPosition;

            /** Specifies the ranges in the tick.
             * @Default {Array}
             */
            ranges?: ScalesRange[];

            /** Specifies the shadowOffset.
             * @Default {0}
             */
            shadowOffset?: number;

            /** Specifies the showBarPointers state.
             * @Default {true}
             */
            showBarPointers?: boolean;

            /** Specifies the showCustomLabels state.
             * @Default {false}
             */
            showCustomLabels?: boolean;

            /** Specifies the showIndicators state.
             * @Default {false}
             */
            showIndicators?: boolean;

            /** Specifies the showLabels state.
             * @Default {true}
             */
            showLabels?: boolean;

            /** Specifies the showMarkerPointers state.
             * @Default {true}
             */
            showMarkerPointers?: boolean;

            /** Specifies the showRanges state.
             * @Default {false}
             */
            showRanges?: boolean;

            /** Specifies the showTicks state.
             * @Default {true}
             */
            showTicks?: boolean;

            /** Specifies the ticks in the scale.
             * @Default {Array}
             */
            ticks?: ScalesTick[];

            /** Specifies the scaleBar type .See
             * @Default {Rectangle}
             */
            type?: ej.datavisualization.LinearGauge.ScaleType|string;

            /** Specifies the scaleBar width.
             * @Default {30}
             */
            width?: number;
        }

        export interface Tooltip {

            /** Specify showCustomLabelTooltip value of linear gauge
             * @Default {false}
             */
            showCustomLabelTooltip?: boolean;

            /** Specify showLabelTooltip value of linear gauge
             * @Default {false}
             */
            showLabelTooltip?: boolean;

            /** Specify templateID value of linear gauge
             * @Default {false}
             */
            templateID?: string;
        }
    }
    namespace LinearGauge {
        enum ExportingType {
            //string
            PNG,
            //string
            JPG,
        }
    }
    namespace LinearGauge {
        enum ExportingMode {
            //string
            ServerSide,
            //string
            ClientSide,
        }
    }
    namespace LinearGauge {
        enum OuterCustomLabelPosition {
            //string
            Left,
            //string
            Right,
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace LinearGauge {
        enum FontStyle {
            //string
            Bold,
            //string
            Italic,
            //string
            Regular,
            //string
            Strikeout,
            //string
            Underline,
        }
    }
    namespace LinearGauge {
        enum Direction {
            //string
            Clockwise,
            //string
            CounterClockwise,
        }
    }
    namespace LinearGauge {
        enum IndicatorTypes {
            //string
            Rectangle,
            //string
            Circle,
            //string
            RoundedRectangle,
            //string
            Text,
        }
    }
    namespace LinearGauge {
        enum PointerPlacement {
            //string
            Near,
            //string
            Far,
            //string
            Center,
        }
    }
    namespace LinearGauge {
        enum ScaleType {
            //string
            Major,
            //string
            Minor,
        }
    }
    namespace LinearGauge {
        enum UnitTextPlacement {
            //string
            Back,
            //string
            From,
        }
    }
    namespace LinearGauge {
        enum MarkerType {
            //string
            Rectangle,
            //string
            Triangle,
            //string
            Ellipse,
            //string
            Diamond,
            //string
            Pentagon,
            //string
            Circle,
            //string
            Star,
            //string
            Slider,
            //string
            Pointer,
            //string
            Wedge,
            //string
            Trapezoid,
            //string
            RoundedRectangle,
        }
    }
    namespace LinearGauge {
        enum TicksType {
            //string
            Majorinterval,
            //string
            Minorinterval,
        }
    }
    namespace LinearGauge {
        enum Themes {
            //string
            FlatLight,
            //string
            FlatDark,
        }
    }

    class CircularGauge extends ej.Widget {
        static fn: CircularGauge;
        constructor(element: JQuery | Element, options?: CircularGauge.Model);
        static Locale: any;
        model: CircularGauge.Model;
        defaults: CircularGauge.Model;

        /** destroy the circular gauge widget. all events bound using this._on will be unbind automatically and bring the control to pre-init state.
         * @returns {void}
         */
        destroy(): void;

        /** To export Image
         * @param {string} fileName for the Image
         * @param {string} fileType for the Image
         * @returns {boolean}
         */
        exportImage(fileName: string, fileType: string): boolean;

        /** To get BackNeedleLength
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getBackNeedleLength(scaleIndex: number, pointerIndex: number): any;

        /** To get CustomLabelAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @returns {any}
         */
        getCustomLabelAngle(scaleIndex: number, customLabelIndex: number): any;

        /** To get CustomLabelValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} customLabelIndex value for the Gauge
         * @returns {any}
         */
        getCustomLabelValue(scaleIndex: number, customLabelIndex: number): any;

        /** To get LabelAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} labelIndex value for the Gauge
         * @returns {any}
         */
        getLabelAngle(scaleIndex: number, labelIndex: number): any;

        /** To get LabelDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} labelIndex value for the Gauge
         * @returns {any}
         */
        getLabelDistanceFromScale(scaleIndex: number, labelIndex: number): any;

        /** To get LabelPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} labelIndex value for the Gauge
         * @returns {any}
         */
        getLabelPlacement(scaleIndex: number, labelIndex: number): any;

        /** To get LabelStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} labelIndex value for the Gauge
         * @returns {any}
         */
        getLabelStyle(scaleIndex: number, labelIndex: number): any;

        /** To get MajorIntervalValue
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMajorIntervalValue(scaleIndex: number): any;

        /** To get MarkerDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getMarkerDistanceFromScale(scaleIndex: number, pointerIndex: number): any;

        /** To get MarkerStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getMarkerStyle(scaleIndex: number, pointerIndex: number): any;

        /** To get MaximumValue
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMaximumValue(scaleIndex: number): any;

        /** To get MinimumValue
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMinimumValue(scaleIndex: number): any;

        /** To get MinorIntervalValue
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getMinorIntervalValue(scaleIndex: number): any;

        /** To get NeedleStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getNeedleStyle(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerCapBorderWidth
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getPointerCapBorderWidth(scaleIndex: number): any;

        /** To get PointerCapRadius
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getPointerCapRadius(scaleIndex: number): any;

        /** To get PointerLength
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerLength(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerNeedleType
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerNeedleType(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerPlacement(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerValue(scaleIndex: number, pointerIndex: number): any;

        /** To get PointerWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} pointerIndex value for the Gauge
         * @returns {any}
         */
        getPointerWidth(scaleIndex: number, pointerIndex: number): any;

        /** To get RangeBorderWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeBorderWidth(scaleIndex: number, rangeIndex: number): any;

        /** To get RangeDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeDistanceFromScale(scaleIndex: number, rangeIndex: number): any;

        /** To get RangeEndValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeEndValue(scaleIndex: number, rangeIndex: number): any;

        /** To get RangePosition
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangePosition(scaleIndex: number, rangeIndex: number): any;

        /** To get RangeSize
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeSize(scaleIndex: number, rangeIndex: number): any;

        /** To get RangeStartValue
         * @param {number} scaleIndex value for the Gauge
         * @param {number} rangeIndex value for the Gauge
         * @returns {any}
         */
        getRangeStartValue(scaleIndex: number, rangeIndex: number): any;

        /** To get ScaleBarSize
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleBarSize(scaleIndex: number): any;

        /** To get ScaleBorderWidth
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleBorderWidth(scaleIndex: number): any;

        /** To get ScaleDirection
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleDirection(scaleIndex: number): any;

        /** To get ScaleRadius
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getScaleRadius(scaleIndex: number): any;

        /** To get StartAngle
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getStartAngle(scaleIndex: number): any;

        /** To get SubGaugeLocation
         * @param {number} scaleIndex value for the Gauge
         * @param {number} GaugeIndex value for the Gauge
         * @returns {any}
         */
        getSubGaugeLocation(scaleIndex: number, GaugeIndex: number): any;

        /** To get SweepAngle
         * @param {number} scaleIndex value for the Gauge
         * @returns {any}
         */
        getSweepAngle(scaleIndex: number): any;

        /** To get TickAngle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} tickIndex value for the Gauge
         * @returns {any}
         */
        getTickAngle(scaleIndex: number, tickIndex: number): any;

        /** To get TickDistanceFromScale
         * @param {number} scaleIndex value for the Gauge
         * @param {number} tickIndex value for the Gauge
         * @returns {any}
         */
        getTickDistanceFromScale(scaleIndex: number, tickIndex: number): any;

        /** To get TickHeight
         * @param {number} scaleIndex value for the Gauge
         * @param {number} labelIndex value for the Gauge
         * @returns {any}
         */
        getTickHeight(scaleIndex: number, labelIndex: number): any;

        /** To get TickPlacement
         * @param {number} scaleIndex value for the Gauge
         * @param {number} tickIndex value for the Gauge
         * @returns {any}
         */
        getTickPlacement(scaleIndex: number, tickIndex: number): any;

        /** To get TickStyle
         * @param {number} scaleIndex value for the Gauge
         * @param {number} tickIndex value for the Gauge
         * @returns {any}
         */
        getTickStyle(scaleIndex: number, tickIndex: number): any;

        /** To get TickWidth
         * @param {number} scaleIndex value for the Gauge
         * @param {number} tickIndex value for the Gauge
         * @returns {any}
         */
        getTickWidth(scaleIndex: number, tickIndex: number): any;

        /** To set includeFirstValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} labelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        includeFirstValue(scaleIndex: number, labelIndex: number, value: number): void;

        /** Switching the redraw option for the gauge
         * @param {string} redraw value for the gauge
         * @returns {void}
         */
        redraw(value: string): void;

        /** To set BackNeedleLength
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setBackNeedleLength(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set CustomLabelAngle
         * @param {number} scaleIndex value for the gauge
         * @param {number} customLabelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setCustomLabelAngle(scaleIndex: number, customLabelIndex: number, value: number): void;

        /** To set CustomLabelValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} customLabelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setCustomLabelValue(scaleIndex: number, customLabelIndex: number, value: number): void;

        /** To set LabelAngle
         * @param {number} scaleIndex value for the gauge
         * @param {number} labelIndex value for the gauge
         * @param {number} angle value for the gauge
         * @returns {void}
         */
        setLabelAngle(scaleIndex: number, labelIndex: number, angle: number): void;

        /** To set LabelDistanceFromScale
         * @param {number} scaleIndex value for the gauge
         * @param {number} labelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setLabelDistanceFromScale(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set LabelPlacement
         * @param {number} scaleIndex value for the gauge
         * @param {number} labelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setLabelPlacement(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set LabelStyle
         * @param {number} scaleIndex value for the gauge
         * @param {number} labelIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setLabelStyle(scaleIndex: number, labelIndex: number, value: number): void;

        /** To set MajorIntervalValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMajorIntervalValue(scaleIndex: number, value: number): void;

        /** To set MarkerDistanceFromScale
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMarkerDistanceFromScale(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set MarkerStyle
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMarkerStyle(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set MaximumValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMaximumValue(scaleIndex: number, value: number): void;

        /** To set MinimumValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMinimumValue(scaleIndex: number, value: number): void;

        /** To set MinorIntervalValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setMinorIntervalValue(scaleIndex: number, value: number): void;

        /** To set NeedleStyle
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setNeedleStyle(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerCapBorderWidth
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerCapBorderWidth(scaleIndex: number, value: number): void;

        /** To set PointerCapRadius
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerCapRadius(scaleIndex: number, value: number): void;

        /** To set PointerLength
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerLength(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerNeedleType
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerNeedleType(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerPlacement
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerPlacement(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerValue(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set PointerWidth
         * @param {number} scaleIndex value for the gauge
         * @param {number} pointerIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setPointerWidth(scaleIndex: number, pointerIndex: number, value: number): void;

        /** To set RangeBorderWidth
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangeBorderWidth(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set RangeDistanceFromScale
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangeDistanceFromScale(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set RangeEndValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangeEndValue(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set RangePosition
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangePosition(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set RangeSize
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangeSize(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set RangeStartValue
         * @param {number} scaleIndex value for the gauge
         * @param {number} rangeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setRangeStartValue(scaleIndex: number, rangeIndex: number, value: number): void;

        /** To set ScaleBarSize
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setScaleBarSize(scaleIndex: number, value: number): void;

        /** To set ScaleBorderWidth
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setScaleBorderWidth(scaleIndex: number, value: number): void;

        /** To set ScaleDirection
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setScaleDirection(scaleIndex: number, value: number): void;

        /** To set ScaleRadius
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setScaleRadius(scaleIndex: number, value: number): void;

        /** To set StartAngle
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setStartAngle(scaleIndex: number, value: number): void;

        /** To set SubGaugeLocation
         * @param {number} scaleIndex value for the gauge
         * @param {number} GaugeIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setSubGaugeLocation(scaleIndex: number, GaugeIndex: number, value: number): void;

        /** To set SweepAngle
         * @param {number} scaleIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setSweepAngle(scaleIndex: number, value: number): void;

        /** To set TickAngle
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickAngle(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set TickDistanceFromScale
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickDistanceFromScale(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set TickHeight
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickHeight(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set TickPlacement
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickPlacement(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set TickStyle
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickStyle(scaleIndex: number, tickIndex: number, value: number): void;

        /** To set TickWidth
         * @param {number} scaleIndex value for the gauge
         * @param {number} tickIndex value for the gauge
         * @param {number} value for the gauge
         * @returns {void}
         */
        setTickWidth(scaleIndex: number, tickIndex: number, value: number): void;
    }
    export namespace CircularGauge {

        export interface Model {

            /** Specifies animationSpeed of circular gauge
             * @Default {500}
             */
            animationSpeed?: number;

            /** Specifies the background color of circular gauge.
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specify distanceFromCorner value of circular gauge
             * @Default {center}
             */
            distanceFromCorner?: number;

            /** Specify range Z-order placement of circular gauge.
             * @Default {Rear}
             */
            rangeZOrder?: ej.datavisualization.CircularGauge.RangeZOrderPlacement|string;

            /** Specify animate value of circular gauge
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Specify to convert the  date object to  string, using locale settings.
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Controls whether circular gauge has to be responsive while resizing.
             * @Default {false}
             */
            enableResize?: boolean;

            /** This provides options for customizing export settings
             */
            exportSettings?: ExportSettings;

            /** Specify the frame of circular gauge
             * @Default {Object}
             */
            frame?: Frame;

            /** Specify gaugePosition value of circular gauge See GaugePosition
             * @Default {center}
             */
            gaugePosition?: ej.datavisualization.CircularGauge.gaugePosition|string;

            /** Specifies the height of circular gauge.
             * @Default {360}
             */
            height?: number;

            /** Specifies the interiorGradient of circular gauge.
             * @Default {null}
             */
            interiorGradient?: any;

            /** Specify isRadialGradient value of circular gauge
             * @Default {false}
             */
            isRadialGradient?: boolean;

            /** Specify isResponsive value of circular gauge
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Name of the culture based on which circular gauge should be localized.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the maximum value of circular gauge.
             * @Default {100}
             */
            maximum?: number;

            /** Specifies the minimum value of circular gauge.
             * @Default {0}
             */
            minimum?: number;

            /** Specify outerCustomLabelPosition value of circular gauge See
             * @Default {bottom}
             */
            outerCustomLabelPosition?: ej.datavisualization.CircularGauge.OuterCustomLabelPosition|string;

            /** Specifies the radius of circular gauge.
             * @Default {180}
             */
            radius?: number;

            /** Specify readonly value of circular gauge
             * @Default {true}
             */
            readOnly?: boolean;

            /** Specify the pointers, ticks, labels, indicators, ranges of circular gauge
             * @Default {null}
             */
            scales?: Scale[];

            /** Specify the theme of circular gauge.
             * @Default {flatlight}
             */
            theme?: string;

            /** Options to customize the legend.
             */
            legend?: Legend;

            /** Specify tooltip option of circular gauge
             * @Default {object}
             */
            tooltip?: Tooltip;

            /** Specifies the value of circular gauge.
             * @Default {0}
             */
            value?: number;

            /** Specifies the width of circular gauge.
             * @Default {360}
             */
            width?: number;

            /** Fires before rendering the legend item. This event is fired for each legend item in CircularGauge. You can use this event to customize legend item shape or add custom text to
             * legend item.
             */
            legendItemRender?(e: LegendItemRenderEventArgs): void;

            /** Fires on clicking the legend item.
             */
            legendItemClick?(e: LegendItemClickEventArgs): void;

            /** Fires when mouse moving on ranges.
             */
            rangeMouseMove?(e: RangeMouseMoveEventArgs): void;

            /** Triggers while the custom labels are being drawn on the gauge.
             */
            drawCustomLabel?(e: DrawCustomLabelEventArgs): void;

            /** Triggers while the indicators are being started to drawn on the gauge.
             */
            drawIndicators?(e: DrawIndicatorsEventArgs): void;

            /** Triggers while the labels are being drawn on the gauge.
             */
            drawLabels?(e: DrawLabelsEventArgs): void;

            /** Triggers while the pointer cap is being drawn on the gauge.
             */
            drawPointerCap?(e: DrawPointerCapEventArgs): void;

            /** Triggers while the pointers are being drawn on the gauge.
             */
            drawPointers?(e: DrawPointersEventArgs): void;

            /** Triggers when the ranges begin to be getting drawn on the gauge.
             */
            drawRange?(e: DrawRangeEventArgs): void;

            /** Triggers while the ticks are being drawn on the gauge.
             */
            drawTicks?(e: DrawTicksEventArgs): void;

            /** Triggers while the gauge start to Load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when the left mouse button is clicked.
             */
            mouseClick?(e: MouseClickEventArgs): void;

            /** Triggers when clicking and dragging the mouse pointer over the gauge pointer.
             */
            mouseClickMove?(e: MouseClickMoveEventArgs): void;

            /** Triggers when the mouse click is released.
             */
            mouseClickUp?(e: MouseClickUpEventArgs): void;

            /** Triggers when the rendering of the gauge is completed.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Fires, on double clicking the circular gauge.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the circular gauge.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LegendItemRenderEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the circulargauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Instance of the legend item object that is about to be rendered
             */
            data?: any;
        }

        export interface LegendItemClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the circulargauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Instance of the legend item object that is about to be rendered
             */
            data?: any;
        }

        export interface RangeMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the circulargauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Region of ranges
             */
            data?: any;
        }

        export interface DrawCustomLabelEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the custom label
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the custom label belongs.
             */
            scaleIndex?: number;

            /** returns the custom label style
             */
            style?: string;

            /** returns the current custom label element.
             */
            customLabelElement?: any;

            /** returns the index of the custom label.
             */
            customLabelIndex?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawIndicatorsEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the indicator
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the indicator belongs.
             */
            scaleIndex?: number;

            /** returns the indicator style
             */
            style?: string;

            /** returns the current indicator element.
             */
            indicatorElement?: any;

            /** returns the index of the indicator.
             */
            indicatorIndex?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawLabelsEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the labels
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the label belongs.
             */
            scaleIndex?: number;

            /** returns the label style
             */
            style?: string;

            /** returns the angle of the labels.
             */
            angle?: number;

            /** returns the current label element.
             */
            element?: any;

            /** returns the index of the label.
             */
            index?: number;

            /** returns the value of the label.
             */
            pointerValue?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawPointerCapEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the startX and startY of the pointer cap.
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the pointer cap style
             */
            style?: string;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawPointersEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the pointer
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the angle of the pointer.
             */
            angle?: number;

            /** returns the current pointer element.
             */
            element?: any;

            /** returns the index of the pointer.
             */
            index?: number;

            /** returns the value of the pointer.
             */
            value?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawRangeEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the range
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the range belongs.
             */
            scaleIndex?: number;

            /** returns the range style
             */
            style?: string;

            /** returns the current range element.
             */
            rangeElement?: any;

            /** returns the index of the range.
             */
            rangeIndex?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DrawTicksEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the startX and startY of the ticks
             */
            position?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the tick belongs.
             */
            scaleIndex?: number;

            /** returns the ticks style
             */
            style?: string;

            /** returns the angle of the tick.
             */
            angle?: number;

            /** returns the current tick element.
             */
            element?: any;

            /** returns the index of the tick.
             */
            index?: number;

            /** returns the label value of the tick.
             */
            pointerValue?: number;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface LoadEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            Model?: any;

            /** returns the entire scale element.
             */
            scaleElement?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface MouseClickEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            index?: number;

            /** returns the pointer element.
             */
            element?: any;

            /** returns the value of the pointer.
             */
            value?: number;

            /** returns the angle of the pointer.
             */
            angle?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface MouseClickMoveEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            index?: number;

            /** returns the pointer element.
             */
            element?: any;

            /** returns the value of the pointer.
             */
            value?: number;

            /** returns the angle of the pointer.
             */
            angle?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface MouseClickUpEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: any;

            /** returns the scale element.
             */
            scaleElement?: any;

            /** returns the scaleIndex to which the pointer belongs.
             */
            scaleIndex?: number;

            /** returns the context element
             */
            context?: any;

            /** returns the pointer Index
             */
            index?: number;

            /** returns the pointer element.
             */
            element?: any;

            /** returns the value of the pointer.
             */
            value?: number;

            /** returns the angle of the pointer.
             */
            angle?: number;

            /** returns the pointer style
             */
            style?: string;

            /** returns the startX and startY of the pointer.
             */
            position?: any;
        }

        export interface RenderCompleteEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the context element
             */
            context?: any;

            /** returns the entire scale element.
             */
            scaleElement?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the circular gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to circular gauge area.id - ID of the target element.    size - Width and height of the circular gauge.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the circular gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to circular gauge area.id - ID of the target element.    size - Width and height of the circular gauge.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface ExportSettings {

            /** Specifies the downloading filename
             * @Default {CircularGauge}
             */
            filename?: string;

            /** Specifies the format of the file to export
             * @Default {png}
             */
            type?: ej.datavisualization.CircularGauge.ExportingType|string;

            /** Specifies the name of the action URL
             */
            action?: string;

            /** Specifies the mode of exporting
             * @Default {client}
             */
            mode?: ej.datavisualization.CircularGauge.ExportingMode|string;
        }

        export interface Frame {

            /** Specify the URL of the frame background image for circular gauge
             * @Default {null}
             */
            backgroundImageUrl?: string;

            /** Specifies the frameType of circular gauge. See
             * @Default {FullCircle}
             */
            frameType?: ej.datavisualization.CircularGauge.FrameType|string;

            /** Specifies the end angle for the half circular frame.
             * @Default {360}
             */
            halfCircleFrameEndAngle?: number;

            /** Specifies the start angle for the half circular frame.
             * @Default {180}
             */
            halfCircleFrameStartAngle?: number;
        }

        export interface ScalesBorder {

            /** Specify border color for scales of circular gauge
             * @Default {null}
             */
            color?: string;

            /** Specify border width of circular gauge
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesCustomLabelsPosition {

            /** Specify x-axis position of label
             * @Default {0}
             */
            x?: number;

            /** Specify y-axis  position of labels.
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesCustomLabelsFont {

            /** Specify font fontFamily for custom labels.
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specify font Style for custom labels.
             * @Default {Bold}
             */
            fontStyle?: string;

            /** Specify font size for custom labels.
             * @Default {12px}
             */
            size?: string;
        }

        export interface ScalesCustomLabel {

            /** Value of the custom labels.
             */
            value?: string;

            /** Color of the custom labels.
             */
            color?: string;

            /** Specify position of custom labels
             * @Default {Object}
             */
            position?: ScalesCustomLabelsPosition;

            /** Specify angle for the rotation of the custom labels in degrees.
             * @Default {0}
             */
            textAngle?: number;

            /** Specify font for custom labels
             * @Default {Object}
             */
            font?: ScalesCustomLabelsFont;

            /** Specifies the position of the  custom labels. See
             * @Default {inner}
             */
            positionType?: ej.datavisualization.CircularGauge.CustomLabelPositionType|string;
        }

        export interface ScalesIndicatorsPosition {

            /** Specify x-axis of position of circular gauge
             * @Default {0}
             */
            x?: number;

            /** Specify y-axis of position of circular gauge
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesIndicatorsStateRange {

            /** Specify backgroundColor for indicator of circular gauge
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specify borderColor for indicator of circular gauge
             * @Default {null}
             */
            borderColor?: string;

            /** Specify end value for each specified state of circular gauge
             * @Default {0}
             */
            endValue?: number;

            /** Specify value of the font as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
             * @Default {null}
             */
            font?: any;

            /** Specify start value for each specified state of circular gauge
             * @Default {0}
             */
            startValue?: number;

            /** Specify value of the text as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
             */
            text?: string;

            /** Specify value of the textColor as the indicator when the indicator style is set with the value &quot;text&quot; of circular gauge
             * @Default {null}
             */
            textColor?: string;
        }

        export interface ScalesIndicator {

            /** Specify indicator height of circular gauge
             * @Default {15}
             */
            height?: number;

            /** Specify imageUrl of circular gauge
             * @Default {null}
             */
            imageUrl?: string;

            /** Specify position of circular gauge
             * @Default {Object}
             */
            position?: ScalesIndicatorsPosition;

            /** Specify the various states of circular gauge
             * @Default {Array}
             */
            stateRanges?: ScalesIndicatorsStateRange[];

            /** Specify indicator style of circular gauge. See
             * @Default {Circle}
             */
            type?: ej.datavisualization.CircularGauge.IndicatorTypes|string;

            /** Specify indicator width of circular gauge
             * @Default {15}
             */
            width?: number;
        }

        export interface ScalesLabelsFont {

            /** Specify font fontFamily for labels of circular gauge
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specify font Style for labels of circular gauge
             * @Default {Bold}
             */
            fontStyle?: string;

            /** Specify font size for labels of circular gauge
             * @Default {11px}
             */
            size?: string;
        }

        export interface ScalesLabel {

            /** Specify the angle for the labels of circular gauge
             * @Default {0}
             */
            angle?: number;

            /** Specify labels autoAngle value of circular gauge
             * @Default {false}
             */
            autoAngle?: boolean;

            /** Specify label color of circular gauge
             * @Default {null}
             */
            color?: string;

            /** Specify distanceFromScale value for labels of circular gauge
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specify font for labels of circular gauge
             * @Default {Object}
             */
            font?: ScalesLabelsFont;

            /** Specify includeFirstValue of circular gauge
             * @Default {true}
             */
            includeFirstValue?: boolean;

            /** Specify opacity value for labels of circular gauge
             * @Default {null}
             */
            opacity?: number;

            /** Specify label placement of circular gauge. See
             * @Default {Near}
             */
            placement?: ej.datavisualization.CircularGauge.Placement|string;

            /** Specify label Style of circular gauge. See
             * @Default {Major}
             */
            type?: ej.datavisualization.CircularGauge.LabelType|string;

            /** Specify unitText of circular gauge
             */
            unitText?: string;

            /** Specify unitTextPosition of circular gauge. See UnitTextPosition
             * @Default {Back}
             */
            unitTextPosition?: ej.datavisualization.CircularGauge.UnitTextPlacement|string;
        }

        export interface ScalesPointerCap {

            /** Specify cap backgroundColor of circular gauge
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specify cap borderColor of circular gauge
             * @Default {null}
             */
            borderColor?: string;

            /** Specify pointerCap borderWidth value of circular gauge
             * @Default {3}
             */
            borderWidth?: number;

            /** Specify cap interiorGradient value of circular gauge
             * @Default {null}
             */
            interiorGradient?: any;

            /** Specify pointerCap Radius value of circular gauge
             * @Default {7}
             */
            radius?: number;
        }

        export interface ScalesPointersBorder {

            /** Specify border color for pointer of circular gauge
             * @Default {null}
             */
            color?: string;

            /** Specify border width for pointers of circular gauge
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesPointersPointerValueTextFont {

            /** Specify pointer value text font family of circular gauge.
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specify pointer value text font style of circular gauge.
             * @Default {Bold}
             */
            fontStyle?: string;

            /** Specify pointer value text size of circular gauge.
             * @Default {11px}
             */
            size?: string;
        }

        export interface ScalesPointersPointerValueText {

            /** Specify pointer text angle of circular gauge.
             * @Default {0}
             */
            angle?: number;

            /** Specify pointer text auto angle of circular gauge.
             * @Default {false}
             */
            autoAngle?: boolean;

            /** Specify pointer value text color of circular gauge.
             * @Default {#8c8c8c}
             */
            color?: string;

            /** Specify pointer value text distance from pointer of circular gauge.
             * @Default {20}
             */
            distance?: number;

            /** Specify pointer value text font option of circular gauge.
             * @Default {object}
             */
            font?: ScalesPointersPointerValueTextFont;

            /** Specify pointer value text opacity of circular gauge.
             * @Default {1}
             */
            opacity?: number;

            /** enable pointer value text visibility of circular gauge.
             * @Default {false}
             */
            showValue?: boolean;
        }

        export interface ScalesPointer {

            /** Specify backgroundColor for the pointer of circular gauge
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specify backNeedleLength of circular gauge
             * @Default {10}
             */
            backNeedleLength?: number;

            /** Specify the border for pointers of circular gauge
             * @Default {Object}
             */
            border?: ScalesPointersBorder;

            /** Specify distanceFromScale value for pointers of circular gauge
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specify pointer gradients of circular gauge
             * @Default {null}
             */
            gradients?: any;

            /** Specify pointer image of circular gauge.It is applicable for both marker as well as needle type pointers.
             * @Default {NULL}
             */
            imageUrl?: string;

            /** Specify pointer length of circular gauge
             * @Default {150}
             */
            length?: number;

            /** Specify marker Style value of circular gauge. See
             * @Default {Rectangle}
             */
            markerType?: ej.datavisualization.CircularGauge.MarkerType|string;

            /** Specify needle Style value of circular gauge. See
             * @Default {Triangle}
             */
            needleType?: ej.datavisualization.CircularGauge.NeedleType|string;

            /** Specify opacity value for pointer of circular gauge
             * @Default {1}
             */
            opacity?: number;

            /** Specify radius value for pointer of circular gauge
             * @Default {null}
             */
            radius?: number;

            /** Specify pointer Placement value of circular gauge. See PointerPlacement
             * @Default {Near}
             */
            placement?: ej.datavisualization.CircularGauge.Placement|string;

            /** Specify pointer value text of circular gauge.
             * @Default {Object}
             */
            pointerValueText?: ScalesPointersPointerValueText;

            /** Specify showBackNeedle value of circular gauge
             * @Default {false}
             */
            showBackNeedle?: boolean;

            /** Specify pointer type value of circular gauge. See
             * @Default {Needle}
             */
            type?: ej.datavisualization.CircularGauge.PointerType|string;

            /** Specify value of the pointer of circular gauge
             * @Default {null}
             */
            value?: number;

            /** Specify pointer width of circular gauge
             * @Default {7}
             */
            width?: number;
        }

        export interface ScalesRangesBorder {

            /** Specify border color for ranges of circular gauge
             * @Default {#32b3c6}
             */
            color?: string;

            /** Specify border width for ranges of circular gauge
             * @Default {1.5}
             */
            width?: number;
        }

        export interface ScalesRange {

            /** Specify backgroundColor for the ranges of circular gauge
             * @Default {#32b3c6}
             */
            backgroundColor?: string;

            /** Specify text for the ranges of circular gauge
             * @Default {null}
             */
            legendText?: string;

            /** Specify border for ranges of circular gauge
             * @Default {Object}
             */
            border?: ScalesRangesBorder;

            /** Specify distanceFromScale value for ranges of circular gauge
             * @Default {25}
             */
            distanceFromScale?: number;

            /** Specify endValue for ranges of circular gauge
             * @Default {null}
             */
            endValue?: number;

            /** Specify endWidth for ranges of circular gauge
             * @Default {10}
             */
            endWidth?: number;

            /** Specify range gradients of circular gauge
             * @Default {null}
             */
            gradients?: any;

            /** Specify opacity value for ranges of circular gauge
             * @Default {null}
             */
            opacity?: number;

            /** Specify placement of circular gauge. See RangePlacement
             * @Default {Near}
             */
            placement?: ej.datavisualization.CircularGauge.Placement|string;

            /** Specify size of the range value of circular gauge
             * @Default {5}
             */
            size?: number;

            /** Specify startValue for ranges of circular gauge
             * @Default {null}
             */
            startValue?: number;

            /** Specify startWidth of circular gauge
             * @Default {[Array.number] scale.ranges.startWidth = 10}
             */
            startWidth?: number;
        }

        export interface ScalesSubGaugesPosition {

            /** Specify x-axis position for sub-gauge of circular gauge
             * @Default {0}
             */
            x?: number;

            /** Specify y-axis position for sub-gauge of circular gauge
             * @Default {0}
             */
            y?: number;
        }

        export interface ScalesSubGauge {

            /** Specify subGauge Height of circular gauge
             * @Default {150}
             */
            height?: number;

            /** Specify position for sub-gauge of circular gauge
             * @Default {Object}
             */
            position?: ScalesSubGaugesPosition;

            /** Specify subGauge Width of circular gauge
             * @Default {150}
             */
            width?: number;
        }

        export interface ScalesTick {

            /** Specify the angle for the ticks of circular gauge
             * @Default {0}
             */
            angle?: number;

            /** Specify tick color of circular gauge
             * @Default {null}
             */
            color?: string;

            /** Specify distanceFromScale value for ticks of circular gauge
             * @Default {0}
             */
            distanceFromScale?: number;

            /** Specify tick height of circular gauge
             * @Default {16}
             */
            height?: number;

            /** Specify tick placement of circular gauge. See TickPlacement
             * @Default {Near}
             */
            placement?: ej.datavisualization.CircularGauge.Placement|string;

            /** Specify tick Style of circular gauge. See TickType
             * @Default {Major}
             */
            type?: ej.datavisualization.CircularGauge.LabelType|string;

            /** Specify tick width of circular gauge
             * @Default {3}
             */
            width?: number;
        }

        export interface Scale {

            /** Specify backgroundColor for the scale of circular gauge
             * @Default {null}
             */
            backgroundColor?: string;

            /** Specify border for scales of circular gauge
             * @Default {Object}
             */
            border?: ScalesBorder;

            /** Specify scale direction of circular gauge. See
             * @Default {Clockwise}
             */
            direction?: ej.datavisualization.CircularGauge.Direction|string;

            /** Specify the custom labels for the scales.
             * @Default {Array}
             */
            customLabels?: ScalesCustomLabel[];

            /** Specify representing state of circular gauge
             * @Default {Array}
             */
            indicators?: ScalesIndicator[];

            /** Specify the text values displayed in a meaningful manner alongside the ticks of circular gauge
             * @Default {Array}
             */
            labels?: ScalesLabel[];

            /** Specify majorIntervalValue of circular gauge
             * @Default {10}
             */
            majorIntervalValue?: number;

            /** Specify maximum scale value of circular gauge
             * @Default {null}
             */
            maximum?: number;

            /** Specify minimum scale value of circular gauge
             * @Default {null}
             */
            minimum?: number;

            /** Specify minorIntervalValue of circular gauge
             * @Default {2}
             */
            minorIntervalValue?: number;

            /** Specify opacity value of circular gauge
             * @Default {1}
             */
            opacity?: number;

            /** Specify pointer cap of circular gauge
             * @Default {Object}
             */
            pointerCap?: ScalesPointerCap;

            /** Specify pointers value of circular gauge
             * @Default {Array}
             */
            pointers?: ScalesPointer[];

            /** Specify scale radius of circular gauge
             * @Default {170}
             */
            radius?: number;

            /** Specify ranges value of circular gauge
             * @Default {Array}
             */
            ranges?: ScalesRange[];

            /** Specify shadowOffset value of circular gauge
             * @Default {0}
             */
            shadowOffset?: number;

            /** Specify showIndicators of circular gauge
             * @Default {false}
             */
            showIndicators?: boolean;

            /** Specify showLabels of circular gauge
             * @Default {true}
             */
            showLabels?: boolean;

            /** Specify showPointers of circular gauge
             * @Default {true}
             */
            showPointers?: boolean;

            /** Specify showRanges of circular gauge
             * @Default {false}
             */
            showRanges?: boolean;

            /** Specify showScaleBar of circular gauge
             * @Default {false}
             */
            showScaleBar?: boolean;

            /** Specify showTicks of circular gauge
             * @Default {true}
             */
            showTicks?: boolean;

            /** Specify scaleBar size of circular gauge
             * @Default {6}
             */
            size?: number;

            /** Specify startAngle of circular gauge
             * @Default {115}
             */
            startAngle?: number;

            /** Specify subGauge of circular gauge
             * @Default {Array}
             */
            subGauges?: ScalesSubGauge[];

            /** Specify sweepAngle of circular gauge
             * @Default {310}
             */
            sweepAngle?: number;

            /** Specify ticks of circular gauge
             * @Default {Array}
             */
            ticks?: ScalesTick[];
        }

        export interface LegendBorder {

            /** Border color of the legend.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the legend.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendItemStyleBorder {

            /** Border color of the legend items.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the legend items.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendItemStyle {

            /** Options for customizing the border of legend items.
             */
            border?: LegendItemStyleBorder;

            /** Specifies the height of the  legend item shapes.
             * @Default {10}
             */
            height?: number;

            /** Specifies the width of the  legend item shapes.
             * @Default {10}
             */
            width?: number;
        }

        export interface LegendSize {

            /** Specify the height of the legend. Height can be specified in pixel.
             * @Default {null}
             */
            height?: string;

            /** Specify the width of the legend. Width can be specified in pixel.
             * @Default {null}
             */
            width?: string;
        }

        export interface LegendFont {

            /** Font family for legend item text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend item text.
             * @Default {Normal}
             */
            fontStyle?: string;

            /** Font weight for legend item text.
             * @Default {Regular}
             */
            fontWeight?: string;

            /** Font size for legend item text.
             * @Default {12px}
             */
            size?: string;

            /** Font color of the text for legend items.
             * @Default {null}
             */
            color?: string;
        }

        export interface Legend {

            /** Toggles the visibility of the legend.
             * @Default {false}
             */
            visible?: boolean;

            /** Toggles the visibility of the ranges.
             * @Default {true}
             */
            toggleVisibility?: boolean;

            /** Specifies the alignment of the legend.
             * @Default {Center. See Alignment}
             */
            alignment?: ej.datavisualization.CircularGauge.LegendAlignment|string;

            /** Options for customizing the legend border.
             */
            border?: LegendBorder;

            /** Fill color for the legend items. By using this property, it displays all legend item shapes in same color.Legend items representing invisible ranges is displayed in gray color.
             * @Default {null}
             */
            fill?: string;

            /** Gap or padding between the legend items.
             * @Default {20}
             */
            itemPadding?: number;

            /** Options to customize the style of legend items.
             */
            itemStyle?: LegendItemStyle;

            /** Opacity of the legend.
             * @Default {1}
             */
            opacity?: number;

            /** Places the legend at specified position. Legend can be placed at **left**, **right**, **top** or **bottom** of the circular gauge.
             * @Default {Bottom. See Position}
             */
            position?: ej.datavisualization.CircularGauge.LegendPosition|string;

            /** Shape of the legend items.
             * @Default {Circle. See Shape}
             */
            shape?: ej.datavisualization.CircularGauge.LegendShape|string;

            /** Options to customize the size of the legend.
             */
            size?: LegendSize;

            /** Options to customize the font used for legend item text.
             */
            font?: LegendFont;
        }

        export interface Tooltip {

            /** enable showCustomLabelTooltip of circular gauge
             * @Default {false}
             */
            showCustomLabelTooltip?: boolean;

            /** enable showLabelTooltip of circular gauge
             * @Default {false}
             */
            showLabelTooltip?: boolean;

            /** Specify tooltip templateID of circular gauge
             * @Default {false}
             */
            templateID?: string;
        }
    }
    namespace CircularGauge {
        enum RangeZOrderPlacement {
            //string
            Rear,
            //string
            Front,
        }
    }
    namespace CircularGauge {
        enum ExportingType {
            //string
            PNG,
            //string
            JPG,
        }
    }
    namespace CircularGauge {
        enum ExportingMode {
            //string
            ServerSide,
            //string
            ClientSide,
        }
    }
    namespace CircularGauge {
        enum FrameType {
            //string
            FullCircle,
            //string
            HalfCircle,
        }
    }
    namespace CircularGauge {
        enum gaugePosition {
            //string
            TopLeft,
            //string
            TopRight,
            //string
            TopCenter,
            //string
            MiddleLeft,
            //string
            MiddleRight,
            //string
            Center,
            //string
            BottomLeft,
            //string
            BottomRight,
            //string
            BottomCenter,
        }
    }
    namespace CircularGauge {
        enum OuterCustomLabelPosition {
            //string
            Top,
            //string
            Bottom,
            //string
            Right,
            //string
            Left,
        }
    }
    namespace CircularGauge {
        enum Direction {
            //string
            Clockwise,
            //string
            CounterClockwise,
        }
    }
    namespace CircularGauge {
        enum CustomLabelPositionType {
            //string
            Inner,
            //string
            Outer,
        }
    }
    namespace CircularGauge {
        enum IndicatorTypes {
            //string
            Rectangle,
            //string
            Circle,
            //string
            Text,
            //string
            RoundedRectangle,
            //string
            Image,
            //string
            Triangle,
            //string
            Diamond,
            //string
            Trapezoid,
            //string
            Pentagon,
            //string
            Wedge,
            //string
            Star,
            //string
            HorizontalLine,
            //string
            Verticalline,
            //string
            Cross,
            //string
            Uparrow,
            //string
            Downarrow,
            //string
            Leftarrow,
            //string
            Rightarrow,
            //string
            InvertedTriangle,
        }
    }
    namespace CircularGauge {
        enum Placement {
            //string
            Near,
            //string
            Far,
        }
    }
    namespace CircularGauge {
        enum LabelType {
            //string
            Major,
            //string
            Minor,
        }
    }
    namespace CircularGauge {
        enum UnitTextPlacement {
            //string
            Back,
            //string
            Front,
        }
    }
    namespace CircularGauge {
        enum MarkerType {
            //string
            Rectangle,
            //string
            Circle,
            //string
            Triangle,
            //string
            Ellipse,
            //string
            Diamond,
            //string
            Pentagon,
            //string
            Slider,
            //string
            Pointer,
            //string
            Wedge,
            //string
            Trapezoid,
            //string
            RoundedRectangle,
            //string
            Image,
        }
    }
    namespace CircularGauge {
        enum NeedleType {
            //string
            Triangle,
            //string
            Rectangle,
            //string
            Arrow,
            //string
            Image,
            //string
            Trapezoid,
        }
    }
    namespace CircularGauge {
        enum PointerType {
            //string
            Needle,
            //string
            Marker,
        }
    }
    namespace CircularGauge {
        enum LegendAlignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace CircularGauge {
        enum LegendPosition {
            //string
            Left,
            //string
            Right,
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace CircularGauge {
        enum LegendShape {
            //string
            Rectangle,
            //string
            Circle,
            //string
            Triangle,
            //string
            Ellipse,
            //string
            Diamond,
            //string
            Pentagon,
            //string
            Slider,
            //string
            Trapezoid,
            //string
            Line,
        }
    }

    class DigitalGauge extends ej.Widget {
        static fn: DigitalGauge;
        constructor(element: JQuery | Element, options?: DigitalGauge.Model);
        static Locale: any;
        model: DigitalGauge.Model;
        defaults: DigitalGauge.Model;

        /** To destroy the digital gauge
         * @returns {void}
         */
        destroy(): void;

        /** To export Digital Gauge as Image
         * @param {string} fileName for the Image
         * @param {string} fileType for the Image
         * @returns {boolean}
         */
        exportImage(fileName: string, fileType: string): boolean;

        /** Gets the location of an item that is displayed on the gauge.
         * @param {number} Position value of an item that is displayed on the gauge.
         * @returns {any}
         */
        getPosition(itemIndex: number): any;

        /** ClientSideMethod getValue Gets the value of an item that is displayed on the gauge
         * @param {number} Index value of an item that displayed on the gauge
         * @returns {any}
         */
        getValue(itemIndex: number): any;

        /** Refresh the digital gauge widget
         * @returns {void}
         */
        refresh(): void;

        /** ClientSideMethod Set Position Sets the location of an item to be displayed in the gauge
         * @param {number} Index value of the digital gauge item
         * @param {any} Location value of the digital gauge
         * @returns {void}
         */
        setPosition(itemIndex: number, value: any): void;

        /** ClientSideMethod SetValue Sets the value of an item to be displayed in the gauge.
         * @param {number} Index value of the digital gauge item
         * @param {string} Text value to be displayed in the gaugeS
         * @returns {void}
         */
        setValue(itemIndex: number, value: string): void;
    }
    export namespace DigitalGauge {

        export interface Model {

            /** This provides options for customizing export settings
             */
            exportSettings?: ExportSettings;

            /** Specifies the frame of the Digital gauge.
             * @Default {{backgroundImageUrl: null, innerWidth: 6, outerWidth: 10}}
             */
            frame?: Frame;

            /** Specifies the height of the DigitalGauge.
             * @Default {150}
             */
            height?: number;

            /** Specifies the resize option of the DigitalGauge.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies the responsiveness of the Digital gauge
             * @Default {false}
             */
            enableResize?: boolean;

            /** Specifies the items for the DigitalGauge.
             * @Default {null}
             */
            items?: Item[];

            /** Specifies the matrixSegmentData for the DigitalGauge.
             */
            matrixSegmentData?: any;

            /** Specifies the segmentData for the DigitalGauge.
             */
            segmentData?: any;

            /** Specifies the themes for the Digital gauge. See Themes
             * @Default {flatlight}
             */
            themes?: string;

            /** Specifies the value to the DigitalGauge.
             * @Default {text}
             */
            value?: string;

            /** Specifies the width for the Digital gauge.
             * @Default {400}
             */
            width?: number;

            /** Triggers when the gauge is initialized.
             */
            init?(e: InitEventArgs): void;

            /** Triggers when the gauge item rendering.
             */
            itemRendering?(e: ItemRenderingEventArgs): void;

            /** Triggers when the gauge is start to load.
             */
            load?(e: LoadEventArgs): void;

            /** Triggers when the gauge render is completed.
             */
            renderComplete?(e: RenderCompleteEventArgs): void;

            /** Fires, on clicking the gauge.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the digital gauge.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the digital gauge.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface InitEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the all the options of the items.
             */
            items?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ItemRenderingEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the all the options of the items.
             */
            items?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface LoadEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the all the options of the items.
             */
            items?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RenderCompleteEventArgs {

            /** returns the object of the gauge.
             */
            object?: any;

            /** returns the cancel option value
             */
            cancel?: boolean;

            /** returns the all the options of the items.
             */
            items?: any;

            /** returns the context element
             */
            context?: any;

            /** returns the gauge model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to gauge area.id - ID of the target element.    size - Width and height of the gauge.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the digital gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to digital gauge area.id - ID of the target element.    size - Width and height of the digital gauge.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the digital gauge model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to digital gauge area.id - ID of the target element.    size - Width and height of the digital gauge.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface ExportSettings {

            /** Specifies the downloading filename
             * @Default {DigitalGauge}
             */
            filename?: string;

            /** Specifies the format of the file to export
             * @Default {png}
             */
            type?: ej.datavisualization.DigitalGauge.ExportingType|string;

            /** Specifies the name of the action URL
             */
            action?: string;

            /** Specifies the mode of exporting
             * @Default {client}
             */
            mode?: ej.datavisualization.DigitalGauge.ExportingMode|string;
        }

        export interface Frame {

            /** Specifies the URL of an image to be displayed as background of the Digital gauge.
             * @Default {null}
             */
            backgroundImageUrl?: string;

            /** Specifies the inner width for the frame, when the background image has been set for the Digital gauge..
             * @Default {6}
             */
            innerWidth?: number;

            /** Specifies the outer width of the frame, when the background image has been set for the Digital gauge.
             * @Default {10}
             */
            outerWidth?: number;
        }

        export interface ItemsCharacterSettings {

            /** Specifies the CharacterCount value for the DigitalGauge.
             * @Default {4}
             */
            count?: number;

            /** Specifies the opacity value for the DigitalGauge.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the value for spacing between the characters
             * @Default {2}
             */
            spacing?: number;

            /** Specifies the character type for the text to be displayed.
             * @Default {ej.datavisualization.DigitalGauge.CharacterType.EightCrossEightDotMatrix}
             */
            type?: ej.datavisualization.DigitalGauge.CharacterType|string;
        }

        export interface ItemsFont {

            /** Set the font family value
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Set the font style for the font
             * @Default {italic}
             */
            fontStyle?: ej.datavisualization.DigitalGauge.FontStyle|string;

            /** Set the font size value
             * @Default {11px}
             */
            size?: string;
        }

        export interface ItemsPosition {

            /** Set the horizontal location for the text, where it needs to be placed within the gauge.
             * @Default {0}
             */
            x?: number;

            /** Set the vertical location for the text, where it needs to be placed within the gauge.
             * @Default {0}
             */
            y?: number;
        }

        export interface ItemsSegmentSettings {

            /** Set the color for the text segments.
             * @Default {null}
             */
            color?: string;

            /** Set the gradient for the text segments.
             * @Default {null}
             */
            gradient?: any;

            /** Set the length for the text segments.
             * @Default {2}
             */
            length?: number;

            /** Set the opacity for the text segments.
             * @Default {0}
             */
            opacity?: number;

            /** Set the spacing for the text segments.
             * @Default {1}
             */
            spacing?: number;

            /** Set the width for the text segments.
             * @Default {1}
             */
            width?: number;
        }

        export interface Item {

            /** Specifies the Character settings for the DigitalGauge.
             * @Default {null}
             */
            characterSettings?: ItemsCharacterSettings;

            /** Enable/Disable the custom font to be applied to the text in the gauge.
             * @Default {false}
             */
            enableCustomFont?: boolean;

            /** Set the specific font for the text, when the enableCustomFont is set to true
             * @Default {null}
             */
            font?: ItemsFont;

            /** Set the location for the text, where it needs to be placed within the gauge.
             * @Default {null}
             */
            position?: ItemsPosition;

            /** Set the segment settings for the digital gauge.
             * @Default {null}
             */
            segmentSettings?: ItemsSegmentSettings;

            /** Set the value for enabling/disabling the blurring effect for the shadows of the text
             * @Default {0}
             */
            shadowBlur?: number;

            /** Specifies the color of the text shadow.
             * @Default {null}
             */
            shadowColor?: string;

            /** Set the x offset value for the shadow of the text, indicating the location where it needs to be displayed.
             * @Default {1}
             */
            shadowOffsetX?: number;

            /** Set the y offset value for the shadow of the text, indicating the location where it needs to be displayed.
             * @Default {1}
             */
            shadowOffsetY?: number;

            /** Set the alignment of the text that is displayed within the gauge.See TextAlign
             * @Default {left}
             */
            textAlign?: string;

            /** Specifies the color of the text.
             * @Default {null}
             */
            textColor?: string;

            /** Specifies the text value.
             * @Default {null}
             */
            value?: string;
        }
    }
    namespace DigitalGauge {
        enum ExportingType {
            //string
            PNG,
            //string
            JPG,
        }
    }
    namespace DigitalGauge {
        enum ExportingMode {
            //string
            ServerSide,
            //string
            ClientSide,
        }
    }
    namespace DigitalGauge {
        enum CharacterType {
            //string
            SevenSegment,
            //string
            FourteenSegment,
            //string
            SixteenSegment,
            //string
            EightCrossEightDotMatrix,
            //string
            EightCrossEightSquareMatrix,
        }
    }
    namespace DigitalGauge {
        enum FontStyle {
            //string
            Normal,
            //string
            Bold,
            //string
            Italic,
            //string
            Underline,
            //string
            Strikeout,
        }
    }

    class Chart extends ej.Widget {
        static fn: Chart;
        constructor(element: JQuery | Element, options?: Chart.Model);
        static Locale: any;
        model: Chart.Model;
        defaults: Chart.Model;

        /** Animates the series and/or indicators in Chart. When parameter is not passed to this method, then all the series and indicators present in Chart are animated.
         * @param {any} If an array collection is passed as parameter, series and indicator objects passed in array collection are animated.ExampleIf a series or indicator object is passed
         * to this method, then the specific series or indicator is animated.Example,
         * @returns {void}
         */
        animate(options: any): void;

        /** Prints the rendered chart.
         * @returns {void}
         */
        print(): void;

        /** Exports chart as an image or to an excel file. Chart can be exported as an image only when exportCanvasRendering option is set to true.
         * @param {string} Type of the export operation to be performed. Following are the two export types that are supported now,1. 'image'2. 'excel'Example
         * @param {string} URL of the service, where the chart will be exported to excel.Example,
         * @param {boolean} When this parameter is true, all the chart objects initialized to the same document are exported to a single excel file. This is an optional parameter. By
         * default, it is false.Example,
         * @returns {any}
         */
        export(type: string, URL: string, exportMultipleChart: boolean): any;

        /** Redraws the entire chart. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
         * @returns {void}
         */
        redraw(): void;
    }
    export namespace Chart {

        export interface Model {

            /** Options for adding and customizing annotations in Chart.
             */
            annotations?: Annotation[];

            /** Sets the background color of the  chart.
             * @Default {transparent}
             */
            background?: string;

            /** URL of the image to be used as chart background.
             * @Default {null}
             */
            backGroundImageUrl?: string;

            /** Options for customizing the color, opacity and width of the chart border.
             */
            border?: Border;

            /** This provides options for customizing export settings
             */
            exportSettings?: ExportSettings;

            /** Options for configuring the border and background of the plot area.
             */
            chartArea?: ChartArea;

            /** Options to split Chart into multiple plotting areas vertically. Each object in the collection represents a plotting area in Chart.
             */
            columnDefinitions?: ColumnDefinition[];

            /** Options for configuring the properties of all the series. You can also override the options for specific series by using series collection.
             */
            commonSeriesOptions?: CommonSeriesOptions;

            /** Options for displaying the chart along with selected points while loading
             * @Default {[ ]}
             */
            selectedDataPointIndexes?: any[];

            /** Options for displaying and customizing the crosshair.
             */
            crosshair?: Crosshair;

            /** Depth of the 3D Chart from front view of series to background wall. This property is applicable only for 3D view.
             * @Default {100}
             */
            depth?: number;

            /** Controls whether 3D view has to be enabled or not. 3D view is supported only for column, bar. Stacking column, stacking bar, pie and doughnut series types.
             * @Default {false}
             */
            enable3D?: boolean;

            /** Controls whether Chart has to be rendered as Canvas or SVG. Canvas rendering supports all functionalities in SVG rendering except 3D Charts.
             * @Default {false}
             */
            enableCanvasRendering?: boolean;

            /** Controls whether the series has to be rendered at initial loading of chart, this will be useful in scenarios where chart is placed at the bottom of the web page and we need to
             * render the series only when the chart is visible while scrolling to the top.
             * @Default {true}
             */
            initSeriesRender?: boolean;

            /** Controls whether 3D view has to be rotated on dragging. This property is applicable only for 3D view.
             * @Default {false}
             */
            enableRotation?: boolean;

            /** Options to customize the technical indicators.
             */
            indicators?: Indicator[];

            /** Controls whether Chart has to be responsive while resizing.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Options to customize the legend items and legend title.
             */
            legend?: Legend;

            /** Name of the culture based on which chart should be localized. Number and date time values are localized with respect to the culture name.String type properties like title text are
             * not localized automatically. Provide localized text as value to string type properties.
             * @Default {en-US}
             */
            locale?: string;

            /** Palette is used to store the series fill color in array and apply the color to series collection in the order of series index.
             * @Default {null}
             */
            palette?: any[];

            /** Options to customize the left, right, top and bottom margins of chart area.
             */
            margin?: Margin;

            /** Perspective angle of the 3D view. Chart appears closer when perspective angle is decreased, and distant when perspective angle is increased.This property is applicable only when
             * 3D view is enabled
             * @Default {90}
             */
            perspectiveAngle?: number;

            /** This is a horizontal axis that contains options to configure axis and it is the primary x axis for all the series in series array. To override x axis for particular series, create
             * an axis object by providing unique name by using name property and add it to axes array. Then, assign the name to the seriesâ€™s xAxisName property to link both axis and series.
             */
            primaryXAxis?: PrimaryXAxis;

            /** To override x axis for particular series, create an axis object by providing unique name by using name property and add it to axes array. Then, assign the name to the seriesâ€™s
             * xAxisName property to link both axis and series.
             */
            axes?: Axis[];

            /** This is a vertical axis that contains options to configure axis. This is the primary y axis for all the series in series array. To override y axis for particular series, create an
             * axis object by providing unique name by using name property and add it to axes array. Then, assign the name to the seriesâ€™s yAxisName property to link both axis and series.
             */
            primaryYAxis?: PrimaryYAxis;

            /** Rotation angle of the 3D view. This property is applicable only when 3D view is enabled.
             * @Default {0}
             */
            rotation?: number;

            /** Options to split Chart into multiple plotting areas horizontally. Each object in the collection represents a plotting area in Chart.
             */
            rowDefinitions?: RowDefinition[];

            /** Specifies the properties used for customizing the series.
             */
            series?: Series[];

            /** Controls whether data points has to be displayed side by side or along the depth of the axis.
             * @Default {false}
             */
            sideBySideSeriesPlacement?: boolean;

            /** Options to customize the Chart size.
             */
            size?: Size;

            /** Specifies the theme for Chart.
             * @Default {Flatlight. See Theme}
             */
            theme?: ej.datavisualization.Chart.Theme|string;

            /** Slope angle of 3D Chart. This property is applicable only when 3D view is enabled.
             * @Default {0}
             */
            tilt?: number;

            /** Options for customizing the title and subtitle of Chart.
             */
            title?: Title;

            /** Width of the wall used in 3D Chart. Wall is present only in Cartesian type 3D series and not in 3D pie or Doughnut series. This property is applicable only when 3D view is enabled.
             * @Default {2}
             */
            wallSize?: number;

            /** Options for enabling zooming feature of chart.
             */
            zooming?: Zooming;

            /** Fires after the series animation is completed. This event will be triggered for each series when animation is enabled.
             */
            animationComplete?(e: AnimationCompleteEventArgs): void;

            /** Fires before rendering the labels. This event is fired for each label in axis. You can use this event to add custom text to axis labels.
             */
            axesLabelRendering?(e: AxesLabelRenderingEventArgs): void;

            /** Fires during the initialization of axis labels.
             */
            axesLabelsInitialize?(e: AxesLabelsInitializeEventArgs): void;

            /** Fires during axes range calculation. This event is fired for each axis present in Chart. You can use this event to customize axis range as required.
             */
            axesRangeCalculate?(e: AxesRangeCalculateEventArgs): void;

            /** Fires before rendering the axis title. This event is triggered for each axis with title. You can use this event to add custom text to axis title.
             */
            axesTitleRendering?(e: AxesTitleRenderingEventArgs): void;

            /** Fires during the calculation of chart area bounds. You can use this event to customize the bounds of chart area.
             */
            chartAreaBoundsCalculate?(e: ChartAreaBoundsCalculateEventArgs): void;

            /** Fires after chart is created.
             */
            create?(e: CreateEventArgs): void;

            /** Fires when chart is destroyed completely.
             */
            destroy?(e: DestroyEventArgs): void;

            /** Fires before rendering the data labels. This event is triggered for each data label in the series. You can use this event to add custom text in data labels.
             */
            displayTextRendering?(e: DisplayTextRenderingEventArgs): void;

            /** Fires during the calculation of legend bounds. You can use this event to customize the bounds of legend.
             */
            legendBoundsCalculate?(e: LegendBoundsCalculateEventArgs): void;

            /** Fires on clicking the legend item.
             */
            legendItemClick?(e: LegendItemClickEventArgs): void;

            /** Fires when moving mouse over legend item. You can use this event for hit testing on legend items.
             */
            legendItemMouseMove?(e: LegendItemMouseMoveEventArgs): void;

            /** Fires before rendering the legend item. This event is fired for each legend item in Chart. You can use this event to customize legend item shape or add custom text to legend item.
             */
            legendItemRendering?(e: LegendItemRenderingEventArgs): void;

            /** Fires before loading the chart.
             */
            load?(e: LoadEventArgs): void;

            /** Fires while performing rectangle zooming in chart.
             */
            zoomed?(e: ZoomedEventArgs): void;

            /** Fires after selected the data in chart.
             */
            rangeSelected?(e: RangeSelectedEventArgs): void;

            /** Fires on clicking a point in chart. You can use this event to handle clicks made on points.
             */
            pointRegionClick?(e: PointRegionClickEventArgs): void;

            /** Fires when mouse is moved over a point.
             */
            pointRegionMouseMove?(e: PointRegionMouseMoveEventArgs): void;

            /** Fires before rendering chart.
             */
            preRender?(e: PreRenderEventArgs): void;

            /** Fires after selecting a series. This event is triggered after selecting a series only if selection mode is series.
             */
            seriesRegionClick?(e: SeriesRegionClickEventArgs): void;

            /** Fires before rendering a series. This event is fired for each series in Chart.
             */
            seriesRendering?(e: SeriesRenderingEventArgs): void;

            /** Fires before rendering the marker symbols. This event is triggered for each marker in Chart.
             */
            symbolRendering?(e: SymbolRenderingEventArgs): void;

            /** Fires before rendering the Chart title. You can use this event to add custom text in Chart title.
             */
            titleRendering?(e: TitleRenderingEventArgs): void;

            /** Fires before rendering the tooltip. This event is fired when tooltip is enabled and mouse is hovered on a Chart point. You can use this event to customize tooltip before rendering.
             */
            toolTipInitialize?(e: ToolTipInitializeEventArgs): void;

            /** Fires before rendering crosshair tooltip in axis. This event is fired for each axis with crosshair label enabled. You can use this event to customize crosshair label before
             * rendering
             */
            trackAxisToolTip?(e: TrackAxisToolTipEventArgs): void;

            /** Fires before rendering trackball tooltip. This event is fired for each series in Chart because trackball tooltip is displayed for all the series. You can use this event to
             * customize the text displayed in trackball tooltip.
             */
            trackToolTip?(e: TrackToolTipEventArgs): void;

            /** Fires, on clicking the axis label.
             */
            axisLabelClick?(e: AxisLabelClickEventArgs): void;

            /** Fires on moving mouse over the axis label.
             */
            axisLabelMouseMove?(e: AxisLabelMouseMoveEventArgs): void;

            /** Fires, on the clicking the chart.
             */
            chartClick?(e: ChartClickEventArgs): void;

            /** Fires, on the clicking the Multi level labels of the chart .
             */
            multiLevelLabelClick?(e: MultiLevelLabelClickEventArgs): void;

            /** Fires on moving mouse over the chart.
             */
            chartMouseMove?(e: ChartMouseMoveEventArgs): void;

            /** Fires, on double clicking the chart.
             */
            chartDoubleClick?(e: ChartDoubleClickEventArgs): void;

            /** Fires when the mouse pointer leaves the chart
             */
            chartMouseLeave?(e: ChartMouseLeaveEventArgs): void;

            /** Fires on clicking the annotation.
             */
            annotationClick?(e: AnnotationClickEventArgs): void;

            /** Fires, after the chart is resized.
             */
            afterResize?(e: AfterResizeEventArgs): void;

            /** Fires, when chart size is changing.
             */
            beforeResize?(e: BeforeResizeEventArgs): void;

            /** Fires, when error bar is rendering.
             */
            errorBarRendering?(e: ErrorBarRenderingEventArgs): void;

            /** Fires, when multi level labels are rendering.
             */
            multiLevelLabelRendering?(e: MultiLevelLabelRenderingEventArgs): void;

            /** Fires, when trendlines are rendering.
             */
            trendlineRendering?(e: TrendlineRenderingEventArgs): void;

            /** Trigger, after the scrollbar position is changed.
             */
            scrollChanged?(e: ScrollChangedEventArgs): void;

            /** Event triggered when scroll starts
             */
            scrollStart?(e: ScrollStartEventArgs): void;

            /** Event triggered when scroll end
             */
            scrollEnd?(e: ScrollEndEventArgs): void;

            /** Fires when the dragging is started
             */
            dragStart?(e: DragStartEventArgs): void;

            /** Fires while  dragging
             */
            dragging?(e: DraggingEventArgs): void;

            /** Fires when the dragging is completed
             */
            dragEnd?(e: DragEndEventArgs): void;

            /** Fires when the sub Title of the chart is rendered
             */
            subTitleRendering?(e: SubTitleRenderingEventArgs): void;
        }

        export interface AnimationCompleteEventArgs {

            /** series - Instance of the series that completed has animation.
             */
            data?: any;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface AxesLabelRenderingEventArgs {

            /** axis - Instance of the corresponding axis.        label - Arguments of axis label value and text.
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface AxesLabelsInitializeEventArgs {

            /** dataAxes - Collection of axes in Chart
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface AxesRangeCalculateEventArgs {

            /** delta - Difference between minimum and maximum value of axis range.    interval - Interval value of axis range. Grid lines, tick lines and axis labels are drawn based on this
             * interval value.    max - Maximum value of axis range.    min - Minimum value of axis range.
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface AxesTitleRenderingEventArgs {

            /** axes - Instance of the axis whose title is being rendered    locationX - X-coordinate of title location    locationY - Y-coordinate of title location    title - Axis title
             * text. You can add custom text to the title.
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ChartAreaBoundsCalculateEventArgs {

            /** areaBoundsHeight - Height of the chart area.    areaBoundsWidth - Width of the chart area.    areaBoundsX - X-coordinate of the chart area.    areaBoundsY - Y-coordinate of the
             * chart area.
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface CreateEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DestroyEventArgs {

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DisplayTextRenderingEventArgs {

            /** text - Text displayed in data label. You can add custom text to the data label    locationX - X-coordinate of data label location    locationY - Y-coordinate of data label
             * location    seriesIndex - Index of the series in series Collection whose data label is being rendered    pointIndex - Index of the point in series whose data label is being
             * rendered
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LegendBoundsCalculateEventArgs {

            /** legendBoundsHeight - Height of the legend    legendBoundsWidth - Width of the legend.    legendBoundsRows - Number of rows to display the legend items
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the chart model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LegendItemClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** startX - X-coordinate of legend item in pixel    startY - Y-coordinate of legend item in pixel    LegendItem - Instance of the legend item object that is about to be rendered
             * style - Options to customize the legend item styles such as border, color, size, etcâ€¦,    Bounds - Instance that holds information about legend bounds and legend item bounds.
             * symbolShape - Name of the legend item shape. Use this option to customize legend item shape before rendering    series - Instance of the series object corresponding to the
             * legend item
             */
            data?: any;
        }

        export interface LegendItemMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** startX - X-coordinate of legend item in pixel    startY - Y-coordinate of legend item in pixel    LegendItem - Instance of the legend item object that is about to be rendered
             * style - Options to customize the legend item styles such as border, color, size, etcâ€¦,    Bounds - Instance that holds information about legend bounds and legend item bounds.
             * symbolShape - Name of the legend item shape. Use this option to customize legend item shape before rendering    series - Instance of the series object corresponding to the
             * legend item
             */
            data?: any;
        }

        export interface LegendItemRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** startX - X-coordinate of legend item in pixel    startY - Y-coordinate of legend item in pixel    legendItem - Instance of the legend item object that is about to be rendered
             * style - Options to customize the legend item styles such as border, color, size, etc.    symbolShape - Name of the legend item shape. Use this option to customize legend item
             * shape before rendering
             */
            data?: any;
        }

        export interface LoadEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ZoomedEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Selected data collection of object
             */
            data?: any;
        }

        export interface RangeSelectedEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Selected data collection of object
             */
            data?: any;
        }

        export interface PointRegionClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** locationX - X-coordinate of point in pixel    locationY - Y-coordinate of point in pixel    seriesIndex - Index of the series in series collection to which the point belongs
             * pointIndex - Index of the point in series
             */
            data?: any;
        }

        export interface PointRegionMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** locationX - X-coordinate of point in pixel    locationY - Y-coordinate of point in pixel    seriesIndex - Index of the series in series collection to which the point belongs
             * pointIndex - Index of the point in series
             */
            data?: any;
        }

        export interface PreRenderEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface SeriesRegionClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** series - Instance of the selected series    seriesIndex - Index of the selected series
             */
            data?: any;
        }

        export interface SeriesRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** series - Instance of the series which is about to get rendered
             */
            data?: any;
        }

        export interface SymbolRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - Instance that holds the location of marker symbol    style - Options to customize the marker style such as color, border and size
             */
            data?: any;
        }

        export interface TitleRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - Option to customize the title location in pixels    size - Read-only option to find the size of the title    title - Use this option to add custom text in title
             */
            data?: any;
        }

        export interface ToolTipInitializeEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** currentText - Text to be displayed in tooltip. Set this option to customize the text displayed in tooltip    pointIndex - Index of the point on which mouse is hovered
             * seriesIndex - Index of the series in series collection whose point is hovered by mouse
             */
            data?: any;
        }

        export interface TrackAxisToolTipEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - Location of the crosshair label in pixels    axisIndex - Index of the axis for which crosshair label is displayed    crossAxis - Instance of the chart axis object
             * for which cross hair label is displayed    currentTrackText - Text to be displayed in crosshair label. Use this option to add custom text in crosshair label
             */
            data?: any;
        }

        export interface TrackToolTipEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - Location of the trackball tooltip in pixels    pointIndex - Index of the point for which trackball tooltip is displayed    seriesIndex - Index of the series in
             * series collection    currentText - Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip    series - Instance of the series object
             * for which trackball tooltip is displayed.
             */
            data?: any;
        }

        export interface AxisLabelClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the labels in chart area.         index - Index of the label.    axis - Instance of the corresponding axis.    text - Label that is clicked.
             *
             */
            data?: any;
        }

        export interface AxisLabelMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the labels in chart area.         index - Index of the label.    axis - Instance of the corresponding axis.    text - Label that is hovered.
             *
             */
            data?: any;
        }

        export interface ChartClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to chart area.id - ID of the target element.    size - Width and height of the chart.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface MultiLevelLabelClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to chart area.    axis - axis of the multi level labels.    multiLevelLabel - Multi level label details
             */
            data?: any;
        }

        export interface ChartMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to chart area.id - ID of the target element.    size - Width and height of the chart.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface ChartDoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to chart area.id - ID of the target element.    size - Width and height of the chart.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface ChartMouseLeaveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to chart area.id - ID of the target element.    size - Width and height of the chart.    pageX - x-coordinate of the
             * pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface AnnotationClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the annotation in chart area.     contentData - Information about the annotation, like Coordinate unit, Region, content    pageX-
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface AfterResizeEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** width - Chart width, after resize    height - Chart height, after resize    prevWidth - Chart width, before resize    prevHeight - Chart height, before resize
             * originalWidth- Chart width, when the chart was first rendered    originalHeight - Chart height, when the chart was first rendered
             */
            data?: any;
        }

        export interface BeforeResizeEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** currentWidth - Chart width, before resize    currentHeight - Chart height, before resize    newWidth - Chart width, after resize    newHeight - Chart height, after resize
             */
            data?: any;
        }

        export interface ErrorBarRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** errorBar - Error bar Object
             */
            data?: any;
        }

        export interface MultiLevelLabelRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** MultiLevelLabels - MultiLevel Label Object
             */
            data?: any;
        }

        export interface TrendlineRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** trendlines - Trendline Object    series - Series data of the chart    forwardForecast - Forward Forecast value for the trendline    backwardForecast - Backward Forecast value
             * for the trendline
             */
            data?: any;
        }

        export interface ScrollChangedEventArgs {

            /** oldRange - returns the scrollbar position old start and end range value on change end of scrollbar    newRange - returns the scrollbar position new start and end range value
             * on change end of scrollbar
             */
            data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ScrollStartEventArgs {

            /** startRange - returns the scrollbar position starting range value on changing scrollbar    endRange - returns the scrollbar position end range value on changing scrollbar
             */
            data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ScrollEndEventArgs {

            /** oldRange - returns the scrollbar position old start and end range value on change end of scrollbar    newRange - returns the scrollbar position new start and end range value
             * on change end of scrollbar
             */
            data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DragStartEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** seriesIndex - Series Index of the point held for dragging    pointIndex - PointIndex of the point held for dragging    point - Information of the point held for dragging
             */
            data?: any;
        }

        export interface DraggingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** seriesIndex - Series Index of the point held for dragging    pointIndex - PointIndex of the point held for dragging    oldValue - Previous value of the point before dragging
             * newValue - Current value of the point
             */
            data?: any;
        }

        export interface DragEndEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** seriesIndex - Series Index of the point held for dragging    pointIndex - PointIndex of the point held for dragging    oldValue - Previous value of the point before dragging
             * newValue - Current value of the point    series - Contains the all the series information of the chart
             */
            data?: any;
        }

        export interface SubTitleRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the chart model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - location of the subTitle text    subtitle - text of the subtitle    size - Size of the Subtitle text
             */
            data?: any;
        }

        export interface AnnotationsMargin {

            /** Annotation is placed at the specified value above its original position.
             * @Default {0}
             */
            bottom?: number;

            /** Annotation is placed at the specified value from left side of its original position.
             * @Default {0}
             */
            left?: number;

            /** Annotation is placed at the specified value from the right side of its original position.
             * @Default {0}
             */
            right?: number;

            /** Annotation is placed at the specified value under its original position.
             * @Default {0}
             */
            top?: number;
        }

        export interface Annotation {

            /** Angle to rotate the annotation in degrees.
             * @Default {'0'}
             */
            angle?: number;

            /** Text content or id of a HTML element to be displayed as annotation.
             */
            content?: string;

            /** Specifies how annotations have to be placed in Chart.
             * @Default {none. See CoordinateUnit}
             */
            coordinateUnit?: ej.datavisualization.Chart.CoordinateUnit|string;

            /** Specifies the horizontal alignment of the annotation.
             * @Default {middle. See HorizontalAlignment}
             */
            horizontalAlignment?: ej.datavisualization.Chart.HorizontalAlignment|string;

            /** Options to customize the margin of annotation.
             */
            margin?: AnnotationsMargin;

            /** Controls the opacity of the annotation.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies whether annotation has to be placed with respect to chart or series.
             * @Default {chart. See Region}
             */
            region?: ej.datavisualization.Chart.Region|string;

            /** Specifies the vertical alignment of the annotation.
             * @Default {middle. See VerticalAlignment}
             */
            verticalAlignment?: ej.datavisualization.Chart.VerticalAlignment|string;

            /** Controls the visibility of the annotation.
             * @Default {false}
             */
            visible?: boolean;

            /** Represents the horizontal offset when coordinateUnit is pixels.when coordinateUnit is points, it represents the x-coordinate of axis bounded with xAxisName property or primary X
             * axis when xAxisName is not provided.This property is not applicable when coordinateUnit is none.
             * @Default {0}
             */
            x?: number;

            /** Name of the horizontal axis to be used for positioning the annotation. This property is applicable only when coordinateUnit is points.
             */
            xAxisName?: string;

            /** Represents the vertical offset when coordinateUnit is pixels.When coordinateUnit is points, it represents the y-coordinate of axis bounded with yAxisName property or primary Y
             * axis when yAxisName is not provided.This property is not applicable when coordinateUnit is none.
             * @Default {0}
             */
            y?: number;

            /** Name of the vertical axis to be used for positioning the annotation.This property is applicable only when coordinateUnit is points.
             */
            yAxisName?: string;
        }

        export interface Border {

            /** Border color of the chart.
             * @Default {null}
             */
            color?: string;

            /** Opacity of the chart border.
             * @Default {0.3}
             */
            opacity?: number;

            /** Width of the Chart border.
             * @Default {0}
             */
            width?: number;
        }

        export interface ExportSettings {

            /** Specifies the downloading filename
             * @Default {chart}
             */
            filename?: string;

            /** Specifies the name of the action URL
             */
            action?: string;

            /** Specifies the angle for rotation
             * @Default {0}
             */
            angle?: number;

            /** Specifies the format of the file to export
             * @Default {png}
             */
            type?: ej.datavisualization.Chart.ExportingType|string;

            /** Specifies the orientation of the document
             * @Default {portrait}
             */
            orientation?: ej.datavisualization.Chart.ExportingOrientation|string;

            /** Specifies the mode of exporting
             * @Default {client}
             */
            mode?: ej.datavisualization.Chart.ExportingMode|string;

            /** Enable/ disable the multiple excel exporting
             * @Default {false}
             */
            multipleExport?: boolean;
        }

        export interface ChartAreaBorder {

            /** Border color of the plot area.
             * @Default {Gray}
             */
            color?: string;

            /** Opacity of the plot area border.
             * @Default {0.3}
             */
            opacity?: number;

            /** Border width of the plot area.
             * @Default {0.5}
             */
            width?: number;
        }

        export interface ChartArea {

            /** Background color of the plot area.
             * @Default {transparent}
             */
            background?: string;

            /** Options for customizing the border of the plot area.
             */
            border?: ChartAreaBorder;
        }

        export interface ColumnDefinition {

            /** Specifies the unit to measure the width of the column in plotting area.
             * @Default {'pixel'. See Unit}
             */
            unit?: ej.datavisualization.Chart.Unit|string;

            /** Width of the column in plotting area. Width is measured in either pixel or percentage based on the value of unit property.
             * @Default {50}
             */
            columnWidth?: number;

            /** Color of the line that indicates the starting point of the column in plotting area.
             * @Default {transparent}
             */
            lineColor?: string;

            /** Width of the line that indicates the starting point of the column in plot area.
             * @Default {1}
             */
            lineWidth?: number;
        }

        export interface CommonSeriesOptionsBorder {

            /** Border color of all series.
             * @Default {transparent}
             */
            color?: string;

            /** DashArray for border of the series.
             * @Default {null}
             */
            dashArray?: string;

            /** Border width of all series.
             * @Default {1}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsFont {

            /** Font color of the text in all series.
             * @Default {#707070}
             */
            color?: string;

            /** Font Family for all the series.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font Style for all the series.
             * @Default {normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Specifies the font weight for all the series.
             * @Default {regular}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity for text in all the series.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for text in all the series.
             * @Default {12px}
             */
            size?: string;
        }

        export interface CommonSeriesOptionsBubbleOptions {

            /** Used for the calculation of the bubble radius based on the mode selected
             * @Default {minMax}
             */
            radiusMode?: ej.datavisualization.Chart.RadiusMode|string;

            /** Used for the setting the minimum radius of the bubble
             * @Default {1}
             */
            minRadius?: number;

            /** Used for setting the maximum radius of the bubble
             * @Default {3}
             */
            maxRadius?: number;
        }

        export interface CommonSeriesOptionsMarkerBorder {

            /** Border color of the marker shape.
             * @Default {white}
             */
            color?: string;

            /** Border width of the marker shape.
             * @Default {3}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsMarkerDataLabelBorder {

            /** Border color of the data label.
             * @Default {null}
             */
            color?: string;

            /** Border width of the data label.
             * @Default {0.1}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsMarkerDataLabelConnectorLine {

            /** Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
             * @Default {line. See ConnectorLineType}
             */
            type?: ej.datavisualization.Chart.ConnectorLineType|string;

            /** Width of the connector.
             * @Default {0.5}
             */
            width?: number;

            /** Color of the connector line.
             * @Default {#565656}
             */
            color?: string;

            /** Height of the connector line.
             * @Default {null}
             */
            height?: string;
        }

        export interface CommonSeriesOptionsMarkerDataLabelFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the data label.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the data label.
             * @Default {regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font color of the data label text.
             * @Default {null}
             */
            color?: string;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface CommonSeriesOptionsMarkerDataLabelMargin {

            /** Bottom margin of the text.
             * @Default {5}
             */
            bottom?: number;

            /** Left margin of the text.
             * @Default {5}
             */
            left?: number;

            /** Right margin of the text.
             * @Default {5}
             */
            right?: number;

            /** Top margin of the text.
             * @Default {5}
             */
            top?: number;
        }

        export interface CommonSeriesOptionsMarkerDataLabelOffset {

            /** X value or horizontal offset to position the labels in chart.
             * @Default {0}
             */
            x?: number;

            /** Y value or vertical offset to position the labels.
             * @Default {0}
             */
            y?: number;
        }

        export interface CommonSeriesOptionsMarkerDataLabel {

            /** Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
             * @Default {null}
             */
            angle?: number;

            /** Maximum label width of the data label.
             * @Default {null}
             */
            maximumLabelWidth?: number;

            /** Enable the wrap option to the data label.
             * @Default {false}
             */
            enableWrap?: boolean;

            /** Enables saturation to the data label.
             * @Default {false}
             */
            enableContrastColor?: boolean;

            /** Displays the partially visible labels inside the chart Area
             * @Default {false}
             */
            showEdgeLabels?: boolean;

            /** Options for customizing the border of the data label.
             */
            border?: CommonSeriesOptionsMarkerDataLabelBorder;

            /** Options for displaying and customizing the line that connects point and data label.
             */
            connectorLine?: CommonSeriesOptionsMarkerDataLabelConnectorLine;

            /** Background color of the data label.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the data label font.
             */
            font?: CommonSeriesOptionsMarkerDataLabelFont;

            /** Horizontal alignment of the data label.
             * @Default {center}
             */
            horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

            /** Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
             */
            margin?: CommonSeriesOptionsMarkerDataLabelMargin;

            /** Opacity of the data label.
             * @Default {1}
             */
            opacity?: number;

            /** Options for customizing the datalabel positions
             */
            offset?: CommonSeriesOptionsMarkerDataLabelOffset;

            /** Background shape of the data label.
             * @Default {none. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             */
            template?: string;

            /** Name of a field in data source, where datalabel text is displayed.
             */
            textMappingName?: string;

            /** Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar,
             * candle and OHLC.
             * @Default {top. See TextPosition}
             */
            textPosition?: ej.datavisualization.Chart.TextPosition|string;

            /** Vertical alignment of the data label.
             * @Default {center}
             */
            verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

            /** Controls the visibility of the data labels.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface CommonSeriesOptionsMarkerSize {

            /** Height of the marker.
             * @Default {6}
             */
            height?: number;

            /** Width of the marker.
             * @Default {6}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsMarker {

            /** Options for customizing the border of the marker shape.
             */
            border?: CommonSeriesOptionsMarkerBorder;

            /** Options for displaying and customizing data labels.
             */
            dataLabel?: CommonSeriesOptionsMarkerDataLabel;

            /** Color of the marker shape.
             * @Default {null}
             */
            fill?: string;

            /** The URL for the Image to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
             */
            imageUrl?: string;

            /** Opacity of the marker.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the shape of the marker.
             * @Default {circle. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options for customizing the size of the marker shape.
             */
            size?: CommonSeriesOptionsMarkerSize;

            /** Controls the visibility of the marker shape.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface CommonSeriesOptionsOutlierSettingsSize {

            /** Height of the outlier shape.
             * @Default {6}
             */
            height?: number;

            /** Width of the outlier shape.
             * @Default {6}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsOutlierSettings {

            /** Specifies the shape of the outlier.
             * @Default {circle. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options for customizing the size of the outlier shape.
             */
            size?: CommonSeriesOptionsOutlierSettingsSize;
        }

        export interface CommonSeriesOptionsCornerRadius {

            /** Specifies the radius for the top left corner.
             * @Default {0}
             */
            topLeft?: number;

            /** Specifies the radius for the top right corner.
             * @Default {0}
             */
            topRight?: number;

            /** Specifies the radius for the bottom left corner.
             * @Default {0}
             */
            bottomLeft?: number;

            /** Specifies the radius for the bottom right corner.
             * @Default {0}
             */
            bottomRight?: number;
        }

        export interface CommonSeriesOptionsTooltipBorder {

            /** Border color of the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of the tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsTooltip {

            /** Options for customizing the border of the tooltip.
             */
            border?: CommonSeriesOptionsTooltipBorder;

            /** Customize the corner radius of the tooltip rectangle.
             * @Default {0}
             */
            rx?: number;

            /** Customize the corner radius of the tooltip rectangle.
             * @Default {0}
             */
            ry?: number;

            /** Specifies the duration, the tooltip has to be displayed.
             * @Default {500ms}
             */
            duration?: string;

            /** Enables/disables the animation of the tooltip when moving from one point to other.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Background color of the tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Format of the tooltip content.
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Opacity of the tooltip.
             * @Default {0.5}
             */
            opacity?: number;

            /** Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             * @Default {null}
             */
            template?: string;

            /** Controls the visibility of the tooltip.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface CommonSeriesOptionsEmptyPointSettingsStyleBorder {

            /** Border color of the empty point.
             */
            color?: string;

            /** Border width of the empty point.
             * @Default {1}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsEmptyPointSettingsStyle {

            /** Color of the empty point.
             */
            color?: string;

            /** Options for customizing border of the empty point in the series.
             */
            border?: CommonSeriesOptionsEmptyPointSettingsStyleBorder;
        }

        export interface CommonSeriesOptionsEmptyPointSettings {

            /** Controls the visibility of the empty point.
             * @Default {true}
             */
            visible?: boolean;

            /** Specifies the mode of empty point.
             * @Default {gap}
             */
            displayMode?: ej.datavisualization.Chart.EmptyPointMode|string;

            /** Options for customizing the color and border of the empty point in the series.
             */
            style?: CommonSeriesOptionsEmptyPointSettingsStyle;
        }

        export interface CommonSeriesOptionsConnectorLine {

            /** Width of the connector line.
             * @Default {1}
             */
            width?: number;

            /** Color of the connector line.
             * @Default {#565656}
             */
            color?: string;

            /** DashArray of the connector line.
             * @Default {null}
             */
            dashArray?: string;

            /** DashArray of the connector line.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface CommonSeriesOptionsDragSettings {

            /** drag/drop the series
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies the type of drag settings.
             * @Default {xy}
             */
            type?: string;
        }

        export interface CommonSeriesOptionsErrorBarCap {

            /** Show/Hides the error bar cap.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the error bar cap.
             * @Default {1}
             */
            width?: number;

            /** Length of the error bar cap.
             * @Default {1}
             */
            length?: number;

            /** Color of the error bar cap.
             * @Default {â€œ#000000â€}
             */
            fill?: string;
        }

        export interface CommonSeriesOptionsErrorBar {

            /** Show/hides the error bar
             * @Default {visible}
             */
            visibility?: boolean;

            /** Specifies the type of error bar.
             * @Default {FixedValue}
             */
            type?: ej.datavisualization.Chart.ErrorBarType|string;

            /** Specifies the mode of error bar.
             * @Default {vertical}
             */
            mode?: ej.datavisualization.Chart.ErrorBarMode|string;

            /** Specifies the direction of error bar.
             * @Default {both}
             */
            direction?: ej.datavisualization.Chart.ErrorBarDirection|string;

            /** Value of vertical error bar.
             * @Default {3}
             */
            verticalErrorValue?: number;

            /** Value of horizontal  error bar.
             * @Default {1}
             */
            horizontalErrorValue?: number;

            /** Value of positive horizontal error bar.
             * @Default {1}
             */
            horizontalPositiveErrorValue?: number;

            /** Value of negative horizontal error bar.
             * @Default {1}
             */
            horizontalNegativeErrorValue?: number;

            /** Value of positive vertical error bar.
             * @Default {5}
             */
            verticalPositiveErrorValue?: number;

            /** Value of negative vertical error bar.
             * @Default {5}
             */
            verticalNegativeErrorValue?: number;

            /** Fill color of the error bar.
             * @Default {#000000}
             */
            fill?: string;

            /** Width of the error bar.
             * @Default {1}
             */
            width?: number;

            /** Options for customizing the error bar cap.
             */
            cap?: CommonSeriesOptionsErrorBarCap;
        }

        export interface CommonSeriesOptionsTrendlinesTooltipBorder {

            /** Border color of the trendline tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of the trendline tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface CommonSeriesOptionsTrendlinesTooltip {

            /** Options for customizing the border of the  trendline tooltip.
             */
            border?: CommonSeriesOptionsTrendlinesTooltipBorder;

            /** Customize the corner radius of the trendline tooltip rectangle.
             * @Default {0}
             */
            rx?: number;

            /** Customize the corner radius of the trendline tooltip rectangle.
             * @Default {0}
             */
            ry?: number;

            /** Specifies the duration, the tooltip has to be displayed.
             * @Default {500ms}
             */
            duration?: string;

            /** Enables/disables the animation of the trendline tooltip when moving from one point to other.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Background color of the trendline tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Format of the tooltip content displayed in the trendlines.
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Opacity of the trendline tooltip.
             * @Default {0.5}
             */
            opacity?: number;
        }

        export interface CommonSeriesOptionsTrendline {

            /** Show/hides the trendline.
             */
            visibility?: boolean;

            /** Show/hides the trendline legend.
             * @Default {visible}
             */
            visibleOnLegend?: string;

            /** Specifies the type of the trendline for the series.
             * @Default {linear. See TrendlinesType}
             */
            type?: ej.datavisualization.Chart.TrendlinesType|string;

            /** Name for the trendlines that is to be displayed in the legend text.
             * @Default {trendline}
             */
            name?: string;

            /** Fill color of the trendlines.
             * @Default {#0000FF}
             */
            fill?: string;

            /** Width of the trendlines.
             * @Default {1}
             */
            width?: number;

            /** Opacity of the trendline.
             * @Default {1}
             */
            opacity?: number;

            /** Pattern of dashes and gaps used to stroke the trendline.
             */
            dashArray?: string;

            /** Future trends of the current series.
             * @Default {0}
             */
            forwardForecast?: number;

            /** Past trends of the current series.
             * @Default {0}
             */
            backwardForecast?: number;

            /** Specifies the order of the polynomial trendlines.
             * @Default {0}
             */
            polynomialOrder?: number;

            /** Specifies the moving average starting period value.
             * @Default {2}
             */
            period?: number;

            /** Options for customizing the tooltip of the trendlines in the chart.
             */
            tooltip?: CommonSeriesOptionsTrendlinesTooltip;

            /** Specifies the intercept value of the trendlines.
             * @Default {null}
             */
            intercept?: number;
        }

        export interface CommonSeriesOptionsHighlightSettingsBorder {

            /** Border color of the series/point on highlight.
             */
            color?: string;

            /** Border width of the series/point on highlight.
             * @Default {2}
             */
            width?: string;
        }

        export interface CommonSeriesOptionsHighlightSettings {

            /** Enables/disables the ability to highlight the series or data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether the series or data point has to be highlighted.
             * @Default {series. See Mode}
             */
            mode?: ej.datavisualization.Chart.Mode|string;

            /** Color of the series/point on highlight.
             */
            color?: string;

            /** Opacity of the series/point on highlight.
             * @Default {0.6}
             */
            opacity?: number;

            /** Options for customizing the border of series on highlight.
             */
            border?: CommonSeriesOptionsHighlightSettingsBorder;

            /** Specifies the pattern for the series/point on highlight.
             * @Default {none. See Pattern}
             */
            pattern?: string;

            /** Custom pattern for the series on highlight.
             */
            customPattern?: string;
        }

        export interface CommonSeriesOptionsSelectionSettingsBorder {

            /** Border color of the series/point on selection.
             */
            color?: string;

            /** Border width of the series/point on selection.
             * @Default {2}
             */
            width?: string;
        }

        export interface CommonSeriesOptionsSelectionSettings {

            /** Enables/disables the ability to select a series/data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies the type of selection.
             * @Default {single}
             */
            type?: ej.datavisualization.Chart.SelectionType|string;

            /** Specifies whether the series or data point has to be selected.
             * @Default {series. See Mode}
             */
            mode?: ej.datavisualization.Chart.Mode|string;

            /** Specifies the drawn rectangle type.
             * @Default {xy}
             */
            rangeType?: ej.datavisualization.Chart.RangeType|string;

            /** Color of the series/point on selection.
             */
            color?: string;

            /** Opacity of the series/point on selection.
             * @Default {0.6}
             */
            opacity?: number;

            /** Options for customizing the border of the series on selection.
             */
            border?: CommonSeriesOptionsSelectionSettingsBorder;

            /** Specifies the pattern for the series/point on selection.
             * @Default {none. See Pattern}
             */
            pattern?: string;

            /** Custom pattern for the series on selection.
             */
            customPattern?: string;
        }

        export interface CommonSeriesOptions {

            /** Specifies animation duration for series rendering
             * @Default {null}
             */
            animationDuration?: string;

            /** Options to customize the border of all the series.
             */
            border?: CommonSeriesOptionsBorder;

            /** To render the column and bar type series in rectangle/cylinder shape. See
             * @Default {rectangle}
             */
            columnFacet?: ej.datavisualization.Chart.ColumnFacet|string;

            /** Relative width of the columns in column type series. Value ranges from 0 to 1. Width also depends upon columnSpacing property.
             * @Default {0.7}
             */
            columnWidth?: number;

            /** Spacing between columns of different series. Value ranges from 0 to 1
             * @Default {0}
             */
            columnSpacing?: number;

            /** Enables or disables the visibility of legend item.
             * @Default {visible}
             */
            visibleOnLegend?: string;

            /** Group of the stacking collection series.
             */
            stackingGroup?: string;

            /** Pattern of dashes and gaps used to stroke all the line type series.
             */
            dashArray?: string;

            /** Set the dataSource for all series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies spline tension value for cardinal spline type. Value ranges from 0 to 1.
             * @Default {0.5}
             */
            cardinalSplineTension?: number;

            /** Controls the size of the hole in doughnut series. Value ranges from 0 to 1
             * @Default {0.4}
             */
            doughnutCoefficient?: number;

            /** Controls the size of the doughnut series. Value ranges from 0 to 1.
             * @Default {0.8}
             */
            doughnutSize?: number;

            /** Specifies the type of series to be drawn in radar or polar series.
             * @Default {line. See DrawType}
             */
            drawType?: ej.datavisualization.Chart.DrawType|string;

            /** Enable/disable the animation for all the series.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** To avoid overlapping of data labels smartly.
             * @Default {true}
             */
            enableSmartLabels?: boolean;

            /** Start angle of pie/doughnut series.
             * @Default {null}
             */
            endAngle?: number;

            /** Explodes the pie/doughnut slices on mouse move.
             * @Default {false}
             */
            explode?: boolean;

            /** Explodes all the slice of pie/doughnut on render.
             * @Default {false}
             */
            explodeAll?: boolean;

            /** Index of the point to be exploded from pie/doughnut/pyramid/funnel.
             * @Default {null}
             */
            explodeIndex?: number;

            /** Specifies the distance of the slice from the center, when it is exploded.
             * @Default {0.4}
             */
            explodeOffset?: number;

            /** Fill color for all the series.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the font of all the series.
             */
            font?: CommonSeriesOptionsFont;

            /** Sets the height of the funnel in funnel series. Values can be either pixel or percentage.
             * @Default {32.7%}
             */
            funnelHeight?: string;

            /** Sets the width of the funnel in funnel series. Values can be either pixel or percentage.
             * @Default {11.6%}
             */
            funnelWidth?: string;

            /** Gap between the slices in pyramid and funnel series.
             * @Default {0}
             */
            gapRatio?: number;

            /** Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
             * @Default {true}
             */
            isClosed?: boolean;

            /** Specifies whether to stack the column series in polar/radar charts.
             * @Default {false}
             */
            isStacking?: boolean;

            /** Renders the chart vertically. This is applicable only for Cartesian type series.
             * @Default {false}
             */
            isTransposed?: boolean;

            /** Render the x mark in the center of the box and whisker series type.x represents the average value of the box and whisker series.
             * @Default {true}
             */
            showMedian?: boolean;

            /** Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
             * @Default {inside. See LabelPosition}
             */
            labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the mode for splitting the data points in pieOfPie series.
             * @Default {value. See SplitMode}
             */
            splitMode?: ej.datavisualization.Chart.SplitMode|string;

            /** Quartile calculation has been performed in three different formulas to render the box and whisker series.
             * @Default {exclusive}
             */
            boxPlotMode?: ej.datavisualization.Chart.boxPlotMode|string;

            /** Options for customizing the bubble options of the Bubble series
             */
            bubbleOptions?: CommonSeriesOptionsBubbleOptions;

            /** To render the spline series curve in different forms.
             * @Default {natural. See SplineType}
             */
            splineType?: ej.datavisualization.Chart.SplineType|string;

            /** Specifies the line cap of the series.
             * @Default {butt. See LineCap}
             */
            lineCap?: ej.datavisualization.Chart.LineCap|string;

            /** Specifies the type of shape to be used where two lines meet.
             * @Default {round. See LineJoin}
             */
            lineJoin?: ej.datavisualization.Chart.LineJoin|string;

            /** Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
             */
            marker?: CommonSeriesOptionsMarker;

            /** Opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Options for customizing the outlier of the series.
             */
            outlierSettings?: CommonSeriesOptionsOutlierSettings;

            /** Name of a field in data source, where the fill color for all the data points is generated.
             */
            palette?: string;

            /** Controls the size of pie series. Value ranges from 0 to 1.
             * @Default {0.8}
             */
            pieCoefficient?: number;

            /** Controls the size of the second pie in pieOfPie series. Value ranges from 0 to 1.
             * @Default {0.6}
             */
            pieOfPieCoefficient?: number;

            /** Split Value of pieOfPie series.
             * @Default {null}
             */
            splitValue?: string;

            /** Distance between the two pie's in pieOfPie series.
             * @Default {50}
             */
            gapWidth?: number;

            /** Name of the property in the datasource that contains fill color for the series.
             * @Default {null}
             */
            pointColorMappingName?: string;

            /** Specifies the mode of the pyramid series.
             * @Default {linear. See PyramidMode}
             */
            pyramidMode?: ej.datavisualization.Chart.PyramidMode|string;

            /** Start angle from where the pie/doughnut series renders. By default it starts from 0.
             * @Default {null}
             */
            startAngle?: number;

            /** Options for customizing the corner radius. cornerRadius property also takes the numeric input and applies it for all the four corners of the column.
             */
            cornerRadius?: CommonSeriesOptionsCornerRadius;

            /** Options for customizing the tooltip of chart.
             */
            tooltip?: CommonSeriesOptionsTooltip;

            /** Specifies the type of the series to render in chart.
             * @Default {column. See Type}
             */
            type?: ej.datavisualization.Chart.Type|string;

            /** Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
             * @Default {null}
             */
            xAxisName?: string;

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
             * @Default {null}
             */
            yAxisName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Name of the property in the datasource that contains high value for the series.
             * @Default {null}
             */
            high?: string;

            /** Name of the property in the datasource that contains low value for the series.
             * @Default {null}
             */
            low?: string;

            /** Name of the property in the datasource that contains open value for the series.
             * @Default {null}
             */
            open?: string;

            /** Name of the property in the datasource that contains close value for the series.
             * @Default {null}
             */
            close?: string;

            /** Z-order of the series.
             * @Default {0}
             */
            zOrder?: number;

            /** Name of the property in the datasource that contains the size value for the bubble series.
             * @Default {null}
             */
            size?: string;

            /** Options for customizing the empty point in the series.
             */
            emptyPointSettings?: CommonSeriesOptionsEmptyPointSettings;

            /** Fill color for the positive column of the waterfall.
             * @Default {null}
             */
            positiveFill?: string;

            /** Options for customizing the waterfall connector line.
             */
            connectorLine?: CommonSeriesOptionsConnectorLine;

            /** Options to customize the drag and drop in series.
             */
            dragSettings?: CommonSeriesOptionsDragSettings;

            /** Options to customize the error bar in series.
             */
            errorBar?: CommonSeriesOptionsErrorBar;

            /** Option to add the trendlines to chart.
             */
            trendlines?: CommonSeriesOptionsTrendline[];

            /** Options for customizing the appearance of the series or data point while highlighting.
             */
            highlightSettings?: CommonSeriesOptionsHighlightSettings;

            /** Options for customizing the appearance of the series/data point on selection.
             */
            selectionSettings?: CommonSeriesOptionsSelectionSettings;
        }

        export interface CrosshairTrackballTooltipSettingsBorder {

            /** Border width of the trackball tooltip.
             * @Default {null}
             */
            width?: number;

            /** Border color of the trackball tooltip.
             * @Default {null}
             */
            color?: string;
        }

        export interface CrosshairTrackballTooltipSettings {

            /** Options for customizing the trackball tooltip border.
             */
            border?: CrosshairTrackballTooltipSettingsBorder;

            /** Background color of the trackball tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Rounded corner x value of the trackball tooltip.
             * @Default {3}
             */
            rx?: number;

            /** Rounded corner y value of the trackball tooltip.
             * @Default {3}
             */
            ry?: number;

            /** Opacity value of the trackball tooltip.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the mode of the trackball tooltip.
             * @Default {float. See CrosshairMode}
             */
            mode?: ej.datavisualization.Chart.CrosshairMode|string;
        }

        export interface CrosshairMarkerBorder {

            /** Border width of the marker.
             * @Default {3}
             */
            width?: number;
        }

        export interface CrosshairMarkerSize {

            /** Height of the marker.
             * @Default {10}
             */
            height?: number;

            /** Width of the marker.
             * @Default {10}
             */
            width?: number;
        }

        export interface CrosshairMarker {

            /** Options for customizing the border.
             */
            border?: CrosshairMarkerBorder;

            /** Opacity of the marker.
             * @Default {true}
             */
            opacity?: boolean;

            /** Options for customizing the size of the marker.
             */
            size?: CrosshairMarkerSize;

            /** Show/hides the marker.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface CrosshairLine {

            /** Color of the crosshair line.
             * @Default {transparent}
             */
            color?: string;

            /** Width of the crosshair line.
             * @Default {1}
             */
            width?: number;
        }

        export interface Crosshair {

            /** Options for customizing the trackball tooltip.
             */
            trackballTooltipSettings?: CrosshairTrackballTooltipSettings;

            /** Options for customizing the marker in crosshair.
             */
            marker?: CrosshairMarker;

            /** Options for customizing the crosshair line.
             */
            line?: CrosshairLine;

            /** Specifies the type of the crosshair. It can be trackball or crosshair
             * @Default {crosshair. See CrosshairType}
             */
            type?: ej.datavisualization.Chart.CrosshairType|string;

            /** Show/hides the crosshair/trackball visibility.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface IndicatorsHistogramBorder {

            /** Color of the histogram border in MACD indicator.
             * @Default {#9999ff}
             */
            color?: string;

            /** Controls the width of histogram border line in MACD indicator.
             * @Default {1}
             */
            width?: number;
        }

        export interface IndicatorsHistogram {

            /** Options to customize the histogram border in MACD indicator.
             */
            border?: IndicatorsHistogramBorder;

            /** Color of histogram columns in MACD indicator.
             * @Default {#ccccff}
             */
            fill?: string;

            /** Opacity of histogram columns in MACD indicator.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface IndicatorsLowerLine {

            /** Color of lower line.
             * @Default {#008000}
             */
            fill?: string;

            /** Width of the lower line.
             * @Default {2}
             */
            width?: number;
        }

        export interface IndicatorsMacdLine {

            /** Color of MACD line.
             * @Default {#ff9933}
             */
            fill?: string;

            /** Width of the MACD line.
             * @Default {2}
             */
            width?: number;
        }

        export interface IndicatorsPeriodLine {

            /** Color of period line in indicator.
             * @Default {blue}
             */
            fill?: string;

            /** Width of the period line in indicators.
             * @Default {2}
             */
            width?: number;
        }

        export interface IndicatorsTooltipBorder {

            /** Border color of indicator tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of indicator tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface IndicatorsTooltip {

            /** Option to customize the border of indicator tooltip.
             */
            border?: IndicatorsTooltipBorder;

            /** Specifies the animation duration of indicator tooltip.
             * @Default {500ms}
             */
            duration?: string;

            /** Enables/disables the tooltip animation.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Format of indicator tooltip. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Background color of indicator tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Opacity of indicator tooltip.
             * @Default {0.95}
             */
            opacity?: number;

            /** Controls the visibility of indicator tooltip.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface IndicatorsUpperLine {

            /** Fill color of the upper line in indicators
             * @Default {#ff9933}
             */
            fill?: string;

            /** Width of the upper line in indicators.
             * @Default {2}
             */
            width?: number;
        }

        export interface Indicator {

            /** The dPeriod value for stochastic indicator.
             * @Default {3}
             */
            dPeriod?: number;

            /** Enables/disables the animation.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Specifies animation duration for indicator rendering.
             * @Default {null}
             */
            animationDuration?: boolean;

            /** Color of the technical indicator.
             * @Default {#00008B}
             */
            fill?: string;

            /** Options to customize the histogram in MACD indicator.
             */
            histogram?: IndicatorsHistogram;

            /** Specifies the k period in stochastic indicator.
             * @Default {3}
             */
            kPeriod?: number;

            /** Specifies the long period in MACD indicator.
             * @Default {26}
             */
            longPeriod?: number;

            /** Options to customize the lower line in indicators.
             */
            lowerLine?: IndicatorsLowerLine;

            /** Options to customize the MACD line.
             */
            macdLine?: IndicatorsMacdLine;

            /** Specifies the type of the MACD indicator.
             * @Default {line. See MACDType}
             */
            macdType?: string;

            /** Specifies period value in indicator.
             * @Default {14}
             */
            period?: number;

            /** Options to customize the period line in indicators.
             */
            periodLine?: IndicatorsPeriodLine;

            /** Name of the series for which indicator has to be drawn.
             */
            seriesName?: string;

            /** Specifies the short period in MACD indicator.
             * @Default {13}
             */
            shortPeriod?: number;

            /** Specifies the standard deviation value for Bollinger band indicator.
             * @Default {2}
             */
            standardDeviations?: number;

            /** Options to customize the tooltip.
             */
            tooltip?: IndicatorsTooltip;

            /** Trigger value of MACD indicator.
             * @Default {9}
             */
            trigger?: number;

            /** Specifies the visibility of indicator.
             * @Default {visible}
             */
            visibility?: string;

            /** Specifies the type of indicator that has to be rendered.
             * @Default {sma. See IndicatorsType}
             */
            type?: string;

            /** Options to customize the upper line in indicators
             */
            upperLine?: IndicatorsUpperLine;

            /** Width of the indicator line.
             * @Default {2}
             */
            width?: number;

            /** Name of the horizontal axis used for indicator. Primary X axis is used when x axis name is not specified.
             */
            xAxisName?: string;

            /** Name of the vertical axis used for indicator. Primary Y axis is used when y axis name is not specified
             */
            yAxisName?: string;
        }

        export interface LegendBorder {

            /** Border color of the legend.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the legend.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendFont {

            /** Font family for legend item text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend item text.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight for legend item text.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Font size for legend item text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendItemStyleBorder {

            /** Border color of the legend items.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the legend items.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendItemStyle {

            /** Options for customizing the border of legend items.
             */
            border?: LegendItemStyleBorder;

            /** Height of the shape in legend items.
             * @Default {10}
             */
            height?: number;

            /** Width of the shape in legend items.
             * @Default {10}
             */
            width?: number;
        }

        export interface LegendLocation {

            /** X value or horizontal offset to position the legend in chart.
             * @Default {0}
             */
            x?: number;

            /** Y value or vertical offset to position the legend.
             * @Default {0}
             */
            y?: number;
        }

        export interface LegendSize {

            /** Height of the legend. Height can be specified in either pixel or percentage.
             * @Default {null}
             */
            height?: string;

            /** Width of the legend. Width can be specified in either pixel or percentage.
             * @Default {null}
             */
            width?: string;
        }

        export interface LegendTitleFont {

            /** Font family for the text in legend title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend title.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight for legend title.
             * @Default {normal. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Font size for legend title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendTitle {

            /** Options to customize the font used for legend title
             */
            font?: LegendTitleFont;

            /** Text to be displayed in legend title.
             */
            text?: string;

            /** Alignment of the legend title.
             * @Default {center. See Alignment}
             */
            textAlignment?: ej.datavisualization.Chart.Alignment|string;
        }

        export interface Legend {

            /** Horizontal alignment of the legend.
             * @Default {Center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.Alignment|string;

            /** Background for the legend. Use this property to add a background image or background color for the legend.
             */
            background?: string;

            /** Options for customizing the legend border.
             */
            border?: LegendBorder;

            /** Number of columns to arrange the legend items.
             * @Default {null}
             */
            columnCount?: number;

            /** Controls whether legend has to use scrollbar or not. When enabled, scroll bar appears depending upon size and position properties of legend.
             * @Default {true}
             */
            enableScrollbar?: boolean;

            /** Fill color for the legend items. By using this property, it displays all legend item shapes in same color.Legend items representing invisible series is displayed in gray color.
             * @Default {null}
             */
            fill?: string;

            /** Options to customize the font used for legend item text.
             */
            font?: LegendFont;

            /** Gap or padding between the legend items.
             * @Default {10}
             */
            itemPadding?: number;

            /** Options to customize the style of legend items.
             */
            itemStyle?: LegendItemStyle;

            /** Options to customize the location of chart legend. Legend is placed in provided location only when value of position property is custom
             */
            location?: LegendLocation;

            /** Opacity of the legend.
             * @Default {1}
             */
            opacity?: number;

            /** Places the legend at specified position. Legend can be placed at **left**, **right**, **top** or **bottom** of the chart area. To manually specify the location of legend, set
             * **custom** as value to this property.
             * @Default {Bottom. See Position}
             */
            position?: ej.datavisualization.Chart.Position|string;

            /** Number of rows to arrange the legend items.
             * @Default {null}
             */
            rowCount?: number;

            /** Shape of the legend items. Default shape for pie and doughnut series is circle and all other series uses rectangle.
             * @Default {None. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options to customize the size of the legend.
             */
            size?: LegendSize;

            /** Options to customize the legend title.
             */
            title?: LegendTitle;

            /** Specifies the action taken when the legend width is more than the textWidth.
             * @Default {none. See textOverflow}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

            /** Text width for legend item.
             * @Default {34}
             */
            textWidth?: number;

            /** Controls the visibility of the legend.
             * @Default {true}
             */
            visible?: boolean;

            /** Controls the selection through the legend.
             * @Default {true}
             */
            toggleSeriesVisibility?: boolean;
        }

        export interface Margin {

            /** Spacing for the left margin of chart area. Setting positive value decreases the width of the chart area from left side.
             * @Default {10}
             */
            left?: number;

            /** Spacing for the right margin of chart area. Setting positive value decreases the width of the chart area from right side.
             * @Default {10}
             */
            right?: number;

            /** Spacing for the top margin of chart area. Setting positive value decreases the height of the chart area from the top.
             * @Default {10}
             */
            top?: number;

            /** Spacing for the bottom margin of the chart area. Setting positive value decreases the height of the chart area from the bottom.
             * @Default {10}
             */
            bottom?: number;
        }

        export interface PrimaryXAxisAlternateGridBandEven {

            /** Fill color for the even grid bands.
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of the even grid band.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface PrimaryXAxisAlternateGridBandOdd {

            /** Fill color of the odd grid bands
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of odd grid band
             * @Default {1}
             */
            opacity?: number;
        }

        export interface PrimaryXAxisAlternateGridBand {

            /** Options for customizing even grid band.
             */
            even?: PrimaryXAxisAlternateGridBandEven;

            /** Options for customizing odd grid band.
             */
            odd?: PrimaryXAxisAlternateGridBandOdd;
        }

        export interface PrimaryXAxisAxisLine {

            /** Pattern of dashes and gaps to be applied to the axis line.
             * @Default {null}
             */
            dashArray?: string;

            /** Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
             * @Default {null}
             */
            offset?: number;

            /** Show/hides the axis line.
             * @Default {true}
             */
            visible?: boolean;

            /** Default Value
             */
            color?: string;

            /** Width of axis line.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisCrosshairLabel {

            /** Show/hides the crosshair label associated with this axis.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface PrimaryXAxisFont {

            /** Font family of labels.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of labels.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the label.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis labels.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis labels.
             * @Default {13px}
             */
            size?: string;
        }

        export interface PrimaryXAxisMajorGridLines {

            /** Pattern of dashes and gaps used to stroke the major grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Color of the major grid line.
             * @Default {null}
             */
            color?: string;

            /** Opacity of major grid lines.
             * @Default {1}
             */
            opacity?: number;

            /** Show/hides the major grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major grid lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisMajorTickLines {

            /** Length of the major tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the major tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major tick lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisMinorGridLines {

            /** Patterns of dashes and gaps used to stroke the minor grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Show/hides the minor grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minorGridLines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisMinorTickLines {

            /** Length of the minor tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the minor tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minor tick line.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisRange {

            /** Minimum value of the axis range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value of the axis range.
             * @Default {null}
             */
            max?: number;

            /** Interval of the axis range.
             * @Default {null}
             */
            interval?: number;
        }

        export interface PrimaryXAxisMultiLevelLabelsFont {

            /** Font color of the multi level labels text.
             * @Default {null}
             */
            color?: string;

            /** Font family of the multi level labels text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the multi level labels text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the multi level label text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the multi level label text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the multi level label text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface PrimaryXAxisMultiLevelLabelsBorder {

            /** Border color of the multi level labels.
             * @Default {null}
             */
            color?: string;

            /** Border width of the multi level labels.
             * @Default {1}
             */
            width?: number;

            /** Border type of the multi level labels.
             * @Default {rectangle. See Type}
             */
            type?: ej.datavisualization.Chart.MultiLevelLabelsBorderType|string;
        }

        export interface PrimaryXAxisMultiLevelLabel {

            /** Visibility of the multi level labels.
             * @Default {false}
             */
            visible?: boolean;

            /** Text of the multi level labels.
             */
            text?: string;

            /** Starting value of the multi level labels.
             * @Default {null}
             */
            start?: any;

            /** Ending value of the multi level labels.
             * @Default {null}
             */
            end?: any;

            /** Specifies the level of multi level labels.
             * @Default {0}
             */
            level?: number;

            /** Specifies the maximum width of the text in multi level labels.
             * @Default {null}
             */
            maximumTextWidth?: number;

            /** Specifies the alignment of the text in multi level labels.
             * @Default {center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Specifies the handling of text over flow in multi level labels.
             * @Default {center. See TextOverflow}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

            /** Options for customizing the font of the text.
             */
            font?: PrimaryXAxisMultiLevelLabelsFont;

            /** Options for customizing the border of the series.
             */
            border?: PrimaryXAxisMultiLevelLabelsBorder;
        }

        export interface PrimaryXAxisStripLineFont {

            /** Font color of the strip line text.
             * @Default {black}
             */
            color?: string;

            /** Font family of the strip line text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the strip line text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the strip line text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the strip line text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the strip line text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface PrimaryXAxisStripLine {

            /** Border color of the strip line.
             * @Default {gray}
             */
            borderColor?: string;

            /** Background color of the strip line.
             * @Default {gray}
             */
            color?: string;

            /** End value of the strip line.
             * @Default {null}
             */
            end?: number;

            /** Options for customizing the font of the text.
             */
            font?: PrimaryXAxisStripLineFont;

            /** Start value of the strip line.
             * @Default {null}
             */
            start?: number;

            /** Indicates whether to render the strip line from the minimum/start value of the axis. This property does not work when start property is set.
             * @Default {false}
             */
            startFromAxis?: boolean;

            /** Specifies text to be displayed inside the strip line.
             * @Default {stripLine}
             */
            text?: string;

            /** Specifies the alignment of the text inside the strip line.
             * @Default {middlecenter. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Show/hides the strip line.
             * @Default {false}
             */
            visible?: boolean;

            /** Width of the strip line.
             * @Default {0}
             */
            width?: number;

            /** Specifies the order where the strip line and the series have to be rendered. When Z-order is â€œbehindâ€, strip line is rendered under the series and when it is â€œoverâ€, it is
             * rendered above the series.
             * @Default {over. See ZIndex}
             */
            zIndex?: ej.datavisualization.Chart.ZIndex|string;
        }

        export interface PrimaryXAxisLabelBorder {

            /** Specifies the color of the label border.
             * @Default {null}
             */
            color?: string;

            /** Specifies the width of the label border.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryXAxisTitleFont {

            /** Font family of the title text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the title text.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the title text.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis title text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis title.
             * @Default {16px}
             */
            size?: string;
        }

        export interface PrimaryXAxisTitle {

            /** Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Options for customizing the title font.
             */
            font?: PrimaryXAxisTitleFont;

            /** Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
             * @Default {34}
             */
            maximumTitleWidth?: number;

            /** Title for the axis.
             */
            text?: string;

            /** Controls the visibility of axis title.
             * @Default {true}
             */
            visible?: boolean;

            /** offset value for axis title.
             * @Default {0}
             */
            offset?: number;

            /** Specifies the position of the axis title.
             * @Default {outside. See Position}
             */
            position?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis title.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.TextAlignment|string;
        }

        export interface PrimaryXAxisScrollbarSettingsRange {

            /** Minimum value of the scrollbar range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value for the scrollbar range .
             * @Default {null}
             */
            max?: number;
        }

        export interface PrimaryXAxisScrollbarSettings {

            /** Specifies to enables or disables the scroll bar.
             * @Default {false}
             */
            visible?: boolean;

            /** Controls whether scrollbar has to be responsive in the chart.
             * @Default {false}
             */
            canResize?: boolean;

            /** Options to customize the range for the scrollbar in the axis.
             */
            range?: PrimaryXAxisScrollbarSettingsRange;

            /** The maximum number of points to be displayed in the scrollbar.
             * @Default {null}
             */
            pointsLength?: number;
        }

        export interface PrimaryXAxis {

            /** Options for customizing horizontal axis alternate grid band.
             */
            alternateGridBand?: PrimaryXAxisAlternateGridBand;

            /** Specifies where horizontal axis should intersect the vertical axis or vice versa. Value should be provided in axis co-ordinates. If provided value is greater than the maximum
             * value of crossing axis, then axis will be placed at the opposite side.
             * @Default {null}
             */
            crossesAt?: number;

            /** Name of the axis used for crossing. Vertical axis name should be provided for horizontal axis and vice versa. If the provided name does not belongs to a valid axis, then primary X
             * axis or primary Y axis will be used for crossing
             * @Default {null}
             */
            crossesInAxis?: string;

            /** Category axis can also plot points based on index value of data points. Index based plotting can be enabled by setting â€˜isIndexedâ€™ property to true.
             * @Default {false}
             */
            isIndexed?: boolean;

            /** Specifies the interval of the axis according to the zoomed data of the chart.
             * @Default {true}
             */
            enableAutoIntervalOnZooming?: boolean;

            /** Options for customizing the axis line.
             */
            axisLine?: PrimaryXAxisAxisLine;

            /** Specifies the index of the column where the axis is associated, when the chart area is divided into multiple plot areas by using columnDefinitions.
             * @Default {null}
             */
            columnIndex?: number;

            /** Specifies the number of columns or plot areas an axis has to span horizontally.
             * @Default {null}
             */
            columnSpan?: number;

            /** Options to customize the crosshair label.
             */
            crosshairLabel?: PrimaryXAxisCrosshairLabel;

            /** With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
             * @Default {null}
             */
            desiredIntervals?: number;

            /** Specifies the placement of labels.
             * @Default {ej.datavisualization.Chart.LabelPlacement.BetweenTicks. See LabelPlacement}
             */
            labelPlacement?: ej.datavisualization.Chart.LabelPlacement|string;

            /** Specifies the position of labels at the edge of the axis.
             * @Default {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
             */
            edgeLabelPlacement?: ej.datavisualization.Chart.EdgeLabelPlacement|string;

            /** Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Options for customizing the font of the axis Labels.
             */
            font?: PrimaryXAxisFont;

            /** Specifies the type of interval in date time axis.
             * @Default {null. See IntervalType}
             */
            intervalType?: ej.datavisualization.Chart.IntervalType|string;

            /** Specifies whether to inverse the axis.
             * @Default {false}
             */
            isInversed?: boolean;

            /** Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
             * @Default {null}
             */
            labelFormat?: string;

            /** Specifies the action to take when the axis labels are overlapping with each other.
             * @Default {ej.datavisualization.Chart.LabelIntersectAction.None. See LabelIntersectAction}
             */
            labelIntersectAction?: ej.datavisualization.Chart.LabelIntersectAction|string;

            /** Specifies the position of the axis labels.
             * @Default {outside. See LabelPosition}
             */
            labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis labels.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.LabelAlignment|string;

            /** Angle in degrees to rotate the axis labels.
             * @Default {null}
             */
            labelRotation?: number;

            /** Logarithmic base value. This is applicable only for logarithmic axis.
             * @Default {10}
             */
            logBase?: number;

            /** Options for customizing major gird lines.
             */
            majorGridLines?: PrimaryXAxisMajorGridLines;

            /** Options for customizing the major tick lines.
             */
            majorTickLines?: PrimaryXAxisMajorTickLines;

            /** Maximum number of labels to be displayed in every 100 pixels.
             * @Default {3}
             */
            maximumLabels?: number;

            /** Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
             * @Default {34}
             */
            maximumLabelWidth?: number;

            /** Options for customizing the minor grid lines.
             */
            minorGridLines?: PrimaryXAxisMinorGridLines;

            /** Options for customizing the minor tick lines.
             */
            minorTickLines?: PrimaryXAxisMinorTickLines;

            /** Specifies the number of minor ticks per interval.
             * @Default {null}
             */
            minorTicksPerInterval?: number;

            /** Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
             * @Default {null}
             */
            name?: string;

            /** Specifies whether to render the axis at the opposite side of its default position.
             * @Default {false}
             */
            opposedPosition?: boolean;

            /** Specifies the orientation of the axis line
             * @Default {Horizontal}
             */
            orientation?: ej.datavisualization.Chart.AxisOrientation|string;

            /** Specifies the padding for the plot area.
             * @Default {10}
             */
            plotOffset?: number;

            /** Options to customize the range of the axis.
             */
            range?: PrimaryXAxisRange;

            /** Specifies the padding for the axis range.
             * @Default {None. See RangePadding}
             */
            rangePadding?: ej.datavisualization.Chart.RangePadding|string;

            /** Rounds the number to the given number of decimals.
             * @Default {null}
             */
            roundingPlaces?: number;

            /** Options for customizing the multi level labels.
             * @Default {[ ]}
             */
            multiLevelLabels?: PrimaryXAxisMultiLevelLabel[];

            /** Specifies whether the axis elements need to be placed nearby the axis line, while crossing.
             * @Default {true}
             */
            showNextToAxisLine?: boolean;

            /** Options for customizing the strip lines.
             * @Default {[ ]}
             */
            stripLine?: PrimaryXAxisStripLine[];

            /** Specifies the position of the axis tick lines.
             * @Default {outside. See TickLinesPosition}
             */
            tickLinesPosition?: ej.datavisualization.Chart.TickLinesPosition|string;

            /** Options for customizing the border of the labels.
             */
            labelBorder?: PrimaryXAxisLabelBorder;

            /** Options for customizing the axis title.
             */
            title?: PrimaryXAxisTitle;

            /** Specifies the type of data the axis is handling.
             * @Default {null. See ValueType}
             */
            valueType?: ej.datavisualization.Chart.ValueType|string;

            /** Show/hides the axis.
             * @Default {true}
             */
            visible?: boolean;

            /** The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
             * @Default {1}
             */
            zoomFactor?: number;

            /** Position of the zoomed axis. Value ranges from 0 to 1.
             * @Default {0}
             */
            zoomPosition?: number;

            /** Options for customizing the axis scrollbar
             */
            scrollbarSettings?: PrimaryXAxisScrollbarSettings;
        }

        export interface AxesAlternateGridBandEven {

            /** Fill color for the even grid bands.
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of the even grid band.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface AxesAlternateGridBandOdd {

            /** Fill color of the odd grid bands
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of odd grid band
             * @Default {1}
             */
            opacity?: number;
        }

        export interface AxesAlternateGridBand {

            /** Options for customizing even grid band.
             */
            even?: AxesAlternateGridBandEven;

            /** Options for customizing odd grid band.
             */
            odd?: AxesAlternateGridBandOdd;
        }

        export interface AxesAxisLine {

            /** Pattern of dashes and gaps to be applied to the axis line.
             * @Default {null}
             */
            dashArray?: string;

            /** Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
             * @Default {null}
             */
            offset?: number;

            /** Show/hides the axis line.
             * @Default {true}
             */
            visible?: boolean;

            /** Color of axis line.
             */
            color?: string;

            /** Width of axis line.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesCrosshairLabel {

            /** Show/hides the crosshair label associated with this axis.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface AxesFont {

            /** Font family of labels.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of labels.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the label.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis labels.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis labels.
             * @Default {13px}
             */
            size?: string;
        }

        export interface AxesMajorGridLines {

            /** Pattern of dashes and gaps used to stroke the major grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Color of the major grid line.
             * @Default {null}
             */
            color?: string;

            /** Opacity of major grid lines.
             * @Default {1}
             */
            opacity?: number;

            /** Show/hides the major grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major grid lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesMajorTickLines {

            /** Length of the major tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the major tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major tick lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesMinorGridLines {

            /** Patterns of dashes and gaps used to stroke the minor grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Show/hides the minor grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minorGridLines.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesMinorTickLines {

            /** Length of the minor tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the minor tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minor tick line.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesRange {

            /** Minimum value of the axis range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value of the axis range.
             * @Default {null}
             */
            max?: number;

            /** Interval of the axis range.
             * @Default {null}
             */
            interval?: number;
        }

        export interface AxesMultiLevelLabelsFont {

            /** Font color of the multi level labels text.
             * @Default {null}
             */
            color?: string;

            /** Font family of the multi level labels text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the multi level labels text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the multi level label text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the multi level label text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the multi level label text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface AxesMultiLevelLabelsBorder {

            /** Border color of the multi level labels.
             * @Default {null}
             */
            color?: string;

            /** Border width of the multi level labels.
             * @Default {1}
             */
            width?: number;

            /** Border type of the multi level labels.
             * @Default {rectangle. See Type}
             */
            type?: ej.datavisualization.Chart.MultiLevelLabelsBorderType|string;
        }

        export interface AxesMultiLevelLabel {

            /** Visibility of the multi level labels.
             * @Default {false}
             */
            visible?: boolean;

            /** Text of the multi level labels.
             */
            text?: string;

            /** Starting value of the multi level labels.
             * @Default {null}
             */
            start?: any;

            /** Ending value of the multi level labels.
             * @Default {null}
             */
            end?: any;

            /** Specifies the level of multi level labels.
             * @Default {0}
             */
            level?: number;

            /** Specifies the maximum width of the text in multi level labels.
             * @Default {null}
             */
            maximumTextWidth?: number;

            /** Specifies the alignment of the text in multi level labels.
             * @Default {center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Specifies the handling of text over flow in multi level labels.
             * @Default {center. See TextOverflow}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

            /** Options for customizing the font of the text.
             */
            font?: AxesMultiLevelLabelsFont;

            /** Options for customizing the border of the series.
             */
            border?: AxesMultiLevelLabelsBorder;
        }

        export interface AxesStripLineFont {

            /** Font color of the strip line text.
             * @Default {black}
             */
            color?: string;

            /** Font family of the strip line text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the strip line text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the strip line text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the strip line text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the strip line text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface AxesStripLine {

            /** Border color of the strip line.
             * @Default {gray}
             */
            borderColor?: string;

            /** Background color of the strip line.
             * @Default {gray}
             */
            color?: string;

            /** End value of the strip line.
             * @Default {null}
             */
            end?: number;

            /** Options for customizing the font of the text.
             */
            font?: AxesStripLineFont;

            /** Start value of the strip line.
             * @Default {null}
             */
            start?: number;

            /** Indicates whether to render the strip line from the minimum/start value of the axis. This property does not work when start property is set.
             * @Default {false}
             */
            startFromAxis?: boolean;

            /** Specifies text to be displayed inside the strip line.
             * @Default {stripLine}
             */
            text?: string;

            /** Specifies the alignment of the text inside the strip line.
             * @Default {middlecenter. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Show/hides the strip line.
             * @Default {false}
             */
            visible?: boolean;

            /** Width of the strip line.
             * @Default {0}
             */
            width?: number;

            /** Specifies the order where the strip line and the series have to be rendered. When Z-order is â€œbehindâ€, strip line is rendered under the series and when it is â€œoverâ€, it is
             * rendered above the series.
             * @Default {over. See ZIndex}
             */
            zIndex?: ej.datavisualization.Chart.ZIndex|string;
        }

        export interface AxesLabelBorder {

            /** Specifies the color of the label border.
             * @Default {null}
             */
            color?: string;

            /** Specifies the width of the label border.
             * @Default {1}
             */
            width?: number;
        }

        export interface AxesTitleFont {

            /** Font family of the title text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the title text.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the title text.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis title text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis title.
             * @Default {16px}
             */
            size?: string;
        }

        export interface AxesTitle {

            /** Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Options for customizing the title font.
             */
            font?: AxesTitleFont;

            /** Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
             * @Default {34}
             */
            maximumTitleWidth?: number;

            /** Title for the axis.
             */
            text?: string;

            /** Controls the visibility of axis title.
             * @Default {true}
             */
            visible?: boolean;

            /** offset value for axis title.
             * @Default {0}
             */
            offset?: number;

            /** Specifies the position of the axis title.
             * @Default {outside. See Position}
             */
            position?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis title.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.TextAlignment|string;
        }

        export interface AxesScrollbarSettingsRange {

            /** Minimum value of the scrollbar range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value for the scrollbar range .
             * @Default {null}
             */
            max?: number;
        }

        export interface AxesScrollbarSettings {

            /** Specifies to enable or disable the scrollbar.
             * @Default {false}
             */
            visible?: boolean;

            /** Controls whether scrollbar has to be responsive in the chart.
             * @Default {false}
             */
            canResize?: boolean;

            /** Options to customize the range for the scrollbar in the axis.
             */
            range?: AxesScrollbarSettingsRange;

            /** The maximum number of points to be displayed in the scrollbar.
             * @Default {null}
             */
            pointsLength?: number;
        }

        export interface Axis {

            /** Options for customizing axis alternate grid band.
             */
            alternateGridBand?: AxesAlternateGridBand;

            /** Specifies where axis should intersect the vertical axis or vice versa. Value should be provided in axis co-ordinates. If provided value is greater than the maximum value of
             * crossing axis, then axis will be placed at the opposite side.
             * @Default {null}
             */
            crossesAt?: number;

            /** Category axis can also plot points based on index value of data points. Index based plotting can be enabled by setting â€˜isIndexedâ€™ property to true.
             * @Default {false}
             */
            isIndexed?: boolean;

            /** Options for customizing the axis line.
             */
            axisLine?: AxesAxisLine;

            /** Specifies the index of the column where the axis is associated, when the chart area is divided into multiple plot areas by using columnDefinitions.
             * @Default {null}
             */
            columnIndex?: number;

            /** Specifies the number of columns or plot areas an axis has to span horizontally.
             * @Default {null}
             */
            columnSpan?: number;

            /** Options to customize the crosshair label.
             */
            crosshairLabel?: AxesCrosshairLabel;

            /** With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
             * @Default {null}
             */
            desiredIntervals?: number;

            /** Specifies the placement of labels.
             * @Default {ej.datavisualization.Chart.LabelPlacement.BetweenTicks. See LabelPlacement}
             */
            labelPlacement?: ej.datavisualization.Chart.LabelPlacement|string;

            /** Specifies the position of labels at the edge of the axis.
             * @Default {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
             */
            edgeLabelPlacement?: ej.datavisualization.Chart.EdgeLabelPlacement|string;

            /** Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Specifies the interval of the axis according to the zoomed data of the chart.
             * @Default {true}
             */
            enableAutoIntervalOnZooming?: boolean;

            /** Options for customizing the font of the axis Labels.
             */
            font?: AxesFont;

            /** Specifies the type of interval in date time axis.
             * @Default {null. See IntervalType}
             */
            intervalType?: ej.datavisualization.Chart.IntervalType|string;

            /** Specifies whether to inverse the axis.
             * @Default {false}
             */
            isInversed?: boolean;

            /** Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
             * @Default {null}
             */
            labelFormat?: string;

            /** Specifies the action to take when the axis labels are overlapping with each other.
             * @Default {ej.datavisualization.Chart.LabelIntersectAction.None. See LabelIntersectAction}
             */
            labelIntersectAction?: ej.datavisualization.Chart.LabelIntersectAction|string;

            /** Specifies the position of the axis labels.
             * @Default {outside. See LabelPosition}
             */
            labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis labels.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.LabelAlignment|string;

            /** Angle in degrees to rotate the axis labels.
             * @Default {null}
             */
            labelRotation?: number;

            /** Logarithmic base value. This is applicable only for logarithmic axis.
             * @Default {10}
             */
            logBase?: number;

            /** Options for customizing major gird lines.
             */
            majorGridLines?: AxesMajorGridLines;

            /** Options for customizing the major tick lines.
             */
            majorTickLines?: AxesMajorTickLines;

            /** Maximum number of labels to be displayed in every 100 pixels.
             * @Default {3}
             */
            maximumLabels?: number;

            /** Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
             * @Default {34}
             */
            maximumLabelWidth?: number;

            /** Options for customizing the minor grid lines.
             */
            minorGridLines?: AxesMinorGridLines;

            /** Options for customizing the minor tick lines.
             */
            minorTickLines?: AxesMinorTickLines;

            /** Specifies the number of minor ticks per interval.
             * @Default {null}
             */
            minorTicksPerInterval?: number;

            /** Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
             * @Default {null}
             */
            name?: string;

            /** Specifies whether to render the axis at the opposite side of its default position.
             * @Default {false}
             */
            opposedPosition?: boolean;

            /** Specifies the orientation of the axis line in the chart.
             * @Default {'horizontal'}
             */
            orientation?: ej.datavisualization.Chart.AxisOrientation|string;

            /** Specifies the padding for the plot area.
             * @Default {10}
             */
            plotOffset?: number;

            /** Options to customize the range of the axis.
             */
            range?: AxesRange;

            /** Specifies the padding for the axis range.
             * @Default {None. See RangePadding}
             */
            rangePadding?: ej.datavisualization.Chart.RangePadding|string;

            /** Rounds the number to the given number of decimals.
             * @Default {null}
             */
            roundingPlaces?: number;

            /** Options for customizing the multi level labels.
             * @Default {[ ]}
             */
            multiLevelLabels?: AxesMultiLevelLabel[];

            /** Specifies whether the axis elements need to be placed nearby the axis line, while crossing.
             * @Default {true}
             */
            showNextToAxisLine?: boolean;

            /** Options for customizing the strip lines.
             * @Default {[ ]}
             */
            stripLine?: AxesStripLine[];

            /** Specifies the position of the axis tick lines.
             * @Default {outside. See TickLinesPosition}
             */
            tickLinesPosition?: ej.datavisualization.Chart.TickLinesPosition|string;

            /** Options for customizing the border of the labels.
             */
            labelBorder?: AxesLabelBorder;

            /** Options for customizing the axis title.
             */
            title?: AxesTitle;

            /** Specifies the type of data the axis is handling.
             * @Default {null. See ValueType}
             */
            valueType?: ej.datavisualization.Chart.ValueType|string;

            /** Show/hides the axis.
             * @Default {true}
             */
            visible?: boolean;

            /** The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
             * @Default {1}
             */
            zoomFactor?: number;

            /** Position of the zoomed axis. Value ranges from 0 to 1.
             * @Default {0}
             */
            zoomPosition?: number;

            /** Options for customizing the axis scrollbar.
             */
            scrollbarSettings?: AxesScrollbarSettings;
        }

        export interface PrimaryYAxisAlternateGridBandEven {

            /** Fill color for the even grid bands.
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of the even grid band.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface PrimaryYAxisAlternateGridBandOdd {

            /** Fill color of the odd grid bands.
             * @Default {transparent}
             */
            fill?: string;

            /** Opacity of odd grid band.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface PrimaryYAxisAlternateGridBand {

            /** Options for customizing even grid band.
             */
            even?: PrimaryYAxisAlternateGridBandEven;

            /** Options for customizing odd grid band.
             */
            odd?: PrimaryYAxisAlternateGridBandOdd;
        }

        export interface PrimaryYAxisAxisLine {

            /** Pattern of dashes and gaps to be applied to the axis line.
             * @Default {null}
             */
            dashArray?: string;

            /** Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
             * @Default {null}
             */
            offset?: number;

            /** Show/hides the axis line.
             * @Default {true}
             */
            visible?: boolean;

            /** Color of axis line.
             */
            color?: string;

            /** Width of axis line.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisCrosshairLabel {

            /** Show/hides the crosshair label associated with this axis.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface PrimaryYAxisFont {

            /** Font family of labels.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of labels.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the label.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis labels.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis labels.
             * @Default {13px}
             */
            size?: string;
        }

        export interface PrimaryYAxisMajorGridLines {

            /** Pattern of dashes and gaps used to stroke the major grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Color of the major grid lines.
             * @Default {null}
             */
            color?: string;

            /** Opacity of major grid lines.
             * @Default {1}
             */
            opacity?: number;

            /** Show/hides the major grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major grid lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisMajorTickLines {

            /** Length of the major tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the major tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the major tick lines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisMinorGridLines {

            /** Patterns of dashes and gaps used to stroke the minor grid lines.
             * @Default {null}
             */
            dashArray?: string;

            /** Show/hides the minor grid lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minorGridLines.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisMinorTickLines {

            /** Length of the minor tick lines.
             * @Default {5}
             */
            size?: number;

            /** Show/hides the minor tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the minor tick line
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisRange {

            /** Minimum value of the axis range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value of the axis range.
             * @Default {null}
             */
            max?: number;

            /** Interval for the range.
             * @Default {null}
             */
            interval?: number;
        }

        export interface PrimaryYAxisMultiLevelLabelsFont {

            /** Font color of the multi level labels text.
             * @Default {null}
             */
            color?: string;

            /** Font family of the multi level labels text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the multi level labels text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the multi level label text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the multi level label text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the multi level label text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface PrimaryYAxisMultiLevelLabelsBorder {

            /** Border color of the multi level labels.
             * @Default {null}
             */
            color?: string;

            /** Border width of the multi level labels.
             * @Default {1}
             */
            width?: number;

            /** Border type of the multi level labels.
             * @Default {rectangle. See Type}
             */
            type?: ej.datavisualization.Chart.MultiLevelLabelsBorderType|string;
        }

        export interface PrimaryYAxisMultiLevelLabel {

            /** Visibility of the multi level labels.
             * @Default {false}
             */
            visible?: boolean;

            /** Text of the multi level labels.
             */
            text?: string;

            /** Starting value of the multi level labels.
             * @Default {null}
             */
            start?: number;

            /** Ending value of the multi level labels.
             * @Default {null}
             */
            end?: number;

            /** Specifies the level of multi level labels.
             * @Default {0}
             */
            level?: number;

            /** Specifies the maximum width of the text in multi level labels.
             * @Default {null}
             */
            maximumTextWidth?: number;

            /** Specifies the alignment of the text in multi level labels.
             * @Default {center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Specifies the handling of text over flow in multi level labels.
             * @Default {center. See TextOverflow}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

            /** Options for customizing the font of the text.
             */
            font?: PrimaryYAxisMultiLevelLabelsFont;

            /** Options for customizing the border of the series.
             */
            border?: PrimaryYAxisMultiLevelLabelsBorder;
        }

        export interface PrimaryYAxisScrollbarSettingsRange {

            /** Minimum value of the scrollbar range.
             * @Default {null}
             */
            min?: number;

            /** Maximum value for the scrollbar range .
             * @Default {null}
             */
            max?: number;
        }

        export interface PrimaryYAxisScrollbarSettings {

            /** Specifies to enable or disable the scrollbar.
             * @Default {false}
             */
            visible?: boolean;

            /** Controls whether scrollbar has to be responsive in the chart.
             * @Default {false}
             */
            canResize?: boolean;

            /** Options to customize the range for the scrollbar in the axis.
             */
            range?: PrimaryYAxisScrollbarSettingsRange;

            /** The maximum number of points to be displayed in the scrollbar.
             * @Default {null}
             */
            pointsLength?: number;
        }

        export interface PrimaryYAxisStripLineFont {

            /** Font color of the strip line text.
             * @Default {black}
             */
            color?: string;

            /** Font family of the strip line text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the strip line text.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the strip line text.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Opacity of the strip line text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the strip line text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface PrimaryYAxisStripLine {

            /** Border color of the strip line.
             * @Default {gray}
             */
            borderColor?: string;

            /** Background color of the strip line.
             * @Default {gray}
             */
            color?: string;

            /** End value of the strip line.
             * @Default {null}
             */
            end?: number;

            /** Options for customizing the font of the text.
             */
            font?: PrimaryYAxisStripLineFont;

            /** Start value of the strip line.
             * @Default {null}
             */
            start?: number;

            /** Indicates whether to render the strip line from the minimum/start value of the axis. This property wonâ€™t work when start property is set.
             * @Default {false}
             */
            startFromAxis?: boolean;

            /** Specifies text to be displayed inside the strip line.
             * @Default {stripLine}
             */
            text?: string;

            /** Specifies the alignment of the text inside the strip line.
             * @Default {middlecenter. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.TextAlignment|string;

            /** Show/hides the strip line.
             * @Default {false}
             */
            visible?: boolean;

            /** Width of the strip line.
             * @Default {0}
             */
            width?: number;

            /** Specifies the order in which strip line and the series have to be rendered. When Z-order is â€œbehindâ€, strip line is rendered below the series and when it is â€œoverâ€, it is
             * rendered above the series.
             * @Default {over. See ZIndex}
             */
            zIndex?: ej.datavisualization.Chart.ZIndex|string;
        }

        export interface PrimaryYAxisLabelBorder {

            /** Specifies the color of the label border.
             * @Default {null}
             */
            color?: string;

            /** Specifies the width of the label border.
             * @Default {1}
             */
            width?: number;
        }

        export interface PrimaryYAxisTitleFont {

            /** Font family of the title text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the title text.
             * @Default {ej.datavisualization.Chart.FontStyle.Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the title text.
             * @Default {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the axis title text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the axis title.
             * @Default {16px}
             */
            size?: string;
        }

        export interface PrimaryYAxisTitle {

            /** Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
             * @Default {ej.datavisualization.Chart.enableTrim}
             */
            enableTrim?: boolean;

            /** Options for customizing the title font.
             */
            font?: PrimaryYAxisTitleFont;

            /** Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
             * @Default {ej.datavisualization.Chart.maximumTitleWidth.null}
             */
            maximumTitleWidth?: number;

            /** Title for the axis.
             */
            text?: string;

            /** Controls the visibility of axis title.
             * @Default {true}
             */
            visible?: boolean;

            /** offset value for axis title.
             * @Default {0}
             */
            offset?: number;

            /** Specifies the position of the axis title.
             * @Default {outside. See Position}
             */
            position?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis title.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.TextAlignment|string;
        }

        export interface PrimaryYAxis {

            /** Options for customizing vertical axis alternate grid band.
             */
            alternateGridBand?: PrimaryYAxisAlternateGridBand;

            /** Specifies the interval of the axis according to the zoomed data of the chart.
             * @Default {true}
             */
            enableAutoIntervalOnZooming?: boolean;

            /** Options for customizing the axis line.
             */
            axisLine?: PrimaryYAxisAxisLine;

            /** Specifies where horizontal axis should intersect the vertical axis or vice versa. Value should be provided in axis co-ordinates. If provided value is greater than the maximum
             * value of crossing axis, then axis will be placed at the opposite side.
             * @Default {null}
             */
            crossesAt?: number;

            /** Name of the axis used for crossing. Vertical axis name should be provided for horizontal axis and vice versa. If the provided name does not belongs to a valid axis, then primary X
             * axis or primary Y axis will be used for crossing
             * @Default {null}
             */
            crossesInAxis?: string;

            /** Options to customize the crosshair label.
             */
            crosshairLabel?: PrimaryYAxisCrosshairLabel;

            /** With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
             * @Default {null}
             */
            desiredIntervals?: number;

            /** Specifies the placement of labels.
             * @Default {ej.datavisualization.Chart.LabelPlacement.BetweenTicks. See LabelPlacement}
             */
            labelPlacement?: ej.datavisualization.Chart.LabelPlacement|string;

            /** Specifies the position of labels at the edge of the axis.
             * @Default {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
             */
            edgeLabelPlacement?: ej.datavisualization.Chart.EdgeLabelPlacement|string;

            /** Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Options for customizing the font of the axis Labels.
             */
            font?: PrimaryYAxisFont;

            /** Specifies the type of interval in date time axis.
             * @Default {null. See IntervalType}
             */
            intervalType?: ej.datavisualization.Chart.IntervalType|string;

            /** Specifies whether to inverse the axis.
             * @Default {false}
             */
            isInversed?: boolean;

            /** Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
             * @Default {null}
             */
            labelFormat?: string;

            /** Specifies the action to take when the axis labels are overlapping with each other.
             * @Default {ej.datavisualization.Chart.LabelIntersectAction.None}
             */
            labelIntersectAction?: ej.datavisualization.Chart.LabelIntersectAction|string;

            /** Specifies the position of the axis labels.
             * @Default {outside. See LabelPosition}
             */
            labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the position of the axis labels.
             * @Default {center. See Alignment}
             */
            alignment?: ej.datavisualization.Chart.LabelAlignment|string;

            /** Logarithmic base value. This is applicable only for logarithmic axis.
             * @Default {10}
             */
            logBase?: number;

            /** Options for customizing major gird lines.
             */
            majorGridLines?: PrimaryYAxisMajorGridLines;

            /** Options for customizing the major tick lines.
             */
            majorTickLines?: PrimaryYAxisMajorTickLines;

            /** Maximum number of labels to be displayed in every 100 pixels.
             * @Default {3}
             */
            maximumLabels?: number;

            /** Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
             * @Default {ej.datavisualization.Chart.maximumLabelWidth type {int}}
             */
            maximumLabelWidth?: number;

            /** Options for customizing the minor grid lines.
             */
            minorGridLines?: PrimaryYAxisMinorGridLines;

            /** Options for customizing the minor tick lines.
             */
            minorTickLines?: PrimaryYAxisMinorTickLines;

            /** Specifies the number of minor ticks per interval.
             * @Default {null}
             */
            minorTicksPerInterval?: number;

            /** Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
             * @Default {null}
             */
            name?: string;

            /** Specifies whether to render the axis at the opposite side of its default position.
             * @Default {false}
             */
            opposedPosition?: boolean;

            /** Specifies the orientation of the axis line in the chart.
             * @Default {Vertical}
             */
            orientation?: ej.datavisualization.Chart.AxisOrientation|string;

            /** Specifies the padding for the plot area.
             * @Default {10}
             */
            plotOffset?: number;

            /** Options to customize the range of the axis.
             */
            range?: PrimaryYAxisRange;

            /** Specifies the padding for the axis range.
             * @Default {ej.datavisualization.Chart.RangePadding.None. See RangePadding}
             */
            rangePadding?: ej.datavisualization.Chart.RangePadding|string;

            /** Rounds the number to the given number of decimals.
             * @Default {null}
             */
            roundingPlaces?: number;

            /** Specifies the index of the row to which the axis is associated, when the chart area is divided into multiple plot areas by using rowDefinitions.
             * @Default {null}
             */
            rowIndex?: number;

            /** Specifies the number of row or plot areas an axis has to span vertically.
             * @Default {null}
             */
            rowSpan?: number;

            /** Options for customizing the multi level labels.
             * @Default {[ ]}
             */
            multiLevelLabels?: PrimaryYAxisMultiLevelLabel[];

            /** Specifies whether the axis elements need to be placed nearby the axis line, while crossing.
             * @Default {true}
             */
            showNextToAxisLine?: boolean;

            /** Options for customizing the axis scrollbar.
             */
            scrollbarSettings?: PrimaryYAxisScrollbarSettings;

            /** Options for customizing the strip lines.
             * @Default {[ ]}
             */
            stripLine?: PrimaryYAxisStripLine[];

            /** Specifies the position of the axis tick lines.
             * @Default {outside. See TickLinesPosition}
             */
            tickLinesPosition?: ej.datavisualization.Chart.TickLinesPosition|string;

            /** Options for customizing the border of the labels.
             */
            labelBorder?: PrimaryYAxisLabelBorder;

            /** Options for customizing the axis title.
             */
            title?: PrimaryYAxisTitle;

            /** Specifies the type of data the axis is handling.
             * @Default {null. See ValueType}
             */
            valueType?: ej.datavisualization.Chart.ValueType|string;

            /** Show/hides the axis.
             * @Default {true}
             */
            visible?: boolean;

            /** The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Values ranges from 0 to 1.
             * @Default {1}
             */
            zoomFactor?: number;

            /** Position of the zoomed axis. Value ranges from 0 to 1
             * @Default {0}
             */
            zoomPosition?: number;
        }

        export interface RowDefinition {

            /** Specifies the unit to measure the height of the row in plotting area.
             * @Default {'pixel'. See Unit}
             */
            unit?: ej.datavisualization.Chart.Unit|string;

            /** Height of the row in plotting area. Height is measured in either pixel or percentage based on the value of unit property.
             * @Default {50}
             */
            rowHeight?: number;

            /** Color of the line that indicates the starting point of the row in plotting area.
             * @Default {transparent}
             */
            lineColor?: string;

            /** Width of the line that indicates the starting point of the row in plot area.
             * @Default {1}
             */
            lineWidth?: number;
        }

        export interface SeriesBorder {

            /** Border color of the series.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the series.
             * @Default {1}
             */
            width?: number;

            /** DashArray for border of the series.
             * @Default {null}
             */
            dashArray?: string;
        }

        export interface SeriesFont {

            /** Font color of the series text.
             * @Default {#707070}
             */
            color?: string;

            /** Font Family of the series.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font Style of the series.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the series.
             * @Default {Regular}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of series text.
             * @Default {1}
             */
            opacity?: number;

            /** Size of the series text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface SeriesBubbleOptions {

            /** Used for the calculation of the bubble radius based on the mode selected
             * @Default {minMax .See RadiusMode}
             */
            radiusMode?: ej.datavisualization.Chart.RadiusMode|string;

            /** Used for the setting the minimum radius of the bubble
             * @Default {1}
             */
            minRadius?: number;

            /** Used for setting the maximum radius of the bubble
             * @Default {3}
             */
            maxRadius?: number;
        }

        export interface SeriesMarkerBorder {

            /** Border color of the marker shape.
             * @Default {white}
             */
            color?: string;

            /** Border width of the marker shape.
             * @Default {3}
             */
            width?: number;
        }

        export interface SeriesMarkerDataLabelBorder {

            /** Border color of the data label.
             * @Default {null}
             */
            color?: string;

            /** Border width of the data label.
             * @Default {0.1}
             */
            width?: number;
        }

        export interface SeriesMarkerDataLabelConnectorLine {

            /** Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
             * @Default {line. See ConnectorLineType}
             */
            type?: ej.datavisualization.Chart.Type|string;

            /** Width of the connector.
             * @Default {0.5}
             */
            width?: number;

            /** Color of the connector.
             * @Default {null}
             */
            color?: string;

            /** Height of the connector.
             * @Default {null}
             */
            height?: number;
        }

        export interface SeriesMarkerDataLabelFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font color of the data label text.
             * @Default {null}
             */
            color?: string;

            /** Font style of the data label.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the data label.
             * @Default {regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface SeriesMarkerDataLabelMargin {

            /** Bottom margin of the text.
             * @Default {5}
             */
            bottom?: number;

            /** Left margin of the text.
             * @Default {5}
             */
            left?: number;

            /** Right margin of the text.
             * @Default {5}
             */
            right?: number;

            /** Top margin of the text.
             * @Default {5}
             */
            top?: number;
        }

        export interface SeriesMarkerDataLabelOffset {

            /** X value or horizontal offset to position the labels in chart.
             * @Default {0}
             */
            x?: number;

            /** Y value or vertical offset to position the labels.
             * @Default {0}
             */
            y?: number;
        }

        export interface SeriesMarkerDataLabel {

            /** Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
             * @Default {null}
             */
            angle?: number;

            /** Maximum label width of the data label.
             * @Default {null}
             */
            maximumLabelWidth?: number;

            /** Enable the wrap option to the data label.
             * @Default {false}
             */
            enableWrap?: boolean;

            /** Enables saturation to the data label.
             * @Default {false}
             */
            enableContrastColor?: boolean;

            /** Displays the partially visible data labels inside the chart Area.
             * @Default {false}
             */
            showEdgeLabels?: boolean;

            /** Options for customizing the border of the data label.
             */
            border?: SeriesMarkerDataLabelBorder;

            /** Options for displaying and customizing the line that connects point and data label.
             */
            connectorLine?: SeriesMarkerDataLabelConnectorLine;

            /** Background color of the data label.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the data label font.
             */
            font?: SeriesMarkerDataLabelFont;

            /** Horizontal alignment of the data label.
             * @Default {center}
             */
            horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

            /** Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
             */
            margin?: SeriesMarkerDataLabelMargin;

            /** Opacity of the data label.
             * @Default {1}
             */
            opacity?: number;

            /** Background shape of the data label.
             * @Default {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Name of a field in data source where datalabel text is displayed.
             */
            textMappingName?: string;

            /** Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar,
             * candle and OHLC.
             * @Default {top. See TextPosition}
             */
            textPosition?: ej.datavisualization.Chart.TextPosition|string;

            /** Vertical alignment of the data label.
             * @Default {'center'}
             */
            verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

            /** Controls the visibility of the data labels.
             * @Default {false}
             */
            visible?: boolean;

            /** Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             */
            template?: string;

            /** Options for customizing the datalabel positions
             */
            offset?: SeriesMarkerDataLabelOffset;
        }

        export interface SeriesMarkerSize {

            /** Height of the marker.
             * @Default {6}
             */
            height?: number;

            /** Width of the marker.
             * @Default {6}
             */
            width?: number;
        }

        export interface SeriesMarker {

            /** Options for customizing the border of the marker shape.
             */
            border?: SeriesMarkerBorder;

            /** Options for displaying and customizing data labels.
             */
            dataLabel?: SeriesMarkerDataLabel;

            /** Color of the marker shape.
             * @Default {null}
             */
            fill?: string;

            /** The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
             */
            imageUrl?: string;

            /** Opacity of the marker.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the shape of the marker.
             * @Default {circle. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options for customizing the size of the marker shape.
             */
            size?: SeriesMarkerSize;

            /** Controls the visibility of the marker shape.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface SeriesOutlierSettingsSize {

            /** Height of the outlier shape.
             * @Default {6}
             */
            height?: number;

            /** Width of the outlier shape.
             * @Default {6}
             */
            width?: number;
        }

        export interface SeriesOutlierSettings {

            /** Specifies the shape of the outlier.
             * @Default {circle. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options for customizing the size of the outlier shape.
             */
            size?: SeriesOutlierSettingsSize;
        }

        export interface SeriesEmptyPointSettingsStyleBorder {

            /** Border color of the empty point.
             */
            color?: string;

            /** Border width of the empty point.
             * @Default {1}
             */
            width?: number;
        }

        export interface SeriesEmptyPointSettingsStyle {

            /** Color of the empty point.
             */
            color?: string;

            /** Options for customizing border of the empty point in the series.
             */
            border?: SeriesEmptyPointSettingsStyleBorder;
        }

        export interface SeriesEmptyPointSettings {

            /** Controls the visibility of the empty point.
             * @Default {true}
             */
            visible?: boolean;

            /** Specifies the mode of empty point.
             * @Default {gap}
             */
            displayMode?: ej.datavisualization.Chart.EmptyPointMode|string;

            /** Options for customizing the color and border of the empty point in the series.
             */
            style?: SeriesEmptyPointSettingsStyle;
        }

        export interface SeriesConnectorLine {

            /** Width of the connector line.
             * @Default {1}
             */
            width?: number;

            /** Color of the connector line.
             * @Default {#565656}
             */
            color?: string;

            /** DashArray of the connector line.
             * @Default {null}
             */
            dashArray?: string;

            /** Opacity of the connector line.
             * @Default {1}
             */
            opacity?: number;
        }

        export interface SeriesDragSettings {

            /** drag/drop the series
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies the type of drag settings.
             * @Default {xy}
             */
            type?: string;
        }

        export interface SeriesErrorBarCap {

            /** Show/Hides the error bar cap.
             * @Default {true}
             */
            visible?: boolean;

            /** Width of the error bar cap.
             * @Default {1}
             */
            width?: number;

            /** Length of the error bar cap.
             * @Default {1}
             */
            length?: number;

            /** Color of the error bar cap.
             * @Default {#000000}
             */
            fill?: string;
        }

        export interface SeriesErrorBar {

            /** Show/hides the error bar
             * @Default {visible}
             */
            visibility?: boolean;

            /** Specifies the type of error bar.
             * @Default {FixedValue}
             */
            type?: ej.datavisualization.Chart.ErrorBarType|string;

            /** Specifies the mode of error bar.
             * @Default {vertical}
             */
            mode?: ej.datavisualization.Chart.ErrorBarMode|string;

            /** Specifies the direction of error bar.
             * @Default {both}
             */
            direction?: ej.datavisualization.Chart.ErrorBarDirection|string;

            /** Value of vertical error bar.
             * @Default {3}
             */
            verticalErrorValue?: number;

            /** Value of horizontal  error bar.
             * @Default {1}
             */
            horizontalErrorValue?: number;

            /** Value of positive horizontal error bar.
             * @Default {1}
             */
            horizontalPositiveErrorValue?: number;

            /** Value of negative horizontal error bar.
             * @Default {1}
             */
            horizontalNegativeErrorValue?: number;

            /** Value of positive vertical error bar.
             * @Default {5}
             */
            verticalPositiveErrorValue?: number;

            /** Value of negative vertical error bar.
             * @Default {5}
             */
            verticalNegativeErrorValue?: number;

            /** Fill color of the error bar.
             * @Default {#000000}
             */
            fill?: string;

            /** Width of the error bar.
             * @Default {1}
             */
            width?: number;

            /** Options for customizing the error bar cap.
             */
            cap?: SeriesErrorBarCap;
        }

        export interface SeriesPointsBorder {

            /** Border color of the point.
             * @Default {null}
             */
            color?: string;

            /** Border width of the point.
             * @Default {null}
             */
            width?: number;
        }

        export interface SeriesPointsMarkerBorder {

            /** Border color of the marker shape.
             * @Default {white}
             */
            color?: string;

            /** Border width of the marker shape.
             * @Default {3}
             */
            width?: number;
        }

        export interface SeriesPointsMarkerDataLabelBorder {

            /** Border color of the data label.
             * @Default {null}
             */
            color?: string;

            /** Border width of the data label.
             * @Default {0.1}
             */
            width?: number;
        }

        export interface SeriesPointsMarkerDataLabelConnectorLine {

            /** Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
             * @Default {line. See ConnectorLineType}
             */
            type?: ej.datavisualization.Chart.ConnectorLineType|string;

            /** Width of the connector.
             * @Default {0.5}
             */
            width?: number;
        }

        export interface SeriesPointsMarkerDataLabelFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the data label.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight of the data label.
             * @Default {regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface SeriesPointsMarkerDataLabelMargin {

            /** Bottom margin of the text.
             * @Default {5}
             */
            bottom?: number;

            /** Left margin of the text.
             * @Default {5}
             */
            left?: number;

            /** Right margin of the text.
             * @Default {5}
             */
            right?: number;

            /** Top margin of the text.
             * @Default {5}
             */
            top?: number;
        }

        export interface SeriesPointsMarkerDataLabel {

            /** Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
             * @Default {null}
             */
            angle?: number;

            /** Options for customizing the border of the data label.
             */
            border?: SeriesPointsMarkerDataLabelBorder;

            /** Options for displaying and customizing the line that connects point and data label.
             */
            connectorLine?: SeriesPointsMarkerDataLabelConnectorLine;

            /** Background color of the data label.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the data label font.
             */
            font?: SeriesPointsMarkerDataLabelFont;

            /** Horizontal alignment of the data label.
             * @Default {center}
             */
            horizontalTextAlignment?: ej.datavisualization.Chart.HorizontalTextAlignment|string;

            /** Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
             */
            margin?: SeriesPointsMarkerDataLabelMargin;

            /** Opacity of the data label.
             * @Default {1}
             */
            opacity?: number;

            /** Background shape of the data label.
             * @Default {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar,
             * candle and OHLC.
             * @Default {top. See TextPosition}
             */
            textPosition?: ej.datavisualization.Chart.TextPosition|string;

            /** Vertical alignment of the data label.
             * @Default {'center'}
             */
            verticalTextAlignment?: ej.datavisualization.Chart.VerticalTextAlignment|string;

            /** Controls the visibility of the data labels.
             * @Default {false}
             */
            visible?: boolean;

            /** Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             */
            template?: string;

            /** Moves the label vertically by specified offset.
             * @Default {0}
             */
            offset?: number;
        }

        export interface SeriesPointsMarkerSize {

            /** Height of the marker.
             * @Default {6}
             */
            height?: number;

            /** Width of the marker.
             * @Default {6}
             */
            width?: number;
        }

        export interface SeriesPointsMarker {

            /** Options for customizing the border of the marker shape.
             */
            border?: SeriesPointsMarkerBorder;

            /** Options for displaying and customizing data label.
             */
            dataLabel?: SeriesPointsMarkerDataLabel;

            /** Color of the marker shape.
             * @Default {null}
             */
            fill?: string;

            /** The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
             */
            imageUrl?: string;

            /** Opacity of the marker.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the shape of the marker.
             * @Default {circle. See Shape}
             */
            shape?: ej.datavisualization.Chart.Shape|string;

            /** Options for customizing the size of the marker shape.
             */
            size?: SeriesPointsMarkerSize;

            /** Controls the visibility of the marker shape.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface SeriesPoint {

            /** Options for customizing the border of a point. This is applicable only for column type series and accumulation type series.
             */
            border?: SeriesPointsBorder;

            /** Enables or disables the visibility of legend item.
             * @Default {visible}
             */
            visibleOnLegend?: string;

            /** To show/hide the intermediate summary from the last intermediate point.
             * @Default {false}
             */
            showIntermediateSum?: boolean;

            /** To show/hide the total summary of the waterfall series.
             * @Default {false}
             */
            showTotalSum?: boolean;

            /** Close value of the point. Close value is applicable only for financial type series.
             * @Default {null}
             */
            close?: number;

            /** Size of a bubble in the bubble series. This is applicable only for the bubble series.
             * @Default {null}
             */
            size?: number;

            /** Background color of the point. This is applicable only for column type series and accumulation type series.
             * @Default {null}
             */
            fill?: string;

            /** High value of the point. High value is applicable only for financial type series, range area series and range column series.
             * @Default {null}
             */
            high?: number;

            /** Low value of the point. Low value is applicable only for financial type series, range area series and range column series.
             * @Default {null}
             */
            low?: number;

            /** Options for displaying and customizing marker for a data point. Marker contains shapes and/or data labels.
             */
            marker?: SeriesPointsMarker;

            /** Open value of the point. This is applicable only for financial type series.
             * @Default {null}
             */
            open?: number;

            /** Datalabel text for the point.
             * @Default {null}
             */
            text?: string;

            /** X value of the point.
             * @Default {null}
             */
            x?: number;

            /** Y value of the point.
             * @Default {null}
             */
            y?: number;
        }

        export interface SeriesCornerRadius {

            /** Specifies the radius for the top left corner.
             * @Default {0}
             */
            topLeft?: number;

            /** Specifies the radius for the top right corner.
             * @Default {0}
             */
            topRight?: number;

            /** Specifies the radius for the bottom left corner.
             * @Default {0}
             */
            bottomLeft?: number;

            /** Specifies the radius for the bottom right corner.
             * @Default {0}
             */
            bottomRight?: number;
        }

        export interface SeriesTooltipBorder {

            /** Border Color of the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border Width of the tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface SeriesTooltip {

            /** Options for customizing the border of the tooltip.
             */
            border?: SeriesTooltipBorder;

            /** Customize the corner radius of the tooltip rectangle.
             * @Default {0}
             */
            rx?: number;

            /** Customize the corner radius of the tooltip rectangle.
             * @Default {0}
             */
            ry?: number;

            /** Specifies the duration, the tooltip has to be displayed.
             * @Default {500ms}
             */
            duration?: string;

            /** Enables/disables the animation of the tooltip when moving from one point to another.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Background color of the tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Format of the tooltip content.
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Opacity of the tooltip.
             * @Default {0.95}
             */
            opacity?: number;

            /** Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
             * @Default {null}
             */
            template?: string;

            /** Controls the visibility of the tooltip.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface SeriesTrendlinesTooltipBorder {

            /** Specify the Border color of the  trendline tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of the trendline tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface SeriesTrendlinesTooltip {

            /** Options for customizing the border of the trendline tooltip.
             */
            border?: SeriesTrendlinesTooltipBorder;

            /** Customize the corner radius of the trendline tooltip rectangle.
             * @Default {0}
             */
            rx?: number;

            /** Customize the corner radius of the trendline tooltip rectangle.
             * @Default {0}
             */
            ry?: number;

            /** Specifies the duration of the trendline tooltip to be displayed.
             * @Default {500ms}
             */
            duration?: string;

            /** Enables/disables the animation of the trendline tooltip when moving from one point to other.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Background color of the trendline tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Format of the trendline tooltip content.
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Opacity of the trendline tooltip.
             * @Default {0.5}
             */
            opacity?: number;
        }

        export interface SeriesTrendline {

            /** Show/hides the trendline.
             */
            visibility?: boolean;

            /** Specifies the type of trendline for the series.
             * @Default {linear. See TrendlinesType}
             */
            type?: string;

            /** Name for the trendlines that is to be displayed in legend text.
             * @Default {Trendline}
             */
            name?: string;

            /** Fill color of the trendlines.
             * @Default {#0000FF}
             */
            fill?: string;

            /** Width of the trendlines.
             * @Default {1}
             */
            width?: number;

            /** Opacity of the trendline.
             * @Default {1}
             */
            opacity?: number;

            /** Pattern of dashes and gaps used to stroke the trendline.
             */
            dashArray?: string;

            /** Future trends of the current series.
             * @Default {0}
             */
            forwardForecast?: number;

            /** Past trends of the current series.
             * @Default {0}
             */
            backwardForecast?: number;

            /** Specifies the order of polynomial trendlines.
             * @Default {0}
             */
            polynomialOrder?: number;

            /** Specifies the moving average starting period  value.
             * @Default {2}
             */
            period?: number;

            /** Options for customizing the trendline tooltip
             */
            tooltip?: SeriesTrendlinesTooltip;

            /** Show/hides the trendline legend.
             * @Default {visible}
             */
            visibleOnLegend?: string;

            /** Specifies the trendline intercept value
             * @Default {null}
             */
            intercept?: number;
        }

        export interface SeriesHighlightSettingsBorder {

            /** Border color of the series/point on highlight.
             */
            color?: string;

            /** Border width of the series/point on highlight.
             * @Default {2}
             */
            width?: string;
        }

        export interface SeriesHighlightSettings {

            /** Enables/disables the ability to highlight series or data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether series or data point has to be highlighted.
             * @Default {series. See Mode}
             */
            mode?: ej.datavisualization.Chart.Mode|string;

            /** Color of the series/point on highlight.
             */
            color?: string;

            /** Opacity of the series/point on highlight.
             * @Default {0.6}
             */
            opacity?: number;

            /** Options for customizing the border of series on highlight.
             */
            border?: SeriesHighlightSettingsBorder;

            /** Specifies the pattern for the series/point on highlight.
             * @Default {none. See Pattern}
             */
            pattern?: string;

            /** Custom pattern for the series on highlight.
             */
            customPattern?: string;
        }

        export interface SeriesSelectionSettingsBorder {

            /** Border color of the series/point on selection.
             */
            color?: string;

            /** Border width of the series/point on selection.
             * @Default {2}
             */
            width?: string;
        }

        export interface SeriesSelectionSettings {

            /** Enables/disables the ability to select a series/data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether series or data point has to be selected.
             * @Default {series. See Mode}
             */
            mode?: ej.datavisualization.Chart.Mode|string;

            /** Specifies the type of selection.
             * @Default {single}
             */
            type?: ej.datavisualization.Chart.SelectionType|string;

            /** Specifies the drawn rectangle type.
             * @Default {xy}
             */
            rangeType?: ej.datavisualization.Chart.RangeType|string;

            /** Color of the series/point on selection.
             */
            color?: string;

            /** Opacity of the series/point on selection.
             * @Default {0.6}
             */
            opacity?: number;

            /** Options for customizing the border of series on selection.
             */
            border?: SeriesSelectionSettingsBorder;

            /** Specifies the pattern for the series/point on selection.
             * @Default {none. See Pattern}
             */
            pattern?: string;

            /** Custom pattern for the series on selection.
             */
            customPattern?: string;
        }

        export interface Series {

            /** Color of the point, where the close is up in financial chart.
             * @Default {null}
             */
            bearFillColor?: string;

            /** Options for customizing the border of the series.
             */
            border?: SeriesBorder;

            /** Specifies animation duration for series rendering.
             * @Default {null}
             */
            animationDuration?: string;

            /** Color of the point, where the close is down in financial chart.
             * @Default {null}
             */
            bullFillColor?: string;

            /** To render the column and bar type series in rectangle/cylinder shape. See ColumnFacet
             * @Default {rectangle}
             */
            columnFacet?: ej.datavisualization.Chart.ColumnFacet|string;

            /** Relative width of the columns in column type series. Value ranges from 0 to 1. Width also depends upon columnSpacing property.
             * @Default {0.7}
             */
            columnWidth?: number;

            /** Spacing between columns of different series. Value ranges from 0 to 1
             * @Default {0}
             */
            columnSpacing?: number;

            /** To group the series of stacking collection.
             */
            stackingGroup?: string;

            /** Pattern of dashes and gaps used to stroke the line type series.
             */
            dashArray?: string;

            /** Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies spline tension values for cardinal spline type.Value ranges from 0 to 1.
             * @Default {0.5}
             */
            cardinalSplineTension?: number;

            /** Controls the size of the hole in doughnut series. Value ranges from 0 to 1.
             * @Default {0.4}
             */
            doughnutCoefficient?: number;

            /** Controls the size of the doughnut series. Value ranges from 0 to 1.
             * @Default {0.8}
             */
            doughnutSize?: number;

            /** Type of series to be drawn in radar or polar series.
             * @Default {line. See DrawType}
             */
            drawType?: ej.datavisualization.Chart.DrawType|string;

            /** Enable/disable the animation of series.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** To avoid overlapping of data labels smartly.
             * @Default {null}
             */
            enableSmartLabels?: number;

            /** End angle of pie/doughnut series. For a complete circle, it has to be 360, by default.
             * @Default {null}
             */
            endAngle?: number;

            /** Explodes the pie/doughnut slices on mouse move.
             * @Default {false}
             */
            explode?: boolean;

            /** Explodes all the slice of pie/doughnut on render.
             * @Default {null}
             */
            explodeAll?: boolean;

            /** Index of the point to be exploded from pie/doughnut/pyramid/funnel.
             * @Default {null}
             */
            explodeIndex?: number;

            /** Specifies the distance of the slice from the center, when it is exploded.
             * @Default {25}
             */
            explodeOffset?: number;

            /** Fill color of the series.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the series font.
             */
            font?: SeriesFont;

            /** Specifies the height of the funnel in funnel series. Values can be in both pixel and percentage.
             * @Default {32.7%}
             */
            funnelHeight?: string;

            /** Specifies the width of the funnel in funnel series. Values can be in both pixel and percentage.
             * @Default {11.6%}
             */
            funnelWidth?: string;

            /** Gap between the slices of pyramid/funnel series.
             * @Default {0}
             */
            gapRatio?: number;

            /** Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
             * @Default {true}
             */
            isClosed?: boolean;

            /** Specifies whether to stack the column series in polar/radar charts.
             * @Default {true}
             */
            isStacking?: boolean;

            /** Renders the chart vertically. This is applicable only for Cartesian type series.
             * @Default {false}
             */
            isTransposed?: boolean;

            /** Render the x mark in the center of the box and whisker series type.x represents the average value of the box and whisker series.
             * @Default {true}
             */
            showMedian?: boolean;

            /** Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
             * @Default {inside. See LabelPosition}
             */
            labelPosition?: ej.datavisualization.Chart.LabelPosition|string;

            /** Specifies the mode for splitting the data points in pieOfPie series.
             * @Default {value. See SplitMode}
             */
            splitMode?: ej.datavisualization.Chart.SplitMode|string;

            /** Quartile calculation has been performed in three different formulas to render the boxplot series .
             * @Default {exclusive.See BoxPlotMode}
             */
            boxPlotMode?: ej.datavisualization.Chart.LabelPosition|string;

            /** Options for customizing the bubble options of the Bubble series
             */
            bubbleOptions?: SeriesBubbleOptions;

            /** Specifies the different types of spline curve.
             * @Default {Natural. See SplineType}
             */
            splineType?: ej.datavisualization.Chart.SplineType|string;

            /** Specifies the line cap of the series.
             * @Default {Butt. See LineCap}
             */
            lineCap?: ej.datavisualization.Chart.LineCap|string;

            /** Specifies the type of shape to be used where two lines meet.
             * @Default {Round. See LineJoin}
             */
            lineJoin?: ej.datavisualization.Chart.LineJoin|string;

            /** Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
             */
            marker?: SeriesMarker;

            /** Name of the series, that is to be displayed in the legend.
             * @Default {Add a comment to this line}
             */
            name?: string;

            /** Opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Options for customizing the outlier of individual series.
             */
            outlierSettings?: SeriesOutlierSettings;

            /** Name of a field in data source where fill color for all the data points is generated.
             */
            palette?: string;

            /** Controls the size of pie series. Value ranges from 0 to 1.
             * @Default {0.8}
             */
            pieCoefficient?: number;

            /** Controls the size of the second pie in pieOfPie series. Value ranges from 0 to 1.
             * @Default {0.6}
             */
            pieOfPieCoefficient?: number;

            /** Split Value of pieOfPie series.
             * @Default {null}
             */
            splitValue?: string;

            /** Distance between the two pie's in pieOfPie series.
             * @Default {50}
             */
            gapWidth?: number;

            /** Options for customizing the empty point in the series.
             */
            emptyPointSettings?: SeriesEmptyPointSettings;

            /** Fill color for the positive column of the waterfall.
             * @Default {null}
             */
            positiveFill?: string;

            /** Options for customizing the waterfall connector line.
             */
            connectorLine?: SeriesConnectorLine;

            /** Options to customize the drag and drop in series.
             */
            dragSettings?: SeriesDragSettings;

            /** Options to customize the error bar in series.
             */
            errorBar?: SeriesErrorBar;

            /** Option to add data points; each point should have x and y property. Also, optionally, you can customize the points color, border, marker by using fill, border and marker options.
             */
            points?: SeriesPoint[];

            /** Specifies the mode of the pyramid series.
             * @Default {linear}
             */
            pyramidMode?: ej.datavisualization.Chart.PyramidMode|string;

            /** Specifies ej.Query to select data from dataSource. This property is applicable only when the dataSource is ej.DataManager.
             * @Default {null}
             */
            query?: any;

            /** Start angle from where the pie/doughnut series renders. It starts from 0, by default.
             * @Default {null}
             */
            startAngle?: number;

            /** Options for customizing the corner radius. cornerRadius property also takes the numeric input and applies it for all the four corners of the column.
             */
            cornerRadius?: SeriesCornerRadius;

            /** Options for customizing the tooltip of chart.
             */
            tooltip?: SeriesTooltip;

            /** Specifies the type of the series to render in chart.
             * @Default {column. see Type}
             */
            type?: ej.datavisualization.Chart.Type|string;

            /** Controls the visibility of the series.
             * @Default {visible}
             */
            visibility?: string;

            /** Enables or disables the visibility of legend item.
             * @Default {visible}
             */
            visibleOnLegend?: string;

            /** Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
             * @Default {null}
             */
            xAxisName?: string;

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
             * @Default {null}
             */
            yAxisName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Name of the property in the datasource that contains high value for the series.
             * @Default {null}
             */
            high?: string;

            /** Name of the property in the datasource that contains low value for the series.
             * @Default {null}
             */
            low?: string;

            /** Name of the property in the datasource that contains open value for the series.
             * @Default {null}
             */
            open?: string;

            /** Name of the property in the datasource that contains close value for the series.
             * @Default {null}
             */
            close?: string;

            /** Name of the property in the datasource that contains fill color for the series.
             * @Default {null}
             */
            pointColorMappingName?: string;

            /** Z-order of the series.
             * @Default {0}
             */
            zOrder?: number;

            /** Name of the property in the datasource that contains the size value for the bubble series.
             * @Default {null}
             */
            size?: string;

            /** Option to add trendlines to chart.
             */
            trendlines?: SeriesTrendline[];

            /** Options for customizing the appearance of the series or data point while highlighting.
             */
            highlightSettings?: SeriesHighlightSettings;

            /** Options for customizing the appearance of the series/data point on selection.
             */
            selectionSettings?: SeriesSelectionSettings;
        }

        export interface Size {

            /** Height of the Chart. Height can be specified in either pixel or percentage.
             * @Default {'450'}
             */
            height?: string;

            /** Width of the Chart. Width can be specified in either pixel or percentage.
             * @Default {'450'}
             */
            width?: string;
        }

        export interface TitleBorder {

            /** Width of the title border.
             * @Default {1}
             */
            width?: number;

            /** color of the title border.
             * @Default {transparent}
             */
            color?: string;

            /** opacity of the title border.
             * @Default {0.8}
             */
            opacity?: number;

            /** opacity of the title border.
             * @Default {0.8}
             */
            cornerRadius?: number;
        }

        export interface TitleFont {

            /** Font family for Chart title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for Chart title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight for Chart title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the Chart title.
             * @Default {0.5}
             */
            opacity?: number;

            /** Font size for Chart title.
             * @Default {20px}
             */
            size?: string;
        }

        export interface TitleSubTitleFont {

            /** Font family of sub title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for sub title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Chart.FontStyle|string;

            /** Font weight for sub title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Chart.FontWeight|string;

            /** Opacity of the sub title.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for sub title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface TitleSubTitleBorder {

            /** Width of the subtitle border.
             * @Default {1}
             */
            width?: number;

            /** color of the subtitle border.
             * @Default {transparent}
             */
            color?: string;

            /** opacity of the subtitle border.
             * @Default {0.8}
             */
            opacity?: number;

            /** opacity of the subtitle border.
             * @Default {0.8}
             */
            cornerRadius?: number;
        }

        export interface TitleSubTitle {

            /** Options for customizing the font of sub title.
             */
            font?: TitleSubTitleFont;

            /** Background color for the chart subtitle.
             * @Default {transparent}
             */
            background?: string;

            /** Options to customize the border of the title.
             */
            border?: TitleSubTitleBorder;

            /** Text to be displayed in sub title.
             */
            text?: string;

            /** Alignment of sub title text.
             * @Default {far. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.Alignment|string;

            /** Controls the visibility of the Chart SubTitle
             * @Default {true}
             */
            visible?: boolean;

            /** Specifies whether to trim the Chart SubTitle when the width of the Subtitle exceeds the maximumWidth.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Maximum width of the Subtitle, when the Subtitle exceeds this width, the Subtitle gets trimmed, when enableTrim is true.
             * @Default {auto}
             */
            maximumWidth?: string;

            /** Specifies the action taken when the Chart width is more than the SubTitleWidth.
             * @Default {trim.}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;
        }

        export interface Title {

            /** Background color for the chart title.
             * @Default {transparent}
             */
            background?: string;

            /** Options to customize the border of the title.
             */
            border?: TitleBorder;

            /** Options for customizing the font of Chart title.
             */
            font?: TitleFont;

            /** Controls the visibility of the Chart title
             * @Default {true}
             */
            visible?: boolean;

            /** Specifies whether to trim the Chart Title when the width of the title exceeds the maximumWidth.
             * @Default {false}
             */
            enableTrim?: boolean;

            /** Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
             * @Default {auto}
             */
            maximumWidth?: string;

            /** Specifies the action taken when the Chart width is more than the titleWidth.
             * @Default {trim.}
             */
            textOverflow?: ej.datavisualization.Chart.TextOverflow|string;

            /** Options to customize the sub title of Chart.
             */
            subTitle?: TitleSubTitle;

            /** Text to be displayed in Chart title.
             */
            text?: string;

            /** Alignment of the title text.
             * @Default {Center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Chart.Alignment|string;
        }

        export interface Zooming {

            /** Enables or disables zooming.
             * @Default {false}
             */
            enable?: boolean;

            /** Enables or disables pinch zooming.
             * @Default {true}
             */
            enablePinching?: boolean;

            /** Enable or disables the differed zooming. When it is enabled, chart is updated only on mouse up action while zooming and panning.
             * @Default {false}
             */
            enableDeferredZoom?: boolean;

            /** Enables/disables the ability to zoom the chart on moving the mouse wheel.
             * @Default {false}
             */
            enableMouseWheel?: boolean;

            /** Specifies whether to allow zooming the chart vertically or horizontally or in both ways.
             * @Default {'x,y'}
             */
            type?: string;

            /** Toggles the visibility of the scrollbar, which will be displayed while zooming.
             * @Default {false}
             */
            enableScrollbar?: boolean;

            /** To display user specified buttons in zooming toolbar.
             * @Default {[zoomIn, zoomOut, zoom, pan, reset]}
             */
            toolbarItems?: any[];
        }
    }
    namespace Chart {
        enum CoordinateUnit {
            //string
            None,
            //string
            Pixels,
            //string
            Points,
        }
    }
    namespace Chart {
        enum HorizontalAlignment {
            //string
            Left,
            //string
            Right,
            //string
            Middle,
        }
    }
    namespace Chart {
        enum Region {
            //string
            Chart,
            //string
            Series,
        }
    }
    namespace Chart {
        enum VerticalAlignment {
            //string
            Top,
            //string
            Bottom,
            //string
            Middle,
        }
    }
    namespace Chart {
        enum ExportingType {
            //string
            PNG,
            //string
            JPG,
            //string
            PDF,
            //string
            DOCX,
            //string
            XLSX,
            //string
            SVG,
        }
    }
    namespace Chart {
        enum ExportingOrientation {
            //string
            Portrait,
            //string
            Landscape,
        }
    }
    namespace Chart {
        enum ExportingMode {
            //string
            ServerSide,
            //string
            ClientSide,
        }
    }
    namespace Chart {
        enum Unit {
            //string
            Percentage,
            //string
            Pixel,
        }
    }
    namespace Chart {
        enum ColumnFacet {
            //string
            Rectangle,
            //string
            Cylinder,
        }
    }
    namespace Chart {
        enum DrawType {
            //string
            Line,
            //string
            Area,
            //string
            Column,
        }
    }
    namespace Chart {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Chart {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }
    namespace Chart {
        enum LabelPosition {
            //string
            Inside,
            //string
            Outside,
            //string
            OutsideExtended,
        }
    }
    namespace Chart {
        enum SplitMode {
            //string
            Position,
            //string
            Value,
            //string
            Percentage,
            //string
            Indexes,
        }
    }
    namespace Chart {
        enum boxPlotMode {
            //string
            Exclusive,
            //string
            Inclusive,
            //string
            Normal,
        }
    }
    namespace Chart {
        enum RadiusMode {
            //string
            MinMax,
            //string
            Auto,
        }
    }
    namespace Chart {
        enum SplineType {
            //string
            Natural,
            //string
            Monotonic,
            //string
            Cardinal,
            //string
            Clamped,
        }
    }
    namespace Chart {
        enum LineCap {
            //string
            Butt,
            //string
            Round,
            //string
            Square,
        }
    }
    namespace Chart {
        enum LineJoin {
            //string
            Round,
            //string
            Bevel,
            //string
            Miter,
        }
    }
    namespace Chart {
        enum ConnectorLineType {
            //string
            Line,
            //string
            Bezier,
        }
    }
    namespace Chart {
        enum HorizontalTextAlignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace Chart {
        enum Shape {
            //string
            None,
            //string
            LeftArrow,
            //string
            RightArrow,
            //string
            Circle,
            //string
            Cross,
            //string
            HorizLine,
            //string
            VertLine,
            //string
            Diamond,
            //string
            Rectangle,
            //string
            Triangle,
            //string
            Hexagon,
            //string
            Pentagon,
            //string
            Star,
            //string
            Ellipse,
            //string
            Trapezoid,
            //string
            UpArrow,
            //string
            DownArrow,
            //string
            Image,
            //string
            SeriesType,
        }
    }
    namespace Chart {
        enum TextPosition {
            //string
            Top,
            //string
            Bottom,
            //string
            Middle,
        }
    }
    namespace Chart {
        enum VerticalTextAlignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace Chart {
        enum PyramidMode {
            //string
            Linear,
            //string
            Surface,
        }
    }
    namespace Chart {
        enum Type {
            //string
            Area,
            //string
            Line,
            //string
            Spline,
            //string
            Column,
            //string
            Scatter,
            //string
            Bubble,
            //string
            SplineArea,
            //string
            StepArea,
            //string
            StepLine,
            //string
            Pie,
            //string
            HiLo,
            //string
            HiLoOpenClose,
            //string
            Candle,
            //string
            Bar,
            //string
            StackingArea,
            //string
            StackingArea100,
            //string
            RangeColumn,
            //string
            StackingColumn,
            //string
            StackingColumn100,
            //string
            StackingBar,
            //string
            StackingBar100,
            //string
            StackingSplineArea,
            //string
            StackingSplineArea100,
            //string
            Pyramid,
            //string
            Funnel,
            //string
            Doughnut,
            //string
            Polar,
            //string
            Radar,
            //string
            RangeArea,
        }
    }
    namespace Chart {
        enum EmptyPointMode {
            //string
            Gap,
            //string
            Zero,
            //string
            Average,
        }
    }
    namespace Chart {
        enum ErrorBarType {
            //string
            FixedValue,
            //string
            Percentage,
            //string
            StandardDeviation,
            //string
            StandardError,
        }
    }
    namespace Chart {
        enum ErrorBarMode {
            //string
            Both,
            //string
            Vertical,
            //string
            Horizontal,
        }
    }
    namespace Chart {
        enum ErrorBarDirection {
            //string
            Both,
            //string
            Plus,
            //string
            Minus,
        }
    }
    namespace Chart {
        enum TrendlinesType {
            //string
            Linear,
            //string
            Exponential,
            //string
            Logarithmic,
            //string
            Power,
            //string
            Polynomial,
        }
    }
    namespace Chart {
        enum Mode {
            //string
            Series,
            //string
            Point,
            //string
            Cluster,
            //string
            Range,
        }
    }
    namespace Chart {
        enum SelectionType {
            //string
            Single,
            //string
            Multiple,
        }
    }
    namespace Chart {
        enum RangeType {
            //string
            XY,
            //string
            X,
            //string
            Y,
        }
    }
    namespace Chart {
        enum CrosshairMode {
            //string
            Float,
            //string
            Grouping,
        }
    }
    namespace Chart {
        enum CrosshairType {
            //string
            Crosshair,
            //string
            Trackball,
        }
    }
    namespace Chart {
        enum Alignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace Chart {
        enum Position {
            //string
            Left,
            //string
            Right,
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace Chart {
        enum TextOverflow {
            //string
            None,
            //string
            Trim,
            //string
            Wrap,
            //string
            WrapAndTrim,
        }
    }
    namespace Chart {
        enum LabelPlacement {
            //string
            OnTicks,
            //string
            BetweenTicks,
        }
    }
    namespace Chart {
        enum EdgeLabelPlacement {
            //string
            None,
            //string
            Shift,
            //string
            Hide,
        }
    }
    namespace Chart {
        enum IntervalType {
            //string
            Days,
            //string
            Hours,
            //string
            Seconds,
            //string
            Milliseconds,
            //string
            Minutes,
            //string
            Months,
            //string
            Years,
        }
    }
    namespace Chart {
        enum LabelIntersectAction {
            //string
            None,
            //string
            Rotate90,
            //string
            Rotate45,
            //string
            Wrap,
            //string
            WrapByword,
            //string
            Trim,
            //string
            Hide,
            //string
            MultipleRows,
        }
    }
    namespace Chart {
        enum LabelAlignment {
            //string
            Near,
            //string
            Far,
            //string
            Center,
        }
    }
    namespace Chart {
        enum AxisOrientation {
            //string
            Horizontal,
            //string
            Vertical,
        }
    }
    namespace Chart {
        enum RangePadding {
            //string
            Additional,
            //string
            Normal,
            //string
            None,
            //string
            Round,
        }
    }
    namespace Chart {
        enum MultiLevelLabelsBorderType {
            //string
            Rectangle,
            //string
            None,
            //string
            WithoutTopAndBottom,
            //string
            Brace,
            //string
            CurlyBrace,
        }
    }
    namespace Chart {
        enum TextAlignment {
            //string
            MiddleTop,
            //string
            MiddleCenter,
            //string
            MiddleBottom,
        }
    }
    namespace Chart {
        enum ZIndex {
            //string
            Inside,
            //string
            Over,
        }
    }
    namespace Chart {
        enum TickLinesPosition {
            //string
            Inside,
            //string
            Outside,
        }
    }
    namespace Chart {
        enum ValueType {
            //string
            Double,
            //string
            Category,
            //string
            DateTime,
            //string
            Logarithmic,
        }
    }
    namespace Chart {
        enum Theme {
            //string
            Azure,
            //string
            FlatLight,
            //string
            FlatDark,
            //string
            Azuredark,
            //string
            Lime,
            //string
            LimeDark,
            //string
            Saffron,
            //string
            SaffronDark,
            //string
            GradientLight,
            //string
            GradientDark,
        }
    }

    class RangeNavigator extends ej.Widget {
        static fn: RangeNavigator;
        constructor(element: JQuery | Element, options?: RangeNavigator.Model);
        static Locale: any;
        model: RangeNavigator.Model;
        defaults: RangeNavigator.Model;

        /** destroy the range navigator widget
         * @returns {void}
         */
        _destroy(): void;
    }
    export namespace RangeNavigator {

        export interface Model {

            /** Toggles the placement of slider exactly on the place it left or on the nearest interval.
             * @Default {false}
             */
            allowSnapping?: boolean;

            /** It allows to show the value between the particular periods (i.e) from 1st January to 31st February and so on. The default value is true. If we set the property as false, it allows
             * to show the value between the particular periods.(i.e) from 1st January to 31st January and so on.
             * @Default {true}
             */
            allowNextValue?: boolean;

            /** Options for customizing the color, opacity and width of the chart border.
             */
            border?: Border;

            /** Specifies the data source for range navigator.
             */
            dataSource?: any;

            /** Specifies the properties used for customizing the range series.
             */
            series?: Series[];

            /** Specifies the  properties used for customizing all the range series.
             */
            seriesSettings?: SeriesSetting[];

            /** Toggles the redrawing of chart on moving the sliders.
             * @Default {true}
             */
            enableDeferredUpdate?: boolean;

            /** Enable the scrollbar option in the rangenavigator.
             * @Default {false}
             */
            enableScrollbar?: boolean;

            /** Enable the resize option in the rangenavigator.
             * @Default {false}
             */
            enableAutoResizing?: boolean;

            /** Toggles the direction of rendering the range navigator control.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Sets a value whether to make the range navigator responsive on resize.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Options for customizing the labels colors, font, style, size, horizontalAlignment and opacity.
             */
            labelSettings?: LabelSettings;

            /** This property is to specify the localization of range navigator.
             * @Default {en-US}
             */
            locale?: string;

            /** Options for customizing the range navigator.
             */
            navigatorStyleSettings?: NavigatorStyleSettings;

            /** Padding specifies the gap between the container and the range navigator.
             * @Default {0}
             */
            padding?: string;

            /** If the range is not given explicitly, range will be calculated automatically.
             * @Default {none}
             */
            rangePadding?: ej.datavisualization.RangeNavigator.RangePadding|string;

            /** Options for customizing the starting and ending ranges.
             */
            rangeSettings?: RangeSettings;

            /** selectedData is for getting the data when the &quot;rangeChanged&quot; event trigger from client side.
             */
            selectedData?: any;

            /** Options for customizing the start and end range values.
             */
            selectedRangeSettings?: SelectedRangeSettings;

            /** Options for rendering scrollbar based on the start and end range values.
             */
            scrollRangeSettings?: ScrollRangeSettings;

            /** Contains property to customize the hight and width of range navigator.
             */
            sizeSettings?: SizeSettings;

            /** By specifying this property the user can change the theme of the range navigator.
             * @Default {null}
             */
            theme?: string;

            /** Options for customizing the tooltip in range navigator.
             */
            tooltipSettings?: TooltipSettings;

            /** Options for configuring minor grid lines, major grid lines, axis line of axis.
             */
            valueAxisSettings?: ValueAxisSettings;

            /** You can plot data of type date time or numeric. This property determines the type of data that this axis will handle.
             * @Default {datetime}
             */
            valueType?: ej.datavisualization.RangeNavigator.ValueType|string;

            /** Specifies the xName for dataSource. This is used to take the x values from dataSource
             */
            xName?: any;

            /** Specifies the yName for dataSource. This is used to take the y values from dataSource
             */
            yName?: any;

            /** Fires on load of range navigator.
             */
            load?(e: LoadEventArgs): void;

            /** Fires after range navigator is loaded.
             */
            loaded?(e: LoadedEventArgs): void;

            /** Fires on changing the range of range navigator.
             */
            rangeChanged?(e: RangeChangedEventArgs): void;

            /** Fires on changing the scrollbar position of range navigator.
             */
            scrollChanged?(e: ScrollChangedEventArgs): void;

            /** Fires on when starting to change the scrollbar position of range navigator.
             */
            scrollStart?(e: ScrollStartEventArgs): void;

            /** Fires on when starting to change the slider position of range navigator.
             */
            selectedRangeStart?(e: SelectedRangeStartEventArgs): void;

            /** Fires when the selection  ends in the range navigator
             */
            selectedRangeEnd?(e: SelectedRangeEndEventArgs): void;

            /** Fires on changes ending the scrollbar position of range navigator.
             */
            scrollEnd?(e: ScrollEndEventArgs): void;

            /** Fires, on clicking the range of range navigator.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the range of range navigator.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the range of range navigator.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LoadEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface LoadedEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RangeChangedEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ScrollChangedEventArgs {

            /** parameters from RangeNavigator
             */
            data?: any;

            /** returns the scrollbar position old start and end range value on changing scrollbar
             */
            dataOldRange?: any;

            /** returns the scrollbar position new start and end range value on changing scrollbar
             */
            dataNewRange?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ScrollStartEventArgs {

            /** parameters from RangeNavigator
             */
            data?: any;

            /** returns the scrollbar position starting range value on changing scrollbar
             */
            dataStartRange?: string;

            /** returns the scrollbar position end range value on changing scrollbar
             */
            dataEndRange?: string;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface SelectedRangeStartEventArgs {

            /** parameters from RangeNavigator
             */
            data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface SelectedRangeEndEventArgs {

            /** parameters from RangeNavigator
             */
            data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ScrollEndEventArgs {

            /** parameters from RangeNavigator
             */
            data?: any;

            /** returns the scrollbar position old start and end range value on change end of scrollbar
             */
            dataOldRange?: any;

            /** returns the scrollbar position new start and end range value on change end of scrollbar
             */
            dataNewRange?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the RangeNavigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface RightClickEventArgs {

            /** parameters from range navigator
             */
            Data?: any;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the range navigator model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;
        }

        export interface Border {

            /** Border color of rangenavigator. When enable the scrollbar, the default color will be set as &quot;#B4B4B4&quot;.
             * @Default {transparent}
             */
            color?: string;

            /** Opacity of the rangeNavigator border.
             * @Default {1}
             */
            opacity?: number;

            /** Width of the RangeNavigator border.
             * @Default {1}
             */
            width?: number;
        }

        export interface Series {

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies the type of the series to render in chart.
             * @Default {column. see Type}
             */
            type?: ej.datavisualization.RangeNavigator.Type|string;

            /** Enable/disable the animation of series.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Fill color of the series.
             * @Default {null}
             */
            fill?: string;
        }

        export interface SeriesSetting {

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies the type of the series to render in chart.
             * @Default {column. see Type}
             */
            type?: ej.datavisualization.RangeNavigator.Type|string;

            /** Enable/disable the animation of series.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Fill color of the series.
             * @Default {null}
             */
            fill?: string;
        }

        export interface LabelSettingsHigherLevelBorder {

            /** Specifies the border color of grid lines.
             * @Default {transparent}
             */
            color?: string;

            /** Specifies the border width of grid lines.
             * @Default {0.5}
             */
            width?: string;
        }

        export interface LabelSettingsHigherLevelGridLineStyle {

            /** Specifies the color of grid lines in higher level.
             * @Default {#B5B5B5}
             */
            color?: string;

            /** Specifies the dashArray of grid lines in higher level.
             * @Default {20 5 0}
             */
            dashArray?: string;

            /** Specifies the width of grid lines in higher level.
             * @Default {#B5B5B5}
             */
            width?: string;
        }

        export interface LabelSettingsHigherLevelStyleFont {

            /** Specifies the label font color. Labels render with the specified font color.
             * @Default {black}
             */
            color?: string;

            /** Specifies the label font family. Labels render with the specified font family.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the label font style. Labels render with the specified font style.
             * @Default {Normal}
             */
            fontStyle?: string;

            /** Specifies the label font weight. Labels render with the specified font weight.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Specifies the label opacity. Labels render with the specified opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the label font size. Labels render with the specified font size.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LabelSettingsHigherLevelStyle {

            /** Options for customizing the font properties.
             */
            font?: LabelSettingsHigherLevelStyleFont;

            /** Specifies the horizontal text alignment of the text in label.
             * @Default {middle}
             */
            horizontalAlignment?: string;
        }

        export interface LabelSettingsHigherLevel {

            /** Options for customizing the border of grid lines in higher level.
             */
            border?: LabelSettingsHigherLevelBorder;

            /** Specifies the fill color of higher level labels.
             * @Default {transparent}
             */
            fill?: string;

            /** Options for customizing the grid line colors, width, dashArray, border.
             */
            gridLineStyle?: LabelSettingsHigherLevelGridLineStyle;

            /** Specifies the intervalType for higher level labels. See
             * @Default {auto}
             */
            intervalType?: ej.datavisualization.RangeNavigator.IntervalType|string;

            /** Specifies the position of the labels to render either inside or outside of plot area
             * @Default {outside}
             */
            labelPlacement?: ej.datavisualization.RangeNavigator.LabelPlacement|string;

            /** Specifies to hide the labels when it intersects with each other.
             * @Default {none}
             */
            labelIntersectAction?: ej.datavisualization.RangeNavigator.LabelIntersectAction|string;

            /** Specifies the position of the labels in higher level
             * @Default {top}
             */
            position?: ej.datavisualization.RangeNavigator.Position|string;

            /** Options for customizing the style of higher level labels.
             */
            style?: LabelSettingsHigherLevelStyle;

            /** Toggles the visibility of higher level labels.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface LabelSettingsLowerLevelBorder {

            /** Specifies the border color of grid lines.
             * @Default {transparent}
             */
            color?: string;

            /** Specifies the border width of grid lines.
             * @Default {0.5}
             */
            width?: string;
        }

        export interface LabelSettingsLowerLevelGridLineStyle {

            /** Specifies the color of grid lines in lower level.
             * @Default {#B5B5B5}
             */
            color?: string;

            /** Specifies the dashArray of gridLines in lowerLevel.
             * @Default {20 5 0}
             */
            dashArray?: string;

            /** Specifies the width of grid lines in lower level.
             * @Default {#B5B5B5}
             */
            width?: string;
        }

        export interface LabelSettingsLowerLevelStyleFont {

            /** Specifies the color of labels. Label text render in this specified color.
             * @Default {black}
             */
            color?: string;

            /** Specifies the font family of labels. Label text render in this specified font family.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font style of labels. Label text render in this specified font style.
             * @Default {Normal}
             */
            fontStyle?: string;

            /** Specifies the font weight of labels. Label text render in this specified font weight.
             * @Default {regular}
             */
            fontWeight?: string;

            /** Specifies the opacity of labels. Label text render in this specified opacity.
             * @Default {12px}
             */
            opacity?: string;

            /** Specifies the size of labels. Label text render in this specified size.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LabelSettingsLowerLevelStyle {

            /** Options for customizing the font of labels.
             */
            font?: LabelSettingsLowerLevelStyleFont;

            /** Specifies the horizontal text alignment of the text in label.
             * @Default {middle}
             */
            horizontalAlignment?: string;
        }

        export interface LabelSettingsLowerLevel {

            /** Options for customizing the border of grid lines in lower level.
             */
            border?: LabelSettingsLowerLevelBorder;

            /** Specifies the fill color of labels in lower level.
             * @Default {transparent}
             */
            fill?: string;

            /** Options for customizing the grid lines in lower level.
             */
            gridLineStyle?: LabelSettingsLowerLevelGridLineStyle;

            /** Specifies the intervalType of the labels in lower level.See IntervalType
             * @Default {auto}
             */
            intervalType?: ej.datavisualization.RangeNavigator.IntervalType|string;

            /** Specifies the position of the labels to render either inside or outside of plot area. See LabelPlacement
             * @Default {outside}
             */
            labelPlacement?: ej.datavisualization.RangeNavigator.LabelPlacement|string;

            /** Specifies to hide the labels when it intersects with each other.
             * @Default {none}
             */
            labelIntersectAction?: ej.datavisualization.RangeNavigator.LabelIntersectAction|string;

            /** Specifies the position of the labels in lower level.See Position
             * @Default {bottom}
             */
            position?: ej.datavisualization.RangeNavigator.Position|string;

            /** Options for customizing the style of labels.
             */
            style?: LabelSettingsLowerLevelStyle;

            /** Toggles the visibility of labels in lower level.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface LabelSettingsStyleFont {

            /** Specifies the label color. This color is applied to the labels in range navigator.
             * @Default {#333333}
             */
            color?: string;

            /** Specifies the label font family. Labels render with the specified font family.
             * @Default {Segoe UI}
             */
            family?: string;

            /** Specifies the label font opacity. Labels render with the specified font opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the label font size. Labels render with the specified font size.
             * @Default {1px}
             */
            size?: string;

            /** Specifies the label font style. Labels render with the specified font style..
             * @Default {Normal}
             */
            style?: ej.datavisualization.RangeNavigator.FontStyle|string;

            /** Specifies the label font weight
             * @Default {regular}
             */
            weight?: ej.datavisualization.RangeNavigator.FontWeight|string;
        }

        export interface LabelSettingsStyle {

            /** Options for customizing the font of labels in range navigator.
             */
            font?: LabelSettingsStyleFont;

            /** Specifies the horizontalAlignment of the label in RangeNavigator
             * @Default {middle}
             */
            horizontalAlignment?: ej.datavisualization.RangeNavigator.HorizontalAlignment|string;
        }

        export interface LabelSettings {

            /** Options for customizing the higher level labels in range navigator.
             */
            higherLevel?: LabelSettingsHigherLevel;

            /** Options for customizing the labels in lower level.
             */
            lowerLevel?: LabelSettingsLowerLevel;

            /** Options for customizing the style of labels in range navigator.
             */
            style?: LabelSettingsStyle;
        }

        export interface NavigatorStyleSettingsBorder {

            /** Specifies the border color of range navigator.
             * @Default {transparent}
             */
            color?: string;

            /** Specifies the dash array of range navigator.
             * @Default {null}
             */
            dashArray?: string;

            /** Specifies the border width of range navigator.
             * @Default {0.5}
             */
            width?: number;
        }

        export interface NavigatorStyleSettingsMajorGridLineStyle {

            /** Specifies the color of major grid lines in range navigator.
             * @Default {#B5B5B5}
             */
            color?: string;

            /** Toggles the visibility of major grid lines.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface NavigatorStyleSettingsMinorGridLineStyle {

            /** Specifies the color of minor grid lines in range navigator.
             * @Default {#B5B5B5}
             */
            color?: string;

            /** Toggles the visibility of minor grid lines.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface NavigatorStyleSettingsHighlightSettingsBorder {

            /** To set the border color to the highlight.
             * @Default {null}
             */
            color?: string;

            /** To set the border width to the highlight.
             * @Default {1}
             */
            width?: number;
        }

        export interface NavigatorStyleSettingsHighlightSettings {

            /** Enable the highlight settings in range navigator.
             * @Default {false}
             */
            enable?: boolean;

            /** To set the color to the highlight.
             * @Default {null}
             */
            color?: string;

            /** To set the opacity to the highlight.
             * @Default {0.5}
             */
            opacity?: number;

            /** Contains the border properties for highlighting rectangle.
             */
            border?: NavigatorStyleSettingsHighlightSettingsBorder;
        }

        export interface NavigatorStyleSettingsSelectionSettingsBorder {

            /** To set the border color to the selection.
             * @Default {null}
             */
            color?: string;

            /** To set the border width to the selection.
             * @Default {1}
             */
            width?: number;
        }

        export interface NavigatorStyleSettingsSelectionSettings {

            /** Enable the selection settings in range navigator.
             * @Default {false}
             */
            enable?: boolean;

            /** To set the color to the selection.
             * @Default {null}
             */
            color?: string;

            /** To set the opacity to the selection.
             * @Default {0.5}
             */
            opacity?: number;

            /** Contains the border properties for selecting the rectangle.
             */
            border?: NavigatorStyleSettingsSelectionSettingsBorder;
        }

        export interface NavigatorStyleSettings {

            /** Specifies the background color of range navigator.
             * @Default {#dddddd}
             */
            background?: string;

            /** Options for customizing the border color and width of range navigator.
             */
            border?: NavigatorStyleSettingsBorder;

            /** Specifies the left side thumb template in range navigator we can give either div id or HTML string
             * @Default {null}
             */
            leftThumbTemplate?: string;

            /** Options for customizing the major grid lines.
             */
            majorGridLineStyle?: NavigatorStyleSettingsMajorGridLineStyle;

            /** Options for customizing the minor grid lines.
             */
            minorGridLineStyle?: NavigatorStyleSettingsMinorGridLineStyle;

            /** Specifies the opacity of RangeNavigator.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the right side thumb template in range navigator we can give either div id or HTML string
             * @Default {null}
             */
            rightThumbTemplate?: string;

            /** Specifies the color of the selected region in range navigator.
             * @Default {#EFEFEF}
             */
            selectedRegionColor?: string;

            /** Specifies the opacity of Selected Region.
             * @Default {0}
             */
            selectedRegionOpacity?: number;

            /** Specifies the color of the thumb in range navigator.
             * @Default {#2382C3}
             */
            thumbColor?: string;

            /** Specifies the radius of the thumb in range navigator.
             * @Default {10}
             */
            thumbRadius?: number;

            /** Specifies the stroke color of the thumb in range navigator.
             * @Default {#303030}
             */
            thumbStroke?: string;

            /** Specifies the color of the unselected region in range navigator.
             * @Default {#5EABDE}
             */
            unselectedRegionColor?: string;

            /** Specifies the opacity of Unselected Region.
             * @Default {0.3}
             */
            unselectedRegionOpacity?: number;

            /** Contains the options for highlighting the range navigator on mouse over.
             */
            highlightSettings?: NavigatorStyleSettingsHighlightSettings;

            /** Contains the options for selection the range navigator on mouse over.
             */
            selectionSettings?: NavigatorStyleSettingsSelectionSettings;
        }

        export interface RangeSettings {

            /** Specifies the ending range of range navigator.
             * @Default {null}
             */
            end?: string;

            /** Specifies the starting range of range navigator.
             * @Default {null}
             */
            start?: string;
        }

        export interface SelectedRangeSettings {

            /** Specifies the ending range of range navigator.
             * @Default {null}
             */
            end?: string;

            /** Specifies the starting range of range navigator.
             * @Default {null}
             */
            start?: string;
        }

        export interface ScrollRangeSettings {

            /** Specifies the ending range of range navigator scrollbar and that should be greater than the rangenavigator datasource end value.
             * @Default {null}
             */
            end?: string;

            /** Specifies the starting range of range navigator scrollbar and that should be less than the rangenavigator datasource start value.
             * @Default {null}
             */
            start?: string;
        }

        export interface SizeSettings {

            /** Specifies height of the range navigator.
             * @Default {null}
             */
            height?: string;

            /** Specifies width of the range navigator.
             * @Default {null}
             */
            width?: string;
        }

        export interface TooltipSettingsFont {

            /** Specifies the color of text in tooltip. Tooltip text render in the specified color.
             * @Default {#FFFFFF}
             */
            color?: string;

            /** Specifies the font family of text in tooltip. Tooltip text render in the specified font family.
             * @Default {Segoe UI}
             */
            family?: string;

            /** Specifies the font style of text in tooltip. Tooltip text render in the specified font style.
             * @Default {ej.datavisualization.RangeNavigator.fontStyle.Normal}
             */
            fontStyle?: string;

            /** Specifies the opacity of text in tooltip. Tooltip text render in the specified opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the size of text in tooltip. Tooltip text render in the specified size.
             * @Default {10px}
             */
            size?: string;

            /** Specifies the weight of text in tooltip. Tooltip text render in the specified weight.
             * @Default {ej.datavisualization.RangeNavigator.weight.Regular}
             */
            weight?: string;
        }

        export interface TooltipSettings {

            /** Specifies the background color of tooltip.
             * @Default {#303030}
             */
            backgroundColor?: string;

            /** Options for customizing the font in tooltip.
             */
            font?: TooltipSettingsFont;

            /** Specifies the format of text to be displayed in tooltip.
             * @Default {MM/dd/yyyy}
             */
            labelFormat?: string;

            /** Specifies the mode of displaying the tooltip. Neither to display the tooltip always nor on demand.
             * @Default {null}
             */
            tooltipDisplayMode?: string;

            /** Toggles the visibility of tooltip.
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface ValueAxisSettingsAxisLine {

            /** Toggles the visibility of axis line.
             * @Default {none}
             */
            visible?: string;
        }

        export interface ValueAxisSettingsFont {

            /** Text in axis render with the specified size.
             * @Default {0px}
             */
            size?: string;
        }

        export interface ValueAxisSettingsMajorGridLines {

            /** Toggles the visibility of major grid lines.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface ValueAxisSettingsMajorTickLines {

            /** Specifies the size of the majorTickLines in range navigator
             * @Default {0}
             */
            size?: number;

            /** Toggles the visibility of major tick lines.
             * @Default {true}
             */
            visible?: boolean;

            /** Specifies width of the major tick lines.
             * @Default {0}
             */
            width?: number;
        }

        export interface ValueAxisSettingsRange {

            /** Default Value
             * @Default {null}
             */
            min?: number;

            /** Default Value
             * @Default {null}
             */
            max?: number;

            /** Default Value
             * @Default {null}
             */
            interval?: number;
        }

        export interface ValueAxisSettings {

            /** Options for customizing the axis line.
             */
            axisLine?: ValueAxisSettingsAxisLine;

            /** Options for customizing the font of the axis.
             */
            font?: ValueAxisSettingsFont;

            /** Options for customizing the major grid lines.
             */
            majorGridLines?: ValueAxisSettingsMajorGridLines;

            /** Options for customizing the major tick lines in axis.
             */
            majorTickLines?: ValueAxisSettingsMajorTickLines;

            /** You can customize the range of the axis by setting minimum , maximum and interval.
             */
            range?: ValueAxisSettingsRange;

            /** If the range is not given explicitly, range will be calculated automatically. You can customize the automatic range calculation using rangePadding.
             * @Default {none}
             */
            rangePadding?: string;

            /** Toggles the visibility of axis in range navigator.
             * @Default {false}
             */
            visible?: boolean;
        }
    }
    namespace RangeNavigator {
        enum Type {
            //string
            Area,
            //string
            Line,
            //string
            Spline,
            //string
            StepArea,
            //string
            SplineArea,
            //string
            StepLine,
        }
    }
    namespace RangeNavigator {
        enum IntervalType {
            //string
            Years,
            //string
            Quarters,
            //string
            Months,
            //string
            Weeks,
            //string
            Days,
            //string
            Hours,
            //string
            Minutes,
        }
    }
    namespace RangeNavigator {
        enum LabelPlacement {
            //string
            Inside,
            //string
            Outside,
        }
    }
    namespace RangeNavigator {
        enum LabelIntersectAction {
            //string
            None,
            //string
            Hide,
        }
    }
    namespace RangeNavigator {
        enum Position {
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace RangeNavigator {
        enum FontStyle {
            //string
            Normal,
            //string
            Bold,
            //string
            Italic,
        }
    }
    namespace RangeNavigator {
        enum FontWeight {
            //string
            Regular,
            //string
            Lighter,
        }
    }
    namespace RangeNavigator {
        enum HorizontalAlignment {
            //string
            Middle,
            //string
            Left,
            //string
            Right,
        }
    }
    namespace RangeNavigator {
        enum RangePadding {
            //string
            Additional,
            //string
            Normal,
            //string
            None,
            //string
            Round,
        }
    }
    namespace RangeNavigator {
        enum ValueType {
            //string
            Numeric,
            //string
            DateTime,
        }
    }

    class BulletGraph extends ej.Widget {
        static fn: BulletGraph;
        constructor(element: JQuery | Element, options?: BulletGraph.Model);
        static Locale: any;
        model: BulletGraph.Model;
        defaults: BulletGraph.Model;

        /** To destroy the bullet graph
         * @returns {void}
         */
        destroy(): void;

        /** To redraw the bullet graph
         * @returns {void}
         */
        redraw(): void;

        /** To set the value for comparative measure in bullet graph.
         * @param {number} value for the graph
         * @param {number} value for the graph
         * @returns {void}
         */
        setComparativeMeasureSymbol(index: number, measure: number): void;

        /** To set the value for feature measure bar.
         * @param {number} value for the graph
         * @param {number} value for the graph
         * @returns {void}
         */
        setFeatureMeasureBarValue(index: number, measure: number): void;
    }
    export namespace BulletGraph {

        export interface Model {

            /** Toggles the visibility of the range stroke color of the labels.
             * @Default {false}
             */
            applyRangeStrokeToLabels?: boolean;

            /** Toggles the visibility of the range stroke color of the ticks.
             * @Default {false}
             */
            applyRangeStrokeToTicks?: boolean;

            /** Contains property to customize the caption in bullet graph.
             */
            captionSettings?: CaptionSettings;

            /** Comparative measure bar in bullet graph render till the specified value.
             * @Default {0}
             */
            comparativeMeasureValue?: number;

            /** Toggles the animation of bullet graph.
             * @Default {true}
             */
            enableAnimation?: boolean;

            /** Controls whether bullet graph has to be responsive while resizing.
             * @Default {true}
             */
            enableResizing?: boolean;

            /** Specifies the direction of flow in bullet graph. Neither it may be backward nor forward.
             * @Default {forward}
             */
            flowDirection?: ej.datavisualization.BulletGraph.FlowDirection|string;

            /** Specifies the height of the bullet graph.
             * @Default {90}
             */
            height?: number;

            /** Sets a value whether to make the bullet graph responsive on resize.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Specifies to convert the date object to string, using locale settings.
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Name of the culture based on which bulletgraph should be localized.
             * @Default {en-US}
             */
            locale?: string;

            /** Bullet graph will render in the specified orientation.
             * @Default {horizontal}
             */
            orientation?: ej.datavisualization.BulletGraph.Orientation|string;

            /** Contains property to customize the qualitative ranges.
             */
            qualitativeRanges?: QualitativeRange[];

            /** Size of the qualitative range depends up on the specified value.
             * @Default {32}
             */
            qualitativeRangeSize?: number;

            /** Length of the quantitative range depends up on the specified value.
             * @Default {475}
             */
            quantitativeScaleLength?: number;

            /** Contains all the properties to customize quantitative scale.
             */
            quantitativeScaleSettings?: QuantitativeScaleSettings;

            /** By specifying this property the user can change the theme of the bullet graph.
             * @Default {flatlight}
             */
            theme?: string;

            /** Contains all the properties to customize tooltip.
             */
            tooltipSettings?: TooltipSettings;

            /** Feature measure bar in bullet graph render till the specified value.
             * @Default {0}
             */
            value?: number;

            /** Specifies the width of the bullet graph.
             * @Default {595}
             */
            width?: number;

            /** Fires on rendering the caption of bullet graph.
             */
            drawCaption?(e: DrawCaptionEventArgs): void;

            /** Fires on rendering the category.
             */
            drawCategory?(e: DrawCategoryEventArgs): void;

            /** Fires on rendering the comparative measure symbol.
             */
            drawComparativeMeasureSymbol?(e: DrawComparativeMeasureSymbolEventArgs): void;

            /** Fires on rendering the feature measure bar.
             */
            drawFeatureMeasureBar?(e: DrawFeatureMeasureBarEventArgs): void;

            /** Fires on rendering the indicator of bullet graph.
             */
            drawIndicator?(e: DrawIndicatorEventArgs): void;

            /** Fires on rendering the labels.
             */
            drawLabels?(e: DrawLabelsEventArgs): void;

            /** Fires on rendering the ticks.
             */
            drawTicks?(e: DrawTicksEventArgs): void;

            /** Fires on rendering the qualitative ranges.
             */
            drawQualitativeRanges?(e: DrawQualitativeRangesEventArgs): void;

            /** Fires on loading bullet graph.
             */
            load?(e: LoadEventArgs): void;

            /** Fires, on clicking the bullet graph.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the bullet graph.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the bullet graph.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface DrawCaptionEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: HTMLElement;

            /** returns the current captionSettings element.
             */
            captionElement?: HTMLElement;

            /** returns the type of the captionSettings.
             */
            captionType?: string;
        }

        export interface DrawCategoryEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: HTMLElement;

            /** returns the options of category element.
             */
            categoryElement?: HTMLElement;

            /** returns the text value of the category that is drawn.
             */
            Value?: string;
        }

        export interface DrawComparativeMeasureSymbolEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: HTMLElement;

            /** returns the options of comparative measure element.
             */
            targetElement?: HTMLElement;

            /** returns the value of the comparative measure symbol.
             */
            Value?: number;
        }

        export interface DrawFeatureMeasureBarEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: HTMLElement;

            /** returns the options of feature measure element.
             */
            currentElement?: HTMLElement;

            /** returns the value of the feature measure bar.
             */
            Value?: number;
        }

        export interface DrawIndicatorEventArgs {

            /** returns an object to customize bullet graph indicator text and symbol before rendering it.
             */
            indicatorSettings?: any;

            /** returns the object of bullet graph.
             */
            model?: any;

            /** returns the type of event.
             */
            type?: string;

            /** for canceling the event.
             */
            cancel?: boolean;
        }

        export interface DrawLabelsEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the options of the scale element.
             */
            scaleElement?: HTMLElement;

            /** returns the current label element.
             */
            tickElement?: HTMLElement;

            /** returns the label type.
             */
            labelType?: string;
        }

        export interface DrawTicksEventArgs {

            /** returns the model of the bullet graph.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the settings for majorTicks.
             */
            majorTickSettings?: any;

            /** returns the settings for minorTicks.
             */
            minorTickSettings?: any;

            /** returns the maximum value.
             */
            maximum?: number;

            /** returns the minimum value.
             */
            minimum?: number;

            /** returns the interval value.
             */
            interval?: number;

            /** returns the value of minorTicksPerInterval.
             */
            minorTickPerInterval?: number;
        }

        export interface DrawQualitativeRangesEventArgs {

            /** returns the object of the bullet graph.
             */
            Object?: any;

            /** returns the index of current range.
             */
            rangeIndex?: number;

            /** returns the settings for current range.
             */
            rangeOptions?: any;

            /** returns the end value of current range.
             */
            rangeEndValue?: number;
        }

        export interface LoadEventArgs {

            /** returns the model of the bullet graph.
             */
            model?: any;

            /** returns the name of the event.
             */
            type?: string;

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;
        }

        export interface ClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the bullet graph model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to bullet graph area.id - ID of the target element.    size - Width and height of the bullet graph.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the bullet graph model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to bullet graph area.id - ID of the target element.    size - Width and height of the bullet graph.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the bullet graph model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** location - X and Y co-ordinate of the points with respect to bullet graph area.id - ID of the target element.    size - Width and height of the bullet graph.    pageX -
             * x-coordinate of the pointer, relative to the page    pageY - y-coordinate of the pointer, relative to the page
             */
            data?: any;
        }

        export interface CaptionSettingsFont {

            /** Specifies the color of the text in caption.
             * @Default {null}
             */
            color?: string;

            /** Specifies the fontFamily of caption. Caption text render with this fontFamily
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of caption
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

            /** Specifies the fontWeight of caption
             * @Default {regular}
             */
            fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

            /** Specifies the opacity of caption. Caption text render with this opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the size of caption. Caption text render with this size
             * @Default {12px}
             */
            size?: string;
        }

        export interface CaptionSettingsIndicatorFont {

            /** Specifies the color of the indicator's text.
             * @Default {null}
             */
            color?: string;

            /** Specifies the fontFamily of indicator. Indicator text render with this fontFamily.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of indicator. Indicator text render with this fontStyle. See FontStyle
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

            /** Specifies the fontWeight of indicator. Indicator text render with this fontWeight. See FontWeight
             * @Default {regular}
             */
            fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

            /** Specifies the opacity of indicator text. Indicator text render with this Opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the size of indicator. Indicator text render with this size.
             * @Default {12px}
             */
            size?: string;
        }

        export interface CaptionSettingsIndicatorLocation {

            /** Specifies the horizontal position of the indicator.
             * @Default {10}
             */
            x?: number;

            /** Specifies the vertical position of the indicator.
             * @Default {60}
             */
            y?: number;
        }

        export interface CaptionSettingsIndicatorSymbolBorder {

            /** Specifies the border color of indicator symbol.
             * @Default {null}
             */
            color?: string;

            /** Specifies the border width of indicator symbol.
             * @Default {1}
             */
            width?: number;
        }

        export interface CaptionSettingsIndicatorSymbolSize {

            /** Specifies the height of indicator symbol.
             * @Default {10}
             */
            height?: number;

            /** Specifies the width of indicator symbol.
             * @Default {10}
             */
            width?: number;
        }

        export interface CaptionSettingsIndicatorSymbol {

            /** Contains property to customize the border of indicator symbol.
             */
            border?: CaptionSettingsIndicatorSymbolBorder;

            /** Specifies the color of indicator symbol.
             * @Default {null}
             */
            color?: string;

            /** Specifies the URL of image that represents indicator symbol.
             */
            imageURL?: string;

            /** Specifies the opacity of indicator symbol.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the shape of indicator symbol.
             */
            shape?: string;

            /** Contains property to customize the size of indicator symbol.
             */
            size?: CaptionSettingsIndicatorSymbolSize;
        }

        export interface CaptionSettingsIndicator {

            /** Contains property to customize the font of indicator.
             */
            font?: CaptionSettingsIndicatorFont;

            /** Contains property to customize the location of indicator.
             */
            location?: CaptionSettingsIndicatorLocation;

            /** Specifies the padding to be applied when text position is used.
             * @Default {2}
             */
            padding?: number;

            /** Contains property to customize the symbol of indicator.
             */
            symbol?: CaptionSettingsIndicatorSymbol;

            /** Specifies the text to be displayed as indicator text. By default difference between current value and target will be displayed
             */
            text?: string;

            /** Specifies the alignment of indicator with respect to scale based on text position
             * @Default {'Near'}
             */
            textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

            /** Specifies where indicator text should be anchored when indicator overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same
             * position. Anchoring is not applicable for float position.
             * @Default {'start'}
             */
            textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

            /** indicator text render in the specified angle.
             * @Default {0}
             */
            textAngle?: number;

            /** Specifies where indicator should be placed
             * @Default {'float'}
             */
            textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;

            /** Specifies the space between indicator symbol and text.
             * @Default {3}
             */
            textSpacing?: number;

            /** Specifies whether indicator will be visible or not.
             * @Default {false}
             */
            visible?: boolean;
        }

        export interface CaptionSettingsLocation {

            /** Specifies the position in horizontal direction
             * @Default {17}
             */
            x?: number;

            /** Specifies the position in horizontal direction
             * @Default {30}
             */
            y?: number;
        }

        export interface CaptionSettingsSubTitleFont {

            /** Specifies the color of the subtitle's text.
             * @Default {null}
             */
            color?: string;

            /** Specifies the fontFamily of subtitle. Subtitle text render with this fontFamily.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of subtitle. Subtitle text render with this fontStyle. See FontStyle
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

            /** Specifies the fontWeight of subtitle. Subtitle text render with this fontWeight. See FontWeight
             * @Default {regular}
             */
            fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

            /** Specifies the opacity of subtitle. Subtitle text render with this opacity.
             * @Default {1}
             */
            opacity?: number;

            /** Specifies the size of subtitle. Subtitle text render with this size.
             * @Default {12px}
             */
            size?: string;
        }

        export interface CaptionSettingsSubTitleLocation {

            /** Specifies the horizontal position of the subtitle.
             * @Default {10}
             */
            x?: number;

            /** Specifies the vertical position of the subtitle.
             * @Default {45}
             */
            y?: number;
        }

        export interface CaptionSettingsSubTitle {

            /** Contains property to customize the font of subtitle.
             */
            font?: CaptionSettingsSubTitleFont;

            /** Contains property to customize the location of subtitle.
             */
            location?: CaptionSettingsSubTitleLocation;

            /** Specifies the padding to be applied when text position is used.
             * @Default {5}
             */
            padding?: number;

            /** Specifies the text to be displayed as subtitle.
             */
            text?: string;

            /** Specifies the alignment of sub title text with respect to scale. Alignment will not be applied in float position.
             * @Default {'Near'}
             */
            textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

            /** Specifies where subtitle text should be anchored when sub title text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same
             * position. Anchoring is not applicable for float position.
             * @Default {'start'}
             */
            textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

            /** Subtitle render in the specified angle.
             * @Default {0}
             */
            textAngle?: number;

            /** Specifies where sub title text should be placed.
             * @Default {'float'}
             */
            textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;
        }

        export interface CaptionSettings {

            /** Specifies whether trim the labels will be true or false.
             * @Default {true}
             */
            enableTrim?: boolean;

            /** Contains property to customize the font of caption.
             */
            font?: CaptionSettingsFont;

            /** Contains property to customize the indicator.
             */
            indicator?: CaptionSettingsIndicator;

            /** Contains property to customize the location.
             */
            location?: CaptionSettingsLocation;

            /** Specifies the padding to be applied when text position is used.
             * @Default {5}
             */
            padding?: number;

            /** Contains property to customize the subtitle.
             */
            subTitle?: CaptionSettingsSubTitle;

            /** Specifies the text to be displayed on bullet graph.
             */
            text?: string;

            /** Specifies the alignment of caption text with respect to scale. This property will not be applied when text position is float.
             * @Default {'Near'}
             */
            textAlignment?: ej.datavisualization.BulletGraph.TextAlignment|string;

            /** Specifies caption text anchoring when caption text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position.
             * Anchoring is not applicable for float position.
             * @Default {'start'}
             */
            textAnchor?: ej.datavisualization.BulletGraph.TextAnchor|string;

            /** Specifies the angel in which the caption is rendered.
             * @Default {0}
             */
            textAngle?: number;

            /** Specifies how caption text should be placed.
             * @Default {'float'}
             */
            textPosition?: ej.datavisualization.BulletGraph.TextPosition|string;
        }

        export interface QualitativeRange {

            /** Specifies the ending range to which the qualitative ranges will render.
             * @Default {3}
             */
            rangeEnd?: number;

            /** Specifies the opacity for the qualitative ranges.
             * @Default {1}
             */
            rangeOpacity?: number;

            /** Specifies the stroke for the qualitative ranges.
             * @Default {null}
             */
            rangeStroke?: string;
        }

        export interface QuantitativeScaleSettingsComparativeMeasureSettings {

            /** Specifies the stroke of the comparative measure.
             * @Default {null}
             */
            stroke?: number;

            /** Specifies the width of the comparative measure.
             * @Default {5}
             */
            width?: number;
        }

        export interface QuantitativeScaleSettingsFeaturedMeasureSettings {

            /** Specifies the Stroke of the featured measure in bullet graph.
             * @Default {null}
             */
            stroke?: number;

            /** Specifies the width of the featured measure in bullet graph.
             * @Default {2}
             */
            width?: number;
        }

        export interface QuantitativeScaleSettingsFeatureMeasure {

            /** Specifies the category of feature measure.
             * @Default {null}
             */
            category?: string;

            /** Comparative measure render till the specified value.
             * @Default {null}
             */
            comparativeMeasureValue?: number;

            /** Feature measure render till the specified value.
             * @Default {null}
             */
            value?: number;
        }

        export interface QuantitativeScaleSettingsFields {

            /** Specifies the category of the bullet graph.
             * @Default {null}
             */
            category?: string;

            /** Comparative measure render based on the values in the specified field.
             * @Default {null}
             */
            comparativeMeasure?: string;

            /** Specifies the dataSource for the bullet graph.
             * @Default {null}
             */
            dataSource?: any;

            /** Feature measure render based on the values in the specified field.
             * @Default {null}
             */
            featureMeasures?: string;

            /** Specifies the query for fetching the values form data source to render the bullet graph.
             * @Default {null}
             */
            query?: string;

            /** Specifies the name of the table.
             * @Default {null}
             */
            tableName?: string;
        }

        export interface QuantitativeScaleSettingsLabelSettingsFont {

            /** Specifies the fontFamily of labels in bullet graph. Labels render with this fontFamily.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the fontStyle of labels in bullet graph. Labels render with this fontStyle. See FontStyle
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.BulletGraph.FontStyle|string;

            /** Specifies the fontWeight of labels in bullet graph. Labels render with this fontWeight. See FontWeight
             * @Default {regular}
             */
            fontWeight?: ej.datavisualization.BulletGraph.FontWeight|string;

            /** Specifies the opacity of labels in bullet graph. Labels render with this opacity
             * @Default {1}
             */
            opacity?: number;
        }

        export interface QuantitativeScaleSettingsLabelSettings {

            /** Contains property to customize the font of the labels in bullet graph.
             */
            font?: QuantitativeScaleSettingsLabelSettingsFont;

            /** Specifies the placement of labels in bullet graph scale.
             * @Default {outside}
             */
            labelPlacement?: ej.datavisualization.BulletGraph.LabelPlacement|string;

            /** Specifies the prefix to be added with labels in bullet graph.
             * @Default {Empty string}
             */
            labelPrefix?: string;

            /** Specifies the suffix to be added after labels in bullet graph.
             * @Default {Empty string}
             */
            labelSuffix?: string;

            /** Specifies the horizontal/vertical padding of labels.
             * @Default {15}
             */
            offset?: number;

            /** Specifies the position of the labels to render either above or below the graph. See
             * @Default {below}
             */
            position?: ej.datavisualization.BulletGraph.LabelPosition|string;

            /** Specifies the Size of the labels.
             * @Default {12}
             */
            size?: number;

            /** Specifies the stroke color of the labels in bullet graph.
             * @Default {null}
             */
            stroke?: string;
        }

        export interface QuantitativeScaleSettingsLocation {

            /** This property specifies the x position for rendering quantitative scale.
             * @Default {10}
             */
            x?: number;

            /** This property specifies the y position for rendering quantitative scale.
             * @Default {10}
             */
            y?: number;
        }

        export interface QuantitativeScaleSettingsMajorTickSettings {

            /** Specifies the size of the major ticks.
             * @Default {13}
             */
            size?: number;

            /** Specifies the stroke color of the major tick lines.
             * @Default {null}
             */
            stroke?: string;

            /** Specifies the width of the major tick lines.
             * @Default {2}
             */
            width?: number;
        }

        export interface QuantitativeScaleSettingsMinorTickSettings {

            /** Specifies the size of minor ticks.
             * @Default {7}
             */
            size?: number;

            /** Specifies the stroke color of minor ticks in bullet graph.
             * @Default {null}
             */
            stroke?: string;

            /** Specifies the width of the minor ticks in bullet graph.
             * @Default {2}
             */
            width?: number;
        }

        export interface QuantitativeScaleSettings {

            /** Contains property to customize the comparative measure.
             */
            comparativeMeasureSettings?: QuantitativeScaleSettingsComparativeMeasureSettings;

            /** Contains property to customize the featured measure.
             */
            featuredMeasureSettings?: QuantitativeScaleSettingsFeaturedMeasureSettings;

            /** Contains property to customize the featured measure.
             */
            featureMeasures?: QuantitativeScaleSettingsFeatureMeasure[];

            /** Contains property to customize the fields.
             */
            fields?: QuantitativeScaleSettingsFields;

            /** Specifies the interval for the Graph.
             * @Default {1}
             */
            interval?: number;

            /** Contains property to customize the labels.
             */
            labelSettings?: QuantitativeScaleSettingsLabelSettings;

            /** Contains property to customize the position of the quantitative scale
             */
            location?: QuantitativeScaleSettingsLocation;

            /** Contains property to customize the major tick lines.
             */
            majorTickSettings?: QuantitativeScaleSettingsMajorTickSettings;

            /** Specifies the maximum value of the Graph.
             * @Default {10}
             */
            maximum?: number;

            /** Specifies the minimum value of the Graph.
             * @Default {0}
             */
            minimum?: number;

            /** Contains property to customize the minor ticks.
             */
            minorTickSettings?: QuantitativeScaleSettingsMinorTickSettings;

            /** The specified number of minor ticks will be rendered per interval.
             * @Default {4}
             */
            minorTicksPerInterval?: number;

            /** Specifies the placement of ticks to render either inside or outside the scale.
             * @Default {ej.datavisualization.BulletGraph.TickPlacement.Outside}
             */
            tickPlacement?: ej.datavisualization.BulletGraph.TickPlacement|string;

            /** Specifies the position of the ticks to render either above,below or inside
             * @Default {ej.datavisualization.BulletGraph.TickPosition.Far}
             */
            tickPosition?: ej.datavisualization.BulletGraph.TickPosition|string;
        }

        export interface TooltipSettings {

            /** Specifies template for caption tooltip
             * @Default {null}
             */
            captionTemplate?: string;

            /** Toggles the visibility of caption tooltip
             * @Default {false}
             */
            enableCaptionTooltip?: boolean;

            /** Specifies the ID of a div, which is to be displayed as tooltip.
             * @Default {null}
             */
            template?: string;

            /** Toggles the visibility of tooltip
             * @Default {true}
             */
            visible?: boolean;
        }
    }
    namespace BulletGraph {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
            //string
            Oblique,
        }
    }
    namespace BulletGraph {
        enum FontWeight {
            //string
            Normal,
            //string
            Bold,
            //string
            Bolder,
            //string
            Lighter,
        }
    }
    namespace BulletGraph {
        enum TextAlignment {
            //string
            Near,
            //string
            Far,
            //string
            Center,
        }
    }
    namespace BulletGraph {
        enum TextAnchor {
            //string
            Start,
            //string
            Middle,
            //string
            End,
        }
    }
    namespace BulletGraph {
        enum TextPosition {
            //string
            Top,
            //string
            Right,
            //string
            Left,
            //string
            Bottom,
            //string
            Float,
        }
    }
    namespace BulletGraph {
        enum FlowDirection {
            //string
            Forward,
            //string
            Backward,
        }
    }
    namespace BulletGraph {
        enum Orientation {
            //string
            Horizontal,
            //string
            Vertical,
        }
    }
    namespace BulletGraph {
        enum LabelPlacement {
            //string
            Inside,
            //string
            Outside,
        }
    }
    namespace BulletGraph {
        enum LabelPosition {
            //string
            Above,
            //string
            Below,
        }
    }
    namespace BulletGraph {
        enum TickPlacement {
            //string
            Inside,
            //string
            Outside,
        }
    }
    namespace BulletGraph {
        enum TickPosition {
            //string
            Below,
            //string
            Above,
            //string
            Cross,
        }
    }

    class Barcode extends ej.Widget {
        static fn: Barcode;
        constructor(element: JQuery | Element, options?: Barcode.Model);
        static Locale: any;
        model: Barcode.Model;
        defaults: Barcode.Model;

        /** To disable the barcode
         * @returns {void}
         */
        disable(): void;

        /** To enable the barcode
         * @returns {void}
         */
        enable(): void;
    }
    export namespace Barcode {

        export interface Model {

            /** Specifies the distance between the barcode and text below it.
             */
            barcodeToTextGapHeight?: number;

            /** Specifies the height of bars in the Barcode. By modifying the barHeight, the entire barcode height can be customized. Please refer to xDimension for two dimensional barcode height
             * customization.
             */
            barHeight?: number;

            /** Specifies the dark bar color of the Barcode. One dimensional barcode contains a series of dark and light bars which are usually colored as black and white respectively.
             */
            darkBarColor?: any;

            /** Specifies whether the text below the barcode is visible or hidden.
             */
            displayText?: boolean;

            /** Specifies whether the control is enabled.
             */
            enabled?: boolean;

            /** Specifies the start and stop encode symbol in the Barcode. In one dimensional barcodes, an additional character is added as start and stop delimiters. These symbols are optional
             * and the unique of the symbol allows the reader to determine the direction of the barcode being scanned.
             */
            encodeStartStopSymbol?: number;

            /** Specifies the light bar color of the Barcode. One dimensional barcode contains a series of dark and light bars which are usually colored as black and white respectively.
             */
            lightBarColor?: any;

            /** Specifies the width of the narrow bars in the barcode. The dark bars in the one dimensional barcode contains random narrow and wide bars based on the provided input which can be
             * specified during initialization.
             */
            narrowBarWidth?: number;

            /** Specifies the width of the quiet zone. In barcode, a quiet zone is the blank margin on either side of a barcode which informs the reader where a barcode's symbology starts and
             * stops. The purpose of a quiet zone is to prevent the reader from picking up unrelated information.
             */
            quietZone?: QuietZone;

            /** Specifies the type of the Barcode. See SymbologyType
             */
            symbologyType?: ej.datavisualization.Barcode.SymbologyType|string;

            /** Specifies the text to be encoded in the barcode.
             */
            text?: string;

            /** Specifies the color of the text/data at the bottom of the barcode.
             */
            textColor?: any;

            /** Specifies the width of the wide bars in the barcode. One dimensional barcode usually contains random narrow and wide bars based on the provided which can be customized during
             * initialization.
             */
            wideBarWidth?: number;

            /** Specifies the width of the narrowest element(bar or space) in a barcode. The greater the x dimension, the more easily a barcode reader will scan.
             */
            xDimension?: number;

            /** Fires after Barcode control is loaded.
             */
            load?(e: LoadEventArgs): void;
        }

        export interface LoadEventArgs {

            /** if the event should be canceled; otherwise, false.
             */
            cancel?: boolean;

            /** returns the barcode model
             */
            model?: any;

            /** returns the name of the event
             */
            type?: string;

            /** return the barcode state
             */
            status?: boolean;
        }

        export interface QuietZone {

            /** Specifies the quiet zone around the Barcode.
             */
            all?: number;

            /** Specifies the bottom quiet zone of the Barcode.
             */
            bottom?: number;

            /** Specifies the left quiet zone of the Barcode.
             */
            left?: number;

            /** Specifies the right quiet zone of the Barcode.
             */
            right?: number;

            /** Specifies the top quiet zone of the Barcode.
             */
            top?: number;
        }
    }
    namespace Barcode {
        enum SymbologyType {
            //Represents the QR code
            QRBarcode,
            //Represents the Data Matrix barcode
            DataMatrix,
            //Represents the Code 39 barcode
            Code39,
            //Represents the Code 39 Extended barcode
            Code39Extended,
            //Represents the Code 11 barcode
            Code11,
            //Represents the Codabar barcode
            Codabar,
            //Represents the Code 32 barcode
            Code32,
            //Represents the Code 93 barcode
            Code93,
            //Represents the Code 93 Extended barcode
            Code93Extended,
            //Represents the Code 128 A barcode
            Code128A,
            //Represents the Code 128 B barcode
            Code128B,
            //Represents the Code 128 C barcode
            Code128C,
        }
    }

    class Map extends ej.Widget {
        static fn: Map;
        constructor(element: JQuery | Element, options?: Map.Model);
        static Locale: any;
        model: Map.Model;
        defaults: Map.Model;

        /** Method for navigating to specific shape based on latitude, longitude and zoom level.
         * @param {number} Pass the latitude value for map
         * @param {number} Pass the longitude value for map
         * @param {number} Pass the zoom level for map
         * @returns {void}
         */
        navigateTo(latitude: number, longitude: number, level: number): void;

        /** Method to perform map panning
         * @param {string} Pass the direction in which map should be panned
         * @returns {void}
         */
        pan(direction: string): void;

        /** Method to reload the map.
         * @returns {void}
         */
        refresh(): void;

        /** Method to reload the shapeLayers with updated values
         * @returns {void}
         */
        refreshLayers(): void;

        /** Method to reload the navigation control with updated values.
         * @param {any} Pass the navigation control instance
         * @returns {void}
         */
        refreshNavigationControl(navigation: any): void;

        /** Method to perform map zooming.
         * @param {number} Pass the zoom level for map to be zoomed
         * @param {boolean} Pass the boolean value to enable or disable animation while zooming
         * @returns {void}
         */
        zoom(level: number, isAnimate: boolean): void;

        /** Method to reload the specified layer based on layer and sublayer index value.
         * @returns {void}
         */
        refreshLayer(): void;

        /** Add markers dynamically based on layer and sublayer index value.
         * @returns {void}
         */
        addMarkers(): void;
    }
    export namespace Map {

        export interface Model {

            /** Specifies the background color for map
             * @Default {transparent}
             */
            background?: string;

            /** Specifies the index of the map to determine the shape layer to be displayed
             * @Default {0}
             */
            baseMapIndex?: number;

            /** Specify the center position where map should be displayed
             * @Default {[0,0]}
             */
            centerPosition?: any;

            /** Controls the selection through dragging
             * @Default {false}
             */
            draggingOnSelection?: boolean;

            /** Enables or Disables the map animation
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Enables or Disables right to left(RTL) support for maps.
             * @Default {false}
             */
            enableRTL?: boolean;

            /** Enables or Disables the animation for layer change in map
             * @Default {false}
             */
            enableLayerChangeAnimation?: boolean;

            /** Enables or Disables the map panning
             * @Default {true}
             */
            enablePan?: boolean;

            /** Determines whether map need to resize when container is resized
             * @Default {true}
             */
            enableResize?: boolean;

            /** Determines whether map need to resize when container is resized
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Enables or Disables the Zooming for map.
             */
            zoomSettings?: ZoomSettings;

            /** Enables or Disables the navigation control for map to perform zooming and panning on map shapes.
             */
            navigationControl?: NavigationControl;

            /** Name of the culture based on which map should be localized. Labels are localized with respect to the culture name.String type properties like template text are not localized
             * automatically. Provide localized text as value to string type properties.
             * @Default {en-US}
             */
            locale?: string;

            /** Layer for holding the map shapes
             */
            layers?: Layer[];

            /** Triggered on selecting the map markers.
             */
            markerSelected?(e: MarkerSelectedEventArgs): void;

            /** Triggered while rendering the each legend in maps.
             */
            legendItemRendering?(e: LegendItemRenderingEventArgs): void;

            /** Triggered while rendering the each bubbles in maps.
             */
            bubbleRendering?(e: BubbleRenderingEventArgs): void;

            /** Triggered while rendering the each shapes in maps.
             */
            shapeRendering?(e: ShapeRenderingEventArgs): void;

            /** Triggers while leaving the hovered map shape
             */
            mouseleave?(e: MouseleaveEventArgs): void;

            /** Triggers while hovering the map shape.
             */
            mouseover?(e: MouseoverEventArgs): void;

            /** Triggers once map render completed.
             */
            onRenderComplete?(e: OnRenderCompleteEventArgs): void;

            /** Triggers when map panning ends.
             */
            panned?(e: PannedEventArgs): void;

            /** Triggered on selecting the map shapes.
             */
            shapeSelected?(e: ShapeSelectedEventArgs): void;

            /** Triggered when map is zoomed-in.
             */
            zoomedIn?(e: ZoomedInEventArgs): void;

            /** Triggers when map is zoomed out.
             */
            zoomedOut?(e: ZoomedOutEventArgs): void;

            /** Fires, on clicking the map.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires on clicking the legend item.
             */
            legendItemClick?(e: LegendItemClickEventArgs): void;

            /** Fires, on double clicking the map.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the map.
             */
            rightClick?(e: RightClickEventArgs): void;

            /** Fires before loading the map.
             */
            onLoad?(e: OnLoadEventArgs): void;

            /** Triggers while entering the hovered marker shape.
             */
            markerEnter?(e: MarkerEnterEventArgs): void;

            /** Triggers while leaving the hovered marker shape.
             */
            markerLeave?(e: MarkerLeaveEventArgs): void;

            /** Triggers after refreshing the map items.
             */
            refreshed?(e: RefreshedEventArgs): void;

            /** Fires before rendering the data labels. This event is triggered for each data label in the layers. You can use this event to add custom text in data labels.
             */
            displayTextRendering?(e: DisplayTextRenderingEventArgs): void;
        }

        export interface MarkerSelectedEventArgs {

            /** Returns marker object.
             */
            originalEvent?: any;
        }

        export interface LegendItemRenderingEventArgs {

            /** Returns the legend item.
             */
            originalEvent?: any;
        }

        export interface BubbleRenderingEventArgs {

            /** Returns the bubble values.
             */
            originalEvent?: any;
        }

        export interface ShapeRenderingEventArgs {

            /** Returns the shape values.
             */
            originalEvent?: any;
        }

        export interface MouseleaveEventArgs {

            /** Returns hovered map shape object.
             */
            originalEvent?: any;
        }

        export interface MouseoverEventArgs {

            /** Returns hovered map shape object.
             */
            originalEvent?: any;
        }

        export interface OnRenderCompleteEventArgs {

            /** Event parameters from map
             */
            originalEvent?: any;
        }

        export interface PannedEventArgs {

            /** Event parameters from map
             */
            originalEvent?: any;
        }

        export interface ShapeSelectedEventArgs {

            /** Returns selected shape object.
             */
            originalEvent?: any;
        }

        export interface ZoomedInEventArgs {

            /** Event parameters from map
             */
            originalEvent?: any;

            /** Returns zoom level value for which the map is zoomed.
             */
            zoomLevel?: any;
        }

        export interface ZoomedOutEventArgs {

            /** Event parameters from map
             */
            originalEvent?: any;

            /** Returns zoom level value for which the map is zoomed.
             */
            zoomLevel?: any;
        }

        export interface ClickEventArgs {

            /** Returns clicked shape object.
             */
            originalEvent?: any;
        }

        export interface LegendItemClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the map model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** startX - X-coordinate of legend item in pixel        LegendItem - Instance of the legend item object that is about to be rendered    style - Options to customize the legend item
             * styles such as border, color, size, etcâ€¦,        symbolShape - Name of the legend item shape. Use this option to customize legend item shape before rendering    map - Instance
             * of the map object corresponding to the legend item
             */
            data?: any;
        }

        export interface DoubleClickEventArgs {

            /** Returns double clicked shape object.
             */
            originalEvent?: any;
        }

        export interface RightClickEventArgs {

            /** Returns right clicked shape object.
             */
            originalEvent?: any;
        }

        export interface OnLoadEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the map model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface MarkerEnterEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the map model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface MarkerLeaveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the map model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface RefreshedEventArgs {

            /** Refresh and load the map.
             */
            originalEvent?: any;
        }

        export interface DisplayTextRenderingEventArgs {

            /** text - Text displayed in data label. You can add custom text to the data label    locationX - X-coordinate of data label location    locationY - Y-coordinate of data label
             * location
             */
            data?: any;

            /** Set this option to true to cancel the event.
             */
            cancel?: boolean;

            /** Instance of the map model object.
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ZoomSettings {

            /** Specifies animation duration for map shapes while zooming.
             * @Default {600}
             */
            animationDuration?: string;

            /** Enables or Disables the zooming of map
             * @Default {true}
             */
            enableZoom?: boolean;

            /** Enables or Disables the zoom on selecting the map shape
             * @Default {false}
             */
            enableZoomOnSelection?: boolean;

            /** Enables or Disables the zoom on mouse wheel the map.
             * @Default {true}
             */
            enableMouseWheelZoom?: boolean;

            /** Specifies the zoom factor for map zoom value.
             * @Default {1}
             */
            factor?: number;

            /** Specifies the zoom level value for which map to be zoomed
             * @Default {1}
             */
            level?: number;

            /** Specifies the minimum zoomSettings level of the map
             * @Default {1}
             */
            minValue?: number;

            /** Specifies the maximum zoom level of the map
             * @Default {100}
             */
            maxValue?: number;
        }

        export interface NavigationControl {

            /** Set the absolutePosition for navigation control
             * @Default {{x:0,y:0}}
             */
            absolutePosition?: any;

            /** Specifies the navigation control template for map
             * @Default {null}
             */
            content?: string;

            /** Set the dockPosition value for navigation control
             * @Default {centerleft}
             */
            dockPosition?: ej.datavisualization.Map.Position|string;

            /** Enables or Disables the Navigation for handling zooming map
             * @Default {false}
             */
            enableNavigation?: boolean;

            /** Set the orientation value for navigation control
             * @Default {vertical}
             */
            orientation?: ej.datavisualization.Map.LabelOrientation|string;
        }

        export interface LayersBubbleSettingsColorMappingsRangeColorMapping {

            /** Start range colorMappings in the bubble layer.
             * @Default {null}
             */
            from?: number;

            /** End range colorMappings in the bubble layer.
             * @Default {null}
             */
            to?: number;

            /** GradientColors in the bubble layer of map.
             */
            gradientColors?: any[];

            /** Color of the bubble layer.
             * @Default {null}
             */
            color?: string;
        }

        export interface LayersBubbleSettingsColorMappings {

            /** Specifies the range colorMappings in the bubble layer.
             * @Default {null}
             */
            rangeColorMapping?: LayersBubbleSettingsColorMappingsRangeColorMapping[];
        }

        export interface LayersBubbleSettings {

            /** Specifies the bubble Opacity value of bubbles for shape layer in map
             * @Default {0.9}
             */
            bubbleOpacity?: number;

            /** Specifies the mouse hover color of the shape layer in map
             * @Default {gray}
             */
            color?: string;

            /** Specifies the colorMappings of the shape layer in map
             * @Default {null}
             */
            colorMappings?: LayersBubbleSettingsColorMappings;

            /** Specifies the bubble color valuePath of the shape layer in map
             * @Default {null}
             */
            colorValuePath?: string;

            /** Specifies the maximum size value of bubbles for shape layer in map
             * @Default {20}
             */
            maxValue?: number;

            /** Specifies the minimum size value of bubbles for shape layer in map
             * @Default {10}
             */
            minValue?: number;

            /** Specifies the showBubble visibility status map
             * @Default {true}
             */
            showBubble?: boolean;

            /** Specifies the tooltip visibility status of the shape layer in map
             * @Default {false}
             */
            showTooltip?: boolean;

            /** Specifies the bubble tooltip template of the shape layer in map
             * @Default {null}
             */
            tooltipTemplate?: string;

            /** Specifies the bubble valuePath of the shape layer in map
             * @Default {null}
             */
            valuePath?: string;
        }

        export interface LayersLabelSettingsFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the data label.
             * @Default {normal.}
             */
            fontStyle?: ej.datavisualization.Map.FontStyle|string;

            /** NameType DescriptionRegularstring Specifies the font weight as regular.BoldstringSpecifies the font weight as bold.LighterstringSpecifies the font weight as lighter.
             * @Default {regular. See}
             */
            fontWeight?: ej.datavisualization.Map.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font color of the data label text.
             * @Default {null}
             */
            color?: string;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LayersLabelSettings {

            /** enable or disable the enableSmartLabel property
             * @Default {false}
             */
            enableSmartLabel?: boolean;

            /** set the labelLength property
             * @Default {'2'}
             */
            labelLength?: number;

            /** set the labelPath property
             * @Default {null}
             */
            labelPath?: string;

            /** The property specifies whether to show labels or not.
             * @Default {false}
             */
            showLabels?: boolean;

            /** set the smartLabelSize property
             * @Default {fixed}
             */
            smartLabelSize?: ej.datavisualization.Map.LabelSize|string;

            /** Options for customizing the data label font.
             */
            font?: LayersLabelSettingsFont;
        }

        export interface LayersLegendSettings {

            /** Determines whether the legend should be placed outside or inside the map bounds
             * @Default {false}
             */
            dockOnMap?: boolean;

            /** Determines the legend placement and it is valid only when dockOnMap is true
             * @Default {top}
             */
            dockPosition?: ej.datavisualization.Map.DockPosition|string;

            /** height value for legend setting
             * @Default {0}
             */
            height?: number;

            /** to get icon value for legend setting
             * @Default {rectangle}
             */
            icon?: ej.datavisualization.Map.LegendIcons|string;

            /** icon height value for legend setting
             * @Default {20}
             */
            iconHeight?: number;

            /** icon Width value for legend setting
             * @Default {20}
             */
            iconWidth?: number;

            /** set the orientation of legend labels
             * @Default {vertical}
             */
            labelOrientation?: ej.datavisualization.Map.LabelOrientation|string;

            /** to get leftLabel value for legend setting
             * @Default {null}
             */
            leftLabel?: string;

            /** To get the field name in the datasource for generating legend items.
             * @Default {null}
             */
            textPath?: string;

            /** to get mode of legend setting
             * @Default {default}
             */
            mode?: ej.datavisualization.Map.Mode|string;

            /** set the position of legend settings
             * @Default {topleft}
             */
            position?: ej.datavisualization.Map.Position|string;

            /** x position value for legend setting
             * @Default {0}
             */
            positionX?: number;

            /** y position value for legend setting
             * @Default {0}
             */
            positionY?: number;

            /** to get rightLabel value for legend setting
             * @Default {null}
             */
            rightLabel?: string;

            /** Enables or Disables the showLabels
             * @Default {false}
             */
            showLabels?: boolean;

            /** Enables or Disables the showLegend
             * @Default {false}
             */
            showLegend?: boolean;

            /** Toggle the visibility of the legend.
             * @Default {false}
             */
            toggleVisibility?: boolean;

            /** to get title of legend setting
             * @Default {null}
             */
            title?: string;

            /** to get type of legend setting
             * @Default {layers}
             */
            type?: ej.datavisualization.Map.LegendType|string;

            /** width value for legend setting
             * @Default {0}
             */
            width?: number;
        }

        export interface LayersShapeSettingsColorMappingsRangeColorMapping {

            /** Specifies the start range colorMappings in the shape layer of map.
             * @Default {null}
             */
            from?: number;

            /** Specifies the to range colorMappings in the shape layer of map.
             * @Default {null}
             */
            to?: number;

            /** Specifies the gradientColors in the shape layer of map.
             * @Default {null}
             */
            gradientColors?: any[];
        }

        export interface LayersShapeSettingsColorMappingsEqualColorMapping {

            /** Specifies the equalColorMapping value in the shape layer of map.
             * @Default {null}
             */
            value?: string;

            /** Specifies the equalColorMapping color in the shape layer of map.
             * @Default {null}
             */
            color?: string;
        }

        export interface LayersShapeSettingsColorMappings {

            /** Specifies the range colorMappings in the shape layer of map.
             * @Default {null}
             */
            rangeColorMapping?: LayersShapeSettingsColorMappingsRangeColorMapping[];

            /** Specifies the equalColorMapping in the shape layer of map.
             * @Default {null}
             */
            equalColorMapping?: LayersShapeSettingsColorMappingsEqualColorMapping[];
        }

        export interface LayersShapeSettings {

            /** Enables or Disables the auto fill colors for shape layer in map. When this property value set to true, shapes will be filled with palette colors.
             * @Default {false}
             */
            autoFill?: boolean;

            /** Specifies the colorMappings of the shape layer in map
             * @Default {null}
             */
            colorMappings?: LayersShapeSettingsColorMappings;

            /** Specifies the shape color palette value of the shape layer in map. Accepted colorPalette values are palette1, palette2, palette3 and custompalette.
             * @Default {palette1}
             */
            colorPalette?: ej.datavisualization.Map.ColorPalette|string;

            /** Specifies the shape color valuePath of the shape layer in map
             * @Default {null}
             */
            colorValuePath?: string;

            /** Specifies the field name in the datasource that contains color values for each shapes.
             * @Default {null}
             */
            colorPath?: string;

            /** Enables or Disables the gradient colors for map shapes.
             * @Default {false}
             */
            enableGradient?: boolean;

            /** Specifies the shape fill color of the shape layer in map
             * @Default {#E5E5E5}
             */
            fill?: string;

            /** Specifies the mouse over width of the shape layer in map
             * @Default {1}
             */
            highlightBorderWidth?: number;

            /** Specifies the mouse hover color of the shape layer in map
             * @Default {gray}
             */
            highlightColor?: string;

            /** Specifies the mouse over stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            highlightStroke?: string;

            /** Specifies the shape selection color of the shape layer in map
             * @Default {gray}
             */
            selectionColor?: string;

            /** Specifies the shape selection stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            selectionStroke?: string;

            /** Specifies the shape selection stroke width of the shape layer in map
             * @Default {1}
             */
            selectionStrokeWidth?: number;

            /** Specifies the shape stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            stroke?: string;

            /** Specifies the shape stroke thickness value of the shape layer in map
             * @Default {0.2}
             */
            strokeThickness?: number;

            /** Specifies the shape valuePath of the shape layer in map
             * @Default {null}
             */
            valuePath?: string;
        }

        export interface LayersSubLayersBubbleSettingsColorMappingsRangeColorMapping {

            /** Start range colorMappings in the bubble layer.
             * @Default {null}
             */
            from?: number;

            /** End range colorMappings in the bubble layer.
             * @Default {null}
             */
            to?: number;

            /** GradientColors in the bubble layer of map.
             */
            gradientColors?: any[];

            /** Color of the bubble layer.
             * @Default {null}
             */
            color?: string;
        }

        export interface LayersSubLayersBubbleSettingsColorMappings {

            /** Specifies the range colorMappings in the bubble layer.
             * @Default {null}
             */
            rangeColorMapping?: LayersSubLayersBubbleSettingsColorMappingsRangeColorMapping[];
        }

        export interface LayersSubLayersBubbleSettings {

            /** Specifies the bubble Opacity value of bubbles for shape layer in map
             * @Default {0.9}
             */
            bubbleOpacity?: number;

            /** Specifies the mouse hover color of the shape layer in map
             * @Default {gray}
             */
            color?: string;

            /** Specifies the colorMappings of the shape layer in map
             * @Default {null}
             */
            colorMappings?: LayersSubLayersBubbleSettingsColorMappings;

            /** Specifies the bubble color valuePath of the shape layer in map
             * @Default {null}
             */
            colorValuePath?: string;

            /** Specifies the field name in the datasource that contains color values for each bubbles.
             * @Default {null}
             */
            colorPath?: string;

            /** Specifies the maximum size value of bubbles for shape layer in map
             * @Default {20}
             */
            maxValue?: number;

            /** Specifies the minimum size value of bubbles for shape layer in map
             * @Default {10}
             */
            minValue?: number;

            /** Specifies the showBubble visibility status map
             * @Default {true}
             */
            showBubble?: boolean;

            /** Specifies the tooltip visibility status of the shape layer in map
             * @Default {false}
             */
            showTooltip?: boolean;

            /** Specifies the bubble tooltip template of the shape layer in map
             * @Default {null}
             */
            tooltipTemplate?: string;

            /** Specifies the bubble valuePath of the shape layer in map
             * @Default {null}
             */
            valuePath?: string;
        }

        export interface LayersSubLayersLabelSettings {

            /** enable or disable the enableSmartLabel property
             * @Default {false}
             */
            enableSmartLabel?: boolean;

            /** set the labelLength property
             * @Default {'2'}
             */
            labelLength?: number;

            /** set the labelPath property
             * @Default {null}
             */
            labelPath?: string;

            /** The property specifies whether to show labels or not.
             * @Default {false}
             */
            showLabels?: boolean;

            /** set the smartLabelSize property
             * @Default {fixed}
             */
            smartLabelSize?: ej.datavisualization.Map.LabelSize|string;
        }

        export interface LayersSubLayersLegendSettings {

            /** Determines whether the legend should be placed outside or inside the map bounds
             * @Default {false}
             */
            dockOnMap?: boolean;

            /** Determines the legend placement and it is valid only when dockOnMap is true
             * @Default {top}
             */
            dockPosition?: ej.datavisualization.Map.DockPosition|string;

            /** height value for legend setting
             * @Default {0}
             */
            height?: number;

            /** to get icon value for legend setting
             * @Default {rectangle}
             */
            icon?: ej.datavisualization.Map.LegendIcons|string;

            /** icon height value for legend setting
             * @Default {20}
             */
            iconHeight?: number;

            /** icon Width value for legend setting
             * @Default {20}
             */
            iconWidth?: number;

            /** set the orientation of legend labels
             * @Default {vertical}
             */
            labelOrientation?: ej.datavisualization.Map.LabelOrientation|string;

            /** to get leftLabel value for legend setting
             * @Default {null}
             */
            leftLabel?: string;

            /** To get the field name in the datasource for generating legend items.
             * @Default {null}
             */
            textPath?: string;

            /** to get mode of legend setting
             * @Default {default}
             */
            mode?: ej.datavisualization.Map.Mode|string;

            /** set the position of legend settings
             * @Default {topleft}
             */
            position?: ej.datavisualization.Map.Position|string;

            /** x position value for legend setting
             * @Default {0}
             */
            positionX?: number;

            /** y position value for legend setting
             * @Default {0}
             */
            positionY?: number;

            /** to get rightLabel value for legend setting
             * @Default {null}
             */
            rightLabel?: string;

            /** Enables or Disables the showLabels
             * @Default {false}
             */
            showLabels?: boolean;

            /** Enables or Disables the showLegend
             * @Default {false}
             */
            showLegend?: boolean;

            /** to get title of legend setting
             * @Default {null}
             */
            title?: string;

            /** to get type of legend setting
             * @Default {layers}
             */
            type?: ej.datavisualization.Map.LegendType|string;

            /** width value for legend setting
             * @Default {0}
             */
            width?: number;
        }

        export interface LayersSubLayersShapeSettingsColorMappingsRangeColorMapping {

            /** Specifies the start range colorMappings in the shape layer of map.
             * @Default {null}
             */
            from?: number;

            /** Specifies the to range colorMappings in the shape layer of map.
             * @Default {null}
             */
            to?: number;

            /** Specifies the gradientColors in the shape layer of map.
             * @Default {null}
             */
            gradientColors?: any[];
        }

        export interface LayersSubLayersShapeSettingsColorMappingsEqualColorMapping {

            /** Specifies the equalColorMapping value in the shape layer of map.
             * @Default {null}
             */
            value?: string;

            /** Specifies the equalColorMapping color in the shape layer of map.
             * @Default {null}
             */
            color?: string;
        }

        export interface LayersSubLayersShapeSettingsColorMappings {

            /** Specifies the range colorMappings in the shape layer of map.
             * @Default {null}
             */
            rangeColorMapping?: LayersSubLayersShapeSettingsColorMappingsRangeColorMapping[];

            /** Specifies the equalColorMapping in the shape layer of map.
             * @Default {null}
             */
            equalColorMapping?: LayersSubLayersShapeSettingsColorMappingsEqualColorMapping[];
        }

        export interface LayersSubLayersShapeSettings {

            /** Enables or Disables the auto fill colors for shape layer in map. When this property value set to true, shapes will be filled with palette colors.
             * @Default {false}
             */
            autoFill?: boolean;

            /** Specifies the colorMappings of the shape layer in map
             * @Default {null}
             */
            colorMappings?: LayersSubLayersShapeSettingsColorMappings;

            /** Specifies the shape color palette value of the shape layer in map. Accepted colorPalette values are palette1, palette2, palette3 and custompalette.
             * @Default {palette1}
             */
            colorPalette?: ej.datavisualization.Map.ColorPalette|string;

            /** Specifies the shape color valuePath of the shape layer in map
             * @Default {null}
             */
            colorValuePath?: string;

            /** Enables or Disables the gradient colors for map shapes.
             * @Default {false}
             */
            enableGradient?: boolean;

            /** Specifies the shape fill color of the shape layer in map
             * @Default {#E5E5E5}
             */
            fill?: string;

            /** Specifies the mouse over width of the shape layer in map
             * @Default {1}
             */
            highlightBorderWidth?: number;

            /** Specifies the mouse hover color of the shape layer in map
             * @Default {gray}
             */
            highlightColor?: string;

            /** Specifies the mouse over stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            highlightStroke?: string;

            /** Specifies the shape selection color of the shape layer in map
             * @Default {gray}
             */
            selectionColor?: string;

            /** Specifies the shape selection stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            selectionStroke?: string;

            /** Specifies the shape selection stroke width of the shape layer in map
             * @Default {1}
             */
            selectionStrokeWidth?: number;

            /** Specifies the shape stroke color of the shape layer in map
             * @Default {#C1C1C1}
             */
            stroke?: string;

            /** Specifies the shape stroke thickness value of the shape layer in map
             * @Default {0.2}
             */
            strokeThickness?: number;

            /** Specifies the shape valuePath of the shape layer in map
             * @Default {null}
             */
            valuePath?: string;
        }

        export interface LayersSubLayer {

            /** to get the type of bing map.
             * @Default {aerial}
             */
            bingMapType?: ej.datavisualization.Map.BingMapType|string;

            /** Specifies the bubble settings for map
             */
            bubbleSettings?: LayersSubLayersBubbleSettings;

            /** Specifies the datasource for the shape layer
             */
            dataSource?: any;

            /** Specifies the data path of shape
             */
            shapeDataPath?: string;

            /** Specifies the data path of shape
             */
            shapePropertyPath?: string;

            /** Enables or disables the shape mouse hover
             * @Default {false}
             */
            enableMouseHover?: boolean;

            /** Enables or disables the shape selection
             * @Default {true}
             */
            enableSelection?: boolean;

            /** to get the key of bing map
             * @Default {null}
             */
            key?: string;

            /** Options for enabling and configuring labelSettings labelPath, smartLabelSize, labelLength etc.,
             */
            labelSettings?: LayersSubLayersLabelSettings;

            /** Specifies the map view type.
             * @Default {'geographic'}
             */
            geometryType?: ej.datavisualization.Map.GeometryType|string;

            /** Specifies the map type.
             * @Default {'geometry'}
             */
            layerType?: ej.datavisualization.Map.LayerType|string;

            /** Options for enabling and configuring legendSettings position, height, width, mode, type etc.,
             */
            legendSettings?: LayersSubLayersLegendSettings;

            /** Specifies the map items template for shapes.
             */
            mapItemsTemplate?: string;

            /** Specify markers for shape layer.
             */
            markers?: any[];

            /** Specifies the map marker template for map layer.
             * @Default {null}
             */
            markerTemplate?: string;

            /** Specify selectedMapShapes for shape layer
             * @Default {[]}
             */
            selectedMapShapes?: any[];

            /** Specifies the selection mode of the map. Accepted selection mode values are Default and Multiple.
             * @Default {default}
             */
            selectionMode?: ej.datavisualization.Map.SelectionMode|string;

            /** Specifies the shape data for the shape layer
             */
            shapeData?: any;

            /** Specifies the shape settings of map layer
             */
            shapeSettings?: LayersSubLayersShapeSettings;

            /** Shows or hides the map items.
             * @Default {false}
             */
            showMapItems?: boolean;

            /** Shows or hides the tooltip for shapes
             * @Default {false}
             */
            showTooltip?: boolean;

            /** Specifies the tooltip template for shapes.
             */
            tooltipTemplate?: string;

            /** Specifies the URL template for the OSM type map.
             * @Default {'http://a.tile.openstreetmap.org/level/tileX/tileY.png'}
             */
            urlTemplate?: string;
        }

        export interface Layer {

            /** to get the type of bing map.
             * @Default {aerial}
             */
            bingMapType?: ej.datavisualization.Map.BingMapType|string;

            /** Specifies the bubble settings for map
             */
            bubbleSettings?: LayersBubbleSettings;

            /** Specifies the datasource for the shape layer
             */
            dataSource?: any;

            /** Specifies the data path of shape
             */
            shapeDataPath?: string;

            /** Specifies the data path of shape
             */
            shapePropertyPath?: string;

            /** Enables or disables the shape mouse hover
             * @Default {false}
             */
            enableMouseHover?: boolean;

            /** Enables or disables the shape selection
             * @Default {true}
             */
            enableSelection?: boolean;

            /** to get the key of bing map
             * @Default {null}
             */
            key?: string;

            /** Options for enabling and configuring labelSettings labelPath, smartLabelSize, labelLength etc.,
             */
            labelSettings?: LayersLabelSettings;

            /** Specifies the map view type.
             * @Default {'geographic'}
             */
            geometryType?: ej.datavisualization.Map.GeometryType|string;

            /** Specifies the map type.
             * @Default {'geometry'}
             */
            layerType?: ej.datavisualization.Map.LayerType|string;

            /** Options for enabling and configuring legendSettings position, height, width, mode, type etc.,
             */
            legendSettings?: LayersLegendSettings;

            /** Specifies the map items template for shapes.
             */
            mapItemsTemplate?: string;

            /** Specify markers for shape layer.
             */
            markers?: any[];

            /** Specifies the map marker template for map layer.
             * @Default {null}
             */
            markerTemplate?: string;

            /** Specify selectedMapShapes for shape layer
             * @Default {[]}
             */
            selectedMapShapes?: any[];

            /** Specifies the selection mode of the map. Accepted selection mode values are Default and Multiple.
             * @Default {default}
             */
            selectionMode?: ej.datavisualization.Map.SelectionMode|string;

            /** Specifies the shape data for the shape layer
             */
            shapeData?: any;

            /** Specifies the shape settings of map layer
             */
            shapeSettings?: LayersShapeSettings;

            /** Shows or hides the map items.
             * @Default {false}
             */
            showMapItems?: boolean;

            /** Shows or hides the tooltip for shapes
             * @Default {false}
             */
            showTooltip?: boolean;

            /** Specifies the tooltip template for shapes.
             */
            tooltipTemplate?: string;

            /** Specifies the URL template for the OSM type map.
             * @Default {'http://a.tile.openstreetmap.org/level/tileX/tileY.png'}
             */
            urlTemplate?: string;

            /** Sublayer is the collection of shape Layer
             */
            subLayers?: LayersSubLayer[];
        }
    }
    namespace Map {
        enum Position {
            //specifies the none position
            None,
            //specifies the topleft position
            Topleft,
            //specifies the topcenter position
            Topcenter,
            //specifies the topright position
            Topright,
            //specifies the centerleft position
            Centerleft,
            //specifies the center position
            Center,
            //specifies the centerright position
            Centerright,
            //specifies the bottomleft position
            Bottomleft,
            //specifies the bottomcenter position
            Bottomcenter,
            //specifies the bottomright position
            Bottomright,
        }
    }
    namespace Map {
        enum LabelOrientation {
            //specifies the horizontal position
            Horizontal,
            //specifies the vertical position
            Vertical,
        }
    }
    namespace Map {
        enum BingMapType {
            //specifies the aerial type
            Aerial,
            //specifies the aerialwithlabel type
            Aerialwithlabel,
            //specifies the road type
            Road,
        }
    }
    namespace Map {
        enum LabelSize {
            //specifies the fixed size
            Fixed,
            //specifies the default size
            Default,
        }
    }
    namespace Map {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Map {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }
    namespace Map {
        enum GeometryType {
            //specifies the geographic view of map
            Geographic,
            //specifies the normal land view of map
            Normal,
        }
    }
    namespace Map {
        enum LayerType {
            //specifies the geometry type
            Geometry,
            //specifies the osm type
            Osm,
            //specifies the bing type
            Bing,
        }
    }
    namespace Map {
        enum DockPosition {
            //specifies the top position
            Top,
            //specifies the bottom position
            Bottom,
            //specifies the bottom position
            Right,
            //specifies the left position
            Left,
        }
    }
    namespace Map {
        enum LegendIcons {
            //specifies the rectangle position
            Rectangle,
            //specifies the circle position
            Circle,
        }
    }
    namespace Map {
        enum Mode {
            //specifies the default mode
            Default,
            //specifies the interactive mode
            Interactive,
        }
    }
    namespace Map {
        enum LegendType {
            //specifies the layers type
            Layers,
            //specifies the bubbles type
            Bubbles,
        }
    }
    namespace Map {
        enum SelectionMode {
            //specifies the default position
            Default,
            //specifies the multiple position
            Multiple,
        }
    }
    namespace Map {
        enum ColorPalette {
            //specifies the palette1 color
            Palette1,
            //specifies the palette2 color
            Palette2,
            //specifies the palette3 color
            Palette3,
            //specifies the custom color
            Custompalette,
        }
    }

    class TreeMap extends ej.Widget {
        static fn: TreeMap;
        constructor(element: JQuery | Element, options?: TreeMap.Model);
        static Locale: any;
        model: TreeMap.Model;
        defaults: TreeMap.Model;

        /** Method to reload treemap with updated values.
         * @returns {void}
         */
        refresh(): void;

        /** Method to drilldown the treemap.
         * @returns {void}
         */
        drillDown(): void;
    }
    export namespace TreeMap {

        export interface Model {

            /** Specifies the border brush color of the treemap
             * @Default {white}
             */
            borderBrush?: string;

            /** Specifies the border thickness of the treemap
             * @Default {1}
             */
            borderThickness?: number;

            /** Specifies the uniColorMapping settings of the treemap
             */
            uniColorMapping?: UniColorMapping;

            /** Specifies the desaturationColorMapping settings of the treemap
             */
            desaturationColorMapping?: DesaturationColorMapping;

            /** Specifies the paletteColorMapping of the treemap
             */
            paletteColorMapping?: PaletteColorMapping;

            /** Specifies the color value path of the treemap
             * @Default {null}
             */
            colorValuePath?: string;

            /** Specifies the field name in the datasource that contains color values for treemap items.
             * @Default {null}
             */
            colorPath?: string;

            /** Specifies the datasource of the treemap
             * @Default {null}
             */
            dataSource?: any;

            /** Specifies the dockPosition for legend
             * @Default {top}
             */
            dockPosition?: ej.datavisualization.TreeMap.DockPosition|string;

            /** specifies the drillDown header color
             * @Default {'null'}
             */
            drillDownHeaderColor?: string;

            /** specifies the drillDown selection color
             * @Default {'#000000'}
             */
            drillDownSelectionColor?: string;

            /** Specifies whether datasource is hierarchical or not.
             * @Default {false}
             */
            isHierarchicalDatasource?: boolean;

            /** Specifies the header for parent item during drilldown. This is applicable only for hierarchical data source.
             * @Default {null}
             */
            header?: string;

            /** Enable/Disable the drillDown for treemap
             * @Default {false}
             */
            enableDrillDown?: boolean;

            /** Specifies to drill the particular data of the treemap.
             * @Default {null}
             */
            drillDownValue?: string;

            /** Specifies to render particular level of the treemap.
             * @Default {0}
             */
            drillDownLevel?: number;

            /** Controls whether Treemap has to be responsive while resizing the window.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Specifies whether treemap need to resize when container is resized
             * @Default {true}
             */
            enableResize?: boolean;

            /** This property is used to select treemap items while clicking and dragging
             * @Default {false}
             */
            draggingOnSelection?: boolean;

            /** This property is used to select group of treemap items while clicking and dragging
             * @Default {false}
             */
            draggingGroupOnSelection?: boolean;

            /** Specifies the group color mapping of the treemap
             * @Default {[]}
             */
            groupColorMapping?: GroupColorMapping[];

            /** Specifies the legend settings of the treemap
             */
            legendSettings?: LegendSettings;

            /** Specifies the highlight border brush of treemap
             * @Default {gray}
             */
            highlightBorderBrush?: string;

            /** Specifies the border thickness when treemap items is highlighted in the treemap
             * @Default {5}
             */
            highlightBorderThickness?: number;

            /** Specifies the highlight border brush of treemap
             * @Default {gray}
             */
            highlightGroupBorderBrush?: string;

            /** Specifies the border thickness when treemap items is highlighted in the treemap
             * @Default {5}
             */
            highlightGroupBorderThickness?: number;

            /** Specifies whether treemap item need to highlighted on selection
             * @Default {false}
             */
            highlightGroupOnSelection?: boolean;

            /** Specifies whether treemap item need to highlighted on selection
             * @Default {false}
             */
            highlightOnSelection?: boolean;

            /** Specifies the items layout mode of the treemap. Accepted itemsLayoutMode values are Squarified, SliceAndDiceHorizontal, SliceAndDiceVertical and SliceAndDiceAuto
             * @Default {Squarified}
             */
            itemsLayoutMode?: ej.datavisualization.TreeMap.ItemsLayoutMode|string;

            /** Specify to convert the date object to string, using locale settings.
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Name of the culture based on which Tree Map should be localized.
             * @Default {en-US}
             */
            locale?: string;

            /** Specifies the leaf settings of the treemap
             */
            leafItemSettings?: LeafItemSettings;

            /** Specifies the rangeColorMapping settings of the treemap
             * @Default {[]}
             */
            rangeColorMapping?: RangeColorMapping[];

            /** Specifies the selection mode of treemap item. Accepted selection mode values are Default and Multiple.
             * @Default {default}
             */
            selectionMode?: ej.datavisualization.TreeMap.selectionMode|string;

            /** Specifies the selection mode of the treemap. Accepted selection mode values are Default and Multiple.
             * @Default {default}
             */
            groupSelectionMode?: ej.datavisualization.TreeMap.groupSelectionMode|string;

            /** Specifies the legend visibility status of the treemap
             * @Default {false}
             */
            showLegend?: boolean;

            /** Specifies whether gradient color has to be applied for treemap items
             * @Default {false}
             */
            enableGradient?: boolean;

            /** Specifies whether treemap showTooltip need to be visible
             */
            showTooltip?: boolean;

            /** Specifies the tooltip template of the treemap
             * @Default {null}
             */
            tooltipTemplate?: string;

            /** Hold the treeMapItems to be displayed in treemap
             * @Default {[]}
             */
            treeMapItems?: any[];

            /** Specify levels of treemap for grouped visualization of data
             * @Default {[]}
             */
            levels?: Level[];

            /** Specifies the weight value path of the treemap
             * @Default {null}
             */
            weightValuePath?: string;

            /** Triggers on treemap item selected.
             */
            treeMapItemSelected?(e: TreeMapItemSelectedEventArgs): void;

            /** Triggers while rendering each treemap items.
             */
            itemRendering?(e: ItemRenderingEventArgs): void;

            /** Triggers while rendering each legend item
             */
            legendItemRendering?(e: LegendItemRenderingEventArgs): void;

            /** Triggers when drilldown is started
             */
            drillStarted?(e: DrillStartedEventArgs): void;

            /** Triggers on treemap  drilldown  item  selected.
             */
            drillDownItemSelected?(e: DrillDownItemSelectedEventArgs): void;

            /** Triggers before rendering the treemap drilldown header template
             */
            headerTemplateRendering?(e: HeaderTemplateRenderingEventArgs): void;

            /** Triggers after refreshing the treemap items.
             */
            refreshed?(e: RefreshedEventArgs): void;

            /** Triggers when the group selection is performed on treemap items.
             */
            treeMapGroupSelected?(e: TreeMapGroupSelectedEventArgs): void;

            /** Fires, on clicking the tree map items.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the tree map items.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the tree map items.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface TreeMapItemSelectedEventArgs {

            /** Returns selected treeMapItem object.
             */
            originalEvent?: any;
        }

        export interface ItemRenderingEventArgs {

            /** Returns treemap leaf item
             */
            originalEvent?: any;
        }

        export interface LegendItemRenderingEventArgs {

            /** Returns treemap legend item
             */
            originalEvent?: any;
        }

        export interface DrillStartedEventArgs {

            /** Returns selected drilled treeMap object.
             */
            originalEvent?: any;
        }

        export interface DrillDownItemSelectedEventArgs {

            /** Returns selected drilldown treeMap object.
             */
            originalEvent?: any;
        }

        export interface HeaderTemplateRenderingEventArgs {

            /** Returns drilldown header.
             */
            originalEvent?: any;
        }

        export interface RefreshedEventArgs {

            /** Refresh and load the treemap.
             */
            originalEvent?: any;
        }

        export interface TreeMapGroupSelectedEventArgs {

            /** Returns the  selected group of treeMapItems as  object.
             */
            originalEvent?: any;
        }

        export interface ClickEventArgs {

            /** Returns the clicked group of treeMapItems as  object.
             */
            originalEvent?: any;
        }

        export interface DoubleClickEventArgs {

            /** Returns the  double clicked group of treeMapItems as  object.
             */
            originalEvent?: any;
        }

        export interface RightClickEventArgs {

            /** Returns the right clicked group of treeMapItems as  object.
             */
            originalEvent?: any;
        }

        export interface UniColorMapping {

            /** Specifies the uniform color mapping of the treemap
             * @Default {null}
             */
            color?: string;
        }

        export interface DesaturationColorMapping {

            /** Specifies the to value for desaturation color mapping
             * @Default {0}
             */
            to?: number;

            /** Specifies the color for desaturationColorMapping
             * @Default {null}
             */
            color?: string;

            /** Specifies the from value for desaturation color mapping
             * @Default {0}
             */
            from?: number;

            /** Specifies the rangeMaximum value for desaturation color mapping
             * @Default {0}
             */
            rangeMaximum?: number;

            /** Specifies the rangeMinimum value for desaturation color mapping
             * @Default {0}
             */
            rangeMinimum?: number;
        }

        export interface PaletteColorMapping {

            /** Specifies the colors of the paletteColorMapping
             * @Default {[]}
             */
            colors?: any[];
        }

        export interface GroupColorMapping {

            /** Specifies the groupID for GroupColorMapping.
             * @Default {null}
             */
            groupID?: string;
        }

        export interface LegendSettings {

            /** Specifies the height for legend
             * @Default {30}
             */
            height?: number;

            /** Specifies the width for legend
             * @Default {100}
             */
            width?: number;

            /** Specifies the iconHeight for legend
             * @Default {15}
             */
            iconHeight?: number;

            /** Specifies the iconWidth for legend
             * @Default {15}
             */
            iconWidth?: number;

            /** Specifies the template for legendSettings
             * @Default {null}
             */
            template?: string;

            /** Specifies the mode for legendSettings whether default or interactive mode
             * @Default {default}
             */
            mode?: string;

            /** Specifies the title text for legend
             */
            title?: string;

            /** Specifies the leftLabel text for legend
             */
            leftLabel?: string;

            /** Specifies the rightLabel text for legend
             */
            rightLabel?: string;

            /** Specifies the dockPosition text for legend
             * @Default {top}
             */
            dockPosition?: string;

            /** Specifies the alignment text for legend
             * @Default {near}
             */
            alignment?: string;

            /** Specifies the alignment text for legend
             * @Default {0}
             */
            columnCount?: number;
        }

        export interface LeafItemSettings {

            /** Specifies the border brush color of the leaf item.
             * @Default {white}
             */
            borderBrush?: string;

            /** Specifies the border thickness of the leaf item.
             * @Default {1}
             */
            borderThickness?: number;

            /** Specifies the space between the leaf items.
             * @Default {0}
             */
            gap?: number;

            /** Specifies the label template of the leaf item.
             * @Default {null}
             */
            itemTemplate?: string;

            /** Specifies the label path of the leaf item.
             * @Default {null}
             */
            labelPath?: string;

            /** Specifies the position of the leaf labels.
             * @Default {center}
             */
            labelPosition?: ej.datavisualization.TreeMap.Position|string;

            /** Specifies the overflow options for leaf labels.
             * @Default {none}
             */
            textOverflow?: ej.datavisualization.TreeMap.TextOverflow|string;

            /** Specifies the mode of label visibility
             * @Default {visible}
             */
            labelVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

            /** Shows or hides the label of the leaf item.
             * @Default {false}
             */
            showLabels?: boolean;
        }

        export interface RangeColorMapping {

            /** Specifies the color value for rangeColorMapping.
             * @Default {null}
             */
            color?: string;

            /** specifies the gradient colors for th given range value
             * @Default {[]}
             */
            gradientColors?: any[];

            /** Specifies the from value for rangeColorMapping.
             * @Default {-1}
             */
            from?: number;

            /** Specifies the legend label value for rangeColorMapping.
             * @Default {null}
             */
            legendLabel?: string;

            /** Specifies the to value for rangeColorMapping.
             * @Default {-1}
             */
            to?: number;
        }

        export interface Level {

            /** specifies the group background
             * @Default {null}
             */
            groupBackground?: string;

            /** Specifies the group border color for tree map level.
             * @Default {null}
             */
            groupBorderColor?: string;

            /** Specifies the group border thickness for tree map level.
             * @Default {1}
             */
            groupBorderThickness?: number;

            /** Specifies the group gap for tree map level.
             * @Default {1}
             */
            groupGap?: number;

            /** Specifies the group padding for tree map level.
             * @Default {4}
             */
            groupPadding?: number;

            /** Specifies the group path for tree map level.
             */
            groupPath?: string;

            /** Specifies the header height for tree map level.
             * @Default {0}
             */
            headerHeight?: number;

            /** Specifies the header template for tree map level.
             * @Default {null}
             */
            headerTemplate?: string;

            /** Specifies the mode of header visibility
             * @Default {visible}
             */
            headerVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

            /** Specifies the position of the labels.
             * @Default {center}
             */
            labelPosition?: ej.datavisualization.TreeMap.Position|string;

            /** Specifies the overflow options for leaf labels.
             * @Default {none}
             */
            textOverflow?: ej.datavisualization.TreeMap.TextOverflow|string;

            /** Specifies the label template for tree map level.
             * @Default {null}
             */
            labelTemplate?: string;

            /** Specifies the mode of label visibility
             * @Default {visible}
             */
            labelVisibilityMode?: ej.datavisualization.TreeMap.VisibilityMode|string;

            /** Shows or hides the header for tree map level.
             * @Default {false}
             */
            showHeader?: boolean;

            /** Shows or hides the labels for tree map level.
             * @Default {false}
             */
            showLabels?: boolean;
        }
    }
    namespace TreeMap {
        enum DockPosition {
            //specifies the top position
            Top,
            //specifies the bottom position
            Bottom,
            //specifies the bottom position
            Right,
            //specifies the left position
            Left,
        }
    }
    namespace TreeMap {
        enum ItemsLayoutMode {
            //specifies the squarified as layout type position
            Squarified,
            //specifies the sliceanddicehorizontal as layout type position
            Sliceanddicehorizontal,
            //specifies the sliceanddicevertical as layout type position
            Sliceanddicevertical,
            //specifies the sliceanddiceauto as layout type position
            Sliceanddiceauto,
        }
    }
    namespace TreeMap {
        enum Position {
            //specifies the none position
            None,
            //specifies the topleft position
            Topleft,
            //specifies the topcenter position
            Topcenter,
            //specifies the topright position
            Topright,
            //specifies the centerleft position
            Centerleft,
            //specifies the center position
            Center,
            //specifies the centerright position
            Centerright,
            //specifies the bottomleft position
            Bottomleft,
            //specifies the bottomcenter position
            Bottomcenter,
            //specifies the bottomright position
            Bottomright,
        }
    }
    namespace TreeMap {
        enum TextOverflow {
            //Displays the label within the grid width
            None,
            //Hides the label when its width exceeds grid width
            Hide,
            //Wrap the label by letter when its width exceeds grid width
            Wrap,
            //Wrap the label by word when its width exceeds grid width
            WrapByWord,
        }
    }
    namespace TreeMap {
        enum VisibilityMode {
            //specifies the visible mode
            Top,
            //specifies the hide on exceeded length mode
            Hideonexceededlength,
        }
    }
    namespace TreeMap {
        enum selectionMode {
            //specifies the default mode
            Default,
            //specifies the multiple mode
            Multiple,
        }
    }
    namespace TreeMap {
        enum groupSelectionMode {
            //specifies the default mode
            Default,
            //specifies the multiple mode
            Multiple,
        }
    }

    class Diagram extends ej.Widget {
        static fn: Diagram;
        constructor(element: JQuery | Element, options?: Diagram.Model);
        static Locale: any;
        model: Diagram.Model;
        defaults: Diagram.Model;

        /** Add nodes and connectors to diagram at runtime
         * @param {any} a JSON to define a node/connector or an array of nodes and connector
         * @returns {boolean}
         */
        add(node: any): boolean;

        /** Add a label to a node at runtime
         * @param {string} name of the node to which label will be added
         * @param {any} JSON for the new label to be added
         * @returns {void}
         */
        addLabel(nodeName: string, newLabel: any): void;

        /** Add dynamic Lanes to swimlane at runtime
         * @param {any} JSON for the new lane to be added
         * @param {number} Index value to add the lane in swimlane
         * @returns {void}
         */
        addLane(lane: any, index: number): void;

        /** Add a phase to a swimlane at runtime
         * @param {string} name of the swimlane to which the phase will be added
         * @param {any} JSON object to define the phase to be added
         * @returns {void}
         */
        addPhase(name: string, options: any): void;

        /** Add a collection of layers can be added to the existing diagram layer at runtime.
         * @param {any[]} a collection of layers to be added to the existing diagram layers.
         * @returns {void}
         */
        addLayers(layers: any[]): void;

        /** Add a collection of diagram elements can be added to the specific diagram layer.
         * @param {string} specifies the name of the layer to the nodes will be added.
         * @param {any[]} collection of diagram elements to be added to the specific layer.
         * @returns {void}
         */
        addNodeToLayer(layerName: string, nodes: any[]): void;

        /** Add a collection of ports to the node specified by name
         * @param {string} name of the node to which the ports have to be added
         * @param {any[]} a collection of ports to be added to the specified node
         * @returns {void}
         */
        addPorts(name: string, ports: any[]): void;

        /** Add the specified node to selection list
         * @param {any} the node to be selected
         * @param {boolean} to define whether to clear the existing selection or not
         * @returns {void}
         */
        addSelection(node: any, clearSelection?: boolean): void;

        /** Align the selected objects based on the reference object and direction
         * @param {string} to specify the direction towards which the selected objects are to be aligned("left","right",top","bottom")
         * @returns {void}
         */
        align(direction: string): void;

        /** Bring the specified portion of the diagram content to the diagram viewport
         * @param {any} the rectangular region that is to be brought into diagram viewport
         * @returns {void}
         */
        bringIntoView(rect: any): void;

        /** Bring the specified portion of the diagram content to the center of the diagram viewport
         * @param {any} the rectangular region that is to be brought to the center of diagram viewport
         * @returns {void}
         */
        bringToCenter(rect: any): void;

        /** Visually move the selected object over all other intersected objects
         * @returns {void}
         */
        bringToFront(): void;

        /** Remove all the elements from diagram
         * @returns {void}
         */
        clear(): void;

        /** Clears the actions which is recorded to perform undo/redo operation in the diagram.
         * @returns {void}
         */
        clearHistory(): void;

        /** Remove the current selection in diagram
         * @returns {void}
         */
        clearSelection(): void;

        /** Copy the selected object to internal clipboard and get the copied object
         * @returns {any}
         */
        copy(): any;

        /** Cut the selected object from diagram to diagram internal clipboard
         * @returns {void}
         */
        cut(): void;

        /** Export the diagram as downloadable files or as data
         * @param {Diagram.Options} options to export the desired region of diagram to the desired formats.
         * @returns {string}
         */
        exportDiagram(options?: Diagram.Options): string;

        /** The exportImage method is used to export the image passed through argument with different image format and exporting options as like exportDiagram method.
         * @param {string} pass the base64String image to be exported.
         * @param {Diagram.ExportImageSettings} options to export the desired region of diagram to the desired formats.
         * @returns {string}
         */
        exportImage(image: string, exportImageSettings?: Diagram.ExportImageSettings): string;

        /** Read a node/connector object by its name
         * @param {string} name of the node/connector that is to be identified
         * @returns {any}
         */
        findNode(name: string): any;

        /** Fit the diagram content into diagram viewport
         * @param {ej.datavisualization.Diagram.FitMode} to set the mode of fit to command.
         * @param {ej.datavisualization.Diagram.Region} to set whether the region to be fit will be based on diagram elements or page settings.
         * @param {any} to set the required margin
         * @returns {void}
         */
        fitToPage(mode?: ej.datavisualization.Diagram.FitMode, region?: ej.datavisualization.Diagram.Region, margin?: any): void;

        /** Get the diagram DOM element as a string along with dependent stylesheets.
         * @param {any[]} If its specified, will get the diagram DOM element along with specified stylesheet references. Please note that you have to define absolute path for local CSS file.
         * If not specified, will get the diagram content along with all stylesheets loaded in the document.
         * @returns {void}
         */
        getDiagramContent(styleSheets?: any[]): void;

        /** Get the bounds of the diagram.
         * @returns {void}
         */
        getDiagramBounds(): void;

        /** Group the selected nodes and connectors
         * @returns {void}
         */
        group(): void;

        /** Insert a label into a node's label collection at runtime
         * @param {string} name of the node to which the label has to be inserted
         * @param {any} JSON to define the new label
         * @param {number} index to insert the label into the node
         * @returns {void}
         */
        insertLabel(name: string, label: any, index?: number): void;

        /** Refresh the diagram with the specified layout
         * @returns {void}
         */
        layout(): void;

        /** Load the diagram
         * @param {any} JSON data to load the diagram
         * @returns {void}
         */
        load(data: any): void;

        /** Visually move the selected object over its closest intersected object
         * @returns {void}
         */
        moveForward(): void;

        /** Move the selected objects by either one pixel or by the pixels specified through argument
         * @param {string} specifies the direction to move the selected objects ("left","right",top","bottom")
         * @param {number} specifies the number of pixels by which the selected objects have to be moved
         * @returns {void}
         */
        nudge(direction: string, delta?: number): void;

        /** Paste the selected object from internal clipboard to diagram
         * @param {any} object to be added to diagram
         * @param {boolean} to define whether the specified object is to be renamed or not
         * @returns {void}
         */
        paste(object?: any, rename?: boolean): void;

        /** Print the diagram as image
         * @param {Diagram.PrintSettings} options to print the desired region of diagram and print the diagram in multiple pages.
         * @returns {void}
         */
        print(printSettings?: Diagram.PrintSettings): void;

        /** The printImage method is used to print the image passed through argument with desired region and multiple pages as like print method.
         * @param {string} pass the base64String image to be printed.
         * @param {Diagram.PrintImageSettings} options to export the desired region of diagram to the desired formats.
         * @returns {string}
         */
        printImage(image: string, printImageSettings?: Diagram.PrintImageSettings): string;

        /** Restore the last action that was reverted
         * @returns {void}
         */
        redo(): void;

        /** Refresh the diagram at runtime
         * @returns {void}
         */
        refresh(): void;

        /** Remove either the given node/connector or the selected element from diagram
         * @param {any} the node/connector to be removed from diagram
         * @returns {void}
         */
        remove(node?: any): void;

        /** Remove the collection of layers from the diagram layers.
         * @param {any[]} collection of layers to be removed from diagram layer.
         * @returns {void}
         */
        removeLayers(layers: any[]): void;

        /** Remove the collection of nodes from the specific layer.
         * @param {string} Specifies the layer name to the node will be removed.
         * @param {any[]} collection of diagram elements name to be removed from specific layer.
         * @returns {void}
         */
        removeNodeToLayer(layerName: string, nodes: any[]): void;

        /** Remove the collection of ports from the specified node.
         * @param {string} name of the node to which the ports have to be added
         * @param {any[]} a collection of ports to be deleted from the specified node
         * @returns {void}
         */
        removePorts(name: string, ports: any[]): void;

        /** Add a collection of ports to the node specified by name
         * @param {string} name of the node to which the ports have to be added
         * @param {any[]} a collection of labels to be deleted from the specified node
         * @returns {void}
         */
        removeLabels(name: string, labels: any[]): void;

        /** Remove a particular object from selection list
         * @param {any} the node/connector to be removed from selection list
         * @returns {void}
         */
        removeSelection(node: any): void;

        /** Scale the selected objects to the height of the first selected object
         * @returns {void}
         */
        sameHeight(): void;

        /** Scale the selected objects to the size of the first selected object
         * @returns {void}
         */
        sameSize(): void;

        /** Scale the selected objects to the width of the first selected object
         * @returns {void}
         */
        sameWidth(): void;

        /** Returns the diagram as serialized JSON
         * @returns {any}
         */
        save(): any;

        /** Bring the node into view
         * @param {any} the node/connector to be brought into view
         * @returns {void}
         */
        scrollToNode(node: any): void;

        /** Select all nodes and connector in diagram
         * @returns {void}
         */
        selectAll(): void;

        /** Visually move the selected object behind its closest intersected object
         * @returns {void}
         */
        sendBackward(): void;

        /** Visually move the selected object behind all other intersected objects
         * @returns {void}
         */
        sendToBack(): void;

        /** Update the horizontal space between the selected objects as equal and within the selection boundary
         * @returns {void}
         */
        spaceAcross(): void;

        /** Update the vertical space between the selected objects as equal and within the selection boundary
         * @returns {void}
         */
        spaceDown(): void;

        /** Move the specified label to edit mode
         * @param {any} node/connector that contains the label to be edited
         * @param {any} to be edited
         * @returns {void}
         */
        startLabelEdit(node: any, label: any): void;

        /** Reverse the last action that was performed
         * @returns {void}
         */
        undo(): void;

        /** Ungroup the selected group
         * @returns {void}
         */
        ungroup(): void;

        /** Update diagram at runtime
         * @param {any} JSON to specify the diagram properties that have to be modified
         * @returns {void}
         */
        update(options: any): void;

        /** Update Connectors at runtime
         * @param {string} name of the connector to be updated
         * @param {any} JSON to specify the connector properties that have to be updated
         * @returns {void}
         */
        updateConnector(name: string, options: any): void;

        /** Update the given label at runtime
         * @param {string} the name of node/connector which contains the label to be updated
         * @param {any} the label to be modified
         * @param {any} JSON to specify the label properties that have to be updated
         * @returns {any}
         */
        updateLabel(nodeName: string, label: any, options: any): any;

        /** Update the given layer at run time.
         * @param {string} the name of layer to be updated
         * @param {any} the layer object to be modified
         * @returns {void}
         */
        updateLayer(layerName: string, options: any): void;

        /** Update nodes at runtime
         * @param {string} name of the node that is to be updated
         * @param {any} JSON to specify the properties of node that have to be updated
         * @returns {void}
         */
        updateNode(name: string, options: any): void;

        /** Update a port with its modified properties at runtime
         * @param {string} the name of node which contains the port to be updated
         * @param {any} the port to be updated
         * @param {any} JSON to specify the properties of the port that have to be updated
         * @returns {void}
         */
        updatePort(nodeName: string, port: any, options: any): void;

        /** Update the specified node as selected object
         * @param {string} name of the node to be updated as selected object
         * @returns {void}
         */
        updateSelectedObject(name: string): void;

        /** Update the selection at runtime
         * @param {boolean} to specify whether to show the user handles or not
         * @returns {void}
         */
        updateSelection(showUserHandles?: boolean): void;

        /** Update user handles with respect to the given node
         * @param {any} node/connector with respect to which, the user handles have to be updated
         * @returns {void}
         */
        updateUserHandles(node: any): void;

        /** Update the diagram viewport at runtime
         * @returns {void}
         */
        updateViewPort(): void;

        /** Upgrade the diagram from old version
         * @param {any} to be upgraded
         * @returns {void}
         */
        upgrade(data: any): void;

        /** Used to zoomIn/zoomOut diagram
         * @param {Diagram.Zoom} options to zoom the diagram(zoom factor, zoomIn/zoomOut)
         * @returns {void}
         */
        zoomTo(Zoom?: Diagram.Zoom): void;
    }
    export namespace Diagram {

        export interface Options {

            /** name of the file to be downloaded.
             */
            fileName?: string;

            /** format of the exported file/data.
             */
            format?: ej.datavisualization.Diagram.FileFormats;

            /** to set whether to export diagram as a file or as raw data.
             */
            mode?: ej.datavisualization.Diagram.ExportModes;

            /** to set the region of the diagram to be exported.
             */
            region?: ej.datavisualization.Diagram.Region;

            /** to export any custom region of diagram.
             */
            bounds?: any;

            /** to set margin to the exported data.
             */
            margin?: any;

            /** to resize the diagram content to fill its allocated space.
             */
            stretch?: ej.datavisualization.Diagram.Stretch;

            /** to export the diagram into multiple pages
             */
            multiplePage?: boolean;

            /** to set the page width of the diagram while exporting the diagram into multiple pages.
             */
            pageWidth?: number;

            /** to set the page height of the diagram while exporting the diagram into multiple pages.
             */
            pageHeight?: number;

            /** to sets the orientation of the page.
             */
            pageOrientation?: ej.datavisualization.Diagram.PageOrientations;
        }

        export interface ExportImageSettings {

            /** name of the file to be downloaded.
             */
            fileName?: string;

            /** format of the exported file/data.
             */
            format?: ej.datavisualization.Diagram.FileFormats;

            /** to set the region of the diagram to be exported.
             */
            region?: ej.datavisualization.Diagram.Region;

            /** to export any custom region of diagram.
             */
            bounds?: any;

            /** to set margin to the exported data.
             */
            margin?: any;

            /** to export the diagram into multiple pages
             */
            multiplePage?: boolean;

            /** to set the page width of the diagram while exporting the diagram into multiple pages.
             */
            pageWidth?: number;

            /** to set the page height of the diagram while exporting the diagram into multiple pages.
             */
            pageHeight?: number;

            /** to sets the orientation of the page.
             */
            pageOrientation?: ej.datavisualization.Diagram.PageOrientations;
        }

        export interface PrintSettings {

            /** to set the region of the diagram to be printed.
             */
            region?: ej.datavisualization.Diagram.Region;

            /** to print any custom region of diagram.
             */
            bounds?: any;

            /** to resize the diagram content to fill its allocated space and printed.
             */
            stretch?: ej.datavisualization.Diagram.Stretch;

            /** to print the diagram into multiple pages
             */
            multiplePage?: boolean;

            /** to set the page width of the diagram while printing the diagram into multiple pages.
             */
            pageWidth?: number;

            /** to set the page height of the diagram while printing the diagram into multiple pages.
             */
            pageHeight?: number;

            /** to sets the orientation of the page.
             */
            pageOrientation?: ej.datavisualization.Diagram.PageOrientations;
        }

        export interface PrintImageSettings {

            /** to set the region of the diagram to be printed.
             */
            region?: ej.datavisualization.Diagram.Region;

            /** to print any custom region of diagram.
             */
            bounds?: any;

            /** to export the diagram into multiple pages
             */
            multiplePage?: boolean;

            /** to set the page width of the diagram while printing the diagram into multiple pages.
             */
            pageWidth?: number;

            /** to set the page height of the diagram while printing the diagram into multiple pages.
             */
            pageHeight?: number;

            /** to sets the orientation of the page.
             */
            pageOrientation?: ej.datavisualization.Diagram.PageOrientations;
        }

        export interface Zoom {

            /** Used to increase the zoom-in or zoom-out based on the zoom factor value.
             */
            zoomFactor?: number;

            /** Used to zoom-in or zoom-out the diagram.
             */
            zoomCommand?: ej.datavisualization.Diagram.ZoomCommand;

            /** Used to zoom-in or zoom-out the diagram based on the point.
             */
            focusPoint?: ej.datavisualization.Diagram.ConnectorsSourcePoint;
        }

        export interface Model {

            /** Defines the background color of diagram elements
             * @Default {transparent}
             */
            backgroundColor?: string;

            /** Defines the path of the background image of diagram elements
             */
            backgroundImage?: string;

            /** Sets the direction of line bridges.
             * @Default {ej.datavisualization.Diagram.BridgeDirection.Top}
             */
            bridgeDirection?: ej.datavisualization.Diagram.BridgeDirection|string;

            /** Defines a set of custom commands and binds them with a set of desired key gestures.
             */
            commandManager?: CommandManager;

            /** A collection of JSON objects where each object represents a connector
             * @Default {[]}
             */
            connectors?: Connector[];

            /** Binds the custom JSON data with connector properties
             * @Default {null}
             */
            connectorTemplate?: any;

            /** Enables/Disables the default behaviors of the diagram.
             * @Default {ej.datavisualization.Diagram.DiagramConstraints.All}
             */
            constraints?: ej.datavisualization.Diagram.DiagramConstraints|string;

            /** An object to customize the context menu of diagram
             */
            contextMenu?: ContextMenu;

            /** Configures the data source that is to be bound with diagram
             */
            dataSourceSettings?: DataSourceSettings;

            /** Initializes the default values for nodes and connectors
             * @Default {{}}
             */
            defaultSettings?: DefaultSettings;

            /** Sets the type of JSON object to be drawn through drawing tool
             * @Default {{}}
             */
            drawType?: any;

            /** Enables or disables auto scroll in diagram
             * @Default {true}
             */
            enableAutoScroll?: boolean;

            /** Enables or disables diagram context menu
             * @Default {true}
             */
            enableContextMenu?: boolean;

            /** Specifies the height of the diagram
             * @Default {null}
             */
            height?: string;

            /** Customizes the undo redo functionality
             */
            historyManager?: HistoryManager;

            /** Defines the type of the rendering mode of label.
             * @Default {HTML}
             */
            labelRenderingMode?: ej.datavisualization.Diagram.LabelRenderingMode|string;

            /** Automatically arranges the nodes and connectors in a predefined manner.
             */
            layout?: Layout;

            /** Defines the current culture of diagram
             * @Default {en-US}
             */
            locale?: string;

            /** Array of JSON objects where each object represents a node
             * @Default {[]}
             */
            nodes?: Node[];

            /** A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
             * @Default {[]}
             */
            layers?: Layer[];

            /** Binds the custom JSON data with node properties
             * @Default {null}
             */
            nodeTemplate?: any;

            /** Defines the size and appearance of diagram page
             */
            pageSettings?: PageSettings;

            /** Defines the zoom value, zoom factor, scroll status and view port size of the diagram
             */
            scrollSettings?: ScrollSettings;

            /** Defines the size and position of selected items and defines the appearance of selector
             */
            selectedItems?: SelectedItems;

            /** Enables or disables tooltip of diagram
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Defines diagram serialization properties that would defines how the serialization content would be.
             */
            serializationSettings?: SerializationSettings;

            /** Defines the properties of the both the horizontal and vertical gauge to measure the diagram area.
             */
            rulerSettings?: RulerSettings;

            /** Defines the gridlines and defines how and when the objects have to be snapped
             */
            snapSettings?: SnapSettings;

            /** Enables/Disables the interactive behaviors of diagram.
             * @Default {ej.datavisualization.Diagram.Tool.All}
             */
            tool?: ej.datavisualization.Diagram.Tool|string;

            /** An object that defines the description, appearance and alignments of tooltips
             * @Default {null}
             */
            tooltip?: Tooltip;

            /** Specifies the width of the diagram
             * @Default {null}
             */
            width?: string;

            /** Sets the factor by which we can zoom in or zoom out
             * @Default {0.2}
             */
            zoomFactor?: number;

            /** Triggers When auto scroll is changed
             */
            autoScrollChange?(e: AutoScrollChangeEventArgs): void;

            /** Triggers when a node, connector or diagram is clicked
             */
            click?(e: ClickEventArgs): void;

            /** Triggers when the connection is changed
             */
            connectionChange?(e: ConnectionChangeEventArgs): void;

            /** Triggers when the connector collection is changed
             */
            connectorCollectionChange?(e: ConnectorCollectionChangeEventArgs): void;

            /** Triggers when the connectors' source point is changed
             */
            connectorSourceChange?(e: ConnectorSourceChangeEventArgs): void;

            /** Triggers when the connectors' target point is changed
             */
            connectorTargetChange?(e: ConnectorTargetChangeEventArgs): void;

            /** Triggers before opening the context menu
             */
            contextMenuBeforeOpen?(e: ContextMenuBeforeOpenEventArgs): void;

            /** Triggers when a context menu item is clicked
             */
            contextMenuClick?(e: ContextMenuClickEventArgs): void;

            /** Triggers when a node, connector or diagram model is clicked twice
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Triggers while dragging the elements in diagram
             */
            drag?(e: DragEventArgs): void;

            /** Triggers when a symbol is dragged into diagram from symbol palette
             */
            dragEnter?(e: DragEnterEventArgs): void;

            /** Triggers when a symbol is dragged outside of the diagram.
             */
            dragLeave?(e: DragLeaveEventArgs): void;

            /** Triggers when a symbol is dragged over diagram
             */
            dragOver?(e: DragOverEventArgs): void;

            /** Triggers when a symbol is dragged and dropped from symbol palette to drawing area
             */
            drop?(e: DropEventArgs): void;

            /** Triggers when editor got focus at the time of node's label or text node editing.
             */
            editorFocusChange?(e: EditorFocusChangeEventArgs): void;

            /** Triggers when a child is added to or removed from a group
             */
            groupChange?(e: GroupChangeEventArgs): void;

            /** Triggers when a change is reverted or restored(undo/redo)
             */
            historyChange?(e: HistoryChangeEventArgs): void;

            /** Triggers when a diagram element is clicked
             */
            itemClick?(e: ItemClickEventArgs): void;

            /** Triggers when mouse enters a node/connector
             */
            mouseEnter?(e: MouseEnterEventArgs): void;

            /** Triggers when mouse leaves node/connector
             */
            mouseLeave?(e: MouseLeaveEventArgs): void;

            /** Triggers when mouse hovers over a node/connector
             */
            mouseOver?(e: MouseOverEventArgs): void;

            /** Triggers when node collection is changed
             */
            nodeCollectionChange?(e: NodeCollectionChangeEventArgs): void;

            /** Triggers when the node properties(x, y,width and height alone) are changed using nudge commands or updateNode API.
             */
            propertyChange?(e: PropertyChangeEventArgs): void;

            /** Triggers when the diagram elements are rotated
             */
            rotationChange?(e: RotationChangeEventArgs): void;

            /** Triggers when the diagram is zoomed or panned
             */
            scrollChange?(e: ScrollChangeEventArgs): void;

            /** Triggers when a connector segment is edited
             */
            segmentChange?(e: SegmentChangeEventArgs): void;

            /** Triggers when the selection is changed in diagram
             */
            selectionChange?(e: SelectionChangeEventArgs): void;

            /** Triggers when a node is resized
             */
            sizeChange?(e: SizeChangeEventArgs): void;

            /** Triggers when label editing is ended
             */
            textChange?(e: TextChangeEventArgs): void;

            /** Triggered when the diagram is rendered completely.
             */
            create?(e: CreateEventArgs): void;

            /** Used to decide on the action on Diagramming elements at runtime.
             */
            setTool?(e: SetToolEventArgs): void;
        }

        export interface AutoScrollChangeEventArgs {

            /** Returns the delay between subsequent auto scrolls
             */
            delay?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface ClickEventArgs {

            /** parameter returns the clicked node, connector or diagram
             */
            element?: any;

            /** parameter returns the object that is actually clicked
             */
            actualObject?: number;

            /** parameter returns the horizontal coordinate of the mouse pointer, relative to the diagram
             */
            offsetX?: number;

            /** parameter returns  the vertical coordinate of the mouse pointer, relative to the diagram
             */
            offsetY?: number;

            /** parameter returns the count of how many times the mouse button is pressed
             */
            count?: number;

            /** parameter returns the event triggered
             */
            event?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;
        }

        export interface ConnectionChangeEventArgs {

            /** parameter returns the connection that is changed between nodes, ports or points
             */
            element?: any;

            /** parameter returns the new source node or target node of the connector
             */
            connection?: string;

            /** parameter returns the new source port or target port of the connector
             */
            port?: any;

            /** parameter defines whether to cancel the change or not
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface ConnectorCollectionChangeEventArgs {

            /** parameter returns whether the connector is inserted or removed
             */
            changeType?: string;

            /** parameter returns the connector that is to be added or deleted
             */
            element?: any;

            /** parameter defines whether to cancel the collection change or not
             */
            cancel?: boolean;

            /** triggers before and after adding the connector in the diagram which can be differentiated through `state` argument. We can cancel the event only before adding the connector.
             */
            state?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface ConnectorSourceChangeEventArgs {

            /** returns the connector, the source point of which is being dragged
             */
            element?: any;

            /** returns the source node of the element
             */
            node?: any;

            /** returns the source point of the element
             */
            point?: any;

            /** returns the source port of the element
             */
            port?: any;

            /** returns the state of connection end point dragging(starting, dragging, completed)
             */
            dragState?: string;

            /** parameter defines whether to cancel the change or not
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface ConnectorTargetChangeEventArgs {

            /** parameter returns the connector, the target point of which is being dragged
             */
            element?: any;

            /** returns the target node of the element
             */
            node?: any;

            /** returns the target point of the element
             */
            point?: any;

            /** returns the target port of the element
             */
            port?: any;

            /** returns the state of connection end point dragging(starting, dragging, completed)
             */
            dragState?: string;

            /** parameter defines whether to cancel the change or not
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface ContextMenuBeforeOpenEventArgs {

            /** parameter returns the diagram object
             */
            diagram?: any;

            /** parameter returns the actual arguments from context menu
             */
            contextmenu?: any;

            /** parameter returns the object that was clicked
             */
            target?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the actual click event arguments that explains which button is clicked
             */
            model?: any;

            /** parameter returns the type of the event triggered
             */
            type?: string;
        }

        export interface ContextMenuClickEventArgs {

            /** parameter returns the id of the selected context menu item
             */
            id?: string;

            /** parameter returns the text of the selected context menu item
             */
            text?: string;

            /** parameter returns the parent id of the selected context menu item
             */
            parentId?: string;

            /** parameter returns the parent text of the selected context menu item
             */
            parentText?: string;

            /** parameter returns the object that was clicked
             */
            target?: any;

            /** parameter defines whether to execute the click event or not
             */
            canExecute?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;

            /** parameter returns the element of the object that was clicked
             */
            element?: any;

            /** parameter returns the object that is selected
             */
            selectedItem?: any;

            /** parameter returns the model of the diagram
             */
            events?: any;
        }

        export interface DoubleClickEventArgs {

            /** parameter returns the object that is actually clicked
             */
            actualObject?: any;

            /** parameter returns the selected object
             */
            element?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;
        }

        export interface DragEventArgs {

            /** parameter returns the node or connector that is being dragged
             */
            element?: any;

            /** parameter returns the previous position of the node/connector
             */
            oldValue?: any;

            /** parameter returns the new position of the node/connector
             */
            newValue?: any;

            /** parameter returns the state of drag event (Starting, dragging, completed)
             */
            dragState?: string;

            /** parameter returns whether or not to cancel the drag event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns the offset of the selected items
             */
            offset?: any;
        }

        export interface DragEnterEventArgs {

            /** parameter returns the node or connector that is dragged into diagram
             */
            element?: any;

            /** parameter returns whether to add or remove the symbol from diagram
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface DragLeaveEventArgs {

            /** parameter returns the node or connector that is dragged outside of the diagram
             */
            element?: any;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface DragOverEventArgs {

            /** parameter returns the node or connector that is dragged over diagram
             */
            element?: any;

            /** parameter defines whether the symbol can be dropped at the current mouse position
             */
            allowDrop?: boolean;

            /** parameter returns the node/connector over which the symbol is dragged
             */
            target?: any;

            /** parameter returns the previous position of the node/connector
             */
            oldValue?: any;

            /** parameter returns the new position of the node/connector
             */
            newValue?: any;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface DropEventArgs {

            /** parameter returns node or connector that is being dropped
             */
            element?: any;

            /** parameter returns whether or not to cancel the drop event
             */
            cancel?: boolean;

            /** parameter returns the object from where the element is dragged
             */
            source?: any;

            /** parameter returns the object over which the object will be dropped
             */
            target?: any;

            /** parameter returns the enum which defines the type of the source
             */
            objectType?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface EditorFocusChangeEventArgs {

            /** Returns the diagram model.
             */
            model?: any;

            /** parameter returns the editor element
             */
            event?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface GroupChangeEventArgs {

            /** parameter returns the object that is added to/removed from a group
             */
            element?: any;

            /** parameter returns the old parent group(if any) of the object
             */
            oldParent?: any;

            /** parameter returns the new parent group(if any) of the object
             */
            newParent?: any;

            /** parameter returns the cause of group change("group", unGroup")
             */
            cause?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface HistoryChangeEventArgs {

            /** An array of objects, where each object represents the changes made in last undo/redo. To explore how the changes are defined, refer [Undo Redo Changes](#undo-redo-changes)
             */
            changes?: any[];

            /** A collection of objects that are changed in the last undo/redo
             */
            Source?: any[];

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;

            /** parameter returns the model of the diagram
             */
            cause?: boolean;
        }

        export interface ItemClickEventArgs {

            /** parameter returns the object that was actually clicked
             */
            actualObject?: any;

            /** parameter returns the object that is selected
             */
            selectedObject?: any;

            /** parameter returns whether or not to cancel the drop event
             */
            cancel?: boolean;

            /** parameter returns the model of the diagram
             */
            event?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface MouseEnterEventArgs {

            /** parameter returns the target node or connector
             */
            element?: any;

            /** parameter returns the object from where the selected object is dragged
             */
            source?: any;

            /** parameter returns the target object over which the selected object is dragged
             */
            target?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;
        }

        export interface MouseLeaveEventArgs {

            /** parameter returns the target node or connector
             */
            element?: any;

            /** parameter returns the object from where the selected object is dragged
             */
            source?: any;

            /** parameter returns the target object over which the selected object is dragged
             */
            target?: any;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface MouseOverEventArgs {

            /** parameter returns the target node or connector
             */
            element?: any;

            /** parameter returns the object from where the element is dragged
             */
            source?: any;

            /** parameter returns the object over which the element is being dragged.
             */
            target?: any;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface NodeCollectionChangeEventArgs {

            /** parameter returns whether the node is to be added or removed
             */
            changeType?: string;

            /** parameter returns the node which needs to be added or deleted
             */
            element?: any;

            /** parameter defines whether to cancel the collection change or not
             */
            cancel?: boolean;

            /** triggers before and after adding the node in the diagram which can be differentiated through `state` argument. We can cancel the event only before adding the node
             */
            state?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface PropertyChangeEventArgs {

            /** parameter returns the selected element
             */
            element?: any;

            /** parameter returns the action is nudge or not
             */
            cause?: string;

            /** parameter returns the new value of the node property that is being changed
             */
            newValue?: any;

            /** parameter returns the old value of the property that is being changed
             */
            oldValue?: any;

            /** parameter returns the name of the property that is changed
             */
            propertyName?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter defines whether to cancel the property change or not
             */
            cancel?: boolean;
        }

        export interface RotationChangeEventArgs {

            /** parameter returns the node that is rotated
             */
            element?: any;

            /** parameter returns the previous rotation angle
             */
            oldValue?: any;

            /** parameter returns the new rotation angle
             */
            newValue?: any;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns the actual click event arguments that explains which button is clicked
             */
            cause?: string;
        }

        export interface ScrollChangeEventArgs {

            /** Parameter returns the new zoom value, horizontal and vertical scroll offsets.
             */
            newValues?: any;

            /** parameter returns the previous zoom value, horizontal and vertical scroll offsets.
             */
            oldValues?: any;

            /** parameter returns whether or not to cancel the dragOver event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** Parameter returns the new zoom value, horizontal and vertical scroll offsets.
             */
            cause?: string;
        }

        export interface SegmentChangeEventArgs {

            /** Parameter returns the connector that is being edited
             */
            element?: any;

            /** parameter returns the state of editing (starting, dragging, completed)
             */
            dragState?: string;

            /** parameter returns the current mouse position
             */
            point?: any;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface SelectionChangeEventArgs {

            /** parameter returns whether the item is selected or removed selection
             */
            changeType?: string;

            /** parameter returns the item which is selected or to be selected
             */
            element?: any;

            /** parameter returns the collection of nodes and connectors that have to be removed from selection list
             */
            oldItems?: any[];

            /** parameter returns the collection of nodes and connectors that have to be added to selection list
             */
            newItems?: any[];

            /** parameter returns the collection of nodes and connectors that will be selected after selection change
             */
            selectedItems?: any[];

            /** parameter to specify whether or not to cancel the selection change event
             */
            cancel?: boolean;

            /** triggers before and after adding the selection to the object in the diagram which can be differentiated through `state` argument. We can cancel the event only before the selection
             * of the object.
             */
            state?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns the actual cause of the event
             */
            cause?: string;
        }

        export interface SizeChangeEventArgs {

            /** parameter returns node that was resized
             */
            element?: any;

            /** parameter to cancel the size change
             */
            cancel?: boolean;

            /** parameter returns the new width, height, offsetX and offsetY values of the element that is being resized
             */
            newValue?: any;

            /** parameter returns the previous width,height,offsetX and offsetY values of the element that is being resized
             */
            oldValue?: any;

            /** parameter returns the state of resizing(starting,resizing,completed)
             */
            resizeState?: string;

            /** parameter returns the difference between new and old value
             */
            offset?: any;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter returns the direction of the node is resized
             */
            direction?: string;
        }

        export interface TextChangeEventArgs {

            /** parameter returns the node that contains the text being edited
             */
            element?: any;

            /** parameter returns the new text
             */
            value?: string;

            /** parameter returns the keyCode of the key entered
             */
            keyCode?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;

            /** parameter to specify whether or not to cancel the event
             */
            cancel?: boolean;
        }

        export interface CreateEventArgs {

            /** Returns the diagram model.
             */
            model?: any;

            /** Returns the name of the event
             */
            type?: string;

            /** parameter returns the id of the diagram
             */
            diagramId?: string;
        }

        export interface SetToolEventArgs {

            /** Returns the port when mouse move over on it
             */
            source?: any;

            /** Defines the tool to be activated.
             */
            action?: ej.datavisualization.Diagram.ActiveTool;
        }

        export interface BackgroundImage {

            /** Defines how to align the background image over the diagram area.
             * @Default {ej.datavisualization.Diagram.ImageAlignment.XMidYMid}
             */
            alignment?: ej.datavisualization.Diagram.ImageAlignment|string;
        }

        export interface CommandManagerCommandsGesture {

            /** Sets the key value, on recognition of which the command will be executed.
             * @Default {ej.datavisualization.Diagram.Keys.None}
             */
            key?: ej.datavisualization.Diagram.Keys|string;

            /** Sets a combination of key modifiers, on recognition of which the command will be executed.
             * @Default {ej.datavisualization.Diagram.KeyModifiers.None}
             */
            keyModifiers?: ej.datavisualization.Diagram.KeyModifiers|string;
        }

        export interface CommandManagerCommands {

            /** A method that defines whether the command is executable at the moment or not.
             */
            canExecute?: any;

            /** A method that defines what to be executed when the key combination is recognized.
             */
            execute?: any;

            /** Defines a combination of keys and key modifiers, on recognition of which the command will be executed
             */
            gesture?: CommandManagerCommandsGesture;

            /** Defines any additional parameters that are required at runtime
             * @Default {null}
             */
            parameter?: any;
        }

        export interface CommandManager {

            /** An object that maps a set of command names with the corresponding command objects
             * @Default {{}}
             */
            commands?: CommandManagerCommands;
        }

        export interface ConnectorsLabelsMargin {

            /** To set the margin of the label in right direction
             * @Default {0}
             */
            right?: number;

            /** To set the margin of the label in left direction
             * @Default {0}
             */
            left?: number;

            /** To set the margin of the label in top direction
             * @Default {0}
             */
            top?: number;

            /** To set the margin of the label in bottom direction
             * @Default {0}
             */
            bottom?: number;
        }

        export interface ConnectorsLabelsDragLimit {

            /** To set the drag limit of the label in right direction
             * @Default {10}
             */
            right?: number;

            /** To set the drag limit of the label in left direction
             * @Default {10}
             */
            left?: number;

            /** To set the drag limit of the label in top direction
             * @Default {10}
             */
            top?: number;

            /** To set the drag limit of the label in bottom direction
             * @Default {10}
             */
            bottom?: number;
        }

        export interface ConnectorsLabel {

            /** Defines how the label should be aligned with respect to the segment
             * @Default {ej.datavisualization.Diagram.Alignment.Center}
             */
            alignment?: ej.datavisualization.Diagram.Alignment|string;

            /** Enables/disables the bold style
             * @Default {false}
             */
            bold?: boolean;

            /** Sets the border color of the label
             * @Default {transparent}
             */
            borderColor?: string;

            /** Sets the border width of the label
             * @Default {0}
             */
            borderWidth?: number;

            /** Defines whether the label should be aligned within the connector boundaries
             * @Default {true}
             */
            boundaryConstraints?: boolean;

            /** Enables or disables the default behaviors of the label.
             * @Default {ej.datavisualization.Diagram.LabelConstraints.None}
             */
            constraints?: ej.datavisualization.Diagram.LabelConstraints|string;

            /** Sets the fill color of the text area
             * @Default {transparent}
             */
            fillColor?: string;

            /** Sets the font color of the text
             * @Default {black}
             */
            fontColor?: string;

            /** Sets the font family of the text
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Defines the font size of the text
             * @Default {12}
             */
            fontSize?: number;

            /** Sets the height of the label(the maximum value of label height and the connector height will be considered as label height)
             * @Default {0}
             */
            height?: number;

            /** Sets the horizontal alignment of the label.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** Sets the hyperlink for the labels in the connectors.
             * @Default {none}
             */
            hyperlink?: string;

            /** Enables/disables the italic style
             * @Default {false}
             */
            italic?: boolean;

            /** Gets whether the label is currently being edited or not.
             * @Default {ej.datavisualization.Diagram.LabelEditMode.Edit}
             */
            mode?: ej.datavisualization.Diagram.LabelEditMode|string;

            /** Sets the unique identifier of the label
             */
            name?: string;

            /** Sets the fraction/ratio(relative to connector) that defines the position of the label
             * @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
             */
            offset?: any;

            /** Sets the fraction/ratio(relative to connector) that defines the position of the label
             * @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
             */
            margin?: ConnectorsLabelsMargin;

            /** Sets the padding for connector label.
             * @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
             */
            padding?: any;

            /** Sets the value which is used to drag the label within certain bounds.
             * @Default {null}
             */
            dragLimit?: ConnectorsLabelsDragLimit;

            /** Defines the transparency of labels
             * @Default {1}
             */
            opacity?: number;

            /** Defines whether the label is editable or not
             * @Default {false}
             */
            readOnly?: boolean;

            /** Defines whether the label should be positioned whether relative to segments or connector boundaries
             * @Default {ej.datavisualization.Diagram.LabelRelativeMode.SegmentPath}
             */
            relativeMode?: ej.datavisualization.Diagram.LabelRelativeMode|string;

            /** Defines the angle to which the label needs to be rotated
             * @Default {0}
             */
            rotateAngle?: number;

            /** Sets the position of the label with respect to the total segment length
             * @Default {0.5}
             */
            segmentOffset?: string;

            /** Defines the label text
             */
            text?: string;

            /** Defines how to align the text inside the label.
             * @Default {ej.datavisualization.Diagram.TextAlign.Center}
             */
            textAlign?: ej.datavisualization.Diagram.TextAlign|string;

            /** Sets how to decorate the label text.
             * @Default {ej.datavisualization.Diagram.TextDecorations.None}
             */
            textDecoration?: ej.datavisualization.Diagram.TextDecorations|string;

            /** Sets the vertical alignment of the label.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Enables or disables the visibility of the label
             * @Default {true}
             */
            visible?: boolean;

            /** Sets the width of the label(the maximum value of label width and the connector width will be considered as label width)
             * @Default {50}
             */
            width?: number;

            /** Defines how the label text needs to be wrapped.
             * @Default {ej.datavisualization.Diagram.TextWrapping.WrapWithOverflow}
             */
            wrapping?: ej.datavisualization.Diagram.TextWrapping|string;
        }

        export interface ConnectorsSegment {

            /** Sets the direction of orthogonal segment
             */
            direction?: string;

            /** Describes the length of orthogonal segment
             * @Default {undefined}
             */
            length?: number;

            /** Describes the end point of bezier/straight segment
             * @Default {Diagram.Point()}
             */
            point?: ej.datavisualization.Diagram.ConnectorsSourcePoint;

            /** Defines the first control point of the bezier segment
             * @Default {null}
             */
            point1?: ej.datavisualization.Diagram.ConnectorsSourcePoint;

            /** Defines the second control point of bezier segment
             * @Default {null}
             */
            point2?: ej.datavisualization.Diagram.ConnectorsSourcePoint;

            /** Sets the type of the segment.
             * @Default {ej.datavisualization.Diagram.Segments.Straight}
             */
            type?: ej.datavisualization.Diagram.Segments|string;

            /** Describes the length and angle between the first control point and the start point of bezier segment
             * @Default {null}
             */
            vector1?: any;

            /** Describes the length and angle between the second control point and end point of bezier segment
             * @Default {null}
             */
            vector2?: any;
        }

        export interface ConnectorsShapeMultiplicitySource {

            /** Defines the source label to connector. Applicable, if the connector is of type &quot;UML&quot;
             * @Default {true}
             */
            optional?: boolean;

            /** Defines the source label to connector. Applicable, if the connector is of type &quot;UML&quot;
             * @Default {null}
             */
            lowerBounds?: number;

            /** Defines the source label to connector. Applicable, if the connector is of type &quot;UML&quot;
             * @Default {null}
             */
            upperBounds?: number;
        }

        export interface ConnectorsShapeMultiplicity {

            /** Sets the type of the multiplicity. Applicable, if the connector is of type &quot;classifier&quot;
             * @Default {ej.datavisualization.Diagram.Multiplicity.OneToOne}
             */
            type?: ej.datavisualization.Diagram.Multiplicity|string;

            /** Defines the source label to connector. Applicable, if the connector is of type &quot;UML&quot;
             */
            source?: ConnectorsShapeMultiplicitySource;

            /** Defines the target label to connector. Applicable, if the connector is of type &quot;UML&quot;
             * @Default {true}
             */
            target?: ej.datavisualization.Diagram.ConnectorsShapeMultiplicitySource;
        }

        export interface ConnectorsShape {

            /** Sets the type of the connector
             * @Default {ej.datavisualization.Diagram.ConnectorShapes.BPMN}
             */
            type?: ej.datavisualization.Diagram.ConnectorShapes|string;

            /** Sets the type of the flow in a BPMN Process
             * @Default {ej.datavisualization.Diagram.BPMNFlows.Sequence}
             */
            flow?: ej.datavisualization.Diagram.BPMNFlows|string;

            /** Sets the type of the Association in a BPMN Process
             * @Default {ej.datavisualization.Diagram.AssociationFlows.Default}
             */
            association?: ej.datavisualization.Diagram.AssociationFlows|string;

            /** Sets the type of the message flow. Applicable, if the connector is of type &quot;BPMN&quot;
             * @Default {ej.datavisualization.Diagram.BPMNMessageFlows.Default}
             */
            message?: ej.datavisualization.Diagram.BPMNMessageFlows|string;

            /** Sets the type of BPMN sequence flow
             * @Default {ej.datavisualization.Diagram.BPMNSequenceFlows.Normal}
             */
            sequence?: ej.datavisualization.Diagram.BPMNSequenceFlows|string;

            /** Defines the role of the connector in a UML Class Diagram. Applicable, if the type of the connector is &quot;classifier&quot;.
             * @Default {ej.datavisualization.Diagram.ClassifierShapes.Association}
             */
            relationship?: ej.datavisualization.Diagram.ClassifierShapes|string;

            /** Defines the multiplicity option of the connector
             * @Default {null}
             */
            multiplicity?: ConnectorsShapeMultiplicity;

            /** Defines the shape of UMLActivity to connector. Applicable, if the connector is of type UMLActivity
             * @Default {ej.datavisualization.Diagram.UMLActivityFlow.Control}
             */
            ActivityFlow?: ej.datavisualization.Diagram.UMLActivityFlow|string;
        }

        export interface ConnectorsSourceDecorator {

            /** Sets the border color of the source decorator
             * @Default {black}
             */
            borderColor?: string;

            /** Sets the border width of the decorator
             * @Default {1}
             */
            borderWidth?: number;

            /** This property allows you to customize sourceDecorator appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Sets the fill color of the source decorator
             * @Default {black}
             */
            fillColor?: string;

            /** Sets the height of the source decorator
             * @Default {8}
             */
            height?: number;

            /** Defines the custom shape of the source decorator
             */
            pathData?: string;

            /** Defines the shape of the source decorator.
             * @Default {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
             */
            shape?: ej.datavisualization.Diagram.DecoratorShapes|string;

            /** Defines the width of the source decorator
             * @Default {8}
             */
            width?: number;
        }

        export interface ConnectorsSourcePoint {

            /** Defines the x-coordinate of a position
             * @Default {0}
             */
            x?: number;

            /** Defines the y-coordinate of a position
             * @Default {0}
             */
            y?: number;
        }

        export interface ConnectorsTargetDecorator {

            /** Sets the border color of the decorator
             * @Default {black}
             */
            borderColor?: string;

            /** This property allows you to customize targetDecorator appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Sets the color with which the decorator will be filled
             * @Default {black}
             */
            fillColor?: string;

            /** Defines the height of the target decorator
             * @Default {8}
             */
            height?: number;

            /** Defines the custom shape of the target decorator
             */
            pathData?: string;

            /** Defines the shape of the target decorator.
             * @Default {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
             */
            shape?: ej.datavisualization.Diagram.DecoratorShapes|string;

            /** Defines the width of the target decorator
             * @Default {8}
             */
            width?: number;
        }

        export interface Connector {

            /** To maintain additional information about connectors
             * @Default {null}
             */
            addInfo?: any;

            /** Defines the width of the line bridges
             * @Default {10}
             */
            bridgeSpace?: number;

            /** Enables or disables the behaviors of connectors.
             * @Default {ej.datavisualization.Diagram.ConnectorConstraints.Default}
             */
            constraints?: ej.datavisualization.Diagram.ConnectorConstraints|string;

            /** Defines the radius of the rounded corner
             * @Default {0}
             */
            cornerRadius?: number;

            /** This property allows you to customize connectors appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Sets the horizontal alignment of the connector. Applicable, if the parent of the connector is a container.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Left}
             */
            horizontalAlign?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** A collection of JSON objects where each object represents a label.
             * @Default {[]}
             */
            labels?: ConnectorsLabel[];

            /** Sets the stroke color of the connector
             * @Default {black}
             */
            lineColor?: string;

            /** Sets the pattern of dashes and gaps used to stroke the path of the connector
             */
            lineDashArray?: string;

            /** Defines the padding value to ease the interaction with connectors
             * @Default {10}
             */
            lineHitPadding?: number;

            /** Sets the width of the line
             * @Default {1}
             */
            lineWidth?: number;

            /** Defines the minimum space to be left between the bottom of parent bounds and the connector. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginBottom?: number;

            /** Defines the minimum space to be left between the left of parent bounds and the connector. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginLeft?: number;

            /** Defines the minimum space to be left between the right of parent bounds and the connector. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginRight?: number;

            /** Defines the minimum space to be left between the top of parent bounds and the connector. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginTop?: number;

            /** Sets a unique name for the connector
             */
            name?: string;

            /** Defines the transparency of the connector
             * @Default {1}
             */
            opacity?: number;

            /** Defines the size and preview size of the node to add that to symbol palette. To explore palette item, refer Palette Item
             * @Default {null}
             */
            paletteItem?: any;

            /** Sets the parent name of the connector.
             */
            parent?: string;

            /** An array of JSON objects where each object represents a segment
             * @Default {[ { type:straight } ]}
             */
            segments?: ConnectorsSegment[];

            /** Defines the role/meaning of the connector
             * @Default {null}
             */
            shape?: ConnectorsShape;

            /** Defines the source decorator of the connector
             * @Default {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
             */
            sourceDecorator?: ConnectorsSourceDecorator;

            /** Sets the source node of the connector
             */
            sourceNode?: string;

            /** Defines the space to be left between the source node and the source point of a connector
             * @Default {0}
             */
            sourcePadding?: number;

            /** Describes the start point of the connector
             * @Default {ej.datavisualization.Diagram.Point()}
             */
            sourcePoint?: ConnectorsSourcePoint;

            /** Sets the source port of the connector
             */
            sourcePort?: string;

            /** Defines the target decorator of the connector
             * @Default {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
             */
            targetDecorator?: ConnectorsTargetDecorator;

            /** Sets the target node of the connector
             */
            targetNode?: string;

            /** Defines the space to be left between the target node and the target point of the connector
             * @Default {0}
             */
            targetPadding?: number;

            /** Describes the end point of the connector
             * @Default {ej.datavisualization.Diagram.Point()}
             */
            targetPoint?: ej.datavisualization.Diagram.ConnectorsSourcePoint;

            /** Sets the targetPort of the connector
             */
            targetPort?: string;

            /** Defines the tooltip that should be shown when the mouse hovers over connector. For tooltip properties, refer Tooltip
             * @Default {null}
             */
            tooltip?: any;

            /** To set the vertical alignment of connector (Applicable,if the parent is group).
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Top}
             */
            verticalAlign?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Enables or disables the visibility of connector
             * @Default {true}
             */
            visible?: boolean;

            /** Sets the z-index of the connector
             * @Default {0}
             */
            zOrder?: number;
        }

        export interface ContextMenuItem {

            /** Defines the text for the collection of context menu item
             * @Default {null}
             */
            text?: string;

            /** Defines the name for the collection of context menu items
             * @Default {null}
             */
            name?: string;

            /** Defines the image url for the collection of context menu items
             * @Default {null}
             */
            imageUrl?: string;

            /** Defines the CssClass for the collection of context menu items
             * @Default {null}
             */
            cssClass?: string;

            /** Defines the collection of sub items for the context menu items
             * @Default {[]}
             */
            subItems?: any[];
        }

        export interface ContextMenu {

            /** Defines the collection of context menu items
             * @Default {[]}
             */
            items?: ContextMenuItem[];

            /** To set whether to display the default context menu items or not
             * @Default {false}
             */
            showCustomMenuItemsOnly?: boolean;
        }

        export interface DataSourceSettingsCrudAction {

            /** Specifies the create method which is used to get the nodes to be added from client side to the server side
             * @Default {null}
             */
            create?: string;

            /** Specifies the update method which is used to get the updated data from client side to the server side
             * @Default {null}
             */
            update?: string;

            /** Specifies the destroy method which is used to get the deleted items data from client side to the server side
             * @Default {null}
             */
            destroy?: string;

            /** Specifies the read method to get the created nodes from client side to the server side
             * @Default {null}
             */
            read?: string;
        }

        export interface DataSourceSettingsConnectionDataSourceCrudAction {

            /** Specifies the create method which is used to get the connectors to be added from client side to the server side
             * @Default {null}
             */
            create?: string;

            /** Specifies the update method which is used to get the updated connectors from client side to the server side
             * @Default {null}
             */
            update?: string;

            /** Specifies the destroy method which is used to get the deleted items data from client side to the server side
             * @Default {null}
             */
            destroy?: string;

            /** Specifies the read method which is used to get the data from client side to the server side
             * @Default {null}
             */
            read?: string;
        }

        export interface DataSourceSettingsConnectionDataSource {

            /** Sets the datasource for the connection datasource settings items.
             * @Default {null}
             */
            dataSource?: string;

            /** Sets the unique id of the connection data source item
             * @Default {null}
             */
            id?: string;

            /** Sets the source node of the connection data source item
             * @Default {null}
             */
            sourceNode?: string;

            /** Sets the target node of the connection data source item
             * @Default {null}
             */
            targetNode?: string;

            /** Sets the sourcePointX value of the connection data source item
             * @Default {null}
             */
            sourcePointX?: string;

            /** Sets the sourcePointY value of the connection data source item
             * @Default {null}
             */
            sourcePointY?: string;

            /** Sets the targetPoint-x value of the connection data source item
             * @Default {null}
             */
            targetPointX?: string;

            /** Sets the targetPoint-y value of the connection data source item
             * @Default {null}
             */
            targetPointY?: string;

            /** Specifies the method name which is used to get updated connectors from client side to the server side
             * @Default {null}
             */
            crudAction?: DataSourceSettingsConnectionDataSourceCrudAction;

            /** Specifies the custom fields to get the updated data from client side to the server side
             * @Default {[]}
             */
            customFields?: any[];
        }

        export interface DataSourceSettings {

            /** Defines the data source either as a collection of objects or as an instance of ej.DataManager
             * @Default {null}
             */
            dataSource?: any;

            /** Sets the unique id of the data source items
             */
            id?: string;

            /** Defines the parent id of the data source item
             * @Default {''}
             */
            parent?: string;

            /** Describes query to retrieve a set of data from the specified datasource
             * @Default {null}
             */
            query?: string;

            /** Sets the unique id of the root data source item
             */
            root?: string;

            /** Describes the name of the table on which the specified query has to be executed
             * @Default {null}
             */
            tableName?: string;

            /** Specifies the method name which is used to get the updated data from client side to the server side
             * @Default {null}
             */
            crudAction?: DataSourceSettingsCrudAction;

            /** Specifies the custom fields to get the updated data from client side to the server side
             * @Default {[]}
             */
            customFields?: any[];

            /** Defines the data source either as a collection of objects or as an instance of ej.DataManager
             * @Default {null}
             */
            connectionDataSource?: DataSourceSettingsConnectionDataSource;
        }

        export interface DefaultSettings {

            /** Initializes the default connector properties
             * @Default {null}
             */
            connector?: any;

            /** Initializes the default properties of groups
             * @Default {null}
             */
            group?: any;

            /** Initializes the default properties for nodes
             * @Default {null}
             */
            node?: any;
        }

        export interface HistoryManager {

            /** A method that takes a history entry as argument and returns whether the specific entry can be popped or not
             */
            canPop?: any;

            /** A method that ends grouping the changes
             */
            closeGroupAction?: any;

            /** A method that removes the history of a recent change made in diagram
             */
            pop?: any;

            /** A method that allows to track the custom changes made in diagram
             */
            push?: any;

            /** Defines what should be happened while trying to restore a custom change
             * @Default {null}
             */
            redo?: any;

            /** The redoStack property is used to get the number of redo actions to be stored on the history manager. Its an read-only property and the collection should not be modified.
             * @Default {[]}
             */
            redoStack?: any[];

            /** The stackLimit property used to restrict the undo and redo actions to a certain limit.
             * @Default {null}
             */
            stackLimit?: number;

            /** A method that starts to group the changes to revert/restore them in a single undo or redo
             */
            startGroupAction?: any;

            /** Defines what should be happened while trying to revert a custom change
             */
            undo?: any;

            /** The undoStack property is used to get the number of undo actions to be stored on the history manager. Its an read-only property and the collection should not be modified.
             * @Default {[]}
             */
            undoStack?: any[];
        }

        export interface Layout {

            /** Specifies the custom bounds to arrange/align the layout
             * @Default {ej.datavisualization.Diagram.Rectangle()}
             */
            bounds?: any;

            /** Defines the fixed node with reference to which, the layout will be arranged and fixed node will not be repositioned
             */
            fixedNode?: string;

            /** Customizes the orientation of trees/sub trees. For orientations, see Chart Orientations. For chart types, see Chart Types
             * @Default {null}
             */
            getLayoutInfo?: any;

            /** Defines a method to customize the segments based on source and target nodes.
             * @Default {null}
             */
            getConnectorSegments?: any;

            /** Sets the space to be horizontally left between nodes
             * @Default {30}
             */
            horizontalSpacing?: number;

            /** Defines the space to be left between layout bounds and layout.
             * @Default {ej.datavisualization.Diagram.Margin()}
             */
            margin?: any;

            /** Defines how to horizontally align the layout within the layout bounds
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** Defines how to vertically align the layout within the layout bounds
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Sets the orientation/direction to arrange the diagram elements.
             * @Default {ej.datavisualization.Diagram.LayoutOrientations.TopToBottom}
             */
            orientation?: ej.datavisualization.Diagram.LayoutOrientations|string;

            /** Sets the type of the layout based on which the elements will be arranged.
             * @Default {ej.datavisualization.Diagram.LayoutTypes.None}
             */
            type?: ej.datavisualization.Diagram.LayoutTypes|string;

            /** Sets the space to be vertically left between nodes
             * @Default {30}
             */
            verticalSpacing?: number;

            /** Sets the value is used to define the root node of the layout.
             * @Default {30}
             */
            root?: string;

            /** Defines how long edges should be, ideally. This will be the resting length for the springs.
             * @Default {100}
             */
            springLength?: number;

            /** Defines how long edges should be, ideally. This will be the resting length for the springs.
             * @Default {0.442}
             */
            springFactor?: number;

            /** Defines how long edges should be, ideally. This will be the resting length for the springs.
             * @Default {1000}
             */
            maxIteration?: number;

            /** Enable or disable connector's segment overlapping with each other when executing the layout with multiple parents.
             * @Default {false}
             */
            avoidSegmentOverlapping?: boolean;
        }

        export interface NodesAnnotation {

            /** Sets the angle between the BPMN shape and the annotation
             * @Default {0}
             */
            angle?: number;

            /** Sets the direction of the text annotation
             * @Default {ej.datavisualization.Diagram.BPMNAnnotationDirections.Left}
             */
            direction?: ej.datavisualization.Diagram.BPMNAnnotationDirection|string;

            /** Sets the height of the text annotation
             * @Default {20}
             */
            height?: number;

            /** Sets the distance between the BPMN shape and the annotation
             * @Default {0}
             */
            length?: number;

            /** Defines the additional information about the flow object in a BPMN Process
             */
            text?: string;

            /** Sets the  width of the text annotation
             * @Default {20}
             */
            width?: number;
        }

        export interface NodesClassAttribute {

            /** Sets the name of the attribute
             */
            name?: string;

            /** Sets the data type of attribute
             */
            type?: string;

            /** Defines the visibility of the attribute
             * @Default {ej.datavisualization.Diagram.ScopeValueDefaults.Public}
             */
            scope?: string;
        }

        export interface NodesClassMethod {

            /** Sets the visibility of the method.
             * @Default {ej.datavisualization.Diagram.ScopeValueDefaults.Public}
             */
            scope?: string;
        }

        export interface NodesClass {

            /** Sets the name of class.
             */
            name?: string;

            /** Defines the collection of attributes
             * @Default {[]}
             */
            attributes?: NodesClassAttribute[];

            /** Defines the collection of methods of a Class.
             * @Default {[]}
             */
            methods?: NodesClassMethod[];
        }

        export interface NodesCollapseIcon {

            /** Sets the border color for collapse icon of node
             * @Default {black}
             */
            borderColor?: string;

            /** Sets the border width for collapse icon of node
             * @Default {1}
             */
            borderWidth?: number;

            /** Sets the fill color for collapse icon of node
             * @Default {white}
             */
            fillColor?: string;

            /** Defines the height for collapse icon of node
             * @Default {15}
             */
            height?: number;

            /** Sets the horizontal alignment of the icon.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** To set the margin for the collapse icon of node
             * @Default {ej.datavisualization.Diagram.Margin()}
             */
            margin?: any;

            /** Sets the fraction/ratio(relative to node) that defines the position of the icon
             * @Default {ej.datavisualization.Diagram.Point(0.5, 1)}
             */
            offset?: any;

            /** Defines the shape of the collapsed state of the node.
             * @Default {ej.datavisualization.Diagram.IconShapes.None}
             */
            shape?: ej.datavisualization.Diagram.IconShapes|string;

            /** Sets the vertical alignment of the icon.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;
        }

        export interface NodesContainer {

            /** Defines the orientation of the container. Applicable, if the group is a container.
             * @Default {vertical}
             */
            orientation?: string;

            /** Sets the type of the container. Applicable if the group is a container.
             * @Default {ej.datavisualization.Diagram.ContainerType.Canvas}
             */
            type?: ej.datavisualization.Diagram.ContainerType|string;
        }

        export interface NodesData {

            /** Sets the type of the BPMN Data object
             * @Default {ej.datavisualization.Diagram.BPMNDataObjects.None}
             */
            type?: ej.datavisualization.Diagram.BPMNDataObjects|string;

            /** Defines whether the BPMN data object is a collection or not
             * @Default {false}
             */
            collection?: boolean;
        }

        export interface NodesEnumerationMember {

            /** Sets the name of the enumeration member
             */
            name?: string;
        }

        export interface NodesEnumeration {

            /** Sets the name of the Enumeration
             */
            name?: string;

            /** Defines the collection of enumeration members
             * @Default {[]}
             */
            members?: NodesEnumerationMember[];
        }

        export interface NodesExpandIcon {

            /** Sets the border color for expand icon of node
             * @Default {black}
             */
            borderColor?: string;

            /** Sets the border width for expand icon of node
             * @Default {1}
             */
            borderWidth?: number;

            /** Sets the fill color for expand icon of node
             * @Default {white}
             */
            fillColor?: string;

            /** Defines the height for expand icon of node
             * @Default {15}
             */
            height?: number;

            /** Sets the horizontal alignment of the icon.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** To set the margin for the expand icon of node
             * @Default {ej.datavisualization.Diagram.Margin()}
             */
            margin?: any;

            /** Sets the fraction/ratio(relative to node) that defines the position of the icon
             * @Default {ej.datavisualization.Diagram.Point(0.5, 1)}
             */
            offset?: any;

            /** Defines the shape of the expanded state of the node.
             * @Default {ej.datavisualization.Diagram.IconShapes.None}
             */
            shape?: ej.datavisualization.Diagram.IconShapes|string;

            /** Sets the vertical alignment of the icon.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;
        }

        export interface NodesGradientLinearGradient {

            /** Defines the different colors and the region of color transitions
             * @Default {[]}
             */
            stops?: any[];

            /** Defines the type of gradient
             * @Default {linear}
             */
            type?: string;

            /** Defines the left most position(relative to node) of the rectangular region that needs to be painted
             * @Default {0}
             */
            x1?: number;

            /** Defines the right most position(relative to node) of the rectangular region that needs to be painted
             * @Default {0}
             */
            x2?: number;

            /** Defines the top most position(relative to node) of the rectangular region that needs to be painted
             * @Default {0}
             */
            y1?: number;

            /** Defines the bottom most position(relative to node) of the rectangular region that needs to be painted
             * @Default {0}
             */
            y2?: number;
        }

        export interface NodesGradientRadialGradient {

            /** Defines the type of gradient
             * @Default {radial}
             */
            type?: string;

            /** Defines the position of the outermost circle
             * @Default {0}
             */
            cx?: number;

            /** Defines the outer most circle of the radial gradient
             * @Default {0}
             */
            cy?: number;

            /** Defines the innermost circle of the radial gradient
             * @Default {0}
             */
            fx?: number;

            /** Defines the innermost circle of the radial gradient
             * @Default {0}
             */
            fy?: number;

            /** Defines the different colors and the region of color transitions.
             * @Default {[]}
             */
            stops?: any[];
        }

        export interface NodesGradientStop {

            /** Sets the color to be filled over the specified region
             */
            color?: string;

            /** Sets the position where the previous color transition ends and a new color transition starts
             * @Default {0}
             */
            offset?: number;

            /** Describes the transparency level of the region
             * @Default {1}
             */
            opacity?: number;
        }

        export interface NodesGradient {

            /** Paints the node with linear color transitions
             */
            LinearGradient?: NodesGradientLinearGradient;

            /** Paints the node with radial color transitions. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient.
             */
            RadialGradient?: NodesGradientRadialGradient;

            /** Defines the color and a position where the previous color transition ends and a new color transition starts
             */
            Stop?: NodesGradientStop;
        }

        export interface NodesInterfaceAttribute {

            /** Sets the name of the attribute
             */
            name?: string;

            /** Sets the type of the attribute
             */
            type?: string;

            /** Sets the visibility of the attribute
             */
            scope?: string;
        }

        export interface NodesInterfaceMethod {

            /** Sets the visibility of the method
             */
            scope?: string;
        }

        export interface NodesInterface {

            /** Sets the name of the interface
             */
            name?: string;

            /** Defines a collection of attributes of the interface
             * @Default {[]}
             */
            attributes?: NodesInterfaceAttribute[];

            /** Defines the collection of public methods of an interface
             * @Default {[]}
             */
            methods?: NodesInterfaceMethod[];
        }

        export interface NodesLabel {

            /** Enables/disables the bold style
             * @Default {false}
             */
            bold?: boolean;

            /** Sets the border color of the label
             * @Default {transparent}
             */
            borderColor?: string;

            /** Sets the border width of the label
             * @Default {0}
             */
            borderWidth?: number;

            /** This property allows you to customize labels appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Enables or disables the default behaviors of the label.
             * @Default {ej.datavisualization.Diagram.LabelConstraints.None}
             */
            constraints?: ej.datavisualization.Diagram.LabelConstraints|string;

            /** Sets the fill color of the text area
             * @Default {transparent}
             */
            fillColor?: string;

            /** Sets the font color of the text
             * @Default {black}
             */
            fontColor?: string;

            /** Sets the font family of the text
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Defines the font size of the text
             * @Default {12}
             */
            fontSize?: number;

            /** Sets the height of the label(the maximum value of label height and the node height will be considered as label height)
             * @Default {0}
             */
            height?: number;

            /** Sets the horizontal alignment of the label.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** Enables/disables the italic style
             * @Default {false}
             */
            italic?: boolean;

            /** To set the margin of the label
             * @Default {ej.datavisualization.Diagram.Margin()}
             */
            margin?: any;

            /** Gets whether the label is currently being edited or not.
             * @Default {ej.datavisualization.Diagram.LabelEditMode.Edit}
             */
            mode?: ej.datavisualization.Diagram.LabelEditMode|string;

            /** Sets the unique identifier of the label
             */
            name?: string;

            /** Sets the fraction/ratio(relative to node) that defines the position of the label
             * @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
             */
            offset?: any;

            /** Defines the transparency of the labels
             * @Default {1}
             */
            opacity?: number;

            /** Sets the overflowType of the labels
             * @Default {ej.datavisualization.Diagram.OverflowType.Ellipsis}
             */
            overflowType?: ej.datavisualization.Diagram.OverflowType|string;

            /** To set the padding of the node label
             * @Default {ej.datavisualization.Diagram.Padding()}
             */
            padding?: any;

            /** Defines whether the label is editable or not
             * @Default {false}
             */
            readOnly?: boolean;

            /** Defines the angle to which the label needs to be rotated
             * @Default {0}
             */
            rotateAngle?: number;

            /** Sets the id of svg/html templates. Applicable, if the node's label is HTML or native.
             */
            templateId?: string;

            /** Defines the label text
             */
            text?: string;

            /** Defines how to align the text inside the label.
             * @Default {ej.datavisualization.Diagram.TextAlign.Center}
             */
            textAlign?: ej.datavisualization.Diagram.TextAlign|string;

            /** Sets how to decorate the label text.
             * @Default {ej.datavisualization.Diagram.TextDecorations.None}
             */
            textDecoration?: ej.datavisualization.Diagram.TextDecorations|string;

            /** Defines the overflowed content is displayed or not.
             * @Default {false}
             */
            textOverflow?: boolean;

            /** Sets the vertical alignment of the label.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Enables or disables the visibility of the label
             * @Default {true}
             */
            visible?: boolean;

            /** Sets the width of the label(the maximum value of label width and the node width will be considered as label width)
             * @Default {50}
             */
            width?: number;

            /** Defines how the label text needs to be wrapped.
             * @Default {ej.datavisualization.Diagram.TextWrapping.WrapWithOverflow}
             */
            wrapping?: ej.datavisualization.Diagram.TextWrapping|string;
        }

        export interface NodesLane {

            /** This property allows you to customize lanes appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Defines the width of lane
             * @Default {0}
             */
            width?: number;

            /** Defines the height of lane
             * @Default {0}
             */
            height?: number;

            /** Defines the z-index of the lane
             * @Default {0}
             */
            zorder?: number;

            /** Allows to maintain additional information about lane
             * @Default {{}}
             */
            addInfo?: any;

            /** An array of objects where each object represents a child node of the lane
             * @Default {[]}
             */
            children?: any[];

            /** Defines the fill color of the lane
             * @Default {white}
             */
            fillColor?: string;

            /** Defines the header of the lane
             * @Default {{ text: Function, fontSize: 11 }}
             */
            header?: any;

            /** Defines the object as a lane
             * @Default {false}
             */
            isLane?: boolean;

            /** Sets the unique identifier of the lane
             */
            name?: string;

            /** Sets the orientation of the lane.
             * @Default {vertical}
             */
            orientation?: string;
        }

        export interface NodesPaletteItem {

            /** Defines whether the symbol should be drawn at its actual size regardless of precedence factors or not
             * @Default {true}
             */
            enableScale?: boolean;

            /** Defines the height of the symbol
             * @Default {0}
             */
            height?: number;

            /** To display a name for nodes in the symbol palette
             * @Default {null}
             */
            label?: string;

            /** Defines the margin of the symbol item
             * @Default {{ left: 4, right: 4, top: 4, bottom: 4 }}
             */
            margin?: any;

            /** Defines the preview height of the symbol
             * @Default {undefined}
             */
            previewHeight?: number;

            /** Defines the preview width of the symbol
             * @Default {undefined}
             */
            previewWidth?: number;

            /** Defines the width of the symbol
             * @Default {0}
             */
            width?: number;
        }

        export interface NodesPhase {

            /** Defines the header of the smaller regions
             * @Default {null}
             */
            label?: any;

            /** Defines the line color of the splitter that splits adjacent phases.
             * @Default {#606060}
             */
            lineColor?: string;

            /** Sets the dash array that used to stroke the phase splitter
             * @Default {3,3}
             */
            lineDashArray?: string;

            /** Sets the lineWidth of the phase
             * @Default {1}
             */
            lineWidth?: number;

            /** Sets the unique identifier of the phase
             */
            name?: string;

            /** Sets the length of the smaller region(phase) of a swimlane
             * @Default {100}
             */
            offset?: number;

            /** Sets the orientation of the phase
             * @Default {horizontal}
             */
            orientation?: string;

            /** Sets the type of the object as phase
             * @Default {phase}
             */
            type?: string;
        }

        export interface NodesPort {

            /** Sets the border color of the port
             * @Default {#1a1a1a}
             */
            borderColor?: string;

            /** Sets the stroke width of the port
             * @Default {1}
             */
            borderWidth?: number;

            /** Defines the space to be left between the port bounds and its incoming and outgoing connections.
             * @Default {0}
             */
            connectorPadding?: number;

            /** Defines whether connections can be created with the port
             * @Default {ej.datavisualization.Diagram.PortConstraints.Connect}
             */
            constraints?: ej.datavisualization.Diagram.PortConstraints|string;

            /** This property allows you to customize ports appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Sets the fill color of the port
             * @Default {white}
             */
            fillColor?: string;

            /** Sets the unique identifier of the port
             */
            name?: string;

            /** Defines the position of the port as fraction/ ratio relative to node
             * @Default {ej.datavisualization.Diagram.Point(0, 0)}
             */
            offset?: any;

            /** Defines the path data to draw the port. Applicable, if the port shape is path.
             */
            pathData?: string;

            /** Defines the shape of the port.
             * @Default {ej.datavisualization.Diagram.PortShapes.Square}
             */
            shape?: ej.datavisualization.Diagram.PortShapes|string;

            /** Defines the size of the port
             * @Default {8}
             */
            size?: number;

            /** Defines when the port should be visible.
             * @Default {ej.datavisualization.Diagram.PortVisibility.Default}
             */
            visibility?: ej.datavisualization.Diagram.PortVisibility|string;

            /** Sets the name of the node which contains this port.
             */
            parent?: string;
        }

        export interface NodesShadow {

            /** Defines the angle of the shadow relative to node
             * @Default {45}
             */
            angle?: number;

            /** Sets the distance to move the shadow relative to node
             * @Default {5}
             */
            distance?: number;

            /** Defines the opaque of the shadow
             * @Default {0.7}
             */
            opacity?: number;
        }

        export interface NodesSubProcessEvent {

            /** Sets the type of the event by which the sub-process will be triggered
             * @Default {ej.datavisualization.Diagram.BPMNEvents.Start}
             */
            event?: ej.datavisualization.Diagram.BPMNEvents|string;

            /** Sets the fraction/ratio(relative to parent) that defines the position of the event shape
             * @Default {ej.datavisualization.Diagram.Point(0.5, 0.5)}
             */
            offset?: any;

            /** Sets the name of the BPMN event shape.
             */
            name?: string;

            /** Defines the type of the event trigger
             * @Default {ej.datavisualization.Diagram.BPMNTriggers.Message}
             */
            trigger?: ej.datavisualization.Diagram.BPMNTriggers|string;

            /** An array of objects where each object represents a port
             * @Default {[]}
             */
            ports?: any[];

            /** A collection of objects where each object represents a label
             * @Default {[]}
             */
            labels?: any[];
        }

        export interface NodesSubProcess {

            /** Defines whether the BPMN sub process is without any prescribed order or not
             * @Default {false}
             */
            adhoc?: boolean;

            /** Sets the boundary of the BPMN process
             * @Default {ej.datavisualization.Diagram.BPMNBoundary.Default}
             */
            boundary?: ej.datavisualization.Diagram.BPMNBoundary|string;

            /** Sets whether the BPMN subprocess is triggered as a compensation of a specific activity
             * @Default {false}
             */
            compensation?: boolean;

            /** Sets whether the BPMN subprocess is triggered as a collapsed of a specific activity
             * @Default {true}
             */
            collapsed?: boolean;

            /** Sets the type of the event by which the sub-process will be triggered
             * @Default {ej.datavisualization.Diagram.BPMNEvents.Start}
             */
            event?: ej.datavisualization.Diagram.BPMNEvents|string;

            /** Defines the collection of events that need to be appended with BPMN Sub-Process
             */
            events?: NodesSubProcessEvent[];

            /** Defines the loop type of a sub process.
             * @Default {ej.datavisualization.Diagram.BPMNLoops.None}
             */
            loop?: ej.datavisualization.Diagram.BPMNLoops|string;

            /** Defines the children for BPMN's SubProcess
             * @Default {[]}
             */
            Processes?: any[];

            /** Defines the type of the event trigger
             * @Default {ej.datavisualization.Diagram.BPMNTriggers.Message}
             */
            trigger?: ej.datavisualization.Diagram.BPMNTriggers|string;

            /** Defines the type of a sub process
             * @Default {ej.datavisualization.Diagram.BPMNSubProcessTypes.None}
             */
            type?: ej.datavisualization.Diagram.BPMNSubProcessTypes|string;
        }

        export interface NodesTask {

            /** To set whether the task is a global task or not
             * @Default {false}
             */
            call?: boolean;

            /** Sets whether the task is triggered as a compensation of another specific activity
             * @Default {false}
             */
            compensation?: boolean;

            /** Sets the loop type of a BPMN task.
             * @Default {ej.datavisualization.Diagram.BPMNLoops.None}
             */
            loop?: ej.datavisualization.Diagram.BPMNLoops|string;

            /** Sets the type of the BPMN task.
             * @Default {ej.datavisualization.Diagram.BPMNTasks.None}
             */
            type?: ej.datavisualization.Diagram.BPMNTasks|string;

            /** Defines the collection of events that need to be appended with BPMN tasks
             */
            events?: any[];
        }

        export interface Node {

            /** Defines the type of BPMN Activity. Applicable, if the node is a BPMN activity.
             * @Default {ej.datavisualization.Diagram.BPMNActivity.Task}
             */
            activity?: ej.datavisualization.Diagram.BPMNActivity|string;

            /** To maintain additional information about nodes
             * @Default {{}}
             */
            addInfo?: any;

            /** Defines the additional information of a process. It is not directly related to the message flows or sequence flows of the process.
             * @Default {ej.datavisualization.Diagram.BPMNTextAnnotation()}
             */
            annotation?: NodesAnnotation;

            /** Sets the border color of node
             * @Default {black}
             */
            borderColor?: string;

            /** Sets the pattern of dashes and gaps to stroke the border
             */
            borderDashArray?: string;

            /** Sets the border width of the node
             * @Default {1}
             */
            borderWidth?: number;

            /** Defines whether the group can be ungrouped or not
             * @Default {true}
             */
            canUngroup?: boolean;

            /** Array of JSON objects where each object represents a child node/connector
             * @Default {[]}
             */
            children?: any[];

            /** Sets the type of UML classifier. Applicable, if the node is a UML Class Diagram shape.
             * @Default {ej.datavisualization.Diagram.ClassifierShapes.Class}
             */
            classifier?: ej.datavisualization.Diagram.ClassifierShapes|string;

            /** Defines the name, attributes and methods of a Class. Applicable, if the node is a Class.
             * @Default {null}
             */
            class?: NodesClass;

            /** Defines the state of the node is collapsed.
             */
            collapseIcon?: NodesCollapseIcon;

            /** Defines the distance to be left between a node and its connections(In coming and out going connections).
             * @Default {0}
             */
            connectorPadding?: number;

            /** Enables or disables the default behaviors of the node.
             * @Default {ej.datavisualization.Diagram.NodeConstraints.Default}
             */
            constraints?: ej.datavisualization.Diagram.NodeConstraints|string;

            /** Defines how the child objects need to be arranged(Either in any predefined manner or automatically). Applicable, if the node is a group.
             * @Default {null}
             */
            container?: NodesContainer;

            /** Defines the corner radius of rectangular shapes.
             * @Default {0}
             */
            cornerRadius?: number;

            /** This property allows you to customize nodes appearance using user-defined CSS.
             */
            cssClass?: string;

            /** Defines the BPMN data object
             */
            data?: NodesData;

            /** Defines an Enumeration in a UML Class Diagram
             * @Default {null}
             */
            enumeration?: NodesEnumeration;

            /** Sets the type of the BPMN Events. Applicable, if the node is a BPMN event.
             * @Default {ej.datavisualization.Diagram.BPMNEvents.Start}
             */
            event?: ej.datavisualization.Diagram.BPMNEvents|string;

            /** Defines whether the node can be automatically arranged using layout or not
             * @Default {false}
             */
            excludeFromLayout?: boolean;

            /** Defines the state of the node is expanded or collapsed.
             */
            expandIcon?: NodesExpandIcon;

            /** Defines the fill color of the node
             * @Default {white}
             */
            fillColor?: string;

            /** Sets the type of the BPMN Gateway. Applicable, if the node is a BPMN gateway.
             * @Default {ej.datavisualization.Diagram.BPMNGateways.None}
             */
            gateway?: ej.datavisualization.Diagram.BPMNGateways|string;

            /** Paints the node with a smooth transition from one color to another color
             */
            gradient?: NodesGradient;

            /** defines the node border with a smooth transition from one color to another color.
             * @Default {null}
             */
            borderGradient?: any;

            /** Defines the header of a swimlane/lane
             * @Default {{ text: Title, fontSize: 11 }}
             */
            header?: any;

            /** Defines the height of the node
             * @Default {0}
             */
            height?: number;

            /** Sets the horizontal alignment of the node. Applicable, if the parent of the node is a container.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Left}
             */
            horizontalAlign?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** A read only collection of the incoming connectors/edges of the node
             * @Default {[]}
             */
            inEdges?: any[];

            /** Defines an interface in a UML Class Diagram
             * @Default {null}
             */
            interface?: NodesInterface;

            /** Defines whether the sub tree of the node is expanded or collapsed
             * @Default {true}
             */
            isExpanded?: boolean;

            /** Sets the node as a swimlane
             * @Default {false}
             */
            isSwimlane?: boolean;

            /** A collection of objects where each object represents a label
             * @Default {[]}
             */
            labels?: NodesLabel[];

            /** An array of objects where each object represents a lane. Applicable, if the node is a swimlane.
             * @Default {[]}
             */
            lanes?: NodesLane[];

            /** Defines the minimum space to be left between the bottom of parent bounds and the node. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginBottom?: number;

            /** Defines the minimum space to be left between the left of parent bounds and the node. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginLeft?: number;

            /** Defines the minimum space to be left between the right of the parent bounds and the node. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginRight?: number;

            /** Defines the minimum space to be left between the top of parent bounds and the node. Applicable, if the parent is a container.
             * @Default {0}
             */
            marginTop?: number;

            /** Defines the maximum height limit of the node
             * @Default {0}
             */
            maxHeight?: number;

            /** Defines the maximum width limit of the node
             * @Default {0}
             */
            maxWidth?: number;

            /** Defines the minimum height limit of the node
             * @Default {0}
             */
            minHeight?: number;

            /** Defines the minimum width limit of the node
             * @Default {0}
             */
            minWidth?: number;

            /** Sets the unique identifier of the node
             */
            name?: string;

            /** Defines the position of the node on X-Axis
             * @Default {0}
             */
            offsetX?: number;

            /** Defines the position of the node on Y-Axis
             * @Default {0}
             */
            offsetY?: number;

            /** Defines the opaque of the node
             * @Default {1}
             */
            opacity?: number;

            /** Defines the orientation of nodes. Applicable, if the node is a swimlane.
             * @Default {vertical}
             */
            orientation?: string;

            /** A read only collection of outgoing connectors/edges of the node
             * @Default {[]}
             */
            outEdges?: any[];

            /** Defines the minimum padding value to be left between the bottom most position of a group and its children. Applicable, if the group is a container.
             * @Default {0}
             */
            paddingBottom?: number;

            /** Defines the minimum padding value to be left between the left most position of a group and its children. Applicable, if the group is a container.
             * @Default {0}
             */
            paddingLeft?: number;

            /** Defines the minimum padding value to be left between the right most position of a group and its children. Applicable, if the group is a container.
             * @Default {0}
             */
            paddingRight?: number;

            /** Defines the minimum padding value to be left between the top most position of a group and its children. Applicable, if the group is a container.
             * @Default {0}
             */
            paddingTop?: number;

            /** Defines the size and preview size of the node to add that to symbol palette
             * @Default {null}
             */
            paletteItem?: NodesPaletteItem;

            /** Sets the name of the parent group
             */
            parent?: string;

            /** Sets the path geometry that defines the shape of a path node
             */
            pathData?: string;

            /** An array of objects, where each object represents a smaller region(phase) of a swimlane.
             * @Default {[]}
             */
            phases?: NodesPhase[];

            /** Sets the height of the phase headers
             * @Default {0}
             */
            phaseSize?: number;

            /** Sets the ratio/ fractional value relative to node, based on which the node will be transformed(positioning, scaling and rotation)
             * @Default {ej.datavisualization.Diagram.Points(0.5,0.5)}
             */
            pivot?: any;

            /** Defines a collection of points to draw a polygon. Applicable, if the shape is a polygon.
             * @Default {[]}
             */
            points?: any[];

            /** An array of objects where each object represents a port
             * @Default {[]}
             */
            ports?: NodesPort[];

            /** Sets the angle to which the node should be rotated
             * @Default {0}
             */
            rotateAngle?: number;

            /** Defines the opacity and the position of shadow
             * @Default {ej.datavisualization.Diagram.Shadow()}
             */
            shadow?: NodesShadow;

            /** Sets the shape of the node. It depends upon the type of node.
             * @Default {ej.datavisualization.Diagram.BasicShapes.Rectangle}
             */
            shape?:
            ej.datavisualization.Diagram.BasicShapes|ej.datavisualization.Diagram.FlowShapes|ej.datavisualization.Diagram.BPMNShapes|ej.datavisualization.Diagram.UMLActivityShapes|string;

            /** Sets the source path of the image. Applicable, if the type of the node is image.
             */
            source?: string;

            /** Defines the sub process of a BPMN Activity. Applicable, if the type of the BPMN activity is sub process.
             * @Default {ej.datavisualization.Diagram.BPMNSubProcess()}
             */
            subProcess?: NodesSubProcess;

            /** Defines the task of the BPMN activity. Applicable, if the type of activity is set as task.
             * @Default {ej.datavisualization.Diagram.BPMNTask()}
             */
            task?: NodesTask;

            /** Sets the id of svg/html templates. Applicable, if the node is HTML or native.
             */
            templateId?: string;

            /** Defines the textBlock of a text node
             * @Default {null}
             */
            textBlock?: any;

            /** Defines the tooltip that should be shown when the mouse hovers over node. For tooltip properties, refer Tooltip
             * @Default {null}
             */
            tooltip?: any;

            /** Sets the type of BPMN Event Triggers.
             * @Default {ej.datavisualization.Diagram.BPMNTriggers.None}
             */
            trigger?: ej.datavisualization.Diagram.BPMNTriggers|string;

            /** Defines the type of the node.
             * @Default {ej.datavisualization.Diagram.Shapes.Basic}
             */
            type?: ej.datavisualization.Diagram.Shapes|string;

            /** Sets the vertical alignment of a node. Applicable, if the parent of a node is a container.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Top}
             */
            verticalAlign?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Defines the visibility of the node
             * @Default {true}
             */
            visible?: boolean;

            /** Defines the width of the node
             * @Default {0}
             */
            width?: number;

            /** Defines the z-index of the node
             * @Default {0}
             */
            zOrder?: number;
        }

        export interface Layer {

            /** To specify the name of the diagram layer. Layer name should be unique.
             */
            name?: string;

            /** Enable or disable diagram objects to be added to the specific layer.
             * @Default {false}
             */
            active?: boolean;

            /** Enable or disable the specific layer objects to be visible.
             * @Default {true}
             */
            visible?: boolean;

            /** Enable or disable the specific layer objects to be visible on printing or exporting.
             * @Default {true}
             */
            print?: boolean;

            /** Enable or disable the interaction of the specific diagram objects.
             * @Default {false}
             */
            lock?: boolean;

            /** To Specify the collection of the object names belongs to the layer.
             * @Default {[]}
             */
            objects?: any[];
        }

        export interface PageSettings {

            /** Defines the maximum distance to be left between the object and the scroll bar to trigger auto scrolling
             * @Default {{ left: 15, top: 15, right: 15, bottom: 15 }}
             */
            autoScrollBorder?: any;

            /** Sets whether multiple pages can be created to fit all nodes and connectors
             * @Default {false}
             */
            multiplePage?: boolean;

            /** Defines the background color of diagram pages
             * @Default {#ffffff}
             */
            pageBackgroundColor?: string;

            /** Defines the page border color
             * @Default {#565656}
             */
            pageBorderColor?: string;

            /** Sets the border width of diagram pages
             * @Default {0}
             */
            pageBorderWidth?: number;

            /** Defines the height of a page
             * @Default {null}
             */
            pageHeight?: number;

            /** Defines the page margin
             * @Default {24}
             */
            pageMargin?: number;

            /** Sets the orientation of the page.
             * @Default {ej.datavisualization.Diagram.PageOrientations.Portrait}
             */
            pageOrientation?: ej.datavisualization.Diagram.PageOrientations|string;

            /** Defines the height of a diagram page
             * @Default {null}
             */
            pageWidth?: number;

            /** Defines the scrollable area of diagram. Applicable, if the scroll limit is &quot;limited&quot;.
             * @Default {null}
             */
            scrollableArea?: any;

            /** Defines the scrollable region of diagram.
             * @Default {ej.datavisualization.Diagram.ScrollLimit.Infinite}
             */
            scrollLimit?: ej.datavisualization.Diagram.ScrollLimit|string;

            /** Defines the draggable region of diagram elements.
             * @Default {ej.datavisualization.Diagram.BoundaryConstraints.Infinite}
             */
            boundaryConstraints?: ej.datavisualization.Diagram.BoundaryConstraints|string;

            /** Enables or disables the page breaks
             * @Default {false}
             */
            showPageBreak?: boolean;
        }

        export interface ScrollSettings {

            /** Allows to read the zoom value of diagram
             * @Default {0}
             */
            currentZoom?: number;

            /** Sets the horizontal scroll offset
             * @Default {0}
             */
            horizontalOffset?: number;

            /** Allows to extend the scrollable region that is based on the scroll limit
             * @Default {{left: 0, right: 0, top:0, bottom: 0}}
             */
            padding?: any;

            /** Sets the vertical scroll offset
             * @Default {0}
             */
            verticalOffset?: number;

            /** Allows to read the view port height of the diagram
             * @Default {0}
             */
            viewPortHeight?: number;

            /** Allows to read the view port width of the diagram
             * @Default {0}
             */
            viewPortWidth?: number;
        }

        export interface SelectedItemsUserHandle {

            /** Sets the horizontal alignment of the user handle
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontalAlignment?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** To set the margin of the user handle
             * @Default {ej.datavisualization.Diagram.Margin()}
             */
            margin?: any;

            /** Defines the name of the user handle
             */
            name?: string;

            /** Defines the background color of the user handle
             * @Default {#2382c3}
             */
            backgroundColor?: string;

            /** Sets the border color of the user handle
             * @Default {transparent}
             */
            borderColor?: string;

            /** Defines whether the user handle should be added, when more than one element is selected
             * @Default {false}
             */
            enableMultiSelection?: boolean;

            /** Sets the fraction/ratio(relative to node) that defines the position of the user handle
             * @Default {ej.datavisualization.Diagram.point(0.5, 1)}
             */
            offset?: any;

            /** Sets the stroke color of the user handle
             * @Default {transparent}
             */
            pathColor?: string;

            /** Defines the custom shape of the user handle
             */
            pathData?: string;

            /** Defines the position of the user handle
             * @Default {ej.datavisualization.Diagram.UserHandlePositions.BottomCenter}
             */
            position?: ej.datavisualization.Diagram.UserHandlePositions|string;

            /** Defines the size of the user handle
             * @Default {8}
             */
            size?: number;

            /** Defines the interactive behaviors of the user handle
             */
            tool?: any;

            /** Sets the vertical alignment of the user handle
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Center}
             */
            verticalAlignment?: ej.datavisualization.Diagram.VerticalAlignment|string;

            /** Defines the visibility of the user handle
             * @Default {true}
             */
            visible?: boolean;
        }

        export interface SelectedItems {

            /** A read only collection of the selected items
             * @Default {[]}
             */
            children?: any[];

            /** Controls the visibility of selector.
             * @Default {ej.datavisualization.Diagram.SelectorConstraints.All}
             */
            constraints?: ej.datavisualization.Diagram.SelectorConstraints|string;

            /** Defines a method that dynamically enables/ disables the interaction with multiple selection.
             * @Default {null}
             */
            getConstraints?: any;

            /** Sets the height of the selected items
             * @Default {0}
             */
            height?: number;

            /** Sets the x position of the selector
             * @Default {0}
             */
            offsetX?: number;

            /** Sets the y position of the selector
             * @Default {0}
             */
            offsetY?: number;

            /** Sets the angle to rotate the selected items
             * @Default {0}
             */
            rotateAngle?: number;

            /** Sets the angle to rotate the selected items. For tooltip properties, refer Tooltip
             * @Default {ej.datavisualization.Diagram.Tooltip()}
             */
            tooltip?: any;

            /** A collection of frequently used commands that will be added around the selector
             * @Default {[]}
             */
            userHandles?: SelectedItemsUserHandle[];

            /** Sets the width of the selected items
             * @Default {0}
             */
            width?: number;
        }

        export interface SerializationSettings {

            /** defines whether the default diagram properties can be serialized or not.
             * @Default {false}
             */
            preventDefaultValues?: boolean;
        }

        export interface RulerSettingsHorizontalRuler {

            /** Defines the number of intervals to be present on the each segment of the horizontal ruler.
             * @Default {5}
             */
            interval?: number;

            /** Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the horizontal ruler.
             * @Default {100}
             */
            segmentWidth?: number;

            /** Defines the method which used to position and arrange the tick elements of the horizontal ruler.
             * @Default {null}
             */
            arrangeTick?: any;

            /** Defines and sets the tick alignment of the ruler scale.
             * @Default {ej.datavisualization.Diagram.TickAlignment.RightOrBottom}
             */
            tickAlignment?: ej.datavisualization.Diagram.TickAlignment|string;

            /** Defines the color of the horizontal marker brush.
             * @Default {red}
             */
            markerColor?: string;

            /** Defines the width of the horizontal ruler.
             * @Default {null}
             */
            length?: number;

            /** Defines the height of the horizontal ruler.
             * @Default {25}
             */
            thickness?: number;
        }

        export interface RulerSettingsVerticalRuler {

            /** Defines the number of intervals to be present on the each segment of the vertical ruler.
             * @Default {5}
             */
            interval?: number;

            /** Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the vertical ruler.
             * @Default {100}
             */
            segmentWidth?: number;

            /** Defines the method which used to position and arrange the tick elements of the vertical ruler.
             * @Default {null}
             */
            arrangeTick?: any;

            /** Defines and sets the tick alignment of the ruler scale.
             * @Default {ej.datavisualization.Diagram.TickAlignment.RightOrBottom}
             */
            tickAlignment?: ej.datavisualization.Diagram.TickAlignment|string;

            /** Defines the color of the vertical marker brush.
             * @Default {red}
             */
            markerColor?: string;

            /** Defines the height of the vertical ruler.
             * @Default {null}
             */
            length?: number;

            /** Defines the width of the vertical ruler.
             * @Default {25}
             */
            thickness?: number;
        }

        export interface RulerSettings {

            /** Enables or disables both the horizontal and vertical ruler.
             * @Default {false}
             */
            showRulers?: boolean;

            /** Defines the appearance of horizontal ruler
             */
            horizontalRuler?: RulerSettingsHorizontalRuler;

            /** Defines the appearance of vertical ruler
             */
            verticalRuler?: RulerSettingsVerticalRuler;
        }

        export interface SnapSettingsHorizontalGridLines {

            /** Defines the line color of horizontal grid lines
             * @Default {lightgray}
             */
            lineColor?: string;

            /** Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
             */
            lineDashArray?: string;

            /** A pattern of lines and gaps that defines a set of horizontal gridlines
             * @Default {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
             */
            linesInterval?: any[];

            /** Specifies a set of intervals to snap the objects
             * @Default {[20]}
             */
            snapInterval?: any[];
        }

        export interface SnapSettingsVerticalGridLines {

            /** Defines the line color of horizontal grid lines
             * @Default {lightgray}
             */
            lineColor?: string;

            /** Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
             */
            lineDashArray?: string;

            /** A pattern of lines and gaps that defines a set of horizontal gridlines
             * @Default {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
             */
            linesInterval?: any[];

            /** Specifies a set of intervals to snap the objects
             * @Default {[20]}
             */
            snapInterval?: any[];
        }

        export interface SnapSettings {

            /** Enables or disables snapping nodes/connectors to objects
             * @Default {true}
             */
            enableSnapToObject?: boolean;

            /** Defines the appearance of horizontal gridlines
             */
            horizontalGridLines?: SnapSettingsHorizontalGridLines;

            /** Defines the angle by which the object needs to be snapped
             * @Default {5}
             */
            snapAngle?: number;

            /** Defines and sets the snapConstraints
             */
            snapConstraints?: ej.datavisualization.Diagram.SnapConstraints|string;

            /** Defines the minimum distance between the selected object and the nearest object
             * @Default {5}
             */
            snapObjectDistance?: number;

            /** Defines the appearance of horizontal gridlines
             */
            verticalGridLines?: SnapSettingsVerticalGridLines;
        }

        export interface TooltipAlignment {

            /** Defines the horizontal alignment of tooltip.
             * @Default {ej.datavisualization.Diagram.HorizontalAlignment.Center}
             */
            horizontal?: ej.datavisualization.Diagram.HorizontalAlignment|string;

            /** Defines the vertical alignment of tooltip.
             * @Default {ej.datavisualization.Diagram.VerticalAlignment.Bottom}
             */
            vertical?: ej.datavisualization.Diagram.VerticalAlignment|string;
        }

        export interface Tooltip {

            /** Aligns the tooltip around nodes/connectors
             */
            alignment?: TooltipAlignment;

            /** Sets the margin of the tooltip
             * @Default {{ left: 5, right: 5, top: 5, bottom: 5 }}
             */
            margin?: any;

            /** Defines whether the tooltip should be shown at the mouse position or around node.
             * @Default {ej.datavisualization.Diagram.RelativeMode.Object}
             */
            relativeMode?: ej.datavisualization.Diagram.RelativeMode|string;

            /** Sets the svg/html template to be bound with tooltip
             */
            templateId?: string;
        }
    }
    namespace Diagram {
        enum ImageAlignment  {
            //Scales the graphic content non-uniformly to the width and height of the diagram area
            None,
            //Used to align the image at the top left of diagram area
            XMinYMin,
            //Used to align the image at the left center of diagram area
            XMinYMid,
            //Used to align the image at the bottom left of diagram area
            XMinYMax,
            //Used to align the image at the top center of diagram area
            XMidYMin,
            //Used to align the image at the center of diagram area
            XMidYMid,
            //Used to align the image at the bottom center of diagram area
            XMidYMax,
            //Used to align the image at the top right of diagram area/node
            XMaxYMin,
            //Used to align the image at the right center of diagram area/node
            XMaxYMid,
            //Used to align the image at the bottom right of diagram area/node
            XMaxYMax,
        }
    }
    namespace Diagram {
        enum BridgeDirection {
            //Used to set the direction of line bridges as left
            Left,
            //Used to set the direction of line bridges as right
            Right,
            //Used to set the direction of line bridges as top
            Top,
            //Used to set the direction of line bridges as bottom
            Bottom,
        }
    }
    namespace Diagram {
        enum Keys {
            //No key pressed.
            None,
            //The A key.
            A,
            //The B key.
            B,
            //The C key.
            C,
            //The D Key.
            D,
            //The E key.
            E,
            //The F key.
            F,
            //The G key.
            G,
            //The H Key.
            H,
            //The I key.
            I,
            //The J key.
            J,
            //The K key.
            K,
            //The L Key.
            L,
            //The M key.
            M,
            //The N key.
            N,
            //The O key.
            O,
            //The P Key.
            P,
            //The Q key.
            Q,
            //The R key.
            R,
            //The S key.
            S,
            //The T Key.
            T,
            //The U key.
            U,
            //The V key.
            V,
            //The W key.
            W,
            //The X key.
            X,
            //The Y key.
            Y,
            //The Z key.
            Z,
            //The 0 key.
            Number0,
            //The 1 key.
            Number1,
            //The 2 key.
            Number2,
            //The 3 key.
            Number3,
            //The 4 key.
            Number4,
            //The 5 key.
            Number5,
            //The 6 key.
            Number6,
            //The 7 key.
            Number7,
            //The 8 key.
            Number8,
            //The 9 key.
            Number9,
            //The LEFT ARROW key.
            Left,
            //The UP ARROW key.
            Up,
            //The RIGHT ARROW key.
            Right,
            //The DOWN ARROW key.
            Down,
            //The ESC key.
            Escape,
            //The DEL key.
            Delete,
            //The TAB key.
            Tab,
            //The ENTER key.
            Enter,
        }
    }
    namespace Diagram {
        enum KeyModifiers {
            //No modifiers are pressed.
            None,
            //The ALT key.
            Alt,
            //The CTRL key.
            Control,
            //The SHIFT key.
            Shift,
        }
    }
    namespace Diagram {
        enum ConnectorConstraints {
            //Disable all connector Constraints
            None,
            //Enables connector to be selected
            Select,
            //Enables connector to be Deleted
            Delete,
            //Enables connector to be Dragged
            Drag,
            //Enables connectors source end to be selected
            DragSourceEnd,
            //Enables connectors target end to be selected
            DragTargetEnd,
            //Enables control point and end point of every segment in a connector for editing
            DragSegmentThumb,
            //Enables bridging to the connector
            Bridging,
            //Enables label of node to be Dragged
            DragLabel,
            //Inherit the bridging option defined in the diagram constraints.
            InheritBridging,
            //Allows the object to drop over the connector.
            AllowDrop,
            //Inherit the tooltip option defined in the diagram constraints.
            InheritTooltip,
            //Enables user interaction to the connector
            PointerEvents,
            //Enables the contrast between clean edges of connector over rendering speed and geometric precision
            CrispEdges,
            //Enables the contrast between clean edges of connector over rendering speed and geometric precision
            InheritCrispEdges,
            //Enables the contrast between clean edges of connector over rendering speed and geometric precision
            DragLimit,
            //Enables or disables bridging over a connector, if bridging constraints disabled..
            BridgeObstacle,
            //Enables connector to be selected and dragged.
            Interaction,
            //Enables the Routing for an connector
            Routing,
            //Inherit the routing option defined in the diagram constraints.
            InheritRouting,
            //Enables all constraints
            Default,
        }
    }
    namespace Diagram {
        enum HorizontalAlignment {
            //Used to align text horizontally on left side of node/connector
            Left,
            //Used to align text horizontally on center of node/connector
            Center,
            //Used to align text horizontally on right side of node/connector
            Right,
        }
    }
    namespace Diagram {
        enum Alignment {
            //Used to align the label either top or left(before) of the connector segment
            Before,
            //Used to align the label at center of the connector segment
            Center,
            //Used to align the label either bottom or right(after) of the connector segment
            After,
        }
    }
    namespace Diagram {
        enum LabelConstraints {
            //Disable all label Constraints
            None,
            //Enables label to be selected
            Selectable,
            //Enables label to be Dragged
            Draggable,
            //Enables label to be Resized
            Resizable,
            //Enables label to be Rotated
            Rotatable,
            //Enables all label constraints
            All,
        }
    }
    namespace Diagram {
        enum LabelRelativeMode {
            //Sets the relativeMode as SegmentPath
            SegmentPath,
            //Sets the relativeMode as SegmentBounds
            SegmentBounds,
        }
    }
    namespace Diagram {
        enum Segments {
            //Used to specify the lines as Straight
            Straight,
            //Used to specify the lines as Orthogonal
            Orthogonal,
            //Used to specify the lines as Bezier
            Bezier,
        }
    }
    namespace Diagram {
        enum ConnectorShapes {
            //Used to specify connector type as BPMN
            BPMN,
            //Used to specify connector type as UMLClassifier
            UMLClassifier,
            //Used to specify connector type as UMLActivity
            UMLActivity,
        }
    }
    namespace Diagram {
        enum BPMNFlows {
            //Used to specify the Sequence flow in a BPMN Process
            Sequence,
            //Used to specify the Association flow in a BPMN Process
            Association,
            //Used to specify the Message flow in a BPMN Process
            Message,
        }
    }
    namespace Diagram {
        enum AssociationFlows {
            //Used to notate default association in a BPMN Process
            Default,
            //Used to notate directional association in a BPMN Process
            Directional,
            //User to notate bi-directional association in a BPMN Process
            BiDirectional,
        }
    }
    namespace Diagram {
        enum BPMNMessageFlows {
            //Used to notate the default message flow in a BPMN Process
            Default,
            //Used to notate the instantiating message flow in a BPMN Process
            InitiatingMessage,
            //Used to notate the non-instantiating message flow in a BPMN Process
            NonInitiatingMessage,
        }
    }
    namespace Diagram {
        enum BPMNSequenceFlows {
            //Used to notate the normal sequence flow in a BPMN Process
            Normal,
            //Used to notate the conditional sequence flow in a BPMN Process
            Conditional,
            //Used to notate the default sequence flow in a BPMN Process
            Default,
        }
    }
    namespace Diagram {
        enum ClassifierShapes {
            //Used to define a Class
            Class,
            //Used to define an Interface
            Interface,
            //Used to define an Enumeration
            Enumeration,
            //Used to notate association in UML Class Diagram
            Association,
            //Used to notate aggregation in a UML Class Diagram
            Aggregation,
            //Used to notate composition in a UML Class Diagram
            Composition,
            //Used to notate dependency in a UML Class Diagram
            Dependency,
            //Used to notate inheritance in a UML Class Diagram
            Inheritance,
        }
    }
    namespace Diagram {
        enum Multiplicity {
            //Each entity instance is related to a single instance of another entity
            OneToOne,
            //An entity instance can be related to multiple instances of the other entities
            OneToMany,
            //Multiple instances of an entity can be related to a single instance of the other entity
            ManyToOne,
            //The entity instances can be related to multiple instances of each other
            ManyToMany,
        }
    }
    namespace Diagram {
        enum UMLActivityFlow {
            //Defines a activity flow as Object in UML Activity Diagram
            Object,
            //Defines a activity flow as Control in UML Activity Diagram
            Control,
            //Defines a activity flow as Exception in UML Activity Diagram
            Exception,
        }
    }
    namespace Diagram {
        enum DecoratorShapes {
            //Used to set decorator shape as none
            None,
            //Used to set decorator shape as Arrow
            Arrow,
            //Used to set decorator shape as Open Arrow
            OpenArrow,
            //Used to set decorator shape as Circle
            Circle,
            //Used to set decorator shape as Diamond
            Diamond,
            //Used to set decorator shape as path
            Path,
        }
    }
    namespace Diagram {
        enum VerticalAlignment {
            //Used to align text Vertically on left side of node/connector
            Top,
            //Used to align text Vertically on center of node/connector
            Center,
            //Used to align text Vertically on bottom of node/connector
            Bottom,
        }
    }
    namespace Diagram {
        enum DiagramConstraints {
            //Disables all DiagramConstraints
            None,
            //Enables/Disables interaction done with the help of API methods
            APIUpdate,
            //Enables/Disables UserInteraction
            UserInteraction,
            //Enables/Disables PageEditing
            PageEditable,
            //Enables/Disables Bridging
            Bridging,
            //Enables/Disables Zooming
            Zoomable,
            //Enables/Disables panning on horizontal axis
            PannableX,
            //Enables/Disables panning on vertical axis
            PannableY,
            //Enables/Disables Panning
            Pannable,
            //Enables/Disables undo actions
            Undoable,
            //Enables/Disables the sharp edges
            CrispEdges,
            //Enables/Disables the Diagram size updation on the window resize function
            Resizable,
            //Enables/Disables the Zooming of labels text editor
            ZoomTextEditor,
            //Enables/Disables the drag and drop of element from one diagram to the other
            FloatElements,
            //Enables the routing for an connector in diagram
            Routing,
            //Enables all Constraints
            Default,
        }
    }
    namespace Diagram {
        enum LabelRenderingMode {
            //Sets the labelRenderingMode as HTML
            HTML,
            //Sets the labelRenderingMode as SVG
            SVG,
        }
    }
    namespace Diagram {
        enum LayoutOrientations {
            //Used to set LayoutOrientation from top to bottom
            TopToBottom,
            //Used to set LayoutOrientation from bottom to top
            BottomToTop,
            //Used to set LayoutOrientation from left to right
            LeftToRight,
            //Used to set LayoutOrientation from right to left
            RightToLeft,
        }
    }
    namespace Diagram {
        enum LayoutTypes {
            //Used not to set any specific layout
            None,
            //Used to set layout type as hierarchical layout
            HierarchicalTree,
            //Used to set layout type as organnizational chart
            OrganizationalChart,
            //Used to set layout type as radial tree
            RadialTree,
            //Used to set layout type as symmetric layout
            SymmetricLayout,
        }
    }
    namespace Diagram {
        enum BPMNActivity {
            //Used to set BPMN Activity as None
            None,
            //Used to set BPMN Activity as Task
            Task,
            //Used to set BPMN Activity as SubProcess
            SubProcess,
        }
    }
    namespace Diagram {
        enum BPMNAnnotationDirection {
            //Used to set the direction of BPMN Annotation as left
            Left,
            //Used to set the direction of BPMN Annotation as right
            Right,
            //Used to set the direction of BPMN Annotation as top
            Top,
            //Used to set the direction of BPMN Annotation as bottom
            Bottom,
        }
    }
    namespace Diagram {
        enum IconShapes {
            //Used to set collapse icon shape as none
            None,
            //Used to set collapse icon shape as Arrow(Up/Down)
            Arrow,
            //Used to set collapse icon shape as Plus
            Plus,
            //Used to set collapse icon shape as Minus
            Minus,
            //Used to set collapse icon shape as path
            Path,
            //Used to set icon shape as template
            Template,
            //Used to set icon shape as image
            Image,
        }
    }
    namespace Diagram {
        enum NodeConstraints {
            //Disable all node Constraints
            None,
            //Enables node to be selected
            Select,
            //Enables node to be Deleted
            Delete,
            //Enables node to be Dragged
            Drag,
            //Enables node to be Rotated
            Rotate,
            //Enables node to be connected
            Connect,
            //Enables node to be resize north east
            ResizeNorthEast,
            //Enables node to be resize east
            ResizeEast,
            //Enables node to be resize south east
            ResizeSouthEast,
            //Enables node to be resize south
            ResizeSouth,
            //Enables node to be resize south west
            ResizeSouthWest,
            //Enables node to be resize west
            ResizeWest,
            //Enables node to be resize north west
            ResizeNorthWest,
            //Enables node to be resize north
            ResizeNorth,
            //Enables node to be Resized
            Resize,
            //Enables shadow
            Shadow,
            //Enables label of node to be Dragged
            DragLabel,
            //Enables panning should be done while node dragging
            AllowPan,
            //Enables Proportional resize for node
            AspectRatio,
            //Enables the user interaction with the node
            PointerEvents,
            //Enables contrast between clean edges for the node over rendering speed and geometric precision
            CrispEdges,
            //Enables default node interactions such as select,delete,drag,rotate,resize,connect,inheritCrispEdges and inheritTooltip
            Default,
        }
    }
    namespace Diagram {
        enum ContainerType {
            //Sets the container type as Canvas
            Canvas,
            //Sets the container type as Stack
            Stack,
        }
    }
    namespace Diagram {
        enum BPMNDataObjects {
            //Used to notate the Input type BPMN data object
            Input,
            //Used to notate the Output type BPMN data object
            Output,
            //Used to set BPMN data object type as None
            None,
        }
    }
    namespace Diagram {
        enum BPMNEvents {
            //Used to set BPMN Event as Start
            Start,
            //Used to set BPMN Event as Intermediate
            Intermediate,
            //Used to set BPMN Event as End
            End,
            //Used to set BPMN Event as NonInterruptingStart
            NonInterruptingStart,
            //Used to set BPMN Event as NonInterruptingIntermediate
            NonInterruptingIntermediate,
            //Used to set BPMN Event as ThrowingIntermediate
            ThrowingIntermediate,
        }
    }
    namespace Diagram {
        enum BPMNGateways {
            //Used to set BPMN Gateway as None
            None,
            //Used to set BPMN Gateway as Exclusive
            Exclusive,
            //Used to set BPMN Gateway as Inclusive
            Inclusive,
            //Used to set BPMN Gateway as Parallel
            Parallel,
            //Used to set BPMN Gateway as Complex
            Complex,
            //Used to set BPMN Gateway as EventBased
            EventBased,
            //Used to set BPMN Gateway as ExclusiveEventBased
            ExclusiveEventBased,
            //Used to set BPMN Gateway as ParallelEventBased
            ParallelEventBased,
        }
    }
    namespace Diagram {
        enum LabelEditMode {
            //Used to set label edit mode as edit
            Edit,
            //Used to set label edit mode as view
            View,
        }
    }
    namespace Diagram {
        enum OverflowType {
            //Set overflow Type as ellipsis
            Ellipsis,
            //Set overflow Type  as Clip
            Clip,
        }
    }
    namespace Diagram {
        enum TextAlign {
            //Used to align text on left side of node/connector
            Left,
            //Used to align text on center of node/connector
            Center,
            //Used to align text on Right side of node/connector
            Right,
        }
    }
    namespace Diagram {
        enum TextDecorations {
            //Used to set text decoration of the label as Underline
            Underline,
            //Used to set text decoration of the label as Overline
            Overline,
            //Used to set text decoration of the label as LineThrough
            LineThrough,
            //Used to set text decoration of the label as None
            None,
        }
    }
    namespace Diagram {
        enum TextWrapping {
            //Disables wrapping
            NoWrap,
            //Enables Line-break at normal word break points
            Wrap,
            //Enables Line-break at normal word break points with longer word overflows
            WrapWithOverflow,
        }
    }
    namespace Diagram {
        enum PortConstraints {
            //Disable all constraints
            None,
            //Enables connections with connector
            Connect,
            //Enables to create the connection when mouse hover on the port.
            ConnectOnDrag,
        }
    }
    namespace Diagram {
        enum PortShapes {
            //Used to set port shape as X
            X,
            //Used to set port shape as Circle
            Circle,
            //Used to set port shape as Square
            Square,
            //Used to set port shape as Path
            Path,
        }
    }
    namespace Diagram {
        enum PortVisibility {
            //Set the port visibility as Visible
            Visible,
            //Set the port visibility as Hidden
            Hidden,
            //Port get visible when hover connector on node
            Hover,
            //Port gets visible when connect connector to node
            Connect,
            //Specifies the port visibility as default
            Default,
        }
    }
    namespace Diagram {
        enum BasicShapes  {
            //Used to specify node Shape as Rectangle
            Rectangle,
            //Used to specify node Shape as Ellipse
            Ellipse,
            //Used to specify node Shape as Path
            Path,
            //Used to specify node Shape as Polygon
            Polygon,
            //Used to specify node Shape as Triangle
            Triangle,
            //Used to specify node Shape as Plus
            Plus,
            //Used to specify node Shape as Star
            Star,
            //Used to specify node Shape as Pentagon
            Pentagon,
            //Used to specify node Shape as Heptagon
            Heptagon,
            //Used to specify node Shape as Octagon
            Octagon,
            //Used to specify node Shape as Trapezoid
            Trapezoid,
            //Used to specify node Shape as Decagon
            Decagon,
            //Used to specify node Shape as RightTriangle
            RightTriangle,
            //Used to specify node Shape as Cylinder
            Cylinder,
        }
    }
    namespace Diagram {
        enum FlowShapes  {
            //Used to specify node Shape as Process
            Process,
            //Used to specify node Shape as Decision
            Decision,
            //Used to specify node Shape as Document
            Document,
            //Used to specify node Shape as PreDefinedProcess
            PreDefinedProcess,
            //Used to specify node Shape as Terminator
            Terminator,
            //Used to specify node Shape as PaperTap
            PaperTap,
            //Used to specify node Shape as DirectData
            DirectData,
            //Used to specify node Shape as SequentialData
            SequentialData,
            //Used to specify node Shape as Sort
            Sort,
            //Used to specify node Shape as MultiDocument
            MultiDocument,
            //Used to specify node Shape as Collate
            Collate,
            //Used to specify node Shape as SummingJunction
            SummingJunction,
            //Used to specify node Shape as Or
            Or,
            //Used to specify node Shape as InternalStorage
            InternalStorage,
            //Used to specify node Shape as Extract
            Extract,
            //Used to specify node Shape as ManualOperation
            ManualOperation,
            //Used to specify node Shape as Merge
            Merge,
            //Used to specify node Shape as OffPageReference
            OffPageReference,
            //Used to specify node Shape as SequentialAccessStorage
            SequentialAccessStorage,
            //Used to specify node Shape as Annotation1
            Annotation1,
            //Used to specify node Shape as Annotation2
            Annotation2,
            //Used to specify node Shape as Data
            Data,
            //Used to specify node Shape as Card
            Card,
        }
    }
    namespace Diagram {
        enum BPMNShapes  {
            //Used to specify node Shape as Event
            Event,
            //Used to specify node Shape as Gateway
            Gateway,
            //Used to specify node Shape as Message
            Message,
            //Used to specify node Shape as DataObject
            DataObject,
            //Used to specify node Shape as DataSource
            DataSource,
            //Used to specify node Shape as Activity
            Activity,
            //Used to specify node Shape as Group
            Group,
        }
    }
    namespace Diagram {
        enum UMLActivityShapes {
            //Used to set UML ActivityShapes as Action
            Action,
            //Used to set UML ActivityShapes as Decision
            Decision,
            //Used to set UML ActivityShapes as MergeNode
            MergeNode,
            //Used to set UML ActivityShapes as InitialNode
            InitialNode,
            //Used to set UML ActivityShapes as FinalNode
            FinalNode,
            //Used to set UML ActivityShapes as ForkNode
            ForkNode,
            //Used to set UML ActivityShapes as JoinNode
            JoinNode,
            //Used to set UML ActivityShapes as TimeEvent
            TimeEvent,
            //Used to set UML ActivityShapes as AcceptingEvent
            AcceptingEvent,
            //Used to set UML ActivityShapes as SendSignal
            SendSignal,
            //Used to set UML ActivityShapes as ReceiveSignal
            ReceiveSignal,
            //Used to set UML ActivityShapes as StructuredNode
            StructuredNode,
            //Used to set UML ActivityShapes as Note
            Note,
        }
    }
    namespace Diagram {
        enum BPMNBoundary {
            //Used to set BPMN SubProcess's Boundary as Default
            Default,
            //Used to set BPMN SubProcess's Boundary as Call
            Call,
            //Used to set BPMN SubProcess's Boundary as Event
            Event,
        }
    }
    namespace Diagram {
        enum BPMNLoops {
            //Used to set BPMN Activity's Loop as None
            None,
            //Used to set BPMN Activity's Loop as Standard
            Standard,
            //Used to set BPMN Activity's Loop as ParallelMultiInstance
            ParallelMultiInstance,
            //Used to set BPMN Activity's Loop as SequenceMultiInstance
            SequenceMultiInstance,
        }
    }
    namespace Diagram {
        enum BPMNSubProcessTypes {
            //Used to set BPMN SubProcess type as None
            None,
            //Used to set BPMN SubProcess type as Transaction
            Transaction,
            //Used to set BPMN SubProcess type as Event
            Event,
        }
    }
    namespace Diagram {
        enum BPMNTasks {
            //Used to set BPMN Task Type as None
            None,
            //Used to set BPMN Task Type as Service
            Service,
            //Used to set BPMN Task Type as Receive
            Receive,
            //Used to set BPMN Task Type as Send
            Send,
            //Used to set BPMN Task Type as InstantiatingReceive
            InstantiatingReceive,
            //Used to set BPMN Task Type as Manual
            Manual,
            //Used to set BPMN Task Type as BusinessRule
            BusinessRule,
            //Used to set BPMN Task Type as User
            User,
            //Used to set BPMN Task Type as Script
            Script,
            //Used to set BPMN Task Type as Parallel
            Parallel,
        }
    }
    namespace Diagram {
        enum BPMNTriggers {
            //Used to set Event Trigger as None
            None,
            //Used to set Event Trigger as Message
            Message,
            //Used to set Event Trigger as Timer
            Timer,
            //Used to set Event Trigger as Escalation
            Escalation,
            //Used to set Event Trigger as Link
            Link,
            //Used to set Event Trigger as Error
            Error,
            //Used to set Event Trigger as Compensation
            Compensation,
            //Used to set Event Trigger as Signal
            Signal,
            //Used to set Event Trigger as Multiple
            Multiple,
            //Used to set Event Trigger as Parallel
            Parallel,
            //Used to set Event Trigger as Conditional
            Conditional,
            //Used to set Event Trigger as Terminate
            Terminate,
            //Used to set Event Trigger as Cancel
            Cancel,
        }
    }
    namespace Diagram {
        enum Shapes {
            //Used to specify node type as Text
            Text,
            //Used to specify node type as Image
            Image,
            //Used to specify node type as HTML
            Html,
            //Used to specify node type as Native
            Native,
            //Used to specify node type as Basic
            Basic,
            //Used to specify node type as Flow
            Flow,
            //Used to specify node type as BPMN
            BPMN,
            //Used to specify node type as UMLClassifier
            UMLClassifier,
            //Used to specify node type as UMLActivity
            UMLActivity,
        }
    }
    namespace Diagram {
        enum PageOrientations {
            //Used to set orientation as Landscape
            Landscape,
            //Used to set orientation as portrait
            Portrait,
        }
    }
    namespace Diagram {
        enum ScrollLimit {
            //Used to set scrollLimit as Infinite
            Infinite,
            //Used to set scrollLimit as Diagram
            Diagram,
            //Used to set scrollLimit as Limited
            Limited,
        }
    }
    namespace Diagram {
        enum BoundaryConstraints {
            //Used to set boundaryConstraints as Infinite
            Infinite,
            //Used to set boundaryConstraints as Diagram
            Diagram,
            //Used to set boundaryConstraints as Page
            Page,
        }
    }
    namespace Diagram {
        enum SelectorConstraints {
            //Hides the selector
            None,
            //Sets the visibility of rotation handle as visible
            Rotator,
            //Sets the visibility of resize handles as visible
            Resizer,
            //Sets the visibility of user handles as visible
            UserHandles,
            //Enables the default tooltip of the diagram control.
            Tooltip,
            //Enables dragging while selecting the multiple nodes and click on the empty region of the selection rectangle.
            DragOnEmptySpace,
            //Show/Hide the selection handles when it is overlapped with each other's.
            AutoHideThumbs,
            //Sets the visibility of all selection handles as visible
            All,
        }
    }
    namespace Diagram {
        enum UserHandlePositions  {
            //Set the position of the userhandle as topleft
            TopLeft,
            //Set the position of the userhandle as topcenter
            TopCenter,
            //Set the position of the userhandle as topright
            TopRight,
            //Set the position of the userhandle as middleleft
            MiddleLeft,
            //Set the position of the userhandle as middleright
            MiddleRight,
            //Set the position of the userhandle as bottomleft
            BottomLeft,
            //Set the position of the userhandle as bottomcenter
            BottomCenter,
            //Set the position of the userhandle as bottom right
            BottomRight,
        }
    }
    namespace Diagram {
        enum TickAlignment {
            //Align the ruler scale either left or top position of the ruler.
            LeftOrTop,
            //Align the ruler scale either right or bottom position of the ruler.
            RightOrBottom,
        }
    }
    namespace Diagram {
        enum SnapConstraints {
            //Enables node to be snapped to horizontal gridlines
            None,
            //Enables node to be snapped to vertical gridlines
            SnapToHorizontalLines,
            //Enables node to be snapped to horizontal gridlines
            SnapToVerticalLines,
            //Enables node to be snapped to gridlines
            SnapToLines,
            //Enable horizontal lines
            ShowHorizontalLines,
            //Enable vertical lines
            ShowVerticalLines,
            //Enable both horizontal and vertical lines
            ShowLines,
            //Enable all the constraints
            All,
        }
    }
    namespace Diagram {
        enum Tool {
            //Disables all Tools
            None,
            //Enables/Disables SingleSelect tool
            SingleSelect,
            //Enables/Disables MultiSelect tool
            MultipleSelect,
            //Enables/Disables ZoomPan tool
            ZoomPan,
            //Enables/Disables DrawOnce tool
            DrawOnce,
            //Enables/Disables ContinuousDraw tool
            ContinuesDraw,
        }
    }
    namespace Diagram {
        enum RelativeMode {
            //Shows tooltip around the node
            Object,
            //Shows tooltip at the mouse position
            Mouse,
        }
    }
    namespace Diagram {
        enum FileFormats {
            //Used to export the diagram into JPG format.
            JPG,
            //Used to export the diagram into PNG format.
            PNG,
            //Used to export the diagram into BMP format.
            BMP,
            //Used to export the diagram into SVG format.
            SVG,
        }
    }
    namespace Diagram {
        enum ExportModes {
            //Used to export the diagram as a file.
            Download,
            //Used to export the diagram as raw data.
            Data,
        }
    }
    namespace Diagram {
        enum Region {
            //Used to export the content of the diagram only.
            Content,
            //Used to export the page region of the diagram.
            PageSettings,
        }
    }
    namespace Diagram {
        enum Stretch {
            //The diagram content preserves its original size.
            None,
            //The diagram content is resized to fill the destination dimensions. The aspect ratio is not preserved.
            Fill,
            //The diagram content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
            Uniform,
            //The diagram content is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the
            //source, the source content is clipped to fit in the destination dimensions.
            UniformToFill,
        }
    }
    namespace Diagram {
        enum FitMode {
            //Used to fit the diagram content based on page size.
            Page,
            //Used to fit the diagram content based on diagram width.
            Width,
            //Used to fit the diagram content based on diagram height.
            Height,
        }
    }
    namespace Diagram {
        enum ZoomCommand {
            //Used to zoom in the Diagram
            ZoomIn,
            //Used to zoom out the diagram
            ZoomOut,
        }
    }
    namespace Diagram {
        enum ActiveTool {
            //Set the default Tool
            None,
            //Activate the port tool to drag when the mouse is moved over the port
            Drag,
            //Activate the draw tool to draw when the mouse is moved over the port
            Draw,
        }
    }

    class HeatMap extends ej.Widget {
        static fn: HeatMap;
        constructor(element: JQuery | Element, options?: HeatMap.Model);
        static Locale: any;
        model: HeatMap.Model;
        defaults: HeatMap.Model;
    }
    export namespace HeatMap {

        export interface Model {

            /** Specifies the width of the heat map.
             * @Default {null}
             */
            width?: any;

            /** Specifies the width of the heat map.
             * @Default {null}
             */
            height?: any;

            /** Specifies the name of the heat map.
             * @Default {null}
             */
            id?: number;

            /** Enables or disables tooltip of heatmap
             * @Default {true}
             */
            showTooltip?: boolean;

            /** Defines the tooltip that should be shown when the mouse hovers over rows/columns.
             */
            tooltipSettings?: TooltipSettings;

            /** Specifies the source data of the heat map.
             * @Default {[]}
             */
            itemsSource?: any;

            /** Specifies the property of the heat map cell.
             * @Default {Null}
             */
            heatMapCell?: HeatMapCell;

            /** Specifies can enable responsive mode or not for heat map.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies whether the virtualization can be enable or not.
             * @Default {false}
             */
            enableVirtualization?: boolean;

            /** Specifies the default column properties for all the column style not specified in column properties.
             * @Default {[]}
             */
            defaultColumnStyle?: DefaultColumnStyle;

            /** Specifies the no of legends can sync with heat map.
             * @Default {[]}
             */
            legendCollection?: any[];

            /** Specifies the property and display value of the heat map column.
             * @Default {[]}
             */
            itemsMapping?: ItemsMapping;

            /** Specifies the color values of the heat map column data.
             * @Default {[]}
             */
            colorMappingCollection?: ColorMappingCollection[];

            /** Triggered when the mouse over on the cell.
             */
            cellMouseOver?(e: CellMouseOverEventArgs): void;

            /** Triggered when the mouse over on the cell.
             */
            cellMouseEnter?(e: CellMouseEnterEventArgs): void;

            /** Triggered when the mouse over on the cell.
             */
            cellMouseLeave?(e: CellMouseLeaveEventArgs): void;

            /** Triggered when the mouse over on the cell.
             */
            cellSelected?(e: CellSelectedEventArgs): void;
        }

        export interface CellMouseOverEventArgs {

            /** Value displayed on the cell
             */
            cellValue?: string;

            /** Returns the HeatMap cell data
             */
            source?: any;

            /** Returns the specific HeatMap cell
             */
            cell?: any;
        }

        export interface CellMouseEnterEventArgs {

            /** Value displayed on the cell
             */
            cellValue?: string;

            /** Returns the HeatMap cell data
             */
            source?: any;

            /** Returns the specific HeatMap cell
             */
            cell?: any;
        }

        export interface CellMouseLeaveEventArgs {

            /** Value displayed on the cell
             */
            cellValue?: string;

            /** Returns the HeatMap cell data
             */
            source?: any;

            /** Returns the specific HeatMap cell
             */
            cell?: any;
        }

        export interface CellSelectedEventArgs {

            /** Value displayed on the cell
             */
            cellValue?: string;

            /** Returns the HeatMap cell data
             */
            source?: any;

            /** Returns the specific HeatMap cell
             */
            cell?: any;
        }

        export interface TooltipSettingsPositionTarget {

            /** Sets the arrow position again popup based on horizontal(x) value
             * @Default {center}
             */
            horizontal?: ej.datavisualization.HeatMap.Horizontal|string;

            /** Sets the arrow position again popup based on vertical(y) value
             * @Default {top}
             */
            vertical?: ej.datavisualization.HeatMap.Vertical|string;
        }

        export interface TooltipSettingsPositionStem {

            /** Sets the arrow position again popup based on horizontal(x) value
             * @Default {center}
             */
            horizontal?: ej.datavisualization.HeatMap.Horizontal|string;

            /** Sets the arrow position again popup based on vertical(y) value
             * @Default {bottom}
             */
            vertical?: ej.datavisualization.HeatMap.Vertical|string;
        }

        export interface TooltipSettingsPosition {

            /** Sets the Tooltip position against target.
             */
            target?: TooltipSettingsPositionTarget;

            /** Sets the arrow position again popup.
             */
            stem?: TooltipSettingsPositionStem;
        }

        export interface TooltipSettingsAnimation {

            /** Defines the animation effect for the tooltip that should be shown when the mouse hovers over rows/columns.
             * @Default {none}
             */
            effect?: ej.datavisualization.HeatMap.Effect|string;

            /** Defines the animation speed for the tooltip that should be shown when the mouse hovers over rows/columns.
             * @Default {0}
             */
            speed?: number;
        }

        export interface TooltipSettings {

            /** Defines the tooltip that should be shown when the mouse hovers over rows/columns.
             * @Default {null}
             */
            templateId?: string;

            /** Defines the tooltip of associate that should be shown when the mouse hovers over rows/columns.
             * @Default {mouseFollow}
             */
            associate?: ej.datavisualization.HeatMap.Associate|string;

            /** Enables/ disables the balloon for the tooltip to be shown
             * @Default {true}
             */
            isBalloon?: boolean;

            /** Defines various attributes of the Tooltip position
             */
            position?: TooltipSettingsPosition;

            /** Defines the tooltip to be triggered.
             * @Default {hover}
             */
            trigger?: ej.datavisualization.HeatMap.Trigger|string;

            /** Defines the animation for the tooltip that should be shown when the mouse hovers over rows/columns.
             */
            animation?: TooltipSettingsAnimation;
        }

        export interface HeatMapCell {

            /** Specifies whether the cell content can be visible or not.
             * @Default {ej.HeatMap.CellVisibility.Visible}
             */
            showContent?: ej.datavisualization.HeatMap.CellVisibility|string;

            /** Specifies whether the cell color can be visible or not.
             * @Default {true}
             */
            showColor?: boolean;
        }

        export interface DefaultColumnStyle {

            /** Specifies the alignment mode of the heat map column.
             * @Default {ej.HeatMap.TextAlign.Center}
             */
            textAlign?: any;

            /** Specifies the template id of the heat map column header.
             */
            headerTemplateID?: string;

            /** Specifies the template id of all individual cell data of the heat map.
             */
            templateID?: string;
        }

        export interface ItemsMappingColumnStyle {

            /** Specifies the width of the heat map column.
             * @Default {0}
             */
            width?: number;

            /** Specifies the text align mode of the heat map column.
             * @Default {ej.HeatMap.TextAlign.Center}
             */
            textAlign?: string;

            /** Specifies the template id of the column header.
             */
            headerTemplateID?: string;

            /** Specifies the template id of all individual cell data.
             */
            templateID?: string;
        }

        export interface ItemsMappingColumn {

            /** Specifies the name of the column or row.
             */
            propertyName?: string;

            /** Specifies the value of the column or row.
             */
            displayName?: string;
        }

        export interface ItemsMappingRow {

            /** Specifies the name of the column or row.
             */
            propertyName?: string;

            /** Specifies the value of the column or row.
             */
            displayName?: string;
        }

        export interface ItemsMappingValue {

            /** Specifies the name of the column or row.
             */
            propertyName?: string;

            /** Specifies the value of the column or row.
             */
            displayName?: string;
        }

        export interface ItemsMappingHeaderMapping {

            /** Specifies the name of the column or row.
             */
            propertyName?: string;

            /** Specifies the value of the column or row.
             */
            displayName?: string;

            /** Specifies the property and display value of the header.
             * @Default {null}
             */
            columnStyle?: any;
        }

        export interface ItemsMapping {

            /** Column settings for the individual heat map column.
             * @Default {null}
             */
            columnStyle?: ItemsMappingColumnStyle;

            /** Specifies the property and display value of the column.
             * @Default {null}
             */
            column?: ItemsMappingColumn;

            /** Specifies the row property and display value of the heat map.
             * @Default {null}
             */
            row?: ItemsMappingRow;

            /** Specifies the property and display value of the column value.
             * @Default {null}
             */
            value?: ItemsMappingValue;

            /** Specifies the property and display value of the header.
             * @Default {null}
             */
            headerMapping?: ItemsMappingHeaderMapping;

            /** Specifies the property and display value of the collection of column.
             * @Default {[]}
             */
            columnMapping?: any[];
        }

        export interface ColorMappingCollectionLabel {

            /** Enables/disables the bold style of the heat map label.
             * @Default {false}
             */
            bold?: boolean;

            /** Enables/disables the italic style of the heat map label.
             * @Default {false}
             */
            italic?: boolean;

            /** specifies the text value of the heat map label.
             */
            text?: string;

            /** Specifies the text style of the heat map label.
             * @Default {ej.HeatMap.TextDecoration.None}
             */
            textDecoration?: ej.datavisualization.HeatMap.TextDecoration|string;

            /** Specifies the font size of the heat map label.
             * @Default {10}
             */
            fontSize?: number;

            /** Specifies the font family of the heat map label.
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specifies the font color of the heat map label.
             * @Default {black}
             */
            fontColor?: string;
        }

        export interface ColorMappingCollection {

            /** Specifies the color of the heat map column data.
             * @Default {white}
             */
            color?: string;

            /** Specifies the color values of the heat map column data.
             * @Default {0}
             */
            value?: number;

            /** Specifies the label properties of the heat map color.
             * @Default {null}
             */
            label?: ColorMappingCollectionLabel;
        }
    }
    namespace HeatMap {
        enum Associate {
            //Used to set the associate of tooltip as Target
            Target,
            //Used to set the associate of tooltip as MouseFollow
            MouseFollow,
            //Used to set the associate of tooltip as MouseEnter
            MouseEnter,
        }
    }
    namespace HeatMap {
        enum Horizontal {
            //Used to display the tooltip horizontally on left side of rows/columns
            Left,
            //Used to display the tooltip horizontally on center side of rows/columns
            Center,
            //Used to display the tooltip horizontally on right side of rows/columns
            Right,
        }
    }
    namespace HeatMap {
        enum Vertical {
            //Used to display the tooltip horizontally on left side of rows/columns
            Top,
            //Used to display the tooltip horizontally on center side of rows/columns
            Center,
            //Used to display the tooltip horizontally on right side of rows/columns
            Bottom,
        }
    }
    namespace HeatMap {
        enum Trigger {
            //Tooltip can be triggered on mouse hovers
            Hover,
            //Tooltip can be triggered on mouse click
            Click,
        }
    }
    namespace HeatMap {
        enum Effect {
            //Sets tooltip animation as None
            None,
            //Sets tooltip animation as Fade
            Fade,
            //Sets tooltip animation as Slide
            Slide,
        }
    }
    namespace HeatMap {
        enum CellVisibility {
            //Display the content of the cell
            Visible,
            //Hide the content of the cell
            Hidden,
        }
    }
    namespace HeatMap {
        enum TextDecoration  {
            //Defines a line below the text
            Underline,
            //Defines a line above the text
            Overline,
            //Defines a line through the text
            LineThrough,
            //Defines a normal text. This is default
            None,
        }
    }

    class HeatMapLegend extends ej.Widget {
        static fn: HeatMapLegend;
        constructor(element: JQuery | Element, options?: HeatMapLegend.Model);
        static Locale: any;
        model: HeatMapLegend.Model;
        defaults: HeatMapLegend.Model;
    }
    export namespace HeatMapLegend {

        export interface Model {

            /** Specifies the width of the heatmap legend.
             * @Default {null}
             */
            width?: any;

            /** Specifies the height of the heatmap legend.
             * @Default {null}
             */
            height?: any;

            /** Specifies can enable responsive mode or not for heatmap legend.
             * @Default {false}
             */
            isResponsive?: boolean;

            /** Specifies whether the cell label can be shown or not.
             * @Default {false}
             */
            showLabel?: boolean;

            /** Specifies the color values of the column data.
             * @Default {[]}
             */
            colorMappingCollection?: ColorMappingCollection[];

            /** Specifies the orientation of the heatmap legend
             * @Default {ej.HeatMap.LegendOrientation.Horizontal}
             */
            orientation?: ej.datavisualization.HeatMap.LegendOrientation|string;

            /** Specifies the legend mode as gradient or list.
             * @Default {ej.HeatMap.LegendMode.Gradient}
             */
            legendMode?: ej.datavisualization.HeatMap.LegendMode|string;
        }

        export interface ColorMappingCollectionLabel {

            /** Enables/disables the bold style of the heatmap legend label.
             * @Default {false}
             */
            bold?: boolean;

            /** Enables/disables the italic style of the heatmap legend label.
             * @Default {false}
             */
            italic?: boolean;

            /** specifies the text value of the heatmap legend label.
             */
            text?: string;

            /** Specifies the text style of the heatmap legend label.
             * @Default {ej.HeatMap.TextDecoration.None}
             */
            textDecoration?: ej.datavisualization.HeatMap.TextDecoration|string;

            /** Specifies the font size of the heatmap legend label.
             * @Default {10}
             */
            fontSize?: number;

            /** Specifies the font family of the heatmap legend label.
             * @Default {Arial}
             */
            fontFamily?: string;

            /** Specifies the font color of the heatmap legend label.
             * @Default {black}
             */
            fontColor?: string;
        }

        export interface ColorMappingCollection {

            /** Specifies the color of the heatmap legend data.
             * @Default {white}
             */
            color?: string;

            /** Specifies the color values of the heatmap legend column data.
             * @Default {0}
             */
            value?: number;

            /** Specifies the label properties of the heatmap legend color.
             * @Default {null}
             */
            label?: ColorMappingCollectionLabel;
        }
    }
    namespace HeatMap {
        enum LegendOrientation {
            //Scales the graphic content non-uniformly to the width and height of the diagram area
            Horizontal,
            //Used to align the image at the top left of diagram area
            Vertical,
        }
    }
    namespace HeatMap {
        enum LegendMode {
            //Scales the graphic content non-uniformly to the width and height of the diagram area
            Gradient,
            //Used to align the image at the top left of diagram area
            List,
        }
    }

    class Sparkline extends ej.Widget {
        static fn: Sparkline;
        constructor(element: JQuery | Element, options?: Sparkline.Model);
        static Locale: any;
        model: Sparkline.Model;
        defaults: Sparkline.Model;

        /** Redraws the entire sparkline. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
         * @returns {void}
         */
        redraw(): void;
    }
    export namespace Sparkline {

        export interface Model {

            /** Background color of the plot area.
             * @Default {transparent}
             */
            background?: string;

            /** Fill color for the sparkline series.
             * @Default {#33ccff}
             */
            fill?: string;

            /** Border color of the series.
             * @Default {null}
             */
            stroke?: string;

            /** Options for customizing the color, opacity and width of the sparkline border.
             */
            border?: Border;

            /** Border width of the series.
             * @Default {1}
             */
            width?: number;

            /** Opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Color for series high point.
             * @Default {null}
             */
            highPointColor?: string;

            /** Color for series low point.
             * @Default {null}
             */
            lowPointColor?: string;

            /** Color for series start point.
             * @Default {null}
             */
            startPointColor?: string;

            /** Color for series end point.
             * @Default {null}
             */
            endPointColor?: string;

            /** Color for series negative point.
             * @Default {null}
             */
            negativePointColor?: string;

            /** Options for customizing the color, opacity of the sparkline start and end range.
             */
            rangeBandSettings?: RangeBandSettings;

            /** Name of the culture based on which sparkline should be localized.
             * @Default {en-US}
             */
            locale?: string;

            /** Name of a field in data source, where the fill color for all the data points is generated.
             */
            palette?: string;

            /** Controls whether sparkline has to be responsive or not.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Controls whether Sparkline has to be rendered as Canvas or SVG.Canvas rendering supports all functionalities in SVG rendering.
             * @Default {false}
             */
            enableCanvasRendering?: boolean;

            /** Specify to convert the date object to string, using locale settings.
             * @Default {false}
             */
            enableGroupSeparator?: boolean;

            /** Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
             * @Default {null}
             */
            dataSource?: any;

            /** Name of the property in the datasource that contains x value for the series.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y value for the series.
             * @Default {null}
             */
            yName?: string;

            /** Gap or padding for sparkline.
             * @Default {8}
             */
            padding?: number;

            /** Specifies the type of the series to render in sparkline.
             * @Default {line. See Type}
             */
            type?: ej.datavisualization.Sparkline.Type|string;

            /** Specifies the theme for Sparkline.
             * @Default {Flatlight. See Theme}
             */
            theme?: ej.datavisualization.Sparkline.Theme|string;

            /** Options to customize the tooltip.
             */
            tooltip?: Tooltip;

            /** Options for displaying and customizing marker for a data point.
             */
            markerSettings?: MarkerSettings;

            /** Options to customize the Sparkline size.
             */
            size?: Size;

            /** Options for customizing the color,dashArray and width of the axisLine.
             */
            axisLineSettings?: AxisLineSettings;

            /** Fires before loading the sparkline.
             */
            load?(e: LoadEventArgs): void;

            /** Fires after loaded the sparkline.
             */
            loaded?(e: LoadedEventArgs): void;

            /** Fires before rendering trackball tooltip. You can use this event to customize the text displayed in trackball tooltip.
             */
            tooltipInitialize?(e: TooltipInitializeEventArgs): void;

            /** Fires before rendering a series. This event is fired for each series in Sparkline.
             */
            seriesRendering?(e: SeriesRenderingEventArgs): void;

            /** Fires when mouse is moved over a point.
             */
            pointRegionMouseMove?(e: PointRegionMouseMoveEventArgs): void;

            /** Fires on clicking a point in sparkline. You can use this event to handle clicks made on points.
             */
            pointRegionMouseClick?(e: PointRegionMouseClickEventArgs): void;

            /** Fires on moving mouse over the sparkline.
             */
            sparklineMouseMove?(e: SparklineMouseMoveEventArgs): void;

            /** Fires on moving mouse outside the sparkline.
             */
            sparklineMouseLeave?(e: SparklineMouseLeaveEventArgs): void;

            /** Fires, on clicking the sparkline.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the sparkline.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the sparkline.
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LoadEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LoadedEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TooltipInitializeEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X Location of the trackball tooltip in pixels
             */
            locationX?: any;

            /** Y Location of the trackball tooltip in pixels
             */
            locationY?: any;

            /** Index of the point for which trackball tooltip is displayed
             */
            pointIndex?: number;

            /** Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
             */
            currentText?: string;
        }

        export interface SeriesRenderingEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** Minimum x value of the data point
             */
            minX?: any;

            /** Minimum y value of the data point
             */
            minY?: any;

            /** Maximum x value of the data point
             */
            maxX?: any;

            /** Maximum y value of the data point
             */
            maxY?: any;
        }

        export interface PointRegionMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X-coordinate of point in pixel
             */
            locationX?: number;

            /** Y-coordinate of point in pixel
             */
            locationY?: number;

            /** Index of the point in series
             */
            pointIndex?: number;

            /** Type of the series
             */
            seriesType?: string;
        }

        export interface PointRegionMouseClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;

            /** X-coordinate of point in pixel
             */
            locationX?: number;

            /** Y-coordinate of point in pixel
             */
            locationY?: number;

            /** Index of the point in series
             */
            pointIndex?: number;

            /** Type of the series
             */
            seriesType?: string;
        }

        export interface SparklineMouseMoveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface SparklineMouseLeaveEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface RightClickEventArgs {

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sparkline model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface Border {

            /** Border color of the sparkline.
             * @Default {transparent}
             */
            color?: string;

            /** Width of the Sparkline border.
             * @Default {1}
             */
            width?: number;
        }

        export interface RangeBandSettings {

            /** Start value of the range band.
             * @Default {null}
             */
            startRange?: number;

            /** End value of the range band.
             * @Default {null}
             */
            endRange?: number;

            /** Range band opacity of the series.
             * @Default {1}
             */
            opacity?: number;

            /** Range band color of the series.
             * @Default {transparent}
             */
            color?: string;
        }

        export interface TooltipBorder {

            /** Border color of the tooltip.
             * @Default {transparent}
             */
            color?: string;

            /** Border width of the tooltip.
             * @Default {1}
             */
            width?: number;
        }

        export interface TooltipFont {

            /** Font color of the text in the tooltip.
             * @Default {#111111}
             */
            color?: string;

            /** Font Family for the tooltip.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font Style for the tooltip.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Sparkline.FontStyle|string;

            /** Specifies the font weight for the tooltip.
             * @Default {Regular}
             */
            fontWeight?: ej.datavisualization.Sparkline.FontWeight|string;

            /** Opacity for text in the tooltip.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for text in the tooltip.
             * @Default {8px}
             */
            size?: string;
        }

        export interface Tooltip {

            /** Show/hides the tooltip visibility.
             * @Default {false}
             */
            visible?: boolean;

            /** Fill color for the sparkline tooltip.
             * @Default {white}
             */
            fill?: string;

            /** Custom template to the tooltip.
             */
            template?: string;

            /** Options for customizing the border of the tooltip.
             */
            border?: TooltipBorder;

            /** Options for customizing the font of the tooltip.
             */
            font?: TooltipFont;
        }

        export interface MarkerSettingsBorder {

            /** Border color of the marker shape.
             * @Default {transparent}
             */
            color?: string;

            /** Controls the opacity of the marker border.
             * @Default {1}
             */
            opacity?: number;

            /** Border width of the marker shape.
             * @Default {null}
             */
            width?: number;
        }

        export interface MarkerSettings {

            /** Controls the opacity of the marker.
             * @Default {1}
             */
            opacity?: number;

            /** Controls the visibility of the marker shape.
             * @Default {false}
             */
            visible?: boolean;

            /** width of the marker shape.
             * @Default {2}
             */
            width?: number;

            /** Color of the marker shape.
             * @Default {white}
             */
            fill?: string;

            /** Options for customizing the border of the marker shape.
             */
            border?: MarkerSettingsBorder;
        }

        export interface Size {

            /** Height of the Sparkline. Height can be specified in either pixel or percentage.
             * @Default {''}
             */
            height?: string;

            /** Width of the Sparkline. Width can be specified in either pixel or percentage.
             * @Default {''}
             */
            width?: string;
        }

        export interface AxisLineSettings {

            /** Controls the visibility of the axis.
             * @Default {false}
             */
            visible?: boolean;

            /** Color of the axis line.
             * @Default {'#111111'}
             */
            color?: string;

            /** Width of the axis line.
             * @Default {1}
             */
            width?: number;

            /** Dash array of the axis line.
             * @Default {1}
             */
            dashArray?: number;
        }
    }
    namespace Sparkline {
        enum Type {
            //string
            Area,
            //string
            Line,
            //string
            Column,
            //string
            Pie,
            //string
            WinLoss,
        }
    }
    namespace Sparkline {
        enum Theme {
            //string
            Azure,
            //string
            FlatLight,
            //string
            FlatDark,
            //string
            Azuredark,
            //string
            Lime,
            //string
            LimeDark,
            //string
            Saffron,
            //string
            SaffronDark,
            //string
            GradientLight,
            //string
            GradientDark,
        }
    }
    namespace Sparkline {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Sparkline {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }

    class SunburstChart extends ej.Widget {
        static fn: SunburstChart;
        constructor(element: JQuery | Element, options?: SunburstChart.Model);
        static Locale: any;
        model: SunburstChart.Model;
        defaults: SunburstChart.Model;

        /** Redraws the entire sunburst. You can call this method whenever you update, add or remove points from the data source or whenever you want to refresh the UI.
         * @returns {void}
         */
        redraw(): void;

        /** destroy the sunburst
         * @returns {void}
         */
        destroy(): void;
    }
    export namespace SunburstChart {

        export interface Model {

            /** Background color of the plot area.
             * @Default {null}
             */
            background?: string;

            /** Bind the data field from the data source.
             * @Default {null}
             */
            valueMemberPath?: string;

            /** Options for customizing the sunburst border.
             */
            border?: Border;

            /** Options for customizing the sunburst segment border.
             */
            segmentBorder?: SegmentBorder;

            /** Specifies the dataSource to the sunburst.
             * @Default {null}
             */
            dataSource?: any;

            /** Palette color for the data points.
             * @Default {null}
             */
            palette?: string;

            /** Parent node of the data points.
             * @Default {null}
             */
            parentNode?: string;

            /** Name of the property in the datasource that contains x values.
             * @Default {null}
             */
            xName?: string;

            /** Name of the property in the datasource that contains y values.
             * @Default {null}
             */
            yName?: string;

            /** Controls whether sunburst has to be responsive or not.
             * @Default {true}
             */
            isResponsive?: boolean;

            /** Options to customize the Sunburst size.
             */
            size?: Size;

            /** Controls the visibility of sunburst.
             * @Default {true}
             */
            visible?: boolean;

            /** Options to customize the Sunburst tooltip.
             */
            tooltip?: Tooltip;

            /** Options for customizing sunburst points.
             */
            points?: Points;

            /** Sunburst rendering will start from the specified value
             * @Default {null}
             */
            startAngle?: number;

            /** Sunburst rendering will end at the specified value
             * @Default {null}
             */
            endAngle?: number;

            /** Sunburst outer radius value
             * @Default {1}
             */
            radius?: number;

            /** Sunburst inner radius value
             * @Default {0.4}
             */
            innerRadius?: number;

            /** Options to customize the Sunburst dataLabel.
             */
            dataLabelSettings?: DataLabelSettings;

            /** Options for customizing the title and subtitle of sunburst.
             */
            title?: Title;

            /** Options for customizing the appearance of the levels or point while highlighting.
             */
            highlightSettings?: HighlightSettings;

            /** Options for customizing the appearance of the levels or data point while selection.
             */
            selectionSettings?: SelectionSettings;

            /** Specify levels of sunburst for grouped visualization of data
             * @Default {[]}
             */
            levels?: Level[];

            /** Options to customize the legend items and legend title.
             */
            legend?: Legend;

            /** Specifies the theme for Sunburst.
             * @Default {Flatlight. See Theme}
             */
            theme?: ej.datavisualization.Sunburst.SunburstTheme|string;

            /** Options to customize the left, right, top and bottom margins of sunburst area.
             */
            margin?: Margin;

            /** Enable/disable the animation for all the levels.
             * @Default {false}
             */
            enableAnimation?: boolean;

            /** Opacity of the levels.
             * @Default {1}
             */
            opacity?: number;

            /** Options for enable zooming feature of chart.
             */
            zoomSettings?: ZoomSettings;

            /** Animation type of sunburst
             * @Default {rotation. See Alignment}
             */
            animationType?: ej.datavisualization.Sunburst.Animation|string;

            /** Fires before loading.
             */
            load?(e: LoadEventArgs): void;

            /** Fires before rendering sunburst.
             */
            preRender?(e: PreRenderEventArgs): void;

            /** Fires after rendering sunburst.
             */
            loaded?(e: LoadedEventArgs): void;

            /** Fires before rendering the datalabel
             */
            dataLabelRendering?(e: DataLabelRenderingEventArgs): void;

            /** Fires before rendering each segment
             */
            segmentRendering?(e: SegmentRenderingEventArgs): void;

            /** Fires before rendering sunburst title.
             */
            titleRendering?(e: TitleRenderingEventArgs): void;

            /** Fires during initialization of tooltip.
             */
            tooltipInitialize?(e: TooltipInitializeEventArgs): void;

            /** Fires after clicking the point in sunburst
             */
            pointRegionClick?(e: PointRegionClickEventArgs): void;

            /** Fires while moving the mouse over sunburst points
             */
            pointRegionMouseMove?(e: PointRegionMouseMoveEventArgs): void;

            /** Fires when clicking the point to perform drilldown.
             */
            drillDownClick?(e: DrillDownClickEventArgs): void;

            /** Fires when resetting drilldown points.
             */
            drillDownBack?(e: DrillDownBackEventArgs): void;

            /** Fires after resetting the sunburst points
             */
            drillDownReset?(e: DrillDownResetEventArgs): void;

            /** Fires, on clicking the sunburst chart.
             */
            Click?(e: ClickEventArgs): void;

            /** Fires, on double clicking the sunburst chart.
             */
            doubleClick?(e: DoubleClickEventArgs): void;

            /** Fires, on right clicking the sunburst chart
             */
            rightClick?(e: RightClickEventArgs): void;
        }

        export interface LoadEventArgs {

            /** Load event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PreRenderEventArgs {

            /** PreRender event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface LoadedEventArgs {

            /** Loaded event data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DataLabelRenderingEventArgs {

            /** Sunburst datalabel data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface SegmentRenderingEventArgs {

            /** Sunburst datalabel data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TitleRenderingEventArgs {

            /** Sunburst title data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface TooltipInitializeEventArgs {

            /** Sunburst tooltip data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PointRegionClickEventArgs {

            /** Includes clicked points region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface PointRegionMouseMoveEventArgs {

            /** Includes data of mouse moved region
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownClickEventArgs {

            /** Clicked point data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownBackEventArgs {

            /** Drill down data of points
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DrillDownResetEventArgs {

            /** Drill down reset data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface ClickEventArgs {

            /** Includes clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface DoubleClickEventArgs {

            /** Includes double clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface RightClickEventArgs {

            /** Includes right clicked region data
             */
            data?: string;

            /** Set this option to true to cancel the event
             */
            cancel?: boolean;

            /** Instance of the sunburst model object
             */
            model?: any;

            /** Name of the event
             */
            type?: string;
        }

        export interface Border {

            /** Border color of the sunburst.
             * @Default {null}
             */
            color?: string;

            /** Width of the Sunburst border.
             * @Default {2}
             */
            width?: number;
        }

        export interface SegmentBorder {

            /** Segment Border color of the sunburst.
             * @Default {null}
             */
            color?: string;

            /** Width of the Sunburst segment border.
             * @Default {2}
             */
            width?: number;
        }

        export interface Size {

            /** Height of the Sunburst.
             * @Default {''}
             */
            height?: string;

            /** Width of the Sunburst.
             * @Default {''}
             */
            width?: string;
        }

        export interface TooltipBorder {

            /** Border color of the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Border width of the tooltip.
             * @Default {5}
             */
            width?: number;
        }

        export interface TooltipFont {

            /** Font color of the text in the tooltip.
             * @Default {null}
             */
            color?: string;

            /** Font Family for the tooltip.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Specifies the font Style for the tooltip.
             * @Default {Normal}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Specifies the font weight for the tooltip.
             * @Default {Regular}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity for text in the tooltip.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for text in the tooltip.
             * @Default {12px}
             */
            size?: string;
        }

        export interface Tooltip {

            /** tooltip visibility of the Sunburst.
             * @Default {true}
             */
            visible?: boolean;

            /** Options for customizing the border of the sunburst tooltip.
             */
            border?: TooltipBorder;

            /** Fill color for the sunburst tooltip.
             * @Default {null}
             */
            fill?: string;

            /** Options for customizing the font of the tooltip.
             */
            font?: TooltipFont;

            /** Custom template to the tooltip.
             * @Default {null}
             */
            template?: string;

            /** Setting the format for the data displayed in the tooltip
             * @Default {#point.x# : #point.y#}
             */
            format?: string;

            /** Sets the opacity of the displayed tooltip
             * @Default {0.95}
             */
            opacity?: number;
        }

        export interface Points {

            /** Points x value of the sunburst.
             * @Default {null}
             */
            x?: string;

            /** Points y value of the sunburst.
             * @Default {null}
             */
            y?: number;

            /** Points text of the sunburst.
             * @Default {null}
             */
            text?: string;

            /** Points fill color of the sunburst.
             * @Default {null}
             */
            fill?: string;
        }

        export interface DataLabelSettingsFont {

            /** Font family of the data label.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style of the data label.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight of the data label.
             * @Default {regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the text.
             * @Default {1}
             */
            opacity?: number;

            /** Font color of the data label text.
             * @Default {null}
             */
            color?: string;

            /** Font size of the data label.
             * @Default {12px}
             */
            size?: string;
        }

        export interface DataLabelSettings {

            /** Datalabel visibility of the Sunburst.
             * @Default {false}
             */
            visible?: boolean;

            /** Alignment of sunburst datalabel
             * @Default {Angle. See DatalabelAlignment}
             */
            labelRotationMode?: ej.datavisualization.Sunburst.SunburstLabelRotationMode|string;

            /** Options for customizing the data label font.
             */
            font?: DataLabelSettingsFont;

            /** Custom template for datalabel
             * @Default {null}
             */
            template?: string;

            /** Fill color for the datalabel
             * @Default {null}
             */
            fill?: string;

            /** Datalabel overflow mode
             * @Default {Trim. See LabelOverflowMode}
             */
            labelOverflowMode?: ej.datavisualization.Sunburst.SunburstLabelOverflowMode|string;
        }

        export interface TitleFont {

            /** Font family for Sunburst title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for Sunburst title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for Sunburst title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the Sunburst title.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for Sunburst title.
             * @Default {20px}
             */
            size?: string;
        }

        export interface TitleSubtitleFont {

            /** Font family of sub title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for sub title.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for sub title.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Opacity of the sub title.
             * @Default {1}
             */
            opacity?: number;

            /** Font size for sub title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface TitleSubtitle {

            /** Subtitle text for sunburst
             */
            text?: string;

            /** Sub title text visibility for sunburst
             * @Default {true}
             */
            visible?: string;

            /** Sub title text alignment
             * @Default {far. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the font of sub title.
             */
            font?: TitleSubtitleFont;
        }

        export interface Title {

            /** Title text for sunburst
             */
            text?: string;

            /** Title text visibility for sunburst
             * @Default {true}
             */
            visible?: string;

            /** Title text alignment
             * @Default {center. See TextAlignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the font of sunburst title.
             */
            font?: TitleFont;

            /** Options to customize the sub title of Sunburst.
             */
            subtitle?: TitleSubtitle;
        }

        export interface HighlightSettings {

            /** Enables/disables the ability to highlight the levels or point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether the levels or point has to be highlighted.
             * @Default {point. See Mode}
             */
            mode?: ej.datavisualization.Sunburst.SunburstHighlightMode|string;

            /** Color of the levels/point on highlight.
             * @Default {red}
             */
            color?: string;

            /** Opacity of the levels/point on highlight.
             * @Default {0.5}
             */
            opacity?: number;

            /** Specifies whether the levels or data point has to be highlighted.
             * @Default {opacity. See Mode}
             */
            type?: ej.datavisualization.Sunburst.SunburstHighlightType|string;
        }

        export interface SelectionSettings {

            /** Enables/disables the ability to select the levels or data point interactively.
             * @Default {false}
             */
            enable?: boolean;

            /** Specifies whether the levels or data point has to be selected.
             * @Default {point. See Mode}
             */
            mode?: ej.datavisualization.Sunburst.SunburstHighlightMode|string;

            /** Color of the levels/point on selection.
             * @Default {green}
             */
            color?: string;

            /** Opacity of the levels/point on selection.
             * @Default {0.5}
             */
            opacity?: number;

            /** Specifies whether the levels or data point has to be selected.
             * @Default {opacity. See Mode}
             */
            type?: ej.datavisualization.Sunburst.SunburstHighlightType|string;
        }

        export interface Level {

            /** Specifies the group member path
             * @Default {null}
             */
            groupMemberPath?: string;
        }

        export interface LegendBorder {

            /** Border color of the legend.
             * @Default {null}
             */
            color?: string;

            /** Border width of the legend.
             * @Default {1}
             */
            width?: number;
        }

        export interface LegendFont {

            /** Font family for legend item text.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend item text.
             * @Default {Normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for legend item text.
             * @Default {Regular. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Font size for legend item text.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendItemStyle {

            /** Height of the shape in legend items.
             * @Default {10}
             */
            height?: number;

            /** Width of the shape in legend items.
             * @Default {10}
             */
            width?: number;
        }

        export interface LegendLocation {

            /** X value or horizontal offset to position the legend in chart.
             * @Default {0}
             */
            x?: number;

            /** Y value or vertical offset to position the legend.
             * @Default {0}
             */
            y?: number;
        }

        export interface LegendSize {

            /** Height of the legend. Height can be specified in either pixel or percentage.
             * @Default {null}
             */
            height?: string;

            /** Width of the legend. Width can be specified in either pixel or percentage.
             * @Default {null}
             */
            width?: string;
        }

        export interface LegendTitleFont {

            /** Font family for the text in legend title.
             * @Default {Segoe UI}
             */
            fontFamily?: string;

            /** Font style for legend title.
             * @Default {normal. See FontStyle}
             */
            fontStyle?: ej.datavisualization.Sunburst.FontStyle|string;

            /** Font weight for legend title.
             * @Default {normal. See FontWeight}
             */
            fontWeight?: ej.datavisualization.Sunburst.FontWeight|string;

            /** Font size for legend title.
             * @Default {12px}
             */
            size?: string;
        }

        export interface LegendTitle {

            /** Options to customize the font used for legend title
             */
            font?: LegendTitleFont;

            /** Enables or disables the legend title.
             * @Default {true}
             */
            visible?: string;

            /** Text to be displayed in legend title.
             */
            text?: string;

            /** Alignment of the legend title.
             * @Default {center. See Alignment}
             */
            textAlignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;
        }

        export interface Legend {

            /** Visibility of the legend.
             * @Default {false}
             */
            visible?: boolean;

            /** Interactive action of legend items.
             * @Default {toggleSegmentVisibility. See Alignment}
             */
            clickAction?: ej.datavisualization.Sunburst.SunburstClickAction|string;

            /** Horizontal alignment of the legend.
             * @Default {Center. See Alignment}
             */
            alignment?: ej.datavisualization.Sunburst.SunburstAlignment|string;

            /** Options for customizing the legend border.
             */
            border?: LegendBorder;

            /** Number of columns to arrange the legend items.
             * @Default {null}
             */
            columnCount?: number;

            /** Number of rows to arrange the legend items.
             * @Default {null}
             */
            rowCount?: number;

            /** Options to customize the font used for legend item text.
             */
            font?: LegendFont;

            /** Gap or padding between the legend items.
             * @Default {10}
             */
            itemPadding?: number;

            /** Options to customize the style of legend items.
             */
            itemStyle?: LegendItemStyle;

            /** Options to customize the location of sunburst legend. Legend is placed in provided location only when value of position property is custom
             */
            location?: LegendLocation;

            /** Places the legend at specified position. Legend can be placed at **left**, **right**, **top** or **bottom** of the chart area. To manually specify the location of legend, set
             * **custom** as value to this property.
             * @Default {Bottom. See Position}
             */
            position?: ej.datavisualization.Sunburst.SunburstLegendPosition|string;

            /** Shape of the legend items.
             * @Default {None. See Shape}
             */
            shape?: ej.datavisualization.Sunburst.SunburstLegendShape|string;

            /** Options to customize the size of the legend.
             */
            size?: LegendSize;

            /** Options to customize the legend title.
             */
            title?: LegendTitle;
        }

        export interface Margin {

            /** Spacing for the left margin of chart area. Setting positive value decreases the width of the chart area from left side.
             * @Default {10}
             */
            left?: number;

            /** Spacing for the right margin of chart area. Setting positive value decreases the width of the chart area from right side.
             * @Default {10}
             */
            right?: number;

            /** Spacing for the top margin of chart area. Setting positive value decreases the height of the chart area from the top.
             * @Default {10}
             */
            top?: number;

            /** Spacing for the bottom margin of the chart area. Setting positive value decreases the height of the chart area from the bottom.
             * @Default {10}
             */
            bottom?: number;
        }

        export interface ZoomSettings {

            /** Enables or disables zooming.
             * @Default {false}
             */
            enable?: boolean;

            /** Toolbar horizontal alignment
             * @Default {right. See Alignment}
             */
            toolbarHorizontalAlignment?: ej.datavisualization.Sunburst.SunburstHorizontalAlignment|string;

            /** Toolbar vertical alignment
             * @Default {top. See Alignment}
             */
            toolbarVerticalAlignment?: ej.datavisualization.Sunburst.SunburstVerticalAlignment|string;
        }
    }
    namespace Sunburst {
        enum FontStyle {
            //string
            Normal,
            //string
            Italic,
        }
    }
    namespace Sunburst {
        enum FontWeight {
            //string
            Regular,
            //string
            Bold,
            //string
            Lighter,
        }
    }
    namespace Sunburst {
        enum SunburstLabelRotationMode {
            //string
            Angle,
            //string
            Normal,
        }
    }
    namespace Sunburst {
        enum SunburstLabelOverflowMode {
            //string
            Trim,
            //string
            Hide,
            //string
            None,
        }
    }
    namespace Sunburst {
        enum SunburstAlignment {
            //string
            Center,
            //string
            Near,
            //string
            Far,
        }
    }
    namespace Sunburst {
        enum SunburstHighlightMode {
            //string
            Point,
            //string
            Parent,
            //string
            Child,
            //string
            All,
        }
    }
    namespace Sunburst {
        enum SunburstHighlightType {
            //string
            Opacity,
            //string
            Color,
        }
    }
    namespace Sunburst {
        enum SunburstClickAction {
            //string
            None,
            //string
            ToggleSegmentVisibility,
            //string
            ToggleSegmentSelection,
        }
    }
    namespace Sunburst {
        enum SunburstLegendPosition {
            //string
            Left,
            //string
            Right,
            //string
            Top,
            //string
            Bottom,
        }
    }
    namespace Sunburst {
        enum SunburstLegendShape {
            //string
            Diamond,
            //string
            Pentagon,
            //string
            Rectangle,
            //string
            Circle,
            //string
            Cross,
            //string
            Triangle,
        }
    }
    namespace Sunburst {
        enum SunburstTheme {
            //string
            FlatLight,
            //string
            FlatDark,
        }
    }
    namespace Sunburst {
        enum SunburstHorizontalAlignment {
            //string
            Center,
            //string
            Left,
            //string
            Right,
        }
    }
    namespace Sunburst {
        enum SunburstVerticalAlignment {
            //string
            Top,
            //string
            Bottom,
            //string
            Middle,
        }
    }
    namespace Sunburst {
        enum Animation {
            //string
            Rotation,
            //string
            FadeIn,
        }
    }

    class Overview extends ej.Widget {
        static fn: Overview;
        constructor(element: JQuery | Element, options?: Overview.Model);
        static Locale: any;
        model: Overview.Model;
        defaults: Overview.Model;
    }
    export namespace Overview {

        export interface Model {

            /** The sourceId property of overview should be set with the corresponding Diagram ID for you need the overall view.
             * @Default {null}
             */
            sourceID?: string;

            /** Defines the height of the overview
             * @Default {400}
             */
            height?: number;

            /** Defines the width of the overview
             * @Default {250}
             */
            width?: number;
        }
    }

}

interface JQueryXHR {
    /**
     * Returns the cancel option value.
     */
    cancel?: boolean;
}
interface JQueryPromise<T> {
    /**
     * Returns the cancel option value.
     */
    cancel?: boolean;
}
interface JQueryDeferred<T> {
    /**
     * Returns the cancel option value.
     */
    cancel?: boolean;
}
interface JQueryParam {
    /**
     * Returns the cancel option value.
     */
    cancel?: boolean;
}
interface JQuery {
    data(key: any): any;
}
interface Window {
    ej: typeof ej;
}
interface JQuery {

    ejAccordion(options?: ej.Accordion.Model): JQuery;
    ejAccordion(memberName: any, value?: any, param?: any): any;

    ejAutocomplete(options?: ej.Autocomplete.Model): JQuery;
    ejAutocomplete(memberName: any, value?: any, param?: any): any;

    ejBarcode(options?: ej.datavisualization.Barcode.Model): JQuery;
    ejBarcode(memberName: any, value?: any, param?: any): any;

    ejBulletGraph(options?: ej.datavisualization.BulletGraph.Model): JQuery;
    ejBulletGraph(memberName: any, value?: any, param?: any): any;

    ejButton(options?: ej.Button.Model): JQuery;
    ejButton(memberName: any, value?: any, param?: any): any;

    ejCaptcha(options?: ej.Captcha.Model): JQuery;
    ejCaptcha(memberName: any, value?: any, param?: any): any;

    ejChart(options?: ej.datavisualization.Chart.Model): JQuery;
    ejChart(memberName: any, value?: any, param?: any): any;

    ejCheckBox(options?: ej.CheckBox.Model): JQuery;
    ejCheckBox(memberName: any, value?: any, param?: any): any;

    ejCircularGauge(options?: ej.datavisualization.CircularGauge.Model): JQuery;
    ejCircularGauge(memberName: any, value?: any, param?: any): any;

    ejColorPicker(options?: ej.ColorPicker.Model): JQuery;
    ejColorPicker(memberName: any, value?: any, param?: any): any;

    ejComboBox(options?: ej.ComboBox.Model): JQuery;
    ejComboBox(memberName: any, value?: any, param?: any): any;

    ejDatePicker(options?: ej.DatePicker.Model): JQuery;
    ejDatePicker(memberName: any, value?: any, param?: any): any;

    ejDateRangePicker(options?: ej.DateRangePicker.Model): JQuery;
    ejDateRangePicker(memberName: any, value?: any, param?: any): any;

    ejDateTimePicker(options?: ej.DateTimePicker.Model): JQuery;
    ejDateTimePicker(memberName: any, value?: any, param?: any): any;

    ejDiagram(options?: ej.datavisualization.Diagram.Model): JQuery;
    ejDiagram(memberName: any, value?: any, param?: any): any;

    ejDialog(options?: ej.Dialog.Model): JQuery;
    ejDialog(memberName: any, value?: any, param?: any): any;

    ejDigitalGauge(options?: ej.datavisualization.DigitalGauge.Model): JQuery;
    ejDigitalGauge(memberName: any, value?: any, param?: any): any;

    ejDocumentEditor(options?: ej.DocumentEditor.Model): JQuery;
    ejDocumentEditor(memberName: any, value?: any, param?: any): any;

    ejDraggable(options?: ej.Draggable.Model): JQuery;
    ejDraggable(memberName: any, value?: any, param?: any): any;

    ejDropDownList(options?: ej.DropDownList.Model): JQuery;
    ejDropDownList(memberName: any, value?: any, param?: any): any;

    ejDropDownTree(options?: ej.DropDownTree.Model): JQuery;
    ejDropDownTree(memberName: any, value?: any, param?: any): any;

    ejDroppable(options?: ej.Droppable.Model): JQuery;
    ejDroppable(memberName: any, value?: any, param?: any): any;

    ejFileExplorer(options?: ej.FileExplorer.Model): JQuery;
    ejFileExplorer(memberName: any, value?: any, param?: any): any;

    ejGantt(options?: ej.Gantt.Model): JQuery;
    ejGantt(memberName: any, value?: any, param?: any): any;

    ejGrid(options?: ej.Grid.Model): JQuery;
    ejGrid(memberName: any, value?: any, param?: any): any;

    ejGroupButton(options?: ej.GroupButton.Model): JQuery;
    ejGroupButton(memberName: any, value?: any, param?: any): any;

    ejHeatMap(options?: ej.datavisualization.HeatMap.Model): JQuery;
    ejHeatMap(memberName: any, value?: any, param?: any): any;

    ejHeatMapLegend(options?: ej.datavisualization.HeatMapLegend.Model): JQuery;
    ejHeatMapLegend(memberName: any, value?: any, param?: any): any;

    ejKanban(options?: ej.Kanban.Model): JQuery;
    ejKanban(memberName: any, value?: any, param?: any): any;

    ejLinearGauge(options?: ej.datavisualization.LinearGauge.Model): JQuery;
    ejLinearGauge(memberName: any, value?: any, param?: any): any;

    ejListBox(options?: ej.ListBox.Model): JQuery;
    ejListBox(memberName: any, value?: any, param?: any): any;

    ejListView(options?: ej.ListView.Model): JQuery;
    ejListView(memberName: any, value?: any, param?: any): any;

    ejMap(options?: ej.datavisualization.Map.Model): JQuery;
    ejMap(memberName: any, value?: any, param?: any): any;

    ejMaskEdit(options?: ej.MaskEdit.Model): JQuery;
    ejMaskEdit(memberName: any, value?: any, param?: any): any;

    ejMenu(options?: ej.Menu.Model): JQuery;
    ejMenu(memberName: any, value?: any, param?: any): any;

    ejNavigationDrawer(options?: ej.NavigationDrawer.Model): JQuery;
    ejNavigationDrawer(memberName: any, value?: any, param?: any): any;

    ejOverview(options?: ej.datavisualization.Overview.Model): JQuery;
    ejOverview(memberName: any, value?: any, param?: any): any;

    ejPager(options?: ej.Pager.Model): JQuery;
    ejPager(memberName: any, value?: any, param?: any): any;

    ejPdfViewer(options?: ej.PdfViewer.Model): JQuery;
    ejPdfViewer(memberName: any, value?: any, param?: any): any;

    ejPivotChart(options?: ej.PivotChart.Model): JQuery;
    ejPivotChart(memberName: any, value?: any, param?: any): any;

    ejPivotClient(options?: ej.PivotClient.Model): JQuery;
    ejPivotClient(memberName: any, value?: any, param?: any): any;

    ejPivotGauge(options?: ej.PivotGauge.Model): JQuery;
    ejPivotGauge(memberName: any, value?: any, param?: any): any;

    ejPivotGrid(options?: ej.PivotGrid.Model): JQuery;
    ejPivotGrid(memberName: any, value?: any, param?: any): any;

    ejPivotPager(options?: ej.PivotPager.Model): JQuery;
    ejPivotPager(memberName: any, value?: any, param?: any): any;

    ejPivotSchemaDesigner(options?: ej.PivotSchemaDesigner.Model): JQuery;
    ejPivotSchemaDesigner(memberName: any, value?: any, param?: any): any;

    ejPivotTreeMap(options?: ej.PivotTreeMap.Model): JQuery;
    ejPivotTreeMap(memberName: any, value?: any, param?: any): any;

    ejPrint(options?: ej.Print.Model): JQuery;
    ejPrint(memberName: any, value?: any, param?: any): any;

    ejProgressBar(options?: ej.ProgressBar.Model): JQuery;
    ejProgressBar(memberName: any, value?: any, param?: any): any;

    ejRadialMenu(options?: ej.RadialMenu.Model): JQuery;
    ejRadialMenu(memberName: any, value?: any, param?: any): any;

    ejRadialSlider(options?: ej.RadialSlider.Model): JQuery;
    ejRadialSlider(memberName: any, value?: any, param?: any): any;

    ejRadioButton(options?: ej.RadioButton.Model): JQuery;
    ejRadioButton(memberName: any, value?: any, param?: any): any;

    ejRangeNavigator(options?: ej.datavisualization.RangeNavigator.Model): JQuery;
    ejRangeNavigator(memberName: any, value?: any, param?: any): any;

    ejRating(options?: ej.Rating.Model): JQuery;
    ejRating(memberName: any, value?: any, param?: any): any;

    ejRecurrenceEditor(options?: ej.RecurrenceEditor.Model): JQuery;
    ejRecurrenceEditor(memberName: any, value?: any, param?: any): any;

    ejReportDesigner(options?: ej.ReportDesigner.Model): JQuery;
    ejReportDesigner(memberName: any, value?: any, param?: any): any;

    ejReportViewer(options?: ej.ReportViewer.Model): JQuery;
    ejReportViewer(memberName: any, value?: any, param?: any): any;

    ejResizable(options?: ej.Resizable.Model): JQuery;
    ejResizable(memberName: any, value?: any, param?: any): any;

    ejRibbon(options?: ej.Ribbon.Model): JQuery;
    ejRibbon(memberName: any, value?: any, param?: any): any;

    ejRotator(options?: ej.Rotator.Model): JQuery;
    ejRotator(memberName: any, value?: any, param?: any): any;

    ejRTE(options?: ej.RTE.Model): JQuery;
    ejRTE(memberName: any, value?: any, param?: any): any;

    ejSchedule(options?: ej.Schedule.Model): JQuery;
    ejSchedule(memberName: any, value?: any, param?: any): any;

    ejScroller(options?: ej.Scroller.Model): JQuery;
    ejScroller(memberName: any, value?: any, param?: any): any;

    ejSignature(options?: ej.Signature.Model): JQuery;
    ejSignature(memberName: any, value?: any, param?: any): any;

    ejSlider(options?: ej.Slider.Model): JQuery;
    ejSlider(memberName: any, value?: any, param?: any): any;

    ejSparkline(options?: ej.datavisualization.Sparkline.Model): JQuery;
    ejSparkline(memberName: any, value?: any, param?: any): any;

    ejSpellCheck(options?: ej.SpellCheck.Model): JQuery;
    ejSpellCheck(memberName: any, value?: any, param?: any): any;

    ejSplitButton(options?: ej.SplitButton.Model): JQuery;
    ejSplitButton(memberName: any, value?: any, param?: any): any;

    ejSplitter(options?: ej.Splitter.Model): JQuery;
    ejSplitter(memberName: any, value?: any, param?: any): any;

    ejSpreadsheet(options?: ej.Spreadsheet.Model): JQuery;
    ejSpreadsheet(memberName: any, value?: any, param?: any): any;

    ejSunburstChart(options?: ej.datavisualization.SunburstChart.Model): JQuery;
    ejSunburstChart(memberName: any, value?: any, param?: any): any;

    ejSymbolPalette(options?: ej.datavisualization.SymbolPalette.Model): JQuery;
    ejSymbolPalette(memberName: any, value?: any, param?: any): any;

    ejTab(options?: ej.Tab.Model): JQuery;
    ejTab(memberName: any, value?: any, param?: any): any;

    ejTagCloud(options?: ej.TagCloud.Model): JQuery;
    ejTagCloud(memberName: any, value?: any, param?: any): any;

    ejNumericTextbox(options?: ej.Editor.Model): JQuery;
    ejNumericTextbox(memberName: any, value?: any, param?: any): any;

    ejCurrencyTextbox(options?: ej.Editor.Model): JQuery;
    ejCurrencyTextbox(memberName: any, value?: any, param?: any): any;

    ejPercentageTextbox(options?: ej.Editor.Model): JQuery;
    ejPercentageTextbox(memberName: any, value?: any, param?: any): any;

    ejTile(options?: ej.Tile.Model): JQuery;
    ejTile(memberName: any, value?: any, param?: any): any;

    ejTimePicker(options?: ej.TimePicker.Model): JQuery;
    ejTimePicker(memberName: any, value?: any, param?: any): any;

    ejToggleButton(options?: ej.ToggleButton.Model): JQuery;
    ejToggleButton(memberName: any, value?: any, param?: any): any;

    ejToolbar(options?: ej.Toolbar.Model): JQuery;
    ejToolbar(memberName: any, value?: any, param?: any): any;

    ejTooltip(options?: ej.Tooltip.Model): JQuery;
    ejTooltip(memberName: any, value?: any, param?: any): any;

    ejTreeGrid(options?: ej.TreeGrid.Model): JQuery;
    ejTreeGrid(memberName: any, value?: any, param?: any): any;

    ejTreeMap(options?: ej.datavisualization.TreeMap.Model): JQuery;
    ejTreeMap(memberName: any, value?: any, param?: any): any;

    ejTreeView(options?: ej.TreeView.Model): JQuery;
    ejTreeView(memberName: any, value?: any, param?: any): any;

    ejUploadbox(options?: ej.Uploadbox.Model): JQuery;
    ejUploadbox(memberName: any, value?: any, param?: any): any;

    ejWaitingPopup(options?: ej.WaitingPopup.Model): JQuery;
    ejWaitingPopup(memberName: any, value?: any, param?: any): any;
    data(key: "ejAccordion"): ej.Accordion;
    data(key: "ejAutocomplete"): ej.Autocomplete;
    data(key: "ejBarcode"): ej.datavisualization.Barcode;
    data(key: "ejBulletGraph"): ej.datavisualization.BulletGraph;
    data(key: "ejButton"): ej.Button;
    data(key: "ejCaptcha"): ej.Captcha;
    data(key: "ejChart"): ej.datavisualization.Chart;
    data(key: "ejCheckBox"): ej.CheckBox;
    data(key: "ejCircularGauge"): ej.datavisualization.CircularGauge;
    data(key: "ejColorPicker"): ej.ColorPicker;
    data(key: "ejComboBox"): ej.ComboBox;
    data(key: "ejDatePicker"): ej.DatePicker;
    data(key: "ejDateRangePicker"): ej.DateRangePicker;
    data(key: "ejDateTimePicker"): ej.DateTimePicker;
    data(key: "ejDiagram"): ej.datavisualization.Diagram;
    data(key: "ejDialog"): ej.Dialog;
    data(key: "ejDigitalGauge"): ej.datavisualization.DigitalGauge;
    data(key: "ejDocumentEditor"): ej.DocumentEditor;
    data(key: "ejDraggable"): ej.Draggable;
    data(key: "ejDropDownList"): ej.DropDownList;
    data(key: "ejDropDownTree"): ej.DropDownTree;
    data(key: "ejDroppable"): ej.Droppable;
    data(key: "ejFileExplorer"): ej.FileExplorer;
    data(key: "ejGantt"): ej.Gantt;
    data(key: "ejGrid"): ej.Grid;
    data(key: "ejGroupButton"): ej.GroupButton;
    data(key: "ejHeatMap"): ej.datavisualization.HeatMap;
    data(key: "ejHeatMapLegend"): ej.datavisualization.HeatMapLegend;
    data(key: "ejKanban"): ej.Kanban;
    data(key: "ejLinearGauge"): ej.datavisualization.LinearGauge;
    data(key: "ejListBox"): ej.ListBox;
    data(key: "ejListView"): ej.ListView;
    data(key: "ejMap"): ej.datavisualization.Map;
    data(key: "ejMaskEdit"): ej.MaskEdit;
    data(key: "ejMenu"): ej.Menu;
    data(key: "ejNavigationDrawer"): ej.NavigationDrawer;
    data(key: "ejOverview"): ej.datavisualization.Overview;
    data(key: "ejPager"): ej.Pager;
    data(key: "ejPdfViewer"): ej.PdfViewer;
    data(key: "ejPivotChart"): ej.PivotChart;
    data(key: "ejPivotClient"): ej.PivotClient;
    data(key: "ejPivotGauge"): ej.PivotGauge;
    data(key: "ejPivotGrid"): ej.PivotGrid;
    data(key: "ejPivotPager"): ej.PivotPager;
    data(key: "ejPivotSchemaDesigner"): ej.PivotSchemaDesigner;
    data(key: "ejPivotTreeMap"): ej.PivotTreeMap;
    data(key: "ejPrint"): ej.Print;
    data(key: "ejProgressBar"): ej.ProgressBar;
    data(key: "ejRadialMenu"): ej.RadialMenu;
    data(key: "ejRadialSlider"): ej.RadialSlider;
    data(key: "ejRadioButton"): ej.RadioButton;
    data(key: "ejRangeNavigator"): ej.datavisualization.RangeNavigator;
    data(key: "ejRating"): ej.Rating;
    data(key: "ejRecurrenceEditor"): ej.RecurrenceEditor;
    data(key: "ejReportDesigner"): ej.ReportDesigner;
    data(key: "ejReportViewer"): ej.ReportViewer;
    data(key: "ejResizable"): ej.Resizable;
    data(key: "ejRibbon"): ej.Ribbon;
    data(key: "ejRotator"): ej.Rotator;
    data(key: "ejRTE"): ej.RTE;
    data(key: "ejSchedule"): ej.Schedule;
    data(key: "ejScroller"): ej.Scroller;
    data(key: "ejSignature"): ej.Signature;
    data(key: "ejSlider"): ej.Slider;
    data(key: "ejSparkline"): ej.datavisualization.Sparkline;
    data(key: "ejSpellCheck"): ej.SpellCheck;
    data(key: "ejSplitButton"): ej.SplitButton;
    data(key: "ejSplitter"): ej.Splitter;
    data(key: "ejSpreadsheet"): ej.Spreadsheet;
    data(key: "ejSunburstChart"): ej.datavisualization.SunburstChart;
    data(key: "ejSymbolPalette"): ej.datavisualization.SymbolPalette;
    data(key: "ejTab"): ej.Tab;
    data(key: "ejTagCloud"): ej.TagCloud;
    data(key: "ejNumericTextbox"): ej.NumericTextbox;
    data(key: "ejCurrencyTextbox"): ej.CurrencyTextbox;
    data(key: "ejPercentageTextbox"): ej.PercentageTextbox;
    data(key: "ejTile"): ej.Tile;
    data(key: "ejTimePicker"): ej.TimePicker;
    data(key: "ejToggleButton"): ej.ToggleButton;
    data(key: "ejToolbar"): ej.Toolbar;
    data(key: "ejTooltip"): ej.Tooltip;
    data(key: "ejTreeGrid"): ej.TreeGrid;
    data(key: "ejTreeMap"): ej.datavisualization.TreeMap;
    data(key: "ejTreeView"): ej.TreeView;
    data(key: "ejUploadbox"): ej.Uploadbox;
    data(key: "ejWaitingPopup"): ej.WaitingPopup;
}
