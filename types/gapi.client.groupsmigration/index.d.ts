// Type definitions for non-npm package Google Groups Migration API v1 1.0
// Project: https://developers.google.com/google-apps/groups-migration/
// Definitions by: Bolisov Alexey <https://github.com/Bolisov>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

// IMPORTANT
// This file was generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/groupsmigration/v1/rest

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Groups Migration API v1 */
    function load(name: "groupsmigration", version: "v1"): PromiseLike<void>;
    function load(name: "groupsmigration", version: "v1", callback: () => any): void;

    const archive: groupsmigration.ArchiveResource;

    namespace groupsmigration {
        interface Groups {
            /** The kind of insert resource this is. */
            kind?: string;
            /** The status of the insert request. */
            responseCode?: string;
        }
        interface ArchiveResource {
            /** Inserts a new mail into the archive of the Google group. */
            insert(request: {
                /** Data format for the response. */
                alt?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The group ID */
                groupId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                 * Overrides userIp if both are provided.
                 */
                quotaUser?: string;
                /** IP address of the site where the request originates. Use this if you want to enforce per-user limits. */
                userIp?: string;
            }): Request<Groups>;
        }
    }
}
