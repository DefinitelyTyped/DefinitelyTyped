import type { Chunk, NewChunk, SendQueue } from "./types";
import type { MessageType } from "../utils/messageTypes";
export declare const getDBAddressBookEntry: (peerId?: string, peerPublicKey?: string) => Promise<import("./types").UsernamedPeer | undefined>;
export declare const getAllDBAddressBookEntries: () => Promise<import("./types").UsernamedPeer[]>;
export declare const setDBAddressBookEntry: (username: string, peerId: string, peerPublicKey: string) => Promise<void>;
export declare const deleteDBAddressBookEntry: (username?: string, peerId?: string, peerPublicKey?: string) => Promise<string>;
export declare const getDBPeerIsBlacklisted: (peerId?: string, peerPublicKey?: string) => Promise<boolean>;
export declare const getAllDBBlacklisted: () => Promise<import("./types").BlacklistedPeer[]>;
export declare const setDBPeerInBlacklist: (peerId: string, peerPublicKey: string) => Promise<void>;
export declare const deleteDBPeerFromBlacklist: (peerId?: string, peerPublicKey?: string) => Promise<void>;
export declare const getAllDBUniqueRooms: () => Promise<import("./types").UniqueRoom[]>;
export declare const setDBUniqueRoom: (roomUrl: string, roomId: string) => Promise<void>;
export declare const getDBMessageData: (merkleRootHex?: string, hashHex?: string) => Promise<import("./types").MessageData | undefined>;
export declare const getDBRoomMessageData: (roomId: string) => Promise<import("./types").MessageData[]>;
export declare const setDBRoomMessageData: (roomId: string, merkleRootHex: string, sha512Hex: string, fromPeerId: string, chunkSize: number, totalSize: number, messageType: MessageType, filename: string, channelLabel: string, timestamp: number) => Promise<void>;
export declare const getDBChunk: (hashHex: string, chunkIndex: number) => Promise<ArrayBuffer | undefined>;
export declare const existsDBChunk: (hashHex: string, chunkIndex: number) => Promise<boolean>;
export declare const getDBNewChunk: (hashHex: string, chunkIndex?: number) => Promise<NewChunk | undefined>;
export declare const existsDBNewChunk: (hashHex: string, chunkIndex: number) => Promise<boolean>;
export declare const getDBSendQueue: (label: string, toPeerId: string) => Promise<SendQueue[]>;
export declare const getDBAllChunks: (merkleRootHex?: string, hashHex?: string) => Promise<Chunk[]>;
export declare const getDBAllChunksCount: (merkleRootHex?: string, hashHex?: string) => Promise<number>;
export declare const setDBChunk: (chunk: Chunk) => Promise<void>;
export declare const getDBAllNewChunks: (hashHex?: string, merkleRootHex?: string) => Promise<NewChunk[]>;
export declare const getDBAllNewChunksCount: (hashHex: string) => Promise<number>;
export declare const setDBNewChunk: (chunk: NewChunk) => Promise<void>;
export declare const setDBSendQueue: (item: SendQueue) => Promise<void>;
export declare const countDBSendQueue: (label: string, toPeerId: string) => Promise<number>;
export declare const deleteDBChunk: (hashHex: string, chunkIndex?: number) => Promise<void>;
export declare const deleteDBNewChunk: (merkleRootHex?: string, realChunkHashHex?: string, hashHex?: string, chunkIndex?: number) => Promise<void>;
export declare const deleteDBMessageData: (merkleRootHex: string) => Promise<void>;
export declare const deleteDBUniqueRoom: (roomId: string) => Promise<void>;
export declare const deleteDB: () => Promise<void>;
export declare const deleteDBSendQueue: (label: string, toPeerId: string, position?: number) => Promise<void>;
//# sourceMappingURL=api.d.ts.map