// Type definitions for non-npm package Titanium 12.0
// Project: https://github.com/appcelerator/titanium_mobile
// Definitions by: Axway Appcelerator <https://github.com/appcelerator>
//                 Jan Vennemann <https://github.com/janvennemann>
//                 Sergey Volkov <https://github.com/drauggres>
//                 Mathias Lorenzen <https://github.com/ffMathy>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 3.0

// Base definitions that can't be generated yet
/// <reference path="base.d.ts" />

type _Omit<T, K extends keyof any | undefined> = Pick<T, Exclude<keyof T, K>>;
type FunctionPropertyNames<T> = {
	// tslint:disable-next-line:ban-types
	[K in keyof T]: T[K] extends Function ? K : never
}[keyof T];
type Dictionary<T> = Partial<_Omit<T, FunctionPropertyNames<Ti.Proxy>>>;
interface ProxyEventMap {}

/**
 * An extension of the [NSURLConnectionDelegate](https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSURLConnectionDelegate) protocol to allow users to participate in authentication and resource management for this HTTPClient.
 */
interface APSConnectionDelegate {
}
/**
 * Options object for the [accept](Titanium.Network.Socket.TCP.accept) method.
 */
interface AcceptDict {
	/**
	 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
	 */
	error?: (param0: ErrorCallbackArgs) => void;

	/**
	 * Timeout, in milliseconds, for all `write` operations.
	 */
	timeout?: number;

}
/**
 * Argument object passed to the [accepted](Titanium.Network.Socket.TCP.accepted)
 * callback when a listener accepts a connection.
 */
interface AcceptedCallbackArgs {
	/**
	 * Socket which represents the inbound connection.
	 */
	inbound?: Titanium.Network.Socket.TCP;

	/**
	 * Socket which received the connection.
	 */
	socket?: Titanium.Network.Socket.TCP;

}
/**
 * Simple object passed to the <Titanium.Android.Activity> callbacks for
 * onCreate, onDestroy, onPause, onResume, onStart, onStop, onRestart.
 * Additional properties may be set on the Object.
 */
interface ActivityLifecycleCallbackObject {
	/**
	 * The Activity firing the callback.
	 */
	source?: Titanium.Android.Activity;

}
/**
 * Simple object passed to the
 * [startActivityForResult](Titanium.Android.Activity.startActivityForResult) callback.
 */
interface ActivityResult {
	/**
	 * Intent that can contain data returned to the caller. Data can be attached to
	 * the intent as "extras").
	 */
	intent?: Titanium.Android.Intent;

	/**
	 * Unique, automatically generated integer request code.
	 */
	requestCode?: number;

	/**
	 * Integer result code that the started activity passed to
	 * [setResult](Titanium.Android.Activity.setResult).
	 */
	resultCode?: number;

}
/**
 * A JavaScript object holding an `animated` property. Used for many UI methods as a means of specifying some transition should be animated.
 */
interface AnimatedOptions {
	/**
	 * If `true`, animate a transition for the method/value change.
	 * Note that for most uses cases the default is assumed to be `false`. The exceptions tend to be <Titanium.UI.Window> methods.
	 */
	animated?: boolean;

}
/**
 * A JavaScript object holding `animated` and `duration` properties. Used on iOS For [TablewView](Titanium.UI.TableView) and [ListView](Titanium.UI.ListView) content offset transitions.
 */
interface AnimatedWithDurationOptions extends AnimatedOptions {
	/**
	 * The duration in `milliseconds` for animation
	 */
	duration?: number;

}
/**
 * An abstract datatype for specifying an attributed string attribute.
 */
interface Attribute {
	/**
	 * Attribute range.
	 */
	range: number[];

	/**
	 * Attribute to apply to the text.
	 */
	type: number;

	/**
	 * Attribute value.
	 */
	value: any;

}
/**
 * The object returned to the <Titanium.UI.WebView.backForwardList> method.
 */
interface BackForwardList {
	/**
	 * The item immediately preceding the current item.
	 */
	backItem?: BackForwardListItem;

	/**
	 * The portion of the list preceding the current item.
	 */
	backList?: BackForwardListItem[];

	/**
	 * The current item.
	 */
	currentItem?: BackForwardListItem;

	/**
	 * The item immediately following the current item.
	 */
	forwardItem?: BackForwardListItem;

	/**
	 * The portion of the list following the current item.
	 */
	forwardList?: BackForwardListItem[];

}
/**
 * The object represents a webpage in the back-forward of a web view.
 */
interface BackForwardListItem {
	/**
	 * The URL of the initial request that created this item.
	 */
	initialUrl?: string;

	/**
	 * The title of the webpage represented by this item.
	 */
	title?: string;

	/**
	 * The URL of the webpage represented by this item.
	 */
	url?: string;

}
/**
 * Object describing a button bar or tabbed bar item.
 */
interface BarItemType {
	/**
	 * A succint label associated with the bar item for the device's accessibility service.
	 */
	accessibilityLabel?: string;

	/**
	 * Whether the button is enabled initially.
	 */
	enabled?: boolean;

	/**
	 * Button icon. If specified, takes precedence over `title`.
	 */
	image?: string | Titanium.Blob | Titanium.Filesystem.File;

	/**
	 * Button title, used if no `image` is specified.
	 */
	title?: string;

	/**
	 * Width for this button.
	 */
	width?: number;

}
/**
 * Simple `Error` instance thrown from the
 * [executeAll](Titanium.Database.DB.executeAll) method in case of failure
 */
interface BatchQueryError {
	/**
	 * Index of the failed query
	 */
	index?: number;

	/**
	 * partial `ResultSet`s of any successful queries before the failure
	 */
	results?: Titanium.Database.ResultSet[];

}
/**
 * Dictionary to specify a boundary identifier for <Titanium.UI.iOS.CollisionBehavior.addBoundary>.
 */
interface BoundaryIdentifier {
	/**
	 * Arbitrary identifier for the boundary
	 */
	identifier?: string;

	/**
	 * Start point for the boundary
	 */
	point1?: Point;

	/**
	 * End point for the boundary
	 */
	point2?: Point;

}
/**
 * Simple object holding the data for a logical cpu.
 */
interface CPU {
	/**
	 * General description of the CPU
	 */
	model?: string;

	/**
	 * Speed of the CPU in MHz
	 */
	speed?: number;

	/**
	 * A collection of timings for this logical CPU.
	 */
	times?: CPUTimes;

}
/**
 * Simple object holding the data for a logical cpu execution times.
 */
interface CPUTimes {
	/**
	 * The number of milliseconds the CPU has spent in idle mode.
	 */
	idle?: number;

	/**
	 * The number of milliseconds the CPU has spent in irq mode.
	 */
	irq?: number;

	/**
	 * The number of milliseconds the CPU has spent in nice mode.
	 */
	nice?: number;

	/**
	 * The number of milliseconds the CPU has spent in sys mode.
	 */
	sys?: number;

	/**
	 * The number of milliseconds the CPU has spent in user mode.
	 */
	user?: number;

}
/**
 * A media object from the camera or photo gallery.
 */
interface CameraMediaItemType extends SuccessResponse {
	/**
	 * Error code. Returns 0.
	 */
	code?: number;

	/**
	 * Simple object defining the user's selected crop rectangle, or `null` if the user has not edited the photo. `width`/`height` values are assumed to be in pixels.
	 */
	cropRect?: Dimension;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * The live photo object, as a <Titanium.UI.iOS.LivePhoto> and
	 * `undefined` if no live photo is selected.
	 */
	livePhoto?: Titanium.UI.iOS.LivePhoto;

	/**
	 * The media object, as a [Blob](Titanium.Blob).
	 */
	media?: Titanium.Blob;

	/**
	 * The type of media, either `MEDIA_TYPE_PHOTO`, `MEDIA_TYPE_LIVEPHOTO` or `MEDIA_TYPE_VIDEO` defined in <Titanium.Media>.
	 */
	mediaType?: string;

	/**
	 * Simple object defining the preview image size. This will be undefined when custom camera overlay is not used. Values are assumed to be in pixels.
	 */
	previewRect?: Size;

	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

}
/**
 * A media object from photo gallery when <Titanium.Media.allowMultiple> is `true`.
 */
interface CameraMediaMultipleItemsType extends SuccessResponse {
	/**
	 * The list of selected images.
	 */
	images?: CameraMediaItemType[];

	/**
	 * The list of selected live photo objects.
	 */
	livePhotos?: Titanium.UI.iOS.LivePhoto[];

	/**
	 * The list of selected videos.
	 */
	videos?: CameraMediaItemType[];

}
/**
 * Simple object for specifying options to [showCamera](Titanium.Media.showCamera).
 */
interface CameraOptionsType {
	/**
	 * Specifies if the media should be editable after capture/selection.
	 */
	allowEditing?: boolean;

	/**
	 * Function to call if the user presses the back button.
	 */
	androidback?: (param0: FailureResponse) => void;

	/**
	 * Specifies if the dialog should be animated upon showing and hiding.
	 */
	animated?: boolean;

	/**
	 * Controls the type of arrow and position of the popover.
	 */
	arrowDirection?: number;

	/**
	 * Specifies if the camera should be hidden automatically after the media capture is completed.
	 */
	autohide?: boolean;

	/**
	 * Determines if the camera preview should rotate or not.
	 */
	autorotate?: boolean;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => void;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => void;

	/**
	 * Show the camera in a popover.
	 */
	inPopOver?: boolean;

	/**
	 * Array of media type constants to allow. Note: If you want to select live photos, iOS only  allows
	 * you to select existing live photos from the gallery, capturing new live photos is not supported by
	 * iOS public API, yet.
	 */
	mediaTypes?: string[];

	/**
	 * View to added as an overlay to the camera UI (on top).
	 */
	overlay?: Titanium.UI.View;

	/**
	 * View to position the camera or photo gallery popover on top of.
	 */
	popoverView?: Titanium.UI.View;

	/**
	 * Specifies if the media should be saved to the photo gallery upon successful capture.
	 */
	saveToPhotoGallery?: boolean;

	/**
	 * Indicates if the built-in camera controls should be displayed.
	 */
	showControls?: boolean;

	/**
	 * Function to call when the camera is closed after a successful capture/selection.
	 */
	success?: (param0: CameraMediaItemType) => void;

	/**
	 * Transformation matrix to apply to the camera or photogallery view.
	 */
	transform?: Titanium.UI.Matrix2D;

	/**
	 * Maximum duration (in milliseconds) to allow video capture before completing.
	 */
	videoMaximumDuration?: number;

	/**
	 * Constant to indicate the video quality during capture.
	 */
	videoQuality?: number;

	/**
	 * Opens the camera with the specified camera direction.
	 */
	whichCamera?: number;

}
/**
 * Dictionary describing the items for <Titanium.UI.Clipboard.setItems>.
 */
interface ClipboardItemsType {
	/**
	 * An array of key-value items to add to the clipboard. The key must a valid mime-type
	 * matching the mime-type of the value.
	 * Alterntaively, iOS supports using [Universal Type Identifiers](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html)
	 */
	items?: any[];

	/**
	 * The privacy options to apply to all the items on the clipboard. The available options are
	 * described in `Ti.UI.CLIPBOARD_OPTION_*`. Depending on the key, the value can be a Date or
	 * Boolean.
	 */
	options?: any;

}
/**
 * Argument object passed to the [connected](Titanium.Network.Socket.TCP.connected) callback when the socket connects.
 */
interface ConnectedCallbackArgs {
	/**
	 * Socket instance that has been connected.
	 */
	socket?: Titanium.Network.Socket.TCP;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface ContactsAuthorizationResponse extends ErrorResponse {
}
/**
 * Simple object for defining a single image in a cover flow view.
 */
interface CoverFlowImageType {
	/**
	 * Display height of the image, in Apple points.
	 */
	height?: number;

	/**
	 * Image to use, as a local file URL, `Blob`, or `File`.
	 */
	image?: string | Titanium.Blob | Titanium.Filesystem.File;

	/**
	 * Display width for the image, in Apple points.
	 */
	width?: number;

}
/**
 * Arguments to be passed to createBuffer
 */
interface CreateBufferArgs {
	/**
	 * The byte order of this buffer.
	 */
	byteOrder?: number;

	/**
	 * The length of the buffer.
	 */
	length?: number;

	/**
	 * The type of data encoding to use with `value`.
	 */
	type?: string;

	/**
	 * An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling <Titanium.Codec.encodeString> or <Titanium.Codec.encodeNumber> and placing the encoded value in the returned buffer.)
	 */
	value?: string | number;

}
/**
 * Argument passed to [createStream](Titanium.Stream.createStream).
 */
interface CreateStreamArgs {
	/**
	 * Mode to open the stream in.
	 */
	mode?: number;

	/**
	 * Object that the stream will read from or write to.
	 */
	source?: Titanium.Blob | Titanium.Buffer;

}
/**
 * The parameter passed to the <Titanium.UI.WebView.createPDF> or <Titanium.UI.WebView.createWebArchive>callback.
 */
interface DataCreationResult {
	/**
	 * The created data.
	 */
	data?: Titanium.Blob;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if the data creation successful or not.
	 */
	success?: boolean;

}
/**
 * Generic type for elements of returned `Array` from <Intl.DateTimeFormat.formatToParts>
 */
interface DateTimeFormattedPart {
	/**
	 * The type of the locale-specific token.
	 * See [MDN formatToParts documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts)
	 * for details on the possible types and typical values.
	 */
	type?: string;

	/**
	 * The locale-specific token value
	 */
	value?: string;

}
/**
 * Named parameters for <Titanium.Codec.decodeNumber>.
 */
interface DecodeNumberDict {
	/**
	 * byte order to decode with.
	 */
	byteOrder?: number;

	/**
	 * Index in the `source` buffer of the first byte of data to decode.
	 */
	position?: number;

	/**
	 * Buffer to decode.
	 */
	source: Titanium.Buffer;

	/**
	 * The encoding type to use.
	 */
	type: string;

}
/**
 * Named parameters for <Titanium.Codec.decodeString>.
 */
interface DecodeStringDict {
	/**
	 * Character set to use when encoding this string to bytes.
	 */
	charset?: string;

	/**
	 * Number of bytes to decode.
	 */
	length?: number;

	/**
	 * Index in the `source` buffer of the first byte of data to decode.
	 */
	position?: number;

	/**
	 * Buffer to decode.
	 */
	source: Titanium.Buffer;

}
/**
 * A simple object consisting of the position and size measurements. Effectively combines <Size> and <Point> but ensures numeric x/y values.
 */
interface Dimension extends Size {
	/**
	 * The x-axis coordinate of the position. When returned by <Titanium.UI.View.rect> the position is relative to it's parent.
	 */
	x?: number;

	/**
	 * The y-axis coordinate of the position. When returned by <Titanium.UI.View.rect> the position is relative to it's parent.
	 */
	y?: number;

}
/**
 * An extension of <Dimension> where Android returns additional absolute X/Y values/properties for <Titanium.UI.View.rect>
 */
interface DimensionWithAbsolutes extends Dimension {
	/**
	 * The x-axis coordinate of the position relative to the main window.
	 */
	absoluteX?: number;

	/**
	 * The y-axis coordinate of the position relative to the main window.
	 */
	absoluteY?: number;

}
/**
 * A simple object for specifying options when showing or dismissing a <Titanium.UI.iOS.DocumentViewer>.
 */
interface DocumentViewerOptions {
	/**
	 * Indicates whether to animate the transition.
	 */
	animated?: boolean;

	/**
	 * Anchors the options menu to the specified view.
	 */
	view?: Titanium.UI.View;

}
/**
 * Named parameters for <Titanium.Codec.encodeNumber>.
 */
interface EncodeNumberDict {
	/**
	 * Byte order to encode with.
	 */
	byteOrder?: number;

	/**
	 * Destination buffer.
	 */
	dest: Titanium.Buffer;

	/**
	 * Index in the `dest` buffer of the first byte of encoded data.
	 */
	position?: number;

	/**
	 * Number to encode.
	 */
	source: number;

	/**
	 * Encoding type to use.
	 */
	type: string;

}
/**
 * Named parameters for <Titanium.Codec.encodeString>.
 */
interface EncodeStringDict {
	/**
	 * Character encoding to use when encoding this string to bytes.
	 */
	charset?: string;

	/**
	 * Destination buffer.
	 */
	dest: Titanium.Buffer;

	/**
	 * Index in the `dest` buffer of the first byte of the encoded string.
	 */
	destPosition?: number;

	/**
	 * Source string to encode.
	 */
	source: string;

	/**
	 * Number of characters in `source` to encode.
	 */
	sourceLength?: number;

	/**
	 * Position in `source` to start encoding.
	 */
	sourcePosition?: number;

}
/**
 * Object passed to the error callback when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
 */
interface ErrorCallbackArgs extends FailureResponse {
	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

	/**
	 * Socket that experienced the error.
	 */
	socket?: Titanium.Network.Socket.TCP;

	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

}
/**
 * Properties used in any event or callback which needs to report a success or failure.
 */
interface ErrorResponse {
	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface EventsAuthorizationResponse {
	/**
	 * Error code, if any returned.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates whether the request succeeded.
	 */
	success?: boolean;

}
/**
 * Properties used in any event or callback which needs to report a failure.
 */
interface FailureResponse extends ErrorResponse {
	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

}
/**
 * An abstract datatype for specifying a text font.
 */
interface Font {
	/**
	 * Specifies the font family or specific font to use.
	 */
	fontFamily?: string;

	/**
	 * Font size, in platform-dependent units.
	 */
	fontSize?: number | string;

	/**
	 * Font style. Valid values are "italic" or "normal".
	 */
	fontStyle?: string;

	/**
	 * Font weight. Valid values are "bold", "semibold", "normal", "thin",
	 * "light" and "ultralight".
	 */
	fontWeight?: string;

	/**
	 * The text style for the font.
	 */
	textStyle?: string;

}
/**
 * Simple object returned in the callback from the
 * [forwardGeocoder](Titanium.Geolocation.forwardGeocoder) method.
 * Note that Android includes a number of extra fields.
 */
interface ForwardGeocodeResponse extends ErrorResponse {
	/**
	 * Estimated accuracy of the geocoding, in meters.
	 */
	accuracy?: number;

	/**
	 * Full address.
	 */
	address?: string;

	/**
	 * City name.
	 */
	city?: string;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Country name.
	 */
	country?: string;

	/**
	 * Country code.
	 */
	countryCode?: string;

	/**
	 * Country code. Same as `countryCode`.
	 */
	country_code?: string;

	/**
	 * Display address. Identical to `address`.
	 */
	displayAddress?: string;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Latitude of the geocoded address.
	 */
	latitude?: string;

	/**
	 * Longitude of the geocoded address.
	 */
	longitude?: string;

	/**
	 * Postal code.
	 */
	postalCode?: string;

	/**
	 * First line of region.
	 */
	region1?: string;

	/**
	 * Not used.
	 */
	region2?: string;

	/**
	 * Street name, without street address.
	 */
	street?: string;

	/**
	 * Street name.
	 */
	street1?: string;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

}
/**
 * Simple object representing a place, returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
interface GeocodedAddress {
	/**
	 * Full address.
	 */
	address?: string;

	/**
	 * City name.
	 */
	city?: string;

	/**
	 * Country name.
	 */
	country?: string;

	/**
	 * Country code.
	 */
	countryCode?: string;

	/**
	 * Latitude of the geocoded point.
	 */
	latitude?: number;

	/**
	 * Longitude of the geocoded point.
	 */
	longitude?: number;

	/**
	 * Postal code
	 */
	postalCode?: string;

	/**
	 * First line of region.
	 */
	region1?: string;

	/**
	 * Not used.
	 */
	region2?: string;

	/**
	 * State name.
	 */
	state?: string;

	/**
	 * Street name, without street address.
	 */
	street?: string;

	/**
	 * Street name.
	 */
	street1?: string;

}
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 */
interface GetUserNotificationSettings {
	/**
	 * The current alert settings.
	 */
	alertSetting?: number;

	/**
	 * The current alert style used to display notifications.
	 */
	alertStyle?: number;

	/**
	 * The current authorization status for using notifications.
	 */
	authorizationStatus?: number;

	/**
	 * The current badge settings.
	 */
	badgeSetting?: number;

	/**
	 * The current CarPlay settings.
	 */
	carPlaySetting?: number;

	/**
	 * Set of categories of user notification actions required by the applicaiton to use.
	 */
	categories?: Titanium.App.iOS.UserNotificationCategory[];

	/**
	 * The authorization status to play sounds for critical alerts.
	 * Available in Titanium SDK 7.4.0 and later.
	 */
	criticalAlertSetting?: number;

	/**
	 * The current lock-screen settings.
	 */
	lockScreenSetting?: number;

	/**
	 * The current notication-center settings.
	 */
	notificationCenterSetting?: number;

	/**
	 * A Boolean value indicating the system displays a button for in-app notification settings.
	 * Available in Titanium SDK 7.4.0 and later.
	 */
	providesAppNotificationSettings?: number;

	/**
	 * The current sound settings.
	 */
	soundSetting?: number;

	/**
	 * Notification types to use.
	 */
	types?: number[];

}
/**
 * A simple object defining a color gradient.
 */
interface Gradient {
	/**
	 * Set to `true` to continue filling with the final color beyond the `endPoint`.
	 */
	backfillEnd?: boolean;

	/**
	 * Set to `true` to continue filling with the starting color beyond the `startPoint`.
	 */
	backfillStart?: boolean;

	/**
	 * An array of colors, as a color name or hex triplet.
	 */
	colors?: string[] | GradientColorRef[];

	/**
	 * End point for the gradient.
	 */
	endPoint?: Point;

	/**
	 * For a radial gradient, the radius at the `endPoint`.
	 */
	endRadius?: number;

	/**
	 * Start point for the gradient.
	 */
	startPoint?: Point;

	/**
	 * For a radial gradient, the radius at the `startPoint`.
	 */
	startRadius?: number;

	/**
	 * Type of gradient, either 'linear' or 'radial'.
	 */
	type?: string;

}
/**
 * A simple object consisting of a color and an offset.
 */
interface GradientColorRef {
	/**
	 * Color value at this point in the gradient, as a color name or hex triplet.
	 */
	color?: string | Titanium.UI.Color;

	/**
	 * The color's normalized position within the gradient, ranging from 0 (start) to 1 (end).
	 */
	offset?: number;

}
/**
 * Simple object holding compass heading data.
 */
interface HeadingData {
	/**
	 * Accuracy of the compass heading, in platform-specific units.
	 */
	accuracy?: number;

	/**
	 * Declination in degrees from magnetic North.
	 */
	magneticHeading?: number;

	/**
	 * Timestamp for the heading data, in milliseconds.
	 */
	timestamp?: number;

	/**
	 * Declination in degrees from true North.
	 */
	trueHeading?: number;

	/**
	 * Raw geomagnetic data for the X axis.
	 */
	x?: number;

	/**
	 * Raw geomagnetic data for the Y axis.
	 */
	y?: number;

	/**
	 * Raw geomagnetic data for the Z axis.
	 */
	z?: number;

}
/**
 * Argument passed to the [getCurrentHeading](Titanium.Geolocation.getCurrentHeading) callback.
 */
interface HeadingResponse extends ErrorResponse {
	/**
	 * Error code.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * If `success` is true, the actual heading data.
	 */
	heading?: HeadingData;

	/**
	 * Indicates a successful operation.
	 */
	success?: boolean;

}
/**
 * Dictionary object of parameters for horizontal-only insets applied to [Table](Titanium.UI.TableView) and [List](Titanium.UI.ListView) views. Only `left` and `right` properties are used (see <Padding>).
 */
interface HorizontalInsets {
	/**
	 * Left padding/inset
	 */
	left?: number;

	/**
	 * Right padding/inset
	 */
	right?: number;

}
/**
 * Template that represents the basic appearance of a list item.
 */
interface ItemTemplate {
	/**
	 * Contains an array of subview templates to be added (in order) as children to this view.
	 */
	childTemplates?: ViewTemplate[];

	/**
	 * Contains key-value pairs of view events and their listeners that are applied to the ListItem.
	 */
	events?: any;

	/**
	 * Contains key-value pairs of view properties and their values that are applied to the ListItem.
	 */
	properties?: Dictionary<Titanium.UI.ListItem>;

}
/**
 * See [TextView.setLineSpacing](https://developer.android.com/reference/android/widget/TextView#setLineSpacing(float,%20float))
 */
interface LabelLineSpacing {
	/**
	 * The value in pixels that should be added to each line other than the last line. This will be applied after the multiplier
	 */
	add?: number;

	/**
	 * The value by which each line height other than the last line will be multiplied by
	 */
	multiply?: number;

}
/**
 * Dictionary object of parameters used to identify an incoming URL that is handled
 * by the application.
 */
interface LaunchOptionsType {
	/**
	 * The application or service that triggered the handled URL.
	 */
	source?: string;

	/**
	 * The url that was triggered by the application or service.
	 */
	url?: string;

}
/**
 * Represents displayed item data.
 */
interface ListDataItem {
	/**
	 * Contains key-value pairs of view properties and their values that are applied to the
	 * `ListItem`.
	 */
	properties?: Dictionary<Titanium.UI.ListItem>;

	/**
	 * Template ID configured with the <Titanium.UI.ListView.templates> property or
	 * <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT>.
	 */
	template?: string | number;

	[index: string]: any;
}
/**
 * The arguments for the <Titanium.UI.ListView.prefetch> and <Titanium.UI.ListView.cancelprefetch> events.
 */
interface ListItemEventType {
	/**
	 * The item ID bound to the list item that generated the event.
	 */
	itemId?: string;

	/**
	 * Item index.
	 */
	itemIndex?: number;

	/**
	 * List section if the item is contained in a list section.
	 */
	section?: Titanium.UI.ListSection;

	/**
	 * Section index.
	 */
	sectionIndex?: number;

}
/**
 * A simple object for specifying the animation properties to use when inserting or deleting
 * sections or cells, or scrolling the list.
 */
interface ListViewAnimationProperties {
	/**
	 * Whether this list change should be animated. Ignored if any `animationStyle` value is specified.
	 */
	animated?: boolean;

	/**
	 * Type of animation to use for cell insertions and deletions.
	 */
	animationStyle?: number;

	/**
	 * Specifies what position to scroll the selected cell to.
	 */
	position?: number;

}
/**
 * A simple object that represents an index entry in a `ListView`.
 */
interface ListViewIndexEntry {
	/**
	 * Section index associated with this title.
	 */
	index?: number;

	/**
	 * Title to display in the index bar.
	 */
	title?: string;

}
/**
 * The parameter for [setMarker](Titanium.UI.ListView.setMarker) and [addMarker](Titanium.UI.ListView.addMarker) methods.
 */
interface ListViewMarkerProps {
	/**
	 * The itemIndex of the reference item.
	 */
	itemIndex?: number;

	/**
	 * The sectionIndex of the reference item.
	 */
	sectionIndex?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface LocationAccuracyAuthorizationResponse extends ErrorResponse {
	/**
	 * The level of location accuracy the app has granted.
	 */
	accuracyAuthorization?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface LocationAuthorizationResponse extends ErrorResponse {
}
/**
 * Simple object holding the data for a location update.
 */
interface LocationCoordinates {
	/**
	 * Accuracy of the location update, in meters.
	 */
	accuracy?: number;

	/**
	 * Altitude of the location update, in meters.
	 */
	altitude?: number;

	/**
	 * Vertical accuracy of the location update, in meters.
	 */
	altitudeAccuracy?: number;

	/**
	 * The floor of the building on which the user is located.
	 */
	floor?: LocationCoordinatesFloor;

	/**
	 * Compass heading, in degrees. May be unknown if device is not moving. On
	 * iOS, a negative value indicates that the heading data is not valid.
	 */
	heading?: number;

	/**
	 * Latitude of the location update, in decimal degrees.
	 */
	latitude?: number;

	/**
	 * Longitude of the location update, in decimal degrees.
	 */
	longitude?: number;

	/**
	 * Current speed in meters/second. On iOS, a negative value indicates that the
	 * heading data is not valid or the accuracy is configured incorrectly.
	 * Note: Due to the Apple Geolocation API, set the <Titanium.Geolocation.accuracy>
	 * property to <Titanium.Geolocation.ACCURACY_BEST_FOR_NAVIGATION> in order to properly
	 * measure speed changes and prevent the app from returning negative values.
	 */
	speed?: number;

	/**
	 * Timestamp for this location update, in milliseconds.
	 */
	timestamp?: number;

}
/**
 * Simple object holding floor of the building on which the user is located.
 */
interface LocationCoordinatesFloor {
	/**
	 * The logical floor of the building.
	 */
	level?: number;

}
/**
 * Simple object describing a location provider.
 */
interface LocationProviderDict {
	/**
	 * Accuracy of the location provider, either fine (1) or coarse (2).
	 */
	accuracy?: number;

	/**
	 * Name of the location provider.
	 */
	name?: string;

	/**
	 * Power consumption for this provider, either low (1), medium (2), or high (3).
	 */
	power?: number;

}
/**
 * Argument passed to the [getCurrentPosition](Titanium.Geolocation.getCurrentPosition) callback.
 */
interface LocationResults extends ErrorResponse {
	/**
	 * If `success` is true, actual location data for this update.
	 */
	coords?: LocationCoordinates;

	/**
	 * If `success` is true, object describing the location provider generating this update.
	 */
	provider?: LocationProviderDict;

}
/**
 * Simple object passed to <Titanium.UI.createMatrix2D> to initialize a matrix.
 */
interface Matrix2DCreationDict {
	/**
	 * Point to rotate around, specified as a dictionary object with `x` and `y`
	 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
	 * rotated.
	 */
	anchorPoint?: Point;

	/**
	 * Rotation angle, in degrees. See the [rotate](Titanium.UI.Matrix2D.rotate) method
	 * for a discussion of rotation.
	 */
	rotate?: number;

	/**
	 * Scale the matrix by the specified scaling factor. The same scaling factor is used
	 * for both horizontal and vertical scaling.
	 */
	scale?: number;

}
/**
 * Simple object passed to <Titanium.UI.createMatrix3D> to initialize a matrix.
 */
interface Matrix3DCreationDict {
	/**
	 * Scale the matrix by the specified scaling factor.
	 */
	scale?: number;

}
/**
 * Simple object passed to <Titanium.UI.create2DMatrix> to initialize a matrix.
 */
interface MatrixCreationDict {
	/**
	 * Point to rotate around, specified as a dictionary object with `x` and `y`
	 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
	 * rotated.
	 */
	anchorPoint?: Point;

	/**
	 * Rotation angle, in degrees. See the [rotate](Titanium.UI.2DMatrix.rotate) method
	 * for a discussion of rotation.
	 */
	rotate?: number;

	/**
	 * Scale the matrix by the specified scaling factor. The same scaling factor is used
	 * for both horizontal and vertical scaling.
	 */
	scale?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface MediaAuthorizationResponse extends ErrorResponse {
}
/**
 * A full query descriptor for a filtering predicate.
 */
interface MediaQueryInfoType {
	/**
	 * Whether or not the predicate is for an exact match.  The default is `true`.
	 */
	exact?: boolean;

	/**
	 * The value for the given predicate. See the descriptions in <MediaQueryType> for information about which properties require which values.
	 */
	value?: number | string | boolean;

}
/**
 * A specifier for a media library query. By default, filters perform an exact match.
 */
interface MediaQueryType {
	/**
	 * The album artist to filter on. Value should be a String.
	 */
	albumArtist?: MediaQueryInfoType | string;

	/**
	 * The album artist persistent ID to filter on. Value should be a Number.
	 */
	albumArtistPersistentID?: MediaQueryInfoType | number;

	/**
	 * The album persistent ID to filter on. Value should be a Number.
	 */
	albumPersistentID?: MediaQueryInfoType | number;

	/**
	 * The album title to filter on. Value should be a String.
	 */
	albumTitle?: MediaQueryInfoType | string;

	/**
	 * The artist to filter on. Value should be a String.
	 */
	artist?: MediaQueryInfoType | string;

	/**
	 * The composer to filter on. Value should be a String.
	 */
	composer?: MediaQueryInfoType | string;

	/**
	 * The composer persistent ID to filter on. Value should be a Number.
	 */
	composerPersistentID?: MediaQueryInfoType | number;

	/**
	 * The genre to filter on. Value should be a String.
	 */
	genre?: MediaQueryInfoType | string;

	/**
	 * The genre persistent ID to filter on. Value should be a Number.
	 */
	genrePersistentID?: MediaQueryInfoType | number;

	/**
	 * A constant that specifies the ordering of the result array.
	 */
	grouping?: number;

	/**
	 * Filter by whether or not the item is a protected asset.
	 * Value should be a Boolean.
	 */
	hasProtectedAsset?: MediaQueryInfoType | boolean;

	/**
	 * Filter by whether or not the item is a cloud item.
	 * Value should be a Boolean.
	 */
	isCloudItem?: MediaQueryInfoType | boolean;

	/**
	 * Filter by whether or not the item is a compilation.
	 * The value should be a Boolean.
	 */
	isCompilation?: MediaQueryInfoType | boolean;

	/**
	 * The media type to filter on.
	 */
	mediaType?: MediaQueryInfoType | number;

	/**
	 * The persistent ID to filter on. Value should be a Number.
	 */
	persistentID?: MediaQueryInfoType | number;

	/**
	 * The play count to filter on. Value should be a Number.
	 */
	playCount?: MediaQueryInfoType | number;

	/**
	 * The podcast persistent ID to filter on. Value should be a Number.
	 */
	podcastPersistentID?: MediaQueryInfoType | number;

	/**
	 * The podcast title to filter on. Value should be a String.
	 */
	podcastTitle?: MediaQueryInfoType | string;

	/**
	 * The title to filter on. Value should be a String.
	 */
	title?: MediaQueryInfoType | string;

}
/**
 * Simple object passed to the [scanMediaFiles](Titanium.Media.Android.scanMediaFiles) callback.
 */
interface MediaScannerResponse {
	/**
	 * Path to the media file that was scanned.
	 */
	path?: string;

	/**
	 * URI to the file if it was scanned and added to the media library, or `null`
	 * if the file was not added.
	 */
	uri?: string;

}
/**
 * Dictionary of options for showing a menu popup with <Titanium.UI.iOS.MenuPopup.show>.
 */
interface MenuPopupShowParams {
	/**
	 * Determines whether the menu popup should be opened or closed animated.
	 */
	animated?: boolean;

	/**
	 * Indicates the arrow direction of the menu popup.
	 */
	arrowDirection?: number;

	/**
	 * The view where the menu pop is shown at.
	 */
	view: Titanium.UI.View;

}
/**
 * Reply message received from watch app.
 */
interface MessageReply {
	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Reply message from watchapp.
	 */
	message?: any;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

}
/**
 * An object for setting `min`/`max` value pairs.
 */
interface MinMaxOptions {
	/**
	 * Maximum value
	 */
	max?: number;

	/**
	 * Minimum value
	 */
	min?: number;

}
/**
 * Simple object used to describe the size of a movie.
 */
interface MovieSize {
	/**
	 * Height of the movie.
	 */
	height?: number;

	/**
	 * Width of the movie.
	 */
	width?: number;

}
/**
 * Simple object for specifying options to [openMusicLibrary](Titanium.Media.openMusicLibrary).
 */
interface MusicLibraryOptionsType {
	/**
	 * Set to `true` to allow the user to select multiple items from the library.
	 */
	allowMultipleSelections?: boolean;

	/**
	 * Boolean if the dialog should be animated when showing and hiding.
	 */
	animated?: boolean;

	/**
	 * Specifies that the library should be hidden automatically after media selection is completed.
	 */
	autohide?: boolean;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => void;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => void;

	/**
	 * An array of media type constants defining selectable media.
	 */
	mediaTypes?: number | number[];

	/**
	 * Function to call when the music library selection is made.
	 */
	success?: (param0: MusicLibraryResponseType) => void;

}
/**
 * Simple object passed to the [openMusicLibrary](Titanium.Media.openMusicLibrary)
 * `success` callback function.
 */
interface MusicLibraryResponseType {
	/**
	 * A list of all the items chosen by the user.
	 */
	items?: Titanium.Media.Item[];

	/**
	 * A single representative of the selected items.
	 */
	representative?: Titanium.Media.Item;

	/**
	 * Media types in this collection, represented as the bitwise OR of the media type
	 * values for all media types represented in `items`.
	 */
	types?: number;

}
/**
 * Dictionary object of parameters used to create a notification using
 * <Titanium.App.iOS.scheduleLocalNotification>.
 */
interface NotificationParams {
	/**
	 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
	 * to display.
	 */
	alertAction?: string;

	/**
	 * Alert message to display.
	 */
	alertBody?: string;

	/**
	 * Image to display instead of `Default.png` when launching the application.
	 */
	alertLaunchImage?: string;

	/**
	 * Alert subtitle to display.
	 */
	alertSubtitle?: string;

	/**
	 * Alert title to display.
	 */
	alertTitle?: string;

	/**
	 * Notification attachments to display.
	 */
	attachments?: UserNotificationAttachment[];

	/**
	 * Application badge value.
	 */
	badge?: number;

	/**
	 * String identifier of category of actions to be displayed for an interactive notification.
	 */
	category?: string;

	/**
	 * Date and time for the notification to occur.
	 */
	date?: Date;

	/**
	 * The notification identifier.
	 */
	identifier: string;

	/**
	 * Region the notification will be triggered in. Allowed parameter are:
	 * - `latitude`: Latitude of the location center, in decimal degrees (required).
	 * - `longitude`: Longitude of the location center, in decimal degrees (required).
	 * - `triggersOnce`: Whether or not the notification will only fire once (optional, default: true).
	 */
	region?: any;

	/**
	 * Interval to repeat the notification. One of `weekly`, `daily`, `yearly,` `monthly`.
	 */
	repeat?: string;

	/**
	 * Path to the sound file to play when notification occurs, relative to the `Resources` folder.
	 */
	sound?: string;

	/**
	 * The string the notification adds to the category's summary format string.
	 */
	summaryArgument?: string;

	/**
	 * The number of items the notification adds to the category's summary format string.
	 */
	summaryArgumentCount?: string;

	/**
	 * Timezone of the date configured for the notification. If not set, the system timezone is used.
	 */
	timezone?: string;

	/**
	 * Data to pass to the application with the notification event.
	 */
	userInfo?: any;

}
/**
 * Generic type for elements of returned `Array` from <Intl.Number.formatToParts>
 */
interface NumberFormattedPart {
	/**
	 * The type of the locale-specific token.
	 * See [MDN formatToParts documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts)
	 * for details on the possible types and typical values.
	 */
	type?: string;

	/**
	 * The locale-specific token value
	 */
	value?: string;

}
/**
 * An object returned when the <Titanium.UI.WebView.onlink> callback is fired.
 */
interface OnLinkURLResponse {
	/**
	 * The url of the link that should be navigated to.
	 */
	url?: string;

}
/**
 * The optional options to pass to the URL handling (iOS 10+). Pass a
 * dictionary with one or more of the following string-keys:
 *     * `UIApplicationOpenURLOptionsSourceApplicationKey` (String value)
 *     * `UIApplicationOpenURLOptionsAnnotationKey` (Array value)
 *     * `UIApplicationOpenURLOptionsOpenInPlaceKey` (Boolean value)
 *     * `UIApplicationOpenURLOptionUniversalLinksOnly` (Boolean value)
 * Read more about the available keys in the [Apple documentation](https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionskey?language=objc).
 */
interface OpenURLOptions {
	/**
	 * When you include this key in the options dictionary, the method opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL.
	 */
	UIApplicationOpenURLOptionUniversalLinksOnly?: boolean;

	/**
	 * contains the information passed to a document interaction controller object's annotation property.
	 */
	UIApplicationOpenURLOptionsAnnotationKey?: any[];

	/**
	 * When the value of this property is `false`, you must copy the document to maintain access to it. If the flag is not set, you also must copy the document before you can use it.
	 */
	UIApplicationOpenURLOptionsOpenInPlaceKey?: boolean;

	/**
	 * The value of this key is an String containing the bundle ID of the app that made the request. If the request originated from another app belonging to your team, UIKit sets the value of this key to the ID of that app. If the team identifier of the originating app is different than the team identifier of the current app, the value of the key is nil.
	 */
	UIApplicationOpenURLOptionsSourceApplicationKey?: string;

}
/**
 * Simple object passed to the <Titanium.Android.Activity> callbacks for
 * onPrepareOptionsMenu and onCreateOptionsMenu.
 * Additional properties may be set on the Object.
 */
interface OptionsMenuCallbackObject {
	/**
	 * The relevant Menu.
	 */
	menu?: Titanium.Android.Menu;

}
/**
 * Dictionary object of parameters for the padding/insets applied to all kinds of views.
 */
interface Padding extends HorizontalInsets {
	/**
	 * Bottom padding/inset
	 */
	bottom?: number;

	/**
	 * Top padding/inset
	 */
	top?: number;

}
/**
 * An abstract datatype for specifying an Paragraph style attribute.
 */
interface ParagraphAttribute {
	/**
	 * The text alignment of the receiver.
	 */
	alignment?: number;

	/**
	 * A Boolean value indicating whether the system may tighten inter-character spacing
	 * before truncating text.
	 */
	allowsDefaultTighteningForTruncation?: boolean;

	/**
	 * The indentation of the first line of the receiver.
	 */
	firstLineHeadIndent?: number | string;

	/**
	 * The indentation of the lines of lines other than the first.
	 */
	headIndent?: number | string;

	/**
	 * The threshold of paragraph for hyphenation.
	 */
	hyphenationFactor?: number;

	/**
	 * The mode that should be used to break lines in the receiver.
	 */
	lineBreakMode?: number;

	/**
	 * The line height multiple.
	 */
	lineHeightMultiple?: number;

	/**
	 * The distance in points between the bottom of one line fragment and the top of the next.
	 */
	lineSpacing?: number | string;

	/**
	 * The maximum line height of receiver.
	 */
	maximumLineHeight?: number | string;

	/**
	 * The minimum height of receiver.
	 */
	minimumLineHeight?: number | string;

	/**
	 * The space after the end of the paragraph.
	 */
	paragraphSpacingAfter?: number | string;

	/**
	 * The distance between the top of paragraph and the beginning of its text content.
	 */
	paragraphSpacingBefore?: number | string;

	/**
	 * The trailing indentation of the receiver.
	 */
	tailIndent?: number | string;

}
/**
 * Simple object for specifying options to
 * [openPhotoGallery](Titanium.Media.openPhotoGallery).
 */
interface PhotoGalleryOptionsType {
	/**
	 * Specifies if the media should be editable after capture/selection.
	 */
	allowEditing?: boolean;

	/**
	 * Specifies if the user should be able to select multiple photos.
	 */
	allowMultiple?: boolean;

	/**
	 * Specifies if the video should be transcoded (using highest quality preset) . If set to false no video transcoding will be performed.
	 */
	allowTranscoding?: boolean;

	/**
	 * Specifies if the dialog should be animated upon showing and hiding.
	 */
	animated?: boolean;

	/**
	 * Controls the type of arrow and position of the popover.
	 */
	arrowDirection?: number;

	/**
	 * Specifies if the photo gallery should be hidden automatically after the media
	 * selection is completed.
	 */
	autohide?: boolean;

	/**
	 * Function to call if the user presses the cancel button.
	 */
	cancel?: (param0: FailureResponse) => void;

	/**
	 * Function to call upon receiving an error.
	 */
	error?: (param0: FailureResponse) => void;

	/**
	 * Array of media type constants to allow.
	 * Live photos is only supported on the iOS platform, starting with iOS 9.1. If you want
	 * to allow live photos with <Titanium.Media.MEDIA_TYPE_LIVEPHOTO>, you also need to specify
	 * at least <Titanium.Media.MEDIA_TYPE_PHOTO> as a fallback. If you do not allow live
	 * photos, they still can be selected, but will be represented as a normal static photo.
	 */
	mediaTypes?: string[];

	/**
	 * View to position the photo gallery popover on top of.
	 */
	popoverView?: Titanium.UI.View;

	/**
	 * Specifies number of media item that can be selected.
	 */
	selectionLimit?: boolean;

	/**
	 * Function to call when the photo gallery is closed after a successful selection.
	 */
	success?: ((param0: CameraMediaItemType) => void) | ((param0: CameraMediaMultipleItemsType) => void);

}
/**
 * A pair of coordinates used to describe the location of a <Titanium.UI.View>.
 */
interface Point {
	/**
	 * The x-axis coordinate of this point.
	 */
	x?: number | string;

	/**
	 * The y-axis coordinate of this point.
	 */
	y?: number | string;

}
/**
 * Simple `Error` argument provided to the callback from the
 * [executeAllAsync](Titanium.Database.DB.executeAllAsync) method in case of failure
 */
interface PossibleBatchQueryError {
	/**
	 * Index of the failed query
	 */
	index?: number;

}
/**
 * The parameter passed to the `error` callback of <PreviewImageOptions>.
 */
interface PreviewImageError extends FailureResponse {
	/**
	 * Error code, if applicable.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Description of the error.
	 * @deprecated Use `error` property instead
	 */
	message: never;

	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

}
/**
 * Options passed to <Titanium.Media.previewImage>.
 */
interface PreviewImageOptions {
	/**
	 * Function called back if the preview fails. Check the `message` property of passed back parameter.
	 */
	error?: (param0: PreviewImageError) => void;

	/**
	 * The image to preview. Must be a blob based on a file, such as from <Titanium.Filesystem.File.read>.
	 */
	image?: Titanium.Blob;

	/**
	 * Function to be called back if the preview succeeds. No info is passed.
	 */
	success?: (param0: SuccessResponse) => void;

}
/**
 * Argument passed to the callback each time the
 * [pump](Titanium.Stream.pump) operation has new data to deliver.
 */
interface PumpCallbackArgs extends ErrorResponse {
	/**
	 * Buffer object holding the data currently being pumped to the handler method.
	 */
	buffer?: Titanium.Buffer;

	/**
	 * Number of bytes being passed to this invocation of the handler, or
	 * -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Stream being read from.
	 */
	source?: Titanium.IOStream;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

	/**
	 * Total number of bytes read from the stream so far,
	 * including the data passed to this current invocation of the handler.
	 */
	totalBytesProcessed?: number;

}
/**
 * Simple object for specifying push notification options to
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
 */
interface PushNotificationConfig {
	/**
	 * Callback function invoked upon receiving a new push notification.
	 */
	callback?: (param0: PushNotificationData) => void;

	/**
	 * Callback function called when an error occurs during registration.
	 */
	error?: (param0: PushNotificationErrorArg) => void;

	/**
	 * Callback function called when the push registration is successfully completed.
	 */
	success?: (param0: PushNotificationSuccessArg) => void;

	/**
	 * Array of `NOTIFICATION_TYPE` constants that the application would like to receive.
	 */
	types?: number[];

}
/**
 * A simple object representing a push notification.
 */
interface PushNotificationData {
	/**
	 * The `userinfo` dictionary passed to the Apple Push Notification Service.
	 */
	data?: any;

	/**
	 * Boolean indicating if notification was received while app was in background.
	 */
	inBackground?: boolean;

}
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) error callback.
 */
interface PushNotificationErrorArg extends FailureResponse {
	/**
	 * Error code. Returns a non-zero value.
	 */
	code?: number;

	/**
	 * Indicates if the operation succeeded. Returns `false`.
	 */
	success?: boolean;

	/**
	 * The value of this string is always "remote".
	 */
	type?: string;

}
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) success callback.
 */
interface PushNotificationSuccessArg extends SuccessResponse {
	/**
	 * Error code. Returns 0.
	 */
	code?: number;

	/**
	 * The device token which this device was registered for.
	 */
	deviceToken?: string;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

	/**
	 * The value of this string is always "remote".
	 */
	type?: string;

}
/**
 * Argument passed to the read callback when an asynchronous [read](Titanium.Stream.read) operation
 * finishes.
 */
interface ReadCallbackArgs extends ErrorResponse {
	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Stream being read.
	 */
	source?: Titanium.IOStream;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

}
/**
 * An Object describing the current ready state. See [onreadystatechange](Titanium.Network.HTTPClient.onreadystatechange) for more information.
 */
interface ReadyStatePayload {
	/**
	 * The state for which `onreadystatechange` was invoked. Set to one of `Titanium.Network.HTTPClient` ready-state constants
	 */
	readyState?: number;

}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestCameraAccessResult extends ErrorResponse {
}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestMusicLibraryAccessResult extends ErrorResponse {
}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestPermissionAccessResult extends ErrorResponse {
}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestPhotoGalleryAccessResult extends ErrorResponse {
}
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
interface RequestStorageAccessResult extends ErrorResponse {
}
/**
 * Simple object returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
interface ReverseGeocodeResponse extends ErrorResponse {
	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * An array of reverse-geocoded addresses matching the requested location.
	 */
	places?: GeocodedAddress[];

}
/**
 * An Object describing the current audio route.
 */
interface RouteDescription {
	/**
	 * An Array of current input ports for the session. See the `AUDIO_SESSION_PORT` constants.
	 */
	inputs?: string[];

	/**
	 * An Array of current output ports for the session. See the `AUDIO_SESSION_PORT` constants.
	 */
	outputs?: string[];

}
/**
 * Represents the custom edit action for a ListItem.
 */
interface RowActionType {
	/**
	 * The background color of the row action.
	 */
	color?: string;

	/**
	 * The [identifier](RowActionType. identifier) of the row action. Only included in the event
	 * if previously defined. Available in Titanium 6.0.0 and later.
	 */
	identifier?: string;

	/**
	 * The style of the row action.
	 */
	style: number;

	/**
	 * The title of the row action.
	 */
	title: string;

}
/**
 * The parameter passed to the <Titanium.Media.takeScreenshot> callback.
 */
interface ScreenshotResult {
	/**
	 * The screenshot image.
	 */
	media?: Titanium.Blob;

}
/**
 * The search bar token for the <Titanium.UI.SearchBar.insertTokenAtIndex> method.
 */
interface SearchBarToken {
	/**
	 * The identifier of the search bar token.
	 */
	identifier: string;

	/**
	 * The image of the search bar token.
	 */
	image?: string;

	/**
	 * The text of the search bar token (displayed in the search bar).
	 */
	text: string;

}
/**
 * The parameter passed to the <Titanium.UI.WebView.findString>.
 */
interface SearchResult {
	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if string found or not.
	 */
	success?: boolean;

}
/**
 * The protocol that the <Titanium.Network.HTTPClient.securityManager> must implement.
 */
interface SecurityManagerProtocol {
	/**
	 * The <APSConnectionDelegate> for this connection.
	 */
	connectionDelegateForUrl(url: any): APSConnectionDelegate;

	/**
	 * Returns an array of objects implementing the [X509KeyManager](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html) protocol for the SSL Context.
	 */
	getKeyManagers(proxy: any): any[];

	/**
	 * Returns an array of objects implementing the [X509TrustManager](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html) protocol for the SSL Context.
	 */
	getTrustManagers(proxy: any): any[];

	/**
	 * Returns if the security manager will participate in authentication of this end point.
	 */
	willHandleURL(url: any): boolean;

}
/**
 * The arguments for the <Titanium.UI.ListView.itemsselected> event.
 */
interface SelectedItem {
	/**
	 * Item index.
	 */
	itemIndex?: number;

	/**
	 * List section if the item is contained in a list section.
	 */
	section?: Titanium.UI.ListSection;

	/**
	 * Section index.
	 */
	sectionIndex?: number;

}
/**
 * The arguments for the <Titanium.UI.TableView.rowsselected> event.
 */
interface SelectedRowObject {
	/**
	 * Row index.
	 */
	index?: number;

	/**
	 * Table view row object.
	 */
	row?: Titanium.UI.TableViewRow;

	/**
	 * Properties of the row. Use this property rather than `row` to access any custom row properties.
	 */
	rowData?: Dictionary<Titanium.UI.TableViewRow>;

	/**
	 * Table view section object, if the clicked row is contained in a section.
	 */
	section?: Titanium.UI.TableViewSection;

}
/**
 * Options passed to <Titanium.Android.createServiceIntent>.
 */
interface ServiceIntentOptions {
	/**
	 * One of the `START_*` constants from <Titanium.Android> to specify the "stickiness" of the Service when Android shuts down the host application.
	 */
	startMode?: number;

	/**
	 * URL for the service's JavaScript.
	 */
	url?: string;

}
/**
 * Object of options for <Titanium.UI.iOS.ApplicationShortcuts.addDynamicShortcut>.
 */
interface ShortcutParams {
	/**
	 * The icon to be displayed on the application shortcut. You can either use one of the constants like
	 * <Titanium.UI.iOS.SHORTCUT_ICON_TYPE_COMPOSE>, a local image specified by the image path or a reference to a
	 * <Titanium.Contacts.Person>.
	 */
	icon?: number | string | Titanium.Contacts.Person;

	/**
	 * The unique key for the application shortcut. Equates to the underlying `UIApplicationShortcutItemIconType` key
	 */
	identifier: string;

	/**
	 * The subtitle displayed on the application shortcut.
	 */
	subtitle?: string;

	/**
	 * The title of the application shortcut.
	 */
	title: string;

	/**
	 * The userInfo of the application shortcut.
	 */
	userInfo?: any;

}
/**
 * Dictionary of options for <Titanium.UI.iPad.Popover.show>.
 */
interface ShowPopoverParams {
	/**
	 * Indicates whether to animate showing the popover.
	 */
	animated?: boolean;

	/**
	 * Sets the arrow position of the popover relative to the attached view object's dimensions
	 * when showing the popover.
	 */
	rect?: Dimension;

	/**
	 * Attaches the popover to the specified view when showing the popover.
	 */
	view: Titanium.UI.View;

}
/**
 * A simple object consisting of size measurements.
 */
interface Size {
	/**
	 * The height measurement.
	 */
	height?: number;

	/**
	 * The width measurement.
	 */
	width?: number;

}
/**
 * The parameter passed to the <Titanium.UI.WebView.takeSnapshot> callback.
 */
interface SnapshotResult {
	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * The snapshot image.
	 */
	snapshot?: Titanium.Blob;

	/**
	 * Indicates if the snapshot taken.
	 */
	success?: boolean;

}
/**
 * The optional options to pass to the <Titanium.UI.WebView.findString>. Pass a
 * dictionary with one or more of the following string-keys:
 *     * `caseSensitive` (Boolean value)
 *     * `backward` (Boolean value)
 *     * `wraps` (Boolean value)
 */
interface StringSearchOptions {
	/**
	 * The direction to search from the current selection. The search will respect the writing direction of the document
	 */
	backward?: boolean;

	/**
	 * Whether or not the search should be case sensitive.
	 */
	caseSensitive?: boolean;

	/**
	 * Whether the search should start at the beginning of the document once it reaches the end.
	 */
	wraps?: boolean;

}
/**
 * Properties used in any event or callback which needs to report a success.
 */
interface SuccessResponse extends ErrorResponse {
	/**
	 * Error code. Returns 0.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Indicates if the operation succeeded. Returns `true`.
	 */
	success?: boolean;

}
/**
 * Dictionary object of parameters for the 2nd parameter of the <Titanium.UI.iOS.systemButton> method
 * to pass additional configuration options like `weight` and `size`. Available in Titanium SDK 10.1.0
 * and later.
 */
interface SystemImageParameters {
	/**
	 * The symbol point size to use for the SF Symbol
	 */
	size?: number;

	/**
	 * The symbol weight to use for the SF Symbol.
	 * Can be one of `ultralight`, `light`, `thin`, `normal`, `semibold`, `bold`, `heavy` or `black`.
	 */
	weight?: string;

}
/**
 * Dictionary to specify edge insets for <Titanium.UI.Tab.iconInsets>. Difference from typical <Padding> is that `right` and `bottom` are ignored and calculated internally from `top`/`left` values.
 */
interface TabIconInsets extends Padding {
	/**
	 * Bottom padding/inset
	 */
	bottom: never;

	/**
	 * Left inset.
	 */
	left?: number;

	/**
	 * Right padding/inset
	 */
	right: never;

	/**
	 * Top inset.
	 */
	top?: number;

}
/**
 * A simple object for specifying the animation properties to use when inserting or deleting rows, or scrolling the table.
 */
interface TableViewAnimationProperties {
	/**
	 * Whether this table change should be animated. Ignored if any `animationStyle` value is specified.
	 */
	animated?: boolean;

	/**
	 * Type of animation to use for row insertions and deletions.
	 */
	animationStyle?: number;

	/**
	 * Specifies what position to scroll the selected row to.
	 */
	position?: number;

}
/**
 * A simple object that represents an index entry in a `TableView`.
 */
interface TableViewIndexEntry {
	/**
	 * Row index associated with this item.
	 */
	index?: number;

	/**
	 * Title to display in the index bar for this item.
	 */
	title?: string;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.padding> that describes the padding. Most notable difference from typical <Padding> is that `top`/`bottom` are only supported on Android.
 */
interface TextFieldPadding extends Padding {
	/**
	 * Bottom padding (Android only, since 6.1.0)
	 */
	bottom?: number;

	/**
	 * Left padding
	 */
	left?: number;

	/**
	 * Right padding
	 */
	right?: number;

	/**
	 * Top padding (Android only, since 6.1.0)
	 */
	top?: number;

}
/**
 * Simple object passed to the thumbnail callback in response to the
 * [requestThumbnailImagesAtTimes](Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes)
 * method.
 */
interface ThumbnailResponse extends ErrorResponse {
	/**
	 * Error code. Returns `0` if `success` is `true`.
	 */
	code?: number;

	/**
	 * Thumbnail image, as a `Blob`.
	 */
	image?: Titanium.Blob;

	/**
	 * Time offset for the thumbnail, in seconds.
	 */
	time?: number;

}
/**
 * An abstract type to represent a metadata item inside the `metadata` event (iOS only).
 */
interface TiMetadataItemType {
	/**
	 * A dictionary of the additional attributes.
	 */
	extraAttributes?: any;

	/**
	 * The key of the metadata item, e.g. "title".
	 */
	key?: string;

	/**
	 * The key-path of the metadata item.
	 */
	keySpace?: string;

	/**
	 * The value of the metadata item. Can be represented as various types.
	 */
	value?: string | number | boolean;

}
/**
 * The top-level Titanium module.
 */
declare namespace Titanium {
	/**
	 * Date of the Titanium build.
	 */
	const buildDate: string;

	/**
	 * Git hash of the Titanium build.
	 */
	const buildHash: string;

	/**
	 * User-agent string used by Titanium.
	 */
	let userAgent: string;

	/**
	 * Version of Titanium that is executing.
	 */
	const version: string;

	/**
	 * Adds the specified callback as an event listener for the named event.
	 */
	function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	/**
	 * Creates a new buffer based on the params.
	 */
	function createBuffer(params: CreateBufferArgs): Titanium.Buffer;

	/**
	 * Fires a synthesized event to any registered listeners.
	 */
	function fireEvent(name: string, event?: any): void;

	/**
	 * Removes the specified callback as an event listener for the named event.
	 */
	function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	/**
	 * The top-level Android module.
	 */
	namespace Android {
		/**
		 * User switched airplane mode on or off.
		 */
		const ACTION_AIRPLANE_MODE_CHANGED: string;

		/**
		 * List all applications.
		 */
		const ACTION_ALL_APPS: string;

		/**
		 * Handle an incoming phone call.
		 */
		const ACTION_ANSWER: string;

		/**
		 * Used to indicate that the data is an attachment.
		 */
		const ACTION_ATTACH_DATA: string;

		/**
		 * Listen to battery state change status.
		 */
		const ACTION_BATTERY_CHANGED: string;

		/**
		 * Indicates low battery condition on the device.
		 */
		const ACTION_BATTERY_LOW: string;

		/**
		 * Inidicates the battery is now okay after being low.
		 */
		const ACTION_BATTERY_OKAY: string;

		/**
		 * Indicates the system has finished booting.
		 */
		const ACTION_BOOT_COMPLETED: string;

		/**
		 * Show activity for reporting a bug.
		 */
		const ACTION_BUG_REPORT: string;

		/**
		 * Perform a call to someone specified by the `data` property.
		 */
		const ACTION_CALL: string;

		/**
		 * User pressed the call button.
		 */
		const ACTION_CALL_BUTTON: string;

		/**
		 * The camera button was pressed.
		 */
		const ACTION_CAMERA_BUTTON: string;

		/**
		 * Display an activity chooser.
		 */
		const ACTION_CHOOSER: string;

		/**
		 * User dismissed a temporary system dialog, such as the notification drawer or recent-app drawer.
		 */
		const ACTION_CLOSE_SYSTEM_DIALOGS: string;

		/**
		 * The device's configuration changed.
		 */
		const ACTION_CONFIGURATION_CHANGED: string;

		/**
		 * Create a shortcut.
		 */
		const ACTION_CREATE_SHORTCUT: string;

		/**
		 * Date changed.
		 */
		const ACTION_DATE_CHANGED: string;

		/**
		 * Default action, which is `Titanium.Android.ACTION_VIEW`
		 */
		const ACTION_DEFAULT: string;

		/**
		 * Delete the data specified by the Intent's `data` property.
		 */
		const ACTION_DELETE: string;

		/**
		 * Indicates a low memory condition on the device.
		 */
		const ACTION_DEVICE_STORAGE_LOW: string;

		/**
		 * Dial a number specified by the Intent's `data` property.
		 */
		const ACTION_DIAL: string;

		/**
		 * Provide editable access to the data specified by the Intent's `data` property.
		 */
		const ACTION_EDIT: string;

		/**
		 * Allow the user to select a particular kind of data specified by the Intent's `type` property.
		 */
		const ACTION_GET_CONTENT: string;

		/**
		 * GTalk connection has been established.
		 */
		const ACTION_GTALK_SERVICE_CONNECTED: string;

		/**
		 * GTalk connection has been disconnected.
		 */
		const ACTION_GTALK_SERVICE_DISCONNECTED: string;

		/**
		 * A wired headset has been plugged in or unplugged.
		 */
		const ACTION_HEADSET_PLUG: string;

		/**
		 * An input method has been changed.
		 */
		const ACTION_INPUT_METHOD_CHANGED: string;

		/**
		 * Insert an empty item into the given container.
		 */
		const ACTION_INSERT: string;

		/**
		 * Pick an existing item or insert an empty item, then edit it.
		 */
		const ACTION_INSERT_OR_EDIT: string;

		/**
		 * Start as the main entry point.
		 */
		const ACTION_MAIN: string;

		/**
		 * Indicates low memory condition notification acknowledged by user and package management should be started.
		 */
		const ACTION_MANAGE_PACKAGE_STORAGE: string;

		/**
		 * External media was removed from SD card slot, but mount point was not unmounted.
		 */
		const ACTION_MEDIA_BAD_REMOVAL: string;

		/**
		 * The media button was pressed.
		 */
		const ACTION_MEDIA_BUTTON: string;

		/**
		 * External media is present and being disk-checked.
		 */
		const ACTION_MEDIA_CHECKING: string;

		/**
		 * User has expressed the desire to remove the external storage media.
		 */
		const ACTION_MEDIA_EJECT: string;

		/**
		 * External media is present and mounted at its mount point.
		 */
		const ACTION_MEDIA_MOUNTED: string;

		/**
		 * External media is present, but is using an incompatible filesystem or is blank.
		 */
		const ACTION_MEDIA_NOFS: string;

		/**
		 * External media has been removed.
		 */
		const ACTION_MEDIA_REMOVED: string;

		/**
		 * The media scanner has finished scanning a directory.
		 */
		const ACTION_MEDIA_SCANNER_FINISHED: string;

		/**
		 * Request the media scanner to scan a file and add it to the media database.
		 */
		const ACTION_MEDIA_SCANNER_SCAN_FILE: string;

		/**
		 * The media scanner has started scanning a directory.
		 */
		const ACTION_MEDIA_SCANNER_STARTED: string;

		/**
		 * External media is unmounted because it is being shared via USB mass storage.
		 */
		const ACTION_MEDIA_SHARED: string;

		/**
		 * Corresponds to the Android `Intent.ACTION_MEDIA_UNMOUNTABLE` constant.
		 */
		const ACTION_MEDIA_UNMOUNTABLE: string;

		/**
		 * External media is present, but not mounted at its mount point.
		 */
		const ACTION_MEDIA_UNMOUNTED: string;

		/**
		 * An outgoing call is about to be placed.
		 */
		const ACTION_NEW_OUTGOING_CALL: string;

		/**
		 * A new application package has been installed on the device.
		 */
		const ACTION_PACKAGE_ADDED: string;

		/**
		 * An existing application package has been changed.
		 */
		const ACTION_PACKAGE_CHANGED: string;

		/**
		 * The user has cleared the data of a package.
		 */
		const ACTION_PACKAGE_DATA_CLEARED: string;

		/**
		 * An existing application package has been removed from the device.
		 */
		const ACTION_PACKAGE_REMOVED: string;

		/**
		 * A new version of an application package has been installed, replacing an existing version that was previously installed.
		 */
		const ACTION_PACKAGE_REPLACED: string;

		/**
		 * The user has restarted a package, and all of its processes have been killed.
		 */
		const ACTION_PACKAGE_RESTARTED: string;

		/**
		 * Pick an item from the directory indicated by the Intent's `data` property.
		 */
		const ACTION_PICK: string;

		/**
		 * Pick an activity given an intent.
		 */
		const ACTION_PICK_ACTIVITY: string;

		/**
		 * External power has been connected to the device.
		 */
		const ACTION_POWER_CONNECTED: string;

		/**
		 * External power has been disconnected from the device.
		 */
		const ACTION_POWER_DISCONNECTED: string;

		/**
		 * Show power usage information to the user.
		 */
		const ACTION_POWER_USAGE_SUMMARY: string;

		/**
		 * Content provider published new events or items.
		 */
		const ACTION_PROVIDER_CHANGED: string;

		/**
		 * Device rebooted.
		 */
		const ACTION_REBOOT: string;

		/**
		 * Run the data.
		 */
		const ACTION_RUN: string;

		/**
		 * Sent when the device goes to sleep and becomes non-interactive.
		 */
		const ACTION_SCREEN_OFF: string;

		/**
		 * Sent when the device wakes up and becomes interactive.
		 */
		const ACTION_SCREEN_ON: string;

		/**
		 * Perform a search.
		 */
		const ACTION_SEARCH: string;

		/**
		 * Start action associated with long pressing on the search key.
		 */
		const ACTION_SEARCH_LONG_PRESS: string;

		/**
		 * Deliver data to another activity.
		 */
		const ACTION_SEND: string;

		/**
		 * Deliver data to the recipient specified by the Intent's `data` property.
		 */
		const ACTION_SENDTO: string;

		/**
		 * Deliver multiple data to another activity.
		 */
		const ACTION_SEND_MULTIPLE: string;

		/**
		 * Show settings for choosing the system wallpaper.
		 */
		const ACTION_SET_WALLPAPER: string;

		/**
		 * Device is shutting down.
		 */
		const ACTION_SHUTDOWN: string;

		/**
		 * Perform data synchronization.
		 */
		const ACTION_SYNC: string;

		/**
		 * Start the platform-defined tutorial.
		 */
		const ACTION_SYSTEM_TUTORIAL: string;

		/**
		 * The time was set.
		 */
		const ACTION_TIME_CHANGED: string;

		/**
		 * The current time changed.  Sent every minute.
		 */
		const ACTION_TIME_TICK: string;

		/**
		 * A user ID was removed from the system.
		 */
		const ACTION_UID_REMOVED: string;

		/**
		 * Sent when the user is present after device wakes up.
		 */
		const ACTION_USER_PRESENT: string;

		/**
		 * Display data to the user.
		 */
		const ACTION_VIEW: string;

		/**
		 * Start voice command.
		 */
		const ACTION_VOICE_COMMAND: string;

		/**
		 * The current system wallpaper has changed.
		 */
		const ACTION_WALLPAPER_CHANGED: string;

		/**
		 * Perform a web search.
		 */
		const ACTION_WEB_SEARCH: string;

		/**
		 * Notification category indicating an alarm or timer.
		 */
		const CATEGORY_ALARM: string;

		/**
		 * Set if the activity should be considered as an alternative action to the data the user is currently viewing.
		 */
		const CATEGORY_ALTERNATIVE: string;

		/**
		 * Activity can browse the Internet.
		 */
		const CATEGORY_BROWSABLE: string;

		/**
		 * Notification category indicating an incoming call (voice or video) or similar synchronous
		 * communication request.
		 */
		const CATEGORY_CALL: string;

		/**
		 * Activity should be used as the default action to perform on a piece of data.
		 */
		const CATEGORY_DEFAULT: string;

		/**
		 * Activity is in the development preference panel.
		 */
		const CATEGORY_DEVELOPMENT_PREFERENCE: string;

		/**
		 * Notification category indicating an asynchronous bulk message (email).
		 */
		const CATEGORY_EMAIL: string;

		/**
		 * Activity can run inside a parent activity.
		 */
		const CATEGORY_EMBED: string;

		/**
		 * Notification category indicating an error in background operation or authentication status.
		 */
		const CATEGORY_ERROR: string;

		/**
		 * Notification category indicating a calendar event.
		 */
		const CATEGORY_EVENT: string;

		/**
		 * To be used as test code for framework instrumentation tests.
		 */
		const CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;

		/**
		 * Home activity, the first activity that is displayed when the device boots.
		 */
		const CATEGORY_HOME: string;

		/**
		 * Provides information about the package it is in.
		 */
		const CATEGORY_INFO: string;

		/**
		 * Activity is in the device's launcher.
		 */
		const CATEGORY_LAUNCHER: string;

		/**
		 * Notification category indicating an incoming direct message (SMS, instant message, etc.).
		 */
		const CATEGORY_MESSAGE: string;

		/**
		 * This activity may be exercised by the monkey or other automated test tools.
		 */
		const CATEGORY_MONKEY: string;

		/**
		 * Activity can open raw `file://` or `scheme://` URIs.
		 */
		const CATEGORY_OPENABLE: string;

		/**
		 * This activity is a preference panel.
		 */
		const CATEGORY_PREFERENCE: string;

		/**
		 * Notification category indicating the progress of a long-running background operation.
		 */
		const CATEGORY_PROGRESS: string;

		/**
		 * Notification category indicating a promotion or advertisement.
		 */
		const CATEGORY_PROMO: string;

		/**
		 * Notification category indicating a specific, timely recommendation for a single thing.
		 */
		const CATEGORY_RECOMMENDATION: string;

		/**
		 * To be used as a sample code example (not part of the normal user experience).
		 */
		const CATEGORY_SAMPLE_CODE: string;

		/**
		 * Activity should be considered as an alternative selection action to the data the user
		 * has currently selected.
		 */
		const CATEGORY_SELECTED_ALTERNATIVE: string;

		/**
		 * Notification category for a running background service.
		 */
		const CATEGORY_SERVICE: string;

		/**
		 * Notification category for a social network or sharing update.
		 */
		const CATEGORY_SOCIAL: string;

		/**
		 * Notification category indicating ongoing information about device or contextual status.
		 */
		const CATEGORY_STATUS: string;

		/**
		 * Activity to be used in a tab activity.
		 */
		const CATEGORY_TAB: string;

		/**
		 * To be used as a test (not part of the normal user experience).
		 */
		const CATEGORY_TEST: string;

		/**
		 * Notification category indicating media transport control for playback.
		 */
		const CATEGORY_TRANSPORT: string;

		/**
		 * To be used as a unit test (run through the Test Harness).
		 */
		const CATEGORY_UNIT_TEST: string;

		/**
		 * Use all default settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_ALL: number;

		/**
		 * Use the default light settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_LIGHTS: number;

		/**
		 * Use the default sound settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_SOUND: number;

		/**
		 * Use the default vibration settings for a notification; see
		 * [Notification.defaults](Titanium.Android.Notification.defaults).
		 */
		const DEFAULT_VIBRATE: number;

		/**
		 * Integer indicating how many pending alarms are being delivered with the intent.
		 */
		const EXTRA_ALARM_COUNT: string;

		/**
		 * String array containing e-mail addresses for blind carbon copying.
		 */
		const EXTRA_BCC: string;

		/**
		 * String array containing e-mail addresses for carbon copying.
		 */
		const EXTRA_CC: string;

		/**
		 * Boolean indicating full uninstall (true) or partial uninstall (false).
		 */
		const EXTRA_DATA_REMOVED: string;

		/**
		 * Boolean indicating to restart the application or not.
		 */
		const EXTRA_DONT_KILL_APP: string;

		/**
		 * String array containing e-mail addresses.
		 */
		const EXTRA_EMAIL: string;

		/**
		 * An Intent describing the choices you would like shown.
		 */
		const EXTRA_INTENT: string;

		/**
		 * A KeyEvent object containing the event that triggered the creation of the Intent it is in.
		 */
		const EXTRA_KEY_EVENT: string;

		/**
		 * String holding the phone number to call or number that was called.
		 */
		const EXTRA_PHONE_NUMBER: string;

		/**
		 * Boolean indicating if the package is being replaced.
		 */
		const EXTRA_REPLACING: string;

		/**
		 * Bitmap icon.
		 */
		const EXTRA_SHORTCUT_ICON: string;

		/**
		 * Resource of the shortcut.
		 */
		const EXTRA_SHORTCUT_ICON_RESOURCE: string;

		/**
		 * Intent of a shortcut.
		 */
		const EXTRA_SHORTCUT_INTENT: string;

		/**
		 * Name of the shortcut.
		 */
		const EXTRA_SHORTCUT_NAME: string;

		/**
		 * URI containing the stream data.
		 */
		const EXTRA_STREAM: string;

		/**
		 * Subject line of a message.
		 */
		const EXTRA_SUBJECT: string;

		/**
		 * Initial data to place in a newly created record.
		 */
		const EXTRA_TEMPLATE: string;

		/**
		 * Corresponds to the Android `Intent.EXTRA_TEXT` constant.
		 */
		const EXTRA_TEXT: string;

		/**
		 * Corresponds to the Android `Intent.EXTRA_TITLE` constant.
		 */
		const EXTRA_TITLE: string;

		/**
		 * UID of the assigned packaged.
		 */
		const EXTRA_UID: string;

		/**
		 * Not used.
		 */
		const FILL_IN_ACTION: number;

		/**
		 * Not used.
		 */
		const FILL_IN_CATEGORIES: number;

		/**
		 * Not used.
		 */
		const FILL_IN_COMPONENT: number;

		/**
		 * Not used.
		 */
		const FILL_IN_DATA: number;

		/**
		 * Not used.
		 */
		const FILL_IN_PACKAGE: number;

		/**
		 * If activity is already running, bring it to the foreground.
		 */
		const FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;

		/**
		 * If the activity is present, removes any activities on top of it to make it the foreground activity.
		 */
		const FLAG_ACTIVITY_CLEAR_TOP: number;

		/**
		 * Corresponds to the Android `Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET` constant.
		 */
		const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;

		/**
		 * Exclude the activity from recently launched activities.
		 */
		const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;

		/**
		 * Return result to the original calling activity.
		 */
		const FLAG_ACTIVITY_FORWARD_RESULT: number;

		/**
		 * Activity was launched from history.
		 */
		const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;

		/**
		 * Start the activity as a new task even if it exists.
		 */
		const FLAG_ACTIVITY_MULTIPLE_TASK: number;

		/**
		 * Activity will be the start of a new task (collection of activities).
		 */
		const FLAG_ACTIVITY_NEW_TASK: number;

		/**
		 * Prevent transition animation.
		 */
		const FLAG_ACTIVITY_NO_ANIMATION: number;

		/**
		 * Do not keep the activity in the history stack.
		 */
		const FLAG_ACTIVITY_NO_HISTORY: number;

		/**
		 * Disables the [onUserLeaveHint()](https://developer.android.com/reference/android/app/Activity.html#onUserLeaveHint()) callback.
		 */
		const FLAG_ACTIVITY_NO_USER_ACTION: number;

		/**
		 * Corresponds to the Android `Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP` constant.
		 */
		const FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;

		/**
		 * If the activity already exists, place it at the top of the history stack.
		 */
		const FLAG_ACTIVITY_REORDER_TO_FRONT: number;

		/**
		 * If the task already exists, resets the task to its initial state.
		 */
		const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;

		/**
		 * Do not launch the activity if it is already running.
		 */
		const FLAG_ACTIVITY_SINGLE_TOP: number;

		/**
		 * Cancel the notification when it is clicked by the user.
		 */
		const FLAG_AUTO_CANCEL: number;

		/**
		 * Cancel the current pending intent before creating a new one.
		 */
		const FLAG_CANCEL_CURRENT: number;

		/**
		 * Enable a log message to print out the resolution of the intent.
		 */
		const FLAG_DEBUG_LOG_RESOLUTION: number;

		/**
		 * Indicates the intent is coming from a background operation.
		 */
		const FLAG_FROM_BACKGROUND: number;

		/**
		 * Grant read permission on the URI in the Intent's data or clipboard.
		 */
		const FLAG_GRANT_READ_URI_PERMISSION: number;

		/**
		 * Grants write permission on the URI in the Intent's data or clipboard.
		 */
		const FLAG_GRANT_WRITE_URI_PERMISSION: number;

		/**
		 * Pending intent should be immutable.
		 */
		const FLAG_IMMUTABLE: number;

		/**
		 * Repeat audio until the notification is cancelled or the notification window
		 * is opened.
		 */
		const FLAG_INSISTENT: number;

		/**
		 * Pending intent should be mutable.
		 */
		const FLAG_MUTABLE: number;

		/**
		 * Do not cancel the notification when the user clicks the Clear All button.
		 */
		const FLAG_NO_CLEAR: number;

		/**
		 * If the current intent does not exist, do not create it.
		 */
		const FLAG_NO_CREATE: number;

		/**
		 * The pending intent can only be used once.
		 */
		const FLAG_ONE_SHOT: number;

		/**
		 * Specifies that a notification is in reference to something that is ongoing, like a phone call.
		 */
		const FLAG_ONGOING_EVENT: number;

		/**
		 * Play an alert (sound, lights, and/or vibration) once each time the notification is sent, even if it has not been canceled before that.
		 */
		const FLAG_ONLY_ALERT_ONCE: number;

		/**
		 * When sending a broadcast, only registered receivers will be called.
		 */
		const FLAG_RECEIVER_REGISTERED_ONLY: number;

		/**
		 * Use LED lights to alert the user to the notification.
		 */
		const FLAG_SHOW_LIGHTS: number;

		/**
		 * If the current pending intent already exists, only update the current intent's extra data.
		 */
		const FLAG_UPDATE_CURRENT: number;

		/**
		 * Allows the camera to be used while the app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_CAMERA: number;

		/**
		 * Allows connecting to Android Auto, bluetooth, TV or other devices while app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE: number;

		/**
		 * Allows accessing location from the GPS, map, etc. while the app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_LOCATION: number;

		/**
		 * A special value indicates to use all types set in manifest file.
		 */
		const FOREGROUND_SERVICE_TYPE_MANIFEST: number;

		/**
		 * Allows music, video, news or other media playback while the app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK: number;

		/**
		 * Allows managing a media projection session for screen recording or taking screenshots
		 * while app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION: number;

		/**
		 * Allows the microphone to be used while the app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_MICROPHONE: number;

		/**
		 * The default foreground service type.
		 */
		const FOREGROUND_SERVICE_TYPE_NONE: number;

		/**
		 * Allows ongoing phone call or video conferencing access while the app is in the background.
		 */
		const FOREGROUND_SERVICE_TYPE_PHONE_CALL: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_DEFAULT: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_HIGH: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_LOW: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_MAX: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_MIN: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_NONE: number;

		/**
		 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
		 */
		const IMPORTANCE_UNSPECIFIED: number;

		/**
		 * Standard Action Bar navigation mode.
		 */
		const NAVIGATION_MODE_STANDARD: number;

		/**
		 * Action Bar tab navigation mode.
		 */
		const NAVIGATION_MODE_TABS: number;

		/**
		 * Not used.
		 * @deprecated
		 */
		const PENDING_INTENT_FOR_ACTIVITY: never;

		/**
		 * Not used.
		 * @deprecated
		 */
		const PENDING_INTENT_FOR_BROADCAST: never;

		/**
		 * Not used.
		 * @deprecated
		 */
		const PENDING_INTENT_FOR_SERVICE: never;

		/**
		 * Not used.
		 * @deprecated
		 */
		const PENDING_INTENT_MAX_VALUE: never;

		/**
		 * Default priority if it does not fit into another priority category.
		 */
		const PRIORITY_DEFAULT: number;

		/**
		 * Use for high priority notifications like real-time chat messages.
		 */
		const PRIORITY_HIGH: number;

		/**
		 * Use for low priority notifications like software updates.
		 */
		const PRIORITY_LOW: number;

		/**
		 * Use for urgent or time-critical notifications, for example, turn-by-turn directions or
		 * emergency alerts.
		 */
		const PRIORITY_MAX: number;

		/**
		 * Use for expired events.
		 */
		const PRIORITY_MIN: number;

		/**
		 * Accessor for Android system resources.
		 */
		const R: Titanium.Android.R;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
		 * an activity was canceled.
		 */
		const RESULT_CANCELED: number;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify a
		 * user-defined result.
		 */
		const RESULT_FIRST_USER: number;

		/**
		 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
		 * an activity succeeded.
		 */
		const RESULT_OK: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify the activity should run in the same orientation as the activity behind it
		 * in the activity stack.
		 */
		const SCREEN_ORIENTATION_BEHIND: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify a landscape screen orientation.
		 */
		const SCREEN_ORIENTATION_LANDSCAPE: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the sensor should be ignored and the display should not rotate.
		 */
		const SCREEN_ORIENTATION_NOSENSOR: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify a portrait screen orientation.
		 */
		const SCREEN_ORIENTATION_PORTRAIT: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that orientation should be determined by the orientation sensor.
		 */
		const SCREEN_ORIENTATION_SENSOR: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the system should use its default rules for determining the best
		 * orientation.
		 */
		const SCREEN_ORIENTATION_UNSPECIFIED: number;

		/**
		 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
		 * specify that the system should use the user's preferred orientation.
		 */
		const SCREEN_ORIENTATION_USER: number;

		/**
		 * Always show this item as an action button in the action bar.
		 */
		const SHOW_AS_ACTION_ALWAYS: number;

		/**
		 * The action view can collapse to a normal menu item.
		 */
		const SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;

		/**
		 * Show this item as an action button if the system decides there is room for it.
		 */
		const SHOW_AS_ACTION_IF_ROOM: number;

		/**
		 * Never display this item as an action button in the action bar.
		 */
		const SHOW_AS_ACTION_NEVER: number;

		/**
		 * When this item is in the action bar, always show it with a text label.
		 */
		const SHOW_AS_ACTION_WITH_TEXT: number;

		/**
		 * A Service start mode indicating that if the host application is stopped by Android, the service should not be restarted automatically.
		 */
		const START_NOT_STICKY: number;

		/**
		 * A Service start mode indicating that if the host application is stopped by Android, the service should be restarted automatically and the original Intent re-sent.
		 */
		const START_REDELIVER_INTENT: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
		 * request that the alarm stream type for notifications be used.
		 */
		const STREAM_ALARM: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * default stream type for notifications be used.
		 */
		const STREAM_DEFAULT: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
		 * request that the music stream type for notifications be used.
		 */
		const STREAM_MUSIC: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * notification stream type for notifications be used.
		 */
		const STREAM_NOTIFICATION: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * ring stream type for notifications be used.
		 */
		const STREAM_RING: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * system stream type for notifications be used.
		 */
		const STREAM_SYSTEM: number;

		/**
		 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
		 * voice call stream type for notifications be used.
		 */
		const STREAM_VOICE_CALL: number;

		/**
		 * QuickSettings tile is active.
		 */
		const TILE_STATE_ACTIVE: number;

		/**
		 * QuickSettings tile is inactive.
		 */
		const TILE_STATE_INACTIVE: number;

		/**
		 * QuickSettings tile is unavailble.
		 */
		const TILE_STATE_UNAVAILABLE: number;

		/**
		 * The URI scheme used for intent URIs.
		 */
		const URI_INTENT_SCHEME: number;

		/**
		 * Shows basic information about the notification.
		 */
		const VISIBILITY_PRIVATE: number;

		/**
		 * Shows the notification's full content on the lockscreen. This is the system default if visibility is left unspecified.
		 */
		const VISIBILITY_PUBLIC: number;

		/**
		 * Shows the most minimal information of the notification on the lockscreen.
		 */
		const VISIBILITY_SECRET: number;

		/**
		 * Turn the screen on when the wake lock is acquired.
		 */
		const WAKE_LOCK_ACQUIRE_CAUSES_WAKEUP: number;

		/**
		 * Ensures that the screen and keyboard backlight are on at full brightness.
		 */
		const WAKE_LOCK_FULL: number;

		/**
		 * When this wake lock is released, poke the user activity timer so the screen stays on for a little longer.
		 */
		const WAKE_LOCK_ON_AFTER_RELEASE: number;

		/**
		 * Ensures that the CPU is running; the screen and keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_PARTIAL: number;

		/**
		 * Ensures that the screen is on at full brightness; the keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_SCREEN_BRIGHT: number;

		/**
		 * Ensures that the screen is on (but may be dimmed); the keyboard backlight will be allowed to go off.
		 */
		const WAKE_LOCK_SCREEN_DIM: number;

		/**
		 * An action bar is a window feature that identifies the application and user location,
		 * and provides user actions and navigation modes.
		 */
		class ActionBar extends Titanium.Proxy {
			/**
			 * The background image for the action bar, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Sets a view to be used for a custom navigation mode.
			 */
			customView: Titanium.UI.View;

			/**
			 * Displays an "up" affordance on the "home" area of the action bar.
			 */
			displayHomeAsUp: boolean;

			/**
			 * Sets a custom icon for the "home" button in the corner of the action bar.
			 */
			homeAsUpIndicator: string | number | Titanium.Blob;

			/**
			 * Enable or disable the "home" button in the corner of the action bar.
			 */
			homeButtonEnabled: boolean;

			/**
			 * Sets the application icon displayed in the "home" area of the action bar.
			 */
			icon: string | number | Titanium.Blob;

			/**
			 * Sets the application logo displayed in the "home" area of the action bar.
			 */
			logo: string | number | Titanium.Blob;

			/**
			 * Controls the navigation mode.
			 */
			navigationMode: number;

			/**
			 * Callback function called when the home icon is clicked.
			 */
			onHomeIconItemSelected: (...args: any[]) => void;

			/**
			 * Sets the subtitle of the action bar.
			 */
			subtitle: string;

			/**
			 * Sets the title of the action bar.
			 */
			title: string;

			/**
			 * Gets or sets the action bar visibility state.
			 */
			visible: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides the action bar if it is currently showing.
			 */
			hide(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Shows or hides the action bar home icon
			 */
			setDisplayShowHomeEnabled(show: boolean): void;

			/**
			 * Shows or hides the action bar title/subtitle
			 */
			setDisplayShowTitleEnabled(show: boolean): void;

			/**
			 * Shows the action bar if it is currently hidden.
			 */
			show(): void;

		}
		/**
		 * Base event for class Titanium.Android.Activity
		 */
		interface ActivityBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Android.Activity;

		}
		/**
		 * Fired when the activity is already running and an intent different than the one that launched it was received.
		 */
		interface Activity_newintent_Event extends ActivityBaseEvent {
			/**
			 * The `Intent` passed to the native `onNewIntent` method.
			 */
			intent: Titanium.Android.Intent;

		}
		/**
		 * Fired when the activity is launched.
		 */
		interface Activity_onIntent_Event extends ActivityBaseEvent {
			/**
			 * The `Intent` used to launch the Activity.
			 */
			intent: Titanium.Android.Intent;

		}
		/**
		 * Fired when the activity is about to go into the background as a result of user choice.
		 */
		interface Activity_userleavehint_Event extends ActivityBaseEvent {
		}
		/**
		 * Called whenever a key, touch, or trackball event is dispatched to the activity.
		 */
		interface Activity_userinteraction_Event extends ActivityBaseEvent {
		}
		interface ActivityEventMap extends ProxyEventMap {
			newintent: Activity_newintent_Event;

			onIntent: Activity_onIntent_Event;

			userinteraction: Activity_userinteraction_Event;

			userleavehint: Activity_userleavehint_Event;

		}
		/**
		 * The Titanium binding of an Android Activity.
		 */
		class Activity extends Titanium.Proxy {
			/**
			 * The action bar for this activity.
			 */
			readonly actionBar: Titanium.Android.ActionBar;

			/**
			 * The last `Intent` received by this activity.
			 */
			readonly intent: Titanium.Android.Intent;

			/**
			 * Callback function called when the Android activity is created.
			 */
			onCreate: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called to initially create an Android options menu
			 * for this Activity when the user presses the **Menu** button.
			 */
			onCreateOptionsMenu: (param0: OptionsMenuCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is destroyed.
			 */
			onDestroy: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is paused.
			 */
			onPause: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called to prepare an options menu for display when the user presses
			 * the **Menu** button.
			 */
			onPrepareOptionsMenu: (param0: OptionsMenuCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is restarted.
			 */
			onRestart: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is resumed.
			 */
			onResume: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is started.
			 */
			onStart: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Callback function called when the Android activity is stopped.
			 */
			onStop: (param0: ActivityLifecycleCallbackObject) => void;

			/**
			 * Specifies a specific orientation for this activity.
			 */
			requestedOrientation: number;

			/**
			 * Toolbar instance that serves as ActionBar
			 */
			supportToolbar: Titanium.UI.Toolbar;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ActivityEventMap>(name: K, callback: (this: Titanium.Android.Activity, event: ActivityEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Closes this activity.
			 */
			finish(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ActivityEventMap>(name: K, event?: ActivityEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets an Android or Application string using the specified Resource ID and optional format arguments.
			 */
			getString(resourceId: number, ...format: any[]): string;

			/**
			 * Declares that the option menu has changed and should be recreated.
			 */
			invalidateOptionsMenu(): void;

			/**
			 * Programmatically opens the options menu.
			 */
			openOptionsMenu(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ActivityEventMap>(name: K, callback: (this: Titanium.Android.Activity, event: ActivityEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s.
			 */
			sendBroadcast(intent: Titanium.Android.Intent): void;

			/**
			 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s with an optional permission.
			 */
			sendBroadcastWithPermission(intent: Titanium.Android.Intent, receiverPermission?: string): void;

			/**
			 * Sets the requested Activity orientation.
			 * @deprecated Use the <Titanium.Android.requestedOrientation> property instead
			 */
			setRequestedOrientation: never;

			/**
			 * Sets the result of this activity using an `Intent`.
			 */
			setResult(resultCode: number, intent?: Titanium.Android.Intent): void;

			/**
			 * Sets a toolbar instance to be used as an ActionBar.
			 */
			setSupportActionBar(toolbar: Titanium.UI.Toolbar): void;

			/**
			 * Starts a new activity, using the passed in `Intent` as the description.
			 */
			startActivity(intent: Titanium.Android.Intent): void;

			/**
			 * The same as `startActivity`, but also accepts a callback function for handling the result of the started Activity.
			 */
			startActivityForResult(intent: Titanium.Android.Intent, callback: (param0: ActivityResult) => void): void;

		}
		/**
		 * Helper object for generating large-format notifications that include a large image attachment.
		 */
		class BigPictureStyle extends Titanium.Proxy {
			/**
			 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
			 */
			bigContentTitle: string;

			/**
			 * Override the <Titanium.Android.Notification.largeIcon> when the big notification is shown.
			 */
			bigLargeIcon: number | string;

			/**
			 * Provide the bitmap to be used as the payload for the BigPicture notification.
			 */
			bigPicture: number | string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Number of times to retry decoding the bitmap at bigPicture URL.
			 */
			decodeRetries: number;

			/**
			 * Set the first line of text after the detail section in the big form of the notification.
			 */
			summaryText: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Helper object for generating large-format notifications that include a lot of text.
		 */
		class BigTextStyle extends Titanium.Proxy {
			/**
			 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
			 */
			bigContentTitle: string;

			/**
			 * Sets the longer text to be displayed in the big form of the notification in place of the content text.
			 */
			bigText: string;

			/**
			 * Set the first line of text after the detail section in the big form of the notification.
			 */
			summaryText: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Monitor and handle Android system broadcasts.
		 */
		class BroadcastReceiver extends Titanium.Proxy {
			/**
			 * The function called when a broadcast is received.
			 */
			onReceived: (param0: any) => void;

			/**
			 * URL of the JavaScript file to handle the broadcast.
			 */
			url: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Message objects passed between Android application components.
		 */
		class Intent extends Titanium.Proxy {
			/**
			 * The action associated with this intent.
			 */
			action: string;

			/**
			 * The Java class name of the activity associated with this intent
			 * ([packageName](Titanium.Android.Intent.packageName) must also be set).
			 */
			className: string;

			/**
			 * The Intent's Data URI.
			 */
			readonly data: string;

			/**
			 * Intent flags.
			 */
			flags: number;

			/**
			 * The fully-qualified Java package name of the activity.
			 */
			packageName: string;

			/**
			 * The MIME type for this Intent.
			 */
			readonly type: string;

			/**
			 * The URL to a Titanium JavaScript Activity.
			 */
			url: string;

			/**
			 * Adds a category to this Intent.
			 */
			addCategory(name: string): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds to the existing flags on the `Intent`.
			 */
			addFlags(flags: number): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Get a <Titanium.Blob> property from this `Intent`.
			 */
			getBlobExtra(name: string): Titanium.Blob;

			/**
			 * Get a boolean property from this Intent.
			 */
			getBooleanExtra(name: string, defaultValue: boolean): boolean;

			/**
			 * Get the Data URI from this `Intent`.
			 * @deprecated Use the <Titanium.Android.Intent.data> property instead.
			 */
			getData: never;

			/**
			 * Get a double property from this `Intent`.
			 */
			getDoubleExtra(name: string, defaultValue: number): number;

			/**
			 * Get an integer property from this `Intent`.
			 */
			getIntExtra(name: string, defaultValue: number): number;

			/**
			 * Get a long property from this `Intent`.
			 */
			getLongExtra(name: string, defaultValue: number): number;

			/**
			 * Get a string property from this `Intent`.
			 */
			getStringExtra(name: string): string;

			/**
			 * Returns `true` if this `Intent` has the specified property.
			 */
			hasExtra(name: string): boolean;

			/**
			 * Puts an extra property on this `Intent`.
			 */
			putExtra(name: string, value: any): void;

			/**
			 * Put a URI property on this `Intent` (useful for <Titanium.Android.EXTRA_STREAM>).
			 */
			putExtraUri(name: string, value: string | string[]): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The Titanium binding of an Android Options Menu.
		 */
		class Menu extends Titanium.Proxy {
			/**
			 * Array of menu items in this menu.
			 */
			readonly items: Titanium.Android.MenuItem[];

			/**
			 * Creates a <Titanium.Android.MenuItem> from the passed creation options.
			 */
			add(options: any): Titanium.Android.MenuItem;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Clears all items from this menu.
			 */
			clear(): void;

			/**
			 * Closes the menu, if visible.
			 */
			close(): void;

			/**
			 * Locates a [MenuItem](Titanium.Android.MenuItem) in this menu, by item ID or reference.
			 */
			findItem(item: number | Titanium.Android.MenuItem): Titanium.Android.MenuItem;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the [MenuItem](Titanium.Android.MenuItem) at a specific index.
			 */
			getItem(index: number): Titanium.Android.MenuItem;

			/**
			 * Returns `true` if this menu has visible items.
			 */
			hasVisibleItems(): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes all menu items with the specified
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			removeGroup(groupId: number): void;

			/**
			 * Removes a specific [MenuItem](Titanium.Android.MenuItem) identified by its
			 * [itemId](Titanium.Android.MenuItem.itemId).
			 */
			removeItem(itemId: number): void;

			/**
			 * Enables or disables a group of menu items identified by a
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			setGroupEnabled(groupId: number, enabled: boolean): void;

			/**
			 * Shows or hides a group of menu items identified by a
			 * [groupId](Titanium.Android.MenuItem.groupId).
			 */
			setGroupVisible(groupId: number, visible: boolean): void;

			/**
			 * Number of items in this menu.
			 */
			size(): number;

		}
		/**
		 * Base event for class Titanium.Android.MenuItem
		 */
		interface MenuItemBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Android.MenuItem;

		}
		/**
		 * Fired when the user clicks the menu item.
		 */
		interface MenuItem_click_Event extends MenuItemBaseEvent {
		}
		/**
		 * Fired when the action view has been expanded.
		 */
		interface MenuItem_expand_Event extends MenuItemBaseEvent {
		}
		/**
		 * Fired when the action view has been collapsed.
		 */
		interface MenuItem_collapse_Event extends MenuItemBaseEvent {
		}
		interface MenuItemEventMap extends ProxyEventMap {
			click: MenuItem_click_Event;

			collapse: MenuItem_collapse_Event;

			expand: MenuItem_expand_Event;

		}
		/**
		 * The Titanium binding of an Android menu item.
		 */
		class MenuItem extends Titanium.Proxy {
			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Custom view that replaces the default menu item button.
			 */
			actionView: Titanium.UI.View;

			/**
			 * True if this menu item's action view has been expanded.
			 */
			readonly actionViewExpanded: boolean;

			/**
			 * Determines if the item can be checked.
			 */
			checkable: boolean;

			/**
			 * Determines if the item is checked.
			 */
			checked: boolean;

			/**
			 * Determines if the item is enabled.
			 */
			enabled: boolean;

			/**
			 * Group ID for this item.
			 */
			readonly groupId: number;

			/**
			 * Icon to display for the this menu item.
			 */
			icon: number | string;

			/**
			 * Item ID for this item.
			 */
			readonly itemId: number;

			/**
			 * Integer used for controlling the category and sort order for menu items.
			 */
			readonly order: number;

			/**
			 * A set of flags that controls how this item appears in the action bar.
			 */
			showAsAction: number;

			/**
			 * Title of the item.
			 */
			title: string;

			/**
			 * Shortened version of the item's title.
			 */
			titleCondensed: string;

			/**
			 * Determines whether the menu item is visible.
			 */
			visible: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof MenuItemEventMap>(name: K, callback: (this: Titanium.Android.MenuItem, event: MenuItemEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Collapse the action view associated with this menu item.
			 */
			collapseActionView(): void;

			/**
			 * Expand the action view associated with this menu item.
			 */
			expandActionView(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof MenuItemEventMap>(name: K, event?: MenuItemEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the [actionViewExpanded](Titanium.Android.MenuItem.actionViewExpanded) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.actionViewExpanded> property instead.
			 */
			isActionViewExpanded(): boolean;

			/**
			 * Returns the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.checkable> property instead.
			 */
			isCheckable(): boolean;

			/**
			 * Returns the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.checked> property instead.
			 */
			isChecked(): boolean;

			/**
			 * Returns the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.enabled> property instead.
			 */
			isEnabled(): boolean;

			/**
			 * Returns the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.visible> property instead.
			 */
			isVisible(): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof MenuItemEventMap>(name: K, callback: (this: Titanium.Android.MenuItem, event: MenuItemEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Sets the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.checkable> property instead.
			 */
			setCheckable: never;

			/**
			 * Sets the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.checked> property instead.
			 */
			setChecked: never;

			/**
			 * Sets the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.enabled> property instead.
			 */
			setEnabled: never;

			/**
			 * Sets the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
			 * @deprecated Use the <Titanium.Android.MenuItem.visible> property instead.
			 */
			setVisible: never;

		}
		/**
		 * UI notifications that can be sent while the application is in the background.
		 */
		class Notification extends Titanium.Proxy {
			/**
			 * The audio stream type to use when playing the sound.
			 */
			audioStreamType: number;

			/**
			 * Sets the notification's category.
			 */
			category: string;

			/**
			 * The channel id specified for the notification.
			 */
			channelId: string;

			/**
			 * Accent color used behind icon.
			 */
			color: string;

			/**
			 * The `PendingIntent` to execute when the expanded status entry is clicked.
			 */
			contentIntent: Titanium.Android.PendingIntent;

			/**
			 * Description text of the notification.
			 */
			contentText: string;

			/**
			 * Title of the notification.
			 */
			contentTitle: string;

			/**
			 * Custom layout to display in the notification.
			 */
			contentView: Titanium.Android.RemoteViews;

			/**
			 * Specifies which values should be taken from the defaults.
			 */
			defaults: number;

			/**
			 * The `PendingIntent` to execute when the status entry is deleted by the user with the "Clear All Notifications" button.
			 */
			deleteIntent: Titanium.Android.PendingIntent;

			/**
			 * Set of flags for the notification.
			 */
			flags: number;

			/**
			 * The group key that the notification will belong to.
			 */
			groupKey: string;

			/**
			 * Specifies if this is a group summary notification.
			 */
			groupSummary: boolean;

			/**
			 * Notification icon, specified as an Android resource ID, or a local URL to a density-specific image.
			 */
			icon: number | string;

			/**
			 * Add a large icon to the notification (and the ticker on some devices) specified as an Android resource ID, or a local URL to a density-specific image.
			 */
			largeIcon: number | string;

			/**
			 * The color for the LED to blink.
			 */
			ledARGB: number;

			/**
			 * The number of milliseconds for the LED to be off while it's flashing.
			 */
			ledOffMS: number;

			/**
			 * The number of milliseconds for the LED to be on while it's flashing.
			 */
			ledOnMS: number;

			/**
			 * The number of events that this notification represents.
			 */
			number: number;

			/**
			 * Sets the priority of the notification.
			 */
			priority: number;

			/**
			 * A URL to the sound to play.
			 */
			sound: string;

			/**
			 * Style object that can apply a rich notification style.
			 */
			style: Titanium.Android.BigTextStyle | Titanium.Android.BigPictureStyle;

			/**
			 * Text to scroll across the screen when this item is added to the status bar.
			 */
			tickerText: string;

			/**
			 * Allows user to conceal private information of the notification on the lockscreen.
			 */
			visibility: number;

			/**
			 * Will wake up the device for the given time (in milliseconds) when the notification is shown.
			 * The application needs to also set the `android.permission.WAKE_LOCK` permission
			 * in the Android manifest section of the `tiapp.xml` file.
			 * ``` xml
			 * <ti:app>
			 *     <android>
			 *         <manifest>
			 *             <uses-permission android:name="android.permission.WAKE_LOCK" />
			 *         </manifest>
			 *     </android>
			 * </ti:app>
			 * ```
			 */
			wakeLock: wakeLockOptions;

			/**
			 * The timestamp for the notification (defaults to the current time).
			 */
			when: Date | number;

			/**
			 * Add an action button to the notification
			 */
			addAction(icon: number | string, title: string, intent: Titanium.Android.PendingIntent): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Sets the latest event info using the built-in notification view for this notification.
			 */
			setLatestEventInfo(contentTitle: string, contentText: string, contentIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Set the progress this notification represents.
			 */
			setProgress(max: number, progress: number, indeterminate: boolean): void;

		}
		/**
		 * Module for notification channels.
		 */
		class NotificationChannel extends Titanium.Proxy {
			/**
			 * Whether or not notifications posted to this channel can interrupt the user.
			 */
			bypassDnd: boolean;

			/**
			 * User visible description of this channel.
			 */
			description: string;

			/**
			 * Whether notifications posted to this channel should display notification lights
			 */
			enableLights: boolean;

			/**
			 * Whether notification posted to this channel should vibrate.
			 */
			enableVibration: boolean;

			/**
			 * Group id this channel belongs to.
			 */
			groupId: string;

			/**
			 * The channel id specified for the notification channel.
			 */
			id: string;

			/**
			 * The audio stream type to use when playing the sound.
			 */
			importance: number;

			/**
			 * The notification light color for notifications posted to this channel.
			 */
			lightColor: number;

			/**
			 * Whether or not notifications posted to this channel are shown on the lockscreen in full or redacted form.
			 */
			lockscreenVisibility: number;

			/**
			 * The visible name of this channel.
			 * The recommended maximum length is 40 characters; the value may be truncated if it is too long.
			 */
			name: string;

			/**
			 * Whether notifications posted to this channel can appear as application icon badges in a Launcher.
			 */
			showBadge: boolean;

			/**
			 * A URL to the sound to play.
			 */
			sound: string;

			/**
			 * The vibration pattern for notifications posted to this channel.
			 */
			vibratePattern: number[];

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Module for managing notifications.
		 */
		class NotificationManager extends Titanium.Module {
			/**
			 * Use <Titanium.Android.DEFAULT_ALL> instead.
			 */
			static readonly DEFAULT_ALL: number;

			/**
			 * Use <Titanium.Android.DEFAULT_LIGHTS> instead.
			 */
			static readonly DEFAULT_LIGHTS: number;

			/**
			 * Use <Titanium.Android.DEFAULT_SOUND> instead.
			 */
			static readonly DEFAULT_SOUND: number;

			/**
			 * Use <Titanium.Android.DEFAULT_VIBRATE> instead.
			 */
			static readonly DEFAULT_VIBRATE: number;

			/**
			 * Use <Titanium.Android.FLAG_AUTO_CANCEL> instead.
			 */
			static readonly FLAG_AUTO_CANCEL: number;

			/**
			 * Use <Titanium.Android.FLAG_INSISTENT> instead.
			 */
			static readonly FLAG_INSISTENT: number;

			/**
			 * Use <Titanium.Android.FLAG_NO_CLEAR> instead.
			 */
			static readonly FLAG_NO_CLEAR: number;

			/**
			 * Use <Titanium.Android.FLAG_ONGOING_EVENT> instead.
			 */
			static readonly FLAG_ONGOING_EVENT: number;

			/**
			 * Use <Titanium.Android.FLAG_ONLY_ALERT_ONCE> instead.
			 */
			static readonly FLAG_ONLY_ALERT_ONCE: number;

			/**
			 * Use <Titanium.Android.FLAG_SHOW_LIGHTS> instead.
			 */
			static readonly FLAG_SHOW_LIGHTS: number;

			/**
			 * Use <Titanium.Android.STREAM_DEFAULT> instead.
			 */
			static readonly STREAM_DEFAULT: number;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Returns whether showing notifications is enabled for the application.
			 */
			static areNotificationsEnabled(): boolean;

			/**
			 * Cancels a previously displayed notification.
			 */
			static cancel(id: number): void;

			/**
			 * Cancels all previously displayed notifications.
			 */
			static cancelAll(): void;

			/**
			 * Create a notification channel.
			 */
			static createNotificationChannel(parameters: Dictionary<Titanium.Android.NotificationChannel>): Titanium.Android.NotificationChannel;

			/**
			 * Deletes a notification channel.
			 */
			static deleteNotificationChannel(id: string): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Adds a persistent notification to the status bar.
			 */
			static notify(id: number, notification: Titanium.Android.Notification): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The Titanium binding of an Android `PendingIntent`.
		 */
		class PendingIntent extends Titanium.Proxy {
			/**
			 * Flags used for creating the Pending Intent.
			 */
			flags: number;

			/**
			 * The intent data to pass to the [Activity](Titanium.Android.Activity) launched by this `PendingIntent`.
			 */
			intent: Titanium.Android.Intent;

			/**
			 * If this property is true, flag <Titanium.Android.FLAG_UPDATE_CURRENT> will be
			 * appended to `flags` automatically. Default value is true.
			 */
			updateCurrentIntent: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.Android.QuickSettingsService
		 */
		interface QuickSettingsServiceBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Android.QuickSettingsService;

		}
		/**
		 * For Javascript-based services that you create, `pause` fires after each time the JavaScript
		 * code executes.
		 */
		interface QuickSettingsService_pause_Event extends QuickSettingsServiceBaseEvent {
			/**
			 * Incrementing integer indicating which iteration of an interval-based Service is pausing.
			 * For example, if you have an interval-based Service running every 10 seconds, iteration
			 * 3 would occur at about 30 seconds after you start the instance (assuming your service
			 * code runs quickly).
			 */
			iteration: number;

		}
		/**
		 * For JavaScript-based Services which you create, `resume` fires each time the JavaScript
		 * code executes.
		 */
		interface QuickSettingsService_resume_Event extends QuickSettingsServiceBaseEvent {
			/**
			 * Incrementing integer indicating which iteration of an interval-based Service is pausing.
			 * For example, if you have an interval-based Service running every 10 seconds, iteration
			 * 3 would occur at about 30 seconds after you start the instance (assuming your service
			 * code runs quickly).
			 */
			iteration: number;

		}
		/**
		 * Fired when the bound service instance starts.
		 */
		interface QuickSettingsService_start_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Fired when the bound service instance stops.
		 */
		interface QuickSettingsService_stop_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Fired when the task that comes from the service's application has been removed.
		 */
		interface QuickSettingsService_taskremoved_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Tile is listening for events.
		 */
		interface QuickSettingsService_startlistening_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Tile has stopped listening for events.
		 */
		interface QuickSettingsService_stoplistening_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * The Tile has been added in the quick menu.
		 */
		interface QuickSettingsService_tileadded_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * The Tile has been removed from the quick menu.
		 */
		interface QuickSettingsService_tileremoved_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * An item from the signle choice menu has been selected.
		 */
		interface QuickSettingsService_tiledialogoptionselected_Event extends QuickSettingsServiceBaseEvent {
			/**
			 * Index of the selected item from the single choice menu in the dialog.
			 */
			itemIndex: number;

		}
		/**
		 * Dispatched when the alert dialog has been cancelled.
		 */
		interface QuickSettingsService_tiledialogcancelled_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Dispatched when the positive (index 0) button has been clicked.
		 */
		interface QuickSettingsService_tiledialogpositive_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Dispatched when the neutral (index 1) button has been clicked.
		 */
		interface QuickSettingsService_tiledialogneutral_Event extends QuickSettingsServiceBaseEvent {
		}
		/**
		 * Dispatched when the negative (index 2) button has been clicked.
		 */
		interface QuickSettingsService_tiledialognegative_Event extends QuickSettingsServiceBaseEvent {
		}
		interface QuickSettingsServiceEventMap extends ProxyEventMap {
			pause: QuickSettingsService_pause_Event;

			resume: QuickSettingsService_resume_Event;

			start: QuickSettingsService_start_Event;

			startlistening: QuickSettingsService_startlistening_Event;

			stop: QuickSettingsService_stop_Event;

			stoplistening: QuickSettingsService_stoplistening_Event;

			taskremoved: QuickSettingsService_taskremoved_Event;

			tileadded: QuickSettingsService_tileadded_Event;

			tiledialogcancelled: QuickSettingsService_tiledialogcancelled_Event;

			tiledialognegative: QuickSettingsService_tiledialognegative_Event;

			tiledialogneutral: QuickSettingsService_tiledialogneutral_Event;

			tiledialogoptionselected: QuickSettingsService_tiledialogoptionselected_Event;

			tiledialogpositive: QuickSettingsService_tiledialogpositive_Event;

			tileremoved: QuickSettingsService_tileremoved_Event;

		}
		/**
		 * Android service for creating custom quick settings tiles and handling user's interaction with them.
		 */
		class QuickSettingsService extends Titanium.Android.Service {
			/**
			 * Changes the Tile's icon.
			 */
			icon: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * The Tile's label.
			 */
			label: string;

			/**
			 * Sets the state of the Tile.
			 */
			state: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof QuickSettingsServiceEventMap>(name: K, callback: (this: Titanium.Android.QuickSettingsService, event: QuickSettingsServiceEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof QuickSettingsServiceEventMap>(name: K, event?: QuickSettingsServiceEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the Tile's current icon.
			 * @deprecated Please use the [icon](Titanium.Android.QuickSettingsService.icon) property to get/set the value.
			 */
			getIcon(): string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Returns the Tile's current label.
			 * @deprecated Please use the [label](Titanium.Android.QuickSettingsService.label) property to get/set the value.
			 */
			getLabel(): string;

			/**
			 * Returns the Tile's current state.
			 * @deprecated Please use the [state](Titanium.Android.QuickSettingsService.state) property to get/set the value.
			 */
			getState(): number;

			/**
			 * Returns 'true' if the device is currently locked, 'false' otherwise.
			 */
			isLocked(): boolean;

			/**
			 * Returns 'true' if the device is in secure state, 'false' otherwise.
			 */
			isSecure(): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof QuickSettingsServiceEventMap>(name: K, callback: (this: Titanium.Android.QuickSettingsService, event: QuickSettingsServiceEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Changes the Tile's icon.
			 * @deprecated Please use the [icon](Titanium.Android.QuickSettingsService.icon) property to get/set the value.
			 */
			setIcon(icon: string | Titanium.Blob | Titanium.Filesystem.File): void;

			/**
			 * Changes the Tile's label.
			 * @deprecated Please use the [label](Titanium.Android.QuickSettingsService.label) property to get/set the value.
			 */
			setLabel(label: string): void;

			/**
			 * Sets the state of the Tile.
			 * @deprecated Please use the [state](Titanium.Android.QuickSettingsService.state) property to get/set the value.
			 */
			setState(state: number): void;

			/**
			 * Opens an Alert dialog.
			 */
			showDialog(options: showParams): void;

			/**
			 * Colapses the quick settings menu and starts an activity for the passed Intent.
			 */
			startActivityAndCollapse(intent: Titanium.Android.Intent): void;

			/**
			 * Prompts the user to unlock the device and runs the JS code.
			 */
			unlockAndRun(jsCode: string): void;

			/**
			 * Applies current tile's properties.
			 */
			updateTile(): void;

		}
		/**
		 * The Titanium binding of the native Android `R` class, giving access to
		 * Android system-wide resources or application resources.
		 */
		interface R extends Titanium.Proxy {
			/**
			 * Animation resources. See
			 * [R.anim](https://developer.android.com/reference/android/R.anim.html)
			 * in the Android Developer Reference.
			 */
			readonly anim: any;

			/**
			 * Animator resources. See
			 * [R.animator](https://developer.android.com/reference/android/R.animator.html)
			 * in the Android Developer Reference.
			 */
			readonly animator: any;

			/**
			 * Array resources. See [R.array](https://developer.android.com/reference/android/R.array.html)
			 * in the Android Developer Reference.
			 */
			readonly array: any;

			/**
			 * Attribute resources. See
			 * [R.attr](https://developer.android.com/reference/android/R.attr.html)
			 * in the Android Developer Reference.
			 */
			readonly attr: any;

			/**
			 * Boolean resources. See
			 * [R.bool](https://developer.android.com/reference/android/R.bool.html)
			 * in the Android Developer Reference.
			 */
			readonly bool: any;

			/**
			 * Color resources. See
			 * [R.color](https://developer.android.com/reference/android/R.color.html)
			 * in the Android Developer Reference.
			 */
			readonly color: any;

			/**
			 * Dimension resources.  See
			 * [https://developer.android.com/reference/android/R.dimen.html](https://developer.android.com/reference/android/R.dimen.html)
			 * in the Android Developer Reference.
			 */
			readonly dimen: any;

			/**
			 * Drawable resources. See
			 * [R.drawable](https://developer.android.com/reference/android/R.drawable.html)
			 * in the Android Developer Reference.
			 */
			readonly drawable: any;

			/**
			 * Fraction resources. See
			 * [R.fraction](https://developer.android.com/reference/android/R.fraction.html)
			 * in the Android Developer Reference.
			 */
			readonly fraction: any;

			/**
			 * ID resources.  See
			 * [R.id](https://developer.android.com/reference/android/R.id.html)
			 * in the Android Developer Reference.
			 */
			readonly id: any;

			/**
			 * Integer resources. See
			 * [R.integer](https://developer.android.com/reference/android/R.integer.html)
			 * in the Android Developer Reference.
			 */
			readonly integer: any;

			/**
			 * Interpolator resources. See
			 * [R.fraction](https://developer.android.com/reference/android/R.interpolator.html)
			 * in the Android Developer Reference.
			 */
			readonly interpolator: any;

			/**
			 * Layout resources. See
			 * [R.layout](https://developer.android.com/reference/android/R.layout.html)
			 * in the Android Developer Reference.
			 */
			readonly layout: any;

			/**
			 * Menu resources. See
			 * [R.menu](https://developer.android.com/reference/android/R.menu.html)
			 * in the Android Developer Reference.
			 */
			readonly menu: any;

			/**
			 * Mipmap resources. See
			 * [R.mipmap](https://developer.android.com/reference/android/R.mipmap.html)
			 * in the Android Developer Reference.
			 */
			readonly mipmap: any;

			/**
			 * Plurals resources. See
			 * [R.plurals](https://developer.android.com/reference/android/R.plurals.html)
			 * in the Android Developer Reference.
			 */
			readonly plurals: any;

			/**
			 * Raw resources. See
			 * [R.raw](https://developer.android.com/reference/android/R.raw.html)
			 * in the Android Developer Reference.
			 */
			readonly raw: any;

			/**
			 * String resources. See
			 * [R.string](https://developer.android.com/reference/android/R.string.html)
			 * in the Android Developer Reference.
			 */
			readonly string: any;

			/**
			 * Style resources. See
			 * [R.style](https://developer.android.com/reference/android/R.style.html)
			 * in the Android Developer Reference.
			 */
			readonly style: any;

			/**
			 * Styleable resources. See
			 * [R.styleable](https://developer.android.com/reference/android/R.styleable.html)
			 * in the Android Developer Reference.
			 */
			readonly styleable: any;

			/**
			 * Transition resources. See
			 * [R.transition](https://developer.android.com/reference/android/R.transition.html)
			 * in the Android Developer Reference.
			 */
			readonly transition: any;

			/**
			 * XML resources. See
			 * [R.xml](https://developer.android.com/reference/android/R.xml.html)
			 * in the Android Developer Reference.
			 */
			readonly xml: any;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The Titanium binding of [Android RemoteViews](https://developer.android.com/reference/android/widget/RemoteViews.html).
		 */
		class RemoteViews extends Titanium.Proxy {
			/**
			 * Android layout resource ID for the view to display. Required.
			 */
			layoutId: number;

			/**
			 * Package name that the resource ID lives in. Optional.
			 */
			packageName: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Calls a method taking a single `boolean` argument on a view in the remote view
			 * hierarchy.  See Android's documentation for
			 * [setBoolean](https://developer.android.com/reference/android/widget/RemoteViews.html#setBoolean(int, java.lang.String, boolean)).
			 */
			setBoolean(viewId: number, methodName: string, value: boolean): void;

			/**
			 * Sets the base time, format string, and started flag for a chronometer
			 * in the remote view hierarchy.
			 */
			setChronometer(viewId: number, base: Date, format: string, started: boolean): void;

			/**
			 * Calls a method taking a single `double` argument on a view in the remote view
			 * hierarchy.
			 */
			setDouble(viewId: number, methodName: string, value: number): void;

			/**
			 * Sets the image for an image view in the remote view hierarchy using an Android drawable resource.
			 */
			setImageViewResource(viewId: number, srcId: number): void;

			/**
			 * Sets the image for an image view in the remote view hierarchy using a URI.
			 */
			setImageViewUri(viewId: number, uri: string): void;

			/**
			 * Calls a method taking a single `int` argument on a view in the remote view hierarchy.
			 */
			setInt(viewId: number, methodName: string, value: number): void;

			/**
			 * Launches a <Titanium.Android.PendingIntent> when the specified view is clicked.
			 */
			setOnClickPendingIntent(viewId: number, pendingIntent: Titanium.Android.PendingIntent): void;

			/**
			 * Sets the progress, max value, and indeterminate flag of a progress bar in the
			 * remote view hierarchy.
			 */
			setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void;

			/**
			 * Calls a method taking a single String argument on a view in the remote view
			 * hierarchy.
			 */
			setString(viewId: number, methodName: string, value: string): void;

			/**
			 * Sets the text color of a view in the remote view hierarchy.
			 */
			setTextColor(viewId: number, color: number): void;

			/**
			 * Sets the text of a text view in the remote view hierarchy.
			 */
			setTextViewText(viewId: number, text: string): void;

			/**
			 * Calls a method taking one URI on a view in the remote view hierarchy.
			 */
			setUri(viewId: number, methodName: string, value: string): void;

			/**
			 * Sets the visibility of a view in the remote view hierarchy.
			 */
			setViewVisibility(viewId: number, visibility: number): void;

		}
		/**
		 * Base event for class Titanium.Android.Service
		 */
		interface ServiceBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Android.Service;

		}
		/**
		 * For Javascript-based services that you create, `pause` fires after each time the JavaScript
		 * code executes.
		 */
		interface Service_pause_Event extends ServiceBaseEvent {
			/**
			 * Incrementing integer indicating which iteration of an interval-based Service is pausing.
			 * For example, if you have an interval-based Service running every 10 seconds, iteration
			 * 3 would occur at about 30 seconds after you start the instance (assuming your service
			 * code runs quickly).
			 */
			iteration: number;

		}
		/**
		 * For JavaScript-based Services which you create, `resume` fires each time the JavaScript
		 * code executes.
		 */
		interface Service_resume_Event extends ServiceBaseEvent {
			/**
			 * Incrementing integer indicating which iteration of an interval-based Service is pausing.
			 * For example, if you have an interval-based Service running every 10 seconds, iteration
			 * 3 would occur at about 30 seconds after you start the instance (assuming your service
			 * code runs quickly).
			 */
			iteration: number;

		}
		/**
		 * Fired when the bound service instance starts.
		 */
		interface Service_start_Event extends ServiceBaseEvent {
		}
		/**
		 * Fired when the bound service instance stops.
		 */
		interface Service_stop_Event extends ServiceBaseEvent {
		}
		/**
		 * Fired when the task that comes from the service's application has been removed.
		 */
		interface Service_taskremoved_Event extends ServiceBaseEvent {
		}
		interface ServiceEventMap extends ProxyEventMap {
			pause: Service_pause_Event;

			resume: Service_resume_Event;

			start: Service_start_Event;

			stop: Service_stop_Event;

			taskremoved: Service_taskremoved_Event;

		}
		/**
		 * Android application component that executes in the background.
		 */
		class Service extends Titanium.Proxy {
			/**
			 * The intent used to start or bind to the Service.
			 */
			readonly intent: Titanium.Android.Intent;

			/**
			 * A service can be started more than once -- this number (based on an incrementing integer)
			 * indicates which "start number" in the sequence the current service instance is.
			 */
			readonly serviceInstanceId: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ServiceEventMap>(name: K, callback: (this: Titanium.Android.Service, event: ServiceEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ServiceEventMap>(name: K, event?: ServiceEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Puts the service into the "background" state and removes its foreground notification.
			 */
			foregroundCancel(): void;

			/**
			 * Puts the service into the "foreground" state and displays a notification.
			 */
			foregroundNotify(id: number, notification: Titanium.Android.Notification, foregroundServiceType?: number): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ServiceEventMap>(name: K, callback: (this: Titanium.Android.Service, event: ServiceEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Starts the Service.
			 */
			start(): void;

			/**
			 * Stops this running instance of the Service.
			 */
			stop(): void;

		}
	}
	/**
	 * The top-level App module is mainly used for accessing information about the
	 * application at runtime, and for sending or listening for system events.
	 */
	namespace App {
		/**
		 * Convenience constant for system event "accessibilityannouncement".
		 */
		const EVENT_ACCESSIBILITY_ANNOUNCEMENT: string;

		/**
		 * Convenience constant for system event "accessibilitychanged".
		 */
		const EVENT_ACCESSIBILITY_CHANGED: string;

		/**
		 * The top-level App iOS module, available only to iOS devices, that includes the facilities to
		 * create and manage local notifications and background services.
		 */
		namespace iOS {
			/**
			 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
			 * Specifies the smallest fetch interval supported by the system.
			 */
			const BACKGROUNDFETCHINTERVAL_MIN: number;

			/**
			 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
			 * Used to specify a fetch interval large enough to prevent fetch operations from occurring.
			 */
			const BACKGROUNDFETCHINTERVAL_NEVER: number;

			/**
			 * Convenience constant for system event "accessibilitylayoutchanged".
			 */
			const EVENT_ACCESSIBILITY_LAYOUT_CHANGED: string;

			/**
			 * Convenience constant for system event "accessibilityscreenchanged".
			 */
			const EVENT_ACCESSIBILITY_SCREEN_CHANGED: string;

			/**
			 * A dark interface style.
			 * @deprecated Use <Titanium.UI.USER_INTERFACE_STYLE_DARK> instead, which is supported cross-platform.
			 */
			const USER_INTERFACE_STYLE_DARK: number;

			/**
			 * A light interface style.
			 * @deprecated Use <Titanium.UI.USER_INTERFACE_STYLE_LIGHT> instead, which is supported cross-platform.
			 */
			const USER_INTERFACE_STYLE_LIGHT: number;

			/**
			 * An unspecified interface style.
			 * @deprecated Use <Titanium.UI.USER_INTERFACE_STYLE_UNSPECIFIED> instead, which is supported cross-platform.
			 */
			const USER_INTERFACE_STYLE_UNSPECIFIED: number;

			/**
			 * The action will execute in background. Use with the
			 * [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
			 */
			const USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: number;

			/**
			 * The action will launch the application and execute in the foreground.
			 * Use with the [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
			 */
			const USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: number;

			/**
			 * A alert dialog is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_ALERT: number;

			/**
			 * A banner is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_BANNER: number;

			/**
			 * No banner or alert dialog is presented when the notification is received.
			 */
			const USER_NOTIFICATION_ALERT_STYLE_NONE: number;

			/**
			 * The application is authorized to post user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_AUTHORIZED: number;

			/**
			 * The application is not authorized to post user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_DENIED: number;

			/**
			 * The user has not yet made a choice regarding whether the application may post
			 * user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_NOT_DETERMINED: number;

			/**
			 * The application is provisionally authorized to post non-interruptive user notifications.
			 */
			const USER_NOTIFICATION_AUTHORIZATION_STATUS_PROVISIONAL: number;

			/**
			 * Default action behavior with no additional action support.
			 */
			const USER_NOTIFICATION_BEHAVIOR_DEFAULT: number;

			/**
			 * Provides a textfield with the notification for the user to enter a text response.
			 */
			const USER_NOTIFICATION_BEHAVIOR_TEXTINPUT: number;

			/**
			 * Allow CarPlay to display notifications of this type.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_ALLOW_IN_CARPLAY: number;

			/**
			 * Send dismiss actions to the UNUserNotificationCenter object's delegate for handling.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_CUSTOM_DISMISS_ACTION: number;

			/**
			 * Show the notification's subtitle, even if the user has disabled notification previews for the app.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_SUBTITLE: number;

			/**
			 * Show the notification's title, even if the user has disabled notification previews for the app.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_TITLE: number;

			/**
			 * No options.
			 */
			const USER_NOTIFICATION_CATEGORY_OPTION_NONE: number;

			/**
			 * The notification setting is turned off.
			 */
			const USER_NOTIFICATION_SETTING_DISABLED: number;

			/**
			 * The notification setting is turned on.
			 */
			const USER_NOTIFICATION_SETTING_ENABLED: number;

			/**
			 * The application does not support this notification type.
			 */
			const USER_NOTIFICATION_SETTING_NOT_SUPPORTED: number;

			/**
			 * The application may display an alert upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_ALERT: number;

			/**
			 * The application may badge its icon upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_BADGE: number;

			/**
			 * The ability to play sounds for critical alerts.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_CRITICAL_ALERT: number;

			/**
			 * The application may not present any UI upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_NONE: number;

			/**
			 * An option indicating the system should display a button for in-app notification settings.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_PROVIDES_APP_NOTIFICATION_SETTINGS: number;

			/**
			 * The ability to post non-interrupting notifications provisionally to the Notification Center.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_PROVISIONAL: number;

			/**
			 * The application may play a sound upon a notification being received.
			 * Use with the [types](UserNotificationSettings.types) property.
			 */
			const USER_NOTIFICATION_TYPE_SOUND: number;

			/**
			 * Uniform type identifier for Mac OS icon images.
			 */
			const UTTYPE_APPLE_ICNS: string;

			/**
			 * Uniform type identifier for protected MPEG-4 audio (iTunes music store format).
			 */
			const UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO: string;

			/**
			 * Uniform type identifier for all audio content.
			 */
			const UTTYPE_AUDIO: string;

			/**
			 * Uniform type identifier for Windows bitmap images.
			 */
			const UTTYPE_BMP: string;

			/**
			 * Uniform type identifier for Rich Text with content embedding, pasteboard format.
			 */
			const UTTYPE_FLAT_RTFD: string;

			/**
			 * Uniform type identifier for GIF images.
			 */
			const UTTYPE_GIF: string;

			/**
			 * Uniform type identifier for HTML.
			 */
			const UTTYPE_HTML: string;

			/**
			 * Uniform type identifier for Windows icon images.
			 */
			const UTTYPE_ICO: string;

			/**
			 * Uniform type identifier for all image types.
			 */
			const UTTYPE_IMAGE: string;

			/**
			 * Uniform type identifier for JPEG images.
			 */
			const UTTYPE_JPEG: string;

			/**
			 * Uniform type identifier for JPEG 2000 images.
			 */
			const UTTYPE_JPEG2000: string;

			/**
			 * Uniform type identifier for all audiovisual content.
			 */
			const UTTYPE_MOVIE: string;

			/**
			 * Uniform type identifier for MP3 audio.
			 */
			const UTTYPE_MP3: string;

			/**
			 * Uniform type identifier for MPEG-1 and MPEG-2 content.
			 */
			const UTTYPE_MPEG: string;

			/**
			 * Uniform type identifier for MPEG-4 content.
			 */
			const UTTYPE_MPEG4: string;

			/**
			 * Uniform type identifier for MPEG-4 audio.
			 */
			const UTTYPE_MPEG4_AUDIO: string;

			/**
			 * Uniform type identifier for PDF data.
			 */
			const UTTYPE_PDF: string;

			/**
			 * Uniform type identifier for PICT images.
			 */
			const UTTYPE_PICT: string;

			/**
			 * Uniform type identifier for a plain text type, equivalent to MIME type text/plain.
			 */
			const UTTYPE_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for PNG images.
			 */
			const UTTYPE_PNG: string;

			/**
			 * Uniform type identifier for QuickTime images.
			 */
			const UTTYPE_QUICKTIME_IMAGE: string;

			/**
			 * Uniform type identifier for QuickTime movies.
			 */
			const UTTYPE_QUICKTIME_MOVIE: string;

			/**
			 * Uniform type identifier for Rich Text.
			 */
			const UTTYPE_RTF: string;

			/**
			 * Uniform type identifier for Rich Text Format Directory, that is, Rich Text with content embedding, on-disk format.
			 */
			const UTTYPE_RTFD: string;

			/**
			 * Uniform type identifier for all text types.
			 */
			const UTTYPE_TEXT: string;

			/**
			 * Uniform type identifier for TIFF images.
			 */
			const UTTYPE_TIFF: string;

			/**
			 * Uniform type identifier for MLTE (Textension) format for mixed text and multimedia data.
			 */
			const UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA: string;

			/**
			 * Uniform type identifier for Unicode-16 with byte-order mark (BOM), or if BOM is not present,
			 * an external representation byte order (big-endian).
			 */
			const UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Unicode-16, native byte order, with an optional byte-order mark (BOM).
			 */
			const UTTYPE_UTF16_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for Unicode-8 plain text type.
			 */
			const UTTYPE_UTF8_PLAIN_TEXT: string;

			/**
			 * Uniform type identifier for all video content without audio.
			 */
			const UTTYPE_VIDEO: string;

			/**
			 * Uniform type identifier for WebKit webarchive format.
			 */
			const UTTYPE_WEB_ARCHIVE: string;

			/**
			 * Uniform type identifier for XML.
			 */
			const UTTYPE_XML: string;

			/**
			 * Use this module to communicate with the native iOS 16+ Dynamic Island APIs.
			 */
			interface ActivityAttributes {
				/**
				 * Starts a new activity (aka the Dynamic Island) with the provided parameters
				 */
				startActivity(value: any): void;

			}
			/**
			 * A service that runs when the application is placed in the background.
			 */
			class BackgroundService extends Titanium.Proxy {
				/**
				 * A local URL to a JavaScript file containing the code to run in the background.
				 */
				url: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Stops the service from running during the current background session to conserve resources.
				 */
				stop(): void;

				/**
				 * Unregisters the background service.
				 */
				unregister(): void;

			}
			/**
			 * A local notification to alert the user of new or pending application information.
			 */
			class LocalNotification extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Cancels the pending notification.
				 * @deprecated Use [Titanium.App.iOS.UserNotificationCenter.removePendingNotifications](Titanium.App.iOS.UserNotificationCenter.removePendingNotifications) instead.
				 */
				cancel(): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.App.iOS.SearchQuery
			 */
			interface SearchQueryBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.App.iOS.SearchQuery;

			}
			/**
			 * Fired when the query finds a new batch of matching items.
			 */
			interface SearchQuery_founditems_Event extends SearchQueryBaseEvent {
				/**
				 * The number of items that are currently fetched.
				 */
				foundItemsCount: number;

				/**
				 * An array of indexed items that match the specified query.
				 */
				items: Titanium.App.iOS.SearchableItem[];

			}
			/**
			 * Fired when the query completes to inform you about it's success.
			 * To receive items, use the `founditems` event.
			 */
			interface SearchQuery_completed_Event extends SearchQueryBaseEvent {
				/**
				 * Error message, if any returned. Undefined otherwise.
				 */
				error: string;

				/**
				 * Indicates if the operation succeeded. Returns true if download succeeded, false otherwise.
				 */
				success: boolean;

			}
			interface SearchQueryEventMap extends ProxyEventMap {
				completed: SearchQuery_completed_Event;

				founditems: SearchQuery_founditems_Event;

			}
			/**
			 * A search query object manages the criteria to apply when searching app content that you have previously
			 * indexed by using the Core Spotlight APIs.
			 */
			class SearchQuery extends Titanium.Proxy {
				/**
				 * An array of strings that represent the attributes of indexed items.
				 */
				attributes: string[];

				/**
				 * A formatted string that defines the matching criteria to apply to indexed items.
				 */
				queryString: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof SearchQueryEventMap>(name: K, callback: (this: Titanium.App.iOS.SearchQuery, event: SearchQueryEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Cancels a query operation.
				 */
				cancel(): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof SearchQueryEventMap>(name: K, event?: SearchQueryEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * A Boolean value that indicates if the query has been cancelled (`true`) or not (`false`).
				 */
				isCancelled(): boolean;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof SearchQueryEventMap>(name: K, callback: (this: Titanium.App.iOS.SearchQuery, event: SearchQueryEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Asynchronously queries the index for items that match the query object's specifications.
				 */
				start(): void;

			}
			/**
			 * The SearchableIndex module is used to add or remove Ti.App.iOS.SearchableItem objects from the device search index.
			 */
			class SearchableIndex extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Adds an array of Titanium.App.iOS.SearchableItem objects to the default search index.
				 */
				addToDefaultSearchableIndex(Array: ReadonlyArray<Titanium.App.iOS.SearchableItem>, callback: (param0: any) => void): void;

				/**
				 * Removes search items based on an array of domain identifiers.
				 */
				deleteAllSearchableItemByDomainIdenifiers(Array: ReadonlyArray<string>, callback: (param0: any) => void): void;

				/**
				 * Removes all search items added by the application.
				 */
				deleteAllSearchableItems(callback: (param0: any) => void): void;

				/**
				 * Removes search items based on an array of identifiers.
				 */
				deleteSearchableItemsByIdentifiers(Array: ReadonlyArray<string>, callback: (param0: any) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Indicates whether indexing is supported by the device.
				 */
				isSupported(): boolean;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Used to create a unique object containing all of the search information that will appear in the device search index.
			 */
			class SearchableItem extends Titanium.Proxy {
				/**
				 * Set of metadata properties to display for the item.
				 */
				attributeSet: Titanium.App.iOS.SearchableItemAttributeSet;

				/**
				 * Identifier that represents the "domain" or owner of this item.
				 */
				domainIdentifier: string;

				/**
				 * Searchable items have an expiration date or time to live.  By default it is set to one month.
				 */
				expirationDate: string;

				/**
				 * Unique identifier to your application group.
				 */
				uniqueIdentifier: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * The SearchableItemAttributeSet module defines metadata properties for SearchItem and UserActivity objects.
			 */
			class SearchableItemAttributeSet extends Titanium.Proxy {
				/**
				 * The date that the item was moved into the current location.
				 */
				addedDate: string;

				/**
				 * The title for a collection of media.
				 */
				album: string;

				/**
				 * An array of localized strings of alternate display names for this item.
				 */
				alternateNames: string[];

				/**
				 * The artist for the media.
				 */
				artist: string;

				/**
				 * A class of entity for whom the resource is intended or useful.
				 */
				audiences: string[];

				/**
				 * The audio bit rate.
				 */
				audioBitRate: number;

				/**
				 * The number of channels in the audio data contained in the file.
				 */
				audioChannelCount: number;

				/**
				 * The name of the application that encoded the data contained in the audio file.
				 */
				audioEncodingApplication: string;

				/**
				 * The sample rate of the audio data contained in the file.
				 */
				audioSampleRate: number;

				/**
				 * The track number of a song/composition when it is part of an album.
				 */
				audioTrackNumber: number;

				/**
				 * The codecs used to encode/decode the media.
				 */
				codecs: string[];

				/**
				 * Comment related to a file.
				 */
				comment: string;

				/**
				 * The composer of the song/composition contained in the audio file.
				 */
				composer: string;

				/**
				 * A list of contacts that are somehow associated with this document beyond what is captured as Author.
				 */
				contactKeywords: string[];

				/**
				 * Display of the search container
				 */
				containerDisplayName: string;

				/**
				 * Identifier for the search container
				 */
				containerIdentifier: string;

				/**
				 * Order the search container is displayed.
				 */
				containerOrder: number;

				/**
				 * Title displayed in the search container
				 */
				containerTitle: string;

				/**
				 * The date that the contents of the item were created.
				 */
				contentCreationDate: string;

				/**
				 * An account of the content of the resource.
				 */
				contentDescription: string;

				/**
				 * The date that the contents of the item were last modified.
				 */
				contentModificationDate: string;

				/**
				 * Whether or not the item has explicit content. Set to `1` for explicit or `0` for clean.
				 */
				contentRating: number;

				/**
				 * Used to indicate where the item was obtained from.
				 */
				contentSources: string[];

				/**
				 * UTI Type pedigree for an item.
				 */
				contentType: string;

				/**
				 * Array of strings related to the content tree of the item.
				 */
				contentTypeTree: string[];

				/**
				 * File URL representing the content to be indexed.
				 */
				contentURL: string;

				/**
				 * Used to designate the entity responsible for making contributions to the content of the resource.
				 */
				contributors: string[];

				/**
				 * Copyright of the content.
				 */
				copyright: string;

				/**
				 * Used to designate the extent or scope of the content of the resource.
				 */
				coverage: string[];

				/**
				 * Application used to create the document content (e.g. "Word","Framemaker", etc.).
				 */
				creator: string;

				/**
				 * The delivery type of the item.  Set to `0` for fast start and `1` for RTSP.
				 */
				deliveryType: number;

				/**
				 * Director of the item, for example, the movie director.
				 */
				director: string;

				/**
				 * A localized string to be displayed in the UI for this item.
				 */
				displayName: string;

				/**
				 * The date that the file was last downloaded / received.
				 */
				downloadedDate: string;

				/**
				 * Duration in seconds of the content of the item (if appropriate).
				 */
				duration: number;

				/**
				 * The list of editor/editors that have worked on this item.
				 */
				editors: string[];

				/**
				 * Software used to convert the original content into a PDF stream.
				 */
				encodingApplications: string[];

				/**
				 * Size of the document in MB.
				 */
				fileSize: number;

				/**
				 * Array of font names used in the item.
				 */
				fontNames: string[];

				/**
				 * The fully formatted address of the item (obtained from MapKit).
				 */
				fullyFormattedAddress: string;

				/**
				 * Used to indicates whether the MIDI sequence contained in the file is setup for use with a General MIDI device.
				 */
				generalMIDISequence: number;

				/**
				 * Genre of the item, for example, movie genre.
				 */
				genre: string;

				/**
				 * Used to reference to the resource within a given context.
				 */
				identifier: string;

				/**
				 * Information about the item.
				 */
				information: string;

				/**
				 * Content type of the attribute set.
				 */
				itemContentType: string;

				/**
				 * The musical key of the song/composition contained in an audio file.
				 */
				keySignature: string;

				/**
				 * Represents keywords associated with this particular item. Example keywords might be Birthday etc.
				 */
				keywords: string[];

				/**
				 * Kind that the item represents.
				 */
				kind: string;

				/**
				 * Used to designate the languages of the intellectual content of the resource.
				 */
				languages: string[];

				/**
				 * The date that the item was last used.
				 */
				lastUsedDate: string;

				/**
				 * Whether or not the item is local. Set to `1` if true and `0` otherwise.
				 */
				local: number;

				/**
				 * The lyricist/text writer for song/composition contained in the audio file.
				 */
				lyricist: string;

				/**
				 * Media types present in the content.
				 */
				mediaTypes: string[];

				/**
				 * The date that the last metadata attribute was changed.
				 */
				metadataModificationDate: string;

				/**
				 * The musical genre of the song/composition contained in the audio file.
				 */
				musicalGenre: string;

				/**
				 * Metadata attribute that stores the category of instrument.
				 */
				musicalInstrumentCategory: string;

				/**
				 * Metadata attribute that stores the name of instrument.
				 */
				musicalInstrumentName: string;

				/**
				 * Used to indicate company/Organization that created the document.
				 */
				organizations: string[];

				/**
				 * Original format of the movie.
				 */
				originalFormat: string;

				/**
				 * Original source of the movie.
				 */
				originalSource: string;

				/**
				 * Number of pages in the item.
				 */
				pageCount: number;

				/**
				 * Height in points (72 points per inch) of the document page.
				 */
				pageHeight: number;

				/**
				 * Width in points (72 points per inch) of the document page.
				 */
				pageWidth: number;

				/**
				 * The list of people who are visible in an image or movie or written about in a document.
				 */
				participants: string[];

				/**
				 * The complete path to the item.
				 */
				path: string;

				/**
				 * Performers in the movie.
				 */
				performers: string[];

				/**
				 * User play count of this item.
				 */
				playCount: number;

				/**
				 * The postal code for the item according to guidelines established by the provider.
				 */
				postalCode: string;

				/**
				 * Producer of the content.
				 */
				producer: string;

				/**
				 * The list of projects that this item is part of.
				 */
				projects: string[];

				/**
				 * Used to designate the entity responsible for making the resource available.
				 */
				publishers: string[];

				/**
				 * User rating of this item out of 5 stars.
				 */
				rating: number;

				/**
				 * A description of the rating, for example, the number of reviewers.
				 */
				ratingDescription: string;

				/**
				 * The recording date of the song/composition.
				 */
				recordingDate: string;

				/**
				 * For activities this is the unique identifier for the item this activity is related to.
				 */
				relatedUniqueIdentifier: string;

				/**
				 * Used to provide a link to information about rights held in and over resource.
				 */
				rights: string[];

				/**
				 * Used to indicate the role of the document creator.
				 */
				role: string;

				/**
				 * Security (encryption) method used in the file.
				 */
				securityMethod: string;

				/**
				 * Whether the content is prepared for streaming.  Set to `0` for not streamable and `1` for streamable.
				 */
				streamable: number;

				/**
				 * The sub-location (e.g., street number) for the item according to guidelines established by the provider.
				 */
				subThoroughfare: string;

				/**
				 * Subject of the the item.
				 */
				subject: string;

				/**
				 * Used to determine if navigation is supported.
				 */
				supportsNavigation: number;

				/**
				 * Used to indicate that using the phone number is appropriate.
				 */
				supportsPhoneCall: number;

				/**
				 * The tempo of the music contained in the audio file in Beats Per Minute.
				 */
				tempo: number;

				/**
				 * Theme of the the item.
				 */
				theme: string;

				/**
				 * The location (e.g., street name) for the item according to guidelines established by the provider.
				 */
				thoroughfare: string;

				/**
				 * Image data for thumbnail for this item.
				 */
				thumbnailData: string | Titanium.Blob;

				/**
				 * File URL pointing to a thumbnail image for this item.
				 */
				thumbnailURL: string;

				/**
				 * The time signature of the musical composition contained in the audio/MIDI file.
				 */
				timeSignature: string;

				/**
				 * The title of the particular item.
				 */
				title: string;

				/**
				 * The total bit rate (audio and video combined) of the media.
				 */
				totalBitRate: number;

				/**
				 * URL of the item.
				 */
				url: string;

				/**
				 * A version specifier for this item.
				 */
				version: string;

				/**
				 * The video bit rate.
				 */
				videoBitRate: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.App.iOS.UserActivity
			 */
			interface UserActivityBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.App.iOS.UserActivity;

			}
			/**
			 * Fired if the activity context needs to be saved before being continued on another device.
			 * To fire the event, set the UserActiviy object's `needsSave ` property to `true`.
			 * The receiver should update the activity with current activity state.
			 * After the event is fired, iOS will reset the `needsSave` property to false.
			 */
			interface UserActivity_useractivitywillsave_Event extends UserActivityBaseEvent {
				/**
				 * The activityType of the User Activity triggering the event.
				 */
				activityType: string;

				/**
				 * The title of the User Activity if defined.
				 */
				title: string;

				/**
				 * Dictionary object containing the userInfo data of the User Activity.
				 */
				userInfo: any;

				/**
				 * The webpageURL of the User Activity if defined.
				 */
				webpageURL: string;

			}
			/**
			 * Fired when the user activity was continued on another device.
			 */
			interface UserActivity_useractivitywascontinued_Event extends UserActivityBaseEvent {
				/**
				 * The activityType of the User Activity triggering the event.
				 */
				activityType: string;

				/**
				 * The title of the User Activity if defined.
				 */
				title: string;

				/**
				 * Dictionary object containing the userInfo data of the User Activity.
				 */
				userInfo: any;

				/**
				 * The webpageURL of the User Activity if defined.
				 */
				webpageURL: string;

			}
			/**
			 * Fired when the user activity get deleted using the <Titanium.App.iOS.UserActivity.deleteAllSavedUserActivities> or
			 * <Titanium.App.iOS.UserActivity.deleteSavedUserActivitiesForPersistentIdentifiers> methods.
			 */
			interface UserActivity_useractivitydeleted_Event extends UserActivityBaseEvent {
			}
			interface UserActivityEventMap extends ProxyEventMap {
				useractivitydeleted: UserActivity_useractivitydeleted_Event;

				useractivitywascontinued: UserActivity_useractivitywascontinued_Event;

				useractivitywillsave: UserActivity_useractivitywillsave_Event;

			}
			/**
			 * The UserActivity module is used to enable device Handoff and to create User Activities.
			 */
			class UserActivity extends Titanium.Proxy {
				/**
				 * Name of the activity type.
				 */
				activityType: string;

				/**
				 * Set to true if this user activity should be eligible to be handed off to another device
				 */
				eligibleForHandoff: boolean;

				/**
				 * A Boolean value that determines whether Siri can suggest the user activity as a shortcut to the user.
				 */
				eligibleForPrediction: boolean;

				/**
				 * Set to `true` if the user activity can be publicly accessed by all iOS users.
				 */
				eligibleForPublicIndexing: boolean;

				/**
				 * Set to true if the user activity should be added to the on-device index.
				 */
				eligibleForSearch: boolean;

				/**
				 * Absolute date after which the activity is no longer eligible to be indexed or handed off.
				 */
				expirationDate: string;

				/**
				 * An array of string keywords representing words or phrases that might help the user to find the activity in the application history.
				 */
				keywords: string[];

				/**
				 * Set to true everytime you have updated the user activity and need the changes to be saved before handing it off to another device.
				 */
				needsSave: boolean;

				/**
				 * A value used to identify the user activity.
				 */
				persistentIdentifier: string;

				/**
				 * An array of String keys from the userInfo property which represent the minimal information about the user activity that should be stored for later restoration.
				 */
				requiredUserInfoKeys: string[];

				/**
				 * Determines if user activities are supported (`true`) or not (`false`) by the device.
				 * @deprecated Use [Titanium.App.iOS.UserActivity.isSupported](Titanium.App.iOS.UserActivity.isSupported) instead.
				 */
				supported: boolean;

				/**
				 * An optional, user-visible title for this activity such as a document name or web page title.
				 */
				title: string;

				/**
				 * The userInfo dictionary contains application-specific state needed to continue an activity on another device.
				 */
				userInfo: any;

				/**
				 * When no suitable application is installed on a resuming device and the `webpageURL` property is set,
				 * the user activity will instead be continued in a web browser by loading the specified URL.
				 */
				webpageURL: string;

				/**
				 * Adds a Titanium.App.iOS.SearchableItemAttributeSet to the user activity.
				 */
				addContentAttributeSet(contentAttributeSet: Titanium.App.iOS.SearchableItemAttributeSet): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof UserActivityEventMap>(name: K, callback: (this: Titanium.App.iOS.UserActivity, event: UserActivityEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Marks the activity as currently in use by the user.
				 */
				becomeCurrent(): void;

				/**
				 * Deletes all user activities created by your app.
				 */
				deleteAllSavedUserActivities(): void;

				/**
				 * Deletes user activities created by your app that have the specified persistent identifiers.
				 */
				deleteSavedUserActivitiesForPersistentIdentifiers(persistentIdentifiers: ReadonlyArray<string>): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof UserActivityEventMap>(name: K, event?: UserActivityEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Invalidates an activity when it is no longer eligible for continuation.
				 */
				invalidate(): void;

				/**
				 * Determines if user activities are supported (`true`) or not (`false`) by the device.
				 */
				isSupported(): boolean;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof UserActivityEventMap>(name: K, callback: (this: Titanium.App.iOS.UserActivity, event: UserActivityEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Marks the activity as currently **not** in use and ineligible to be continued.
				 */
				resignCurrent(): void;

			}
			/**
			 * Base event for class Titanium.App.iOS.UserDefaults
			 */
			interface UserDefaultsBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.App.iOS.UserDefaults;

			}
			/**
			 * Fired when a property is changed.
			 */
			interface UserDefaults_change_Event extends UserDefaultsBaseEvent {
			}
			interface UserDefaultsEventMap extends ProxyEventMap {
				change: UserDefaults_change_Event;

			}
			/**
			 * The UserDefaults module is used for storing application-related data in property/value pairs
			 * that persist beyond application sessions and device power cycles. UserDefaults allows the suiteName
			 * of the UserDefaults to be specified at creation time.
			 */
			interface UserDefaults extends Titanium.App.Properties {
				/**
				 * Sets the name of the suite to be used to access UserDefaults.
				 */
				suiteName: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof UserDefaultsEventMap>(name: K, callback: (this: Titanium.App.iOS.UserDefaults, event: UserDefaultsEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof UserDefaultsEventMap>(name: K, event?: UserDefaultsEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof UserDefaultsEventMap>(name: K, callback: (this: Titanium.App.iOS.UserDefaults, event: UserDefaultsEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * An action the user selects in response to an interactive notification.
			 */
			class UserNotificationAction extends Titanium.Proxy {
				/**
				 * Selects how to activate the application.
				 */
				activationMode: number;

				/**
				 * Set to true if the action requires the device to be unlocked. On the Apple Watch actions never require authentication.
				 */
				authenticationRequired: boolean;

				/**
				 * Custom behavior the user notification supports.
				 */
				behavior: number;

				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				bubbleParent: never;

				/**
				 * Set to true if the action causes destructive behavior to the user's data or the application.
				 */
				destructive: boolean;

				/**
				 * Identifier for this action. Used to identify the action the user pressed.
				 */
				identifier: string;

				/**
				 * Title of the button displayed in the notification.
				 */
				title: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener: never;

				/**
				 * Applies the properties to the proxy.
				 */
				applyProperties: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener: never;

			}
			/**
			 * A set of notification actions to associate with a notification.
			 */
			class UserNotificationCategory extends Titanium.Proxy {
				/**
				 * Array of notification actions to associate with the group.
				 */
				actionsForDefaultContext: Titanium.App.iOS.UserNotificationAction[];

				/**
				 * Array of notification actions to display for non-dialog-style notification.
				 */
				actionsForMinimalContext: Titanium.App.iOS.UserNotificationAction[];

				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				bubbleParent: never;

				/**
				 * A format string for the summary description used when the system groups the category's notifications.
				 */
				categorySummaryFormat: string;

				/**
				 * The placeholder text to display when notification previews are disabled for the app.
				 */
				hiddenPreviewsBodyPlaceholder: string;

				/**
				 * Identifier for this category.
				 */
				identifier: string;

				/**
				 * The intents related to notifications of this category.
				 */
				intentIdentifiers: string[];

				/**
				 * Options for how to handle notifications of this type.
				 */
				options: number[];

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener: never;

				/**
				 * Applies the properties to the proxy.
				 */
				applyProperties: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener: never;

			}
			/**
			 * The top-level App iOS Notification Center module. It is used to control scheduled notifications
			 * and receive details about the system-wide notification settings.
			 */
			class UserNotificationCenter extends Titanium.Module {
				/**
				 * The name of the API that this proxy corresponds to.
				 */
				static readonly apiName: string;

				/**
				 * Indicates if the proxy will bubble an event to its parent.
				 */
				static bubbleParent: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				static addEventListener: never;

				/**
				 * Applies the properties to the proxy.
				 */
				static applyProperties: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				static fireEvent: never;

				/**
				 * Fetches the delivered notifications asynchronously.
				 */
				static getDeliveredNotifications(callback: (param0: UserNotificationCallbackResponse) => void): void;

				/**
				 * Fetches the pending notifications asynchronously.
				 */
				static getPendingNotifications(callback: (param0: UserNotificationCallbackResponse) => void): void;

				/**
				 * Removes the specified delivered notifications from the notification-center.
				 * If no notifications are specified, all delivered notifications will be removed.
				 */
				static removeDeliveredNotifications(notifications: ReadonlyArray<UserNotificationDictionary>): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				static removeEventListener: never;

				/**
				 * Removes the specified pending notifications to prevent them from being triggered.
				 * If no notifications are specified, all pending notifications will be removed.
				 */
				static removePendingNotifications(notifications: ReadonlyArray<UserNotificationDictionary>): void;

				/**
				 * Notification types and user notification categories the application is registered to use.
				 */
				static requestUserNotificationSettings(callback: (param0: GetUserNotificationSettings) => void): void;

			}
		}
		/**
		 * Base event for class Titanium.App.Android
		 */
		interface AndroidBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.App.Android;

		}
		/**
		 * Fired when a <Titanium.UI.ShortcutItem> is clicked.
		 */
		interface Android_shortcutitemclick_Event extends AndroidBaseEvent {
			/**
			 * Identifier of the clicked shortcut item.
			 */
			id: string;

		}
		interface AndroidEventMap extends ProxyEventMap {
			shortcutitemclick: Android_shortcutitemclick_Event;

		}
		/**
		 * A module used to access Android application resources.
		 */
		class Android extends Titanium.Module {
			/**
			 * The `R` namespace for application resources.
			 */
			static readonly R: Titanium.Android.R;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * The version number of the application.
			 */
			static readonly appVersionCode: number;

			/**
			 * The version name of the application.
			 */
			static readonly appVersionName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * Return the intent that was used to launch the application.
			 */
			static readonly launchIntent: Titanium.Android.Intent;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener<K extends keyof AndroidEventMap>(name: K, callback: (this: Titanium.App.Android, event: AndroidEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent<K extends keyof AndroidEventMap>(name: K, event?: AndroidEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener<K extends keyof AndroidEventMap>(name: K, callback: (this: Titanium.App.Android, event: AndroidEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.App.Properties
		 */
		interface PropertiesBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.App.Properties;

		}
		/**
		 * Fired when a property is changed.
		 */
		interface Properties_change_Event extends PropertiesBaseEvent {
		}
		interface PropertiesEventMap extends ProxyEventMap {
			change: Properties_change_Event;

		}
		/**
		 * The App Properties module is used for storing application-related data in property/value pairs
		 * that persist beyond application sessions and device power cycles.
		 */
		class Properties extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener<K extends keyof PropertiesEventMap>(name: K, callback: (this: Titanium.App.Properties, event: PropertiesEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent<K extends keyof PropertiesEventMap>(name: K, event?: PropertiesEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Returns the value of a property as a boolean data type.
			 */
			static getBool(property: string, defaultValue?: boolean): boolean;

			/**
			 * Returns the value of a property as a double (double-precision, floating point) data type.
			 */
			static getDouble(property: string, defaultValue?: number): number;

			/**
			 * Returns the value of a property as an integer data type.
			 */
			static getInt(property: string, defaultValue?: number): number;

			/**
			 * Returns the value of a property as an array data type.
			 */
			static getList(property: string, defaultValue?: ReadonlyArray<any>): any[];

			/**
			 * Returns the value of a property as an object.
			 */
			static getObject(property: string, defaultValue?: any): any;

			/**
			 * Returns the value of a property as a string data type.
			 */
			static getString(property: string, defaultValue?: string): string;

			/**
			 * Indicates whether a property exists.
			 */
			static hasProperty(property: string): boolean;

			/**
			 * Returns an array of property names.
			 */
			static listProperties(): any[];

			/**
			 * Removes all properties that have been set by the user on runtime, or does nothing otherwise.
			 */
			static removeAllProperties(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener<K extends keyof PropertiesEventMap>(name: K, callback: (this: Titanium.App.Properties, event: PropertiesEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a property if it exists, or does nothing otherwise.
			 */
			static removeProperty(property: string): void;

			/**
			 * Sets the value of a property as a boolean data type. The property will be created if it
			 * does not exist.
			 */
			static setBool(property: string, value: boolean): void;

			/**
			 * Sets the value of a property as a double (double-precision, floating point) data type. The
			 * property will be created if it does not exist.
			 */
			static setDouble(property: string, value: number): void;

			/**
			 * Sets the value of a property as an integer data type. The property will be created if it
			 * does not exist.
			 */
			static setInt(property: string, value: number): void;

			/**
			 * Sets the value of a property as an array data type. The property will be created if it
			 * does not exist.
			 */
			static setList(property: string, value: ReadonlyArray<any>): void;

			/**
			 * Sets the value of a property as an object data type. The property will be created if it
			 * does not exist.
			 */
			static setObject(property: string, value: any): void;

			/**
			 * Sets the value of a property as a string data type. The property will be created if it
			 * does not exist.
			 */
			static setString(property: string, value: string): void;

		}
		/**
		 * Base event for class Titanium.App.iOS
		 */
		interface iOSBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.App.iOS;

		}
		/**
		 * Fired when a local notification is received by the application.
		 */
		interface iOS_notification_Event extends iOSBaseEvent {
			/**
			 * Alert button text ('View', by default) or slider text ('slide to unlock...', by default).
			 */
			alertAction: string;

			/**
			 * Alert message.
			 */
			alertBody: string;

			/**
			 * Image displayed instead of `Default.png` when launching the application.
			 */
			alertLaunchImage: string;

			/**
			 * Application badge value.
			 */
			badge: number;

			/**
			 * The identifier of the app-defined [category object](Titanium.App.iOS.UserNotificationCategory). Available in Titanium SDK 7.5.0+ and iOS 10+.
			 */
			category: string;

			/**
			 * Date and time when the notification was configured to fire.
			 */
			date: Date;

			/**
			 * Boolean indicating if notification was received while app was in background. Available in Titanium SDK 6.2.0.
			 * On iOS 10+ this is no longer available since this event will only fire if the app is in foreground.
			 */
			inBackground: boolean;

			/**
			 * Name of the sound file configured to play when the notification was fired.
			 */
			sound: string;

			/**
			 * The unique identifier for the thread or conversation related to this notification request.
			 * It will be used to visually group notifications together. Available in Titanium SDK 7.5.0+ and iOS 10+.
			 */
			threadIdentifier: string;

			/**
			 * Timezone of the date when the notification was configured to fire. Available in Titanium SDK 7.4.0+.
			 */
			timezone: string;

			/**
			 * Custom data object.
			 */
			userInfo: any;

		}
		/**
		 * Fired when a user selects an action for an interactive local notification.
		 */
		interface iOS_localnotificationaction_Event extends iOSBaseEvent {
			/**
			 * Alert button text ('Open', by default) or slider text ('slide to unlock...', by default).
			 */
			alertAction: string;

			/**
			 * Alert message.
			 */
			alertBody: string;

			/**
			 * Image displayed instead of `Default.png` when launching the application.
			 */
			alertLaunchImage: string;

			/**
			 * Application badge value.
			 */
			badge: number;

			/**
			 * The identifier of the app-defined [category object](Titanium.App.iOS.UserNotificationCategory). Available in Titanium SDK 7.5.0+ and iOS 10+.
			 */
			category: string;

			/**
			 * Date and time when the notification was configured to fire.
			 */
			date: Date;

			/**
			 * Identifier of the action that was selected of the interactive notification.
			 */
			identifier: string;

			/**
			 * Boolean indicating if notification was received while app was in background (since Titanium SDK 6.2.0).
			 * On iOS 10+ this is no longer available since the event will only fire when opening the app after interacting
			 * with a notification from the iOS notification center (which means the app was in background when the
			 * notification was received).
			 */
			inBackground: boolean;

			/**
			 * Path to the sound file configured to play when the notification was fired.
			 */
			sound: string;

			/**
			 * The unique identifier for the thread or conversation related to this notification request.
			 * It will be used to visually group notifications together. Available in Titanium SDK 7.5.0+ and iOS 10+.
			 */
			threadIdentifier: string;

			/**
			 * Timezone of the date when the notification was configured to fire.
			 */
			timezone: string;

			/**
			 * User input if the notification used the `USER_NOTIFICATION_BEHAVIOR_TEXTINPUT` behavior.
			 */
			typedText: string;

			/**
			 * Custom data object.
			 */
			userInfo: any;

		}
		/**
		 * Fired when a user selects an action for an interactive remote notification.
		 */
		interface iOS_remotenotificationaction_Event extends iOSBaseEvent {
			/**
			 * Identifier of the category of the interactive notification.
			 */
			category: string;

			/**
			 * The payload passed to the Apple Push Notification Service.
			 */
			data: any;

			/**
			 * Identifier of the action that was selected of the interactive notification.
			 */
			identifier: string;

		}
		/**
		 * Fired when the application is woken up for a fetch operation. Available only on iOS 7 and later.
		 */
		interface iOS_backgroundfetch_Event extends iOSBaseEvent {
			/**
			 * Unique string identifier for the `backgroundfetch` event. This identifier should be passed as the argument
			 * to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
			 */
			handlerId: string;

		}
		/**
		 * Fired when the application is woken up by a silent remote notification. Available only on iOS 7 and later.
		 */
		interface iOS_silentpush_Event extends iOSBaseEvent {
			/**
			 * Unique string identifier for the `silentpush` event. This identifier should be passed as the argument
			 * to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
			 */
			handlerId: string;

		}
		/**
		 * Fired when the events related to a [urlSession](Modules.URLSession) are waiting to be processed.
		 * Available only on iOS 7 and later.
		 */
		interface iOS_backgroundtransfer_Event extends iOSBaseEvent {
			/**
			 * Unique string identifier for the `backgroundtransfer` event. This identifier should be passed as the argument
			 * to the [endBackgroundHandler](Titanium.App.iOS.endBackgroundHandler) method.
			 */
			handlerId: string;

			/**
			 * The identifier of the URL session requiring attention. If your app was just launched,
			 * you can use this identifier to create a new `urlSession` object that can receive the events.
			 */
			sessionId: string;

		}
		/**
		 * Fired periodically to inform the app about the download's progress of a [urlSession](Modules.URLSession).
		 * Available only on iOS 7 and later.
		 */
		interface iOS_downloadprogress_Event extends iOSBaseEvent {
			/**
			 * The number of bytes transferred since the last time this event was fired.
			 */
			bytesWritten: number;

			/**
			 * The `urlSession` session identifier. If it does not exist, this property is not provided.
			 * This property is available since Titanium Mobile 5.4.0.GA.
			 */
			sessionIdentifier: string;

			/**
			 * The `urlSession` download task's identifier.
			 */
			taskIdentifier: number;

			/**
			 * The expected length of the file, as provided by the Content-Length header. If this
			 * header was not provided, the value is zero.
			 */
			totalBytesExpectedToWrite: number;

			/**
			 * The total number of bytes transferred so far.
			 */
			totalBytesWritten: number;

		}
		/**
		 * Fired periodically to inform the app about the upload's progress of a [urlSession](Modules.URLSession).
		 * Available only on iOS 7 and later.
		 */
		interface iOS_uploadprogress_Event extends iOSBaseEvent {
			/**
			 * The number of bytes transferred since the last time this event was fired.
			 */
			bytesSent: number;

			/**
			 * The `urlSession` session identifier. If it does not exist, this property is not provided.
			 * This property is available since Titanium Mobile 5.4.0.GA.
			 */
			sessionIdentifier: string;

			/**
			 * The `urlSession` upload task's identifier.
			 */
			taskIdentifier: number;

			/**
			 * The expected length of the file, as provided by the Content-Length header. If this
			 * header was not provided, the value is zero.
			 */
			totalBytesExpectedToSend: number;

			/**
			 * The total number of bytes transferred so far.
			 */
			totalBytesSent: number;

		}
		/**
		 * Fired to indicate that a [urlSession's](Modules.URLSession) download task has finished downloading.
		 * Available only on iOS 7 and later.
		 */
		interface iOS_downloadcompleted_Event extends iOSBaseEvent {
			/**
			 * The downloaded data as a Titanium.Blob object.
			 */
			data: Titanium.Blob;

			/**
			 * The `urlSession` session identifier. If it does not exist, this property is not provided.
			 * This property is available since Titanium Mobile 5.4.0.GA.
			 */
			sessionIdentifier: string;

			/**
			 * The `urlSession` download task's identifier.
			 */
			taskIdentifier: number;

		}
		/**
		 * Fired to indicate that a [urlSession](Modules.URLSession) task finished transferring data.
		 * Available only on iOS 7 and later.
		 */
		interface iOS_sessioncompleted_Event extends iOSBaseEvent {
			/**
			 * The error code of the error, if any (potentially system-dependent).
			 */
			errorCode: number;

			/**
			 * A string containing the localized description of the error.
			 * This property does not exhist if errorCode is 0, which means there is no error.
			 */
			message: string;

			/**
			 * The response text for [task](Modules.URLSession.task) and [uploadTask](Modules.URLSession.uploadTask).
			 * This property does not exhist for download task. For download task response,
			 * use [downloadcompleted](Titanium.App.iOS.downloadcompleted) event.
			 */
			responseText: string;

			/**
			 * The `urlSession` session identifier. If it does not exist, this property is not provided.
			 * This property is available since Titanium Mobile 5.4.0.GA.
			 */
			sessionIdentifier: string;

			/**
			 * The response status code for tasks.
			 */
			statusCode: number;

			/**
			 * Indicates if the operation succeeded. Returns true if download succeeded, false otherwise.
			 */
			success: boolean;

			/**
			 * The `urlSession` download task's identifier.
			 */
			taskIdentifier: number;

		}
		/**
		 * Fired to indicate that all messages enqueued for a [urlSession](Modules.URLSession) have been delivered.
		 * Available only on iOS 7 and later.
		 */
		interface iOS_sessioneventscompleted_Event extends iOSBaseEvent {
			/**
			 * The `urlSession` session identifier. If it does not exist, this property is not provided.
			 * This property is available since Titanium Mobile 5.4.0.GA.
			 */
			sessionIdentifier: string;

		}
		/**
		 * Fired when the user notification settings are registered.
		 */
		interface iOS_usernotificationsettings_Event extends iOSBaseEvent {
			/**
			 * Set of categories of user notification actions the application is registered to use.
			 */
			categories: Titanium.App.iOS.UserNotificationCategory[];

			/**
			 * Notification types the application is registered to use.
			 */
			types: number[];

		}
		/**
		 * Fired when openParentApplication:reply is called from a WatchKit extension. Available only on iOS 8.2 and later.
		 */
		interface iOS_watchkitextensionrequest_Event extends iOSBaseEvent {
			/**
			 * Unique string identifier for the `watchkitextensionrequest` event. This identifier should be passed an argument
			 * to the [sendWatchExtensionReply](Titanium.App.iOS.sendWatchExtensionReply) method.
			 */
			handlerId: string;

			/**
			 * The payload passed to the `openParentApplication:reply` method from the WatchKit extension.
			 */
			userInfo: any;

		}
		/**
		 * Fired when iOS continueactivity calls `continueUserActivity`.
		 */
		interface iOS_continueactivity_Event extends iOSBaseEvent {
			/**
			 * Unique string identifier for the handoff user activity. The identifier must be defined in your `tiapp.xml` file.
			 */
			activityType: string;

			/**
			 * With field will contain the searchable Unique Identifier if the continueactivity is fired from a Core Spotlight searh result.
			 */
			searchableItemActivityIdentifier: string;

			/**
			 * The optional title provided to the user activity or search item.
			 */
			title: string;

			/**
			 * The optional userInfo provided to the user activity. The userInfo is a custom dictionary and can contain any information needed
			 * to create your handoff or Core Spotlight session.
			 */
			userInfo: any;

			/**
			 * The optional webpageURL provided to the user activity.
			 */
			webpageURL: string;

		}
		/**
		 * Fired when a user taps the Application Shortcut.
		 */
		interface iOS_shortcutitemclick_Event extends iOSBaseEvent {
			/**
			 * The unique identifier for the application shortcut.
			 */
			itemtype: string;

			/**
			 * The subtitle of the application shortcut.
			 */
			subtitle: string;

			/**
			 * The title of the application shortcut.
			 */
			title: string;

			/**
			 * The payload passed by the application shortcut.
			 */
			userInfo: any;

		}
		/**
		 * Fired when a new URL is handled by the application.
		 */
		interface iOS_handleurl_Event extends iOSBaseEvent {
			/**
			 * The launch options that are related to opening the URL.
			 */
			launchOptions: LaunchOptionsType;

		}
		/**
		 * Fired when the trait collection of the device changes, e.g. the user interface style.
		 */
		interface iOS_traitcollectionchange_Event extends iOSBaseEvent {
		}
		/**
		 * Fired after the user takes a screenshot, e.g. by pressing both the home and lock screen buttons.
		 */
		interface iOS_screenshotcaptured_Event extends iOSBaseEvent {
		}
		interface iOSEventMap extends ProxyEventMap {
			backgroundfetch: iOS_backgroundfetch_Event;

			backgroundtransfer: iOS_backgroundtransfer_Event;

			continueactivity: iOS_continueactivity_Event;

			downloadcompleted: iOS_downloadcompleted_Event;

			downloadprogress: iOS_downloadprogress_Event;

			handleurl: iOS_handleurl_Event;

			localnotificationaction: iOS_localnotificationaction_Event;

			notification: iOS_notification_Event;

			remotenotificationaction: iOS_remotenotificationaction_Event;

			screenshotcaptured: iOS_screenshotcaptured_Event;

			sessioncompleted: iOS_sessioncompleted_Event;

			sessioneventscompleted: iOS_sessioneventscompleted_Event;

			shortcutitemclick: iOS_shortcutitemclick_Event;

			silentpush: iOS_silentpush_Event;

			traitcollectionchange: iOS_traitcollectionchange_Event;

			uploadprogress: iOS_uploadprogress_Event;

			usernotificationsettings: iOS_usernotificationsettings_Event;

			watchkitextensionrequest: iOS_watchkitextensionrequest_Event;

		}
		/**
		 * The top-level App iOS module, available only to iOS devices, that includes the facilities to
		 * create and manage local notifications and background services.
		 */
		class iOS extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Returns a URL to open the app's settings.
			 */
			static readonly applicationOpenSettingsURL: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * Notification types and user notification categories the application is registered to use.
			 * @deprecated Use [Titanium.App.iOS.UserNotificationCenter.requestUserNotificationSettings](Titanium.App.iOS.UserNotificationCenter.requestUserNotificationSettings) instead.
			 */
			static readonly currentUserNotificationSettings: UserNotificationSettings;

			/**
			 * Provides an Array of the NSUserActivityTypes keys defined within your Titanium project.
			 */
			static readonly supportedUserActivityTypes: string[];

			/**
			 * The style associated with the user interface.
			 * @deprecated Use <Titanium.UI.userInterfaceStyle> instead, which is supported cross-platform.
			 */
			static readonly userInterfaceStyle: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener<K extends keyof iOSEventMap>(name: K, callback: (this: Titanium.App.iOS, event: iOSEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Cancels all scheduled local notifications.
			 * @deprecated Use [Titanium.App.iOS.UserNotificationCenter.removePendingNotifications](Titanium.App.iOS.UserNotificationCenter.removePendingNotifications) instead.
			 */
			static cancelAllLocalNotifications(): void;

			/**
			 * Cancels a local notification.
			 * @deprecated Use [Titanium.App.iOS.UserNotificationCenter.removePendingNotifications](Titanium.App.iOS.UserNotificationCenter.removePendingNotifications) instead.
			 */
			static cancelLocalNotification(id: number | string): void;

			/**
			 * Creates and returns an instance of Titanium.App.iOS.UserDefaults.
			 */
			static createUserDefaults(parameters: Dictionary<Titanium.App.iOS.UserDefaults>): Titanium.App.iOS.UserDefaults;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationAction>.
			 */
			static createUserNotificationAction(parameters?: Dictionary<Titanium.App.iOS.UserNotificationAction>): Titanium.App.iOS.UserNotificationAction;

			/**
			 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationCategory>.
			 */
			static createUserNotificationCategory(parameters?: Dictionary<Titanium.App.iOS.UserNotificationCategory>): Titanium.App.iOS.UserNotificationCategory;

			/**
			 * Marks the end of the app execution after initiating the download operation. Available only on iOS 7 and later.
			 */
			static endBackgroundHandler(handlerID: string): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent<K extends keyof iOSEventMap>(name: K, event?: iOSEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Registers a service to run when the application is placed in the background.
			 */
			static registerBackgroundService(params: any): Titanium.App.iOS.BackgroundService;

			/**
			 * Registers the application to use the requested notification types and categories.
			 */
			static registerUserNotificationSettings(params: UserNotificationSettings): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener<K extends keyof iOSEventMap>(name: K, callback: (this: Titanium.App.iOS, event: iOSEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Schedule a local notification.
			 */
			static scheduleLocalNotification(params: NotificationParams): Titanium.App.iOS.LocalNotification;

			/**
			 * Marks the end of an `openParentApplication:reply` execution by a WatchKit extension.
			 * @deprecated Use [Titanium.WatchSession](Titanium.WatchSession) instead, which is supported on iOS 9 and later.
			 *
			 */
			static sendWatchExtensionReply(handlerId: string, userInfo: any): void;

			/**
			 * Specifies the minimum amount of time that must elapse between background fetch operations.
			 * Available only on iOS 7 and later.
			 */
			static setMinimumBackgroundFetchInterval(fetchInterval: number): void;

		}
	}
	/**
	 * The Calendar module provides an API for accessing the native calendar functionality.
	 */
	namespace Calendar {
		/**
		 * Attendee role is chair.
		 */
		const ATTENDEE_ROLE_CHAIR: number;

		/**
		 * Attendee is not a participant.
		 */
		const ATTENDEE_ROLE_NON_PARTICIPANT: number;

		/**
		 * Attendee role is optional.
		 */
		const ATTENDEE_ROLE_OPTIONAL: number;

		/**
		 * Attendee role is required.
		 */
		const ATTENDEE_ROLE_REQUIRED: number;

		/**
		 * Attendee role is unknown.
		 */
		const ATTENDEE_ROLE_UNKNOWN: number;

		/**
		 * Attendee status is accepted.
		 */
		const ATTENDEE_STATUS_ACCEPTED: number;

		/**
		 * Attendee status is declined.
		 */
		const ATTENDEE_STATUS_DECLINED: number;

		/**
		 * Attendee status is delegated.
		 */
		const ATTENDEE_STATUS_DELEGATED: number;

		/**
		 * Attendee status is invited.
		 */
		const ATTENDEE_STATUS_INVITED: number;

		/**
		 * Attendee status is in process.
		 */
		const ATTENDEE_STATUS_IN_PROCESS: number;

		/**
		 * There is no Attendee status.
		 */
		const ATTENDEE_STATUS_NONE: number;

		/**
		 * Attendee status is pending.
		 */
		const ATTENDEE_STATUS_PENDING: number;

		/**
		 * Attendee status is tentative.
		 */
		const ATTENDEE_STATUS_TENTATIVE: number;

		/**
		 * Attendee status is unknown.
		 */
		const ATTENDEE_STATUS_UNKNOWN: number;

		/**
		 * Attendee type is group.
		 */
		const ATTENDEE_TYPE_GROUP: number;

		/**
		 * There is not attendee type.
		 */
		const ATTENDEE_TYPE_NONE: number;

		/**
		 * Attendee type is person.
		 */
		const ATTENDEE_TYPE_PERSON: number;

		/**
		 * Attendee type is required.
		 */
		const ATTENDEE_TYPE_REQUIRED: number;

		/**
		 * Attendee type is resource.
		 */
		const ATTENDEE_TYPE_RESOURCE: number;

		/**
		 * Attendee type is room.
		 */
		const ATTENDEE_TYPE_ROOM: number;

		/**
		 * Attendee type is unknown.
		 */
		const ATTENDEE_TYPE_UNKNOWN: number;

		/**
		 * An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
		 * indicating that the application is authorized to use events in the Calendar.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
		 * indicating that the application is not authorized to use events in the Calendar.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
		 * indicating that the application is not authorized to use events in the Calendar.
		 * the user cannot change this application's status.
		 */
		const AUTHORIZATION_RESTRICTED: number;

		/**
		 * An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * Event has a busy availability setting.
		 */
		const AVAILABILITY_BUSY: number;

		/**
		 * Event has a free availability setting.
		 */
		const AVAILABILITY_FREE: number;

		/**
		 * Availability settings are not supported by the event's calendar.
		 */
		const AVAILABILITY_NOTSUPPORTED: number;

		/**
		 * Event has a tentative availability setting.
		 */
		const AVAILABILITY_TENTATIVE: number;

		/**
		 * Event has a tentative availability setting.
		 */
		const AVAILABILITY_UNAVAILABLE: number;

		/**
		 * Reminder alert delivery method.
		 */
		const METHOD_ALERT: number;

		/**
		 * Reminder default delivery method.
		 */
		const METHOD_DEFAULT: number;

		/**
		 * Reminder email delivery method.
		 */
		const METHOD_EMAIL: number;

		/**
		 * Reminder SMS delivery method.
		 */
		const METHOD_SMS: number;

		/**
		 * Indicates a daily recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_DAILY: number;

		/**
		 * Indicates a monthly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_MONTHLY: number;

		/**
		 * Indicates a weekly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_WEEKLY: number;

		/**
		 * Indicates a yearly recurrence rule for a events reccurance frequency.
		 */
		const RECURRENCEFREQUENCY_YEARLY: number;

		/**
		 * Relationship is attendee.
		 */
		const RELATIONSHIP_ATTENDEE: number;

		/**
		 * There is no relationship.
		 */
		const RELATIONSHIP_NONE: number;

		/**
		 * Attendee is organizer.
		 */
		const RELATIONSHIP_ORGANIZER: number;

		/**
		 * Attendee is performer.
		 */
		const RELATIONSHIP_PERFORMER: number;

		/**
		 * Attendee is speaker.
		 */
		const RELATIONSHIP_SPEAKER: number;

		/**
		 * Relationship is unknown.
		 */
		const RELATIONSHIP_UNKNOWN: number;

		/**
		 * A birthday calendar source.
		 */
		const SOURCE_TYPE_BIRTHDAYS: number;

		/**
		 * A calDev calendar source.
		 */
		const SOURCE_TYPE_CALDAV: number;

		/**
		 * A microsoft exchange calendar source.
		 */
		const SOURCE_TYPE_EXCHANGE: number;

		/**
		 * A local calendar source.
		 */
		const SOURCE_TYPE_LOCAL: number;

		/**
		 * A mobileMe calendar source.
		 */
		const SOURCE_TYPE_MOBILEME: number;

		/**
		 * A subscribed calendar source.
		 */
		const SOURCE_TYPE_SUBSCRIBED: number;

		/**
		 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
		 * indicating modifications to this event instance should also affect future instances of this event.
		 */
		const SPAN_FUTUREEVENTS: number;

		/**
		 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
		 * indicating modifications to this event instance should affect only this instance.
		 */
		const SPAN_THISEVENT: number;

		/**
		 * Alert dismissed state.
		 */
		const STATE_DISMISSED: number;

		/**
		 * Alert fired state.
		 */
		const STATE_FIRED: number;

		/**
		 * Alert scheduled status.
		 */
		const STATE_SCHEDULED: number;

		/**
		 * Event canceled status.
		 */
		const STATUS_CANCELED: number;

		/**
		 * Event confirmed status.
		 */
		const STATUS_CONFIRMED: number;

		/**
		 * Event has no status.
		 */
		const STATUS_NONE: number;

		/**
		 * Event tentative status.
		 */
		const STATUS_TENTATIVE: number;

		/**
		 * Event confidential visibility.
		 */
		const VISIBILITY_CONFIDENTIAL: number;

		/**
		 * Event default visibility.
		 */
		const VISIBILITY_DEFAULT: number;

		/**
		 * Event private visibility.
		 */
		const VISIBILITY_PRIVATE: number;

		/**
		 * Event public visibility.
		 */
		const VISIBILITY_PUBLIC: number;

		/**
		 * An object that represents a single alert for an event in an calendar.
		 */
		class Alert extends Titanium.Proxy {
			/**
			 * The absolute date for the alarm.
			 */
			absoluteDate: Date;

			/**
			 * Date/time at which this alert alarm is set to trigger.
			 */
			readonly alarmTime: Date;

			/**
			 * Start date/time for the corresponding event.
			 */
			readonly begin: Date;

			/**
			 * End date/time for the corresponding event.
			 */
			readonly end: Date;

			/**
			 * Identifier of the event for which this alert is set.
			 */
			readonly eventId: number;

			/**
			 * Identifier of this alert.
			 */
			readonly id: string;

			/**
			 * Reminder notice period in minutes, that determines how long prior to the event this alert
			 * should trigger.
			 */
			readonly minutes: number;

			/**
			 * The offset from the start of an event, at which the alarm fires.
			 */
			relativeOffset: number;

			/**
			 * The current state of the alert.
			 */
			readonly state: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An object that represents a single attendee of an event.
		 */
		interface Attendee extends Titanium.Proxy {
			/**
			 * The attendee email.
			 */
			readonly email: string;

			/**
			 * Indicates whether this attendee is the event organizer.
			 */
			readonly isOrganizer: boolean;

			/**
			 * The attendee name.
			 */
			readonly name: string;

			/**
			 * The role of the attendee.
			 */
			readonly role: number;

			/**
			 * The status of the attendee.
			 */
			readonly status: number;

			/**
			 * The type of the attendee.
			 */
			readonly type: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An object that represents a single calendar.
		 */
		class Calendar extends Titanium.Proxy {
			/**
			 * Indicates whether this calendar can be edited or deleted.
			 */
			readonly hidden: boolean;

			/**
			 * Identifier of this calendar.
			 */
			readonly id: string;

			/**
			 * Display name of this calendar.
			 */
			readonly name: string;

			/**
			 * Indicates whether the calendar is selected.
			 */
			readonly selected: boolean;

			/**
			 * Displays the source identifier.
			 */
			readonly sourceIdentifier: string;

			/**
			 * Displays the source title.
			 */
			readonly sourceTitle: string;

			/**
			 * Displays the source type.
			 */
			readonly sourceType: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Creates an event in this calendar.
			 */
			createEvent(properties: Dictionary<Titanium.Calendar.Event>): Titanium.Calendar.Event;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets the event with the specified identifier.
			 */
			getEventById(id: string): Titanium.Calendar.Event;

			/**
			 * Gets events that occur between two dates.
			 */
			getEventsBetweenDates(date1: Date | string, date2: Date | string): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur on a specified date.
			 * @deprecated Use [Titanium.Calendar.Calendar.getEventsBetweenDates](Titanium.Calendar.Calendar.getEventsBetweenDates) instead.
			 */
			getEventsInDate(year: number, month: number, day: number): Titanium.Calendar.Event[];

			/**
			 * Gets events that occur during a specified month.
			 * @deprecated Use [Titanium.Calendar.Calendar.getEventsBetweenDates](Titanium.Calendar.Calendar.getEventsBetweenDates) instead.
			 */
			getEventsInMonth(year: number, month: number): Titanium.Calendar.Event[];

			/**
			 * Gets all events that occur during a specified year.
			 * @deprecated Use [Titanium.Calendar.Calendar.getEventsBetweenDates](Titanium.Calendar.Calendar.getEventsBetweenDates) instead.
			 */
			getEventsInYear(year: number): Titanium.Calendar.Event[];

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An object that represents a single event in a calendar.
		 */
		class Event extends Titanium.Proxy {
			/**
			 * Alarms associated with the calendar item, as an array of <Titanium.Calendar.Alert> objects.
			 */
			alerts: Titanium.Calendar.Alert[];

			/**
			 * Indicates whether this event is all day.
			 */
			allDay: boolean;

			/**
			 * The list of event attendees. This list will be empty if the event has no attendees.
			 */
			readonly attendees: Titanium.Calendar.Attendee[];

			/**
			 * Availability of this event.
			 */
			availability: number;

			/**
			 * Start date/time of this event.
			 */
			begin: Date;

			/**
			 * Description of this event.
			 */
			readonly description: string;

			/**
			 * End date/time of this event.
			 */
			end: Date;

			/**
			 * Extended properties of this event.
			 */
			readonly extendedProperties: any;

			/**
			 * Indicates whether an alarm is scheduled for this event.
			 */
			readonly hasAlarm: boolean;

			/**
			 * Identifier of this event.
			 */
			readonly id: string;

			/**
			 * Boolean value that indicates whether an event is a detached instance of a
			 * repeating event.
			 */
			readonly isDetached: boolean;

			/**
			 * Location of this event.
			 */
			location: string;

			/**
			 * Notes for this event.
			 */
			notes: string;

			/**
			 * The recurrence rules for the calendar item.
			 */
			recurrenceRules: Titanium.Calendar.RecurrenceRule[];

			/**
			 * Existing reminders for this event.
			 */
			readonly reminders: Titanium.Calendar.Reminder[];

			/**
			 * Status of this event.
			 */
			readonly status: number;

			/**
			 * Title of this event.
			 */
			title: string;

			/**
			 * Visibility of this event.
			 */
			readonly visibility: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a recurrence rule to the recurrence rule array.
			 */
			addRecurrenceRule(rule: Titanium.Calendar.RecurrenceRule): void;

			/**
			 * Creates an alert for this event.
			 */
			createAlert(data: Dictionary<Titanium.Calendar.Alert>): Titanium.Calendar.Alert;

			/**
			 * Creates an recurrence pattern for a recurring event.
			 * All of the properties for the recurrence rule must be set during creation.
			 * The recurrence rule properties cannot be modified.
			 */
			createRecurrenceRule(data: Dictionary<Titanium.Calendar.RecurrenceRule>): Titanium.Calendar.RecurrenceRule;

			/**
			 * Creates a reminder for this event.
			 */
			createReminder(data: Dictionary<Titanium.Calendar.Reminder>): Titanium.Calendar.Reminder;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets the value of the specified extended property.
			 */
			getExtendedProperty(name: string): string;

			/**
			 * Updates the event's data with the current information in the Calendar database.
			 */
			refresh(): boolean;

			/**
			 * Removes an event from the event store.
			 */
			remove(span: number): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a recurrence rule to the recurrence rule array.
			 */
			removeRecurrenceRule(rule: Titanium.Calendar.RecurrenceRule): void;

			/**
			 * Saves changes to an event permanently.
			 */
			save(span: number): boolean;

			/**
			 * Sets the value of the specified extended property.
			 */
			setExtendedProperty(name: string, value: string): void;

		}
		/**
		 * An object that is used to describe the recurrence pattern for a recurring event.
		 */
		interface RecurrenceRule extends Titanium.Proxy {
			/**
			 * Identifier for the recurrence rule's calendar.
			 */
			readonly calendarID: string;

			/**
			 * The days of the month that the event occurs, as an array of number objects.
			 * Values can be from 1 to 31 and from -1 to -31. This parameter is only valid for
			 * recurrence rules of type
			 * [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY).
			 */
			readonly daysOfTheMonth: number[];

			/**
			 * The days of the week that the event occurs, as an array of objects `daysOfWeek` and `Week`.
			 */
			readonly daysOfTheWeek: daysOfTheWeekDictionary[];

			/**
			 * The days of the year that the event occurs, as an array of number objects.
			 * Values can be from 1 to 366 and from -1 to -366. This parameter is only valid for
			 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly daysOfTheYear: number[];

			/**
			 * End of a recurrence rule.
			 */
			readonly end: recurrenceEndDictionary;

			/**
			 * Frequency of the recurrence rule.
			 */
			readonly frequency: number;

			/**
			 * The interval between instances of this recurrence. For example, a weekly
			 * recurrence rule with an interval of 2 occurs every other week. Must be greater than 0.
			 */
			readonly interval: number;

			/**
			 * The months of the year that the event occurs, as an array of Number objects.
			 * Values can be from 1 to 12. This parameter is only valid for recurrence rules of
			 * type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly monthsOfTheYear: number[];

			/**
			 * An array of ordinal numbers that filters which recurrences to include in the
			 * recurrence rule's frequency. For example, a yearly recurrence rule that has a
			 * [daysOfTheWeek](Titanium.Calendar.RecurrenceRule.daysOfTheWeek) value that specifies
			 * Monday through Friday, and a `setPositions` array containing 2 and -1, occurs only
			 * on the second weekday and last weekday of every year.
			 */
			readonly setPositions: number[];

			/**
			 * The weeks of the year that the event occurs, as an array of number objects.
			 * Values can be from 1 to 53 and from -1 to -53. This parameter is only valid for
			 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
			 */
			readonly weeksOfTheYear: number[];

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An object that represents a single reminder for an event in a calendar.
		 */
		interface Reminder extends Titanium.Proxy {
			/**
			 * Identifier of this reminder.
			 */
			readonly id: string;

			/**
			 * Method by which this reminder will be delivered.
			 */
			readonly method: number;

			/**
			 * Reminder notice period in minutes, that determines how long prior to the event this reminder
			 * should trigger.
			 */
			readonly minutes: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The top-level Contacts module, used for accessing and modifying the system contacts address book.
	 */
	namespace Contacts {
		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the application is authorized to use the address book.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the application is not authorized to use the address book.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * Specifies that a contact is an organization.
		 */
		const CONTACTS_KIND_ORGANIZATION: number;

		/**
		 * Specifies that a contact is a person.
		 */
		const CONTACTS_KIND_PERSON: number;

		/**
		 * Specifies that group members will be sorted by first name.
		 */
		const CONTACTS_SORT_FIRST_NAME: number;

		/**
		 * Specifies that group members will be sorted by last name.
		 */
		const CONTACTS_SORT_LAST_NAME: number;

		/**
		 * An object which represents a group in the system contacts address book.
		 */
		class Group extends Titanium.Proxy {
			/**
			 * Identifier of the group.
			 */
			readonly identifier: string;

			/**
			 * Name of this group.
			 */
			name: string;

			/**
			 * Adds a person to this group.
			 */
			add(person: Titanium.Contacts.Person): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets people that are members of this group.
			 */
			members(): Titanium.Contacts.Person[];

			/**
			 * Removes a person from this group. For >= iOS9, it is not
			 * required to call <Titanium.Contacts.save> after calling this method.
			 */
			remove(person: Titanium.Contacts.Person): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Gets people that are members of this group, sorted in the specified order.
			 */
			sortedMembers(sortBy: number): Titanium.Contacts.Person[];

		}
		/**
		 * An object that represents a contact record for a person or organization in the system contacts
		 * address book.
		 */
		class Person extends Titanium.Proxy {
			/**
			 * Addresses for the person. Multi-value. Read-only on Android.
			 */
			address: any;

			/**
			 * Alternate birthday of the person. Single Dictionary.
			 */
			alternateBirthday: any;

			/**
			 * Date of birth of the person. Single value.
			 */
			birthday: string;

			/**
			 * Dates associated with the person. Multi-value.
			 */
			date: any;

			/**
			 * Department of the person. Single value.
			 */
			department: string;

			/**
			 * Email addresses for the person. Multi-value. Read-only on Android.
			 */
			email: any;

			/**
			 * First name of the person. Single value.
			 */
			firstName: string;

			/**
			 * Phonetic first name of the person.  Single value.
			 */
			firstPhonetic: string;

			/**
			 * Localized full name of the person. Single value. Read-only on Android.
			 */
			readonly fullName: string;

			/**
			 * Record identifier of the person. Single value.
			 */
			readonly id: number;

			/**
			 * Identifier of the person.
			 */
			readonly identifier: string;

			/**
			 * Image for the person. Single value. Read-only for >= iOS9
			 */
			image: Titanium.Blob;

			/**
			 * Instant messenger information of the person. Multi-value.
			 */
			instantMessage: any;

			/**
			 * Job title of the person. Single value.
			 */
			jobTitle: string;

			/**
			 * Determines the type of information the person record contains; either person or organization.
			 * Read-only on Android.
			 */
			kind: number;

			/**
			 * Last name of the person. Single value.
			 */
			lastName: string;

			/**
			 * Phonetic last name of the person. Single value.
			 */
			lastPhonetic: string;

			/**
			 * Middle name of the person. Single value.
			 */
			middleName: string;

			/**
			 * Phonetic middle name of the person. Single value.
			 */
			middlePhonetic: string;

			/**
			 * Nickname of the person. Single value.
			 */
			nickname: string;

			/**
			 * Notes for the person. Single value.
			 */
			note: string;

			/**
			 * Organization to which the person belongs. Single value.
			 */
			organization: string;

			/**
			 * Phone numbers for the person. Multi-value. Read-only on Android.
			 */
			phone: any;

			/**
			 * Prefix for the person. Single value.
			 */
			readonly prefix: string;

			/**
			 * Record identifier of the person. Single value. Deprecated since iOS 9.
			 */
			recordId: number;

			/**
			 * Names of people to which the person is related. Multi-value.
			 */
			relatedNames: any;

			/**
			 * Social profile information of the person. Multi-value.
			 */
			socialProfile: any;

			/**
			 * Suffix for the person. Single value.
			 */
			readonly suffix: string;

			/**
			 * URLs of webpages associated with the person. Multi-value.
			 */
			url: any;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The top-level `Database` module, used for creating and accessing the
	 * in-application SQLite database.
	 */
	namespace Database {
		/**
		 * Constant for requesting a column's value returned in double form.
		 */
		const FIELD_TYPE_DOUBLE: number;

		/**
		 * Constant for requesting a column's value returned in float form.
		 */
		const FIELD_TYPE_FLOAT: number;

		/**
		 * Constant for requesting a column's value returned in integer form.
		 */
		const FIELD_TYPE_INT: number;

		/**
		 * Constant for requesting a column's value returned in string form.
		 */
		const FIELD_TYPE_STRING: number;

		/**
		 * The `Database` instance returned by <Titanium.Database.open> or <Titanium.Database.install>.
		 */
		class DB extends Titanium.Proxy {
			/**
			 * A `File` object representing the file where this database is stored. Must only be used for
			 * setting file properties.
			 */
			readonly file: Titanium.Filesystem.File;

			/**
			 * The identifier of the last populated row.
			 */
			readonly lastInsertRowId: number;

			/**
			 * The name of the database.
			 */
			readonly name: string;

			/**
			 * The number of rows affected by the last query.
			 */
			readonly rowsAffected: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Closes the database and releases resources from memory. Once closed, this instance is no
			 * longer valid and should not be used. On iOS, also closes all <Titanium.Database.ResultSet>
			 * instances that exist.
			 */
			close(): void;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, ...vararg: string[]): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: ReadonlyArray<string>): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, ...vararg: any[]): Titanium.Database.ResultSet;

			/**
			 * Executes an SQL statement against the database and returns a `ResultSet`.
			 */
			execute(sql: string, vararg?: ReadonlyArray<any>): Titanium.Database.ResultSet;

			/**
			 * Synchronously executes an array of SQL statements against the database and returns an array of `ResultSet`.
			 * On failure, this will throw an [Error](BatchQueryError) that reports the failed index and partial results
			 */
			executeAll(queries: ReadonlyArray<string>): Titanium.Database.ResultSet[];

			/**
			 * Asynchronously executes an array of SQL statements against the database and fires a callback with a possible Error, and an array of `ResultSet`.
			 * On failure, this will call the callback with an [Error](PossibleBatchQueryError) that reports the failed `index`, and a second argument with the partial `results`.
			 */
			executeAllAsync(queries: ReadonlyArray<string>, callback?: (param0: PossibleBatchQueryError, param1: Titanium.Database.ResultSet[]) => void): Promise<Titanium.Database.ResultSet[]>;

			/**
			 * Asynchronously executes an SQL statement against the database and fires a callback with a possible `Error` argument, and a second argument holding a possible `ResultSet`.
			 */
			executeAsync(query: string, vararg?: any, callback?: (param0: any, param1: Titanium.Database.ResultSet) => void): Promise<Titanium.Database.ResultSet>;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the database files for this instance from disk. WARNING: this is a destructive
			 * operation and cannot be reversed. All data in the database will be lost; use with caution.
			 */
			remove(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The ResultSet instance returned by <Titanium.Database.DB.execute>.
		 */
		class ResultSet extends Titanium.Proxy {
			/**
			 * The number of columns in this result set.
			 */
			readonly fieldCount: number;

			/**
			 * The number of rows in this result set.
			 */
			readonly rowCount: number;

			/**
			 * Indicates whether the current row is valid.
			 */
			readonly validRow: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Closes this result set and release resources. Once closed, the result set must no longer
			 * be used.
			 */
			close(): void;

			/**
			 * Retrieves the value for the specified field in the current row,
			 * and casts it to the specified type (String, Integer, Float or Double.)
			 */
			field(index: number, type?: number): string | number | Titanium.Blob;

			/**
			 * Retrieves the value for the specified field in the current row,
			 * and casts it to the specified type (String, Integer, Float or Double.)
			 */
			fieldByName(name: string, type?: number): string | number | Titanium.Blob;

			/**
			 * Returns the field name for the specified field index.
			 */
			fieldName(index: number): string;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the field name for the specified field index.
			 */
			getFieldName(index: number): string;

			/**
			 * Returns whether the current row is valid.
			 */
			isValidRow(): boolean;

			/**
			 * Advances to the next row in the result set and returns `true` if one exists,
			 * or `false` otherwise.
			 */
			next(): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The top level filesystem module, used to access files and directories on the device.
	 */
	namespace Filesystem {
		/**
		 * Constant used to set protection key to NSFileProtectionComplete in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE: string;

		/**
		 * Constant used to set protection key to NSFileProtectionCompleteUnlessOpen in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE_UNLESS_OPEN: string;

		/**
		 * Constant used to set protection key to NSFileProtectionCompleteUntilFirstUserAuthentication in file attributes.
		 */
		const IOS_FILE_PROTECTION_COMPLETE_UNTIL_FIRST_USER_AUTHENTICATION: string;

		/**
		 * Constant used to set protection key to NSFileProtectionNone in file attributes.
		 */
		const IOS_FILE_PROTECTION_NONE: string;

		/**
		 * Constant for append mode for file operations.
		 */
		const MODE_APPEND: number;

		/**
		 * Constant for read mode for file operations.
		 */
		const MODE_READ: number;

		/**
		 * Constant for write mode for file operations.
		 */
		const MODE_WRITE: number;

		/**
		 * Object representing a path to a file or directory in the device's persistent storage.
		 */
		class File extends Titanium.Proxy {
			/**
			 * `true` if the file is executable.
			 */
			readonly executable: boolean;

			/**
			 * Set to `true` if the file is hidden.
			 */
			hidden: boolean;

			/**
			 * Name of the file.
			 */
			readonly name: string;

			/**
			 * Native path associated with this file object, as a file URL.
			 */
			readonly nativePath: string;

			/**
			 * A `File` object representing the parent directory of the file identified by this object.
			 */
			readonly parent: Titanium.Filesystem.File;

			/**
			 * `true` if the file identified by this object is read-only.
			 */
			readonly readonly: boolean;

			/**
			 * Value indicating whether or not to back up to a cloud service.
			 */
			remoteBackup: boolean;

			/**
			 * Size, in bytes, of the file identified by this object.
			 */
			readonly size: number;

			/**
			 * `true` if the file identified by this object is a symbolic link.
			 */
			readonly symbolicLink: boolean;

			/**
			 * `true` if the file identified by this object is writable.
			 */
			readonly writable: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Appends data to the file identified by this file object.
			 */
			append(data: string | Titanium.Blob | Titanium.Filesystem.File): boolean;

			/**
			 * Copies the file identified by this file object to a new path.
			 */
			copy(destinationPath: string): boolean;

			/**
			 * Creates a directory at the path identified by this file object.
			 */
			createDirectory(recursive?: boolean): boolean;

			/**
			 * Creates a file at the path identified by this file object.
			 */
			createFile(): boolean;

			/**
			 * Returns the creation timestamp for the file identified by this file object.
			 * @deprecated Use [createdAt](Titanium.Filesystem.File.createdAt) instead.
			 */
			createTimestamp(): number;

			/**
			 * Returns the creation Date for the file identified by this file object.
			 */
			createdAt(): Date;

			/**
			 * Deletes the directory identified by this file object.
			 */
			deleteDirectory(recursive?: boolean): boolean;

			/**
			 * Deletes the file identified by this file object.
			 */
			deleteFile(): boolean;

			/**
			 * Returns `true` if the file or directory identified by this file object exists on the device.
			 */
			exists(): boolean;

			/**
			 * Returns the extension for the file identified by this file object.
			 */
			extension(): string;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns a listing of the directory identified by this file object, or `null`
			 * if this object doesn't identify a directory.
			 */
			getDirectoryListing(): string[];

			/**
			 * Returns the path of the parent directory holding the file identified by this
			 * file object, as a String (deprecated) **or** as a `File` object.
			 * @deprecated Use the [Titanium.Filesystem.File.parent](Titanium.Filesystem.File.parent) property to receive a `File`
			 * reference instead. If you wish to receive the path, use the `nativePath`
			 * property of that reference instead.
			 *
			 */
			getParent(): string | Titanium.Filesystem.File;

			/**
			 * Returns the protection key value of this file object.
			 * Returns `null` if there's an error.
			 */
			getProtectionKey(): string;

			/**
			 * Returns `true` if this file object represents a directory.
			 */
			isDirectory(): boolean;

			/**
			 * Returns `true` if this file object represents an ordinary file.
			 */
			isFile(): boolean;

			/**
			 * Returns the last modification time for this file.
			 * @deprecated Use [Titanium.Filesystem.File.modifiedAt](Titanium.Filesystem.File.modifiedAt) instead.
			 */
			modificationTimestamp(): number;

			/**
			 * Returns the last modification Date for the file identified by this file object.
			 */
			modifiedAt(): Date;

			/**
			 * Moves the file identified by this file object to another path.
			 */
			move(newpath: string): boolean;

			/**
			 * Opens the file identified by this file object for random access.
			 */
			open(mode: number): Titanium.Filesystem.FileStream;

			/**
			 * Returns the contents of the file identified by this file object as a `Blob`.
			 */
			read(): Titanium.Blob;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Renames the file identified by this file object.
			 */
			rename(newname: string): boolean;

			/**
			 * Returns the fully-resolved native path associated with this file object.
			 */
			resolve(): string;

			/**
			 * Sets the protection key as an attribute to the file identified by this file object.
			 */
			setProtectionKey(fileProtectionType: string): boolean;

			/**
			 * Returns the amount of free space available on the device where the file identified by this file object is stored.
			 */
			spaceAvailable(): number;

			/**
			 * Writes the specified data to the file identified by this file object.
			 */
			write(data: string | Titanium.Filesystem.File | Titanium.Blob, append?: boolean): boolean;

		}
		/**
		 * Wrapper around `Titanium.Filesystem.File` that implements the `Titanium.IOStream` interface
		 */
		class FileStream extends Titanium.IOStream {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * closes file stream, exception is thrown on error
			 */
			close(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The top level Geolocation module. The Geolocation module is used for accessing device location based information.
	 */
	namespace Geolocation {
		/**
		 * The user authorized the app to access location data with full accuracy.
		 */
		const ACCURACY_AUTHORIZATION_FULL: number;

		/**
		 * The user authorized the app to access location data with reduced accuracy.
		 */
		const ACCURACY_AUTHORIZATION_REDUCED: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request the best
		 * accuracy available.
		 */
		const ACCURACY_BEST: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request highest possible
		 * accuracy and combine it with additional sensor data.
		 */
		const ACCURACY_BEST_FOR_NAVIGATION: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request more
		 * accurate location updates with higher battery usage.
		 */
		const ACCURACY_HIGH: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest 100 meters.
		 */
		const ACCURACY_HUNDRED_METERS: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest kilometer.
		 */
		const ACCURACY_KILOMETER: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request less
		 * accurate location updates with lower battery usage.
		 */
		const ACCURACY_LOW: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest 10 meters.
		 */
		const ACCURACY_NEAREST_TEN_METERS: number;

		/**
		 * The level of accuracy used when an app isn’t authorized for full accuracy location data.
		 */
		const ACCURACY_REDUCED: number;

		/**
		 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
		 * updates accurate to the nearest three kilometers.
		 */
		const ACCURACY_THREE_KILOMETERS: number;

		/**
		 * The location data is used for tracking location changes to the automobile specifically during vehicular navigation.
		 */
		const ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION: string;

		/**
		 * The location data is used for tracking any pedestrian-related activity.
		 */
		const ACTIVITYTYPE_FITNESS: string;

		/**
		 * The location data is being used for an unknown activity.
		 */
		const ACTIVITYTYPE_OTHER: string;

		/**
		 * The location data is used for tracking movements of other types of vehicular
		 * navigation that are not automobile related.
		 */
		const ACTIVITYTYPE_OTHER_NAVIGATION: string;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to start location services at any time. This authorization
		 * includes the use of all location services, including monitoring regions and significant location changes.
		 */
		const AUTHORIZATION_ALWAYS: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to use location services.
		 * @deprecated Use [Titanium.Geolocation.AUTHORIZATION_ALWAYS](Titanium.Geolocation.AUTHORIZATION_ALWAYS) as advised by Apple.
		 */
		const AUTHORIZATION_AUTHORIZED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is not authorized to use location services, *or*
		 * location services are disabled.
		 */
		const AUTHORIZATION_DENIED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is not authorized to use location servies *and*
		 * the user cannot change this application's status.
		 */
		const AUTHORIZATION_RESTRICTED: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the authorization state is unknown.
		 */
		const AUTHORIZATION_UNKNOWN: number;

		/**
		 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
		 * indicating that the application is authorized to start most location services only while running in the foreground.
		 */
		const AUTHORIZATION_WHEN_IN_USE: number;

		/**
		 * Error code indicating that the user denied access to the location service.
		 */
		const ERROR_DENIED: number;

		/**
		 * Error code indicating that the heading could not be determined.
		 */
		const ERROR_HEADING_FAILURE: number;

		/**
		 * Error code indicating that the user's location could not be determined.
		 */
		const ERROR_LOCATION_UNKNOWN: number;

		/**
		 * Error code indicating that the network was unavailable.
		 */
		const ERROR_NETWORK: number;

		/**
		 * Error code indicating that region monitoring is delayed.
		 */
		const ERROR_REGION_MONITORING_DELAYED: number;

		/**
		 * Error code indicating that region monitoring is denied.
		 */
		const ERROR_REGION_MONITORING_DENIED: number;

		/**
		 * Error code indicating a region monitoring failure.
		 */
		const ERROR_REGION_MONITORING_FAILURE: number;

		/**
		 * Module for Android-specific geolocation functionality.
		 */
		namespace Android {
			/**
			 * Specifies the GPS location provider.
			 */
			const PROVIDER_GPS: string;

			/**
			 * Specifies the network location provider.
			 */
			const PROVIDER_NETWORK: string;

			/**
			 * Specifies the passive location provider.
			 */
			const PROVIDER_PASSIVE: string;

			/**
			 * Represents a source of location information, such as GPS.
			 */
			class LocationProvider extends Titanium.Proxy {
				/**
				 * Don't send a location update unless the location has changed at least `minUpdateDistance`
				 * meters since the previous update.
				 */
				minUpdateDistance: number;

				/**
				 * Limits the frequency of location updates to no more than one per `minUpdateTime` seconds.
				 */
				minUpdateTime: number;

				/**
				 * Type of location provider: [PROVIDER_GPS](Titanium.Geolocation.Android.PROVIDER_GPS),
				 * [PROVIDER_NETWORK](Titanium.Geolocation.Android.PROVIDER_NETWORK), or
				 * [PROVIDER_PASSIVE](Titanium.Geolocation.Android.PROVIDER_PASSIVE).
				 */
				name: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A location rule to filter the results returned by location providers.
			 */
			class LocationRule extends Titanium.Proxy {
				/**
				 * Minimum accuracy required for a location update.
				 */
				accuracy: number;

				/**
				 * Controls the freshness of location updates. Do not forward an update
				 * unless it is newer than `maxAge` milliseconds.
				 */
				maxAge: number;

				/**
				 * Controls the frequency of location updates.
				 */
				minAge: number;

				/**
				 * If specified, this rule only applies to updates generated
				 * by the specified provider. If `null`, this rule applies to all updates.
				 */
				name: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
		}
		/**
		 * Module for Android-specific geolocation functionality.
		 */
		class Android extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Set to `true` to enable manual configuration of location updates through this module.
			 */
			static manualMode: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds and enables the specified location provider, possibly replacing an existing one.
			 */
			static addLocationProvider(provider: Titanium.Geolocation.Android.LocationProvider): void;

			/**
			 * Adds and enables the specified location rule.
			 */
			static addLocationRule(rule: Titanium.Geolocation.Android.LocationRule): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationProvider>.
			 */
			static createLocationProvider(parameters?: Dictionary<Titanium.Geolocation.Android.LocationProvider>): Titanium.Geolocation.Android.LocationProvider;

			/**
			 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationRule>.
			 */
			static createLocationRule(parameters?: Dictionary<Titanium.Geolocation.Android.LocationRule>): Titanium.Geolocation.Android.LocationRule;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Disables and removes the specified location provider.
			 */
			static removeLocationProvider(provider: Titanium.Geolocation.Android.LocationProvider): void;

			/**
			 * Disables and removes the specified location rule.
			 */
			static removeLocationRule(rule: Titanium.Geolocation.Android.LocationRule): void;

		}
	}
	/**
	 * The top-level Media module.
	 */
	namespace Media {
		/**
		 * Audio file format 3GPP2.
		 */
		const AUDIO_FILEFORMAT_3GP2: number;

		/**
		 * Audio file format 3GPP.
		 */
		const AUDIO_FILEFORMAT_3GPP: number;

		/**
		 * Audio file format Audio Interchange File Format (AIFF).
		 */
		const AUDIO_FILEFORMAT_AIFF: number;

		/**
		 * Audio file format Adaptive Multi-Rate (AMR).
		 */
		const AUDIO_FILEFORMAT_AMR: number;

		/**
		 * Audio file format Apple Compressed Audio Format (CAF).
		 */
		const AUDIO_FILEFORMAT_CAF: number;

		/**
		 * Audio file format MP3.
		 */
		const AUDIO_FILEFORMAT_MP3: number;

		/**
		 * Audio file format MP4.
		 */
		const AUDIO_FILEFORMAT_MP4: number;

		/**
		 * Audio file format MP4A.
		 */
		const AUDIO_FILEFORMAT_MP4A: number;

		/**
		 * Audio file format WAVE.
		 */
		const AUDIO_FILEFORMAT_WAVE: number;

		/**
		 * Audio format MPEG4 AAC encoding.
		 */
		const AUDIO_FORMAT_AAC: number;

		/**
		 * Audio format 8-bit [aLaw encoding](https://en.wikipedia.org/wiki/A-law_algorithm).
		 */
		const AUDIO_FORMAT_ALAW: number;

		/**
		 * Audio format Apple lossless encoding.
		 */
		const AUDIO_FORMAT_APPLE_LOSSLESS: number;

		/**
		 * Audio format [iLBC encoding](https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec).
		 */
		const AUDIO_FORMAT_ILBC: number;

		/**
		 * Audio format Apple IMA4 encoding.
		 */
		const AUDIO_FORMAT_IMA4: number;

		/**
		 * Audio format 16-bit, [linear PCM encoding](https://en.wikipedia.org/wiki/Pulse-code_modulation).
		 */
		const AUDIO_FORMAT_LINEAR_PCM: number;

		/**
		 * Audio format 8-bit [muLaw encoding](https://en.wikipedia.org/wiki/M-law_algorithm).
		 */
		const AUDIO_FORMAT_ULAW: number;

		/**
		 * For long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_CATEGORY_AMBIENT: string;

		/**
		 * Session mode for playing recorded music or other sounds that are central to the successful use of your application.
		 */
		const AUDIO_SESSION_CATEGORY_PLAYBACK: string;

		/**
		 * Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
		 */
		const AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD: string;

		/**
		 * Session mode for recording audio; it silences playback audio.
		 */
		const AUDIO_SESSION_CATEGORY_RECORD: string;

		/**
		 * Session mode for long-duration sounds such as rain, car engine noise, and so on.
		 */
		const AUDIO_SESSION_CATEGORY_SOLO_AMBIENT: string;

		/**
		 * Constant that specifies audio should output to the default audio route. See <Titanium.Media.setOverrideAudioRoute> for more information.
		 */
		const AUDIO_SESSION_OVERRIDE_ROUTE_NONE: number;

		/**
		 * Constant that specifies audio should output to the speaker. See <Titanium.Media.setOverrideAudioRoute> for more information.
		 */
		const AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER: number;

		/**
		 * Constant for output on a remote Air Play device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_AIRPLAY: string;

		/**
		 * Constant for output on a Bluetooth A2DP device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHA2DP: string;

		/**
		 * Constant for input or output on a Bluetooth Hands-Free Profile device. This can be both an input and output port.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHHFP: string;

		/**
		 * Constant for output on a Bluetooth Low Energy device. This is an output port. This is available on iOS7 and later.
		 */
		const AUDIO_SESSION_PORT_BLUETOOTHLE: string;

		/**
		 * Constant for built-in microphone on an iOS device. This is an input port.
		 */
		const AUDIO_SESSION_PORT_BUILTINMIC: string;

		/**
		 * Constant for the speaker you hold to your ear when on a phone call. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BUILTINRECEIVER: string;

		/**
		 * Constant for built-in speaker on an iOS device. This is an output port.
		 */
		const AUDIO_SESSION_PORT_BUILTINSPEAKER: string;

		/**
		 * Constant for Input or output via Car Audio. This can be both an input and output port. This is available on iOS7 and later.
		 */
		const AUDIO_SESSION_PORT_CARAUDIO: string;

		/**
		 * Constant for output via High-Definition Multimedia Interface. This is an output port
		 */
		const AUDIO_SESSION_PORT_HDMI: string;

		/**
		 * Constant for headphone or headset output. This is an output port.
		 */
		const AUDIO_SESSION_PORT_HEADPHONES: string;

		/**
		 * Constant for microphone on a wired headset. This is an input port.
		 */
		const AUDIO_SESSION_PORT_HEADSETMIC: string;

		/**
		 * Constant for line level input on a dock connector. This is an input port.
		 */
		const AUDIO_SESSION_PORT_LINEIN: string;

		/**
		 * Constant for line level output on a dock connector. This is an output port.
		 */
		const AUDIO_SESSION_PORT_LINEOUT: string;

		/**
		 * Constant for input or output on a Universal Serial Bus device. This can be both an input and output port.
		 */
		const AUDIO_SESSION_PORT_USBAUDIO: string;

		/**
		 * Audio data is being buffered from the network.
		 */
		const AUDIO_STATE_BUFFERING: number;

		/**
		 * Audio playback is being initialized.
		 */
		const AUDIO_STATE_INITIALIZED: number;

		/**
		 * Playback is paused.
		 */
		const AUDIO_STATE_PAUSED: number;

		/**
		 * Audio playback is active.
		 */
		const AUDIO_STATE_PLAYING: number;

		/**
		 * Audio playback is starting.
		 */
		const AUDIO_STATE_STARTING: number;

		/**
		 * Audio playback is stopped.
		 */
		const AUDIO_STATE_STOPPED: number;

		/**
		 * Audio playback is stopping.
		 */
		const AUDIO_STATE_STOPPING: number;

		/**
		 * Player is waiting for audio data from the network.
		 */
		const AUDIO_STATE_WAITING_FOR_DATA: number;

		/**
		 * Player is waiting for audio data to fill the queue.
		 */
		const AUDIO_STATE_WAITING_FOR_QUEUE: number;

		/**
		 * Constant specifying that app is authorized to use camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_AUTHORIZED: number;

		/**
		 * Constant specifying that app is denied usage of camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_DENIED: number;

		/**
		 * Constant specifying that app is restricted from using camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_RESTRICTED: number;

		/**
		 * Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
		 */
		const CAMERA_AUTHORIZATION_UNKNOWN: number;

		/**
		 * Constant specifying to have the device determine to use the flash or not.
		 */
		const CAMERA_FLASH_AUTO: number;

		/**
		 * Constant specifying to never fire the flash.
		 */
		const CAMERA_FLASH_OFF: number;

		/**
		 * Constant specifying to always fire the flash.
		 */
		const CAMERA_FLASH_ON: number;

		/**
		 * Constant specifying the front camera.
		 */
		const CAMERA_FRONT: number;

		/**
		 * Constant indicating the rear camera.
		 */
		const CAMERA_REAR: number;

		/**
		 * Constant for media device busy error.
		 */
		const DEVICE_BUSY: number;

		/**
		 * Crops the image proportionally causing its content to be clipped either horizontally or vertically.
		 */
		const IMAGE_SCALING_ASPECT_FILL: number;

		/**
		 * Letterbox or pillarbox scales the image proportionally to fit the container.
		 */
		const IMAGE_SCALING_ASPECT_FIT: number;

		/**
		 * Scales the image depending on how the view container is sized.
		 */
		const IMAGE_SCALING_AUTO: number;

		/**
		 * Stretches the image disproportionally to completely fill the container's bounds.
		 */
		const IMAGE_SCALING_FILL: number;

		/**
		 * Disables scaling and displays the image as-is.
		 */
		const IMAGE_SCALING_NONE: number;

		/**
		 * Media type constant for live photo media.
		 */
		const MEDIA_TYPE_LIVEPHOTO: string;

		/**
		 * Media type constant for photo media.
		 */
		const MEDIA_TYPE_PHOTO: string;

		/**
		 * Media type constant for video media.
		 */
		const MEDIA_TYPE_VIDEO: string;

		/**
		 * Constant for grouping query results by album.
		 */
		const MUSIC_MEDIA_GROUP_ALBUM: number;

		/**
		 * Constant for grouping query results by album and artist.
		 */
		const MUSIC_MEDIA_GROUP_ALBUM_ARTIST: number;

		/**
		 * Constant for grouping query results by artist.
		 */
		const MUSIC_MEDIA_GROUP_ARTIST: number;

		/**
		 * Constant for grouping query results by composer.
		 */
		const MUSIC_MEDIA_GROUP_COMPOSER: number;

		/**
		 * Constant for grouping query results by genre.
		 */
		const MUSIC_MEDIA_GROUP_GENRE: number;

		/**
		 * Constant for grouping query results by playlist.
		 */
		const MUSIC_MEDIA_GROUP_PLAYLIST: number;

		/**
		 * Constant for grouping query results by podcast title.
		 */
		const MUSIC_MEDIA_GROUP_PODCAST_TITLE: number;

		/**
		 * Constant for grouping query results by title.
		 */
		const MUSIC_MEDIA_GROUP_TITLE: number;

		/**
		 * Music library media containing any type of content.
		 */
		const MUSIC_MEDIA_TYPE_ALL: number;

		/**
		 * Music library media containing any type of audio content.
		 */
		const MUSIC_MEDIA_TYPE_ANY_AUDIO: number;

		/**
		 * Music library media containing audiobook content.
		 */
		const MUSIC_MEDIA_TYPE_AUDIOBOOK: number;

		/**
		 * Music library media containing music content.
		 */
		const MUSIC_MEDIA_TYPE_MUSIC: number;

		/**
		 * Music library media containing podcast content.
		 */
		const MUSIC_MEDIA_TYPE_PODCAST: number;

		/**
		 * Constant for "Repeat All" setting.
		 */
		const MUSIC_PLAYER_REPEAT_ALL: number;

		/**
		 * Constant for user's default repeat setting.
		 */
		const MUSIC_PLAYER_REPEAT_DEFAULT: number;

		/**
		 * Constant for "No Repeat" setting.
		 */
		const MUSIC_PLAYER_REPEAT_NONE: number;

		/**
		 * Constant for "Repeat one item" setting.
		 */
		const MUSIC_PLAYER_REPEAT_ONE: number;

		/**
		 * Constant for shuffling complete albums setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_ALBUMS: number;

		/**
		 * Constant for user's default shuffle setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_DEFAULT: number;

		/**
		 * Constant for "no shuffle" setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_NONE: number;

		/**
		 * Constant for shuffling songs setting.
		 */
		const MUSIC_PLAYER_SHUFFLE_SONGS: number;

		/**
		 * Constant for interrupted state.
		 */
		const MUSIC_PLAYER_STATE_INTERRUPTED: number;

		/**
		 * Constant for paused state.
		 */
		const MUSIC_PLAYER_STATE_PAUSED: number;

		/**
		 * Constant for playing state.
		 */
		const MUSIC_PLAYER_STATE_PLAYING: number;

		/**
		 * Constant for backward seek state.
		 */
		const MUSIC_PLAYER_STATE_SEEK_BACKWARD: number;

		/**
		 * Constant for forward seek state.
		 */
		const MUSIC_PLAYER_STATE_SEEK_FORWARD: number;

		/**
		 * Constant for stopped state.
		 */
		const MUSIC_PLAYER_STATE_STOPPED: number;

		/**
		 * Constant for media no camera error.
		 */
		const NO_CAMERA: number;

		/**
		 * Constant for media no video error.
		 */
		const NO_VIDEO: number;

		/**
		 * Media type constant for high-quality video recording.
		 */
		const QUALITY_HIGH: number;

		/**
		 * Media type constant for low-quality video recording.
		 */
		const QUALITY_LOW: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		const QUALITY_MEDIUM: number;

		/**
		 * Constant for unknown media error.
		 */
		const UNKNOWN_ERROR: number;

		/**
		 * Constant for default video controls.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_CONTROL_DEFAULT: number;

		/**
		 * Constant for video controls for an embedded view.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_CONTROL_EMBEDDED: number;

		/**
		 * Constant for fullscreen video controls.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_CONTROL_FULLSCREEN: number;

		/**
		 * Constant for video controls hidden.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_CONTROL_HIDDEN: number;

		/**
		 * Constant for no video controls.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_CONTROL_NONE: number;

		/**
		 * Video playback ended normally.
		 */
		const VIDEO_FINISH_REASON_PLAYBACK_ENDED: number;

		/**
		 * Video playback ended abnormally.
		 */
		const VIDEO_FINISH_REASON_PLAYBACK_ERROR: number;

		/**
		 * Video playback ended by user action (such as clicking the `Done` button).
		 */
		const VIDEO_FINISH_REASON_USER_EXITED: number;

		/**
		 * Indicates that the player can no longer play media items because of an error.
		 */
		const VIDEO_LOAD_STATE_FAILED: number;

		/**
		 * Current media is playable.
		 */
		const VIDEO_LOAD_STATE_PLAYABLE: number;

		/**
		 * Current load state is not known.
		 */
		const VIDEO_LOAD_STATE_UNKNOWN: number;

		/**
		 * The media contains audio media.
		 */
		const VIDEO_MEDIA_TYPE_AUDIO: string;

		/**
		 * The media contains closed-caption content.
		 */
		const VIDEO_MEDIA_TYPE_CLOSED_CAPTION: string;

		/**
		 * The media contains depth data.
		 */
		const VIDEO_MEDIA_TYPE_DEPTH_DATA: string;

		/**
		 * The media contains metadata.
		 */
		const VIDEO_MEDIA_TYPE_METADATA: string;

		/**
		 * The media contains metadata objects.
		 */
		const VIDEO_MEDIA_TYPE_METADATA_OBJECT: string;

		/**
		 * The media contains muxed media.
		 */
		const VIDEO_MEDIA_TYPE_MUXED: string;

		/**
		 * The media contains subtitles.
		 */
		const VIDEO_MEDIA_TYPE_SUBTITLE: string;

		/**
		 * The media contains text.
		 */
		const VIDEO_MEDIA_TYPE_TEXT: string;

		/**
		 * The media contains a time code.
		 */
		const VIDEO_MEDIA_TYPE_TIMECODE: string;

		/**
		 * The media contains video.
		 */
		const VIDEO_MEDIA_TYPE_VIDEO: string;

		/**
		 * Video playback has been interrupted.
		 */
		const VIDEO_PLAYBACK_STATE_INTERRUPTED: number;

		/**
		 * Video playback is paused.
		 */
		const VIDEO_PLAYBACK_STATE_PAUSED: number;

		/**
		 * Video is being played.
		 */
		const VIDEO_PLAYBACK_STATE_PLAYING: number;

		/**
		 * Video playback is rewinding.
		 */
		const VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: number;

		/**
		 * Video playback is seeking forward.
		 */
		const VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: number;

		/**
		 * Video playback is stopped.
		 */
		const VIDEO_PLAYBACK_STATE_STOPPED: number;

		/**
		 * Constant for disabling repeat on video playback.
		 */
		const VIDEO_REPEAT_MODE_NONE: number;

		/**
		 * Constant for repeating one video (i.e., the one video will repeat constantly) during playback.
		 */
		const VIDEO_REPEAT_MODE_ONE: number;

		/**
		 * Scale video to fill the screen, clipping edges if necessary.
		 * @deprecated Use <Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT_FILL> instead.
		 * This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 *
		 */
		const VIDEO_SCALING_ASPECT_FILL: number;

		/**
		 * Scale video to fit the screen, letterboxing if necessary.
		 * @deprecated Use <Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT> instead.
		 * This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 *
		 */
		const VIDEO_SCALING_ASPECT_FIT: number;

		/**
		 * Video is scaled until both dimensions fit the screen exactly, stretching if necessary.
		 * @deprecated Use <Titanium.Media.VIDEO_SCALING_MODE_RESIZE> instead.
		 * This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 *
		 */
		const VIDEO_SCALING_MODE_FILL: number;

		/**
		 * Video scaling is disabled.
		 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
		 */
		const VIDEO_SCALING_NONE: number;

		/**
		 * Specifies that the video should be stretched to fill the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE: string | number;

		/**
		 * Specifies that the player should preserve the aspect ratio of video and fit the video within the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE_ASPECT: string | number;

		/**
		 * Specifies that the player should preserve the aspect ratio of video and fill the bounds of layer.
		 */
		const VIDEO_SCALING_RESIZE_ASPECT_FILL: string | number;

		/**
		 * Use the closest sync (or key) frame at given the time.
		 */
		const VIDEO_TIME_OPTION_CLOSEST_SYNC: number;

		/**
		 * Use the exact time.
		 */
		const VIDEO_TIME_OPTION_EXACT: number;

		/**
		 * Use the closest keyframe in the time.
		 */
		const VIDEO_TIME_OPTION_NEAREST_KEYFRAME: number;

		/**
		 * Use the sync (or key) frame located right after or at given the time.
		 */
		const VIDEO_TIME_OPTION_NEXT_SYNC: number;

		/**
		 * Use the sync (or key) frame located right before or at given the time.
		 */
		const VIDEO_TIME_OPTION_PREVIOUS_SYNC: number;

		/**
		 * Android-specific media-related functionality.
		 */
		class Android extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Scans newly created or downloaded media files to make them available to other
			 * Android media providers, such as the Gallery.
			 */
			static scanMediaFiles(paths: ReadonlyArray<string>, mimeTypes: ReadonlyArray<string>, callback: (param0: MediaScannerResponse) => void): void;

			/**
			 * Set the system homescreen wallpaper.
			 */
			static setSystemWallpaper(image: Titanium.Blob, scale: boolean): void;

		}
		/**
		 * Base event for class Titanium.Media.AudioPlayer
		 */
		interface AudioPlayerBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Media.AudioPlayer;

		}
		/**
		 * Fired when the state of the playback changes.
		 */
		interface AudioPlayer_change_Event extends AudioPlayerBaseEvent {
			/**
			 * Text description of the state of playback.
			 */
			description: number;

			/**
			 * Current state of playback.
			 */
			state: number;

		}
		/**
		 * Fired when the audio has finished playing.
		 */
		interface AudioPlayer_complete_Event extends AudioPlayerBaseEvent {
			/**
			 * Error code.
			 * Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
			 * was generated by the operating system, that system's error value is used.
			 * Otherwise, this value will be -1.
			 */
			code: number;

			/**
			 * Error message, if any returned. Will be undefined if `success` is `true`.
			 */
			error: string;

			/**
			 * Indicates if the sound was played successfully.
			 * Returns `true` if request succeeded, `false` otherwise.
			 */
			success: boolean;

		}
		/**
		 * Fired when the timed metadata was encountered most recently within the media as it plays.
		 */
		interface AudioPlayer_metadata_Event extends AudioPlayerBaseEvent {
			/**
			 * An array of metadata items containing relevant information about the current media item.
			 */
			items: TiMetadataItemType[];

		}
		/**
		 * Fired when there's an error.
		 */
		interface AudioPlayer_error_Event extends AudioPlayerBaseEvent {
			/**
			 * Error code. Different between android and iOS.
			 */
			code: number;

			/**
			 * Error message.
			 */
			error: string;

		}
		/**
		 * Fired once per second with the current progress during playback.
		 */
		interface AudioPlayer_progress_Event extends AudioPlayerBaseEvent {
			/**
			 * Current progress, in milliseconds.
			 */
			progress: number;

		}
		/**
		 * Fired once the [seekToTime](Titanium.Media.AudioPlayer.seek) method completes.
		 */
		interface AudioPlayer_seek_Event extends AudioPlayerBaseEvent {
			/**
			 * The event for any prior seek request that is still in process will be invoked
			 * immediately with the `finished` parameter set to `false`.
			 * If the new request completes without being interrupted by another seek
			 * request or by any other operation this event will be invoked with
			 * the `finished` parameter set to `true`.
			 */
			finished: boolean;

		}
		interface AudioPlayerEventMap extends ProxyEventMap {
			change: AudioPlayer_change_Event;

			complete: AudioPlayer_complete_Event;

			error: AudioPlayer_error_Event;

			metadata: AudioPlayer_metadata_Event;

			progress: AudioPlayer_progress_Event;

			seek: AudioPlayer_seek_Event;

		}
		/**
		 * An audio player object used for streaming audio to the device, and low-level control of the audio playback.
		 */
		class AudioPlayer extends Titanium.Proxy {
			/**
			 * Used to identify the volume of audio streams for alarms.
			 */
			readonly AUDIO_TYPE_ALARM: number;

			/**
			 * Used to identify the volume of audio streams for media playback.
			 */
			readonly AUDIO_TYPE_MEDIA: number;

			/**
			 * Used to identify the volume of audio streams for notifications.
			 */
			readonly AUDIO_TYPE_NOTIFICATION: number;

			/**
			 * Used to identify the volume of audio streams for the phone ring.
			 */
			readonly AUDIO_TYPE_RING: number;

			/**
			 * Used to identify the volume of audio streams for DTMF tones or beeps.
			 */
			readonly AUDIO_TYPE_SIGNALLING: number;

			/**
			 * Used to identify the volume of audio streams for voice calls.
			 */
			readonly AUDIO_TYPE_VOICE: number;

			/**
			 * Audio data is being buffered from the network.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_BUFFERING](Titanium.Media.AUDIO_STATE_BUFFERING) instead.
			 */
			readonly STATE_BUFFERING: number;

			/**
			 * Audio playback is being initialized.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_INITIALIZED](Titanium.Media.AUDIO_STATE_INITIALIZED) instead.
			 */
			readonly STATE_INITIALIZED: number;

			/**
			 * Playback is paused.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_PAUSED](Titanium.Media.AUDIO_STATE_PAUSED) instead.
			 */
			readonly STATE_PAUSED: number;

			/**
			 * Audio playback is active.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_PLAYING](Titanium.Media.AUDIO_STATE_PLAYING) instead.
			 */
			readonly STATE_PLAYING: number;

			/**
			 * Audio playback is starting.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_STARTING](Titanium.Media.AUDIO_STATE_STARTING) instead.
			 */
			readonly STATE_STARTING: number;

			/**
			 * Audio playback is stopped.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_STOPPED](Titanium.Media.AUDIO_STATE_STOPPED) instead.
			 */
			readonly STATE_STOPPED: number;

			/**
			 * Audio playback is stopping.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_STOPPING](Titanium.Media.AUDIO_STATE_STOPPING) instead.
			 */
			readonly STATE_STOPPING: number;

			/**
			 * Player is waiting for audio data from the network.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_WAITING_FOR_DATA](Titanium.Media.AUDIO_STATE_WAITING_FOR_DATA) instead.
			 */
			readonly STATE_WAITING_FOR_DATA: number;

			/**
			 * Player is waiting for audio data to fill the queue.
			 * @deprecated Use [Titanium.Media.AUDIO_STATE_WAITING_FOR_QUEUE](Titanium.Media.AUDIO_STATE_WAITING_FOR_QUEUE) instead.
			 */
			readonly STATE_WAITING_FOR_QUEUE: number;

			/**
			 * Boolean to indicate if audio should continue playing even if the associated
			 * Android [Activity](Titanium.Android.Activity) is paused.
			 */
			allowBackground: boolean;

			/**
			 * Indicates whether the player allows switching to "external playback" mode.
			 */
			allowsExternalPlayback: boolean;

			/**
			 * Focuses on the current audio player and stops other audio playing.
			 */
			audioFocus: boolean;

			/**
			 * Returns the audio session id.
			 */
			readonly audioSessionId: number;

			/**
			 * Changes the audio-stream-type.
			 */
			audioType: number;

			/**
			 * Bit rate of the current playback stream.
			 */
			bitRate: number;

			/**
			 * Size of the buffer used for streaming, in milliseconds.
			 */
			bufferSize: number;

			/**
			 * Estimated duration in milliseconds of the file being played.
			 */
			readonly duration: number;

			/**
			 * Indicates whether the player is currently playing video in "external playback" mode.
			 */
			readonly externalPlaybackActive: boolean;

			/**
			 * Boolean indicating if the player is idle.
			 */
			readonly idle: boolean;

			/**
			 * Indicates whether or not audio output of the player is muted.
			 */
			muted: boolean;

			/**
			 * Boolean indicating if audio playback is paused.
			 */
			paused: boolean;

			/**
			 * Boolean indicating if audio is currently playing.
			 */
			readonly playing: boolean;

			/**
			 * Current playback progress, in milliseconds.
			 */
			readonly progress: number;

			/**
			 * Indicates the desired rate of playback; 0.0 means "paused", 1.0 indicates a
			 * desire to play at the natural rate of the current item. In addition, 2.0
			 * would mean that the audio plays twice as fast.
			 */
			rate: number;

			/**
			 * Current state of playback, specified using one of the `STATE` constants defined on this object.
			 */
			readonly state: number;

			/**
			 * Current playback position of the audio.
			 */
			time: number;

			/**
			 * URL for the audio stream.
			 */
			url: string;

			/**
			 * Volume of the audio, from 0.0 (muted) to 1.0 (loudest).
			 */
			volume: number;

			/**
			 * Boolean indicating if the playback is waiting for audio data from the network.
			 */
			readonly waiting: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof AudioPlayerEventMap>(name: K, callback: (this: Titanium.Media.AudioPlayer, event: AudioPlayerEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof AudioPlayerEventMap>(name: K, event?: AudioPlayerEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the audio session id.
			 * @deprecated Use the [audioSessionId](Titanium.Media.AudioPlayer.audioSessionId) property instead
			 */
			getAudioSessionId(): number;

			/**
			 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 * @deprecated Use the cross-platform API <Titanium.Media.AudioPlayer.paused> property instead.
			 */
			getPaused: never;

			/**
			 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
			 * @deprecated Use the cross-platform API <Titanium.Media.AudioPlayer.playing> property instead.
			 */
			getPlaying: never;

			/**
			 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 * @deprecated Use the cross-platform API <Titanium.Media.AudioPlayer.paused> property instead.
			 */
			isPaused: never;

			/**
			 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
			 * @deprecated Use the cross-platform API <Titanium.Media.AudioPlayer.playing> property instead.
			 */
			isPlaying: never;

			/**
			 * Pauses audio playback.
			 */
			pause(): void;

			/**
			 * Starts or resumes audio playback.
			 * @deprecated Use the cross-platform API [Titanium.Media.AudioPlayer.start](Titanium.Media.AudioPlayer.start) instead.
			 */
			play(): void;

			/**
			 * Stops buffering audio data and releases audio resources.
			 */
			release(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof AudioPlayerEventMap>(name: K, callback: (this: Titanium.Media.AudioPlayer, event: AudioPlayerEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Restarts (stops and stars) audio playback.
			 */
			restart(): void;

			/**
			 * Moves the playback cursor and invokes the specified block when the seek
			 * operation has either been completed or been interrupted.
			 */
			seekToTime(time: number): void;

			/**
			 * Sets the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
			 * @deprecated Use the cross-platform API [Titanium.Media.AudioPlayer.pause](Titanium.Media.AudioPlayer.pause) instead.
			 */
			setPaused: never;

			/**
			 * Starts or resumes audio playback.
			 */
			start(): void;

			/**
			 * Converts a [state](Titanium.Media.AudioPlayer.state) value into a text description
			 * suitable for display.
			 */
			stateDescription(state: number): string;

			/**
			 * Stops audio playback.
			 */
			stop(): void;

		}
		/**
		 * An audio recorder object used for recording audio from the device microphone.
		 */
		class AudioRecorder extends Titanium.Proxy {
			/**
			 * Audio compression to be used for the recording.
			 */
			compression: number;

			/**
			 * Audio format to be used for the recording.
			 */
			format: number;

			/**
			 * Indicates if the audio recorder is paused.
			 */
			readonly paused: boolean;

			/**
			 * Indicates if the audio recorder is recording.
			 */
			readonly recording: boolean;

			/**
			 * Indicates if the audio recorder is stopped.
			 */
			readonly stopped: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Pauses the current audio recording.
			 */
			pause(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Resumes a paused recording.
			 */
			resume(): void;

			/**
			 * Starts an audio recording.
			 */
			start(): void;

			/**
			 * Stops the current audio recording and returns the recorded audio file.
			 */
			stop(): Titanium.Filesystem.File;

		}
		/**
		 * A representation of a media item returned by [openMusicLibrary](Titanium.Media.openMusicLibrary) or [queryMusicLibrary](Titanium.Media.queryMusicLibrary).
		 */
		interface Item extends Titanium.Proxy {
			/**
			 * Artist credited for the album containing this item.
			 */
			readonly albumArtist: string;

			/**
			 * The persistent identifier for an album artist.
			 */
			readonly albumArtistPersistentID: number;

			/**
			 * The key for the persistent identifier for an album.
			 */
			readonly albumPersistentID: number;

			/**
			 * Title of the album containing this item.
			 */
			readonly albumTitle: string;

			/**
			 * Number of tracks for the album containing this item.
			 */
			readonly albumTrackCount: number;

			/**
			 * Track number for this item.
			 */
			readonly albumTrackNumber: number;

			/**
			 * Artist credited for this item.
			 */
			readonly artist: string;

			/**
			 * Image for the item's artwork as a `Blob` object,  or `null` if no artwork is
			 * available.
			 */
			readonly artwork: Titanium.Blob;

			/**
			 * A URL pointing to the media item.
			 */
			readonly assetURL: string;

			/**
			 * The number of musical beats per minute for the media item, corresponding
			 * to the "BPM" field in the Info tab in the "Get Info" dialog in iTunes.
			 */
			readonly beatsPerMinute: number;

			/**
			 * The user's place in the media item the most recent time it was played.
			 */
			readonly bookmarkTime: string;

			/**
			 * Textual information about the media item, corresponding to the "Comments"
			 * field in in the Info tab in the Get Info dialog in iTunes.
			 */
			readonly comments: string;

			/**
			 * Composer of this item.
			 */
			readonly composer: string;

			/**
			 * Date when the item was added to the music library.
			 */
			readonly dateAdded: Date;

			/**
			 * Total number of discs for the album containing this item.
			 */
			readonly discCount: number;

			/**
			 * Disc number for this item in the album.
			 */
			readonly discNumber: number;

			/**
			 * Genre of this item.
			 */
			readonly genre: string;

			/**
			 * The persistent identifier for a genre.
			 */
			readonly genrePersistentID: number;

			/**
			 * True if the item represents a protected asset.
			 */
			readonly hasProtectedAsset: boolean;

			/**
			 * True if the media item is an iCloud item.
			 */
			readonly isCloudItem: boolean;

			/**
			 * True if this item is part of a compilation album.
			 */
			readonly isCompilation: boolean;

			/**
			 * True if this item is marked as "Explicit".
			 */
			readonly isExplicit: boolean;

			/**
			 * The most recent calendar date on which the user played the media item.
			 */
			readonly lastPlayedDate: Date;

			/**
			 * Lyrics for this item.
			 */
			readonly lyrics: string;

			/**
			 * The type of the media.
			 */
			readonly mediaType: number;

			/**
			 * The key for the persistent identifier for the media item.
			 */
			readonly persistentID: string;

			/**
			 * Number of times the item has been played.
			 */
			readonly playCount: number;

			/**
			 * Length (in seconds) of this item.
			 */
			readonly playbackDuration: number;

			/**
			 * Used to enqueue store tracks by their ID.
			 */
			readonly playbackStoreID: number;

			/**
			 * The persistent identifier for an audio podcast.
			 */
			readonly podcastPersistentID: number;

			/**
			 * Title of a podcast item.
			 */
			readonly podcastTitle: string;

			/**
			 * Rating for this item.
			 */
			readonly rating: number;

			/**
			 * Date when this this item was released.
			 */
			readonly releaseDate: Date;

			/**
			 * Number of times this item has been skipped.
			 */
			readonly skipCount: number;

			/**
			 * Title of this item.
			 */
			readonly title: string;

			/**
			 * Corresponds to the "Grouping" field in the Info tab in the "Get Info"
			 * dialog in iTunes.
			 */
			readonly userGrouping: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.Media.MusicPlayer
		 */
		interface MusicPlayerBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Media.MusicPlayer;

		}
		/**
		 * Fired when the currently playing media item changes.
		 */
		interface MusicPlayer_playingchange_Event extends MusicPlayerBaseEvent {
		}
		/**
		 * Fired when the music player's playback state changes.
		 */
		interface MusicPlayer_statechange_Event extends MusicPlayerBaseEvent {
		}
		interface MusicPlayerEventMap extends ProxyEventMap {
			playingchange: MusicPlayer_playingchange_Event;

			statechange: MusicPlayer_statechange_Event;

		}
		/**
		 * This object represents a music controller.
		 */
		class MusicPlayer extends Titanium.Proxy {
			/**
			 * Current point in song playback, in seconds.
			 */
			currentPlaybackTime: number;

			/**
			 * An `Item` object representing the currently playing media item.
			 */
			readonly nowPlaying: Titanium.Media.Item;

			/**
			 * Playback state.
			 */
			readonly playbackState: number;

			/**
			 * Repeat setting.
			 */
			repeatMode: number;

			/**
			 * Shuffle setting.
			 */
			shuffleMode: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof MusicPlayerEventMap>(name: K, callback: (this: Titanium.Media.MusicPlayer, event: MusicPlayerEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof MusicPlayerEventMap>(name: K, event?: MusicPlayerEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Pauses playback of the current media item.
			 */
			pause(): void;

			/**
			 * Begins playback of the current media item.
			 */
			play(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof MusicPlayerEventMap>(name: K, callback: (this: Titanium.Media.MusicPlayer, event: MusicPlayerEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Begins seeking backward in the currently playing media.
			 */
			seekBackward(): void;

			/**
			 * Begins seeking forward in the currently playing media item.
			 */
			seekForward(): void;

			/**
			 * Sets the media queue.
			 */
			setQueue(queue: Titanium.Media.Item | Titanium.Media.Item[] | string): void;

			/**
			 * Skips to the beginning of the currently playing media item.
			 */
			skipToBeginning(): void;

			/**
			 * Skips to the next media item in the queue.
			 */
			skipToNext(): void;

			/**
			 * Skips to the previous media item in the queue.
			 */
			skipToPrevious(): void;

			/**
			 * Stops playback of the current media queue.
			 */
			stop(): void;

			/**
			 * Ends a seek operation and returns to the previous playback state.
			 * See also: [seekForward](Titanium.Media.MusicPlayer.seekForward) and
			 * [seekBackward](Titanium.Media.MusicPlayer.seekBackward).
			 */
			stopSeeking(): void;

		}
		/**
		 * Base event for class Titanium.Media.Sound
		 */
		interface SoundBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Media.Sound;

		}
		/**
		 * Fired when the state of the playback changes.
		 */
		interface Sound_change_Event extends SoundBaseEvent {
			/**
			 * Text description of the state of playback.
			 */
			description: string;

			/**
			 * Current state of playback.
			 */
			state: number;

		}
		/**
		 * Fired when the audio has finished playing.
		 */
		interface Sound_complete_Event extends SoundBaseEvent {
			/**
			 * Error code.
			 * Error code will be `0` if `success` is `true`, nonzero otherwise. If the error
			 * was generated by the operating system, that system's error value is used.
			 * Otherwise, this value will be `-1`.
			 */
			code: number;

			/**
			 * Error message, if any returned. Will be undefined if `success` is `true`.
			 */
			error: string;

			/**
			 * Indicates if the sound was played successfully.
			 * Returns `true` if request succeeded, `false` otherwise.
			 */
			success: boolean;

		}
		/**
		 * Fired when an error occurs while playing the audio.
		 */
		interface Sound_error_Event extends SoundBaseEvent {
			/**
			 * Error code.
			 * If the error was generated by the operating system, that system's error value
			 * is used. Otherwise, this value will be `-1`.
			 */
			code: number;

			/**
			 * Error message, if any returned. May be `undefined`.
			 */
			error: string;

			/**
			 * Error message.
			 * @deprecated Use the `error` property instead
			 */
			message: never;

			/**
			 * Indicates a successful operation. Returns `false`.
			 */
			success: boolean;

		}
		/**
		 * Fired  when audio playback is interrupted by the device.
		 */
		interface Sound_interrupted_Event extends SoundBaseEvent {
		}
		/**
		 * Fired when audio playback is resumed after an interruption.
		 */
		interface Sound_resume_Event extends SoundBaseEvent {
			/**
			 * Indicates if the resume was from an interruption.
			 */
			interruption: boolean;

		}
		interface SoundEventMap extends ProxyEventMap {
			change: Sound_change_Event;

			complete: Sound_complete_Event;

			error: Sound_error_Event;

			interrupted: Sound_interrupted_Event;

			resume: Sound_resume_Event;

		}
		/**
		 * An object for playing basic audio resources.
		 */
		class Sound extends Titanium.Proxy {
			/**
			 * Used to identify the volume of audio streams for alarms.
			 */
			readonly AUDIO_TYPE_ALARM: number;

			/**
			 * Used to identify the volume of audio streams for media playback.
			 */
			readonly AUDIO_TYPE_MEDIA: number;

			/**
			 * Used to identify the volume of audio streams for notifications.
			 */
			readonly AUDIO_TYPE_NOTIFICATION: number;

			/**
			 * Used to identify the volume of audio streams for the phone ring.
			 */
			readonly AUDIO_TYPE_RING: number;

			/**
			 * Used to identify the volume of audio streams for DTMF tones or beeps.
			 */
			readonly AUDIO_TYPE_SIGNALLING: number;

			/**
			 * Used to identify the volume of audio streams for voice calls.
			 */
			readonly AUDIO_TYPE_VOICE: number;

			/**
			 * Audio data is being buffered from the network.
			 */
			readonly STATE_BUFFERING: number;

			/**
			 * Audio playback is being initialized.
			 */
			readonly STATE_INITIALIZED: number;

			/**
			 * Playback is paused.
			 */
			readonly STATE_PAUSED: number;

			/**
			 * Audio playback is active.
			 */
			readonly STATE_PLAYING: number;

			/**
			 * Audio playback is starting.
			 */
			readonly STATE_STARTING: number;

			/**
			 * Audio playback is stopped.
			 */
			readonly STATE_STOPPED: number;

			/**
			 * Audio playback is stopping.
			 */
			readonly STATE_STOPPING: number;

			/**
			 * Player is waiting for audio data from the network.
			 */
			readonly STATE_WAITING_FOR_DATA: number;

			/**
			 * Player is waiting for audio data to fill the queue.
			 */
			readonly STATE_WAITING_FOR_QUEUE: number;

			/**
			 * Determines whether the audio should continue playing even when its activity is paused.
			 */
			allowBackground: boolean;

			/**
			 * Changes the audio-stream-type.
			 */
			audioType: number;

			/**
			 * Duration of the audio resource.
			 */
			readonly duration: number;

			/**
			 * Determines whether the audio should loop upon completion.
			 */
			looping: boolean;

			/**
			 * Indicates if the audio is paused.
			 */
			paused: boolean;

			/**
			 * Indicates if the audio is playing.
			 */
			readonly playing: boolean;

			/**
			 * Current playback position of the audio.
			 */
			time: number;

			/**
			 * URL identifying the audio resource.
			 */
			url: string;

			/**
			 * Volume of the audio from 0.0 (muted) to 1.0 (loudest).
			 */
			volume: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof SoundEventMap>(name: K, callback: (this: Titanium.Media.Sound, event: SoundEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof SoundEventMap>(name: K, event?: SoundEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the value of the [looping](Titanium.Media.Sound.looping) property.
			 * @deprecated Use the <Titanium.Media.Sound.looping> property instead.
			 */
			isLooping(): boolean;

			/**
			 * Returns the value of the [paused](Titanium.Media.Sound.paused) property.
			 * @deprecated Use the <Titanium.Media.Sound.paused> property instead.
			 */
			isPaused(): boolean;

			/**
			 * Returns the value of the [playing](Titanium.Media.Sound.playing) property.
			 * @deprecated Use the <Titanium.Media.Sound.playing> property instead.
			 */
			isPlaying(): boolean;

			/**
			 * Pauses the audio.
			 */
			pause(): void;

			/**
			 * Starting playing the sound, or resume playing a paused sound.
			 */
			play(): void;

			/**
			 * Releases all internal resources.
			 */
			release(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof SoundEventMap>(name: K, callback: (this: Titanium.Media.Sound, event: SoundEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Resets the audio playback position to the beginning.
			 */
			reset(): void;

			/**
			 * Sets the value of the [looping](Titanium.Media.Sound.looping) property.
			 * @deprecated Set the value of the [looping](Titanium.Media.Sound.looping) property directly.
			 */
			setLooping(looping: boolean): void;

			/**
			 * Sets the value of the [paused](Titanium.Media.Sound.paused) property.
			 * @deprecated It is preferable to use the [pause](Titanium.Media.Sound.pause) and
			 * [play](Titanium.Media.Sound.play) methods instead.
			 *
			 */
			setPaused(paused: boolean): void;

			/**
			 * Stops playing the audio and resets the playback position to the beginning of the clip.
			 */
			stop(): void;

		}
		/**
		 * An object for playing system sounds.
		 * @deprecated This iOS-only API has been deprecated and moved to the [Ti.SystemAlert](https://github.com/appcelerator-modules/ti.systemalert) module in 8.0.0.
		 */
		class SystemAlert extends Titanium.Proxy {
			/**
			 * URL identifying the audio resource.
			 */
			url: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Start playing the system alert.
			 */
			play(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.Media.VideoPlayer
		 */
		interface VideoPlayerBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Media.VideoPlayer;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface VideoPlayer_click_Event extends VideoPlayerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface VideoPlayer_dblclick_Event extends VideoPlayerBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface VideoPlayer_doubletap_Event extends VideoPlayerBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface VideoPlayer_focus_Event extends VideoPlayerBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface VideoPlayer_keypressed_Event extends VideoPlayerBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface VideoPlayer_longclick_Event extends VideoPlayerBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface VideoPlayer_longpress_Event extends VideoPlayerBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface VideoPlayer_pinch_Event extends VideoPlayerBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface VideoPlayer_postlayout_Event extends VideoPlayerBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface VideoPlayer_singletap_Event extends VideoPlayerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface VideoPlayer_swipe_Event extends VideoPlayerBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface VideoPlayer_touchcancel_Event extends VideoPlayerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface VideoPlayer_touchend_Event extends VideoPlayerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface VideoPlayer_touchmove_Event extends VideoPlayerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface VideoPlayer_touchstart_Event extends VideoPlayerBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface VideoPlayer_twofingertap_Event extends VideoPlayerBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when movie playback ends or a user exits playback.
		 */
		interface VideoPlayer_complete_Event extends VideoPlayerBaseEvent {
			/**
			 * Error code.
			 * Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
			 * was generated by the operating system, that system's error value is used.
			 * Otherwise, this value will be -1.
			 */
			code: number;

			/**
			 * Error message, if any returned. Will be undefined if `success` is `true`.
			 */
			error: string;

			/**
			 * Reason that playback ended.
			 */
			reason: number;

			/**
			 * Indicates if the video was played successfully. User exit counts as a success.
			 * Returns `true` if `reason` is not
			 * [VIDEO_FINISH_REASON_PLAYBACK_ERROR](Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR),
			 * `false` otherwise.
			 */
			success: boolean;

		}
		/**
		 * Fired when the video duration is available.
		 */
		interface VideoPlayer_durationavailable_Event extends VideoPlayerBaseEvent {
			/**
			 * Video duration, in milliseconds.
			 */
			duration: number;

		}
		/**
		 * Fired when movie playback encounters an error.
		 */
		interface VideoPlayer_error_Event extends VideoPlayerBaseEvent {
			/**
			 * Error code.
			 * If the error was generated by the operating system, that system's error value
			 * is used. Otherwise, this value will be `-1`.
			 */
			code: number;

			/**
			 * Error message, if any returned. May be `undefined`.
			 */
			error: string;

			/**
			 * Reason for error as a string.
			 * @deprecated Use `error` property instead
			 */
			message: never;

			/**
			 * Indicates a successful operation. Returns `false`.
			 */
			success: boolean;

		}
		/**
		 * Fired when the movie play loads.
		 */
		interface VideoPlayer_load_Event extends VideoPlayerBaseEvent {
		}
		/**
		 * Fired when the network [loadState](Titanium.Media.VideoPlayer.loadState) changes.
		 */
		interface VideoPlayer_loadstate_Event extends VideoPlayerBaseEvent {
			/**
			 * Current value of the [loadState](Titanium.Media.VideoPlayer.loadState) property.
			 */
			loadState: number;

		}
		/**
		 * Fired when the natural size of the current movie is determined.
		 */
		interface VideoPlayer_naturalsizeavailable_Event extends VideoPlayerBaseEvent {
			/**
			 * Current value of the [naturalSize](Titanium.Media.VideoPlayer.naturalSize) property.
			 */
			naturalSize: number;

		}
		/**
		 * Fired when the [playbackState](Titanium.Media.VideoPlayer.playbackState) changes.
		 */
		interface VideoPlayer_playbackstate_Event extends VideoPlayerBaseEvent {
			/**
			 * Current value of the [playbackState](Titanium.Media.VideoPlayer.playbackState) property.
			 */
			playbackState: number;

		}
		/**
		 * Fired when the currently playing movie changes.
		 */
		interface VideoPlayer_playing_Event extends VideoPlayerBaseEvent {
			/**
			 * URL of the media.
			 */
			url: string;

		}
		/**
		 * Fired when the movie has preloaded and is ready to play.
		 */
		interface VideoPlayer_preload_Event extends VideoPlayerBaseEvent {
		}
		/**
		 * Fired when the movie player is resized.
		 */
		interface VideoPlayer_resize_Event extends VideoPlayerBaseEvent {
		}
		interface VideoPlayerEventMap extends ProxyEventMap {
			click: VideoPlayer_click_Event;

			complete: VideoPlayer_complete_Event;

			dblclick: VideoPlayer_dblclick_Event;

			doubletap: VideoPlayer_doubletap_Event;

			durationavailable: VideoPlayer_durationavailable_Event;

			error: VideoPlayer_error_Event;

			focus: VideoPlayer_focus_Event;

			keypressed: VideoPlayer_keypressed_Event;

			load: VideoPlayer_load_Event;

			loadstate: VideoPlayer_loadstate_Event;

			longclick: VideoPlayer_longclick_Event;

			longpress: VideoPlayer_longpress_Event;

			naturalsizeavailable: VideoPlayer_naturalsizeavailable_Event;

			pinch: VideoPlayer_pinch_Event;

			playbackstate: VideoPlayer_playbackstate_Event;

			playing: VideoPlayer_playing_Event;

			postlayout: VideoPlayer_postlayout_Event;

			preload: VideoPlayer_preload_Event;

			resize: VideoPlayer_resize_Event;

			singletap: VideoPlayer_singletap_Event;

			swipe: VideoPlayer_swipe_Event;

			touchcancel: VideoPlayer_touchcancel_Event;

			touchend: VideoPlayer_touchend_Event;

			touchmove: VideoPlayer_touchmove_Event;

			touchstart: VideoPlayer_touchstart_Event;

			twofingertap: VideoPlayer_twofingertap_Event;

		}
		/**
		 * A native control for playing videos.
		 */
		class VideoPlayer extends Titanium.UI.View {
			/**
			 * Whether or not the current movie can be played on a remote device.
			 */
			allowsAirPlay: boolean;

			/**
			 * Indicates if a movie should automatically start playback.
			 */
			autoplay: boolean;

			/**
			 * Sets the background view for customization which is always displayed behind movie content.
			 * @deprecated Use [Titanium.Media.VideoPlayer.overlayView](Titanium.Media.VideoPlayer.overlayView) instead.
			 */
			backgroundView: Titanium.UI.View;

			/**
			 * Current playback time of the current movie in milliseconds.
			 */
			currentPlaybackTime: number;

			/**
			 * The duration of the current movie in milliseconds, or 0.0 if not known.
			 */
			duration: number;

			/**
			 * The end time of movie playback, in milliseconds.
			 */
			endPlaybackTime: number;

			/**
			 * Determines if the movie is presented in the entire screen (obscuring all other application content).
			 * @deprecated This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
			 */
			fullscreen: boolean;

			/**
			 * The start time of movie playback, in milliseconds.
			 */
			initialPlaybackTime: number;

			/**
			 * Returns the network load state of the movie player.
			 * @deprecated On iOS, use [Titanium.Media.VideoPlayer.moviePlayerStatus](Titanium.Media.VideoPlayer.moviePlayerStatus) instead.
			 */
			readonly loadState: number;

			/**
			 * Media object to play, as either a `Ti.Filesystem.File`, a `Ti.Blob`, or an URL `String`.
			 */
			media: Titanium.Blob | Titanium.Filesystem.File | string;

			/**
			 * The style of the playback controls.
			 * @deprecated On iOS, use [Titanium.Media.VideoPlayer.showsControls](Titanium.Media.VideoPlayer.showsControls) instead.
			 */
			mediaControlStyle: number;

			/**
			 * The type of media in the player's current item first track.
			 */
			readonly mediaTypes: string;

			/**
			 * Returns the status of the movie player.
			 */
			readonly moviePlayerStatus: number;

			/**
			 * Returns the natural size of the movie.
			 */
			naturalSize: MovieSize;

			/**
			 * Use the overlay view to add additional custom views between the video content and the controls.
			 */
			overlayView: Titanium.UI.View;

			/**
			 * Whether or not the receiver allows Picture in Picture playback.
			 */
			pictureInPictureEnabled: boolean;

			/**
			 * Currently playable duration of the movie, in milliseconds, for progressively
			 * downloaded network content, or 0.0 if not known.
			 */
			readonly playableDuration: number;

			/**
			 * Current playback state of the video player.
			 */
			readonly playbackState: number;

			/**
			 * Boolean to indicate if the player has started playing.
			 */
			readonly playing: boolean;

			/**
			 * Determines how the movie player repeats when reaching the end of playback.
			 */
			repeatMode: number;

			/**
			 * Determines how the content scales to fit the view.
			 */
			scalingMode: number;

			/**
			 * Whether or not the receiver shows playback controls. Default is true.
			 */
			showsControls: boolean;

			/**
			 * URL of the media to play.
			 */
			url: string;

			/**
			 * Volume of the audio portion of the video.
			 */
			volume: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof VideoPlayerEventMap>(name: K, callback: (this: Titanium.Media.VideoPlayer, event: VideoPlayerEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Cancels all pending asynchronous thumbnail requests.
			 */
			cancelAllThumbnailImageRequests(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof VideoPlayerEventMap>(name: K, event?: VideoPlayerEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Pauses playing the video.
			 */
			pause(): void;

			/**
			 * Starts playing the video.
			 */
			play(): void;

			/**
			 * Releases the internal video resources immediately.
			 */
			release(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof VideoPlayerEventMap>(name: K, callback: (this: Titanium.Media.VideoPlayer, event: VideoPlayerEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Asynchronously request thumbnail images for one or more points in time in the video.
			 */
			requestThumbnailImagesAtTimes(times: ReadonlyArray<number>, option: number, callback: (param0: ThumbnailResponse) => void): void;

			/**
			 * Stops playing the video.
			 */
			stop(): void;

		}
	}
	/**
	 * The top level network module.
	 */
	namespace Network {
		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the device is
		 * communicating over a local-area network.
		 */
		const NETWORK_LAN: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the device is
		 * communicating over a mobile network.
		 */
		const NETWORK_MOBILE: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that no
		 * network is available.
		 */
		const NETWORK_NONE: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the
		 * current network type is unknown.
		 */
		const NETWORK_UNKNOWN: number;

		/**
		 * A [networkType](Titanium.Network.networkType) value indicating that the
		 * device is communicating over a WiFi network.
		 */
		const NETWORK_WIFI: number;

		/**
		 * Constant value for an Alert style push notification.
		 */
		const NOTIFICATION_TYPE_ALERT: number;

		/**
		 * Constant value for a Badge style push notification.
		 */
		const NOTIFICATION_TYPE_BADGE: number;

		/**
		 * Constant value for a Newsstand style push notification. Only available on iOS5 and later
		 */
		const NOTIFICATION_TYPE_NEWSSTAND: number;

		/**
		 * Constant value for a Sound style push notification.
		 */
		const NOTIFICATION_TYPE_SOUND: number;

		/**
		 * Constant value specifying that the progress of a download can not be calculated.
		 */
		const PROGRESS_UNKNOWN: number;

		/**
		 * Constant value specifying TLS version 1.0 for SSL.
		 */
		const TLS_VERSION_1_0: number;

		/**
		 * Constant value specifying TLS version 1.1 for SSL.
		 */
		const TLS_VERSION_1_1: number;

		/**
		 * Constant value specifying TLS version 1.2 for SSL.
		 */
		const TLS_VERSION_1_2: number;

		/**
		 * Constant value specifying TLS version 1.3 for SSL.
		 */
		const TLS_VERSION_1_3: number;

		/**
		 * Socket module, used for creating sockets.
		 */
		namespace Socket {
			/**
			 * State value representing a closed socket.
			 */
			const CLOSED: number;

			/**
			 * State value representing a connected socket.
			 */
			const CONNECTED: number;

			/**
			 * State value indicating an error has occurred on the socket.
			 */
			const ERROR: number;

			/**
			 * State value representing an initialized socket.
			 */
			const INITIALIZED: number;

			/**
			 * State value representing a socket that is listening for connections.
			 */
			const LISTENING: number;

			/**
			 * TCP socket that implements the `Titanium.IOStream` interface.
			 */
			class TCP extends Titanium.IOStream {
				/**
				 * Callback to be fired when a listener accepts a connection.
				 */
				accepted: (param0: AcceptedCallbackArgs) => void;

				/**
				 * Callback to be fired when the socket enters the "connected" state.
				 */
				connected: (param0: ConnectedCallbackArgs) => void;

				/**
				 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
				 */
				error: (param0: ErrorCallbackArgs) => void;

				/**
				 * The host to connect to or listen on.
				 */
				host: string;

				/**
				 * Max number of pending incoming connections to be allowed when the socket is in the [LISTENING](Titanium.Network.Socket.LISTENING) state.
				 */
				listenQueueSize: number;

				/**
				 * The port to connect to or listen on.
				 */
				port: number;

				/**
				 * Current state of the socket.
				 */
				readonly state: number;

				/**
				 * Timeout, in milliseconds, for `connect` and all `write` operations.
				 */
				timeout: number;

				/**
				 * Tells a [LISTENING](Titanium.Network.Socket.LISTENING) socket to accept a connection request at the top of a listener's request queue when one becomes available.
				 */
				accept(options: AcceptDict): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Closes a socket.
				 */
				close(): void;

				/**
				 * Attempts to connect the socket to its host/port.
				 */
				connect(): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Attempts to start listening on the socket's host/port.
				 */
				listen(): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
		}
		/**
		 * Base event for class Titanium.Network.BonjourBrowser
		 */
		interface BonjourBrowserBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Network.BonjourBrowser;

		}
		/**
		 * Fired when the discovered services list is updated
		 */
		interface BonjourBrowser_updatedservices_Event extends BonjourBrowserBaseEvent {
			/**
			 * An array of BonjourService objects corresponding to currently available services.  If you cache this value, including using it as table data, be aware that it could become out of date at any time due to the asynchronous nature of Bonjour service discovery.
			 */
			services: Titanium.Network.BonjourService[];

		}
		interface BonjourBrowserEventMap extends ProxyEventMap {
			updatedservices: BonjourBrowser_updatedservices_Event;

		}
		/**
		 * A browser for the discovery and retrieval of Bonjour services available on the network.
		 */
		class BonjourBrowser extends Titanium.Proxy {
			/**
			 * The domain the browser is searching in
			 */
			domain: string;

			/**
			 * Whether or not the browser is currently searching
			 */
			isSearching: boolean;

			/**
			 * The type of the service the browser searches for
			 */
			serviceType: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof BonjourBrowserEventMap>(name: K, callback: (this: Titanium.Network.BonjourBrowser, event: BonjourBrowserEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof BonjourBrowserEventMap>(name: K, event?: BonjourBrowserEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof BonjourBrowserEventMap>(name: K, callback: (this: Titanium.Network.BonjourBrowser, event: BonjourBrowserEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Conduct a search for Bonjour services matching the type and domain specified during creation
			 */
			search(): void;

			/**
			 * Halt an ongoing search
			 */
			stopSearch(): void;

		}
		/**
		 * Base event for class Titanium.Network.BonjourService
		 */
		interface BonjourServiceBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.Network.BonjourService;

		}
		/**
		 * Fired when the service has been published (or errored).
		 */
		interface BonjourService_publish_Event extends BonjourServiceBaseEvent {
			/**
			 * Error code
			 */
			code: number;

			/**
			 * Error message
			 */
			error: string;

			/**
			 * Reports if the publish operation was successful
			 */
			success: boolean;

		}
		/**
		 * Fired when the service has been resolved (or errored). If successful, the [socket](Titanium.Network.BonjourService.socket) property should now be available.
		 */
		interface BonjourService_resolve_Event extends BonjourServiceBaseEvent {
			/**
			 * Error code
			 */
			code: number;

			/**
			 * Error message
			 */
			error: string;

			/**
			 * Reports if the resolve operation was successful
			 */
			success: boolean;

		}
		/**
		 * Fired when a service's publish or resolution was stopped via <Titanium.Network.BonjourService.stop>
		 */
		interface BonjourService_stop_Event extends BonjourServiceBaseEvent {
			/**
			 * Error code
			 */
			code: number;

			/**
			 * Error message
			 */
			error: string;

			/**
			 * Reports if the stop operation was successful
			 */
			success: boolean;

		}
		interface BonjourServiceEventMap extends ProxyEventMap {
			publish: BonjourService_publish_Event;

			resolve: BonjourService_resolve_Event;

			stop: BonjourService_stop_Event;

		}
		/**
		 * Describes a service on the network which is published by Bonjour.
		 */
		class BonjourService extends Titanium.Proxy {
			/**
			 * the domain of the service
			 */
			domain: string;

			/**
			 * whether or not the service is local to the device
			 */
			isLocal: boolean;

			/**
			 * the name of the service
			 */
			name: string;

			/**
			 * the TCPSocket object that is used to connect to the service
			 */
			socket: Titanium.Network.Socket.TCP;

			/**
			 * the type of the service
			 */
			type: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof BonjourServiceEventMap>(name: K, callback: (this: Titanium.Network.BonjourService, event: BonjourServiceEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof BonjourServiceEventMap>(name: K, event?: BonjourServiceEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Asynchronously publish a Bonjour service to the network.  Only works if isLocal is TRUE
			 */
			publish(socket: Titanium.Network.Socket.TCP, callback?: (param0: Error, param1: boolean) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof BonjourServiceEventMap>(name: K, callback: (this: Titanium.Network.BonjourService, event: BonjourServiceEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Asynchronously resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.
			 */
			resolve(timeout?: number, callback?: (param0: Error, param1: boolean) => void): void;

			/**
			 * Asynchronously halts a currently running attempt to publish or resolve a service.
			 */
			stop(callback?: (param0: Error, param1: boolean) => void): void;

		}
		/**
		 * Cookie object used to manage the system cookie store and HTTP client cookie store.
		 */
		class Cookie extends Titanium.Proxy {
			/**
			 * The comment describing the purpose of this cookie
			 */
			comment: string;

			/**
			 * The domain attribute of the cookie.
			 */
			domain: string;

			/**
			 * The expiration Date of the cookie.
			 */
			expiryDate: string;

			/**
			 * The httponly attribute of the cookie.
			 */
			httponly: boolean;

			/**
			 * Sets the Max-Age attribute of a Cookie, in delta-seconds.
			 */
			maxAge: number;

			/**
			 * The name of the cookie.
			 */
			readonly name: string;

			/**
			 * The origual url attribute of the cookie.
			 */
			originalUrl: string;

			/**
			 * The path attribute of the cookie.
			 */
			path: string;

			/**
			 * The secure attribute of the cookie.
			 */
			secure: boolean;

			/**
			 * The value of the cookie.
			 */
			value: string;

			/**
			 * The version of the cookie specification to which this cookie conforms.
			 */
			version: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns true if the cookie is valid.
			 */
			isValid(): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * HTTP client object that (mostly) implements the XMLHttpRequest specification.
		 */
		class HTTPClient extends Titanium.Proxy {
			/**
			 * Ready state constant indicating that the request is complete.
			 */
			readonly DONE: number;

			/**
			 * Ready state constant indicating that response headers have been received.
			 */
			readonly HEADERS_RECEIVED: number;

			/**
			 * Ready state constant indicating that response data is being received from the remote server.
			 */
			readonly LOADING: number;

			/**
			 * Ready state constant indicating that the connection has been opened, but the request has
			 * not yet been sent.
			 */
			readonly OPENED: number;

			/**
			 * Ready state constant indicating that HTTPClient request has not been opened or sent.
			 */
			readonly UNSENT: number;

			/**
			 * All of the response headers.
			 */
			readonly allResponseHeaders: string;

			/**
			 * Determines whether automatic encoding is enabled for the specified URL.
			 */
			autoEncodeUrl: boolean;

			/**
			 * Determines whether automatic automatic handling of HTTP redirects is enabled.
			 */
			autoRedirect: boolean;

			/**
			 * Determines whether HTTP responses are cached.
			 */
			cache: boolean;

			/**
			 * Indicates whether the response was successful.
			 */
			readonly connected: boolean;

			/**
			 * Connection type, normally either `GET`, `POST` or `PATCH`.
			 */
			readonly connectionType: string;

			/**
			 * Sets the domain parameter for authentication credentials.
			 */
			domain: string;

			/**
			 * Determines whether the client should attempt to keep a persistent connection.
			 */
			enableKeepAlive: boolean;

			/**
			 * Target local file or file path to receive data.
			 */
			file: string | Titanium.Filesystem.File;

			/**
			 * Absolute URL of the request.
			 */
			readonly location: string;

			/**
			 * Function to be called at regular intervals as the request data is being received.
			 */
			ondatastream: (param0: any) => void;

			/**
			 * Function to be called upon a error response.
			 */
			onerror: (param0: FailureResponse) => void;

			/**
			 * Function to be called upon a successful response.
			 */
			onload: (param0: SuccessResponse) => void;

			/**
			 * Function to be called for each [readyState](Titanium.Network.HTTPClient.readyState) change.
			 */
			onreadystatechange: (param0: any) => void;

			/**
			 * Function to be called at regular intervals as the request data is being transmitted.
			 */
			onsendstream: (param0: any) => void;

			/**
			 * Sets the password parameter for authentication credentials.
			 */
			password: string;

			/**
			 * The current ready state of this HTTP request.
			 */
			readonly readyState: number;

			/**
			 * Response data as a `Blob` object.
			 */
			readonly responseData: Titanium.Blob;

			/**
			 * Returns all the response headers returned with the request.
			 */
			readonly responseHeaders: any;

			/**
			 * Response as text.
			 */
			readonly responseText: string;

			/**
			 * Response object as an XML DOM Document object.
			 */
			readonly responseXML: Titanium.XML.Document;

			/**
			 * The Security Manager for this client.
			 */
			securityManager: SecurityManagerProtocol;

			/**
			 * Response HTTP status code.
			 */
			readonly status: number;

			/**
			 * Human-readable status message associated with the status code.
			 */
			readonly statusText: string;

			/**
			 * Timeout in milliseconds when the connection should be aborted.
			 */
			timeout: number;

			/**
			 * The maximum amount of time (in milliseconds) that a resource request should be allowed to take.
			 */
			timeoutForResource: number;

			/**
			 * Sets the TLS version to use for handshakes.
			 */
			tlsVersion: number;

			/**
			 * Sets the username parameter for authentication credentials.
			 */
			username: string;

			/**
			 * Determines how SSL certification validation is performed on connection.
			 */
			validatesSecureCertificate: boolean;

			/**
			 * A Boolean value that indicates whether the session should wait for connectivity to become available, or fail immediately.
			 */
			waitsForConnectivity: boolean;

			/**
			 * Cancels a pending request.
			 */
			abort(): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Clears any cookies stored for the host.
			 */
			clearCookies(host: string): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * All of the response headers.
			 */
			getAllResponseHeaders(): string;

			/**
			 * Returns the value of the specified response header.
			 */
			getResponseHeader(name: string): string;

			/**
			 * Opens the request and prepares the connection.
			 */
			open(method: string, url: string, async?: boolean): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Sends the request.
			 */
			send(data?: any): void;

			/**
			 * Sets the value for the specified request header. Must be called after `open` but before `send`.
			 */
			setRequestHeader(name: string, value: string): void;

			/**
			 * Sets the request timeout.
			 * @deprecated Use the <Titanium.Network.HTTPClient.timeout> property instead.
			 */
			setTimeout: never;

		}
		/**
		 * Socket module, used for creating sockets.
		 */
		class Socket extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Returns a new TCP socket object.
			 */
			static createTCP(params?: Dictionary<Titanium.Network.Socket.TCP>): Titanium.Network.Socket.TCP;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The TCPSocket instance returned from <Titanium.Network.createTCPSocket>.  This object
		 * represents a socket which either listens locally on the device for connections,
		 * or connects to a remote machine.
		 * @deprecated Use [Titanium.Network.Socket.TCP](Titanium.Network.Socket.TCP) where possible.
		 *
		 */
		const TCPSocket: never;
	}
	/**
	 * The top-level Platform module.  The Platform module is used to access the device's platform-related
	 * functionality.
	 */
	namespace Platform {
		/**
		 * Constant to indicate that the system is plugged in and currently being charged.
		 */
		const BATTERY_STATE_CHARGING: number;

		/**
		 * Constant to indicate that the battery is fully charged.
		 */
		const BATTERY_STATE_FULL: number;

		/**
		 * Constant to indicate that the battery state is not known or monitoring is disabled.
		 */
		const BATTERY_STATE_UNKNOWN: number;

		/**
		 * Constant to indicate that the system is unplugged.
		 */
		const BATTERY_STATE_UNPLUGGED: number;

		/**
		 * The Android-specific Platform module, used to access the device's platform-related functionality.
		 */
		class Android extends Titanium.Module {
			/**
			 * Android API level identifier of the Operating System.
			 */
			static readonly API_LEVEL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is large
			 */
			static readonly PHYSICAL_SIZE_CATEGORY_LARGE: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is normal
			 */
			static readonly PHYSICAL_SIZE_CATEGORY_NORMAL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is small
			 */
			static readonly PHYSICAL_SIZE_CATEGORY_SMALL: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is undefined
			 */
			static readonly PHYSICAL_SIZE_CATEGORY_UNDEFINED: number;

			/**
			 * Constant to indicate that the physical size category of the current device/emulator is extra large
			 */
			static readonly PHYSICAL_SIZE_CATEGORY_XLARGE: number;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * The physical size category of the Android device or emulator.
			 */
			static readonly physicalSizeCategory: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The Display Caps object returned by the <Titanium.Platform.displayCaps> property.
		 */
		interface DisplayCaps extends Titanium.Proxy {
			/**
			 * Logical density of the display.
			 */
			readonly density: string;

			/**
			 * Display density expressed as dots-per-inch.
			 */
			readonly dpi: number;

			/**
			 * Logical density of the display, as a scaling factor for the Density Independent Pixel (dip)
			 * unit.
			 */
			readonly logicalDensityFactor: number;

			/**
			 * Absolute height of the display in relation to UI orientation. Measured in platform-specific
			 * units; pixels on Android and density-independent pixels (dip) on iOS.
			 */
			readonly platformHeight: number;

			/**
			 * Absolute width of the display in relation to UI orientation. Measured in platform-specific
			 * units; pixels on Android and density-independent pixels (dip) on iOS.
			 */
			readonly platformWidth: number;

			/**
			 * Physical pixels per inch of the display in the X dimension.
			 */
			readonly xdpi: number;

			/**
			 * Physical pixels per inch of the display in the Y dimension.
			 */
			readonly ydpi: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The main <Titanium.UI> module.
	 */
	namespace UI {
		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * slowly and speeds up.
		 */
		const ANIMATION_CURVE_EASE_IN: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * slowly, and speeds up, then slows down at the end of the animation.
		 */
		const ANIMATION_CURVE_EASE_IN_OUT: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
		 * quickly, then slows down at the end of the animation.
		 */
		const ANIMATION_CURVE_EASE_OUT: number;

		/**
		 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that proceeds
		 * at a constant rate.
		 */
		const ANIMATION_CURVE_LINEAR: number;

		/**
		 * Use with <Attribute.type> to specify a background color.
		 */
		const ATTRIBUTE_BACKGROUND_COLOR: number;

		/**
		 * Use with <Attribute.type> to apply a different baseline to the text.
		 */
		const ATTRIBUTE_BASELINE_OFFSET: number;

		/**
		 * Use with <Attribute.type> to stretch the text horizontally.
		 */
		const ATTRIBUTE_EXPANSION: number;

		/**
		 * Use with <Attribute.type> to specify a font.
		 */
		const ATTRIBUTE_FONT: number;

		/**
		 * Use with <Attribute.type> to specify a font color.
		 */
		const ATTRIBUTE_FOREGROUND_COLOR: number;

		/**
		 * Use with <Attribute.type> to specify kerning (space between characters).
		 */
		const ATTRIBUTE_KERN: number;

		/**
		 * Use with <Attribute.value> to use a letterpress text effect.
		 */
		const ATTRIBUTE_LETTERPRESS_STYLE: number;

		/**
		 * Use with <Attribute.type> to enable or disable ligatures.
		 */
		const ATTRIBUTE_LIGATURE: number;

		/**
		 * Use with <Attribute.type> to wrap and truncate the text.
		 * @deprecated Use [ParagraphAttribute.lineBreakMode](ParagraphAttribute.lineBreakMode) instead.
		 */
		const ATTRIBUTE_LINE_BREAK: number;

		/**
		 * Use with <Attribute.value> to wrap words at word boundaries.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_CHAR_WRAPPING: number;

		/**
		 * Use with <Attribute.value> to set lines to not draw past the edge of the text container.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_CLIPPING: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the beginning of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_HEAD: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the middle of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_MIDDLE: number;

		/**
		 * Use with <Attribute.value> to use ellipsis glyph at the end of the line for missing text.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_TAIL: number;

		/**
		 * Use with <Attribute.value> to wrap words at word boundaries.
		 */
		const ATTRIBUTE_LINE_BREAK_BY_WORD_WRAPPING: number;

		/**
		 * Use with <Attribute.type> to create a link.
		 */
		const ATTRIBUTE_LINK: number;

		/**
		 * Use with <Attribute.type> to skew the text.
		 */
		const ATTRIBUTE_OBLIQUENESS: number;

		/**
		 * Use with <Attribute.type> to manages the behaviour of string set.
		 */
		const ATTRIBUTE_PARAGRAPH_STYLE: number;

		/**
		 * Use with <Attribute.type> to display a shadow behind the text.
		 */
		const ATTRIBUTE_SHADOW: number;

		/**
		 * Use with <Attribute.type> to change the color of the horizontal line.
		 */
		const ATTRIBUTE_STRIKETHROUGH_COLOR: number;

		/**
		 * Use with <Attribute.type> to place a horizontal line through the text.
		 */
		const ATTRIBUTE_STRIKETHROUGH_STYLE: number;

		/**
		 * Use with <Attribute.type> to specify a color for the stroke text.
		 */
		const ATTRIBUTE_STROKE_COLOR: number;

		/**
		 * Use with <Attribute.type> to specify the width of the stroke text.
		 */
		const ATTRIBUTE_STROKE_WIDTH: number;

		/**
		 * Use with <Attribute.type> to place the text in a lower position.
		 */
		const ATTRIBUTE_SUBSCRIPT_STYLE: number;

		/**
		 * Use with <Attribute.type> to place the text in an upper position.
		 */
		const ATTRIBUTE_SUPERSCRIPT_STYLE: number;

		/**
		 * Use with <Attribute.type> to apply a text effect.
		 */
		const ATTRIBUTE_TEXT_EFFECT: number;

		/**
		 * Use with <Attribute.type> to place a horizontal line under the text.
		 */
		const ATTRIBUTE_UNDERLINES_STYLE: number;

		/**
		 * Use with <Attribute.value> to draw a line only underneath or through words.
		 */
		const ATTRIBUTE_UNDERLINE_BY_WORD: number;

		/**
		 * Use with <Attribute.type> to change the color of the horizontal line.
		 */
		const ATTRIBUTE_UNDERLINE_COLOR: number;

		/**
		 * Use with <Attribute.value> to draw a dashed line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;

		/**
		 * Use with <Attribute.value> to draw an alternating line of dashes and dots.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;

		/**
		 * Use with <Attribute.value> to draw an alternating line of dashes and two dots.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;

		/**
		 * Use with <Attribute.value> to draw a dotted line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;

		/**
		 * Use with <Attribute.value> to draw a solid line.
		 */
		const ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;

		/**
		 * Use with <Attribute.value> to draw a double line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;

		/**
		 * Use with <Attribute.value> to not draw a line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_NONE: number;

		/**
		 * Use with <Attribute.value> to draw a single line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;

		/**
		 * Use with <Attribute.value> to draw a thick line.
		 */
		const ATTRIBUTE_UNDERLINE_STYLE_THICK: number;

		/**
		 * Use with <Attribute.type> to control the direction of the text.
		 */
		const ATTRIBUTE_WRITING_DIRECTION: number;

		/**
		 * Use with <Attribute.value> to use the embedded text direction.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;

		/**
		 * Use with <Attribute.value> to write text left to right.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;

		/**
		 * Use with <Attribute.value> to use the
		 * [Unicode Bidirection Algorithm rules P2 and P3](http://www.unicode.org/reports/tr9/#The_Paragraph_Level)
		 * to determine which direction to use.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;

		/**
		 * Use with <Attribute.value> to override the text direction.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;

		/**
		 * Use with <Attribute.value> to write text right to left.
		 */
		const ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;

		/**
		 * Specifies the expectation of an address.
		 */
		const AUTOFILL_TYPE_ADDRESS: string;

		/**
		 * Specifies the expectation of a city name.
		 */
		const AUTOFILL_TYPE_ADDRESS_CITY: string;

		/**
		 * Specifies the expectation of a city name combined with a state name.
		 */
		const AUTOFILL_TYPE_ADDRESS_CITY_STATE: string;

		/**
		 * Specifies the expectation of the first line of a street address.
		 */
		const AUTOFILL_TYPE_ADDRESS_LINE1: string;

		/**
		 * Specifies the expectation of the second line of a street address.
		 */
		const AUTOFILL_TYPE_ADDRESS_LINE2: string;

		/**
		 * Specifies the expectation of a state name.
		 */
		const AUTOFILL_TYPE_ADDRESS_STATE: string;

		/**
		 * Specifies the expectation of a card expiration date.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_DATE: string;

		/**
		 * Specifies the expectation of a card expiration day.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_DAY: string;

		/**
		 * Specifies the expectation of a card expiration month.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_MONTH: string;

		/**
		 * Specifies the expectation of a card expiration year.
		 */
		const AUTOFILL_TYPE_CARD_EXPIRATION_YEAR: string;

		/**
		 * Specifies the expectation of a card number.
		 */
		const AUTOFILL_TYPE_CARD_NUMBER: string;

		/**
		 * Specifies the expectation of a card security code.
		 */
		const AUTOFILL_TYPE_CARD_SECURITY_CODE: string;

		/**
		 * Specifies the expectation of a country name.
		 */
		const AUTOFILL_TYPE_COUNTRY_NAME: string;

		/**
		 * Specifies the expectation of an email address.
		 */
		const AUTOFILL_TYPE_EMAIL: string;

		/**
		 * Specifies the expectation of a family name.
		 */
		const AUTOFILL_TYPE_FAMILY_NAME: string;

		/**
		 * Specifies the expectation of a given name.
		 */
		const AUTOFILL_TYPE_GIVEN_NAME: string;

		/**
		 * Specifies the expectation of a job title.
		 */
		const AUTOFILL_TYPE_JOB_TITLE: string;

		/**
		 * Specifies the expectation of a location, such as a point of interest, an address, or another way to identify a location.
		 */
		const AUTOFILL_TYPE_LOCATION: string;

		/**
		 * Specifies the expectation of a middle name.
		 */
		const AUTOFILL_TYPE_MIDDLE_NAME: string;

		/**
		 * Specifies the expectation of a name.
		 */
		const AUTOFILL_TYPE_NAME: string;

		/**
		 * Specifies the expectation of a prefix or title, such as 'Dr.'
		 */
		const AUTOFILL_TYPE_NAME_PREFIX: string;

		/**
		 * Specifies the expectation of a suffix, such as 'Jr.'
		 */
		const AUTOFILL_TYPE_NAME_SUFFIX: string;

		/**
		 * Specifies the expectation of a new password.
		 */
		const AUTOFILL_TYPE_NEW_PASSWORD: string;

		/**
		 * Specifies the expectation of a nickname.
		 */
		const AUTOFILL_TYPE_NICKNAME: string;

		/**
		 * Specifies the expectation of a single-factor SMS login code.
		 */
		const AUTOFILL_TYPE_ONE_TIME_CODE: string;

		/**
		 * Specifies the expectation of an organization name.
		 */
		const AUTOFILL_TYPE_ORGANIZATION_NAME: string;

		/**
		 * Specifies the expectation of a password.
		 */
		const AUTOFILL_TYPE_PASSWORD: string;

		/**
		 * Specifies the expectation of a telephone number.
		 */
		const AUTOFILL_TYPE_PHONE: string;

		/**
		 * Specifies the expectation of a postal code.
		 */
		const AUTOFILL_TYPE_POSTAL_CODE: string;

		/**
		 * Specifies the expectation of a sublocality.
		 */
		const AUTOFILL_TYPE_SUBLOCALITY: string;

		/**
		 * Specifies the expectation of a URL.
		 */
		const AUTOFILL_TYPE_URL: string;

		/**
		 * Specifies the expectation of an account or login name.
		 */
		const AUTOFILL_TYPE_USERNAME: string;

		/**
		 * Converts all detectable types of data into clickable links.
		 */
		const AUTOLINK_ALL: number;

		/**
		 * Converts strings formatted as calendar events into clickable links.
		 */
		const AUTOLINK_CALENDAR: number;

		/**
		 * Converts strings formatted as email addresses into clickable links.
		 */
		const AUTOLINK_EMAIL_ADDRESSES: number;

		/**
		 * An option to detect strings with the format of a flight number from an airline.
		 */
		const AUTOLINK_FLIGHT_NUMBER: number;

		/**
		 * An option to detect strings with the format of information that the user might want to look up.
		 */
		const AUTOLINK_LOOKUP_SUGGESTION: number;

		/**
		 * Converts strings formatted as addresses into clickable links.
		 */
		const AUTOLINK_MAP_ADDRESSES: number;

		/**
		 * An option to detect strings with the format of money amounts.
		 */
		const AUTOLINK_MONEY: number;

		/**
		 * Disables converting strings into clickable links.
		 */
		const AUTOLINK_NONE: number;

		/**
		 * Converts strings formatted as phone numbers into clickable links.
		 */
		const AUTOLINK_PHONE_NUMBERS: number;

		/**
		 * An option to detect strings with the format of physical values (length, temperatures, etc...)
		 */
		const AUTOLINK_PHYSICAL_VALUE: number;

		/**
		 * An option to detect strings with the format of a tracking number from a package delivery company.
		 */
		const AUTOLINK_SHIPMENT_TRACKING_NUMBER: number;

		/**
		 * Converts strings formatted as URLs into clickable links.
		 */
		const AUTOLINK_URLS: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_CLEAR: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR_BURN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COLOR_DODGE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_COPY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DARKEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_ATOP: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_IN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_OUT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DESTINATION_OVER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_DIFFERENCE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_EXCLUSION: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_HARD_LIGHT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_HUE: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_LIGHTEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_LUMINOSITY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_MULTIPLY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_NORMAL: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_OVERLAY: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_PLUS_DARKER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_PLUS_LIGHTER: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SATURATION: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SCREEN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOFT_LIGHT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_ATOP: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_IN: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_SOURCE_OUT: number;

		/**
		 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
		 */
		const BLEND_MODE_XOR: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show a solid filled button.
		 */
		const BUTTON_STYLE_FILLED: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show a negative themed escape button.
		 */
		const BUTTON_STYLE_OPTION_NEGATIVE: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show a normal themed option button.
		 */
		const BUTTON_STYLE_OPTION_NEUTRAL: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show a positive themed accept button.
		 */
		const BUTTON_STYLE_OPTION_POSITIVE: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show an unfilled rounded border button.
		 */
		const BUTTON_STYLE_OUTLINED: number;

		/**
		 * Use with [Button.style](Titanium.UI.Button.style) to show a text-only button without a background.
		 */
		const BUTTON_STYLE_TEXT: number;

		/**
		 * Specifies the time and date that you want the system to remove the clipboard items from the clipboard.
		 * Note that on macOS, setting a date in the past does not appear to invalidate items immediately, while on iOS it does.
		 */
		const CLIPBOARD_OPTION_EXPIRATION_DATE: string;

		/**
		 * Specifies that the clipboard items should not be available to other devices through Handoff.
		 */
		const CLIPBOARD_OPTION_LOCAL_ONLY: string;

		/**
		 * Displays a <Titanium.UI.Picker> using the best visual style on the current platform for date/time selection.
		 */
		const DATE_PICKER_STYLE_AUTOMATIC: number;

		/**
		 * Displays a <Titanium.UI.Picker> as a read-only text field which opens a selection dialog when tapped on.
		 */
		const DATE_PICKER_STYLE_COMPACT: number;

		/**
		 * Displays a <Titanium.UI.Picker> as a large calendar or clock view for date/time selection.
		 */
		const DATE_PICKER_STYLE_INLINE: number;

		/**
		 * Displays a <Titanium.UI.Picker> as spinner wheels for date/time selection.
		 */
		const DATE_PICKER_STYLE_WHEELS: number;

		/**
		 * Specifies that all the edges of the window can extend.
		 */
		const EXTEND_EDGE_ALL: number;

		/**
		 * Specifies that the bottom edge of the window can extend.
		 */
		const EXTEND_EDGE_BOTTOM: number;

		/**
		 * Specifies that the left edge of the window can extend.
		 */
		const EXTEND_EDGE_LEFT: number;

		/**
		 * Specifies that none of the edges of the window can extend.
		 */
		const EXTEND_EDGE_NONE: number;

		/**
		 * Specifies that the right edge of the window can extend.
		 */
		const EXTEND_EDGE_RIGHT: number;

		/**
		 * Specifies that the top edge of the window can extend.
		 */
		const EXTEND_EDGE_TOP: number;

		/**
		 * Constant value for face-down orientation.
		 */
		const FACE_DOWN: number;

		/**
		 * Constant value for face-up orientation.
		 */
		const FACE_UP: number;

		/**
		 * FILL behavior for UI layout.
		 */
		const FILL: string;

		/**
		 * Release free space when hiding an object.
		 */
		const HIDDEN_BEHAVIOR_GONE: number;

		/**
		 * Keeps free space when hiding an object.
		 */
		const HIDDEN_BEHAVIOR_INVISIBLE: number;

		/**
		 * Use when creating a TextField to specify the hintType as animated.
		 */
		const HINT_TYPE_ANIMATED: number;

		/**
		 * Use when creating a TextField to specify the hintType as static.
		 */
		const HINT_TYPE_STATIC: number;

		/**
		 * Use a bezel-style border on the input field.
		 */
		const INPUT_BORDERSTYLE_BEZEL: number;

		/**
		 * Show an enclosed border with a filled background on the input field.
		 */
		const INPUT_BORDERSTYLE_FILLED: number;

		/**
		 * Use a simple line border on the input field.
		 */
		const INPUT_BORDERSTYLE_LINE: number;

		/**
		 * Use no border on the input field.
		 */
		const INPUT_BORDERSTYLE_NONE: number;

		/**
		 * Use a rounded-rectangle border on the input field.
		 */
		const INPUT_BORDERSTYLE_ROUNDED: number;

		/**
		 * Show an underline instead of a border around the input field.
		 */
		const INPUT_BORDERSTYLE_UNDERLINED: number;

		/**
		 * Always show buttons on the input field.
		 */
		const INPUT_BUTTONMODE_ALWAYS: number;

		/**
		 * Never show buttons on the input field.
		 */
		const INPUT_BUTTONMODE_NEVER: number;

		/**
		 * Show buttons on the input field when it loses focus.
		 */
		const INPUT_BUTTONMODE_ONBLUR: number;

		/**
		 * Show buttons on the input field when it gains focus.
		 */
		const INPUT_BUTTONMODE_ONFOCUS: number;

		/**
		 * Use a keyboard with a number pad only, with the pad keyboard layout. Accepts only numbers.
		 */
		const INPUT_TYPE_CLASS_NUMBER: number;

		/**
		 * Use an ASCII keyboard, with the standard keyboard layout.
		 */
		const INPUT_TYPE_CLASS_TEXT: number;

		/**
		 * Use the platform-specific dark keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_DARK: number;

		/**
		 * Use the platform-specific default keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_DEFAULT: number;

		/**
		 * Use the platform-specific light keyboard appearance.
		 */
		const KEYBOARD_APPEARANCE_LIGHT: number;

		/**
		 * Use a keyboard supporting all characters except emoji. Defaults to English letters layout on iOS.
		 */
		const KEYBOARD_TYPE_ASCII: number;

		/**
		 * Use a number pad keyboard layout showing only numbers, decimal separator, and sign character.
		 */
		const KEYBOARD_TYPE_DECIMAL_PAD: number;

		/**
		 * Use the default keyboard, depending on the platform.
		 */
		const KEYBOARD_TYPE_DEFAULT: number;

		/**
		 * Use a keyboard suitable for composing email, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_EMAIL: number;

		/**
		 * Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_NAMEPHONE_PAD: number;

		/**
		 * Use a keyboard supporting all characters except emoji, defaulting to numbers layout on iOS.
		 */
		const KEYBOARD_TYPE_NUMBERS_PUNCTUATION: number;

		/**
		 * Use a number pad keyboard layout only showing numbers for entering positive integers.
		 */
		const KEYBOARD_TYPE_NUMBER_PAD: number;

		/**
		 * Use a keyboard with a phone-style number pad, with the pad keyboard layout.
		 */
		const KEYBOARD_TYPE_PHONE_PAD: number;

		/**
		 * Use a keyboard optimized for twitter text entry, with easy access to the @ and
		 */
		const KEYBOARD_TYPE_TWITTER: number;

		/**
		 * Use a keyboard optimized for entering URLs, with the standard keyboard layout.
		 */
		const KEYBOARD_TYPE_URL: number;

		/**
		 * Use a keyboard optimized for web search terms and URL entry.
		 */
		const KEYBOARD_TYPE_WEBSEARCH: number;

		/**
		 * Standard landscape orientation (home button on left).
		 */
		const LANDSCAPE_LEFT: number;

		/**
		 * Reverse landscape orientation (home button on right).
		 */
		const LANDSCAPE_RIGHT: number;

		/**
		 * Displays a checkmark on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_CHECKMARK: number;

		/**
		 * Displays a detail disclosure button on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_DETAIL: number;

		/**
		 * Displays a disclosure indicator on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_DISCLOSURE: number;

		/**
		 * Do not display anything on the right side of an item in a list view.
		 */
		const LIST_ACCESSORY_TYPE_NONE: number;

		/**
		 * A built-in style for an item with a right-aligned title label on the left side of the cell,
		 * which is next to a left-aligned subtitle label.
		 */
		const LIST_ITEM_TEMPLATE_CONTACTS: number;

		/**
		 * A built-in style for an item with an image view and left-aligned title label.
		 */
		const LIST_ITEM_TEMPLATE_DEFAULT: number;

		/**
		 * A built-in style for a item with an image view; a left-aligned title label; and a
		 * right-aligned subtitle label.
		 */
		const LIST_ITEM_TEMPLATE_SETTINGS: number;

		/**
		 * A built-in style for an item with an image view; a black, left-aligned title label across the
		 * top of the cell and a subtitle label below it.
		 */
		const LIST_ITEM_TEMPLATE_SUBTITLE: number;

		/**
		 * Specifies a long duration for an Android Toast notification (<Titanium.UI.Notification>).
		 */
		const NOTIFICATION_DURATION_LONG: number;

		/**
		 * Specifies a short duration for an Android Toast notification (<Titanium.UI.Notification>).
		 */
		const NOTIFICATION_DURATION_SHORT: number;

		/**
		 * Use a picker with a countdown timer appearance, showing hours and minutes.
		 */
		const PICKER_TYPE_COUNT_DOWN_TIMER: number;

		/**
		 * Use a date picker.
		 */
		const PICKER_TYPE_DATE: number;

		/**
		 * Use a date and time picker.
		 */
		const PICKER_TYPE_DATE_AND_TIME: number;

		/**
		 * Use a plain picker (for values other than date or time).
		 */
		const PICKER_TYPE_PLAIN: number;

		/**
		 * Use a time picker.
		 */
		const PICKER_TYPE_TIME: number;

		/**
		 * Orientation constant for portrait mode orientation.
		 */
		const PORTRAIT: number;

		/**
		 * Set the return key text to "Continue".
		 */
		const RETURNKEY_CONTINUE: number;

		/**
		 * Use the default return key on the virtual keyboard.
		 */
		const RETURNKEY_DEFAULT: number;

		/**
		 * Set the return key text to "Done".
		 */
		const RETURNKEY_DONE: number;

		/**
		 * Set the return key text to "Emergency Call".
		 */
		const RETURNKEY_EMERGENCY_CALL: number;

		/**
		 * Set the return key text to "Go".
		 */
		const RETURNKEY_GO: number;

		/**
		 * Set the return key text to "Google".
		 */
		const RETURNKEY_GOOGLE: number;

		/**
		 * Set the return key text to "Join".
		 */
		const RETURNKEY_JOIN: number;

		/**
		 * Set the return key text to "Next".
		 */
		const RETURNKEY_NEXT: number;

		/**
		 * Set the return key text to "Route".
		 */
		const RETURNKEY_ROUTE: number;

		/**
		 * Set the return key text to "Search".
		 */
		const RETURNKEY_SEARCH: number;

		/**
		 * Set the return key text to "Send".
		 */
		const RETURNKEY_SEND: number;

		/**
		 * Set the return key text to "Yahoo".
		 */
		const RETURNKEY_YAHOO: number;

		/**
		 * Set the selection style to system default.
		 */
		const SELECTION_STYLE_DEFAULT: number;

		/**
		 * Set the selection style to none.
		 */
		const SELECTION_STYLE_NONE: number;

		/**
		 * The value returned by <Titanium.UI.semanticColorType> when the device is in dark/night mode.
		 * @deprecated Use [USER_INTERFACE_STYLE_DARK](Titanium.UI.USER_INTERFACE_STYLE_DARK) instead.
		 */
		const SEMANTIC_COLOR_TYPE_DARK: string;

		/**
		 * The value returned by <Titanium.UI.semanticColorType> when the device is in light/normal mode.
		 * @deprecated Use [USER_INTERFACE_STYLE_LIGHT](Titanium.UI.USER_INTERFACE_STYLE_LIGHT) instead.
		 */
		const SEMANTIC_COLOR_TYPE_LIGHT: string;

		/**
		 * SIZE behavior for UI layout.
		 */
		const SIZE: string;

		/**
		 * Use with [Switch.style](Titanium.UI.Switch.style) to show a checkbox.
		 */
		const SWITCH_STYLE_CHECKBOX: number;

		/**
		 * Use with [Switch.style](Titanium.UI.Switch.style) to show a material design checkable chip widget.
		 */
		const SWITCH_STYLE_CHIP: number;

		/**
		 * Use with [Switch.style](Titanium.UI.Switch.style) to show a slidable button.
		 */
		const SWITCH_STYLE_SLIDER: number;

		/**
		 * Use with [Switch.style](Titanium.UI.Switch.style) to show a toggleable button.
		 */
		const SWITCH_STYLE_TOGGLE_BUTTON: number;

		/**
		 * The row divider is hidden.
		 */
		const TABLE_VIEW_SEPARATOR_STYLE_NONE: number;

		/**
		 * The row divider is shown as a single line.
		 */
		const TABLE_VIEW_SEPARATOR_STYLE_SINGLE_LINE: number;

		/**
		 * Center align text.
		 */
		const TEXT_ALIGNMENT_CENTER: number | string;

		/**
		 * Justify align text.
		 */
		const TEXT_ALIGNMENT_JUSTIFY: number | string;

		/**
		 * Left align text.
		 */
		const TEXT_ALIGNMENT_LEFT: number | string;

		/**
		 * Right align text.
		 */
		const TEXT_ALIGNMENT_RIGHT: number | string;

		/**
		 * Auto-capitalize all text in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_ALL: number;

		/**
		 * Do not auto-capitalize.
		 */
		const TEXT_AUTOCAPITALIZATION_NONE: number;

		/**
		 * Use sentence-style auto-capitalization in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_SENTENCES: number;

		/**
		 * Auto-capitalize the first letter of each word in the input field.
		 */
		const TEXT_AUTOCAPITALIZATION_WORDS: number;

		/**
		 * Add ellipses before the first character that doesnt fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_CHAR_WRAP: number;

		/**
		 * Lines are simply not drawn past the edge of the text container.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_CLIP: number;

		/**
		 * Add ellipses at the end of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_END: number;

		/**
		 * Turns on a marquee effect of the label if the text is too large to fit. (This requires <Titanium.UI.Label.focusable> to be true)
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_MARQUEE: number;

		/**
		 * Add ellipses in the middle of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_MIDDLE: number;

		/**
		 * Disables ellipsizing of the label. The text will be cut off if it is too long.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_NONE: number;

		/**
		 * Add ellipses at the beginning of the label if the text is too large to fit.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_START: number;

		/**
		 * Add ellipses at word boundaries, unless the word itself doesn't fit on a single line.
		 */
		const TEXT_ELLIPSIZE_TRUNCATE_WORD_WRAP: number;

		/**
		 * The font used for body texts.
		 */
		const TEXT_STYLE_BODY: string;

		/**
		 * The font used for callouts.
		 */
		const TEXT_STYLE_CALLOUT: string;

		/**
		 * The font used for standard captions.
		 */
		const TEXT_STYLE_CAPTION1: string;

		/**
		 * The font used for alternate captions.
		 */
		const TEXT_STYLE_CAPTION2: string;

		/**
		 * The font used in footnotes.
		 */
		const TEXT_STYLE_FOOTNOTE: string;

		/**
		 * The font used for headings.
		 */
		const TEXT_STYLE_HEADLINE: string;

		/**
		 * Specifies the text style for the <Font> Object.
		 */
		const TEXT_STYLE_LARGE_TITLE: string;

		/**
		 * The font used for subheadings.
		 */
		const TEXT_STYLE_SUBHEADLINE: string;

		/**
		 * The font used for first level hierarchical headings.
		 */
		const TEXT_STYLE_TITLE1: string;

		/**
		 * The font used for second level hierarchical headings.
		 */
		const TEXT_STYLE_TITLE2: string;

		/**
		 * The font used for third level hierarchical headings.
		 */
		const TEXT_STYLE_TITLE3: string;

		/**
		 * Align text to the bottom of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_BOTTOM: number | string;

		/**
		 * Vertically align text to the center of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_CENTER: number | string;

		/**
		 * Align text to the top of the view.
		 */
		const TEXT_VERTICAL_ALIGNMENT_TOP: number | string;

		/**
		 * Unit constant representing units in centimeters.
		 */
		const UNIT_CM: string;

		/**
		 * Unit constant representing units in density-independent pixels.
		 */
		const UNIT_DIP: string;

		/**
		 * Unit constant representing units in inches.
		 */
		const UNIT_IN: string;

		/**
		 * Unit constant representing units in millimeters.
		 */
		const UNIT_MM: string;

		/**
		 * Unit constant representing units in pixels.
		 */
		const UNIT_PX: string;

		/**
		 * Orientation constant representing an unknown orientation.
		 */
		const UNKNOWN: number;

		/**
		 * Orientation constant for inverted portait orientation.
		 */
		const UPSIDE_PORTRAIT: number;

		/**
		 * Authentication error code reported via <Titanium.UI.WebView.error>.
		 */
		const URL_ERROR_AUTHENTICATION: number;

		/**
		 * Bad url error code reported via <Titanium.UI.WebView.error>.
		 */
		const URL_ERROR_BAD_URL: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for a failure to connect to host.
		 */
		const URL_ERROR_CONNECT: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for a failure to access a file resource on a host, except "file not found", which has its own constant.
		 */
		const URL_ERROR_FILE: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a requested file does not exist on the host.
		 */
		const URL_ERROR_FILE_NOT_FOUND: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a host name cannot be resolved, such as via a DNS lookup error.
		 */
		const URL_ERROR_HOST_LOOKUP: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a redirect loop is detected.
		 */
		const URL_ERROR_REDIRECT_LOOP: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> for an SSL failure.
		 */
		const URL_ERROR_SSL_FAILED: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a timeout occurs.
		 */
		const URL_ERROR_TIMEOUT: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when an unknown error occurs.
		 */
		const URL_ERROR_UNKNOWN: number;

		/**
		 * Error code reported via <Titanium.UI.WebView.error> when a url contains an unsupported scheme.
		 */
		const URL_ERROR_UNSUPPORTED_SCHEME: number;

		/**
		 * A dark interface style.
		 */
		const USER_INTERFACE_STYLE_DARK: number;

		/**
		 * A light interface style.
		 */
		const USER_INTERFACE_STYLE_LIGHT: number;

		/**
		 * An unspecified interface style.
		 */
		const USER_INTERFACE_STYLE_UNSPECIFIED: number;

		/**
		 * The Android-specific UI capabilities. All properties, methods and events in this namespace will
		 * only work on Android systems.
		 * #### Drawer Layout
		 * The drawer-layout components acts as a top-level container for window content that allows
		 * for interactive "drawer" views to be pulled out from one or both vertical edges of the window.
		 * It is represented by a `centerView` and optional `leftView` and `rightView` components that
		 * can be swiped in and out with additional configuration and transitions. Learn more about
		 * drawer-layouts in it's dedicated <Titanium.UI.Android.DrawerLayout> docs.
		 */
		namespace Android {
			/**
			 * Flag allowing window to extend into the status bar and navigation bar.
			 */
			const FLAG_LAYOUT_NO_LIMITS: number;

			/**
			 * Window flag which makes the Android system's navigation bar semi-transparent.
			 */
			const FLAG_TRANSLUCENT_NAVIGATION: number;

			/**
			 * Window flag which makes the Android system's top status bar semi-transparent.
			 */
			const FLAG_TRANSLUCENT_STATUS: number;

			/**
			 * Raw bit controlling whether the right/bottom edge is clipped to its container, based on the gravity direction being applied.
			 */
			const GRAVITY_AXIS_CLIP: number;

			/**
			 * Raw bit controlling how the right/bottom edge is placed.
			 */
			const GRAVITY_AXIS_PULL_AFTER: number;

			/**
			 * Raw bit controlling how the left/top edge is placed.
			 */
			const GRAVITY_AXIS_PULL_BEFORE: number;

			/**
			 * Raw bit indicating the gravity for an axis has been specified.
			 */
			const GRAVITY_AXIS_SPECIFIED: number;

			/**
			 * Bits defining the horizontal axis.
			 */
			const GRAVITY_AXIS_X_SHIFT: number;

			/**
			 * Bits defining the vertical axis.
			 */
			const GRAVITY_AXIS_Y_SHIFT: number;

			/**
			 * Push object to the bottom of its container, not changing its size.
			 */
			const GRAVITY_BOTTOM: number;

			/**
			 * Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.
			 */
			const GRAVITY_CENTER: number;

			/**
			 * Place object in the horizontal center of its container, not changing its size.
			 */
			const GRAVITY_CENTER_HORIZONTAL: number;

			/**
			 * Place object in the vertical center of its container, not changing its size.
			 */
			const GRAVITY_CENTER_VERTICAL: number;

			/**
			 * Flag to clip the edges of the object to its container along the horizontal axis.
			 */
			const GRAVITY_CLIP_HORIZONTAL: number;

			/**
			 * Flag to clip the edges of the object to its container along the vertical axis.
			 */
			const GRAVITY_CLIP_VERTICAL: number;

			/**
			 * Special constant to enable clipping to an overall display along the horizontal dimension.
			 */
			const GRAVITY_DISPLAY_CLIP_HORIZONTAL: number;

			/**
			 * Special constant to enable clipping to an overall display along the vertical dimension.
			 */
			const GRAVITY_DISPLAY_CLIP_VERTICAL: number;

			/**
			 * Push object to x-axis position at the end of its container, not changing its size.
			 */
			const GRAVITY_END: number;

			/**
			 * Grow the horizontal and vertical size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL: number;

			/**
			 * Grow the horizontal size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL_HORIZONTAL: number;

			/**
			 * Grow the vertical size of the object if needed so it completely fills its container.
			 */
			const GRAVITY_FILL_VERTICAL: number;

			/**
			 * Binary mask to get the absolute horizontal gravity of a gravity.
			 */
			const GRAVITY_HORIZONTAL_GRAVITY_MASK: number;

			/**
			 * Push object to the left of its container, not changing its size.
			 */
			const GRAVITY_LEFT: number;

			/**
			 * Constant indicating that no gravity has been set
			 */
			const GRAVITY_NO_GRAVITY: number;

			/**
			 * Binary mask for the horizontal gravity and script specific direction bit.
			 */
			const GRAVITY_RELATIVE_HORIZONTAL_GRAVITY_MASK: number;

			/**
			 * Raw bit controlling whether the layout direction is relative or not (GRAVITY_START/GRAVITY_END instead of absolute GRAVITY_LEFT/GRAVITY_RIGHT).
			 */
			const GRAVITY_RELATIVE_LAYOUT_DIRECTION: number;

			/**
			 * Push object to the right of its container, not changing its size.
			 */
			const GRAVITY_RIGHT: number;

			/**
			 * Push object to x-axis position at the start of its container, not changing its size.
			 */
			const GRAVITY_START: number;

			/**
			 * Push object to the top of its container, not changing its size.
			 */
			const GRAVITY_TOP: number;

			/**
			 * Binary mask to get the vertical gravity of a gravity.
			 */
			const GRAVITY_VERTICAL_GRAVITY_MASK: number;

			/**
			 * Always allow a user to over-scroll this view, provided it is a view that can scroll.
			 */
			const OVER_SCROLL_ALWAYS: number;

			/**
			 * Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.
			 */
			const OVER_SCROLL_IF_CONTENT_SCROLLS: number;

			/**
			 * Never allow a user to over-scroll this view.
			 */
			const OVER_SCROLL_NEVER: number;

			/**
			 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_A_8: number;

			/**
			 * Android LA_88 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_LA_88: number;

			/**
			 * Android L_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_L_8: number;

			/**
			 * Android OPAQUE pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_OPAQUE: number;

			/**
			 * Android RGBA_4444 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_4444: number;

			/**
			 * Android RGBA_5551 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_5551: number;

			/**
			 * Android RGBA_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBA_8888: number;

			/**
			 * Android RGBX_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGBX_8888: number;

			/**
			 * Android RGB_332 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_332: number;

			/**
			 * Android RGB_565 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_565: number;

			/**
			 * Android RGB_888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_RGB_888: number;

			/**
			 * Android TRANSLUCENT pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_TRANSLUCENT: number;

			/**
			 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format can
			 * improve image clarity and performance.
			 */
			const PIXEL_FORMAT_TRANSPARENT: number;

			/**
			 * Android UNKNOWN pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
			 * can improve image clarity and performance.
			 */
			const PIXEL_FORMAT_UNKNOWN: number;

			/**
			 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
			 * activity of determinate length.
			 */
			const PROGRESS_INDICATOR_DETERMINANT: number;

			/**
			 * Display <Titanium.UI.Android.ProgressIndicator> as a modal dialog. (default)
			 */
			const PROGRESS_INDICATOR_DIALOG: number;

			/**
			 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
			 * activity of indeterminate length. (default)
			 */
			const PROGRESS_INDICATOR_INDETERMINANT: number;

			/**
			 * Display <Titanium.UI.Android.ProgressIndicator> as a horizontal progress bar in the title of
			 * the window.
			 */
			const PROGRESS_INDICATOR_STATUS_BAR: number;

			/**
			 * Pan the current heavyweight window when the input method (ie software keyboard) is shown, to
			 * ensure that its contents are not obscured.
			 */
			const SOFT_INPUT_ADJUST_PAN: number;

			/**
			 * Resize the current heavyweight window when the input method (ie software keyboard) is shown,
			 * to ensure that its contents are not obscured.
			 */
			const SOFT_INPUT_ADJUST_RESIZE: number;

			/**
			 * Use the system-default behavior to determine how the soft input area (ie software keyboard)
			 * is accomodated by the current heavyweight window when it receives focus (default.)
			 */
			const SOFT_INPUT_ADJUST_UNSPECIFIED: number;

			/**
			 * Always hide the soft input area (ie software keyboard) when the current heavyweight window
			 * receives focus.
			 */
			const SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;

			/**
			 * Always show the soft input area (ie software keyboard) when the current heavyweight window
			 * receives focus.
			 */
			const SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;

			/**
			 * Attempt to hide the soft input area (ie software keyboard) when the current heavyweight
			 * window receives focus.
			 */
			const SOFT_INPUT_STATE_HIDDEN: number;

			/**
			 * Use the system-default behavior to determine whether to show the soft input area
			 * (ie software keyboard) when the current heavyweight window receives focus.
			 */
			const SOFT_INPUT_STATE_UNSPECIFIED: number;

			/**
			 * Attempt to show the soft input area (ie software keyboard) when the current heavyweight
			 * window receives focus.
			 */
			const SOFT_INPUT_STATE_VISIBLE: number;

			/**
			 * Use Android default behavior to handle keyboard visibility when a view receives focus.
			 * (default)
			 */
			const SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;

			/**
			 * Attempt to hide the soft keyboard when a view receives focus. Note: system can override
			 * request.
			 */
			const SOFT_KEYBOARD_HIDE_ON_FOCUS: number;

			/**
			 * Attempt to show the soft keyboard when a view receives focus. Note: system can override
			 * request.
			 */
			const SOFT_KEYBOARD_SHOW_ON_FOCUS: number;

			/**
			 * Display a checkbox.
			 * @deprecated Use <Titanium.UI.SWITCH_STYLE_CHECKBOX> instead.
			 */
			const SWITCH_STYLE_CHECKBOX: number;

			/**
			 * Display a switch.
			 * @deprecated Use <Titanium.UI.SWITCH_STYLE_SLIDER> instead.
			 */
			const SWITCH_STYLE_SWITCH: number;

			/**
			 * Display a toggle button.
			 * @deprecated Use <Titanium.UI.SWITCH_STYLE_TOGGLE_BUTTON> instead.
			 */
			const SWITCH_STYLE_TOGGLEBUTTON: number;

			/**
			 * TabGroup style taking advantage of a bottom navigation controller for switching between tabs.
			 */
			const TABS_STYLE_BOTTOM_NAVIGATION: number;

			/**
			 * The default TabGroup style that places the Tabs bellow the ActionBar and above the Window content.
			 */
			const TABS_STYLE_DEFAULT: number;

			/**
			 * Captures layout bounds of target views before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_BOUNDS: number;

			/**
			 * Captures the clip bounds before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_CLIP_BOUNDS: number;

			/**
			 * Captures an ImageView's matrix before and after the scene change and animates it during the transition.
			 */
			const TRANSITION_CHANGE_IMAGE_TRANSFORM: number;

			/**
			 * Captures scale and rotation for Views before and after the scene change and animates those changes during the transition.
			 */
			const TRANSITION_CHANGE_TRANSFORM: number;

			/**
			 * Moves views in or out from the edges of the scene.
			 */
			const TRANSITION_EXPLODE: number;

			/**
			 * Fades in the views.
			 */
			const TRANSITION_FADE_IN: number;

			/**
			 * Fades out the views.
			 */
			const TRANSITION_FADE_OUT: number;

			/**
			 * Resets transition to platform default.
			 */
			const TRANSITION_NONE: number;

			/**
			 * Moves views to bottom.
			 */
			const TRANSITION_SLIDE_BOTTOM: number;

			/**
			 * Moves views to left.
			 */
			const TRANSITION_SLIDE_LEFT: number;

			/**
			 * Moves views to right.
			 */
			const TRANSITION_SLIDE_RIGHT: number;

			/**
			 * Moves views to top.
			 */
			const TRANSITION_SLIDE_TOP: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_CACHE_ONLY: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_DEFAULT: number;

			/**
			 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
			 */
			const WEBVIEW_LOAD_NO_CACHE: number;

			/**
			 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to disable plugins in a web view.
			 */
			const WEBVIEW_PLUGINS_OFF: number;

			/**
			 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to enable plugins in a web view.
			 */
			const WEBVIEW_PLUGINS_ON: number;

			/**
			 * Display a placeholder and only load plugins when user selects it.
			 */
			const WEBVIEW_PLUGINS_ON_DEMAND: number;

			/**
			 * Base event for class Titanium.UI.Android.CardView
			 */
			interface CardViewBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.Android.CardView;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface CardView_click_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface CardView_dblclick_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface CardView_doubletap_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the view element gains focus.
			 */
			interface CardView_focus_Event extends CardViewBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface CardView_keypressed_Event extends CardViewBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long click.
			 */
			interface CardView_longclick_Event extends CardViewBaseEvent {
			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface CardView_longpress_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface CardView_pinch_Event extends CardViewBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface CardView_postlayout_Event extends CardViewBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface CardView_singletap_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface CardView_swipe_Event extends CardViewBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface CardView_touchcancel_Event extends CardViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface CardView_touchend_Event extends CardViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface CardView_touchmove_Event extends CardViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface CardView_touchstart_Event extends CardViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface CardView_twofingertap_Event extends CardViewBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			interface CardViewEventMap extends ProxyEventMap {
				click: CardView_click_Event;

				dblclick: CardView_dblclick_Event;

				doubletap: CardView_doubletap_Event;

				focus: CardView_focus_Event;

				keypressed: CardView_keypressed_Event;

				longclick: CardView_longclick_Event;

				longpress: CardView_longpress_Event;

				pinch: CardView_pinch_Event;

				postlayout: CardView_postlayout_Event;

				singletap: CardView_singletap_Event;

				swipe: CardView_swipe_Event;

				touchcancel: CardView_touchcancel_Event;

				touchend: CardView_touchend_Event;

				touchmove: CardView_touchmove_Event;

				touchstart: CardView_touchstart_Event;

				twofingertap: CardView_twofingertap_Event;

			}
			/**
			 * CardView provides a layout container with rounded corners and a shadow indicating the view is elevated.
			 */
			class CardView extends Titanium.UI.View {
				/**
				 * Background color for CardView as a color name or hex triplet.
				 */
				backgroundColor: string;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: never;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: never;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: never;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: never;

				/**
				 * Corner radius for CardView.
				 */
				borderRadius: number;

				/**
				 * Elevation for CardView.
				 */
				elevation: number;

				/**
				 * Maximum Elevation for CardView.
				 */
				maxElevation: number;

				/**
				 * Inner padding between the edges of the Card and children of the CardView.
				 */
				padding: number;

				/**
				 * Inner padding between the bottom edge of the Card and children of the CardView.
				 */
				paddingBottom: number;

				/**
				 * Inner padding between the left edge of the Card and children of the CardView.
				 */
				paddingLeft: number;

				/**
				 * Inner padding between the right edge of the Card and children of the CardView.
				 */
				paddingRight: number;

				/**
				 * Inner padding between the top edge of the Card and children of the CardView.
				 */
				paddingTop: number;

				/**
				 * Add padding to CardView on API level 20 and before to prevent intersections between
				 * the Card content and rounded corners.
				 */
				preventCornerOverlap: boolean;

				/**
				 * Add padding on API level 21 and above to have the same measurements with previous versions.
				 */
				useCompatPadding: boolean;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof CardViewEventMap>(name: K, callback: (this: Titanium.UI.Android.CardView, event: CardViewEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof CardViewEventMap>(name: K, event?: CardViewEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof CardViewEventMap>(name: K, callback: (this: Titanium.UI.Android.CardView, event: CardViewEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.Android.DrawerLayout
			 */
			interface DrawerLayoutBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.Android.DrawerLayout;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface DrawerLayout_click_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface DrawerLayout_dblclick_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface DrawerLayout_doubletap_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the view element gains focus.
			 */
			interface DrawerLayout_focus_Event extends DrawerLayoutBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface DrawerLayout_keypressed_Event extends DrawerLayoutBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long click.
			 */
			interface DrawerLayout_longclick_Event extends DrawerLayoutBaseEvent {
			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface DrawerLayout_longpress_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface DrawerLayout_pinch_Event extends DrawerLayoutBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface DrawerLayout_postlayout_Event extends DrawerLayoutBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface DrawerLayout_singletap_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface DrawerLayout_swipe_Event extends DrawerLayoutBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface DrawerLayout_touchcancel_Event extends DrawerLayoutBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface DrawerLayout_touchend_Event extends DrawerLayoutBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface DrawerLayout_touchmove_Event extends DrawerLayoutBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface DrawerLayout_touchstart_Event extends DrawerLayoutBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface DrawerLayout_twofingertap_Event extends DrawerLayoutBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the drawer view is opened.
			 */
			interface DrawerLayout_open_Event extends DrawerLayoutBaseEvent {
				/**
				 * Contains the drawer frame type. Either `left` or `right`.
				 */
				drawer: string;

			}
			/**
			 * Fired when the drawer view is closed.
			 */
			interface DrawerLayout_close_Event extends DrawerLayoutBaseEvent {
				/**
				 * Contains the drawer frame type. Either `left` or `right`.
				 */
				drawer: string;

			}
			/**
			 * Fired when the motion state of the drawer view changes.
			 */
			interface DrawerLayout_change_Event extends DrawerLayoutBaseEvent {
				/**
				 * Whether or not the drawer is currently dragging.
				 */
				dragging: boolean;

				/**
				 * Contains the drawer frame type. Either `left` or `right`.
				 */
				drawer: string;

				/**
				 * Whether or not the drawer is currently idle.
				 */
				idle: boolean;

				/**
				 * Whether or not the drawer is currently settling.
				 */
				settling: boolean;

				/**
				 * The current drawer state.
				 */
				state: number;

			}
			/**
			 * Fired when the drawer view changes it's position.
			 */
			interface DrawerLayout_slide_Event extends DrawerLayoutBaseEvent {
				/**
				 * Contains the drawer frame type. Either `left` or `right`.
				 */
				drawer: string;

				/**
				 * The current drawer offset.
				 */
				offset: number;

			}
			interface DrawerLayoutEventMap extends ProxyEventMap {
				change: DrawerLayout_change_Event;

				click: DrawerLayout_click_Event;

				close: DrawerLayout_close_Event;

				dblclick: DrawerLayout_dblclick_Event;

				doubletap: DrawerLayout_doubletap_Event;

				focus: DrawerLayout_focus_Event;

				keypressed: DrawerLayout_keypressed_Event;

				longclick: DrawerLayout_longclick_Event;

				longpress: DrawerLayout_longpress_Event;

				open: DrawerLayout_open_Event;

				pinch: DrawerLayout_pinch_Event;

				postlayout: DrawerLayout_postlayout_Event;

				singletap: DrawerLayout_singletap_Event;

				slide: DrawerLayout_slide_Event;

				swipe: DrawerLayout_swipe_Event;

				touchcancel: DrawerLayout_touchcancel_Event;

				touchend: DrawerLayout_touchend_Event;

				touchmove: DrawerLayout_touchmove_Event;

				touchstart: DrawerLayout_touchstart_Event;

				twofingertap: DrawerLayout_twofingertap_Event;

			}
			/**
			 * A panel that displays the app's main navigation options on the left edge of the screen.
			 */
			class DrawerLayout extends Titanium.UI.View {
				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked closed.
				 */
				readonly LOCK_MODE_LOCKED_CLOSED: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked opened.
				 */
				readonly LOCK_MODE_LOCKED_OPEN: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is reset to default lock state.
				 */
				readonly LOCK_MODE_UNDEFINED: number;

				/**
				 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is unlocked.
				 */
				readonly LOCK_MODE_UNLOCKED: number;

				/**
				 * Get or set the center view
				 */
				centerView: Titanium.UI.View;

				/**
				 * Determine the drawer indicator status
				 */
				drawerIndicatorEnabled: boolean;

				/**
				 * Get or set the drawerLockMode
				 */
				drawerLockMode: number;

				/**
				 * Determine whether the left drawer is open
				 */
				isLeftOpen: boolean;

				/**
				 * Determine whether the left drawer is visible
				 */
				isLeftVisible: boolean;

				/**
				 * Determine whether the right drawer is open
				 */
				isRightOpen: boolean;

				/**
				 * Determine whether the right drawer is visible
				 */
				isRightVisible: boolean;

				/**
				 * Get or set lock mode for the left drawer
				 */
				leftDrawerLockMode: number;

				/**
				 * Get or set the view of the left drawer
				 */
				leftView: Titanium.UI.View;

				/**
				 * Get or set the width of the left drawer
				 */
				leftWidth: number;

				/**
				 * Get or set lock mode for the right drawer
				 */
				rightDrawerLockMode: number;

				/**
				 * Get or set the view of the right drawer
				 */
				rightView: Titanium.UI.View;

				/**
				 * Get or set the width of the right drawer
				 */
				rightWidth: number;

				/**
				 * A Toolbar instance to use as a toolbar.
				 */
				toolbar: Titanium.UI.Toolbar;

				/**
				 * Determine whether to enable the toolbar.
				 */
				toolbarEnabled: boolean;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof DrawerLayoutEventMap>(name: K, callback: (this: Titanium.UI.Android.DrawerLayout, event: DrawerLayoutEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Close the left view.
				 */
				closeLeft(): void;

				/**
				 * Close the right view.
				 */
				closeRight(): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof DrawerLayoutEventMap>(name: K, event?: DrawerLayoutEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Disallow touch events on a specific view.
				 */
				interceptTouchEvent(view: Titanium.UI.View, disallowIntercept: boolean): void;

				/**
				 * Open the left view.
				 */
				openLeft(): void;

				/**
				 * Open the right view.
				 */
				openRight(): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof DrawerLayoutEventMap>(name: K, callback: (this: Titanium.UI.Android.DrawerLayout, event: DrawerLayoutEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Toggle the visibility of the left view.
				 */
				toggleLeft(): void;

				/**
				 * Toggle the visibility of the right view.
				 */
				toggleRight(): void;

			}
			/**
			 * Base event for class Titanium.UI.Android.ProgressIndicator
			 */
			interface ProgressIndicatorBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.Android.ProgressIndicator;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface ProgressIndicator_click_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface ProgressIndicator_dblclick_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface ProgressIndicator_doubletap_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the view element gains focus.
			 */
			interface ProgressIndicator_focus_Event extends ProgressIndicatorBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface ProgressIndicator_keypressed_Event extends ProgressIndicatorBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long click.
			 */
			interface ProgressIndicator_longclick_Event extends ProgressIndicatorBaseEvent {
			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface ProgressIndicator_longpress_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface ProgressIndicator_pinch_Event extends ProgressIndicatorBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface ProgressIndicator_postlayout_Event extends ProgressIndicatorBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface ProgressIndicator_singletap_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface ProgressIndicator_swipe_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface ProgressIndicator_touchcancel_Event extends ProgressIndicatorBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface ProgressIndicator_touchend_Event extends ProgressIndicatorBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface ProgressIndicator_touchmove_Event extends ProgressIndicatorBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface ProgressIndicator_touchstart_Event extends ProgressIndicatorBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface ProgressIndicator_twofingertap_Event extends ProgressIndicatorBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the user has canceled the progress indicator dialog.
			 */
			interface ProgressIndicator_cancel_Event extends ProgressIndicatorBaseEvent {
			}
			interface ProgressIndicatorEventMap extends ProxyEventMap {
				cancel: ProgressIndicator_cancel_Event;

				click: ProgressIndicator_click_Event;

				dblclick: ProgressIndicator_dblclick_Event;

				doubletap: ProgressIndicator_doubletap_Event;

				focus: ProgressIndicator_focus_Event;

				keypressed: ProgressIndicator_keypressed_Event;

				longclick: ProgressIndicator_longclick_Event;

				longpress: ProgressIndicator_longpress_Event;

				pinch: ProgressIndicator_pinch_Event;

				postlayout: ProgressIndicator_postlayout_Event;

				singletap: ProgressIndicator_singletap_Event;

				swipe: ProgressIndicator_swipe_Event;

				touchcancel: ProgressIndicator_touchcancel_Event;

				touchend: ProgressIndicator_touchend_Event;

				touchmove: ProgressIndicator_touchmove_Event;

				touchstart: ProgressIndicator_touchstart_Event;

				twofingertap: ProgressIndicator_twofingertap_Event;

			}
			/**
			 * A progress dialog or a horizontal progress bar in the title of the window.
			 */
			class ProgressIndicator extends Titanium.UI.View {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: never;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: never;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: never;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: never;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: never;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: never;

				/**
				 * Disabled background color of the view, as a color name or hex triplet.
				 */
				backgroundDisabledColor: never;

				/**
				 * Disabled background image for the view, specified as a local file path or URL.
				 */
				backgroundDisabledImage: never;

				/**
				 * Focused background color of the view, as a color name or hex triplet.
				 */
				backgroundFocusedColor: never;

				/**
				 * Focused background image for the view, specified as a local file path or URL.
				 */
				backgroundFocusedImage: never;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: never;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: never;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: never;

				/**
				 * Selected background color of the view, as a color name or hex triplet.
				 */
				backgroundSelectedColor: never;

				/**
				 * Selected background image url for the view, specified as a local file path or URL.
				 */
				backgroundSelectedImage: never;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: never;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: never;

				/**
				 * Border width of the view.
				 */
				borderWidth: never;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: never;

				/**
				 * When `true` allows the user to cancel the progress dialog by pressing the BACK button.
				 */
				cancelable: boolean;

				/**
				 * When `cancelable` is set to `true` and this is set to `true`, the dialog is canceled when touched outside the window's bounds.
				 */
				canceledOnTouchOutside: boolean;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: never;

				/**
				 * Array of this view's child views.
				 */
				readonly children: never;

				/**
				 * Whether view should be focusable while navigating with the trackball.
				 */
				focusable: never;

				/**
				 * View height, in platform-specific units.
				 */
				height: never;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: never;

				/**
				 * Determines whether to keep the device screen on.
				 */
				keepScreenOn: never;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: never;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: never;

				/**
				 * Location for the progress indicator.
				 */
				location: number;

				/**
				 * Maximum value of the progress bar.
				 */
				max: number;

				/**
				 * Message text.
				 */
				message: string;

				/**
				 * Key identifying a string in the locale file to use for the message text.
				 */
				messageid: string;

				/**
				 * Minimum value of the progress bar.
				 */
				min: number;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: never;

				/**
				 * When on, animate call overrides current animation if applicable.
				 */
				overrideCurrentAnimation: never;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: never;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: never;

				/**
				 * The size of the view in system units.
				 */
				readonly size: never;

				/**
				 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
				 */
				softKeyboardOnFocus: never;

				/**
				 * The view's top position.
				 */
				top: never;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: never;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: never;

				/**
				 * Type for the progress indicator.
				 */
				type: number;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: never;

				/**
				 * Determines whether the view is visible.
				 */
				visible: never;

				/**
				 * View's width, in platform-specific units.
				 */
				width: never;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: never;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof ProgressIndicatorEventMap>(name: K, callback: (this: Titanium.UI.Android.ProgressIndicator, event: ProgressIndicatorEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Animates this view.
				 */
				animate: never;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof ProgressIndicatorEventMap>(name: K, event?: ProgressIndicatorEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Hides the progress indicator and stops the animation.
				 */
				hide(options?: AnimatedOptions): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove: never;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof ProgressIndicatorEventMap>(name: K, callback: (this: Titanium.UI.Android.ProgressIndicator, event: ProgressIndicatorEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Shows the progress indicator and starts the animation.
				 */
				show(options?: AnimatedOptions): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage: never;

			}
			/**
			 * Base event for class Titanium.UI.Android.SearchView
			 */
			interface SearchViewBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.Android.SearchView;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface SearchView_click_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface SearchView_dblclick_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface SearchView_doubletap_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the search view gains focus.
			 */
			interface SearchView_focus_Event extends SearchViewBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface SearchView_keypressed_Event extends SearchViewBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long click.
			 */
			interface SearchView_longclick_Event extends SearchViewBaseEvent {
			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface SearchView_longpress_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface SearchView_pinch_Event extends SearchViewBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface SearchView_postlayout_Event extends SearchViewBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface SearchView_singletap_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface SearchView_swipe_Event extends SearchViewBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface SearchView_touchcancel_Event extends SearchViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface SearchView_touchend_Event extends SearchViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface SearchView_touchmove_Event extends SearchViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface SearchView_touchstart_Event extends SearchViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface SearchView_twofingertap_Event extends SearchViewBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the search view loses focus.
			 */
			interface SearchView_blur_Event extends SearchViewBaseEvent {
			}
			/**
			 * Fired when the cancel button is pressed.
			 */
			interface SearchView_cancel_Event extends SearchViewBaseEvent {
			}
			/**
			 * Fired when the value of the search view changes.
			 */
			interface SearchView_change_Event extends SearchViewBaseEvent {
			}
			/**
			 * If the search query is not empty, fired when the search button is clicked on soft keyboard
			 */
			interface SearchView_submit_Event extends SearchViewBaseEvent {
			}
			interface SearchViewEventMap extends ProxyEventMap {
				blur: SearchView_blur_Event;

				cancel: SearchView_cancel_Event;

				change: SearchView_change_Event;

				click: SearchView_click_Event;

				dblclick: SearchView_dblclick_Event;

				doubletap: SearchView_doubletap_Event;

				focus: SearchView_focus_Event;

				keypressed: SearchView_keypressed_Event;

				longclick: SearchView_longclick_Event;

				longpress: SearchView_longpress_Event;

				pinch: SearchView_pinch_Event;

				postlayout: SearchView_postlayout_Event;

				singletap: SearchView_singletap_Event;

				submit: SearchView_submit_Event;

				swipe: SearchView_swipe_Event;

				touchcancel: SearchView_touchcancel_Event;

				touchend: SearchView_touchend_Event;

				touchmove: SearchView_touchmove_Event;

				touchstart: SearchView_touchstart_Event;

				twofingertap: SearchView_twofingertap_Event;

			}
			/**
			 * A specialized text field for entering search text.
			 */
			class SearchView extends Titanium.UI.View {
				/**
				 * Color of the text in this SearchView, as a color name or hex triplet.
				 */
				color: string;

				/**
				 * Text to show when the search view field is not focused.
				 */
				hintText: string;

				/**
				 * Color of hint text that displays when field is empty.
				 */
				hintTextColor: string;

				/**
				 * Iconifies or expands the search view
				 */
				iconified: boolean;

				/**
				 * Sets the default or resting state of the search view
				 */
				iconifiedByDefault: boolean;

				/**
				 * Whether to display the submit button when necessary or never display.
				 */
				submitEnabled: boolean;

				/**
				 * Value of the search view.
				 */
				value: string;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof SearchViewEventMap>(name: K, callback: (this: Titanium.UI.Android.SearchView, event: SearchViewEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Causes the search view to lose focus.
				 */
				blur(): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof SearchViewEventMap>(name: K, event?: SearchViewEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Causes the search view to gain focus.
				 */
				focus(): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof SearchViewEventMap>(name: K, callback: (this: Titanium.UI.Android.SearchView, event: SearchViewEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.Android.Snackbar
			 */
			interface SnackbarBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.Android.Snackbar;

			}
			/**
			 * Fired when the action button is clicked
			 */
			interface Snackbar_click_Event extends SnackbarBaseEvent {
				/**
				 * The text of the action button.
				 */
				action: string;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface Snackbar_dblclick_Event extends SnackbarBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface Snackbar_doubletap_Event extends SnackbarBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the view element gains focus.
			 */
			interface Snackbar_focus_Event extends SnackbarBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface Snackbar_keypressed_Event extends SnackbarBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long click.
			 */
			interface Snackbar_longclick_Event extends SnackbarBaseEvent {
			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface Snackbar_longpress_Event extends SnackbarBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface Snackbar_pinch_Event extends SnackbarBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface Snackbar_postlayout_Event extends SnackbarBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface Snackbar_singletap_Event extends SnackbarBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface Snackbar_swipe_Event extends SnackbarBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface Snackbar_touchcancel_Event extends SnackbarBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface Snackbar_touchend_Event extends SnackbarBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface Snackbar_touchmove_Event extends SnackbarBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface Snackbar_touchstart_Event extends SnackbarBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface Snackbar_twofingertap_Event extends SnackbarBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			interface SnackbarEventMap extends ProxyEventMap {
				click: Snackbar_click_Event;

				dblclick: Snackbar_dblclick_Event;

				doubletap: Snackbar_doubletap_Event;

				focus: Snackbar_focus_Event;

				keypressed: Snackbar_keypressed_Event;

				longclick: Snackbar_longclick_Event;

				longpress: Snackbar_longpress_Event;

				pinch: Snackbar_pinch_Event;

				postlayout: Snackbar_postlayout_Event;

				singletap: Snackbar_singletap_Event;

				swipe: Snackbar_swipe_Event;

				touchcancel: Snackbar_touchcancel_Event;

				touchend: Snackbar_touchend_Event;

				touchmove: Snackbar_touchmove_Event;

				touchstart: Snackbar_touchstart_Event;

				twofingertap: Snackbar_twofingertap_Event;

			}
			/**
			 * Snackbars provide brief messages about app processes at the bottom of the screen.
			 */
			class Snackbar extends Titanium.UI.View {
				/**
				 * Use with `length` to specify the display time.
				 */
				readonly LENGTH_INDEFINITE: number;

				/**
				 * Use with `length` to specify the display time.
				 */
				readonly LENGTH_LONG: number;

				/**
				 * Use with `length` to specify the display time.
				 */
				readonly LENGTH_SHORT: number;

				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: never;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: never;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: never;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: never;

				/**
				 * Text of the right hand action button
				 */
				action: string;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: never;

				/**
				 * Background color of the view, as a color name or hex triplet.
				 */
				backgroundColor: never;

				/**
				 * Disabled background color of the view, as a color name or hex triplet.
				 */
				backgroundDisabledColor: never;

				/**
				 * Disabled background image for the view, specified as a local file path or URL.
				 */
				backgroundDisabledImage: never;

				/**
				 * Focused background color of the view, as a color name or hex triplet.
				 */
				backgroundFocusedColor: never;

				/**
				 * Focused background image for the view, specified as a local file path or URL.
				 */
				backgroundFocusedImage: never;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: never;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: never;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: never;

				/**
				 * Selected background color of the view, as a color name or hex triplet.
				 */
				backgroundSelectedColor: never;

				/**
				 * Selected background image url for the view, specified as a local file path or URL.
				 */
				backgroundSelectedImage: never;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: never;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: never;

				/**
				 * Border width of the view.
				 */
				borderWidth: never;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: never;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: never;

				/**
				 * Array of this view's child views.
				 */
				readonly children: never;

				/**
				 * Whether view should be focusable while navigating with the trackball.
				 */
				focusable: never;

				/**
				 * View height, in platform-specific units.
				 */
				height: never;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: never;

				/**
				 * Determines whether to keep the device screen on.
				 */
				keepScreenOn: never;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: never;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: never;

				/**
				 * Display time of the Snackbar
				 */
				length: number;

				/**
				 * Text of Snackbar
				 */
				message: string;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: never;

				/**
				 * When on, animate call overrides current animation if applicable.
				 */
				overrideCurrentAnimation: never;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: never;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: never;

				/**
				 * The size of the view in system units.
				 */
				readonly size: never;

				/**
				 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
				 */
				softKeyboardOnFocus: never;

				/**
				 * The view's top position.
				 */
				top: never;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: never;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: never;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: never;

				/**
				 * Determines whether the view is visible.
				 */
				visible: never;

				/**
				 * View's width, in platform-specific units.
				 */
				width: never;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: never;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof SnackbarEventMap>(name: K, callback: (this: Titanium.UI.Android.Snackbar, event: SnackbarEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Animates this view.
				 */
				animate: never;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof SnackbarEventMap>(name: K, event?: SnackbarEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove: never;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof SnackbarEventMap>(name: K, callback: (this: Titanium.UI.Android.Snackbar, event: SnackbarEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Show the Snackbar
				 */
				show(options?: AnimatedOptions): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage: never;

			}
		}
		/**
		 * A set of constants for the position value that can be used for the `position` property of
		 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
		 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
		 */
		namespace ListViewScrollPosition {
			/**
			 * The list view scrolls the row of interest to the bottom of the visible list view.
			 */
			const BOTTOM: number;

			/**
			 * The list view scrolls the row of interest to the middle of the list table view.
			 */
			const MIDDLE: number;

			/**
			 * The table view scrolls the row of interest to be fully visible with a minimal movement.
			 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
			 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
			 */
			const NONE: number;

			/**
			 * The list view scrolls the row of interest to the top of the visible list view.
			 */
			const TOP: number;

		}
		/**
		 * A set of constants for the position value that can be used for the `position` property of
		 * <Titanium.UI.TableView> when invoking `scrollToIndex`.
		 */
		namespace TableViewScrollPosition {
			/**
			 * The table view scrolls the row of interest to the bottom of the visible table view.
			 */
			const BOTTOM: number;

			/**
			 * The table view scrolls the row of interest to the middle of the visible table view.
			 */
			const MIDDLE: number;

			/**
			 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
			 */
			const NONE: number;

			/**
			 * The table view scrolls the row of interest to the top of the visible table view.
			 */
			const TOP: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Apple iOS specific UI capabilities.  All properties, methods and events in this namespace will
		 * only work on Apple iOS devices.
		 */
		namespace iOS {
			/**
			 * Allow the navigation to continue.
			 */
			const ACTION_POLICY_ALLOW: number;

			/**
			 * Cancel the navigation.
			 */
			const ACTION_POLICY_CANCEL: number;

			/**
			 * Indicates that the system should present the alert using the
			 * critical, or caution, style.
			 */
			const ALERT_SEVERITY_CRITICAL: number;

			/**
			 * Indicates that the system should present the alert using the standard
			 * alert style.
			 */
			const ALERT_SEVERITY_DEFAULT: number;

			/**
			 * All media types require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_ALL: number;

			/**
			 * Media types containing audio require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_AUDIO: number;

			/**
			 * No media types require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_NONE: number;

			/**
			 * Media types containing video require a user gesture to begin playing.
			 */
			const AUDIOVISUAL_MEDIA_TYPE_VIDEO: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_EXTRA_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_PROMINENT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_REGULAR: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_CHROME_MATERIAL: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_CHROME_MATERIAL_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_CHROME_MATERIAL_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_MATERIAL: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_MATERIAL_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_MATERIAL_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THICK_MATERIAL: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THICK_MATERIAL_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THICK_MATERIAL_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THIN_MATERIAL: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THIN_MATERIAL_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_THIN_MATERIAL_LIGHT: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_ULTRA_THIN_MATERIAL: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_ULTRA_THIN_MATERIAL_DARK: number;

			/**
			 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
			 */
			const BLUR_EFFECT_STYLE_SYSTEM_ULTRA_THIN_MATERIAL_LIGHT: number;

			/**
			 * Specifies that the data for the URL load should be loaded from the originating source.
			 * No existing cache data should be used to satisfy a URL load request.
			 */
			const CACHE_POLICY_RELOAD_IGNORING_LOCAL_CACHE_DATA: number;

			/**
			 * Specifies that the existing cache data should be used to satisfy a request,
			 * regardless of its age or expiration date.
			 */
			const CACHE_POLICY_RETURN_CACHE_DATA_DONT_LOAD: number;

			/**
			 * Specifies that the existing cached data should be used to satisfy the request,
			 * regardless of its age or expiration date.
			 */
			const CACHE_POLICY_RETURN_CACHE_DATA_ELSE_LOAD: number;

			/**
			 * Specifies that the caching logic defined in the protocol implementation, if any,
			 * is used for a particular URL load request.
			 */
			const CACHE_POLICY_USE_PROTOCOL_CACHE_POLICY: number;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_DEFAULT: number;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_DISABLED: number;

			/**
			 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
			 */
			const CLIP_MODE_ENABLED: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with both items and
			 * boundaries.
			 */
			const COLLISION_MODE_ALL: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with
			 * boundaries only.
			 */
			const COLLISION_MODE_BOUNDARY: number;

			/**
			 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with items only.
			 */
			const COLLISION_MODE_ITEM: number;

			/**
			 * Credential should be stored only for this session.
			 */
			const CREDENTIAL_PERSISTENCE_FOR_SESSION: number;

			/**
			 * Credential should not be stored.
			 */
			const CREDENTIAL_PERSISTENCE_NONE: number;

			/**
			 * Credential should be stored in the keychain.
			 */
			const CREDENTIAL_PERSISTENCE_PERMANENT: number;

			/**
			 * Credential should be stored permanently in the keychain, and in addition should be
			 * distributed to other devices based on the owning AppleID.
			 */
			const CREDENTIAL_PERSISTENCE_SYNCHRONIZABLE: number;

			/**
			 * Use with <Titanium.UI.Picker.datePickerStyle> to automatically pick the best style
			 * available for the current platform & mode.
			 * @deprecated Use [Titanium.UI.DATE_PICKER_STYLE_AUTOMATIC](Titanium.UI.DATE_PICKER_STYLE_AUTOMATIC) instead.
			 */
			const DATE_PICKER_STYLE_AUTOMATIC: number;

			/**
			 * Use with <Titanium.UI.Picker.datePickerStyle> to show the picker with a compact style. Editing occurs in an overlay.
			 * @deprecated Use [Titanium.UI.DATE_PICKER_STYLE_COMPACT](Titanium.UI.DATE_PICKER_STYLE_COMPACT) instead.
			 */
			const DATE_PICKER_STYLE_COMPACT: number;

			/**
			 * Use with <Titanium.UI.Picker.datePickerStyle> to allow editing in place (as a calendar).
			 * @deprecated Use [Titanium.UI.DATE_PICKER_STYLE_INLINE](Titanium.UI.DATE_PICKER_STYLE_INLINE) instead.
			 */
			const DATE_PICKER_STYLE_INLINE: number;

			/**
			 * Use with <Titanium.UI.Picker.datePickerStyle> to show the picker the wheels. Editing occurs inline.
			 * @deprecated Use [Titanium.UI.DATE_PICKER_STYLE_WHEELS](Titanium.UI.DATE_PICKER_STYLE_WHEELS) instead.
			 */
			const DATE_PICKER_STYLE_WHEELS: number;

			/**
			 * The heavy impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_HEAVY: number;

			/**
			 * The light impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_LIGHT: number;

			/**
			 * The medium impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
			 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
			 */
			const FEEDBACK_GENERATOR_IMPACT_STYLE_MEDIUM: number;

			/**
			 * The error notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_ERROR: number;

			/**
			 * The success notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_SUCCESS: number;

			/**
			 * The warning notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
			 */
			const FEEDBACK_GENERATOR_NOTIFICATION_TYPE_WARNING: number;

			/**
			 * The feedback type to be used when specifying an impact in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_IMPACT: number;

			/**
			 * The feedback type to be used when specifying a received notification in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_NOTIFICATION: number;

			/**
			 * The feedback type to be used when specifying a selection in <Titanium.UI.iOS.FeedbackGenerator>.
			 */
			const FEEDBACK_GENERATOR_TYPE_SELECTION: number;

			/**
			 * Inject the script after the document finishes loading, but before other subresources finish loading.
			 */
			const INJECTION_TIME_DOCUMENT_END: number;

			/**
			 * Inject the script after the document element is created, but before any other content is loaded.
			 */
			const INJECTION_TIME_DOCUMENT_START: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_INTERACTIVE: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_NONE: number;

			/**
			 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
			 */
			const KEYBOARD_DISMISS_MODE_ON_DRAG: number;

			/**
			 * Always use a larger title when this item is top most.
			 */
			const LARGE_TITLE_DISPLAY_MODE_ALWAYS: number;

			/**
			 * Automatically use the large out-of-line title based on the state of the p
			 * revious item in the navigation bar.
			 */
			const LARGE_TITLE_DISPLAY_MODE_AUTOMATIC: number;

			/**
			 * Never use a larger title when this item is top most.
			 */
			const LARGE_TITLE_DISPLAY_MODE_NEVER: number;

			/**
			 * To indicate that the Live Photo aspect is turned off and it will
			 * be treated as a still (e.g. for sharing).
			 */
			const LIVEPHOTO_BADGE_OPTIONS_LIVE_OFF: number;

			/**
			 * Include treatments so this image can be shown directly over the content
			 * of the Live Photo.
			 */
			const LIVEPHOTO_BADGE_OPTIONS_OVER_CONTENT: number;

			/**
			 * Plays back the entire motion and sound content of the Live Photo, including transition
			 * effects at the start and end.
			 */
			const LIVEPHOTO_PLAYBACK_STYLE_FULL: number;

			/**
			 * Plays back only a brief section of the motion content of the Live Photo, without sound.
			 */
			const LIVEPHOTO_PLAYBACK_STYLE_HINT: number;

			/**
			 * An arrow that is automatically aligned.
			 */
			const MENU_POPUP_ARROW_DIRECTION_DEFAULT: number;

			/**
			 * An arrow that points downward.
			 */
			const MENU_POPUP_ARROW_DIRECTION_DOWN: number;

			/**
			 * An arrow that points toward the left.
			 */
			const MENU_POPUP_ARROW_DIRECTION_LEFT: number;

			/**
			 * An arrow that points toward the right.
			 */
			const MENU_POPUP_ARROW_DIRECTION_RIGHT: number;

			/**
			 * An arrow that points upward.
			 */
			const MENU_POPUP_ARROW_DIRECTION_UP: number;

			/**
			 * View presented with the same style as its parent window.
			 */
			let MODAL_PRESENTATION_CURRENT_CONTEXT: number;

			/**
			 * Window width and height are smaller than those of the screen and the view is centered on
			 * the screen.
			 */
			const MODAL_PRESENTATION_FORMSHEET: number;

			/**
			 * Window covers the screen.
			 */
			const MODAL_PRESENTATION_FULLSCREEN: number;

			/**
			 * View presented over its parent window.
			 */
			let MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: number;

			/**
			 * Presented view covers the screen.
			 */
			let MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: number;

			/**
			 * Window height is the height of the screen and width is equal to screen width in a portrait
			 * orientation.
			 */
			const MODAL_PRESENTATION_PAGESHEET: number;

			/**
			 * When the window is presented, its view slides up from the bottom of the screen. On dismissal,
			 * the view slides back down (default.)
			 */
			const MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;

			/**
			 * When the window is presented, the current view fades out while the new view fades in at the
			 * same time. On dismissal, a similar type of cross-fade is used to return to the original view.
			 */
			const MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;

			/**
			 * When the window is presented, the current view initiates a horizontal 3D flip from
			 * right-to-left, resulting in the revealing of the new view as if it were on the back of the
			 * previous view. On dismissal, the flip occurs from left-to-right, returning to the original
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;

			/**
			 * When the window is presented, one corner of the current view curls up to reveal the modal
			 * view underneath. On dismissal, the curled up page unfurls itself back on top of the modal
			 * view.
			 */
			const MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;

			/**
			 * The normal style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_DEFAULT: number;

			/**
			 * The destructive style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_DESTRUCTIVE: number;

			/**
			 * The selected style for preview actions.
			 */
			const PREVIEW_ACTION_STYLE_SELECTED: number;

			/**
			 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy a continuous force.
			 */
			const PUSH_MODE_CONTINUOUS: number;

			/**
			 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy an instantaneous force.
			 */
			const PUSH_MODE_INSTANTANEOUS: number;

			/**
			 * The default style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_DEFAULT: number;

			/**
			 * The destructive style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_DESTRUCTIVE: number;

			/**
			 * The normal style for <RowActionType>.
			 */
			const ROW_ACTION_STYLE_NORMAL: number;

			/**
			 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
			 */
			const SCROLL_DECELERATION_RATE_FAST: number;

			/**
			 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
			 */
			const SCROLL_DECELERATION_RATE_NORMAL: number;

			/**
			 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
			 */
			const SEARCH_BAR_STYLE_MINIMAL: number;

			/**
			 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
			 */
			const SEARCH_BAR_STYLE_PROMINENT: number;

			/**
			 * Selection endpoints can be placed at any character boundary.
			 */
			const SELECTION_GRANULARITY_CHARACTER: number;

			/**
			 * Selection granularity varies automatically depending on the selection.
			 */
			const SELECTION_GRANULARITY_DYNAMIC: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_ADD: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_ALARM: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_AUDIO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_BOOKMARK: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CAPTURE_PHOTO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CAPTURE_VIDEO: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CLOUD: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_COMPOSE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CONFIRMATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_CONTACT: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_DATE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_FAVORITE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_HOME: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_INVITATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_LOCATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_LOVE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MAIL: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MARK_LOCATION: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_MESSAGE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PAUSE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PLAY: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_PROHIBIT: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SEARCH: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SHARE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_SHUFFLE: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TASK: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TASK_COMPLETED: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_TIME: number;

			/**
			 * Number that represents the icon used for the application shortcut
			 */
			const SHORTCUT_ICON_TYPE_UPDATE: number;

			/**
			 * String that represents the magnifying glass on the table view index bar
			 */
			const TABLEVIEW_INDEX_SEARCH: string;

			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.AlertDialog>.
			 */
			namespace AlertDialogStyle {
				/**
				 * A standard alert dialog. This is the default value.
				 */
				const DEFAULT: number;

				/**
				 * An alert dialog that allows the user to enter login identifier and password.
				 */
				const LOGIN_AND_PASSWORD_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter text.
				 */
				const PLAIN_TEXT_INPUT: number;

				/**
				 * An alert dialog that allows the user to enter text. The text field is obscured.
				 */
				const SECURE_TEXT_INPUT: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the animation styles used for view transitions.
			 * One of the group of animation style constants
			 *   * [CURL_DOWN](Titanium.UI.iOS.AnimationStyle.CURL_DOWN)
			 *   * [CURL_UP](Titanium.UI.iOS.AnimationStyle.CURL_UP)
			 *   * [FLIP_FROM_LEFT](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_LEFT)
			 *   * [FLIP_FROM_RIGHT](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_RIGHT)
			 *   * [FLIP_FROM_TOP](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_TOP)
			 *   * [FLIP_FROM_BOTTOM](Titanium.UI.iOS.AnimationStyle.FLIP_FROM_BOTTOM)
			 *   * [CROSS_DISSOLVE](Titanium.UI.iOS.AnimationStyle.CROSS_DISSOLVE)
			 *   * [NONE](Titanium.UI.iOS.AnimationStyle.NONE)
			 */
			namespace AnimationStyle {
				/**
				 * A transition that dissolves from one view to the next.
				 */
				const CROSS_DISSOLVE: number;

				/**
				 * Curl downwards during a transition animation.
				 */
				const CURL_DOWN: number;

				/**
				 * Curl upwards during a transition animation.
				 */
				const CURL_UP: number;

				/**
				 * Flip from bottom to top during a transition animation.
				 */
				const FLIP_FROM_BOTTOM: number;

				/**
				 * Flip from left to right during a transition animation.
				 */
				const FLIP_FROM_LEFT: number;

				/**
				 * Flip from right to left during a transition animation.
				 */
				const FLIP_FROM_RIGHT: number;

				/**
				 * Flip from top to bottom during a transition animation.
				 */
				const FLIP_FROM_TOP: number;

				/**
				 * No animation.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of a
			 * ListItem, which is set in the `properties` dictionary of either the <ListDataItem> or
			 * <ItemTemplate>.
			 */
			namespace ListViewCellSelectionStyle {
				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				const BLUE: number;

				/**
				 * The cell when selected has a gray background.
				 */
				const GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				const NONE: number;

			}
			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
			 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
			 */
			namespace ListViewScrollPosition {
				/**
				 * The list view scrolls the row of interest to the bottom of the visible list view.
				 */
				const BOTTOM: number;

				/**
				 * The list view scrolls the row of interest to the middle of the list table view.
				 */
				const MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimal movement.
				 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
				 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				const NONE: number;

				/**
				 * The list view scrolls the row of interest to the top of the visible list view.
				 */
				const TOP: number;

			}
			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.ListView>.
			 */
			namespace ListViewStyle {
				/**
				 * A list view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				const GROUPED: number;

				/**
				 * A list view whose sections present distinct groups of rows  and grouped sections are inset with rounded corners.
				 * The section headers and footers do not float.
				 */
				const INSET_GROUPED: number;

				/**
				 * A plain list view. Any section headers or footers are displayed as inline separators and
				 * float when the list view is scrolled.
				 */
				const PLAIN: number;

			}
			/**
			 * A set of constants for the bar styles used on the `style` property of <Titanium.UI.ProgressBar>.
			 */
			namespace ProgressBarStyle {
				/**
				 * The style of progress view that is used in a toolbar.
				 */
				const BAR: number;

				/**
				 * he standard progress-view style. This is the default.
				 */
				const DEFAULT: number;

				/**
				 * The standard progress-view style. Same as `DEFAULT`.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the Animation Styles used for transition on table view rows.
			 */
			namespace RowAnimationStyle {
				/**
				 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out
				 * toward the bottom.
				 */
				const BOTTOM: number;

				/**
				 * The inserted or deleted row or rows fades into or out of the table view.
				 */
				const FADE: number;

				/**
				 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the
				 * left.
				 */
				const LEFT: number;

				/**
				 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
				 */
				const NONE: number;

				/**
				 * The inserted row or rows slides in from the right; the deleted row or rows slides out to
				 * the right.
				 */
				const RIGHT: number;

				/**
				 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward
				 * the top.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the styles available for scrollbars used with <Titanium.UI.ScrollView.scrollIndicatorStyle> and <Titanium.UI.TableView.scrollIndicatorStyle> properties.
			 */
			namespace ScrollIndicatorStyle {
				/**
				 * A style of indicator which is black smaller than the default style. This style is good
				 * against a white content background.
				 */
				const BLACK: number;

				/**
				 * The default style of scroll indicator, which is black with a white border. This style is
				 * good against any content background.
				 */
				const DEFAULT: number;

				/**
				 * A style of indicator is white and smaller than the default style. This style is good against
				 * a black content background.
				 */
				const WHITE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the status bar style.
			 */
			namespace StatusBar {
				/**
				 * Fade animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_FADE: number;

				/**
				 * No animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_NONE: number;

				/**
				 * Slide animation style, when the status bar is hidden or shown.
				 */
				const ANIMATION_STYLE_SLIDE: number;

				/**
				 * Status bar style to use with light backgrounds.
				 */
				const DARK_CONTENT: number;

				/**
				 * Default status bar style.
				 */
				const DEFAULT: number;

				/**
				 * Gray-colored status bar style.
				 * @deprecated Use [Titanium.UI.iOS.StatusBar.DEFAULT](Titanium.UI.iOS.StatusBar.DEFAULT) instead.
				 */
				const GRAY: number;

				/**
				 * Gray-colored status bar style.
				 * @deprecated Use [Titanium.UI.iOS.StatusBar.DEFAULT](Titanium.UI.iOS.StatusBar.DEFAULT) instead.
				 */
				const GREY: number;

				/**
				 * Status bar style to use with dark backgrounds.
				 */
				const LIGHT_CONTENT: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for creating standard iOS system buttons.
			 */
			namespace SystemButton {
				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Action** button.
				 */
				const ACTION: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create an activity indicator that
				 * can be used in navigation bars and toolbars.
				 */
				const ACTIVITY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Add** button.
				 */
				const ADD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Bookmarks** button.
				 */
				const BOOKMARKS: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Camera** button.
				 */
				const CAMERA: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Cancel** button.
				 */
				const CANCEL: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Compose** button.
				 */
				const COMPOSE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **ContactAdd** button.
				 */
				const CONTACT_ADD: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a **Disclosure** button.
				 */
				const DISCLOSURE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Done** button.
				 */
				const DONE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Edit** button.
				 */
				const EDIT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Fast Forward** button.
				 */
				const FAST_FORWARD: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a fixed-width blank space
				 * for spacing items in toolbars.
				 */
				const FIXED_SPACE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a flexible blank space
				 * for spacing items in toolbars.
				 */
				const FLEXIBLE_SPACE: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a dark-colored **Info** button.
				 */
				const INFO_DARK: number;

				/**
				 * Use with [Button.style](Titanium.UI.Button.style) to specify a light-colored **Info** button.
				 */
				const INFO_LIGHT: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Organize** button.
				 */
				const ORGANIZE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Pause** button.
				 */
				const PAUSE: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Play** button.
				 */
				const PLAY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Refresh** button.
				 */
				const REFRESH: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Reply** button.
				 */
				const REPLY: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Rewind** button.
				 */
				const REWIND: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Save** button.
				 */
				const SAVE: number;

				/**
				 * Identical to [ACTIVITY](Titanium.UI.iOS.SystemButton.ACTIVITY).
				 */
				const SPINNER: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Stop** button.
				 */
				const STOP: number;

				/**
				 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Trash** button.
				 */
				const TRASH: number;

			}
			/**
			 * A set of constants for the system button styles that can be used for the button `style` property.
			 */
			namespace SystemButtonStyle {
				/**
				 * A simple button style with a border.
				 * @deprecated Use the <Titanium.UI.BUTTON_STYLE_OPTION_NEUTRAL> instead.
				 */
				const BORDERED: number;

				/**
				 * The style for a **Done** button--for example, a button that completes some task and returns
				 * to the previous view.
				 * @deprecated Use the <Titanium.UI.BUTTON_STYLE_OPTION_POSITIVE> instead.
				 */
				const DONE: number;

				/**
				 * Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.
				 * @deprecated Use the <Titanium.UI.BUTTON_STYLE_OPTION_NEUTRAL> instead.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the system icon styles that can be used on a tab group tab.
			 */
			namespace SystemIcon {
				/**
				 * Bookmark style icon
				 */
				const BOOKMARKS: number;

				/**
				 * Contacts style icon
				 */
				const CONTACTS: number;

				/**
				 * Downloads style icon
				 */
				const DOWNLOADS: number;

				/**
				 * Favorites style icon
				 */
				const FAVORITES: number;

				/**
				 * Featured style icon
				 */
				const FEATURED: number;

				/**
				 * History style icon
				 */
				const HISTORY: number;

				/**
				 * More style icon
				 */
				const MORE: number;

				/**
				 * Most recent style icon
				 */
				const MOST_RECENT: number;

				/**
				 * Most viewed style icon
				 */
				const MOST_VIEWED: number;

				/**
				 * Recents style icon
				 */
				const RECENTS: number;

				/**
				 * Search style icon
				 */
				const SEARCH: number;

				/**
				 * Top rated style icon
				 */
				const TOP_RATED: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the style that can be used for the `selectionStyle` property of
			 * <Titanium.UI.TableViewRow>.
			 */
			namespace TableViewCellSelectionStyle {
				/**
				 * The cell when selected has a blue background. This is the default value.
				 */
				const BLUE: number;

				/**
				 * Then cell when selected has a gray background.
				 */
				const GRAY: number;

				/**
				 * The cell has no distinct style for when it is selected.
				 */
				const NONE: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the position value that can be used for the `position` property of
			 * <Titanium.UI.TableView> when invoking `scrollToIndex`.
			 */
			namespace TableViewScrollPosition {
				/**
				 * The table view scrolls the row of interest to the bottom of the visible table view.
				 */
				const BOTTOM: number;

				/**
				 * The table view scrolls the row of interest to the middle of the visible table view.
				 */
				const MIDDLE: number;

				/**
				 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
				 */
				const NONE: number;

				/**
				 * The table view scrolls the row of interest to the top of the visible table view.
				 */
				const TOP: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A set of constants for the style that can be used for the `style` property of
			 * <Titanium.UI.TableView> and <Titanium.UI.ListView>.
			 */
			namespace TableViewStyle {
				/**
				 * A table view whose sections present distinct groups of rows. The section headers and footers
				 * do not float.
				 */
				const GROUPED: number;

				/**
				 * A table view whose sections present distinct groups of rows  and grouped sections are inset with rounded corners.
				 * The section headers and footers do not float.
				 */
				const INSET_GROUPED: number;

				/**
				 * A plain table view. Any section headers or footers are displayed as inline separators and
				 * float when the table view is scrolled.
				 */
				const PLAIN: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				function fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Dynamic behavior to support connections between an anchor point and an item.
			 */
			class AnchorAttachmentBehavior extends Titanium.Proxy {
				/**
				 * Anchor point for the attachment behavior relative to the animator's coordinate system.
				 */
				anchor: Point;

				/**
				 * Amount of damping to apply to the attachment behavior.
				 */
				damping: number;

				/**
				 * Distance, in points, between the two attachment points.
				 */
				distance: number;

				/**
				 * Frequency of oscillation for the behavior.
				 */
				frequency: number;

				/**
				 * Item to connect to use the attachment behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Offset from the center point of the item for the attachment.
				 */
				offset: Point;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.Animator
			 */
			interface AnimatorBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.Animator;

			}
			/**
			 * Fired when the animator paused its animations.
			 */
			interface Animator_pause_Event extends AnimatorBaseEvent {
			}
			/**
			 * Fired when the animator resumes its animations.
			 */
			interface Animator_resume_Event extends AnimatorBaseEvent {
			}
			interface AnimatorEventMap extends ProxyEventMap {
				pause: Animator_pause_Event;

				resume: Animator_resume_Event;

			}
			/**
			 * Provides support for the built-in iOS dynamic animations
			 */
			class Animator extends Titanium.Proxy {
				/**
				 * Behaviors associated with this animator.
				 */
				behaviors: Titanium.Proxy[];

				/**
				 * Titanium View object to initialize as the reference view for the animator.
				 */
				referenceView: Titanium.UI.View;

				/**
				 * Returns `true` if the animator is running else `false`.
				 */
				readonly running: boolean;

				/**
				 * Adds a dynamic behavior to the animator.
				 */
				addBehavior(behavior: Titanium.Proxy): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof AnimatorEventMap>(name: K, callback: (this: Titanium.UI.iOS.Animator, event: AnimatorEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof AnimatorEventMap>(name: K, event?: AnimatorEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes all behaviors from this animator.
				 */
				removeAllBehaviors(): void;

				/**
				 * Removes the specified behavior from the animator.
				 */
				removeBehavior(behavior: Titanium.Proxy): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof AnimatorEventMap>(name: K, callback: (this: Titanium.UI.iOS.Animator, event: AnimatorEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Starts the animation behaviors.
				 */
				startAnimator(): void;

				/**
				 * Stops the animation behaviors.
				 */
				stopAnimator(): void;

				/**
				 * Updates the animator's state information with the current state of the specified item.
				 */
				updateItemUsingCurrentState(item: Titanium.UI.View): void;

			}
			/**
			 * The Home screen quick actions API is for adding shortcuts to your app icon that anticipate and accelerate a
			 * user's interaction with your app.
			 * @deprecated Use [Titanium.UI.Shortcut](Titanium.UI.Shortcut) instead.
			 */
			class ApplicationShortcuts extends Titanium.Proxy {
				/**
				 * Creates a new dynamic application shortcut item.
				 */
				addDynamicShortcut(params: ShortcutParams): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Returns true or false depending if the provided shortcut object already exists.
				 */
				dynamicShortcutExists(identifier: string): boolean;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Gets the dynamic application shortcut item identified by the `identifier`.
				 */
				getDynamicShortcut(identifier: string): ShortcutParams;

				/**
				 * Returns an array of the application shortcuts created dynamically.
				 */
				listDynamicShortcuts(): ShortcutParams[];

				/**
				 * Returns an array of the application shortcuts listed in your tiapp.xml file.
				 */
				listStaticShortcuts(): ShortcutParams[];

				/**
				 * Removes all dynamically created application shortcuts.
				 */
				removeAllDynamicShortcuts(): void;

				/**
				 * Removes the dynamic application shortcut item identified by the `identifier`.
				 */
				removeDynamicShortcut(identifier: string): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.BlurView
			 */
			interface BlurViewBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.BlurView;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface BlurView_click_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface BlurView_dblclick_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface BlurView_doubletap_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface BlurView_keypressed_Event extends BlurViewBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface BlurView_longpress_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface BlurView_pinch_Event extends BlurViewBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface BlurView_postlayout_Event extends BlurViewBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface BlurView_singletap_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface BlurView_swipe_Event extends BlurViewBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface BlurView_touchcancel_Event extends BlurViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface BlurView_touchend_Event extends BlurViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface BlurView_touchmove_Event extends BlurViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface BlurView_touchstart_Event extends BlurViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface BlurView_twofingertap_Event extends BlurViewBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			interface BlurViewEventMap extends ProxyEventMap {
				click: BlurView_click_Event;

				dblclick: BlurView_dblclick_Event;

				doubletap: BlurView_doubletap_Event;

				keypressed: BlurView_keypressed_Event;

				longpress: BlurView_longpress_Event;

				pinch: BlurView_pinch_Event;

				postlayout: BlurView_postlayout_Event;

				singletap: BlurView_singletap_Event;

				swipe: BlurView_swipe_Event;

				touchcancel: BlurView_touchcancel_Event;

				touchend: BlurView_touchend_Event;

				touchmove: BlurView_touchmove_Event;

				touchstart: BlurView_touchstart_Event;

				twofingertap: BlurView_twofingertap_Event;

			}
			/**
			 * A <Titanium.UI.iOS.BlurView> object gives you an easy way implement some complex visual effects.
			 * The blur effect is applied to every view the blur view is added to by default. You can also place the
			 * blur view above other views and all visible views layered under the blur view are blurred as well.
			 * For more information on BlurView, please refer to the official [Apple documentation](https://developer.apple.com/documentation/uikit/uivisualeffectview).
			 * Note: Apple introduced two new constants <Titanium.UI.iOS.BLUR_EFFECT_STYLE_REGULAR> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_PROMINENT> in
			 * iOS 10. These are internally mapped to <Titanium.UI.iOS.BLUR_EFFECT_STYLE_LIGHT> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_EXTRA_LIGHT>.
			 */
			class BlurView extends Titanium.UI.View {
				/**
				 * The effect you provide for the view.
				 */
				effect: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof BlurViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.BlurView, event: BlurViewEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof BlurViewEventMap>(name: K, event?: BlurViewEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof BlurViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.BlurView, event: BlurViewEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.CollisionBehavior
			 */
			interface CollisionBehaviorBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.CollisionBehavior;

			}
			/**
			 * Fired when an item collides with a boundary.
			 */
			interface CollisionBehavior_boundarycollision_Event extends CollisionBehaviorBaseEvent {
				/**
				 * Identifier of the boundary the item collided with.
				 */
				identifier: string;

				/**
				 * Item that collided with the boundary.
				 */
				item: Titanium.UI.View;

				/**
				 * Point of the collision when it started. Only returned when `start` is `true`.
				 */
				point: Point;

				/**
				 * Returns `true` if the collision started else `false`.
				 */
				start: boolean;

			}
			/**
			 * Fired when two items collide.
			 */
			interface CollisionBehavior_itemcollision_Event extends CollisionBehaviorBaseEvent {
				/**
				 * Item that collided with `item2`.
				 */
				item1: Titanium.UI.View;

				/**
				 * Item that collided with `item1`.
				 */
				item2: Titanium.UI.View;

				/**
				 * Point of the collision when it started. Only returned when `start` is `true`.
				 */
				point: Point;

				/**
				 * Returns `true` if the collision started else `false`.
				 */
				start: boolean;

			}
			interface CollisionBehaviorEventMap extends ProxyEventMap {
				boundarycollision: CollisionBehavior_boundarycollision_Event;

				itemcollision: CollisionBehavior_itemcollision_Event;

			}
			/**
			 * Dynamic behavior to support collisions between items and boundaries.
			 */
			class CollisionBehavior extends Titanium.Proxy {
				/**
				 * Boundary identfiers added to this behavior.
				 */
				readonly boundaryIdentifiers: BoundaryIdentifier[];

				/**
				 * Specifies the collision behavior.
				 */
				collisionMode: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Insets to apply when using the animator's reference view as the boundary.
				 */
				referenceInsets: Padding;

				/**
				 * Use the animator's reference view as the boundary.
				 */
				treatReferenceAsBoundary: boolean;

				/**
				 * Adds a boundary to this behavior.
				 */
				addBoundary(boundary: BoundaryIdentifier): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof CollisionBehaviorEventMap>(name: K, callback: (this: Titanium.UI.iOS.CollisionBehavior, event: CollisionBehaviorEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: Titanium.UI.View): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof CollisionBehaviorEventMap>(name: K, event?: CollisionBehaviorEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes all boundaries from this behavior.
				 */
				removeAllBoundaries(): void;

				/**
				 * Removes the specified boundary from this behavior.
				 */
				removeBoundary(boundary: BoundaryIdentifier): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof CollisionBehaviorEventMap>(name: K, callback: (this: Titanium.UI.iOS.CollisionBehavior, event: CollisionBehaviorEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: Titanium.UI.View): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.CoverFlowView
			 */
			interface CoverFlowViewBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.CoverFlowView;

			}
			/**
			 * Fired when the user clicks on the view.
			 */
			interface CoverFlowView_click_Event extends CoverFlowViewBaseEvent {
				/**
				 * Index of the image that is now visible.
				 */
				index: number;

				/**
				 * Index of the previously-visible image.
				 */
				previous: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface CoverFlowView_dblclick_Event extends CoverFlowViewBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface CoverFlowView_doubletap_Event extends CoverFlowViewBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface CoverFlowView_keypressed_Event extends CoverFlowViewBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface CoverFlowView_longpress_Event extends CoverFlowViewBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface CoverFlowView_pinch_Event extends CoverFlowViewBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface CoverFlowView_postlayout_Event extends CoverFlowViewBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface CoverFlowView_singletap_Event extends CoverFlowViewBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface CoverFlowView_swipe_Event extends CoverFlowViewBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface CoverFlowView_touchcancel_Event extends CoverFlowViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface CoverFlowView_touchend_Event extends CoverFlowViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface CoverFlowView_touchmove_Event extends CoverFlowViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface CoverFlowView_touchstart_Event extends CoverFlowViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface CoverFlowView_twofingertap_Event extends CoverFlowViewBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the user changes the image using a gesture.
			 */
			interface CoverFlowView_change_Event extends CoverFlowViewBaseEvent {
				/**
				 * Index of the image that is now visible.
				 */
				index: number;

				/**
				 * Index of the previously-visible image.
				 */
				previous: number;

			}
			interface CoverFlowViewEventMap extends ProxyEventMap {
				change: CoverFlowView_change_Event;

				click: CoverFlowView_click_Event;

				dblclick: CoverFlowView_dblclick_Event;

				doubletap: CoverFlowView_doubletap_Event;

				keypressed: CoverFlowView_keypressed_Event;

				longpress: CoverFlowView_longpress_Event;

				pinch: CoverFlowView_pinch_Event;

				postlayout: CoverFlowView_postlayout_Event;

				singletap: CoverFlowView_singletap_Event;

				swipe: CoverFlowView_swipe_Event;

				touchcancel: CoverFlowView_touchcancel_Event;

				touchend: CoverFlowView_touchend_Event;

				touchmove: CoverFlowView_touchmove_Event;

				touchstart: CoverFlowView_touchstart_Event;

				twofingertap: CoverFlowView_twofingertap_Event;

			}
			/**
			 * The cover flow view is a container showing animated three-dimensional images in a style
			 * consistent with the cover flow presentation style used for iPod, iTunes, and file browsing.
			 */
			class CoverFlowView extends Titanium.UI.View {
				/**
				 * Array of this view's child views.
				 */
				readonly children: never;

				/**
				 * Images to display in the view.
				 */
				images: string[] | Titanium.Blob[] | Titanium.Filesystem.File[] | CoverFlowImageType[];

				/**
				 * Index to make selected.
				 */
				selected: number;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof CoverFlowViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.CoverFlowView, event: CoverFlowViewEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof CoverFlowViewEventMap>(name: K, event?: CoverFlowViewEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove: never;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof CoverFlowViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.CoverFlowView, event: CoverFlowViewEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt: never;

				/**
				 * Changes the image for a specified index.
				 */
				setImage(index: number, image: string | Titanium.Blob | Titanium.Filesystem.File | CoverFlowImageType): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.DocumentViewer
			 */
			interface DocumentViewerBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.DocumentViewer;

			}
			/**
			 * Fires when the document is previewed.
			 */
			interface DocumentViewer_load_Event extends DocumentViewerBaseEvent {
			}
			/**
			 * Fires when the options menu appears before the document is previewed.
			 */
			interface DocumentViewer_menu_Event extends DocumentViewerBaseEvent {
			}
			/**
			 * Fires when the document is dismissed.
			 */
			interface DocumentViewer_unload_Event extends DocumentViewerBaseEvent {
			}
			interface DocumentViewerEventMap extends ProxyEventMap {
				load: DocumentViewer_load_Event;

				menu: DocumentViewer_menu_Event;

				unload: DocumentViewer_unload_Event;

			}
			/**
			 * A DocumentViewer provides in-app support for managing user interactions with files on the
			 * local system.
			 */
			class DocumentViewer extends Titanium.Proxy {
				/**
				 * Custom property list information for the target file.
				 */
				annotation: any;

				/**
				 * Name of the file (without the path).
				 */
				readonly name: string;

				/**
				 * URL of the document being previewed.
				 */
				url: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof DocumentViewerEventMap>(name: K, callback: (this: Titanium.UI.iOS.DocumentViewer, event: DocumentViewerEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof DocumentViewerEventMap>(name: K, event?: DocumentViewerEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Dismisses the document viewer.
				 */
				hide(options?: DocumentViewerOptions): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof DocumentViewerEventMap>(name: K, callback: (this: Titanium.UI.iOS.DocumentViewer, event: DocumentViewerEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Displays the document viewer over the current view.
				 */
				show(options?: DocumentViewerOptions): void;

			}
			/**
			 * Base dynamic configuration for an item.
			 */
			class DynamicItemBehavior extends Titanium.Proxy {
				/**
				 * Specifies if this item can rotate.
				 */
				allowsRotation: boolean;

				/**
				 * Specifies the angular resistance of this item.
				 */
				angularResistance: number;

				/**
				 * Specifies the relative mass density of this item.
				 */
				density: number;

				/**
				 * Specifies the elasticity applied to collisions for this item.
				 */
				elasticity: number;

				/**
				 * Specifies the linear resistance of the item when it slides against another item.
				 */
				friction: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the linear resistance of this item which reduces linear velocity over time.
				 */
				resistance: number;

				/**
				 * Adds a specified angular velocity for the item.
				 */
				addAngularVelocityForItem(item: Titanium.UI.View, velocity: number): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: Titanium.UI.View): void;

				/**
				 * Adds a specified linear velocity for the item.
				 */
				addLinearVelocityForItem(item: Titanium.UI.View, velocity: Point): void;

				/**
				 * Returns the angular velocity of the item.
				 */
				angularVelocityForItem(item: Titanium.UI.View): number;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Returns the linear velocity of the item.
				 */
				linearVelocityForItem(item: Titanium.UI.View): Point;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: Titanium.UI.View): void;

			}
			/**
			 * The feedback generator API is introduced in iOS 10 to handle the haptic feedback when using an iPhone 7 or
			 * later devices.
			 */
			class FeedbackGenerator extends Titanium.Proxy {
				/**
				 * The style of the feedback generator you want to create. This property is only required when using <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
				 */
				style?: number;

				/**
				 * The type of feedback generator you want to create.
				 */
				type: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Used to trigger a haptic feedback after an impact occurred.
				 */
				impactOccurred(): void;

				/**
				 * Used to trigger a haptic feedback after a notification has been received.
				 */
				notificationOccurred(notificationType: number): void;

				/**
				 * Used to prepare the haptic sensor for the upcoming interaction with it.
				 */
				prepare(): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Used to trigger a haptic feedback after a selection has been made.
				 */
				selectionChanged(): void;

			}
			/**
			 * Gravitational force to apply to an item.
			 */
			class GravityBehavior extends Titanium.Proxy {
				/**
				 * Specifies the angle of the gravity vector in radians.
				 */
				angle: number;

				/**
				 * Specifies the direction of the gravity vector as an x, y pair.
				 */
				gravityDirection: Point;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the magnitude of the gravity vector.
				 */
				magnitude: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: Titanium.UI.View): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: Titanium.UI.View): void;

			}
			/**
			 * Abstract object representing a live photo used in <Titanium.UI.iOS.LivePhotoView>.
			 */
			class LivePhoto extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.LivePhotoView
			 */
			interface LivePhotoViewBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.LivePhotoView;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface LivePhotoView_click_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface LivePhotoView_dblclick_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface LivePhotoView_doubletap_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface LivePhotoView_keypressed_Event extends LivePhotoViewBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface LivePhotoView_longpress_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface LivePhotoView_pinch_Event extends LivePhotoViewBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface LivePhotoView_postlayout_Event extends LivePhotoViewBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface LivePhotoView_singletap_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface LivePhotoView_swipe_Event extends LivePhotoViewBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface LivePhotoView_touchcancel_Event extends LivePhotoViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface LivePhotoView_touchend_Event extends LivePhotoViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface LivePhotoView_touchmove_Event extends LivePhotoViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface LivePhotoView_touchstart_Event extends LivePhotoViewBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface LivePhotoView_twofingertap_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the Live Photo playback starts.
			 */
			interface LivePhotoView_start_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns the `playbackStyle` that was provided to start the playback.
				 */
				playbackStyle: number;

			}
			/**
			 * Fired when the Live Photo playback stops.
			 */
			interface LivePhotoView_stop_Event extends LivePhotoViewBaseEvent {
				/**
				 * Returns the `playbackStyle` that was provided to start the playback.
				 */
				playbackStyle: number;

			}
			interface LivePhotoViewEventMap extends ProxyEventMap {
				click: LivePhotoView_click_Event;

				dblclick: LivePhotoView_dblclick_Event;

				doubletap: LivePhotoView_doubletap_Event;

				keypressed: LivePhotoView_keypressed_Event;

				longpress: LivePhotoView_longpress_Event;

				pinch: LivePhotoView_pinch_Event;

				postlayout: LivePhotoView_postlayout_Event;

				singletap: LivePhotoView_singletap_Event;

				start: LivePhotoView_start_Event;

				stop: LivePhotoView_stop_Event;

				swipe: LivePhotoView_swipe_Event;

				touchcancel: LivePhotoView_touchcancel_Event;

				touchend: LivePhotoView_touchend_Event;

				touchmove: LivePhotoView_touchmove_Event;

				touchstart: LivePhotoView_touchstart_Event;

				twofingertap: LivePhotoView_twofingertap_Event;

			}
			/**
			 * A view to display a <Titanium.UI.iOS.LivePhoto> object introduced in iOS 9.1.
			 */
			class LivePhotoView extends Titanium.UI.View {
				/**
				 * The Live Photo displayed in the view.
				 */
				livePhoto: Titanium.UI.iOS.LivePhoto;

				/**
				 * A Boolean value that determines whether the view plays the audio content of its Live Photo.
				 */
				muted: boolean;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof LivePhotoViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.LivePhotoView, event: LivePhotoViewEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof LivePhotoViewEventMap>(name: K, event?: LivePhotoViewEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof LivePhotoViewEventMap>(name: K, callback: (this: Titanium.UI.iOS.LivePhotoView, event: LivePhotoViewEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Begins playback of Live Photo content in the view.
				 */
				startPlaybackWithStyle(playbackStyle: number): void;

				/**
				 * Ends playback of Live Photo content in the view.
				 */
				stopPlayback(): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.MenuPopup
			 */
			interface MenuPopupBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.MenuPopup;

			}
			/**
			 * Fired when the user clicks at one of the menu popup items.
			 */
			interface MenuPopup_click_Event extends MenuPopupBaseEvent {
				/**
				 * The index of the clicked item.
				 */
				index: number;

				/**
				 * The title of the clicked item.
				 */
				title: string;

			}
			interface MenuPopupEventMap extends ProxyEventMap {
				click: MenuPopup_click_Event;

			}
			/**
			 * A menu popup provides the ability to create custom tooltip options using the `items` property
			 * covering the native `UIMenuController` class.
			 * See also:
			 * * [iOS Developer Library: UIMenuController](https://developer.apple.com/documentation/uikit/uimenucontroller)
			 */
			class MenuPopup extends Titanium.Proxy {
				/**
				 * The items of the menu popup.
				 */
				items: string[];

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof MenuPopupEventMap>(name: K, callback: (this: Titanium.UI.iOS.MenuPopup, event: MenuPopupEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof MenuPopupEventMap>(name: K, event?: MenuPopupEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Hides the menu popup.
				 */
				hide(options?: AnimatedOptions): void;

				/**
				 * Indicates whether the menu popup is currently visible.
				 */
				isVisible(): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof MenuPopupEventMap>(name: K, callback: (this: Titanium.UI.iOS.MenuPopup, event: MenuPopupEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Shows the menu popup.
				 */
				show(options: MenuPopupShowParams): void;

			}
			/**
			 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
			 * content.
			 * @deprecated Use [Titanium.UI.NavigationWindow](Titanium.UI.NavigationWindow) instead.
			 */
			const NavigationWindow: never;
			/**
			 * Base event for class Titanium.UI.iOS.PreviewAction
			 */
			interface PreviewActionBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.PreviewAction;

			}
			/**
			 * Fired when the device detects a click against a preview action.
			 */
			interface PreviewAction_click_Event extends PreviewActionBaseEvent {
				/**
				 * The index of the clicked action.
				 */
				index: number;

				/**
				 * The item ID of cell, if the `previewContext` property of the <Titanium.UI.iOS.PreviewContext>
				 * is a <Titanium.UI.ListView>.
				 */
				itemId: string;

				/**
				 * The index of the clicked row, if the `previewContext` property of the <Titanium.UI.iOS.PreviewContext>
				 * is a <Titanium.UI.ListView>.
				 */
				itemIndex: number;

				/**
				 * The index of the clicked section, if the `previewContext` property of the <Titanium.UI.iOS.PreviewContext>
				 * is a <Titanium.UI.ListView>.
				 */
				sectionIndex: number;

			}
			interface PreviewActionEventMap extends ProxyEventMap {
				click: PreviewAction_click_Event;

			}
			/**
			 * A PreviewAction provides options to configure actions used by the iOS 9 3D-Touch "Peek and Pop"
			 * feature.
			 */
			class PreviewAction extends Titanium.Proxy {
				/**
				 * The style of the action.
				 */
				style: number;

				/**
				 * The title of the action.
				 */
				title: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof PreviewActionEventMap>(name: K, callback: (this: Titanium.UI.iOS.PreviewAction, event: PreviewActionEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof PreviewActionEventMap>(name: K, event?: PreviewActionEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof PreviewActionEventMap>(name: K, callback: (this: Titanium.UI.iOS.PreviewAction, event: PreviewActionEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A PreviewActionGroup provides options to configure a group of actions used by the iOS9 3D-Touch
			 * feature "Peek and Pop".
			 */
			class PreviewActionGroup extends Titanium.Proxy {
				/**
				 * The preview actions assigned to this preview action group.
				 */
				actions: Titanium.UI.iOS.PreviewAction[];

				/**
				 * The style of the action group.
				 */
				style: number;

				/**
				 * The title of the action group.
				 */
				title: string;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.PreviewContext
			 */
			interface PreviewContextBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.PreviewContext;

			}
			/**
			 * Fired when the user peeks the preview. You can configure the preview
			 */
			interface PreviewContext_peek_Event extends PreviewContextBaseEvent {
				/**
				 * The item ID bound to the list item that generated the event.
				 */
				itemId: string;

				/**
				 * The item index of the ListView to identify the selected item.
				 * Note: This property is only available if the preview context is assigned to a <Titanium.UI.ListView>.
				 */
				itemIndex: number;

				/**
				 * The view to be previewed.
				 */
				preview: Titanium.UI.View;

				/**
				 * The section index of the ListView to identify the selected section.
				 * Note: This property is only available if the preview context is assigned to a <Titanium.UI.ListView>.
				 */
				sectionIndex: number;

			}
			/**
			 * Fired when the user pop the preview. You will most likely open a fullscreen window here.
			 */
			interface PreviewContext_pop_Event extends PreviewContextBaseEvent {
				/**
				 * The item ID bound to the list item that generated the event.
				 */
				itemId: string;

				/**
				 * The item index of the ListView to identify the selected item.
				 * Note: This property is only available if the preview context is assigned to a <Titanium.UI.ListView>.
				 */
				itemIndex: number;

				/**
				 * The view to be previewed.
				 */
				preview: Titanium.UI.View;

				/**
				 * The section index of the ListView to identify the selected section.
				 * Note: This property is only available if the preview context is assigned to a <Titanium.UI.ListView>.
				 */
				sectionIndex: number;

			}
			interface PreviewContextEventMap extends ProxyEventMap {
				peek: PreviewContext_peek_Event;

				pop: PreviewContext_pop_Event;

			}
			/**
			 * A PreviewContext provides options to configure the iOS 9 3D-Touch "Peek and Pop" feature.
			 */
			class PreviewContext extends Titanium.Proxy {
				/**
				 * The preview actions and preview action groups.
				 */
				actions: Titanium.UI.iOS.PreviewAction[];

				/**
				 * The height of the preview.
				 */
				contentHeight: number;

				/**
				 * The preview view.
				 */
				preview: Titanium.UI.View;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof PreviewContextEventMap>(name: K, callback: (this: Titanium.UI.iOS.PreviewContext, event: PreviewContextEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof PreviewContextEventMap>(name: K, event?: PreviewContextEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof PreviewContextEventMap>(name: K, callback: (this: Titanium.UI.iOS.PreviewContext, event: PreviewContextEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Continuous or instantaneous force to apply to an item.
			 */
			class PushBehavior extends Titanium.Proxy {
				/**
				 * State of the push behavior's force.
				 */
				active: boolean;

				/**
				 * Specifies the angle of the force vector in radians.
				 */
				angle: number;

				/**
				 * Items added to this behavior.
				 */
				readonly items: Titanium.UI.View[];

				/**
				 * Specifies the magnitude of the force vector.
				 */
				magnitude: number;

				/**
				 * Specifies the direction of the force vector as an x, y pair.
				 */
				pushDirection: Point;

				/**
				 * Specifies the push mode.
				 */
				pushMode: number;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Adds an item to this behavior.
				 */
				addItem(item: Titanium.UI.View): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Removes the specified item from this behavior.
				 */
				removeItem(item: Titanium.UI.View): void;

			}
			/**
			 * Dynamic behavior defining an item's movement to a specific point.
			 */
			class SnapBehavior extends Titanium.Proxy {
				/**
				 * Specifies the amount of oscillation during the conclusion of the snap.
				 */
				damping: number;

				/**
				 * Item to add to this behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Specifies the point to snap to.
				 */
				snapPoint: Point;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Base event for class Titanium.UI.iOS.SplitWindow
			 */
			interface SplitWindowBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.SplitWindow;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface SplitWindow_click_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface SplitWindow_dblclick_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface SplitWindow_doubletap_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the window gains focus.
			 */
			interface SplitWindow_focus_Event extends SplitWindowBaseEvent {
			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface SplitWindow_keypressed_Event extends SplitWindowBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface SplitWindow_longpress_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface SplitWindow_pinch_Event extends SplitWindowBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface SplitWindow_postlayout_Event extends SplitWindowBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface SplitWindow_singletap_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface SplitWindow_swipe_Event extends SplitWindowBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface SplitWindow_touchcancel_Event extends SplitWindowBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface SplitWindow_touchend_Event extends SplitWindowBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface SplitWindow_touchmove_Event extends SplitWindowBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface SplitWindow_touchstart_Event extends SplitWindowBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface SplitWindow_twofingertap_Event extends SplitWindowBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the window loses focus.
			 */
			interface SplitWindow_blur_Event extends SplitWindowBaseEvent {
			}
			/**
			 * Fired when the window is closed.
			 */
			interface SplitWindow_close_Event extends SplitWindowBaseEvent {
			}
			/**
			 * Fired when the window is opened.
			 */
			interface SplitWindow_open_Event extends SplitWindowBaseEvent {
			}
			interface SplitWindowEventMap extends ProxyEventMap {
				blur: SplitWindow_blur_Event;

				click: SplitWindow_click_Event;

				close: SplitWindow_close_Event;

				dblclick: SplitWindow_dblclick_Event;

				doubletap: SplitWindow_doubletap_Event;

				focus: SplitWindow_focus_Event;

				keypressed: SplitWindow_keypressed_Event;

				longpress: SplitWindow_longpress_Event;

				open: SplitWindow_open_Event;

				pinch: SplitWindow_pinch_Event;

				postlayout: SplitWindow_postlayout_Event;

				singletap: SplitWindow_singletap_Event;

				swipe: SplitWindow_swipe_Event;

				touchcancel: SplitWindow_touchcancel_Event;

				touchend: SplitWindow_touchend_Event;

				touchmove: SplitWindow_touchmove_Event;

				touchstart: SplitWindow_touchstart_Event;

				twofingertap: SplitWindow_twofingertap_Event;

			}
			/**
			 * A SplitWindow is a window that manages the presentation of two side-by-side view
			 * controllers.
			 */
			class SplitWindow extends Titanium.UI.Window {
				/**
				 * Window for the detail view section of the SplitWindow.
				 */
				detailView: Titanium.UI.Window;

				/**
				 * Determines the width of the `masterView` in landscape mode.
				 */
				landscapeSplit: number;

				/**
				 * Determines whether to show the master view is overlayed in portrait orientation.
				 */
				masterIsOverlayed: boolean;

				/**
				 * Window for the master view section of the SplitWindow.
				 */
				masterView: Titanium.UI.Window;

				/**
				 * Determines whether to show the master view or hide.
				 */
				masterViewVisible: boolean;

				/**
				 * Determines the width of the `masterView` in portrait mode.
				 */
				portraitSplit: number;

				/**
				 * Determines whether to show the master view in portrait orientation.
				 */
				showMasterInPortrait: boolean;

				/**
				 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
				 */
				swipeToClose: never;

				/**
				 * Use a transition animation when opening or closing windows in a
				 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
				 */
				transitionAnimation: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof SplitWindowEventMap>(name: K, callback: (this: Titanium.UI.iOS.SplitWindow, event: SplitWindowEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof SplitWindowEventMap>(name: K, event?: SplitWindowEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof SplitWindowEventMap>(name: K, callback: (this: Titanium.UI.iOS.SplitWindow, event: SplitWindowEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Sets the value of the [masterIsOverlayed](Titanium.UI.iOS.SplitWindow.masterIsOverlayed) property.
				 */
				setMasterIsOverlayed(masterIsOverlayed: boolean, options?: AnimatedOptions): void;

				/**
				 * Sets the value of the [showMasterInPortrait](Titanium.UI.iOS.SplitWindow.showMasterInPortrait) property.
				 */
				setShowMasterInPortrait(showMasterInPortrait: boolean, options?: AnimatedOptions): void;

				/**
				 * Sets the array of items to show in the window's toolbar.
				 */
				setToolbar: never;

			}
			/**
			 * Base event for class Titanium.UI.iOS.Stepper
			 */
			interface StepperBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iOS.Stepper;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface Stepper_click_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface Stepper_dblclick_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface Stepper_doubletap_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface Stepper_keypressed_Event extends StepperBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface Stepper_longpress_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface Stepper_pinch_Event extends StepperBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface Stepper_postlayout_Event extends StepperBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface Stepper_singletap_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface Stepper_swipe_Event extends StepperBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface Stepper_touchcancel_Event extends StepperBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface Stepper_touchend_Event extends StepperBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface Stepper_touchmove_Event extends StepperBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface Stepper_touchstart_Event extends StepperBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface Stepper_twofingertap_Event extends StepperBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired every time the stepper value changes.
			 */
			interface Stepper_change_Event extends StepperBaseEvent {
				/**
				 * The maximum value of the stepper.
				 */
				maximum: number;

				/**
				 * The minimum value of the stepper.
				 */
				minimum: number;

				/**
				 * The current value of the stepper.
				 */
				value: number;

			}
			interface StepperEventMap extends ProxyEventMap {
				change: Stepper_change_Event;

				click: Stepper_click_Event;

				dblclick: Stepper_dblclick_Event;

				doubletap: Stepper_doubletap_Event;

				keypressed: Stepper_keypressed_Event;

				longpress: Stepper_longpress_Event;

				pinch: Stepper_pinch_Event;

				postlayout: Stepper_postlayout_Event;

				singletap: Stepper_singletap_Event;

				swipe: Stepper_swipe_Event;

				touchcancel: Stepper_touchcancel_Event;

				touchend: Stepper_touchend_Event;

				touchmove: Stepper_touchmove_Event;

				touchstart: Stepper_touchstart_Event;

				twofingertap: Stepper_twofingertap_Event;

			}
			/**
			 * A widget used to increment and decrement a value.
			 */
			class Stepper extends Titanium.UI.View {
				/**
				 * If YES, the user pressing and holding on the stepper repeatedly alters value.
				 * The default value is YES.
				 */
				autorepeat: boolean;

				/**
				 * Background image for the stepper in its normal state, specified as a local file path or URL.
				 */
				backgroundImage: string;

				/**
				 * Array of this view's child views.
				 */
				readonly children: never;

				/**
				 * If YES, value change events are sent immediately when the value changes during user interaction.
				 * If NO, a value change event is sent when user interaction ends.
				 * The default value is YES.
				 */
				continuous: boolean;

				/**
				 * Background image for the stepper decrement button in its disabled state, specified as a local
				 * file path or URL. The decrement button enters a disabled state ones the value is equal to the
				 * minimumValue , setting the enabled property to false will have no effect to decrement button state.
				 */
				decrementDisabledImage: string;

				/**
				 * Background image for the stepper decrement button in its normal state, specified as a local
				 * file path or URL.
				 */
				decrementImage: string;

				/**
				 * Determines if the stepper is enabled or disabled.
				 */
				enabled: boolean;

				/**
				 * Background image for the stepper increment button in its disabled state, specified as a local
				 * file path or URL.The increment button enters a disabled state ones the value is equal to the
				 * maximumValue , setting the enabled property to false will have no effect to increment button state.
				 */
				incrementDisabledImage: string;

				/**
				 * Background image for the stepper increment button in its normal state, specified as a local
				 * file path or URL.
				 */
				incrementImage: string;

				/**
				 * The maximum value the stepper will be set to, the value must be greater than the minimum value.
				 * If you attempt to set a value equal to or lower than minimum, the system will default the
				 * value to 100.
				 */
				maximum: number;

				/**
				 * The minimum value the stepper will be set to, the value must be smaller than the maximum value.
				 * If you attempt to set a value equal to or greater than maximum, the system will default the
				 * value to 0.
				 */
				minimum: number;

				/**
				 * The value the stepper will increment and decrement by, default value for this property is 1. When setting
				 * a new value, it must be greater than 1.
				 */
				steps: number;

				/**
				 * Sets the color for the widget, any backgroundImages added will be set to the same color.
				 */
				tintColor: string | Titanium.UI.Color;

				/**
				 * The current value of the stepper.
				 */
				value: number;

				/**
				 * If YES, incrementing beyond <Titanium.UI.iOS.Stepper.maximum> sets value to <Titanium.UI.iOS.Stepper.minimum>. likewise, decrementing below
				 * <Titanium.UI.iOS.Stepper.minimum> sets value to <Titanium.UI.iOS.Stepper.maximum>. If NO, the stepper does not increment beyond <Titanium.UI.iOS.Stepper.maximum> nor
				 * does it decrement below <Titanium.UI.iOS.Stepper.minimum> but rather holds at those values.
				 * The default value is NO.
				 */
				wraps: boolean;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof StepperEventMap>(name: K, callback: (this: Titanium.UI.iOS.Stepper, event: StepperEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof StepperEventMap>(name: K, event?: StepperEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove: never;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof StepperEventMap>(name: K, callback: (this: Titanium.UI.iOS.Stepper, event: StepperEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt: never;

			}
			/**
			 * A set of constants for creating standard iOS system buttons.
			 */
			class SystemButton extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A button bar that maintains a selected state.
			 * @deprecated Use [Titanium.UI.TabbedBar](Titanium.UI.TabbedBar) instead.
			 */
			const TabbedBar: never;
			/**
			 * An iOS toolbar, which can contain buttons and certain other controls.
			 * @deprecated Use the cross-platform [Titanium.UI.Toolbar](Titanium.UI.Toolbar) instead.
			 */
			const Toolbar: never;
			/**
			 * A transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 * Use this proxy with the Window's
			 * [transitionAnimation](Titanium.UI.Window.transitionAnimation) property.
			 */
			class TransitionAnimation extends Titanium.Proxy {
				/**
				 * Length of the transition in milliseconds.
				 */
				duration: number;

				/**
				 * Animation to hide the current window.
				 */
				transitionFrom: Titanium.UI.Animation;

				/**
				 * Animation to show the new window.
				 */
				transitionTo: Titanium.UI.Animation;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * Dynamic behavior to support connections between two items.
			 */
			class ViewAttachmentBehavior extends Titanium.Proxy {
				/**
				 * Item to use as the anchor in this behavior.
				 */
				anchorItem: Titanium.UI.View;

				/**
				 * Offset from the center point of the anchor item for the attachment.
				 */
				anchorOffset: Point;

				/**
				 * Amount of damping to apply to the attachment behavior.
				 */
				damping: number;

				/**
				 * Distance, in points, between the two attachment points.
				 */
				distance: number;

				/**
				 * Frequency of oscillation for the behavior.
				 */
				frequency: number;

				/**
				 * Item to connect to use the attachment behavior.
				 */
				item: Titanium.UI.View;

				/**
				 * Offset from the center point of the item for the attachment.
				 */
				itemOffset: Point;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * A collection of properties used to initialize a web view.
			 */
			class WebViewConfiguration extends Titanium.Proxy {
				/**
				 * A Boolean value indicating whether AirPlay is allowed.
				 */
				allowsAirPlayMediaPlayback: boolean;

				/**
				 * A Boolean value indicating whether HTML5 videos play inline or use the native full-screen controller.
				 */
				allowsInlineMediaPlayback: boolean;

				/**
				 * A Boolean value indicating whether HTML5 videos can play picture-in-picture.
				 */
				allowsPictureInPictureMediaPlayback: boolean;

				/**
				 * Determines which media types require a user gesture to begin playing.
				 */
				mediaTypesRequiringUserActionForPlayback: number;

				/**
				 * The preference settings to be used by the web view.
				 */
				preferences: WebViewPreferencesObject;

				/**
				 * The process pool from which to obtain the  Web Content process of view.
				 */
				processPool: Titanium.UI.iOS.WebViewProcessPool;

				/**
				 * The level of granularity with which the user can interactively select content in the web view.
				 */
				selectionGranularity: number;

				/**
				 * A Boolean value indicating whether the web view suppresses content rendering until it is fully
				 * loaded into memory.
				 */
				suppressesIncrementalRendering: boolean;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * It represents the decision handler to tell to webview, whether allow or cancel the navigation.
			 */
			class WebViewDecisionHandler extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * It calls the decision handler with given action policy.
				 */
				invoke(value: number): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
			/**
			 * It represents a pool of Web Content processes.
			 */
			class WebViewProcessPool extends Titanium.Proxy {
				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			}
		}
		/**
		 * iPad specific UI capabilities.
		 */
		namespace iPad {
			/**
			 * An arrow that points in any direction.
			 */
			const POPOVER_ARROW_DIRECTION_ANY: number;

			/**
			 * An arrow that points downward.
			 */
			const POPOVER_ARROW_DIRECTION_DOWN: number;

			/**
			 * An arrow that points toward the left.
			 */
			const POPOVER_ARROW_DIRECTION_LEFT: number;

			/**
			 * An arrow that points toward the right.
			 */
			const POPOVER_ARROW_DIRECTION_RIGHT: number;

			/**
			 * The status of the arrow is currently unknown.
			 */
			const POPOVER_ARROW_DIRECTION_UNKNOWN: number;

			/**
			 * An arrow that points upward.
			 */
			const POPOVER_ARROW_DIRECTION_UP: number;

			/**
			 * Base event for class Titanium.UI.iPad.Popover
			 */
			interface PopoverBaseEvent extends Ti.Event {
				/**
				 * Source object that fired the event.
				 */
				source: Titanium.UI.iPad.Popover;

			}
			/**
			 * Fired when the device detects a click against the view.
			 */
			interface Popover_click_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double click against the view.
			 */
			interface Popover_dblclick_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the double click passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a double tap against the view.
			 */
			interface Popover_doubletap_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a hardware key is pressed in the view.
			 */
			interface Popover_keypressed_Event extends PopoverBaseEvent {
				/**
				 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
				 */
				keyCode: number;

			}
			/**
			 * Fired when the device detects a long press.
			 */
			interface Popover_longpress_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the long press passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a pinch gesture.
			 */
			interface Popover_pinch_Event extends PopoverBaseEvent {
				/**
				 * The average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpan: number;

				/**
				 * The average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanX: number;

				/**
				 * The average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				currentSpanY: number;

				/**
				 * The X coordinate of the current gesture's focal point.
				 */
				focusX: number;

				/**
				 * The Y coordinate of the current gesture's focal point.
				 */
				focusY: number;

				/**
				 * Returns `true` if a scale gesture is in progress, `false` otherwise.
				 */
				inProgress: boolean;

				/**
				 * The previous average distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpan: number;

				/**
				 * The previous average X distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanX: number;

				/**
				 * The previous average Y distance between each of the pointers forming the gesture in progress through
				 * the focal point.
				 */
				previousSpanY: number;

				/**
				 * The scale factor relative to the points of the two touches in screen coordinates.
				 */
				scale: number;

				/**
				 * The event time of the current event being processed.
				 */
				time: number;

				/**
				 * The time difference in milliseconds between the previous accepted scaling event and the
				 * current scaling event.
				 */
				timeDelta: number;

				/**
				 * The velocity of the pinch in scale factor per second.
				 */
				velocity: number;

			}
			/**
			 * Fired when a layout cycle is finished.
			 */
			interface Popover_postlayout_Event extends PopoverBaseEvent {
			}
			/**
			 * Fired when the device detects a single tap against the view.
			 */
			interface Popover_singletap_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a swipe gesture against the view.
			 */
			interface Popover_swipe_Event extends PopoverBaseEvent {
				/**
				 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
				 */
				direction: string;

				/**
				 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is interrupted by the device.
			 */
			interface Popover_touchcancel_Event extends PopoverBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when a touch event is completed.
			 */
			interface Popover_touchend_Event extends PopoverBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects movement of a touch.
			 */
			interface Popover_touchmove_Event extends PopoverBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired as soon as the device detects a touch gesture.
			 */
			interface Popover_touchstart_Event extends PopoverBaseEvent {
				/**
				 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
				 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
				 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
				 */
				altitudeAngle: number;

				/**
				 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewX: number;

				/**
				 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
				 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
				 */
				azimuthUnitVectorInViewY: number;

				/**
				 * The current force value of the touch event.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
				 */
				force: number;

				/**
				 * Maximum possible value of the force property.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				maximumPossibleForce: number;

				/**
				 * Returns `true` if the touch passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * The current size of the touch area. Note: This property is only available on some Android devices.
				 */
				size: number;

				/**
				 * The time (in seconds) when the touch was used in correlation with the system start up.
				 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
				 */
				timestamp: number;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the device detects a two-finger tap against the view.
			 */
			interface Popover_twofingertap_Event extends PopoverBaseEvent {
				/**
				 * Returns `true` if the tap passed through an overlapping window belonging to another app.
				 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
				 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
				 * in your app intended for the overlay.
				 */
				obscured: boolean;

				/**
				 * X coordinate of the event from the `source` view's coordinate system.
				 */
				x: number;

				/**
				 * Y coordinate of the event from the `source` view's coordinate system.
				 */
				y: number;

			}
			/**
			 * Fired when the popover is hidden.
			 */
			interface Popover_hide_Event extends PopoverBaseEvent {
			}
			interface PopoverEventMap extends ProxyEventMap {
				click: Popover_click_Event;

				dblclick: Popover_dblclick_Event;

				doubletap: Popover_doubletap_Event;

				hide: Popover_hide_Event;

				keypressed: Popover_keypressed_Event;

				longpress: Popover_longpress_Event;

				pinch: Popover_pinch_Event;

				postlayout: Popover_postlayout_Event;

				singletap: Popover_singletap_Event;

				swipe: Popover_swipe_Event;

				touchcancel: Popover_touchcancel_Event;

				touchend: Popover_touchend_Event;

				touchmove: Popover_touchmove_Event;

				touchstart: Popover_touchstart_Event;

				twofingertap: Popover_twofingertap_Event;

			}
			/**
			 * A Popover is used to manage the presentation of content in a popover.
			 */
			class Popover extends Titanium.UI.View {
				/**
				 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
				 */
				accessibilityHidden: never;

				/**
				 * Briefly describes what performing an action (such as a click) on the view will do.
				 */
				accessibilityHint: never;

				/**
				 * A succint label identifying the view for the device's accessibility service.
				 */
				accessibilityLabel: never;

				/**
				 * A string describing the value (if any) of the view for the device's accessibility service.
				 */
				accessibilityValue: never;

				/**
				 * Coordinate of the view about which to pivot an animation.
				 */
				anchorPoint: never;

				/**
				 * Current position of the view during an animation.
				 */
				readonly animatedCenter: never;

				/**
				 * Indicates the arrow direction of the popover.
				 */
				arrowDirection: number;

				/**
				 * Sets the background color of the popover.
				 */
				backgroundColor: string | Titanium.UI.Color;

				/**
				 * A background gradient for the view.
				 */
				backgroundGradient: never;

				/**
				 * Background image for the view, specified as a local file path or URL.
				 */
				backgroundImage: never;

				/**
				 * Size of the left end cap.
				 */
				backgroundLeftCap: never;

				/**
				 * Determines whether to tile a background across a view.
				 */
				backgroundRepeat: never;

				/**
				 * Size of the top end cap.
				 */
				backgroundTopCap: never;

				/**
				 * Border color of the view, as a color name or hex triplet.
				 */
				borderColor: never;

				/**
				 * Radius for the rounded corners of the view's border.
				 */
				borderRadius: never;

				/**
				 * Border width of the view.
				 */
				borderWidth: never;

				/**
				 * View's bottom position, in platform-specific units.
				 */
				bottom: never;

				/**
				 * View's center position, in the parent view's coordinates.
				 */
				center: never;

				/**
				 * Array of this view's child views.
				 */
				readonly children: never;

				/**
				 * View's clipping behavior.
				 */
				clipMode: never;

				/**
				 * View to use for the popover content. Must be set before calling the `show()` method.
				 */
				contentView: Titanium.UI.View;

				/**
				 * Determines whether the layout has wrapping behavior.
				 */
				horizontalWrap: never;

				/**
				 * Specifies how the view positions its children.
				 * One of: 'composite', 'vertical', or 'horizontal'.
				 */
				layout: never;

				/**
				 * View's left position, in platform-specific units.
				 */
				left: never;

				/**
				 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
				 */
				opacity: never;

				/**
				 * Passthrough views to use when the popover is shown.
				 */
				passthroughViews: Titanium.UI.View[];

				/**
				 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
				 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
				 */
				pullBackgroundColor: never;

				/**
				 * The bounding box of the view relative to its parent, in system units.
				 */
				readonly rect: never;

				/**
				 * View's right position, in platform-specific units.
				 */
				right: never;

				/**
				 * The size of the view in system units.
				 */
				readonly size: never;

				/**
				 * The view's tintColor
				 */
				tintColor: never;

				/**
				 * The view's top position.
				 */
				top: never;

				/**
				 * Determines whether view should receive touch events.
				 */
				touchEnabled: never;

				/**
				 * Transformation matrix to apply to the view.
				 */
				transform: never;

				/**
				 * Determines the color of the shadow.
				 */
				viewShadowColor: never;

				/**
				 * Determines the offset for the shadow of the view.
				 */
				viewShadowOffset: never;

				/**
				 * Determines the blur radius used to create the shadow.
				 */
				viewShadowRadius: never;

				/**
				 * Determines whether the view is visible.
				 */
				visible: never;

				/**
				 * Z-index stack order position, relative to other sibling views.
				 */
				zIndex: never;

				/**
				 * Adds a child to this view's hierarchy.
				 */
				add: never;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener<K extends keyof PopoverEventMap>(name: K, callback: (this: Titanium.UI.iPad.Popover, event: PopoverEventMap[K]) => void): void;

				/**
				 * Adds the specified callback as an event listener for the named event.
				 */
				addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Animates this view.
				 */
				animate: never;

				/**
				 * Translates a point from this view's coordinate system to another view's coordinate system.
				 */
				convertPointToView: never;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent<K extends keyof PopoverEventMap>(name: K, event?: PopoverEventMap[K]): void;

				/**
				 * Fires a synthesized event to any registered listeners.
				 */
				fireEvent(name: string, event?: any): void;

				/**
				 * Hides the popover.
				 */
				hide(options?: AnimatedOptions): void;

				/**
				 * Removes a child view from this view's hierarchy.
				 */
				remove: never;

				/**
				 * Removes all child views from this view's hierarchy.
				 */
				removeAllChildren: never;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener<K extends keyof PopoverEventMap>(name: K, callback: (this: Titanium.UI.iPad.Popover, event: PopoverEventMap[K]) => void): void;

				/**
				 * Removes the specified callback as an event listener for the named event.
				 */
				removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

				/**
				 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
				 */
				replaceAt: never;

				/**
				 * Displays the popover.
				 */
				show(options: ShowPopoverParams): void;

				/**
				 * Returns an image of the rendered view, as a Blob.
				 */
				toImage: never;

			}
		}
		/**
		 * Base event for class Titanium.UI.ActivityIndicator
		 */
		interface ActivityIndicatorBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ActivityIndicator;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ActivityIndicator_click_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ActivityIndicator_dblclick_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ActivityIndicator_doubletap_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ActivityIndicator_focus_Event extends ActivityIndicatorBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ActivityIndicator_keypressed_Event extends ActivityIndicatorBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ActivityIndicator_longclick_Event extends ActivityIndicatorBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ActivityIndicator_longpress_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ActivityIndicator_pinch_Event extends ActivityIndicatorBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ActivityIndicator_postlayout_Event extends ActivityIndicatorBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ActivityIndicator_singletap_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ActivityIndicator_swipe_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ActivityIndicator_touchcancel_Event extends ActivityIndicatorBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ActivityIndicator_touchend_Event extends ActivityIndicatorBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ActivityIndicator_touchmove_Event extends ActivityIndicatorBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ActivityIndicator_touchstart_Event extends ActivityIndicatorBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ActivityIndicator_twofingertap_Event extends ActivityIndicatorBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ActivityIndicatorEventMap extends ProxyEventMap {
			click: ActivityIndicator_click_Event;

			dblclick: ActivityIndicator_dblclick_Event;

			doubletap: ActivityIndicator_doubletap_Event;

			focus: ActivityIndicator_focus_Event;

			keypressed: ActivityIndicator_keypressed_Event;

			longclick: ActivityIndicator_longclick_Event;

			longpress: ActivityIndicator_longpress_Event;

			pinch: ActivityIndicator_pinch_Event;

			postlayout: ActivityIndicator_postlayout_Event;

			singletap: ActivityIndicator_singletap_Event;

			swipe: ActivityIndicator_swipe_Event;

			touchcancel: ActivityIndicator_touchcancel_Event;

			touchend: ActivityIndicator_touchend_Event;

			touchmove: ActivityIndicator_touchmove_Event;

			touchstart: ActivityIndicator_touchstart_Event;

			twofingertap: ActivityIndicator_twofingertap_Event;

		}
		/**
		 * An activity indicator that lets the user know an action is taking place.
		 */
		class ActivityIndicator extends Titanium.UI.View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * Bottom position of the view.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * View's clipping behavior.
			 */
			clipMode: never;

			/**
			 * Color of the message text, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * Font used for the message text.
			 */
			font: Font;

			/**
			 * Width of the view. Only accepts value of <Titanium.UI.SIZE>, which must be explicitly set in order to
			 * display the message and to position the view correctly.
			 */
			height: string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Color of the animated indicator.
			 */
			indicatorColor: string | Titanium.UI.Color;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * Left position of the view.
			 */
			left: number | string;

			/**
			 * Message text.
			 */
			message: string;

			/**
			 * Key identifying a string in the locale file to use for the message text.
			 */
			messageid: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: never;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * Right position of the view.
			 */
			right: number | string;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * The style for the activity indicator.
			 */
			style: number;

			/**
			 * The view's tintColor
			 */
			tintColor: never;

			/**
			 * Top position of the view.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: never;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: never;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * Width of the view. Only accepts value of <Titanium.UI.SIZE>, which must be explicitly set in order to
			 * display the message and to position the view correctly.
			 */
			width: string;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ActivityIndicatorEventMap>(name: K, callback: (this: Titanium.UI.ActivityIndicator, event: ActivityIndicatorEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ActivityIndicatorEventMap>(name: K, event?: ActivityIndicatorEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides the activity indicator and stops the animation.
			 */
			hide(options?: AnimatedOptions): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ActivityIndicatorEventMap>(name: K, callback: (this: Titanium.UI.ActivityIndicator, event: ActivityIndicatorEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Shows the activity indicator and starts the animation.
			 */
			show(options?: AnimatedOptions): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage: never;

		}
		/**
		 * A set of constants for the styles available for <Titanium.UI.ActivityIndicator> objects.
		 */
		class ActivityIndicatorStyle extends Titanium.Module {
			/**
			 * Large white spinning indicator.
			 */
			static readonly BIG: number;

			/**
			 * Large gray spinning indicator.
			 */
			static readonly BIG_DARK: number;

			/**
			 * Small gray spinning indicator.
			 */
			static readonly DARK: number;

			/**
			 * Small white spinning indicator (default).
			 */
			static readonly PLAIN: number;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.AlertDialog
		 */
		interface AlertDialogBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.AlertDialog;

		}
		/**
		 * Fired when a button in the dialog is clicked.
		 */
		interface AlertDialog_click_Event extends AlertDialogBaseEvent {
			/**
			 * Boolean type on Android; Number on iOS.
			 * On Android, indicates whether the cancel button was clicked, in which
			 * case returns `true`.
			 * On iOS, the value of the [cancel](Titanium.UI.AlertDialog.cancel) property is
			 * returned, if defined, or `-1` otherwise. Also note that the cancel button may not be
			 * used on the iPad, because iOS will internally decide whether or not to show it in
			 * the current context (e.g. in a popover).
			 * See the `Three-button Alert Dialog` example for a cross-platform workaround for this
			 * parity issue.
			 */
			cancel: boolean | number;

			/**
			 * Index of the button that was clicked.
			 */
			index: number;

			/**
			 * Value of login field if dialog `style` property is defined as
			 * <Titanium.UI.iOS.AlertDialogStyle.LOGIN_AND_PASSWORD_INPUT>.
			 */
			login: string;

			/**
			 * Value of password field if dialog `style` property is defined as
			 * <Titanium.UI.iOS.AlertDialogStyle.LOGIN_AND_PASSWORD_INPUT>.
			 */
			password: string;

			/**
			 * Value of text field if dialog `style` property is defined as
			 * <Titanium.UI.iOS.AlertDialogStyle.PLAIN_TEXT_INPUT> or
			 * <Titanium.UI.iOS.AlertDialogStyle.SECURE_TEXT_INPUT>.
			 */
			text: string;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface AlertDialog_dblclick_Event extends AlertDialogBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface AlertDialog_doubletap_Event extends AlertDialogBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface AlertDialog_focus_Event extends AlertDialogBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface AlertDialog_keypressed_Event extends AlertDialogBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface AlertDialog_longclick_Event extends AlertDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface AlertDialog_longpress_Event extends AlertDialogBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface AlertDialog_pinch_Event extends AlertDialogBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface AlertDialog_postlayout_Event extends AlertDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface AlertDialog_singletap_Event extends AlertDialogBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface AlertDialog_swipe_Event extends AlertDialogBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface AlertDialog_touchcancel_Event extends AlertDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface AlertDialog_touchend_Event extends AlertDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface AlertDialog_touchmove_Event extends AlertDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface AlertDialog_touchstart_Event extends AlertDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface AlertDialog_twofingertap_Event extends AlertDialogBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface AlertDialogEventMap extends ProxyEventMap {
			click: AlertDialog_click_Event;

			dblclick: AlertDialog_dblclick_Event;

			doubletap: AlertDialog_doubletap_Event;

			focus: AlertDialog_focus_Event;

			keypressed: AlertDialog_keypressed_Event;

			longclick: AlertDialog_longclick_Event;

			longpress: AlertDialog_longpress_Event;

			pinch: AlertDialog_pinch_Event;

			postlayout: AlertDialog_postlayout_Event;

			singletap: AlertDialog_singletap_Event;

			swipe: AlertDialog_swipe_Event;

			touchcancel: AlertDialog_touchcancel_Event;

			touchend: AlertDialog_touchend_Event;

			touchmove: AlertDialog_touchmove_Event;

			touchstart: AlertDialog_touchstart_Event;

			twofingertap: AlertDialog_twofingertap_Event;

		}
		/**
		 * An alert dialog is a modal view that includes an optional title, a message and buttons,
		 * positioned in the middle of the display.
		 */
		class AlertDialog extends Titanium.UI.View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * View to load inside the message area, to create a custom layout.
			 */
			androidView: Titanium.UI.View;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * Setting this to true requires the end-user to click a dialog button to close the dialog.
			 */
			buttonClickRequired: boolean;

			/**
			 * Name of each button to create.
			 */
			buttonNames: string[];

			/**
			 * Index to define the cancel button.
			 */
			cancel: number;

			/**
			 * When this is set to `true`, the dialog is canceled when touched outside the window's bounds.
			 */
			canceledOnTouchOutside: boolean;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * View's clipping behavior.
			 */
			clipMode: never;

			/**
			 * Index to define the destructive button.
			 */
			destructive: number;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Hint text of the text field inside the dialog.
			 */
			hintText: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.AlertDialog.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Keyboard appearance to be displayed when the text field inside the dialog is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			keyboardType: number;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * Hint text of the login text field inside the dialog.
			 */
			loginHintText: string;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			loginKeyboardType: number;

			/**
			 * Placeholder of the login text field inside the dialog.
			 * @deprecated Use [Titanium.UI.AlertDialog.loginHintText](Titanium.UI.AlertDialog.loginHintText) instead.
			 */
			loginPlaceholder: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			loginReturnKeyType: number;

			/**
			 * Value of the login text field inside the dialog.
			 */
			loginValue: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [loginHintText](Titanium.UI.AlertDialog.loginHintText) property.
			 */
			loginhinttextid: string;

			/**
			 * Dialog message.
			 */
			message: string;

			/**
			 * Key identifying a string in the locale file to use for the message text.
			 */
			messageid: string;

			/**
			 * Text for the `OK` button.
			 */
			ok: string;

			/**
			 * Key identifying a string in the locale file to use for the `ok` text.
			 */
			okid: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: never;

			/**
			 * Hint text of the password text field inside the dialog.
			 */
			passwordHintText: string;

			/**
			 * Keyboard type to display when this text field inside the dialog is focused.
			 */
			passwordKeyboardType: number;

			/**
			 * Placeholder of the password text field inside the dialog.
			 * @deprecated Use [Titanium.UI.AlertDialog.passwordHintText](Titanium.UI.AlertDialog.passwordHintText) instead.
			 */
			passwordPlaceholder: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			passwordReturnKeyType: number;

			/**
			 * Value of the password text field inside the dialog.
			 */
			passwordValue: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [passwordHintText](Titanium.UI.AlertDialog.passwordHintText) property.
			 */
			passwordhinttextid: string;

			/**
			 * Boolean value indicating if the alert dialog should only be cancelled by user gesture or by hide method.
			 */
			persistent: boolean;

			/**
			 * Placeholder of the text field inside the dialog.
			 * @deprecated Use [Titanium.UI.AlertDialog.hintText](Titanium.UI.AlertDialog.hintText) instead.
			 */
			placeholder: string;

			/**
			 * Index to define the preferred button.
			 */
			preferred: number;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			returnKeyType: number;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * Indicates the severity of the alert in apps built with Mac Catalyst.
			 */
			severity: number;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * The style for the alert dialog.
			 */
			style: number;

			/**
			 * The tint-color of the dialog.
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * Title of the dialog.
			 */
			title: string;

			/**
			 * Key identifying a string in the locale file to use for the title text.
			 */
			titleid: string;

			/**
			 * The view's top position.
			 */
			top: never;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Value of the text field inside the dialog.
			 */
			value: string;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: never;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: never;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof AlertDialogEventMap>(name: K, callback: (this: Titanium.UI.AlertDialog, event: AlertDialogEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof AlertDialogEventMap>(name: K, event?: AlertDialogEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides this dialog.
			 */
			hide(options?: AnimatedOptions): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof AlertDialogEventMap>(name: K, callback: (this: Titanium.UI.AlertDialog, event: AlertDialogEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Shows this dialog.
			 */
			show(options?: AnimatedOptions): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage: never;

		}
		/**
		 * The Android-specific UI capabilities. All properties, methods and events in this namespace will
		 * only work on Android systems.
		 * #### Drawer Layout
		 * The drawer-layout components acts as a top-level container for window content that allows
		 * for interactive "drawer" views to be pulled out from one or both vertical edges of the window.
		 * It is represented by a `centerView` and optional `leftView` and `rightView` components that
		 * can be swiped in and out with additional configuration and transitions. Learn more about
		 * drawer-layouts in it's dedicated <Titanium.UI.Android.DrawerLayout> docs.
		 */
		class Android extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.CardView>.
			 */
			static createCardView(parameters?: Dictionary<Titanium.UI.Android.CardView>): Titanium.UI.Android.CardView;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.DrawerLayout>.
			 */
			static createDrawerLayout(parameters?: Dictionary<Titanium.UI.Android.DrawerLayout>): Titanium.UI.Android.DrawerLayout;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.ProgressIndicator>.
			 */
			static createProgressIndicator(parameters?: Dictionary<Titanium.UI.Android.ProgressIndicator>): Titanium.UI.Android.ProgressIndicator;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.SearchView>.
			 */
			static createSearchView(parameters?: Dictionary<Titanium.UI.Android.SearchView>): Titanium.UI.Android.SearchView;

			/**
			 * Creates and returns an instance of <Titanium.UI.Android.Snackbar>.
			 */
			static createSnackbar(parameters?: Dictionary<Titanium.UI.Android.Snackbar>): Titanium.UI.Android.Snackbar;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Returns a <Ti.Color> instance for a color defined by the system or user resources (colors.xml)
			 */
			static getColorResource(resourceIdOrColorName: number | string): Titanium.UI.Color;

			/**
			 * Creates a harmonizing color
			 */
			static harmonizedColor(color: string | Titanium.UI.Color): string;

			/**
			 * Hides the soft keyboard.
			 */
			static hideSoftKeyboard(): void;

			/**
			 * Opens an application preferences dialog, using the native Android system settings interface,
			 * defined by the platform-specific `preferences.xml` and `array.xml` files.
			 */
			static openPreferences(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.Animation
		 */
		interface AnimationBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Animation;

		}
		/**
		 * Fired when the animation completes.
		 */
		interface Animation_complete_Event extends AnimationBaseEvent {
		}
		/**
		 * Fired when the animation starts.
		 */
		interface Animation_start_Event extends AnimationBaseEvent {
		}
		interface AnimationEventMap extends ProxyEventMap {
			complete: Animation_complete_Event;

			start: Animation_start_Event;

		}
		/**
		 * The `Animation` object defines an animation that can be applied to a view.
		 */
		class Animation extends Titanium.Proxy {
			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Specifies if the animation should be replayed in reverse upon completion.
			 */
			autoreverse: boolean;

			/**
			 * Value of the `backgroundColor` property at the end of the animation, as a color name
			 * or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Value of the `bottom` property at the end of the animation.
			 */
			bottom: number;

			/**
			 * Value of the `center` property at the end of the animation.
			 */
			center: Point;

			/**
			 * Value of the `color` property at the end of the animation, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Animation curve or easing function to apply to the animation.
			 */
			curve: number;

			/**
			 * The damping ratio for the spring animation as it approaches its quiescent state.
			 */
			dampingRatio: number;

			/**
			 * Delay, in milliseconds before starting the animation.
			 */
			delay: number;

			/**
			 * Duration of the animation, in milliseconds.
			 */
			duration: number;

			/**
			 * Value of the `elevation` property at the end of the animation.
			 */
			elevation: number;

			/**
			 * Value of the `height` property at the end of the animation.
			 */
			height: number;

			/**
			 * Value of the `left` property at the end of the animation.
			 */
			left: number;

			/**
			 * Value of the `opacity` property at the end of the animation.
			 */
			opacity: number;

			/**
			 * Value of the `opaque` property at the end of the animation.
			 */
			opaque: boolean;

			/**
			 * Number of times the animation should be performed.
			 */
			repeat: number;

			/**
			 * Value of the `right` property at the end of the animation.
			 */
			right: number;

			/**
			 * The initial spring velocity.
			 */
			springVelocity: number;

			/**
			 * Value of the `top` property at the end of the animation.
			 */
			top: number;

			/**
			 * Animate the view from its current tranform to the specified transform.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * Transition type to use during a transition animation.
			 */
			transition: number;

			/**
			 * New view to transition to.
			 */
			view: Titanium.UI.View;

			/**
			 * Value of the `visible` property at the end of the animation.
			 */
			visible: boolean;

			/**
			 * Value of the `width` property at the end of the animation.
			 */
			width: number;

			/**
			 * Value of the `zIndex` property at the end of the animation.
			 */
			zIndex: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof AnimationEventMap>(name: K, callback: (this: Titanium.UI.Animation, event: AnimationEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof AnimationEventMap>(name: K, event?: AnimationEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof AnimationEventMap>(name: K, callback: (this: Titanium.UI.Animation, event: AnimationEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An attributed string proxy manages character strings and associated sets of attributes (for example,
		 * font and foregroundcolor) that apply to individual characters or ranges of characters in the string.
		 */
		class AttributedString extends Titanium.Proxy {
			/**
			 * An array of attributes to add.
			 */
			attributes: Attribute[];

			/**
			 * The text applied to the attributed string.
			 */
			text: string;

			/**
			 * Adds an [attribute](Attribute) with the given name and value to the characters in the specified range.
			 */
			addAttribute(attribute: Attribute): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.Button
		 */
		interface ButtonBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Button;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Button_click_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Button_dblclick_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Button_doubletap_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Button_focus_Event extends ButtonBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Button_keypressed_Event extends ButtonBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Button_longclick_Event extends ButtonBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Button_longpress_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Button_pinch_Event extends ButtonBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Button_postlayout_Event extends ButtonBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Button_singletap_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Button_swipe_Event extends ButtonBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Button_touchcancel_Event extends ButtonBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Button_touchend_Event extends ButtonBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Button_touchmove_Event extends ButtonBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Button_touchstart_Event extends ButtonBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Button_twofingertap_Event extends ButtonBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Button_touchfiltered_Event extends ButtonBaseEvent {
			/**
			 * Always `true` since the touch event passed through another app's overlapping window.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ButtonEventMap extends ProxyEventMap {
			click: Button_click_Event;

			dblclick: Button_dblclick_Event;

			doubletap: Button_doubletap_Event;

			focus: Button_focus_Event;

			keypressed: Button_keypressed_Event;

			longclick: Button_longclick_Event;

			longpress: Button_longpress_Event;

			pinch: Button_pinch_Event;

			postlayout: Button_postlayout_Event;

			singletap: Button_singletap_Event;

			swipe: Button_swipe_Event;

			touchcancel: Button_touchcancel_Event;

			touchend: Button_touchend_Event;

			touchfiltered: Button_touchfiltered_Event;

			touchmove: Button_touchmove_Event;

			touchstart: Button_touchstart_Event;

			twofingertap: Button_twofingertap_Event;

		}
		/**
		 * A button widget that has four states: normal, disabled, focused and selected.
		 */
		class Button extends Titanium.UI.View {
			/**
			 * Specify an attributed string for the label.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Background image for the button in its disabled state, specified as a local file path
			 * or URL.
			 */
			backgroundDisabledImage: string;

			/**
			 * Background image for the button in its focused state, specified as a local file path
			 * or URL.
			 */
			backgroundFocusedImage: string;

			/**
			 * Background image for the button in its normal state, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: string | Titanium.UI.Color;

			/**
			 * Background image for the button in its selected state, specified as a local file
			 * path or URL.
			 */
			backgroundSelectedImage: string;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Default button text color, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Text color of the button in its disabled state, as a color name or hex triplet.
			 */
			disabledColor: string | Titanium.UI.Color;

			/**
			 * Set to `true` to enable the button, `false` to disable the button.
			 */
			enabled: boolean;

			/**
			 * Font to use for the button text.
			 */
			font: Font;

			/**
			 * Image to display next to the button title.
			 */
			image: string | number | Titanium.Blob;

			/**
			 * Set true to tint the button image. Set false to show the image as-is.
			 */
			imageIsMask: boolean;

			/**
			 * Button text color used to indicate the selected state, as a color name or hex triplet.
			 */
			selectedColor: string | Titanium.UI.Color;

			/**
			 * Shadow color of the [title](Titanium.UI.Button.title), as a color name or hex triplet.
			 */
			shadowColor: string | Titanium.UI.Color;

			/**
			 * Shadow offset of the [title](Titanium.UI.Button.title), as a dictionary with the properties `x` and `y`.
			 */
			shadowOffset: Point;

			/**
			 * Shadow radius of the [title](Titanium.UI.Button.title).
			 */
			shadowRadius: number;

			/**
			 * The border and fill style the button will use.
			 */
			style: number;

			/**
			 * Specifies an iOS system button appearance, as defined in <Titanium.UI.iOS.SystemButton>.
			 */
			systemButton: number;

			/**
			 * Text alignment, specified using one of the <Titanium.UI> text alignment constants.
			 */
			textAlign: string | number;

			/**
			 * Color applied to button's image and title.
			 */
			tintColor: string;

			/**
			 * Button title.
			 */
			title: string;

			/**
			 * Key identifying a string from the locale file to use for the button title.
			 */
			titleid: string;

			/**
			 * Vertical alignment for the text field, specified using one of the
			 * vertical alignment constants from <Titanium.UI>.
			 */
			verticalAlign: number | string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ButtonEventMap>(name: K, callback: (this: Titanium.UI.Button, event: ButtonEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ButtonEventMap>(name: K, event?: ButtonEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ButtonEventMap>(name: K, callback: (this: Titanium.UI.Button, event: ButtonEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * Base event for class Titanium.UI.ButtonBar
		 */
		interface ButtonBarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ButtonBar;

		}
		/**
		 * Fired when a button is clicked.
		 */
		interface ButtonBar_click_Event extends ButtonBarBaseEvent {
			/**
			 * Index of the clicked button.
			 */
			index: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ButtonBar_dblclick_Event extends ButtonBarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ButtonBar_doubletap_Event extends ButtonBarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ButtonBar_focus_Event extends ButtonBarBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ButtonBar_keypressed_Event extends ButtonBarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ButtonBar_longclick_Event extends ButtonBarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ButtonBar_longpress_Event extends ButtonBarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ButtonBar_pinch_Event extends ButtonBarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ButtonBar_postlayout_Event extends ButtonBarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ButtonBar_singletap_Event extends ButtonBarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ButtonBar_swipe_Event extends ButtonBarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ButtonBar_touchcancel_Event extends ButtonBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ButtonBar_touchend_Event extends ButtonBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ButtonBar_touchmove_Event extends ButtonBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ButtonBar_touchstart_Event extends ButtonBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ButtonBar_twofingertap_Event extends ButtonBarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ButtonBarEventMap extends ProxyEventMap {
			click: ButtonBar_click_Event;

			dblclick: ButtonBar_dblclick_Event;

			doubletap: ButtonBar_doubletap_Event;

			focus: ButtonBar_focus_Event;

			keypressed: ButtonBar_keypressed_Event;

			longclick: ButtonBar_longclick_Event;

			longpress: ButtonBar_longpress_Event;

			pinch: ButtonBar_pinch_Event;

			postlayout: ButtonBar_postlayout_Event;

			singletap: ButtonBar_singletap_Event;

			swipe: ButtonBar_swipe_Event;

			touchcancel: ButtonBar_touchcancel_Event;

			touchend: ButtonBar_touchend_Event;

			touchmove: ButtonBar_touchmove_Event;

			touchstart: ButtonBar_touchstart_Event;

			twofingertap: ButtonBar_twofingertap_Event;

		}
		/**
		 * An iOS button bar component.
		 */
		class ButtonBar extends Titanium.UI.View {
			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Index of the currently selected button.
			 * @deprecated This property has been deprecated in Titanium SDK 8.0.0 as this property has no effect
			 * and will be removed in SDK 9.0.0.
			 *
			 */
			index: number;

			/**
			 * Array of labels for the button bar.
			 */
			labels: string[] | BarItemType[];

			/**
			 * Color of selected button, as a color name or hex triplet.
			 */
			selectedButtonColor: string | Titanium.UI.Color;

			/**
			 * Color of title of button when it is selected, as a color name or hex triplet.
			 */
			selectedTextColor: string | Titanium.UI.Color;

			/**
			 * Color of title of button, as a color name or hex triplet.
			 */
			textColor: string | Titanium.UI.Color;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ButtonBarEventMap>(name: K, callback: (this: Titanium.UI.ButtonBar, event: ButtonBarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ButtonBarEventMap>(name: K, event?: ButtonBarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ButtonBarEventMap>(name: K, callback: (this: Titanium.UI.ButtonBar, event: ButtonBarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * A module used for accessing clipboard data.
		 */
		class Clipboard extends Titanium.Module {
			/**
			 * Create a clipboard identified by name if it doesn't exist.
			 */
			static allowCreation: boolean;

			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
			 */
			static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

			/**
			 * Create a new named clipboard.
			 */
			static name: string;

			/**
			 * Create a new clipboard identified by a unique system-generated name.
			 */
			static unique: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Deletes data of the specified MIME type stored in the clipboard. If MIME type omitted, all
			 * data is deleted.
			 */
			static clearData(type?: string): void;

			/**
			 * Deletes all text data stored in the clipboard.
			 */
			static clearText(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Gets data of the specified MIME type stored in the clipboard. Returns null if non-text mimetype on Android.
			 */
			static getData(type: string): string | Titanium.Blob;

			/**
			 * Gets the items that have been specified earlier using <Titanium.UI.Clipboard.setItems>.
			 */
			static getItems(): any[];

			/**
			 * Gets text data stored in the clipboard.
			 */
			static getText(): string;

			/**
			 * Indicates whether any colors are stored in the clipboard.
			 */
			static hasColors(): boolean;

			/**
			 * Indicates whether any data of the specified MIME type is stored in the clipboard.
			 */
			static hasData(type?: string): boolean;

			/**
			 * Indicates whether any images are stored in the clipboard.
			 */
			static hasImages(): boolean;

			/**
			 * Indicates whether any text data is stored in the clipboard.
			 */
			static hasText(): boolean;

			/**
			 * Indicates whether any URLs are stored in the clipboard.
			 */
			static hasURLs(): boolean;

			/**
			 * Removes the clipboard.
			 */
			static remove(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Stores data of the specified MIME type in the clipboard.
			 */
			static setData(type: string, data: any): void;

			/**
			 * Adds an array of items to a clipboard, and sets privacy options for all included items.
			 */
			static setItems(items: ClipboardItemsType): void;

			/**
			 * Stores text data in the clipboard.
			 */
			static setText(text: string): void;

		}
		/**
		 * Represents a color used for UI components.
		 */
		class Color extends Titanium.Proxy {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Returns a hex string representation of the color (in the RRGGBB or AARRGGBB formats)
			 */
			toHex(): string;

		}
		/**
		 * Base event for class Titanium.UI.DashboardItem
		 */
		interface DashboardItemBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.DashboardItem;

		}
		/**
		 * Fired when a click is detected against the view.
		 */
		interface DashboardItem_click_Event extends DashboardItemBaseEvent {
			/**
			 * Item that was clicked.
			 */
			item: Titanium.UI.DashboardItem;

			/**
			 * Coordinates `x` and `y` of the event from the parent view's coordinate system.
			 */
			location: Point;

		}
		/**
		 * Fired when an item is deleted during editing mode.
		 */
		interface DashboardItem_delete_Event extends DashboardItemBaseEvent {
			/**
			 * Item that was deleted.
			 */
			item: Titanium.UI.DashboardItem;

		}
		/**
		 * Fired when an item is moved during editing mode.
		 */
		interface DashboardItem_move_Event extends DashboardItemBaseEvent {
			/**
			 * Item that was moved.
			 */
			item: Titanium.UI.DashboardItem;

			/**
			 * List of items to be committed, possibly in new order, when edit mode ends.
			 */
			items: Titanium.UI.DashboardItem[];

		}
		interface DashboardItemEventMap extends ProxyEventMap {
			click: DashboardItem_click_Event;

			delete: DashboardItem_delete_Event;

			move: DashboardItem_move_Event;

		}
		/**
		 * A dashboard item is a view that is displayed as an icon in a <Titanium.UI.DashboardView>.
		 */
		class DashboardItem extends Titanium.Proxy {
			/**
			 * Integer value displayed in a badge.
			 */
			badge: number;

			/**
			 * Determines whether this item can be deleted when it edit mode.
			 */
			canDelete: boolean;

			/**
			 * Image or path to image to display in the item by default.
			 */
			image: string | Titanium.Blob;

			/**
			 * Image or path to image to display in the item as it is selected.
			 */
			selectedImage: string | Titanium.Blob;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof DashboardItemEventMap>(name: K, callback: (this: Titanium.UI.DashboardItem, event: DashboardItemEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof DashboardItemEventMap>(name: K, event?: DashboardItemEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof DashboardItemEventMap>(name: K, callback: (this: Titanium.UI.DashboardItem, event: DashboardItemEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.DashboardView
		 */
		interface DashboardViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.DashboardView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface DashboardView_click_Event extends DashboardViewBaseEvent {
			/**
			 * Item that was clicked.
			 */
			item: any;

			/**
			 * Coordinates x and y of the event from the parent view's coordinate system.
			 */
			location: Point;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface DashboardView_dblclick_Event extends DashboardViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface DashboardView_doubletap_Event extends DashboardViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface DashboardView_keypressed_Event extends DashboardViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface DashboardView_longpress_Event extends DashboardViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface DashboardView_pinch_Event extends DashboardViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface DashboardView_postlayout_Event extends DashboardViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface DashboardView_singletap_Event extends DashboardViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface DashboardView_swipe_Event extends DashboardViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface DashboardView_touchcancel_Event extends DashboardViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface DashboardView_touchend_Event extends DashboardViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface DashboardView_touchmove_Event extends DashboardViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface DashboardView_touchstart_Event extends DashboardViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface DashboardView_twofingertap_Event extends DashboardViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when edit mode ends.
		 */
		interface DashboardView_commit_Event extends DashboardViewBaseEvent {
		}
		/**
		 * Fired when an item is deleted in edit mode.
		 */
		interface DashboardView_delete_Event extends DashboardViewBaseEvent {
			/**
			 * Item that was deleted.
			 */
			item: Titanium.UI.DashboardItem;

		}
		/**
		 * Fired when an item finishes being dragged in edit mode.
		 */
		interface DashboardView_dragend_Event extends DashboardViewBaseEvent {
			/**
			 * Item that was dragged.
			 */
			item: Titanium.UI.DashboardItem;

		}
		/**
		 * Fired when an item starts being dragged in edit mode.
		 */
		interface DashboardView_dragstart_Event extends DashboardViewBaseEvent {
			/**
			 * Item that was dragged.
			 */
			item: Titanium.UI.DashboardItem;

		}
		/**
		 * Fired when edit mode starts.
		 */
		interface DashboardView_edit_Event extends DashboardViewBaseEvent {
		}
		/**
		 * Fired when an item is moved in edit mode.
		 */
		interface DashboardView_move_Event extends DashboardViewBaseEvent {
			/**
			 * Item that was moved.
			 */
			item: Titanium.UI.DashboardItem;

			/**
			 * List of items to be committed, possibly in new order, when edit mode ends.
			 */
			items: Titanium.UI.DashboardItem[];

		}
		/**
		 * Fired when the current page of the dashboard view changes.
		 */
		interface DashboardView_pagechanged_Event extends DashboardViewBaseEvent {
			/**
			 * The current page number.
			 */
			pageNo: number;

		}
		interface DashboardViewEventMap extends ProxyEventMap {
			click: DashboardView_click_Event;

			commit: DashboardView_commit_Event;

			dblclick: DashboardView_dblclick_Event;

			delete: DashboardView_delete_Event;

			doubletap: DashboardView_doubletap_Event;

			dragend: DashboardView_dragend_Event;

			dragstart: DashboardView_dragstart_Event;

			edit: DashboardView_edit_Event;

			keypressed: DashboardView_keypressed_Event;

			longpress: DashboardView_longpress_Event;

			move: DashboardView_move_Event;

			pagechanged: DashboardView_pagechanged_Event;

			pinch: DashboardView_pinch_Event;

			postlayout: DashboardView_postlayout_Event;

			singletap: DashboardView_singletap_Event;

			swipe: DashboardView_swipe_Event;

			touchcancel: DashboardView_touchcancel_Event;

			touchend: DashboardView_touchend_Event;

			touchmove: DashboardView_touchmove_Event;

			touchstart: DashboardView_touchstart_Event;

			twofingertap: DashboardView_twofingertap_Event;

		}
		/**
		 * A dashboard view is an iOS Springboard-like view of <Titanium.UI.DashboardItem> items that may
		 * be deleted and reordered by the user using its built-in edit mode.
		 */
		class DashboardView extends Titanium.UI.View {
			/**
			 * The number of columns of items in the view.
			 */
			columnCount: number;

			/**
			 * Items to display in this view.
			 */
			data: Titanium.UI.DashboardItem[];

			/**
			 * Determines whether edit mode is activated by a longpress of an item.
			 */
			editable: boolean;

			/**
			 * The number of rows of items in the view.
			 */
			rowCount: number;

			/**
			 * Determines whether the wobble visual editing cue is enabled in edit mode.
			 */
			wobble: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof DashboardViewEventMap>(name: K, callback: (this: Titanium.UI.DashboardView, event: DashboardViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof DashboardViewEventMap>(name: K, event?: DashboardViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof DashboardViewEventMap>(name: K, callback: (this: Titanium.UI.DashboardView, event: DashboardViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Enable edit mode.
			 */
			startEditing(): void;

			/**
			 * Disable edit mode.
			 */
			stopEditing(): void;

		}
		/**
		 * Base event for class Titanium.UI.EmailDialog
		 */
		interface EmailDialogBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.EmailDialog;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface EmailDialog_click_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface EmailDialog_dblclick_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface EmailDialog_doubletap_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface EmailDialog_focus_Event extends EmailDialogBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface EmailDialog_keypressed_Event extends EmailDialogBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface EmailDialog_longclick_Event extends EmailDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface EmailDialog_longpress_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface EmailDialog_pinch_Event extends EmailDialogBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface EmailDialog_postlayout_Event extends EmailDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface EmailDialog_singletap_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface EmailDialog_swipe_Event extends EmailDialogBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface EmailDialog_touchcancel_Event extends EmailDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface EmailDialog_touchend_Event extends EmailDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface EmailDialog_touchmove_Event extends EmailDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface EmailDialog_touchstart_Event extends EmailDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface EmailDialog_twofingertap_Event extends EmailDialogBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when this email dialog has completed sending an email.
		 */
		interface EmailDialog_complete_Event extends EmailDialogBaseEvent {
			/**
			 * Error code.
			 * Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
			 * was generated by the operating system, that system's error value is used.
			 * Otherwise, this value will be -1.
			 */
			code: number;

			/**
			 * Error message, if any returned. Will be undefined if `success` is `true`.
			 */
			error: string;

			/**
			 * Status of the email send process.
			 * The `SAVED` and `CANCELLED` constants are iOS only.
			 * On Android, this property will return `SENT` when the user discards or saves
			 * a message.
			 */
			result: number;

			/**
			 * Indicates if the email was handled successfully.
			 * Returns `true` if request succeeded, `false` otherwise. Note that emails being
			 * deleted or saved for later do count as success.
			 */
			success: boolean;

		}
		interface EmailDialogEventMap extends ProxyEventMap {
			click: EmailDialog_click_Event;

			complete: EmailDialog_complete_Event;

			dblclick: EmailDialog_dblclick_Event;

			doubletap: EmailDialog_doubletap_Event;

			focus: EmailDialog_focus_Event;

			keypressed: EmailDialog_keypressed_Event;

			longclick: EmailDialog_longclick_Event;

			longpress: EmailDialog_longpress_Event;

			pinch: EmailDialog_pinch_Event;

			postlayout: EmailDialog_postlayout_Event;

			singletap: EmailDialog_singletap_Event;

			swipe: EmailDialog_swipe_Event;

			touchcancel: EmailDialog_touchcancel_Event;

			touchend: EmailDialog_touchend_Event;

			touchmove: EmailDialog_touchmove_Event;

			touchstart: EmailDialog_touchstart_Event;

			twofingertap: EmailDialog_twofingertap_Event;

		}
		/**
		 * An email dialog is a modal window that allows users to compose and send an email.
		 */
		class EmailDialog extends Titanium.UI.View {
			/**
			 * Constant for the `CANCELLED` status result. On Android, this property exists but is not used.
			 */
			readonly CANCELLED: number;

			/**
			 * Constant for the `FAILED` status result.
			 */
			readonly FAILED: number;

			/**
			 * Constant for the `SAVED` status result. On Android, this property exists but is not used.
			 */
			readonly SAVED: number;

			/**
			 * Constant for the `SENT` status result.
			 */
			readonly SENT: number;

			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Bar color of the email dialog window, as a color name or hex triplet.
			 */
			barColor: string | Titanium.UI.Color;

			/**
			 * Recipients of the email included via the `BCC` (Blind Carbon Copy) field.
			 */
			bccRecipients: string[];

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * Recipients of the email included via the `CC` (Carbon Copy) field.
			 */
			ccRecipients: string[];

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * View's clipping behavior.
			 */
			clipMode: never;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Determines whether the email message, specifically the contents of
			 * [messageBody](Titanium.UI.EmailDialog.messageBody), should be sent as HTML content type
			 * rather than plain text.
			 */
			html: boolean;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * Email message body.
			 */
			messageBody: string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: never;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * Subject line for the email.
			 */
			subject: string;

			/**
			 * The view's tintColor
			 */
			tintColor: never;

			/**
			 * Recipients of the email included via the main `TO` field.
			 */
			toRecipients: string[];

			/**
			 * The view's top position.
			 */
			top: never;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: never;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: never;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds an attachment.
			 */
			addAttachment(attachment: Titanium.Blob | Titanium.Filesystem.File): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof EmailDialogEventMap>(name: K, callback: (this: Titanium.UI.EmailDialog, event: EmailDialogEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof EmailDialogEventMap>(name: K, event?: EmailDialogEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Indicates whether sending email is supported by the system.
			 */
			isSupported(): boolean;

			/**
			 * Opens this email dialog.
			 */
			open(options?: AnimatedOptions): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof EmailDialogEventMap>(name: K, callback: (this: Titanium.UI.EmailDialog, event: EmailDialogEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage: never;

		}
		/**
		 * Base event for class Titanium.UI.ImageView
		 */
		interface ImageViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ImageView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ImageView_click_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ImageView_dblclick_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ImageView_doubletap_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ImageView_focus_Event extends ImageViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ImageView_keypressed_Event extends ImageViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ImageView_longclick_Event extends ImageViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ImageView_longpress_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ImageView_pinch_Event extends ImageViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ImageView_postlayout_Event extends ImageViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ImageView_singletap_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ImageView_swipe_Event extends ImageViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ImageView_touchcancel_Event extends ImageViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ImageView_touchend_Event extends ImageViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ImageView_touchmove_Event extends ImageViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ImageView_touchstart_Event extends ImageViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ImageView_twofingertap_Event extends ImageViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired for each frame change during an animation.
		 */
		interface ImageView_change_Event extends ImageViewBaseEvent {
			/**
			 * Index of the image frame being displayed.
			 */
			index: number;

		}
		/**
		 * Fired when either the initial image and/or all of the images in an animation are loaded.
		 */
		interface ImageView_load_Event extends ImageViewBaseEvent {
			/**
			 * Set to `image` when the image defined in the [image](Titanium.UI.ImageView.image)
			 * property is loaded. Set to `images`, when the series of images defined in the
			 * [images](Titanium.UI.ImageView.images) property are loaded.
			 */
			state: string;

		}
		/**
		 * Fired when the animation starts.
		 */
		interface ImageView_start_Event extends ImageViewBaseEvent {
		}
		/**
		 * Fired when the animation stops.
		 */
		interface ImageView_stop_Event extends ImageViewBaseEvent {
		}
		/**
		 * Fired when an image fails to load.
		 */
		interface ImageView_error_Event extends ImageViewBaseEvent {
			/**
			 * Error code.
			 * If the error was generated by the operating system, that system's error value
			 * is used. Otherwise, this value will be -1.
			 */
			code: number;

			/**
			 * Error message, if any returned. May be undefined.
			 */
			error: string;

			/**
			 * URL of the image that failed to load.
			 */
			image: string;

			/**
			 * Indicates a successful operation. Returns `false`.
			 */
			success: boolean;

		}
		/**
		 * Fired when the animation pauses.
		 */
		interface ImageView_pause_Event extends ImageViewBaseEvent {
		}
		interface ImageViewEventMap extends ProxyEventMap {
			change: ImageView_change_Event;

			click: ImageView_click_Event;

			dblclick: ImageView_dblclick_Event;

			doubletap: ImageView_doubletap_Event;

			error: ImageView_error_Event;

			focus: ImageView_focus_Event;

			keypressed: ImageView_keypressed_Event;

			load: ImageView_load_Event;

			longclick: ImageView_longclick_Event;

			longpress: ImageView_longpress_Event;

			pause: ImageView_pause_Event;

			pinch: ImageView_pinch_Event;

			postlayout: ImageView_postlayout_Event;

			singletap: ImageView_singletap_Event;

			start: ImageView_start_Event;

			stop: ImageView_stop_Event;

			swipe: ImageView_swipe_Event;

			touchcancel: ImageView_touchcancel_Event;

			touchend: ImageView_touchend_Event;

			touchmove: ImageView_touchmove_Event;

			touchstart: ImageView_touchstart_Event;

			twofingertap: ImageView_twofingertap_Event;

		}
		/**
		 * A view to display a single image or series of animated images.
		 */
		class ImageView extends Titanium.UI.View {
			/**
			 * Indicates whether animation is running.
			 */
			readonly animating: boolean;

			/**
			 * Indicates whether the image should be rotated based on EXIF orientation data.
			 * Before Titanium 10.1.0, this defaulted to `false` on Android.
			 */
			autorotate: boolean;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Number of times to retry decoding the bitmap at a URL.
			 */
			decodeRetries: number;

			/**
			 * Local path to the default image to display while loading a remote image.
			 */
			defaultImage: string;

			/**
			 * Amount of time in milliseconds to animate one cycle.
			 */
			duration: number;

			/**
			 * Show zoom controls when the user touches the image view.
			 */
			enableZoomControls: boolean;

			/**
			 * Set to `true` to prevent scaling of 2x/3x-resolution remote images for retina
			 * displays.
			 */
			hires: boolean;

			/**
			 * Image to display.
			 */
			image: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Enables a ripple effect when the foreground image is touched.
			 */
			imageTouchFeedback: boolean;

			/**
			 * Optional touch feedback ripple color. This has no effect unless `imageTouchFeedback` is true.
			 */
			imageTouchFeedbackColor: string;

			/**
			 * Array of images to animate, defined using local filesystem paths, `File` objects,
			 * remote URLs (Android only), or `Blob` objects containing image data.
			 * When using this property, an initial `start()` needs to be called upon the ImageView before any image will show in this imageview.
			 * Related properties/methods to look at: `start`, `stop`, `pause`, `reverse`, `resume` and `repeatCount`
			 */
			images: string[] | Titanium.Blob[] | Titanium.Filesystem.File[];

			/**
			 * Indicates whether the animation is paused.
			 */
			readonly paused: boolean;

			/**
			 * Prevent the default image from being displayed while loading a remote image. This property
			 * is ignored when the `defaultImage` property is set.
			 */
			preventDefaultImage: boolean;

			/**
			 * Number of times to repeat the image animation.
			 */
			repeatCount: number;

			/**
			 * Run the animation in reverse.
			 */
			reverse: boolean;

			/**
			 * Determines how the image is scaled within the view.
			 */
			scalingMode: number;

			/**
			 * The view's tintColor. Android does not support setting instances of <Titanium.UI.Color>
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ImageViewEventMap>(name: K, callback: (this: Titanium.UI.ImageView, event: ImageViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ImageViewEventMap>(name: K, event?: ImageViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Pauses a running animation. Use `resume` method to continue.
			 */
			pause(): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ImageViewEventMap>(name: K, callback: (this: Titanium.UI.ImageView, event: ImageViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Resumes an animation from a `pause` state.
			 */
			resume(): void;

			/**
			 * Starts the image animation. On Android, also resets `index` to the first image.
			 */
			start(): void;

			/**
			 * Stops a running animation. On iOS, also resets `index` to the first image.
			 */
			stop(): void;

			/**
			 * Returns the image as a Blob object.
			 */
			toBlob(): Titanium.Blob;

		}
		/**
		 * Base event for class Titanium.UI.Label
		 */
		interface LabelBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Label;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Label_click_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Label_dblclick_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Label_doubletap_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Label_focus_Event extends LabelBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Label_keypressed_Event extends LabelBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Label_longclick_Event extends LabelBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Label_longpress_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Label_pinch_Event extends LabelBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Label_postlayout_Event extends LabelBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Label_singletap_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Label_swipe_Event extends LabelBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Label_touchcancel_Event extends LabelBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Label_touchend_Event extends LabelBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Label_touchmove_Event extends LabelBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Label_touchstart_Event extends LabelBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Label_twofingertap_Event extends LabelBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when user interacts with a URL in the Label.
		 */
		interface Label_link_Event extends LabelBaseEvent {
			/**
			 * This is false. This event does not bubble
			 */
			bubbles: boolean;

			/**
			 * An array of two numbers [location, length] describing the character range of the text associated with this URL.
			 */
			range: any[];

			/**
			 * The URL that is associated with this event.
			 */
			url: string;

		}
		interface LabelEventMap extends ProxyEventMap {
			click: Label_click_Event;

			dblclick: Label_dblclick_Event;

			doubletap: Label_doubletap_Event;

			focus: Label_focus_Event;

			keypressed: Label_keypressed_Event;

			link: Label_link_Event;

			longclick: Label_longclick_Event;

			longpress: Label_longpress_Event;

			pinch: Label_pinch_Event;

			postlayout: Label_postlayout_Event;

			singletap: Label_singletap_Event;

			swipe: Label_swipe_Event;

			touchcancel: Label_touchcancel_Event;

			touchend: Label_touchend_Event;

			touchmove: Label_touchmove_Event;

			touchstart: Label_touchstart_Event;

			twofingertap: Label_twofingertap_Event;

		}
		/**
		 * A text label, with an optional background image.
		 */
		class Label extends Titanium.UI.View {
			/**
			 * Specify an attributed string for the label.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Automatically convert certain text items in the label to clickable links.
			 */
			autoLink: number;

			/**
			 * Automatically scales the label into its size.
			 */
			autoSize: boolean;

			/**
			 * Number of pixels to extend the background image past the label on the bottom.
			 */
			backgroundPaddingBottom: number;

			/**
			 * Number of pixels to extend the background image past the label on the left.
			 */
			backgroundPaddingLeft: number;

			/**
			 * Number of pixels to extend the background image past the label on the right.
			 */
			backgroundPaddingRight: number;

			/**
			 * Number of pixels to extend the background image past the label on the top.
			 */
			backgroundPaddingTop: number;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Color of the label text, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle.
			 */
			ellipsize: number;

			/**
			 * Font to use for the label text.
			 */
			font: Font;

			/**
			 * Color of the label when in the highlighted state, as a color name or hex triplet.
			 */
			highlightedColor: string | Titanium.UI.Color;

			/**
			 * Simple HTML formatting.
			 */
			html: string;

			/**
			 * Includes extra top and bottom padding to make room for accents that go above normal ascent and descent.
			 */
			includeFontPadding: boolean;

			/**
			 * Line spacing of the [text](Titanium.UI.Label.text), as a dictionary with the properties `add` and `multiply`.
			 */
			lineSpacing: LabelLineSpacing;

			/**
			 * Makes the label be exactly this many lines tall.
			 */
			lines: number;

			/**
			 * Makes the label at most this many lines tall.
			 */
			maxLines: number;

			/**
			 * Minimum font size when the font is sized based on the contents.
			 */
			minimumFontSize: number;

			/**
			 * Shadow color of the [text](Titanium.UI.Label.text), as a color name or hex triplet.
			 */
			shadowColor: string | Titanium.UI.Color;

			/**
			 * Shadow offset of the [text](Titanium.UI.Label.text), as a dictionary with the properties `x` and `y`.
			 */
			shadowOffset: Point;

			/**
			 * Shadow radius of the [text](Titanium.UI.Label.text).
			 */
			shadowRadius: number;

			/**
			 * Label text.
			 */
			text: string;

			/**
			 * Text alignment.
			 */
			textAlign: string | number;

			/**
			 * Key identifying a string from the locale file to use for the label text.
			 */
			textid: string;

			/**
			 * Vertical text alignment, specified using one of the  vertical alignment constants
			 * from <Titanium.UI>.
			 */
			verticalAlign: number | string;

			/**
			 * Enable or disable word wrapping in the label.
			 * @deprecated If you want to disable wrapping, then set [Titanium.UI.Label.maxLines](Titanium.UI.Label.maxLines) to 1 instead.
			 */
			wordWrap: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof LabelEventMap>(name: K, callback: (this: Titanium.UI.Label, event: LabelEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof LabelEventMap>(name: K, event?: LabelEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof LabelEventMap>(name: K, callback: (this: Titanium.UI.Label, event: LabelEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * A list item is an individual item in a list section.
		 */
		class ListItem extends Titanium.Proxy {
			/**
			 * Sets an accessory on the right side of an item.
			 */
			accessoryType: number;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Background gradient to render when the item is not selected.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image to render when the item is not selected.
			 */
			backgroundImage: string;

			/**
			 * Background color of the view, as a color name or hex triplet when item is selected.
			 */
			backgroundSelectedColor: string | Titanium.UI.Color;

			/**
			 * Background gradient to render when the item is selected.
			 */
			backgroundSelectedGradient: Gradient;

			/**
			 * Background image to render when the item is selected.
			 */
			backgroundSelectedImage: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			bubbleParent: never;

			/**
			 * Specifies if the item can be deleted by a user initiated action.
			 */
			canEdit: boolean;

			/**
			 * Specifies if the item can be inserted by a user initiated action.
			 */
			canInsert: boolean;

			/**
			 * Specifies if the item can be reordered within the list view by a user initiated action.
			 */
			canMove: boolean;

			/**
			 * Default text color of the item when not selected, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Specifies custom action items to be shown when when a list item is edited.
			 */
			editActions: RowActionType[];

			/**
			 * Font to use for the item title.
			 */
			font: Font;

			/**
			 * Row height in platform-specific units.
			 */
			height: number | string;

			/**
			 * Image to render in the image area of the item, specified as a local path or URL.
			 */
			image: string;

			/**
			 * A user defined string that gets passed to events.
			 */
			itemId: string;

			/**
			 * The text to match against when the [ListView](Titanium.UI.ListView) is performing a search.
			 */
			searchableText: string;

			/**
			 * Background color of the view, as a color name or hex triplet when item is selected.
			 * @deprecated This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedColor>.
			 */
			selectedBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Background gradient to render when the item is selected.
			 * @deprecated This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedGradient>.
			 */
			selectedBackgroundGradient: Gradient;

			/**
			 * Background image to render when the item is selected.
			 * @deprecated This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedImage>.
			 */
			selectedBackgroundImage: string;

			/**
			 * Color to use for the item title when the item is selected, as a color name or hex triplet.
			 */
			selectedColor: string | Titanium.UI.Color;

			/**
			 * Color to use for the item subtitle when the item is selected, as a color name or hex triplet.
			 */
			selectedSubtitleColor: string | Titanium.UI.Color;

			/**
			 * Selection style constant to control the selection color.
			 */
			selectionStyle: number;

			/**
			 * Subtitle to set in the text area of the item.
			 */
			subtitle: string;

			/**
			 * Default text color of the subtitle, as a color name or hex triplet.
			 */
			subtitleColor: string | Titanium.UI.Color;

			/**
			 * Title to set in the text area of the item.
			 */
			title: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener: never;

			/**
			 * Applies the properties to the proxy.
			 */
			applyProperties: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener: never;

		}
		/**
		 * A list section is a container within a list view used to organize list items.
		 */
		class ListSection extends Titanium.Proxy {
			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			bubbleParent: never;

			/**
			 * Returns the item count of the section, also incorporating the search filter if active.
			 */
			readonly filteredItemCount: number;

			/**
			 * Title of this section footer.
			 */
			footerTitle: string;

			/**
			 * View to use for this section footer.
			 */
			footerView: Titanium.UI.View;

			/**
			 * Title of this section header.
			 */
			headerTitle: string;

			/**
			 * View to use for this section header.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Returns the item count of the section.
			 */
			readonly itemCount: number;

			/**
			 * Items of this list section.
			 */
			items: ListDataItem[];

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener: never;

			/**
			 * Appends the data entries to the end of the list section.
			 */
			appendItems(dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Removes count entries from the list section at the specified index.
			 */
			deleteItemsAt(itemIndex: number, count: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent: never;

			/**
			 * Returns the item entry from the list view at the specified index.
			 */
			getItemAt(itemIndex: number): ListDataItem;

			/**
			 * Inserts data entries to the list section at the specified index.
			 */
			insertItemsAt(itemIndex: number, dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener: never;

			/**
			 * Removes count entries from the list section at the specified index,
			 * then inserts data entries to the list section at the same index.
			 */
			replaceItemsAt(index: number, count: number, dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Sets the data entries in the list section.
			 */
			setItems(dataItems: ReadonlyArray<ListDataItem>, animation?: ListViewAnimationProperties): void;

			/**
			 * Updates an item at the specified index.
			 */
			updateItemAt(index: number, dataItem: ListDataItem, animation?: ListViewAnimationProperties): void;

		}
		/**
		 * Base event for class Titanium.UI.ListView
		 */
		interface ListViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ListView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ListView_click_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ListView_dblclick_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ListView_doubletap_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ListView_focus_Event extends ListViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ListView_keypressed_Event extends ListViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ListView_longclick_Event extends ListViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ListView_longpress_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ListView_pinch_Event extends ListViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ListView_postlayout_Event extends ListViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ListView_singletap_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ListView_swipe_Event extends ListViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ListView_touchcancel_Event extends ListViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ListView_touchend_Event extends ListViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ListView_touchmove_Event extends ListViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ListView_touchstart_Event extends ListViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ListView_twofingertap_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the index bar is clicked by the user.
		 */
		interface ListView_indexclick_Event extends ListViewBaseEvent {
			/**
			 * The index number clicked.
			 */
			index: number;

			/**
			 * The title of the index clicked.
			 */
			title: string;

		}
		/**
		 * Fired when a list row is clicked by the user.
		 */
		interface ListView_itemclick_Event extends ListViewBaseEvent {
			/**
			 * Returns `true` if the detail button is clicked else returns `false`.
			 * Only returns `true` if the `accessoryType` property is set to
			 * <Titanium.UI.LIST_ACCESSORY_TYPE_DETAIL>.  All other accessories return `false` if
			 * clicked.
			 */
			accessoryClicked: boolean;

			/**
			 * The bind ID of the control that generated this event, if one exists.
			 */
			bindId: string;

			/**
			 * The item ID bound to the list item that generated the event.
			 */
			itemId: string;

			/**
			 * Item index.
			 */
			itemIndex: number;

			/**
			 * List section if the item is contained in a list section.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			sectionIndex: number;

		}
		/**
		 * Fired when user stops two-pan gesture interaction for selecting multiple items.
		 * It is used with <Titanium.UI.ListView.allowsMultipleSelectionInteraction>.
		 */
		interface ListView_itemsselected_Event extends ListViewBaseEvent {
			/**
			 * List of items selected by user.
			 */
			selectedItems: SelectedItem[];

			/**
			 * First item selected when user started interaction.
			 */
			startingItem: SelectedItem;

		}
		/**
		 * Fired when a list row is deleted by the user.
		 */
		interface ListView_delete_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The item ID bound to the list item that generated the event.
			 */
			itemId: string;

			/**
			 * Item index.
			 */
			itemIndex: number;

			/**
			 * List section from which the item is deleted.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			sectionIndex: number;

		}
		/**
		 * Fired when a list row is inserted by the user.
		 */
		interface ListView_insert_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The item ID bound to the list item that generated the event.
			 */
			itemId: string;

			/**
			 * Item index.
			 */
			itemIndex: number;

			/**
			 * List section from which the item is deleted.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			sectionIndex: number;

		}
		/**
		 * Fired when the user starts dragging the list view.
		 */
		interface ListView_dragstart_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

		}
		/**
		 * Fired when the user stops dragging the list view.
		 */
		interface ListView_dragend_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

		}
		/**
		 * Fired when the list view displays the reference item.
		 */
		interface ListView_marker_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * section item index of the reference item.
			 */
			itemIndex: number;

			/**
			 * section index of the reference item.
			 */
			sectionIndex: number;

		}
		/**
		 * Fired when a list row has started moving.
		 */
		interface ListView_movestart_Event extends ListViewBaseEvent {
			/**
			 * section item index of the reference item.
			 */
			itemIndex: number;

			/**
			 * List section from which the item is moved.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * section index of the reference item.
			 */
			sectionIndex: number;

		}
		/**
		 * Fired when a list row has ended moving.
		 */
		interface ListView_moveend_Event extends ListViewBaseEvent {
		}
		/**
		 * Fired when a list row is moved to a different location by the user.
		 */
		interface ListView_move_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The item ID bound to the list item that generated the event.
			 */
			itemId: string;

			/**
			 * Item index.
			 */
			itemIndex: number;

			/**
			 * List section from which the item is moved.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			sectionIndex: number;

			/**
			 * Position within the `targetSection`.
			 */
			targetItemIndex: number;

			/**
			 * List section to which the item is moved. Might be the same as `section` property.
			 */
			targetSection: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			targetSectionIndex: number;

		}
		/**
		 * Fired when the search using either [searchView](Titanium.UI.ListView.searchView) or [searchText](Titanium.UI.ListView.searchText) has no results.
		 */
		interface ListView_noresults_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

		}
		/**
		 * Fired when the user drags the list view past the top edge of the [pullView](Titanium.UI.ListView.pullView).
		 */
		interface ListView_pull_Event extends ListViewBaseEvent {
			/**
			 * Determines if the `pullView` is completely visible (true) or partially hidden (false).
			 */
			active: boolean;

			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

		}
		/**
		 * Fired when new list items are prefetched. The items are ordered ascending by geometric distance
		 * from the list view. Note that this event is only available on iOS 10 and later.
		 */
		interface ListView_prefetch_Event extends ListViewBaseEvent {
			/**
			 * An array of prefetched items.
			 */
			prefetchedItems: ListItemEventType[];

		}
		/**
		 * Fired when list items that previously were considered as candidates for pre-fetching were not
		 * actually used. Note that this event is only available on iOS 10 and later
		 */
		interface ListView_cancelprefetch_Event extends ListViewBaseEvent {
			/**
			 * An array of prefetched items.
			 */
			prefetchedItems: ListItemEventType[];

		}
		/**
		 * Fired when the user stops dragging the list view and the [pullView](Titanium.UI.ListView.pullView) is completely visible.
		 */
		interface ListView_pullend_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

		}
		/**
		 * Fired when the user interacts with one of the custom edit actions defined by <Titanium.UI.ListItem.editActions>.
		 */
		interface ListView_editaction_Event extends ListViewBaseEvent {
			/**
			 * The [title](RowActionType.title) as defined in the row action object.
			 */
			action: string;

			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The [identifier](RowActionType. identifier) of the row action. Only included in the event
			 * if previously defined. Available in Titanium 6.0.0 and later.
			 */
			identifier: string;

			/**
			 * The item ID bound to the list item that generated the event.
			 */
			itemId: string;

			/**
			 * Item index.
			 */
			itemIndex: number;

			/**
			 * List section from which the event was generated.
			 */
			section: Titanium.UI.ListSection;

			/**
			 * Section index.
			 */
			sectionIndex: number;

		}
		/**
		 * Fires when the list view starts scrolling by user interaction. Calling the `scrollTo` methods will not fire this event
		 */
		interface ListView_scrollstart_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The first visible item in the list view when the event fires; this item might not be fully visible. May be -1 on iOS.
			 */
			firstVisibleItem: any;

			/**
			 * The index of the first visible item in the list view when the event fires; this item might not be fully visible.
			 * Note: The index is `-1` when there are no items in the <Titanium.UI.ListView>.
			 */
			firstVisibleItemIndex: number;

			/**
			 * The first visible section in the list view when the event fires.
			 */
			firstVisibleSection: Titanium.UI.ListSection;

			/**
			 * The index of the first visible section in the list view when the event fires.
			 * Note: The index is `-1` when there are no items in the <Titanium.UI.ListView>.
			 */
			firstVisibleSectionIndex: number;

			/**
			 * The number of visible items in the list view when the event fires.
			 */
			visibleItemCount: number;

		}
		/**
		 * Fires when the list view ends scrolling. Calling the `scrollTo` methods will not fire this event
		 */
		interface ListView_scrollend_Event extends ListViewBaseEvent {
			/**
			 * false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * The first visible item in the list view when the event fires; this item might not be fully visible. May be -1 on iOS.
			 */
			firstVisibleItem: any;

			/**
			 * The index of the first visible item in the list view when the event fires; this item might not be fully visible.
			 */
			firstVisibleItemIndex: number;

			/**
			 * The first visible section in the list view when the event fires.
			 */
			firstVisibleSection: Titanium.UI.ListSection;

			/**
			 * The index of the first visible section in the list view when the event fires.
			 */
			firstVisibleSectionIndex: number;

			/**
			 * The number of visible items in the list view when the event fires.
			 */
			visibleItemCount: number;

		}
		/**
		 * Fires when the list view is scrolling. Calling the `scrollTo` methods will not fire this event
		 */
		interface ListView_scrolling_Event extends ListViewBaseEvent {
			/**
			 * Direction of the scroll either 'up', or 'down'.
			 */
			direction: string;

			/**
			 * The expected y axis offset when the scrolling action decelerates to a stop.
			 */
			targetContentOffset: number;

			/**
			 * The velocity of the scroll in scale factor per second
			 */
			velocity: number;

		}
		interface ListViewEventMap extends ProxyEventMap {
			cancelprefetch: ListView_cancelprefetch_Event;

			click: ListView_click_Event;

			dblclick: ListView_dblclick_Event;

			delete: ListView_delete_Event;

			doubletap: ListView_doubletap_Event;

			dragend: ListView_dragend_Event;

			dragstart: ListView_dragstart_Event;

			editaction: ListView_editaction_Event;

			focus: ListView_focus_Event;

			indexclick: ListView_indexclick_Event;

			insert: ListView_insert_Event;

			itemclick: ListView_itemclick_Event;

			itemsselected: ListView_itemsselected_Event;

			keypressed: ListView_keypressed_Event;

			longclick: ListView_longclick_Event;

			longpress: ListView_longpress_Event;

			marker: ListView_marker_Event;

			move: ListView_move_Event;

			moveend: ListView_moveend_Event;

			movestart: ListView_movestart_Event;

			noresults: ListView_noresults_Event;

			pinch: ListView_pinch_Event;

			postlayout: ListView_postlayout_Event;

			prefetch: ListView_prefetch_Event;

			pull: ListView_pull_Event;

			pullend: ListView_pullend_Event;

			scrollend: ListView_scrollend_Event;

			scrolling: ListView_scrolling_Event;

			scrollstart: ListView_scrollstart_Event;

			singletap: ListView_singletap_Event;

			swipe: ListView_swipe_Event;

			touchcancel: ListView_touchcancel_Event;

			touchend: ListView_touchend_Event;

			touchmove: ListView_touchmove_Event;

			touchstart: ListView_touchstart_Event;

			twofingertap: ListView_twofingertap_Event;

		}
		/**
		 * A list view is used to present information, organized in to sections and items,
		 * in a vertically-scrolling view.
		 */
		class ListView extends Titanium.UI.View {
			/**
			 * Determines whether multiple items of this list view can be selected at the same time while editing the table.
			 */
			allowsMultipleSelectionDuringEditing: boolean;

			/**
			 * Allows a two-finger pan gesture to automatically transition the table view into editing mode and start selecting rows.
			 */
			allowsMultipleSelectionInteraction: boolean;

			/**
			 * Determines whether this item can be selected.
			 */
			allowsSelection: boolean;

			/**
			 * Determines whether this list view items can be selected while editing the table.
			 */
			allowsSelectionDuringEditing: boolean;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Determines if the list view can scroll in response to user actions.
			 */
			canScroll: boolean;

			/**
			 * Determines if the search performed is case insensitive.
			 */
			caseInsensitiveSearch: boolean;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Determines if the scrolling event should fire every time there is a new visible item.
			 */
			continuousUpdate: boolean;

			/**
			 * Sets the default template for list data items that do not specify the `template` property.
			 */
			defaultItemTemplate: string | number;

			/**
			 * A Boolean indicating whether the underlying content is dimmed during a search.
			 */
			dimBackgroundForSearch: boolean;

			/**
			 * Determines whether the scroll-bounce of the list view should be disabled.
			 */
			disableBounce: boolean;

			/**
			 * Determines if the list view is currently in editing mode.
			 */
			editing: boolean;

			/**
			 * Sets the fastScroll mode on Android ListViews.
			 */
			fastScroll: boolean;

			/**
			 * Sets fixedSize mode on Android ListViews.
			 */
			fixedSize: boolean;

			/**
			 * When set to false, the ListView will not draw the divider before the footer view.
			 */
			footerDividersEnabled: boolean;

			/**
			 * List view footer title.
			 */
			footerTitle: string;

			/**
			 * List view footer as a view that will be rendered instead of a label.
			 */
			footerView: Titanium.UI.View;

			/**
			 * When set to false, the ListView will not draw the divider after the header view.
			 */
			headerDividersEnabled: boolean;

			/**
			 * List view header title.
			 */
			headerTitle: string;

			/**
			 * List view header as a view that will be rendered instead of a label.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Determines if the section information is displayed in the search results when using the `searchText` property.
			 */
			keepSectionsInSearch: boolean;

			/**
			 * The manner in which the keyboard is dismissed when a drag begins in the list view.
			 */
			keyboardDismissMode: number;

			/**
			 * Determines if the list view should use lazy loading to load remote images.
			 */
			lazyLoadingEnabled: boolean;

			/**
			 * The insets for the list view header and footer.
			 */
			listSeparatorInsets: HorizontalInsets;

			/**
			 * Determines if empty sections are retained when the user completes editing the list view.
			 */
			pruneSectionsOnEdit: boolean;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			pullView: Titanium.UI.View;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * Determines if the list view should allow drag-and-drop even without going into the editing mode
			 */
			requiresEditingToMove: boolean;

			/**
			 * The background color of the search results (iOS-only).
			 */
			resultsBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Separator line color between rows inside search results,
			 * as a color name or hex triplet (iOS-only).
			 */
			resultsSeparatorColor: string | Titanium.UI.Color;

			/**
			 * The insets for search results separators (applies to all cells & iOS-only).
			 */
			resultsSeparatorInsets: HorizontalInsets;

			/**
			 * The separator style of the search results (iOS-only).
			 */
			resultsSeparatorStyle: number;

			/**
			 * The insets for list view cells (applies to all cells).
			 */
			rowSeparatorInsets: HorizontalInsets;

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * The string to use as the search parameter.
			 */
			searchText: string;

			/**
			 * Search field to use for the list view.
			 */
			searchView: Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * Number of sections in this list view.
			 */
			readonly sectionCount: number;

			/**
			 * Padding above each section header.
			 */
			sectionHeaderTopPadding: number;

			/**
			 * Array of objects (with `title` and `index` properties) to control the list view index.
			 */
			sectionIndexTitles: ListViewIndexEntry[];

			/**
			 * Sections of this list.
			 */
			sections: Titanium.UI.ListSection[];

			/**
			 * Returns the selected list view items.
			 */
			selectedItems: ListItemEventType[];

			/**
			 * Separator line color between items, as a color name or hex triplet.
			 */
			separatorColor: string | Titanium.UI.Color;

			/**
			 * height of the ListView separator.
			 */
			separatorHeight: string | number;

			/**
			 * The insets for list view separators (applies to all cells).
			 * @deprecated Use [Titanium.UI.ListView.listSeparatorInsets](Titanium.UI.ListView.listSeparatorInsets) instead.
			 */
			separatorInsets: HorizontalInsets;

			/**
			 * Separator style constant.
			 */
			separatorStyle: number;

			/**
			 * A Boolean indicating whether search bar will be in navigation bar.
			 */
			showSearchBarInNavBar: boolean;

			/**
			 * Determines whether the selection checkmark is displayed on selected items.
			 */
			showSelectionCheck: boolean;

			/**
			 * Determines whether this list view displays a vertical scroll indicator.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Style of the list view.
			 */
			style: number;

			/**
			 * The insets for the table view header and footer.
			 * @deprecated Use [Titanium.UI.ListView.listSeparatorInsets](Titanium.UI.ListView.listSeparatorInsets) instead.
			 */
			tableSeparatorInsets: HorizontalInsets;

			/**
			 * Contain key-value pairs mapping a style name (key) to an <ItemTemplate> (value).
			 */
			templates: any;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: boolean;

			/**
			 * Controls the scroll-to-top gesture.
			 */
			willScrollOnStatusTap: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ListViewEventMap>(name: K, callback: (this: Titanium.UI.ListView, event: ListViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a reference item in the list view.
			 */
			addMarker(markerProps: ListViewMarkerProps): void;

			/**
			 * Appends a single section or an array of sections to the end of the list.
			 */
			appendSection(section: Titanium.UI.ListSection | Titanium.UI.ListSection[], animation?: ListViewAnimationProperties): void;

			/**
			 * Deletes an existing section.
			 */
			deleteSectionAt(sectionIndex: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Deselects a specific item.
			 */
			deselectItem(sectionIndex: number, itemIndex: number): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ListViewEventMap>(name: K, event?: ListViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Inserts a section or an array of sections at a specific index.
			 */
			insertSectionAt(sectionIndex: number, section: Titanium.UI.ListSection | Titanium.UI.ListSection[], animation?: ListViewAnimationProperties): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ListViewEventMap>(name: K, callback: (this: Titanium.UI.ListView, event: ListViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Replaces an existing section.
			 */
			replaceSectionAt(sectionIndex: number, section: Titanium.UI.ListSection, animation?: ListViewAnimationProperties): void;

			/**
			 * Scrolls to a specific item.
			 */
			scrollToItem(sectionIndex: number, itemIndex: number, animation?: ListViewAnimationProperties): void;

			/**
			 * Selects an item in the list using the specified item and section indices.
			 */
			selectItem(sectionIndex: number, itemIndex: number): void;

			/**
			 * Sets this list view's content insets.
			 */
			setContentInsets(edgeInsets: Padding, options?: AnimatedWithDurationOptions): void;

			/**
			 * Sets the value of the content offset of the list view without animation by default.
			 */
			setContentOffset(contentOffset: Point, options?: AnimatedOptions): void;

			/**
			 * Sets a reference item in the list view.
			 */
			setMarker(markerProps: ListViewMarkerProps): void;

		}
		/**
		 * Base event for class Titanium.UI.MaskedImage
		 */
		interface MaskedImageBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.MaskedImage;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface MaskedImage_click_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface MaskedImage_dblclick_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface MaskedImage_doubletap_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface MaskedImage_focus_Event extends MaskedImageBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface MaskedImage_keypressed_Event extends MaskedImageBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface MaskedImage_longclick_Event extends MaskedImageBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface MaskedImage_longpress_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface MaskedImage_pinch_Event extends MaskedImageBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface MaskedImage_postlayout_Event extends MaskedImageBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface MaskedImage_singletap_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface MaskedImage_swipe_Event extends MaskedImageBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface MaskedImage_touchcancel_Event extends MaskedImageBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface MaskedImage_touchend_Event extends MaskedImageBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface MaskedImage_touchmove_Event extends MaskedImageBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface MaskedImage_touchstart_Event extends MaskedImageBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface MaskedImage_twofingertap_Event extends MaskedImageBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface MaskedImageEventMap extends ProxyEventMap {
			click: MaskedImage_click_Event;

			dblclick: MaskedImage_dblclick_Event;

			doubletap: MaskedImage_doubletap_Event;

			focus: MaskedImage_focus_Event;

			keypressed: MaskedImage_keypressed_Event;

			longclick: MaskedImage_longclick_Event;

			longpress: MaskedImage_longpress_Event;

			pinch: MaskedImage_pinch_Event;

			postlayout: MaskedImage_postlayout_Event;

			singletap: MaskedImage_singletap_Event;

			swipe: MaskedImage_swipe_Event;

			touchcancel: MaskedImage_touchcancel_Event;

			touchend: MaskedImage_touchend_Event;

			touchmove: MaskedImage_touchmove_Event;

			touchstart: MaskedImage_touchstart_Event;

			twofingertap: MaskedImage_twofingertap_Event;

		}
		/**
		 * A control that displays an image composited with a background image or color.
		 */
		class MaskedImage extends Titanium.UI.View {
			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Image drawn as the Foreground image.
			 */
			image: string;

			/**
			 * Image drawn as the background image.
			 */
			mask: string;

			/**
			 * Blend mode to use to combine layers.
			 */
			mode: number;

			/**
			 * Color to combine with the image, as a color name or hex triplet.
			 */
			tint: string | Titanium.UI.Color;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof MaskedImageEventMap>(name: K, callback: (this: Titanium.UI.MaskedImage, event: MaskedImageEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof MaskedImageEventMap>(name: K, event?: MaskedImageEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof MaskedImageEventMap>(name: K, callback: (this: Titanium.UI.MaskedImage, event: MaskedImageEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * The 2D Matrix is an object for holding values for an affine transformation matrix.
		 */
		class Matrix2D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			a: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			b: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			c: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			d: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			tx: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			ty: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by combining two existing matrices.
			 */
			multiply(t2: Titanium.UI.Matrix2D): Titanium.UI.Matrix2D;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, toAngle?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a `Matrix2D` object that specifies a scaling animation from one scale to another.
			 */
			scale(sx: number, sy: number, toSx?: number, toSy?: number): Titanium.UI.Matrix2D;

			/**
			 * Returns a matrix constructed by applying a translation transform to this matrix.
			 */
			translate(tx: number, ty: number): Titanium.UI.Matrix2D;

		}
		/**
		 * The 3D Matrix is an object for holding values for a 3D affine transform.
		 */
		class Matrix3D extends Titanium.Proxy {
			/**
			 * The entry at position [1,1] in the matrix.
			 */
			m11: number;

			/**
			 * The entry at position [1,2] in the matrix.
			 */
			m12: number;

			/**
			 * The entry at position [1,3] in the matrix.
			 */
			m13: number;

			/**
			 * The entry at position [1,4] in the matrix.
			 */
			m14: number;

			/**
			 * The entry at position [2,1] in the matrix.
			 */
			m21: number;

			/**
			 * The entry at position [2,2] in the matrix.
			 */
			m22: number;

			/**
			 * The entry at position [2,3] in the matrix.
			 */
			m23: number;

			/**
			 * The entry at position [2,4] in the matrix.
			 */
			m24: number;

			/**
			 * The entry at position [3,1] in the matrix.
			 */
			m31: number;

			/**
			 * The entry at position [3,2] in the matrix.
			 */
			m32: number;

			/**
			 * The entry at position [3,3] in the matrix.
			 */
			m33: number;

			/**
			 * The entry at position [3,4] in the matrix.
			 */
			m34: number;

			/**
			 * The entry at position [4,1] in the matrix.
			 */
			m41: number;

			/**
			 * The entry at position [4,2] in the matrix.
			 */
			m42: number;

			/**
			 * The entry at position [4,3] in the matrix.
			 */
			m43: number;

			/**
			 * The entry at position [4,4] in the matrix.
			 */
			m44: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns a matrix constructed by inverting this matrix.
			 */
			invert(): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by combining two existing matrix.
			 */
			multiply(t2: Titanium.UI.Matrix3D): Titanium.UI.Matrix3D;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Returns a matrix constructed by rotating this matrix.
			 */
			rotate(angle: number, x: number, y: number, z: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by scaling this matrix.
			 */
			scale(sx: number, sy: number, sz: number): Titanium.UI.Matrix3D;

			/**
			 * Returns a matrix constructed by translating an existing matrix.
			 */
			translate(tx: number, ty: number, tz: number): Titanium.UI.Matrix3D;

		}
		/**
		 * Base event for class Titanium.UI.NavigationWindow
		 */
		interface NavigationWindowBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.NavigationWindow;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface NavigationWindow_click_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface NavigationWindow_dblclick_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface NavigationWindow_doubletap_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the window gains focus.
		 */
		interface NavigationWindow_focus_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface NavigationWindow_keypressed_Event extends NavigationWindowBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface NavigationWindow_longclick_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface NavigationWindow_longpress_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface NavigationWindow_pinch_Event extends NavigationWindowBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface NavigationWindow_postlayout_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface NavigationWindow_singletap_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface NavigationWindow_swipe_Event extends NavigationWindowBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface NavigationWindow_touchcancel_Event extends NavigationWindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface NavigationWindow_touchend_Event extends NavigationWindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface NavigationWindow_touchmove_Event extends NavigationWindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface NavigationWindow_touchstart_Event extends NavigationWindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface NavigationWindow_twofingertap_Event extends NavigationWindowBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the back button is pressed by the user.
		 */
		interface NavigationWindow_androidback_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the Camera button is released.
		 */
		interface NavigationWindow_androidcamera_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the Camera button is half-pressed then released.
		 */
		interface NavigationWindow_androidfocus_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the Search button is released.
		 */
		interface NavigationWindow_androidsearch_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the volume down button is released.
		 */
		interface NavigationWindow_androidvoldown_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the volume up button is released.
		 */
		interface NavigationWindow_androidvolup_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the window loses focus.
		 */
		interface NavigationWindow_blur_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the window is closed.
		 */
		interface NavigationWindow_close_Event extends NavigationWindowBaseEvent {
		}
		/**
		 * Fired when the window is opened.
		 */
		interface NavigationWindow_open_Event extends NavigationWindowBaseEvent {
		}
		interface NavigationWindowEventMap extends ProxyEventMap {
			androidback: NavigationWindow_androidback_Event;

			androidcamera: NavigationWindow_androidcamera_Event;

			androidfocus: NavigationWindow_androidfocus_Event;

			androidsearch: NavigationWindow_androidsearch_Event;

			androidvoldown: NavigationWindow_androidvoldown_Event;

			androidvolup: NavigationWindow_androidvolup_Event;

			blur: NavigationWindow_blur_Event;

			click: NavigationWindow_click_Event;

			close: NavigationWindow_close_Event;

			dblclick: NavigationWindow_dblclick_Event;

			doubletap: NavigationWindow_doubletap_Event;

			focus: NavigationWindow_focus_Event;

			keypressed: NavigationWindow_keypressed_Event;

			longclick: NavigationWindow_longclick_Event;

			longpress: NavigationWindow_longpress_Event;

			open: NavigationWindow_open_Event;

			pinch: NavigationWindow_pinch_Event;

			postlayout: NavigationWindow_postlayout_Event;

			singletap: NavigationWindow_singletap_Event;

			swipe: NavigationWindow_swipe_Event;

			touchcancel: NavigationWindow_touchcancel_Event;

			touchend: NavigationWindow_touchend_Event;

			touchmove: NavigationWindow_touchmove_Event;

			touchstart: NavigationWindow_touchstart_Event;

			twofingertap: NavigationWindow_twofingertap_Event;

		}
		/**
		 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
		 * content.
		 */
		class NavigationWindow extends Titanium.UI.Window {
			/**
			 * Title for the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitle: never;

			/**
			 * The image to show as the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitleImage: never;

			/**
			 * Background color for the nav bar, as a color name or hex triplet.
			 */
			barColor: never;

			/**
			 * Background image for the nav bar, specified as a URL to a local image.
			 */
			barImage: never;

			/**
			 * Set this to true to hide the shadow image of the navigation bar.
			 */
			hideShadow: never;

			/**
			 * View to show in the left nav bar area.
			 */
			leftNavButton: never;

			/**
			 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
			 */
			navBarHidden: never;

			/**
			 * The tintColor to apply to the navigation bar.
			 */
			navTintColor: never;

			/**
			 * View to show in the right nav bar area.
			 */
			rightNavButton: never;

			/**
			 * Shadow image for the navigation bar, specified as a URL to a local image..
			 */
			shadowImage: never;

			/**
			 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
			 */
			swipeToClose: never;

			/**
			 * Boolean value indicating if the tab bar should be hidden.
			 */
			tabBarHidden: never;

			/**
			 * Title of the window.
			 */
			title: never;

			/**
			 * View to show in the title area of the nav bar.
			 */
			titleControl: never;

			/**
			 * Image to show in the title area of the nav bar, specified as a local file path or URL.
			 */
			titleImage: never;

			/**
			 * Title prompt for the window.
			 */
			titlePrompt: never;

			/**
			 * Key identifying a string from the locale file to use for the window title.
			 */
			titleid: never;

			/**
			 * Key identifying a string from the locale file to use for the window title prompt.
			 */
			titlepromptid: never;

			/**
			 * Array of button objects to show in the window's toolbar.
			 */
			toolbar: never;

			/**
			 * Use a transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 */
			transitionAnimation: never;

			/**
			 * Boolean value indicating if the nav bar is translucent.
			 */
			translucent: never;

			/**
			 * Window to add to this navigation window.
			 */
			window: Titanium.UI.Window;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof NavigationWindowEventMap>(name: K, callback: (this: Titanium.UI.NavigationWindow, event: NavigationWindowEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Closes a window and removes it from the navigation window.
			 */
			closeWindow(window: Titanium.UI.Window, options: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof NavigationWindowEventMap>(name: K, event?: NavigationWindowEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides the tab bar. Must be called before opening the window.
			 */
			hideTabBar: never;

			/**
			 * Opens a window within the navigation window.
			 */
			openWindow(window: Titanium.UI.Window, options?: AnimatedOptions): void;

			/**
			 * Closes all windows that are currently opened inside the navigation window.
			 */
			popToRootWindow(options?: AnimatedOptions): void;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof NavigationWindowEventMap>(name: K, callback: (this: Titanium.UI.NavigationWindow, event: NavigationWindowEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Sets the array of items to show in the window's toolbar.
			 */
			setToolbar: never;

		}
		/**
		 * A toast notification.
		 */
		class Notification extends Titanium.Proxy {
			/**
			 * Determines how long the notification stays on screen.
			 */
			duration: number;

			/**
			 * Determines the location at which the notification should appear on the screen.
			 */
			gravity: number;

			/**
			 * Horizontal placement of the notification, *as a fraction of the screen width*.
			 */
			horizontalMargin: number;

			/**
			 * Notification text to display.
			 */
			message: string;

			/**
			 * Vertical placement of the notifcation, *as a fraction of the screen height*.
			 */
			verticalMargin: number;

			/**
			 * X offset from the default position, in pixels.
			 */
			xOffset: number;

			/**
			 * Y offset from the default position, in pixels.
			 */
			yOffset: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Show the notification.
			 */
			show(): void;

		}
		/**
		 * Base event for class Titanium.UI.OptionBar
		 */
		interface OptionBarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.OptionBar;

		}
		/**
		 * Fired when an option has been selected.
		 */
		interface OptionBar_click_Event extends OptionBarBaseEvent {
			/**
			 * Index of the option clicked on.
			 */
			index: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface OptionBar_dblclick_Event extends OptionBarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface OptionBar_doubletap_Event extends OptionBarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface OptionBar_focus_Event extends OptionBarBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface OptionBar_keypressed_Event extends OptionBarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface OptionBar_longclick_Event extends OptionBarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface OptionBar_longpress_Event extends OptionBarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface OptionBar_pinch_Event extends OptionBarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface OptionBar_postlayout_Event extends OptionBarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface OptionBar_singletap_Event extends OptionBarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface OptionBar_swipe_Event extends OptionBarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface OptionBar_touchcancel_Event extends OptionBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface OptionBar_touchend_Event extends OptionBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface OptionBar_touchmove_Event extends OptionBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface OptionBar_touchstart_Event extends OptionBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface OptionBar_twofingertap_Event extends OptionBarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface OptionBarEventMap extends ProxyEventMap {
			click: OptionBar_click_Event;

			dblclick: OptionBar_dblclick_Event;

			doubletap: OptionBar_doubletap_Event;

			focus: OptionBar_focus_Event;

			keypressed: OptionBar_keypressed_Event;

			longclick: OptionBar_longclick_Event;

			longpress: OptionBar_longpress_Event;

			pinch: OptionBar_pinch_Event;

			postlayout: OptionBar_postlayout_Event;

			singletap: OptionBar_singletap_Event;

			swipe: OptionBar_swipe_Event;

			touchcancel: OptionBar_touchcancel_Event;

			touchend: OptionBar_touchend_Event;

			touchmove: OptionBar_touchmove_Event;

			touchstart: OptionBar_touchstart_Event;

			twofingertap: OptionBar_twofingertap_Event;

		}
		/**
		 * A bar of selectable buttons where only 1 can be selected at a time.
		 */
		class OptionBar extends Titanium.UI.View {
			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Index of the currently selected option.
			 */
			index: number;

			/**
			 * Array of labels for the option bar.
			 */
			labels: string[] | BarItemType[];

			/**
			 * Specifies the layout direction such as 'horizontal' or 'vertical'.
			 */
			layout: string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof OptionBarEventMap>(name: K, callback: (this: Titanium.UI.OptionBar, event: OptionBarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof OptionBarEventMap>(name: K, event?: OptionBarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof OptionBarEventMap>(name: K, callback: (this: Titanium.UI.OptionBar, event: OptionBarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * Base event for class Titanium.UI.OptionDialog
		 */
		interface OptionDialogBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.OptionDialog;

		}
		/**
		 * Fired when an option of this dialog is clicked or, under certain circumstances, when this
		 * dialog is dismissed.
		 */
		interface OptionDialog_click_Event extends OptionDialogBaseEvent {
			/**
			 * Indicates whether the index returned by the `index` property relates to a button rather
			 * than an option item.
			 */
			button: boolean;

			/**
			 * Boolean type on Android; Number on iOS.
			 * On Android, indicates whether the cancel button was clicked, in which
			 * case returns `true`.
			 * On iOS, the value of the [cancel](Titanium.UI.OptionDialog.cancel)
			 * property is returned, if defined, or `-1` otherwise.
			 */
			cancel: boolean | number;

			/**
			 * Index of the destructive option if defined or `-1` otherwise.
			 */
			destructive: number;

			/**
			 * Index of the option that was pressed. See description for result of the dialog being
			 * dismissed in some other way.
			 */
			index: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface OptionDialog_dblclick_Event extends OptionDialogBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface OptionDialog_doubletap_Event extends OptionDialogBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface OptionDialog_focus_Event extends OptionDialogBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface OptionDialog_keypressed_Event extends OptionDialogBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface OptionDialog_longclick_Event extends OptionDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface OptionDialog_longpress_Event extends OptionDialogBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface OptionDialog_pinch_Event extends OptionDialogBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface OptionDialog_postlayout_Event extends OptionDialogBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface OptionDialog_singletap_Event extends OptionDialogBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface OptionDialog_swipe_Event extends OptionDialogBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface OptionDialog_touchcancel_Event extends OptionDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface OptionDialog_touchend_Event extends OptionDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface OptionDialog_touchmove_Event extends OptionDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface OptionDialog_touchstart_Event extends OptionDialogBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface OptionDialog_twofingertap_Event extends OptionDialogBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface OptionDialogEventMap extends ProxyEventMap {
			click: OptionDialog_click_Event;

			dblclick: OptionDialog_dblclick_Event;

			doubletap: OptionDialog_doubletap_Event;

			focus: OptionDialog_focus_Event;

			keypressed: OptionDialog_keypressed_Event;

			longclick: OptionDialog_longclick_Event;

			longpress: OptionDialog_longpress_Event;

			pinch: OptionDialog_pinch_Event;

			postlayout: OptionDialog_postlayout_Event;

			singletap: OptionDialog_singletap_Event;

			swipe: OptionDialog_swipe_Event;

			touchcancel: OptionDialog_touchcancel_Event;

			touchend: OptionDialog_touchend_Event;

			touchmove: OptionDialog_touchmove_Event;

			touchstart: OptionDialog_touchstart_Event;

			twofingertap: OptionDialog_twofingertap_Event;

		}
		/**
		 * An option dialog is a modal view that includes a message and one or more option items positioned
		 * in the middle of the display on Android and at the bottom edge on iOS. On Android, buttons may
		 * be added below the options.
		 */
		class OptionDialog extends Titanium.UI.View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * View to load inside the message area, to create a custom layout.
			 */
			androidView: Titanium.UI.View;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * List of button names.
			 */
			buttonNames: string[];

			/**
			 * Index to define the cancel option.
			 */
			cancel: number;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * View's clipping behavior.
			 */
			clipMode: never;

			/**
			 * Index to define the destructive option, indicated by a visual cue when rendered.
			 */
			destructive: number;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * Boolean value indicating if the option dialog should have an opaque background.
			 */
			opaquebackground: boolean;

			/**
			 * List of option names to display in the dialog.
			 */
			options: string[];

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: never;

			/**
			 * Boolean value indicating if the option dialog should only be cancelled by user gesture or by hide method.
			 */
			persistent: boolean;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * Defines the default selected option. Since `8.1.0`, if not defined or -1 it will show a normal list instead of radio buttons.
			 */
			selectedIndex: number;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * Title of the dialog.
			 */
			title: string;

			/**
			 * Key identifying a string in the locale file to use for the title text.
			 */
			titleid: string;

			/**
			 * The view's top position.
			 */
			top: never;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: never;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: never;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof OptionDialogEventMap>(name: K, callback: (this: Titanium.UI.OptionDialog, event: OptionDialogEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof OptionDialogEventMap>(name: K, event?: OptionDialogEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides this dialog.
			 */
			hide(params?: hideParams): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof OptionDialogEventMap>(name: K, callback: (this: Titanium.UI.OptionDialog, event: OptionDialogEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Shows this dialog.
			 */
			show(params?: showParams): void;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage: never;

		}
		/**
		 * Base event for class Titanium.UI.Picker
		 */
		interface PickerBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Picker;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Picker_click_Event extends PickerBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Picker_dblclick_Event extends PickerBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Picker_doubletap_Event extends PickerBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Picker_focus_Event extends PickerBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Picker_keypressed_Event extends PickerBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Picker_longclick_Event extends PickerBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Picker_longpress_Event extends PickerBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Picker_pinch_Event extends PickerBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Picker_postlayout_Event extends PickerBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Picker_singletap_Event extends PickerBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Picker_swipe_Event extends PickerBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Picker_touchcancel_Event extends PickerBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Picker_touchend_Event extends PickerBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Picker_touchmove_Event extends PickerBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Picker_touchstart_Event extends PickerBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Picker_twofingertap_Event extends PickerBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the value of any column's row is changed.
		 */
		interface Picker_change_Event extends PickerBaseEvent {
			/**
			 * The column object. On iOS, only applicable to <Titanium.UI.PICKER_TYPE_PLAIN>
			 * picker types.
			 */
			column: Titanium.UI.PickerColumn;

			/**
			 * Selected column index. On iOS, only applicable to <Titanium.UI.PICKER_TYPE_PLAIN>
			 * picker types.
			 */
			columnIndex: number;

			/**
			 * The selected duration in milliseconds. Applicable to <Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER> picker types.
			 */
			countDownDuration: number;

			/**
			 * The row object. On iOS, only applicable to <Titanium.UI.PICKER_TYPE_PLAIN> picker types.
			 */
			row: Titanium.UI.PickerRow;

			/**
			 * Selected row index. On iOS, only applicable to <Titanium.UI.PICKER_TYPE_PLAIN>
			 * picker types.
			 */
			rowIndex: number;

			/**
			 * Array of selected values, one element per column in the picker. Applicable to
			 * <Titanium.UI.PICKER_TYPE_PLAIN> picker types.
			 */
			selectedValue: string[];

			/**
			 * The selected value. Applicable to date/time pickers only. This property is read-only
			 * on Android.
			 */
			value: string;

		}
		interface PickerEventMap extends ProxyEventMap {
			change: Picker_change_Event;

			click: Picker_click_Event;

			dblclick: Picker_dblclick_Event;

			doubletap: Picker_doubletap_Event;

			focus: Picker_focus_Event;

			keypressed: Picker_keypressed_Event;

			longclick: Picker_longclick_Event;

			longpress: Picker_longpress_Event;

			pinch: Picker_pinch_Event;

			postlayout: Picker_postlayout_Event;

			singletap: Picker_singletap_Event;

			swipe: Picker_swipe_Event;

			touchcancel: Picker_touchcancel_Event;

			touchend: Picker_touchend_Event;

			touchmove: Picker_touchmove_Event;

			touchstart: Picker_touchstart_Event;

			twofingertap: Picker_twofingertap_Event;

		}
		/**
		 * A control used to select one or more fixed values.
		 */
		class Picker extends Titanium.UI.View {
			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Background color of the picker, as a color name or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Border style to use when picker is shown as a text field or drop-down field.
			 */
			borderStyle: number;

			/**
			 * Determines whether the calenderView is visible.
			 */
			calendarViewShown: boolean;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Text color of the Picker
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Columns used for this picker, as an array of <Titanium.UI.PickerColumn> objects.
			 */
			columns: Titanium.UI.PickerColumn[];

			/**
			 * Duration in milliseconds used for a Countdown Timer picker.
			 */
			countDownDuration: number;

			/**
			 * Determines how a date or time picker should appear.
			 */
			datePickerStyle: number;

			/**
			 * Sets the text color of date- and time-pickers.
			 */
			dateTimeColor: string | Titanium.UI.Color;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Determines whether the Time pickers display in 24-hour or 12-hour clock format.
			 */
			format24: boolean;

			/**
			 * Text to be shown above date/time when picker is shown as a text field or drop-down field.
			 */
			hintText: string;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * Locale used when displaying Date and Time picker values.
			 */
			locale: string;

			/**
			 * Maximum date displayed when a Date picker is in use.
			 */
			maxDate: Date;

			/**
			 * Minimum date displayed when a Date picker is in use.
			 */
			minDate: Date;

			/**
			 * Interval in minutes displayed when one of the Time types of pickers is in use.
			 */
			minuteInterval: number;

			/**
			 * Determines if a multicolumn spinner or single column drop-down picker should be used.
			 */
			nativeSpinner: boolean;

			/**
			 * Determines whether the visual selection indicator is shown.
			 * @deprecated This property is ignored as of Titanium 10.0.1.
			 */
			selectionIndicator: boolean;

			/**
			 * Determines whether calling the method `setSelectedRow` opens when called
			 */
			selectionOpens: boolean;

			/**
			 * The view's tintColor
			 */
			tintColor: never;

			/**
			 * Determines the type of picker displayed
			 */
			type: number;

			/**
			 * Determines if a multicolumn spinner or single column drop-down picker should be used.
			 */
			useSpinner: boolean;

			/**
			 * Date and time value for Date and Time pickers.
			 */
			value: Date;

			/**
			 * Number of visible rows to display. This is only applicable to a plain picker and when the
			 * `useSpinner` is `true`.
			 * @deprecated This property is ignored as of Titanium 10.0.1.
			 */
			visibleItems: number;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds rows or columns to the picker.
			 */
			add(data: Titanium.UI.PickerRow[] | Titanium.UI.PickerRow | Titanium.UI.PickerColumn[] | Titanium.UI.PickerColumn): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof PickerEventMap>(name: K, callback: (this: Titanium.UI.Picker, event: PickerEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof PickerEventMap>(name: K, event?: PickerEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets the selected row for a column, or `null` if none exists.
			 */
			getSelectedRow(index: number): Titanium.UI.PickerRow;

			/**
			 * Repopulates values for a column.
			 */
			reloadColumn(column: Titanium.UI.PickerColumn): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof PickerEventMap>(name: K, callback: (this: Titanium.UI.Picker, event: PickerEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Selects a column's row.
			 */
			setSelectedRow(column: number, row: number, animated?: boolean): void;

			/**
			 * Sets the date and time value property for Date pickers.
			 * @deprecated Use the <Titanium.Picker.value> property instead
			 */
			setValue: never;

			/**
			 * Shows Date picker as a modal dialog.
			 */
			showDatePickerDialog(dictObj: any): void;

			/**
			 * Shows Time picker as a modal dialog.
			 */
			showTimePickerDialog(dictObj: any): void;

		}
		/**
		 * Base event for class Titanium.UI.PickerColumn
		 */
		interface PickerColumnBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.PickerColumn;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface PickerColumn_click_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface PickerColumn_dblclick_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface PickerColumn_doubletap_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface PickerColumn_focus_Event extends PickerColumnBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface PickerColumn_keypressed_Event extends PickerColumnBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface PickerColumn_longclick_Event extends PickerColumnBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface PickerColumn_longpress_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface PickerColumn_pinch_Event extends PickerColumnBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface PickerColumn_postlayout_Event extends PickerColumnBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface PickerColumn_singletap_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface PickerColumn_swipe_Event extends PickerColumnBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface PickerColumn_touchcancel_Event extends PickerColumnBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface PickerColumn_touchend_Event extends PickerColumnBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface PickerColumn_touchmove_Event extends PickerColumnBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface PickerColumn_touchstart_Event extends PickerColumnBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface PickerColumn_twofingertap_Event extends PickerColumnBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface PickerColumnEventMap extends ProxyEventMap {
			click: PickerColumn_click_Event;

			dblclick: PickerColumn_dblclick_Event;

			doubletap: PickerColumn_doubletap_Event;

			focus: PickerColumn_focus_Event;

			keypressed: PickerColumn_keypressed_Event;

			longclick: PickerColumn_longclick_Event;

			longpress: PickerColumn_longpress_Event;

			pinch: PickerColumn_pinch_Event;

			postlayout: PickerColumn_postlayout_Event;

			singletap: PickerColumn_singletap_Event;

			swipe: PickerColumn_swipe_Event;

			touchcancel: PickerColumn_touchcancel_Event;

			touchend: PickerColumn_touchend_Event;

			touchmove: PickerColumn_touchmove_Event;

			touchstart: PickerColumn_touchstart_Event;

			twofingertap: PickerColumn_twofingertap_Event;

		}
		/**
		 * A picker column, representing a selectable group of items in a <Titanium.UI.Picker>.
		 */
		class PickerColumn extends Titanium.UI.View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * View's clipping behavior.
			 */
			clipMode: never;

			/**
			 * Base elevation of the view relative to its parent in pixels.
			 */
			elevation: never;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Sets the behavior when hiding an object to release or keep the free space
			 */
			hiddenBehavior: never;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: never;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: never;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: never;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * Clockwise 2D rotation of the view in degrees.
			 */
			rotation: never;

			/**
			 * Clockwise rotation of the view in degrees (x-axis).
			 */
			rotationX: never;

			/**
			 * Clockwise rotation of the view in degrees (y-axis).
			 */
			rotationY: never;

			/**
			 * Number of rows in this column.
			 */
			readonly rowCount: number;

			/**
			 * Rows of this column.
			 */
			readonly rows: Titanium.UI.PickerRow[];

			/**
			 * Scaling of the view in x-axis in pixels.
			 */
			scaleX: never;

			/**
			 * Scaling of the view in y-axis in pixels.
			 */
			scaleY: never;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * The view's tintColor
			 */
			tintColor: never;

			/**
			 * The view's top position.
			 */
			top: never;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: never;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: never;

			/**
			 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
			 */
			touchFeedbackColor: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * A name to identify this view in activity transition.
			 */
			transitionName: never;

			/**
			 * Horizontal location of the view relative to its left position in pixels.
			 */
			translationX: never;

			/**
			 * Vertical location of the view relative to its top position in pixels.
			 */
			translationY: never;

			/**
			 * Depth of the view relative to its elevation in pixels.
			 */
			translationZ: never;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: never;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: never;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: never;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof PickerColumnEventMap>(name: K, callback: (this: Titanium.UI.PickerColumn, event: PickerColumnEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a row to this column.
			 */
			addRow(row: Titanium.UI.PickerRow): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Removes all previously added motion effects.
			 */
			clearMotionEffects: never;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof PickerColumnEventMap>(name: K, event?: PickerColumnEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById: never;

			/**
			 * Hides this view.
			 */
			hide: never;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt: never;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof PickerColumnEventMap>(name: K, callback: (this: Titanium.UI.PickerColumn, event: PickerColumnEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a row from this column.
			 */
			removeRow(row: Titanium.UI.PickerRow): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Makes this view visible.
			 */
			show: never;

			/**
			 * Starts a batch update of this view's layout properties.
			 * @deprecated Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
			 */
			startLayout: never;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage: never;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 * @deprecated Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
			 */
			updateLayout: never;

		}
		/**
		 * Base event for class Titanium.UI.PickerRow
		 */
		interface PickerRowBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.PickerRow;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface PickerRow_click_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface PickerRow_dblclick_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface PickerRow_doubletap_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface PickerRow_focus_Event extends PickerRowBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface PickerRow_keypressed_Event extends PickerRowBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface PickerRow_longclick_Event extends PickerRowBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface PickerRow_longpress_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface PickerRow_pinch_Event extends PickerRowBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface PickerRow_postlayout_Event extends PickerRowBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface PickerRow_singletap_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface PickerRow_swipe_Event extends PickerRowBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface PickerRow_touchcancel_Event extends PickerRowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface PickerRow_touchend_Event extends PickerRowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface PickerRow_touchmove_Event extends PickerRowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface PickerRow_touchstart_Event extends PickerRowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface PickerRow_twofingertap_Event extends PickerRowBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface PickerRowEventMap extends ProxyEventMap {
			click: PickerRow_click_Event;

			dblclick: PickerRow_dblclick_Event;

			doubletap: PickerRow_doubletap_Event;

			focus: PickerRow_focus_Event;

			keypressed: PickerRow_keypressed_Event;

			longclick: PickerRow_longclick_Event;

			longpress: PickerRow_longpress_Event;

			pinch: PickerRow_pinch_Event;

			postlayout: PickerRow_postlayout_Event;

			singletap: PickerRow_singletap_Event;

			swipe: PickerRow_swipe_Event;

			touchcancel: PickerRow_touchcancel_Event;

			touchend: PickerRow_touchend_Event;

			touchmove: PickerRow_touchmove_Event;

			touchstart: PickerRow_touchstart_Event;

			twofingertap: PickerRow_twofingertap_Event;

		}
		/**
		 * A picker row, representing a selectable item in a <Titanium.UI.Picker>.
		 */
		class PickerRow extends Titanium.UI.View {
			/**
			 * Color of the item text, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Font to use for the item text.
			 */
			font: Font;

			/**
			 * Item text.
			 */
			title: string;

			/**
			 * Adds a child view to this picker row, to provide a custom row.
			 */
			add(view: Titanium.UI.View): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof PickerRowEventMap>(name: K, callback: (this: Titanium.UI.PickerRow, event: PickerRowEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof PickerRowEventMap>(name: K, event?: PickerRowEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof PickerRowEventMap>(name: K, callback: (this: Titanium.UI.PickerRow, event: PickerRowEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.ProgressBar
		 */
		interface ProgressBarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ProgressBar;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ProgressBar_click_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ProgressBar_dblclick_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ProgressBar_doubletap_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ProgressBar_focus_Event extends ProgressBarBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ProgressBar_keypressed_Event extends ProgressBarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ProgressBar_longclick_Event extends ProgressBarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ProgressBar_longpress_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ProgressBar_pinch_Event extends ProgressBarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ProgressBar_postlayout_Event extends ProgressBarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ProgressBar_singletap_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ProgressBar_swipe_Event extends ProgressBarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ProgressBar_touchcancel_Event extends ProgressBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ProgressBar_touchend_Event extends ProgressBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ProgressBar_touchmove_Event extends ProgressBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ProgressBar_touchstart_Event extends ProgressBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ProgressBar_twofingertap_Event extends ProgressBarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ProgressBarEventMap extends ProxyEventMap {
			click: ProgressBar_click_Event;

			dblclick: ProgressBar_dblclick_Event;

			doubletap: ProgressBar_doubletap_Event;

			focus: ProgressBar_focus_Event;

			keypressed: ProgressBar_keypressed_Event;

			longclick: ProgressBar_longclick_Event;

			longpress: ProgressBar_longpress_Event;

			pinch: ProgressBar_pinch_Event;

			postlayout: ProgressBar_postlayout_Event;

			singletap: ProgressBar_singletap_Event;

			swipe: ProgressBar_swipe_Event;

			touchcancel: ProgressBar_touchcancel_Event;

			touchend: ProgressBar_touchend_Event;

			touchmove: ProgressBar_touchmove_Event;

			touchstart: ProgressBar_touchstart_Event;

			twofingertap: ProgressBar_twofingertap_Event;

		}
		/**
		 * A progress bar.
		 */
		class ProgressBar extends Titanium.UI.View {
			/**
			 * Enables smooth progress change animation when changing the value.
			 */
			animated: boolean;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Color of the progress bar message, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Font for the progress bar text.
			 */
			font: Font;

			/**
			 * Maximum value of the progress bar.
			 */
			max: number;

			/**
			 * Progress bar text.
			 */
			message: string;

			/**
			 * Minimum value of the progress bar.
			 */
			min: number;

			/**
			 * Style of the progress bar.
			 */
			style: number;

			/**
			 * The color shown for the portion of the progress bar that is filled.
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * The color shown for the portion of the progress bar that is not filled.
			 */
			trackTintColor: string | Titanium.UI.Color;

			/**
			 * Current value of the progress bar.
			 */
			value: number;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ProgressBarEventMap>(name: K, callback: (this: Titanium.UI.ProgressBar, event: ProgressBarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ProgressBarEventMap>(name: K, event?: ProgressBarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ProgressBarEventMap>(name: K, callback: (this: Titanium.UI.ProgressBar, event: ProgressBarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * Base event for class Titanium.UI.RefreshControl
		 */
		interface RefreshControlBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.RefreshControl;

		}
		/**
		 * Fired in response to a user initiated an action to refresh the contents of the
		 * table view, list view or scroll view.
		 */
		interface RefreshControl_refreshstart_Event extends RefreshControlBaseEvent {
			/**
			 * This is false. This event does not bubble
			 */
			bubbles: boolean;

		}
		/**
		 * Fired in response to a user finished action to refresh the contents of the
		 * table view, list view or scroll view.
		 */
		interface RefreshControl_refreshend_Event extends RefreshControlBaseEvent {
			/**
			 * This is false. This event does not bubble
			 */
			bubbles: boolean;

		}
		interface RefreshControlEventMap extends ProxyEventMap {
			refreshend: RefreshControl_refreshend_Event;

			refreshstart: RefreshControl_refreshstart_Event;

		}
		/**
		 * The RefreshControl is a representation of the native iOS
		 * [UIRefreshControl](https://developer.apple.com/documentation/uikit/uirefreshcontrol)
		 * and Android [SwipeRefreshLayout](https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html).
		 */
		class RefreshControl extends Titanium.Proxy {
			/**
			 * The tint color for the refresh control, as a color name or hex triplet.
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * The attributed title of the control.
			 */
			title: Titanium.UI.AttributedString;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof RefreshControlEventMap>(name: K, callback: (this: Titanium.UI.RefreshControl, event: RefreshControlEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Tells the control that a refresh operation was started programmatically.
			 */
			beginRefreshing(): void;

			/**
			 * Tells the control that a refresh operation has ended.
			 */
			endRefreshing(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof RefreshControlEventMap>(name: K, event?: RefreshControlEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof RefreshControlEventMap>(name: K, callback: (this: Titanium.UI.RefreshControl, event: RefreshControlEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.ScrollView
		 */
		interface ScrollViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ScrollView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ScrollView_click_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ScrollView_dblclick_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface ScrollView_doubletap_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ScrollView_focus_Event extends ScrollViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ScrollView_keypressed_Event extends ScrollViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ScrollView_longclick_Event extends ScrollViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface ScrollView_longpress_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ScrollView_pinch_Event extends ScrollViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ScrollView_postlayout_Event extends ScrollViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface ScrollView_singletap_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ScrollView_swipe_Event extends ScrollViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface ScrollView_touchcancel_Event extends ScrollViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ScrollView_touchend_Event extends ScrollViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ScrollView_touchmove_Event extends ScrollViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface ScrollView_touchstart_Event extends ScrollViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ScrollView_twofingertap_Event extends ScrollViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the zoom scale factor changes.
		 */
		interface ScrollView_scale_Event extends ScrollViewBaseEvent {
			/**
			 * New scaling factor as a float.
			 */
			scale: number;

		}
		/**
		 * Fired when the scrollable region is scrolled.
		 */
		interface ScrollView_scroll_Event extends ScrollViewBaseEvent {
			/**
			 * The current content size of the scroll view defined by its `width` and `height` properties.
			 */
			contentSize: Size;

			/**
			 * The current scaling factor of the scroll view content. This might not be equal to
			 * the `zoomScale` property or be within the range specified by `minZoomScale` and `maxZoomScale`.
			 * This is only available from Release 3.2.3 of the Titanium Mobile SDK.
			 */
			curZoomScale: number;

			/**
			 * Indicates whether the scroll is decelerating.
			 */
			decelerating: boolean;

			/**
			 * Indicates whether the event was fired during a dragging gesture, where the touch
			 * remained in contact with the display to physically drag the view, as opposed to it being
			 * the result of scrolling momentum.
			 */
			dragging: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

			/**
			 * Indicates whether the event was fired during a zooming operation. This is only available
			 * from Release 3.2.3 of the Titanium Mobile SDK.
			 */
			zooming: boolean;

		}
		/**
		 * Fired when the scrollable region starts being dragged.
		 */
		interface ScrollView_dragStart_Event extends ScrollViewBaseEvent {
		}
		/**
		 * Fired when the scrollable region stops being dragged.
		 */
		interface ScrollView_dragEnd_Event extends ScrollViewBaseEvent {
			/**
			 * Indicates whether scrolling will continue but decelerate, now that the drag gesture has
			 * been released by the touch. If `false`, scrolling will stop immediately.
			 */
			decelerate: boolean;

		}
		/**
		 * Fired when the scrollable region starts being dragged.
		 */
		interface ScrollView_dragstart_Event extends ScrollViewBaseEvent {
		}
		/**
		 * Fired when the scrollable region stops being dragged.
		 */
		interface ScrollView_dragend_Event extends ScrollViewBaseEvent {
			/**
			 * Indicates whether scrolling will continue but decelerate, now that the drag gesture has
			 * been released by the touch. If `false`, scrolling will stop immediately.
			 * Is always `true` on Android.
			 */
			decelerate: boolean;

		}
		interface ScrollViewEventMap extends ProxyEventMap {
			click: ScrollView_click_Event;

			dblclick: ScrollView_dblclick_Event;

			doubletap: ScrollView_doubletap_Event;

			dragEnd: ScrollView_dragEnd_Event;

			dragStart: ScrollView_dragStart_Event;

			dragend: ScrollView_dragend_Event;

			dragstart: ScrollView_dragstart_Event;

			focus: ScrollView_focus_Event;

			keypressed: ScrollView_keypressed_Event;

			longclick: ScrollView_longclick_Event;

			longpress: ScrollView_longpress_Event;

			pinch: ScrollView_pinch_Event;

			postlayout: ScrollView_postlayout_Event;

			scale: ScrollView_scale_Event;

			scroll: ScrollView_scroll_Event;

			singletap: ScrollView_singletap_Event;

			swipe: ScrollView_swipe_Event;

			touchcancel: ScrollView_touchcancel_Event;

			touchend: ScrollView_touchend_Event;

			touchmove: ScrollView_touchmove_Event;

			touchstart: ScrollView_touchstart_Event;

			twofingertap: ScrollView_twofingertap_Event;

		}
		/**
		 * A view that contains a horizontally and/or vertically-scrollable region of content.
		 */
		class ScrollView extends Titanium.UI.View {
			/**
			 * Determines whether this scroll view can cancel subview touches in order to scroll instead.
			 */
			canCancelEvents: boolean;

			/**
			 * Height of the scrollable region.
			 */
			contentHeight: number | string;

			/**
			 * X and Y coordinates to which to reposition the top-left point of the scrollable region.
			 */
			contentOffset: Point;

			/**
			 * Width of the scrollable region.
			 */
			contentWidth: number | string;

			/**
			 * The deceleration rate of the ScrollView.
			 */
			decelerationRate: number;

			/**
			 * Determines whether scroll bounce of the scrollable region is enabled.
			 */
			disableBounce: boolean;

			/**
			 * Determines whether horizontal scroll bounce of the scrollable region is enabled.
			 */
			horizontalBounce: boolean;

			/**
			 * The manner in which the keyboard is dismissed when a drag begins in the scroll view.
			 */
			keyboardDismissMode: number;

			/**
			 * Maximum scaling factor of the scrollable region and its content.
			 */
			maxZoomScale: number;

			/**
			 * Minimum scaling factor of the scrollable region and its content.
			 */
			minZoomScale: number;

			/**
			 * Determines the behavior when the user overscolls the view.
			 */
			overScrollMode: number;

			/**
			 * View positioned above the first row that is only revealed when the user drags the scroll view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * Limits the direction of the scrollable region, overriding the deduced setting. Set to
			 * `horizontal` or `vertical`.
			 */
			scrollType: string;

			/**
			 * Determines whether scrolling is enabled for the view.
			 */
			scrollingEnabled: boolean;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Determines whether the horizontal scroll indicator is visible.
			 */
			showHorizontalScrollIndicator: boolean;

			/**
			 * Determines whether the vertical scroll indicator is visible.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Determines whether vertical scroll bounce of the scrollable region is enabled.
			 */
			verticalBounce: boolean;

			/**
			 * Scaling factor of the scroll view's content.
			 */
			zoomScale: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ScrollViewEventMap>(name: K, callback: (this: Titanium.UI.ScrollView, event: ScrollViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ScrollViewEventMap>(name: K, event?: ScrollViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ScrollViewEventMap>(name: K, callback: (this: Titanium.UI.ScrollView, event: ScrollViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Moves the specified coordinate of the scrollable region into the viewable area.
			 */
			scrollTo(x: number, y: number, options?: AnimatedOptions): void;

			/**
			 * Moves the end of the scrollable region into the viewable area.
			 */
			scrollToBottom(): void;

			/**
			 * Moves the top of the scrollable region into the viewable area.
			 */
			scrollToTop(): void;

			/**
			 * Sets the value of the [contentOffset](Titanium.UI.ScrollView.contentOffset) property.
			 */
			setContentOffset(contentOffsetXY: Point, animated?: AnimatedOptions): void;

			/**
			 * Sets the value of the [zoomScale](Titanium.UI.ScrollView.zoomScale) property.
			 */
			setZoomScale(zoomScale: number, options?: AnimatedOptions): void;

		}
		/**
		 * Base event for class Titanium.UI.ScrollableView
		 */
		interface ScrollableViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.ScrollableView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface ScrollableView_click_Event extends ScrollableViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface ScrollableView_dblclick_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against this page.
		 */
		interface ScrollableView_doubletap_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface ScrollableView_focus_Event extends ScrollableViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface ScrollableView_keypressed_Event extends ScrollableViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface ScrollableView_longclick_Event extends ScrollableViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press against this view.
		 */
		interface ScrollableView_longpress_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface ScrollableView_pinch_Event extends ScrollableViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface ScrollableView_postlayout_Event extends ScrollableViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against this view.
		 */
		interface ScrollableView_singletap_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface ScrollableView_swipe_Event extends ScrollableViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch gesture is interrupted by the device.
		 */
		interface ScrollableView_touchcancel_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface ScrollableView_touchend_Event extends ScrollableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface ScrollableView_touchmove_Event extends ScrollableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture against this view.
		 */
		interface ScrollableView_touchstart_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface ScrollableView_twofingertap_Event extends ScrollableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired repeatedly as the view is being scrolled.
		 */
		interface ScrollableView_scroll_Event extends ScrollableViewBaseEvent {
			/**
			 * Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
			 */
			currentPage: number;

			/**
			 * Current page index that the view is scrolled to as a float. For
			 * example, if the user is holding the `ScrollableView` in between
			 * the first and second page, this will have a value of 0.5.
			 */
			currentPageAsFloat: number;

			/**
			 * The currently visible view.
			 */
			view: Titanium.UI.View;

		}
		/**
		 * Fired when the view has stopped moving completely.
		 */
		interface ScrollableView_scrollend_Event extends ScrollableViewBaseEvent {
			/**
			 * Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
			 */
			currentPage: number;

			/**
			 * The currently visible view.
			 */
			view: Titanium.UI.View;

		}
		/**
		 * Fired when the scrolling drag gesture on the view has been completed.
		 */
		interface ScrollableView_dragend_Event extends ScrollableViewBaseEvent {
			/**
			 * Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
			 */
			currentPage: number;

			/**
			 * The currently visible view.
			 */
			view: Titanium.UI.View;

		}
		interface ScrollableViewEventMap extends ProxyEventMap {
			click: ScrollableView_click_Event;

			dblclick: ScrollableView_dblclick_Event;

			doubletap: ScrollableView_doubletap_Event;

			dragend: ScrollableView_dragend_Event;

			focus: ScrollableView_focus_Event;

			keypressed: ScrollableView_keypressed_Event;

			longclick: ScrollableView_longclick_Event;

			longpress: ScrollableView_longpress_Event;

			pinch: ScrollableView_pinch_Event;

			postlayout: ScrollableView_postlayout_Event;

			scroll: ScrollableView_scroll_Event;

			scrollend: ScrollableView_scrollend_Event;

			singletap: ScrollableView_singletap_Event;

			swipe: ScrollableView_swipe_Event;

			touchcancel: ScrollableView_touchcancel_Event;

			touchend: ScrollableView_touchend_Event;

			touchmove: ScrollableView_touchmove_Event;

			touchstart: ScrollableView_touchstart_Event;

			twofingertap: ScrollableView_twofingertap_Event;

		}
		/**
		 * A view that encapsulates a horizontally-scrolling set of child views, known as pages, navigable
		 * using its built-in horizontal swipe gestures.
		 */
		class ScrollableView extends Titanium.UI.View {
			/**
			 * Number of pages to cache (pre-render).
			 */
			cacheSize: number;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Determines whether the previous and next pages are clipped, so that they are not visible
			 * adjacent to the current page.
			 */
			clipViews: boolean;

			/**
			 * Index of the active page.
			 */
			currentPage: number;

			/**
			 * Color for the current page of the paging control, as a color name or hex triplet.
			 */
			currentPageIndicatorColor: string | Titanium.UI.Color;

			/**
			 * Determines whether page bouncing effect is disabled.
			 */
			disableBounce: boolean;

			/**
			 * Sets the region where this view responds to gestures.
			 */
			hitRect: Dimension;

			/**
			 * Determines the behavior when the user overscolls the view.
			 */
			overScrollMode: number;

			/**
			 * Determines whether the paging control is added as an overlay to the view.
			 */
			overlayEnabled: boolean;

			/**
			 * The padding applied to the scrollable view.
			 */
			padding: Padding;

			/**
			 * Color of the paging control, as a color name or hex triplet.
			 */
			pageIndicatorColor: string | Titanium.UI.Color;

			/**
			 * Alpha value of the paging control.
			 */
			pagingControlAlpha: number;

			/**
			 * Color of the paging control, as a color name or hex triplet.
			 */
			pagingControlColor: string | Titanium.UI.Color;

			/**
			 * Height of the paging control, in pixels.
			 */
			pagingControlHeight: number;

			/**
			 * Determines whether the paging control is displayed at the top or bottom of the view.
			 */
			pagingControlOnTop: boolean;

			/**
			 * Number of milliseconds to wait before hiding the paging control.
			 */
			pagingControlTimeout: number;

			/**
			 * The preferred image for indicators, defined using a local filesystem path, or a `Blob` object containing image data.
			 */
			preferredIndicatorImage: string | Titanium.Blob;

			/**
			 * Determines whether scrolling is enabled for the view.
			 */
			scrollingEnabled: boolean;

			/**
			 * Determines whether the paging control is visible.
			 */
			showPagingControl: boolean;

			/**
			 * Sets the pages within this Scrollable View.
			 */
			views: Titanium.UI.View[];

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ScrollableViewEventMap>(name: K, callback: (this: Titanium.UI.ScrollableView, event: ScrollableViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a new page to this Scrollable View.
			 */
			addView(view: Titanium.UI.View): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ScrollableViewEventMap>(name: K, event?: ScrollableViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Inserts views at the specified position in the [views](Titanium.UI.ScrollableView.views) array.
			 */
			insertViewsAt(position: number, views: ReadonlyArray<Titanium.UI.View>): void;

			/**
			 * Sets the current page to the next consecutive page in <Titanium.UI.ScrollableView.views>.
			 */
			moveNext(): void;

			/**
			 * Sets the current page to the previous consecutive page in <Titanium.UI.ScrollableView.views>.
			 */
			movePrevious(): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ScrollableViewEventMap>(name: K, callback: (this: Titanium.UI.ScrollableView, event: ScrollableViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes an existing page from this Scrollable View.
			 */
			removeView(view: number | Titanium.UI.View): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
			 */
			scrollToView(view: number | Titanium.UI.View): void;

			/**
			 * Sets the indicator image for the specified page.
			 */
			setIndicatorImageForPage(image: string | Titanium.Blob, pageNo: number): void;

		}
		/**
		 * Base event for class Titanium.UI.SearchBar
		 */
		interface SearchBarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.SearchBar;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface SearchBar_click_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface SearchBar_dblclick_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface SearchBar_doubletap_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the search bar gains focus.
		 */
		interface SearchBar_focus_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface SearchBar_keypressed_Event extends SearchBarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface SearchBar_longclick_Event extends SearchBarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface SearchBar_longpress_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface SearchBar_pinch_Event extends SearchBarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface SearchBar_postlayout_Event extends SearchBarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface SearchBar_singletap_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface SearchBar_swipe_Event extends SearchBarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface SearchBar_touchcancel_Event extends SearchBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface SearchBar_touchend_Event extends SearchBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface SearchBar_touchmove_Event extends SearchBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface SearchBar_touchstart_Event extends SearchBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface SearchBar_twofingertap_Event extends SearchBarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the search bar loses focus.
		 */
		interface SearchBar_blur_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		/**
		 * Fired when the bookmark button is pressed.
		 */
		interface SearchBar_bookmark_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		/**
		 * Fired when the cancel button is pressed.
		 */
		interface SearchBar_cancel_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		/**
		 * Fired when the value of the search bar changes.
		 */
		interface SearchBar_change_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		/**
		 * Fired when keyboard search button is pressed.
		 */
		interface SearchBar_return_Event extends SearchBarBaseEvent {
			/**
			 * Value of the search bar.
			 */
			value: string;

		}
		interface SearchBarEventMap extends ProxyEventMap {
			blur: SearchBar_blur_Event;

			bookmark: SearchBar_bookmark_Event;

			cancel: SearchBar_cancel_Event;

			change: SearchBar_change_Event;

			click: SearchBar_click_Event;

			dblclick: SearchBar_dblclick_Event;

			doubletap: SearchBar_doubletap_Event;

			focus: SearchBar_focus_Event;

			keypressed: SearchBar_keypressed_Event;

			longclick: SearchBar_longclick_Event;

			longpress: SearchBar_longpress_Event;

			pinch: SearchBar_pinch_Event;

			postlayout: SearchBar_postlayout_Event;

			return: SearchBar_return_Event;

			singletap: SearchBar_singletap_Event;

			swipe: SearchBar_swipe_Event;

			touchcancel: SearchBar_touchcancel_Event;

			touchend: SearchBar_touchend_Event;

			touchmove: SearchBar_touchmove_Event;

			touchstart: SearchBar_touchstart_Event;

			twofingertap: SearchBar_twofingertap_Event;

		}
		/**
		 * A specialized text field for entering search text.
		 */
		class SearchBar extends Titanium.UI.View {
			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether the text in the search bar is autocorrected during typing.
			 */
			autocorrect: boolean;

			/**
			 * Bar color of the search bar view, as a color name or hex triplet.
			 */
			barColor: string | Titanium.UI.Color;

			/**
			 * The title of the cancel button when the search bar field is focused.
			 */
			cancelButtonTitle: string;

			/**
			 * Color of the text in this text field, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Background image of the text field in disabled state, specified as a local file path or URL.
			 */
			fieldBackgroundDisabledImage: string;

			/**
			 * Background image of the text field, specified as a local file path or URL.
			 */
			fieldBackgroundImage: string;

			/**
			 * Determines whether this SearchBar has focus.
			 */
			readonly focused: boolean;

			/**
			 * Text to show when the search bar field is not focused.
			 */
			hintText: string;

			/**
			 * Hint text color to display when the field is empty.
			 */
			hintTextColor: string | Titanium.UI.Color;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.SearchBar.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Color of the search and close icon. Search icon will only work for `iconified:false`.
			 */
			iconColor: string | Titanium.UI.Color;

			/**
			 * Collapses/expands the search view to/from a search icon.
			 */
			iconified: boolean;

			/**
			 * Set true show as a search icon that expands to a search view when tapped on.
			 */
			iconifiedByDefault: boolean;

			/**
			 * Determines the appearance of the keyboard to be displayed the field is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Keyboard type constant to use when the field is focused.
			 */
			keyboardType: number;

			/**
			 * Single line of text displayed at the top of the search bar.
			 */
			prompt: string;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [prompt](Titanium.UI.SearchBar.prompt) property.
			 */
			promptid: string;

			/**
			 * Determines whether the bookmark button is displayed.
			 */
			showBookmark: boolean;

			/**
			 * Determines whether the cancel button is displayed.
			 */
			showCancel: boolean;

			/**
			 * Determines the style of the search bar.
			 */
			style: number;

			/**
			 * The token of a search text field
			 */
			tokens: string[];

			/**
			 * Value of the search bar.
			 */
			value: string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof SearchBarEventMap>(name: K, callback: (this: Titanium.UI.SearchBar, event: SearchBarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Causes the search bar to lose focus.
			 */
			blur(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof SearchBarEventMap>(name: K, event?: SearchBarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Causes the search bar to gain focus.
			 */
			focus(): void;

			/**
			 * Inserts a new search token at the specified index.
			 */
			insertTokenAtIndex(token: SearchBarToken, index: number): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof SearchBarEventMap>(name: K, callback: (this: Titanium.UI.SearchBar, event: SearchBarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes an existing token at the specified index.
			 */
			removeTokenAtIndex(index: number): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Shows or hides the cancel button.
			 */
			setShowCancel(showCancel: boolean, options?: AnimatedOptions): void;

		}
		/**
		 * Base event for class Titanium.UI.Shortcut
		 */
		interface ShortcutBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Shortcut;

		}
		/**
		 * Fired when a <Titanium.UI.ShortcutItem> was clicked on.
		 */
		interface Shortcut_click_Event extends ShortcutBaseEvent {
			/**
			 * The shortcut item clicked.
			 */
			item: Titanium.UI.ShortcutItem;

		}
		interface ShortcutEventMap extends ProxyEventMap {
			click: Shortcut_click_Event;

		}
		/**
		 * Manage application shortcuts.
		 */
		class Shortcut extends Titanium.Proxy {
			/**
			 * List dynamic shortcuts.
			 */
			readonly items: Titanium.UI.ShortcutItem[];

			/**
			 * List current pinned/static shortcuts.
			 */
			readonly staticItems: Titanium.UI.ShortcutItem[];

			/**
			 * Adds a shortcut item to the application.
			 */
			add(item: Titanium.UI.ShortcutItem): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ShortcutEventMap>(name: K, callback: (this: Titanium.UI.Shortcut, event: ShortcutEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ShortcutEventMap>(name: K, event?: ShortcutEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Fetches a shortcut item by its unique string identifier.
			 */
			getById(id: string): Titanium.UI.ShortcutItem;

			/**
			 * Removes the given shortcut item from the application.
			 */
			remove(item: Titanium.UI.ShortcutItem): void;

			/**
			 * Removes all shortcut items from the application.
			 */
			removeAll(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ShortcutEventMap>(name: K, callback: (this: Titanium.UI.Shortcut, event: ShortcutEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An application shortcut item.
		 */
		class ShortcutItem extends Titanium.Proxy {
			/**
			 * Shortcut data.
			 */
			data: any;

			/**
			 * Description of the shortcut.
			 */
			description: string;

			/**
			 * Shortcut icon.
			 */
			icon: string | number;

			/**
			 * Determines shortcut id.
			 */
			id: string;

			/**
			 * Title of the shortcut.
			 */
			title: string;

			/**
			 * Shortcut visibility.
			 * @deprecated Use [Titanium.UI.Shortcut.items](Titanium.UI.Shortcut.items) to determine if shortcut is active.
			 */
			visible: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hide the shortcut.
			 * @deprecated Use [Titanium.UI.Shortcut.remove](Titanium.UI.Shortcut.remove) instead.
			 */
			hide(): void;

			/**
			 * Pin shortcut to launcher.
			 */
			pin(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Allow the shortcut to show.
			 * @deprecated Use [Titanium.UI.Shortcut.add](Titanium.UI.Shortcut.add) instead.
			 */
			show(): void;

		}
		/**
		 * Base event for class Titanium.UI.Slider
		 */
		interface SliderBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Slider;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Slider_click_Event extends SliderBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Slider_dblclick_Event extends SliderBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Slider_doubletap_Event extends SliderBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Slider_focus_Event extends SliderBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Slider_keypressed_Event extends SliderBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Slider_longclick_Event extends SliderBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Slider_longpress_Event extends SliderBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Slider_pinch_Event extends SliderBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Slider_postlayout_Event extends SliderBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Slider_singletap_Event extends SliderBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Slider_swipe_Event extends SliderBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Slider_touchcancel_Event extends SliderBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Slider_touchend_Event extends SliderBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Slider_touchmove_Event extends SliderBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Slider_touchstart_Event extends SliderBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Slider_twofingertap_Event extends SliderBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the value of the slider changes.
		 */
		interface Slider_change_Event extends SliderBaseEvent {
			/**
			 * True if change was made by the user. False if change was made programmatically.
			 */
			isTrusted: boolean;

			/**
			 * Dictionary with properties `x` and `y` of the thumb's left-top corner in
			 * the control. Available with custom thumb image.
			 */
			thumbOffset: Point;

			/**
			 * Dictionary with properties `width` and `height` of the size of the thumb.
			 * Available with custom thumb image.
			 */
			thumbSize: Size;

			/**
			 * New value of the slider.
			 */
			value: number;

		}
		/**
		 * Fired when the user starts tracking the slider.
		 */
		interface Slider_start_Event extends SliderBaseEvent {
			/**
			 * False. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * Current value of the slider.
			 */
			value: number;

		}
		/**
		 * Fired when the user stops tracking the slider.
		 */
		interface Slider_stop_Event extends SliderBaseEvent {
			/**
			 * False. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * Current value of the slider.
			 */
			value: number;

		}
		interface SliderEventMap extends ProxyEventMap {
			change: Slider_change_Event;

			click: Slider_click_Event;

			dblclick: Slider_dblclick_Event;

			doubletap: Slider_doubletap_Event;

			focus: Slider_focus_Event;

			keypressed: Slider_keypressed_Event;

			longclick: Slider_longclick_Event;

			longpress: Slider_longpress_Event;

			pinch: Slider_pinch_Event;

			postlayout: Slider_postlayout_Event;

			singletap: Slider_singletap_Event;

			start: Slider_start_Event;

			stop: Slider_stop_Event;

			swipe: Slider_swipe_Event;

			touchcancel: Slider_touchcancel_Event;

			touchend: Slider_touchend_Event;

			touchmove: Slider_touchmove_Event;

			touchstart: Slider_touchstart_Event;

			twofingertap: Slider_twofingertap_Event;

		}
		/**
		 * A slider component with a draggable thumb.
		 */
		class Slider extends Titanium.UI.View {
			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Image URL of the slider left track when in the disabled state.
			 */
			disabledLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the disabled state.
			 */
			disabledRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the disabled state.
			 */
			disabledThumbImage: string;

			/**
			 * Boolean to indicate the enabled state of the slider.
			 */
			enabled: boolean;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Image URL of the slider left track when in the highlighted state.
			 */
			highlightedLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the highlighted state.
			 */
			highlightedRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the highlighted state.
			 */
			highlightedThumbImage: string;

			/**
			 * Image URL of the slider left track.
			 */
			leftTrackImage: string;

			/**
			 * Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
			 */
			leftTrackLeftCap: number;

			/**
			 * Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
			 */
			leftTrackTopCap: number;

			/**
			 * Maximum value of the slider.
			 */
			max: number;

			/**
			 * Upper limit on the slider value that can be selected.
			 */
			maxRange: number;

			/**
			 * Minimum value of the slider.
			 */
			min: number;

			/**
			 * Lower limit on the slider value that can be selected.
			 */
			minRange: number;

			/**
			 * Image URL of the slider right track.
			 */
			rightTrackImage: string;

			/**
			 * Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
			 */
			rightTrackLeftCap: number;

			/**
			 * Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
			 */
			rightTrackTopCap: number;

			/**
			 * Image URL of the slider left track when in the selected state.
			 */
			selectedLeftTrackImage: string;

			/**
			 * Image URL of the slider right track when in the selected state.
			 */
			selectedRightTrackImage: string;

			/**
			 * Image URL of the slider thumb when in the selected state.
			 */
			selectedThumbImage: string;

			/**
			 * Separates the thumbImage from the slider track.
			 */
			splitTrack: boolean;

			/**
			 * Image for the slider thumb.
			 */
			thumbImage: string | Titanium.Blob;

			/**
			 * The color shown for the portion of the progress bar that is filled.
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * The color shown for the portion of the progress bar that is not filled.
			 */
			trackTintColor: string | Titanium.UI.Color;

			/**
			 * Current value of the slider.
			 */
			value: number;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof SliderEventMap>(name: K, callback: (this: Titanium.UI.Slider, event: SliderEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof SliderEventMap>(name: K, event?: SliderEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof SliderEventMap>(name: K, callback: (this: Titanium.UI.Slider, event: SliderEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Sets the [value](Titanium.UI.Slider.value) property.
			 */
			setValue(value: number, options?: AnimatedOptions): void;

		}
		/**
		 * Base event for class Titanium.UI.Switch
		 */
		interface SwitchBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Switch;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Switch_click_Event extends SwitchBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Switch_dblclick_Event extends SwitchBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Switch_doubletap_Event extends SwitchBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Switch_focus_Event extends SwitchBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Switch_keypressed_Event extends SwitchBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Switch_longclick_Event extends SwitchBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Switch_longpress_Event extends SwitchBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Switch_pinch_Event extends SwitchBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Switch_postlayout_Event extends SwitchBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Switch_singletap_Event extends SwitchBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Switch_swipe_Event extends SwitchBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Switch_touchcancel_Event extends SwitchBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Switch_touchend_Event extends SwitchBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Switch_touchmove_Event extends SwitchBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Switch_touchstart_Event extends SwitchBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Switch_twofingertap_Event extends SwitchBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the switch value changes.
		 */
		interface Switch_change_Event extends SwitchBaseEvent {
			/**
			 * New value of the switch.
			 */
			value: boolean;

		}
		interface SwitchEventMap extends ProxyEventMap {
			change: Switch_change_Event;

			click: Switch_click_Event;

			dblclick: Switch_dblclick_Event;

			doubletap: Switch_doubletap_Event;

			focus: Switch_focus_Event;

			keypressed: Switch_keypressed_Event;

			longclick: Switch_longclick_Event;

			longpress: Switch_longpress_Event;

			pinch: Switch_pinch_Event;

			postlayout: Switch_postlayout_Event;

			singletap: Switch_singletap_Event;

			swipe: Switch_swipe_Event;

			touchcancel: Switch_touchcancel_Event;

			touchend: Switch_touchend_Event;

			touchmove: Switch_touchmove_Event;

			touchstart: Switch_touchstart_Event;

			twofingertap: Switch_twofingertap_Event;

		}
		/**
		 * An on/off switch control.
		 */
		class Switch extends Titanium.UI.View {
			/**
			 * Determines if there is animation when the switch value changes.
			 */
			animated: boolean;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Color to use for switch text, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Determines whether the switch is enabled.
			 */
			enabled: boolean;

			/**
			 * Font to use for the switch text.
			 */
			font: Font;

			/**
			 * The color used to tint the appearance of the switch when it is turned on.
			 */
			onTintColor: string | Titanium.UI.Color;

			/**
			 * Style of the switch.
			 */
			style: number;

			/**
			 * Horizontal text alignment of the switch title.
			 */
			textAlign: string | number;

			/**
			 * The color used to tint the appearance of the thumb.
			 */
			thumbTintColor: string | Titanium.UI.Color;

			/**
			 * The color used to tint the outline of the switch when it is turned off.
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * Text to display next to the switch, when the checkbox or slider style is in use.
			 */
			title: string;

			/**
			 * Text to display on the switch in its "off" state, when the toggle button style is in use.
			 */
			titleOff: string;

			/**
			 * Text to display on the switch in its "on" state, when the toggle button style is in use.
			 */
			titleOn: string;

			/**
			 * Indicates whether the switch has been turned on or off by the user. May also be set
			 * programmatically.
			 */
			value: boolean;

			/**
			 * Vertical alignment for the text field.
			 */
			verticalAlign: number | string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof SwitchEventMap>(name: K, callback: (this: Titanium.UI.Switch, event: SwitchEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof SwitchEventMap>(name: K, event?: SwitchEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof SwitchEventMap>(name: K, callback: (this: Titanium.UI.Switch, event: SwitchEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * Base event for class Titanium.UI.Tab
		 */
		interface TabBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Tab;

		}
		/**
		 * Fired when this tab is clicked in the tab group.
		 */
		interface Tab_click_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Tab_dblclick_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Tab_doubletap_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Tab_keypressed_Event extends TabBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Tab_longclick_Event extends TabBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Tab_longpress_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Tab_pinch_Event extends TabBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Tab_postlayout_Event extends TabBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Tab_singletap_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Tab_swipe_Event extends TabBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Tab_touchcancel_Event extends TabBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Tab_touchend_Event extends TabBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Tab_touchmove_Event extends TabBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Tab_touchstart_Event extends TabBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Tab_twofingertap_Event extends TabBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the tab is no longer selected.
		 */
		interface Tab_unselected_Event extends TabBaseEvent {
			/**
			 * Index of the current active tab.
			 */
			index: number;

			/**
			 * Index of the previous active tab.
			 */
			previousIndex: number;

			/**
			 * Previous active tab object.
			 */
			previousTab: Titanium.UI.Tab;

			/**
			 * Current active tab object.
			 */
			tab: Titanium.UI.Tab;

		}
		/**
		 * Fired when the tab is selected.
		 */
		interface Tab_selected_Event extends TabBaseEvent {
			/**
			 * Index of the current active tab.
			 */
			index: number;

			/**
			 * Index of the previous active tab.
			 */
			previousIndex: number;

			/**
			 * Previous active tab object.
			 */
			previousTab: Titanium.UI.Tab;

			/**
			 * Current active tab object.
			 */
			tab: Titanium.UI.Tab;

		}
		interface TabEventMap extends ProxyEventMap {
			click: Tab_click_Event;

			dblclick: Tab_dblclick_Event;

			doubletap: Tab_doubletap_Event;

			keypressed: Tab_keypressed_Event;

			longclick: Tab_longclick_Event;

			longpress: Tab_longpress_Event;

			pinch: Tab_pinch_Event;

			postlayout: Tab_postlayout_Event;

			selected: Tab_selected_Event;

			singletap: Tab_singletap_Event;

			swipe: Tab_swipe_Event;

			touchcancel: Tab_touchcancel_Event;

			touchend: Tab_touchend_Event;

			touchmove: Tab_touchmove_Event;

			touchstart: Tab_touchstart_Event;

			twofingertap: Tab_twofingertap_Event;

			unselected: Tab_unselected_Event;

		}
		/**
		 * A tab instance for a [TabGroup](Titanium.UI.TabGroup).
		 */
		class Tab extends Titanium.UI.View {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * `true` if this tab is active, `false` if it is not.
			 */
			active: boolean;

			/**
			 * Icon URL for this tab when active.
			 */
			activeIcon: string;

			/**
			 * Defines if the active icon property of the tab must be used as a mask.
			 */
			activeIconIsMask: boolean;

			/**
			 * Defines the color of the tab icon when it is active.
			 */
			activeTintColor: string;

			/**
			 * Defines the color of the title of tab when it's active.
			 */
			activeTitleColor: string | Titanium.UI.Color;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * Sets the color of the tab when it is inactive.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Sets the color of the tab when it is focused.
			 */
			backgroundFocusedColor: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Badge value for this tab. `null` indicates no badge.
			 */
			badge: string;

			/**
			 * If this item displays a badge, this color will be used for the badge's background.
			 * If set to null, the default background color will be used instead.
			 */
			badgeColor: string | Titanium.UI.Color;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Icon URL for this tab.
			 */
			icon: string;

			/**
			 * The icon inset or outset for each edge.
			 */
			iconInsets: TabIconInsets;

			/**
			 * Defines if the icon property of the tab must be used as a mask.
			 */
			iconIsMask: boolean;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: never;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: never;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * The size of the view in system units.
			 */
			readonly size: never;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * Defines the color of the tab icon.
			 */
			tintColor: string;

			/**
			 * Title for this tab.
			 */
			title: string;

			/**
			 * Defines the color of the title of tab when it's inactive.
			 */
			titleColor: string | Titanium.UI.Color;

			/**
			 * Key identifying a string from the locale file to use for the tab title. Only one of `title` or `titleid` should be specified.
			 */
			titleid: string;

			/**
			 * The view's top position.
			 */
			top: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Determines whether the view is visible.
			 */
			visible: never;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Root-level tab window.  All tabs must have at least one root-level tab window.
			 */
			window: Titanium.UI.Window;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TabEventMap>(name: K, callback: (this: Titanium.UI.Tab, event: TabEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Closes the top-level window for this tab.
			 */
			close(window: Titanium.UI.Window, options?: any): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TabEventMap>(name: K, event?: TabEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides this view.
			 */
			hide: never;

			/**
			 * Opens a new window.
			 */
			open(window: Titanium.UI.Window, options?: openWindowParams): void;

			/**
			 * Closes all windows that are currently opened inside the tab.
			 */
			popToRootWindow(options?: AnimatedOptions): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TabEventMap>(name: K, callback: (this: Titanium.UI.Tab, event: TabEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Sets the root window that appears in the tab.
			 * @deprecated Set the value of the [window](Titanium.UI.Tab.window) property directly.
			 */
			setWindow(window: Titanium.UI.Window): void;

			/**
			 * Makes this view visible.
			 */
			show: never;

		}
		/**
		 * Base event for class Titanium.UI.TabGroup
		 */
		interface TabGroupBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TabGroup;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface TabGroup_click_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TabGroup_dblclick_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface TabGroup_doubletap_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when this tab group gains focus. On Android, fired when a tab in this tab group
		 * gains focus.
		 */
		interface TabGroup_focus_Event extends TabGroupBaseEvent {
			/**
			 * Index of the current active tab.
			 */
			index: number;

			/**
			 * Index of the previous active tab.
			 */
			previousIndex: number;

			/**
			 * Previous active tab.
			 */
			previousTab: Titanium.UI.Tab;

			/**
			 * Active tab.
			 */
			tab: Titanium.UI.Tab;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TabGroup_keypressed_Event extends TabGroupBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TabGroup_longclick_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TabGroup_longpress_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TabGroup_pinch_Event extends TabGroupBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TabGroup_postlayout_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TabGroup_singletap_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface TabGroup_swipe_Event extends TabGroupBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface TabGroup_touchcancel_Event extends TabGroupBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface TabGroup_touchend_Event extends TabGroupBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface TabGroup_touchmove_Event extends TabGroupBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface TabGroup_touchstart_Event extends TabGroupBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TabGroup_twofingertap_Event extends TabGroupBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the back button is pressed by the user.
		 */
		interface TabGroup_androidback_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the Camera button is released.
		 */
		interface TabGroup_androidcamera_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the Camera button is half-pressed then released.
		 */
		interface TabGroup_androidfocus_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the Search button is released.
		 */
		interface TabGroup_androidsearch_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the volume down button is released.
		 */
		interface TabGroup_androidvoldown_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the volume up button is released.
		 */
		interface TabGroup_androidvolup_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when this tab group loses focus. On Android, fired when a tab in this tab group
		 * loses focus.
		 */
		interface TabGroup_blur_Event extends TabGroupBaseEvent {
			/**
			 * Index of the current active tab. On iOS, a value of `undefined` indicates that the
			 * **More** tab was the active tab.
			 */
			index: number;

			/**
			 * Index of the previous active tab. On iOS, a value of `undefined` indicates that the
			 * **More** tab was the previous tab.
			 */
			previousIndex: number;

			/**
			 * Previous active tab. On iOS, a value of `undefined` indicates that the **More** tab was
			 * the previous tab.
			 */
			previousTab: Titanium.UI.Tab;

			/**
			 * Active tab.
			 */
			tab: Titanium.UI.Tab;

		}
		/**
		 * Fired when the tab group is closed.
		 */
		interface TabGroup_close_Event extends TabGroupBaseEvent {
		}
		/**
		 * Fired when the tab group is opened.
		 */
		interface TabGroup_open_Event extends TabGroupBaseEvent {
		}
		interface TabGroupEventMap extends ProxyEventMap {
			androidback: TabGroup_androidback_Event;

			androidcamera: TabGroup_androidcamera_Event;

			androidfocus: TabGroup_androidfocus_Event;

			androidsearch: TabGroup_androidsearch_Event;

			androidvoldown: TabGroup_androidvoldown_Event;

			androidvolup: TabGroup_androidvolup_Event;

			blur: TabGroup_blur_Event;

			click: TabGroup_click_Event;

			close: TabGroup_close_Event;

			dblclick: TabGroup_dblclick_Event;

			doubletap: TabGroup_doubletap_Event;

			focus: TabGroup_focus_Event;

			keypressed: TabGroup_keypressed_Event;

			longclick: TabGroup_longclick_Event;

			longpress: TabGroup_longpress_Event;

			open: TabGroup_open_Event;

			pinch: TabGroup_pinch_Event;

			postlayout: TabGroup_postlayout_Event;

			singletap: TabGroup_singletap_Event;

			swipe: TabGroup_swipe_Event;

			touchcancel: TabGroup_touchcancel_Event;

			touchend: TabGroup_touchend_Event;

			touchmove: TabGroup_touchmove_Event;

			touchstart: TabGroup_touchstart_Event;

			twofingertap: TabGroup_twofingertap_Event;

		}
		/**
		 * A tabbed group of windows.
		 */
		class TabGroup extends Titanium.UI.Window {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: never;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: never;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: never;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: never;

			/**
			 * Active tab.
			 */
			activeTab: number | Titanium.UI.Tab;

			/**
			 * Default background image for the active tab.
			 */
			activeTabBackgroundImage: string;

			/**
			 * Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined.
			 * @deprecated Deprecated in favor of [Titanium.UI.TabGroup.activeTintColor](Titanium.UI.TabGroup.activeTintColor) or alternatively [Titanium.UI.Tab.activeTintColor](Titanium.UI.Tab.activeTintColor).
			 */
			activeTabIconTint: string | Titanium.UI.Color;

			/**
			 * The activeTintColor to apply to tabs.
			 */
			activeTintColor: string;

			/**
			 * Defines the color of the title of tab when it's active.
			 */
			activeTitleColor: string | Titanium.UI.Color;

			/**
			 * Reference to the Android Activity object associated with this tab group.
			 */
			readonly activity: Titanium.Android.Activity;

			/**
			 * Allow the user to reorder tabs in the tab group using the **Edit** button on the **More**
			 * tab.
			 */
			allowUserCustomization: boolean;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: never;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: never;

			/**
			 * If set to `true` it will automatically set the actionbar title to the current tabs window title.
			 */
			autoTabTitle: boolean;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: never;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Default navigation bar color (typically for the **More** tab), as a color name or hex triplet.
			 */
			barColor: string | Titanium.UI.Color;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: never;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: never;

			/**
			 * Border width of the view.
			 */
			borderWidth: never;

			/**
			 * Window's bottom position, in platform-specific units.
			 */
			bottom: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Title for the edit button on the **More** tab.
			 */
			editButtonTitle: string;

			/**
			 * Boolean value indicating if the application should exit when closing the tab group, whether via Android
			 * back button or the [close](Titanium.UI.TabGroup.close) method.
			 */
			exitOnClose: boolean;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: never;

			/**
			 * View height, in platform-specific units.
			 */
			height: never;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: never;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * Window's left position, in platform-specific units.
			 */
			left: never;

			/**
			 * The tintColor to apply to the navigation bar (typically for the **More** tab).
			 */
			navTintColor: string | Titanium.UI.Color;

			/**
			 * The opacity from 0.0-1.0.
			 */
			opacity: never;

			/**
			 * Bottom padding of bottom navigation
			 */
			paddingBottom: number | string;

			/**
			 * Left padding of bottom navigation
			 */
			paddingLeft: number | string;

			/**
			 * Right padding of bottom navigation
			 */
			paddingRight: number | string;

			/**
			 * Window's right position, in platform-specific units.
			 */
			right: never;

			/**
			 * Image of the shadow placed between the tab bar and the content area.
			 */
			shadowImage: string;

			/**
			 * Determines whether the [TABS_STYLE_BOTTOM_NAVIGATION](Titanium.UI.Android.TABS_STYLE_BOTTOM_NAVIGATION) uses shiftMode.
			 */
			shiftMode: number;

			/**
			 * Boolean value indicating if changing pages by tab clicks is animated.
			 */
			smoothScrollOnTabClick: boolean;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * Property defining which style for the TabGroup to be used.
			 */
			style: number;

			/**
			 * Boolean value indicating if tab navigation can be done by swipes, in addition to tab clicks.
			 */
			swipeable: boolean;

			/**
			 * Tabs managed by the tab group.
			 */
			tabs: Titanium.UI.Tab[];

			/**
			 * Default background color for inactive tabs, as a color name or hex triplet.
			 */
			tabsBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Default background image for tabs.
			 */
			tabsBackgroundImage: string;

			/**
			 * Default background selected color for tabs, as a color name or hex triplet.
			 */
			tabsBackgroundSelectedColor: string;

			/**
			 * The tintColor to apply to the tabs.
			 * @deprecated Deprecated in favor of [Titanium.UI.TabGroup.tintColor](Titanium.UI.TabGroup.tintColor) or alternatively [Titanium.UI.Tab.tintColor](Titanium.UI.Tab.tintColor).
			 */
			tabsTintColor: string | Titanium.UI.Color;

			/**
			 * A Boolean value that indicates whether the tab bar is translucent.
			 */
			tabsTranslucent: boolean;

			/**
			 * The tintColor to apply to tabs.
			 */
			tintColor: string;

			/**
			 * Title for this tabGroup.
			 */
			title: string;

			/**
			 * Title text attributes of the window to be applied on the **More** tab.
			 */
			titleAttributes: titleAttributesParams;

			/**
			 * Defines the color of the title of tab when it's inactive.
			 */
			titleColor: string | Titanium.UI.Color;

			/**
			 * Window's top position, in platform-specific units.
			 */
			top: never;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: never;

			/**
			 * Boolean value indicating if the nav bar (typically for the **More** tab), is translucent.
			 */
			translucent: boolean;

			/**
			 * Unselected items in this tab group will be tinted with this color. Setting this value to null
			 * indicates that the tab group should use its default value instead.
			 * @deprecated Deprecated in favor of [Titanium.UI.TabGroup.tintColor](Titanium.UI.TabGroup.tintColor) or alternatively [Titanium.UI.Tab.tintColor](Titanium.UI.Tab.tintColor).
			 */
			unselectedItemTintColor: string | Titanium.UI.Color;

			/**
			 * View's width, in platform-specific units.
			 */
			width: never;

			/**
			 * Determines how the tab group is treated when a soft input method (such as a virtual keyboard)
			 * is displayed.
			 */
			windowSoftInputMode: number;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: never;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TabGroupEventMap>(name: K, callback: (this: Titanium.UI.TabGroup, event: TabGroupEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a tab to the tab group.
			 */
			addTab(tab: Titanium.UI.Tab): void;

			/**
			 * Closes the tab group and removes it from the UI.
			 */
			close(params?: Titanium.UI.Animation | Dictionary<Titanium.UI.Animation> | closeWindowParams): Promise<any>;

			/**
			 * Disable (or re-enable) tab navigation. If tab navigation is disabled, the tabs are hidden and
			 * the last selected tab window is shown.
			 */
			disableTabNavigation(disable: boolean): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TabGroupEventMap>(name: K, event?: TabGroupEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Gets the currently-active tab.
			 * @deprecated Use the <Titanium.UI.TabGroup.activeTab> property instead.
			 */
			getActiveTab: never;

			/**
			 * Gets all tabs that are managed by the tab group.
			 * @deprecated Use the <Titanium.UI.TabGroup.tabs> property instead.
			 */
			getTabs: never;

			/**
			 * Opens the tab group and makes it visible.
			 */
			open(params?: openWindowParams): Promise<any>;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TabGroupEventMap>(name: K, callback: (this: Titanium.UI.TabGroup, event: TabGroupEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a tab from the tab group.
			 */
			removeTab(tab: Titanium.UI.Tab): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Selects the currently active tab in a tab group.
			 * @deprecated Use the <Titanium.UI.TabGroup.activeTab> property instead.
			 */
			setActiveTab: never;

			/**
			 * Sets the array of items to show in the window's toolbar.
			 */
			setToolbar: never;

		}
		/**
		 * Base event for class Titanium.UI.TabbedBar
		 */
		interface TabbedBarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TabbedBar;

		}
		/**
		 * Fired when a button is clicked.
		 */
		interface TabbedBar_click_Event extends TabbedBarBaseEvent {
			/**
			 * Index of the clicked button.
			 */
			index: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TabbedBar_dblclick_Event extends TabbedBarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface TabbedBar_doubletap_Event extends TabbedBarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface TabbedBar_focus_Event extends TabbedBarBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TabbedBar_keypressed_Event extends TabbedBarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TabbedBar_longclick_Event extends TabbedBarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TabbedBar_longpress_Event extends TabbedBarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TabbedBar_pinch_Event extends TabbedBarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TabbedBar_postlayout_Event extends TabbedBarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TabbedBar_singletap_Event extends TabbedBarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface TabbedBar_swipe_Event extends TabbedBarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface TabbedBar_touchcancel_Event extends TabbedBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface TabbedBar_touchend_Event extends TabbedBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface TabbedBar_touchmove_Event extends TabbedBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface TabbedBar_touchstart_Event extends TabbedBarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TabbedBar_twofingertap_Event extends TabbedBarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface TabbedBarEventMap extends ProxyEventMap {
			click: TabbedBar_click_Event;

			dblclick: TabbedBar_dblclick_Event;

			doubletap: TabbedBar_doubletap_Event;

			focus: TabbedBar_focus_Event;

			keypressed: TabbedBar_keypressed_Event;

			longclick: TabbedBar_longclick_Event;

			longpress: TabbedBar_longpress_Event;

			pinch: TabbedBar_pinch_Event;

			postlayout: TabbedBar_postlayout_Event;

			singletap: TabbedBar_singletap_Event;

			swipe: TabbedBar_swipe_Event;

			touchcancel: TabbedBar_touchcancel_Event;

			touchend: TabbedBar_touchend_Event;

			touchmove: TabbedBar_touchmove_Event;

			touchstart: TabbedBar_touchstart_Event;

			twofingertap: TabbedBar_twofingertap_Event;

		}
		/**
		 * A button bar that maintains a selected state.
		 */
		class TabbedBar extends Titanium.UI.View {
			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Index of the currently selected button.
			 */
			index: number;

			/**
			 * Array of labels for the tabbed bar.
			 */
			labels: string[] | BarItemType[];

			/**
			 * Color of the selected text
			 */
			selectedTextColor: string | Titanium.UI.Color;

			/**
			 * Style of the tabbed bar.
			 */
			style: number;

			/**
			 * Color of the text
			 */
			textColor: string | Titanium.UI.Color;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TabbedBarEventMap>(name: K, callback: (this: Titanium.UI.TabbedBar, event: TabbedBarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TabbedBarEventMap>(name: K, event?: TabbedBarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TabbedBarEventMap>(name: K, callback: (this: Titanium.UI.TabbedBar, event: TabbedBarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

		}
		/**
		 * Base event for class Titanium.UI.TableView
		 */
		interface TableViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TableView;

		}
		/**
		 * Fired when a table row is clicked by the user.
		 */
		interface TableView_click_Event extends TableViewBaseEvent {
			/**
			 * Indicates whether the detail button was clicked. Only `true` if `row.hasDetail` is
			 * `true` and the detail button was clicked.
			 */
			detail: boolean;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * Indicates whether the table is in search mode.
			 */
			searchMode: boolean;

			/**
			 * Table view section object, if the clicked row is contained in a section.
			 */
			section: Titanium.UI.TableViewSection;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TableView_dblclick_Event extends TableViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against this view.
		 */
		interface TableView_doubletap_Event extends TableViewBaseEvent {
			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface TableView_focus_Event extends TableViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TableView_keypressed_Event extends TableViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TableView_longclick_Event extends TableViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TableView_longpress_Event extends TableViewBaseEvent {
			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TableView_pinch_Event extends TableViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TableView_postlayout_Event extends TableViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TableView_singletap_Event extends TableViewBaseEvent {
			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 *     var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 *     var table = Ti.UI.createTableView({data: data});
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture (left or right) against the view.
		 */
		interface TableView_swipe_Event extends TableViewBaseEvent {
			/**
			 * Direction of the swipe, either `left` or `right`.
			 */
			direction: string;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch gesture is interrupted by the device.
		 */
		interface TableView_touchcancel_Event extends TableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 *  Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch gesture is complete.
		 */
		interface TableView_touchend_Event extends TableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			force: number;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 *  Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface TableView_touchmove_Event extends TableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture against this view.
		 */
		interface TableView_touchstart_Event extends TableViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			force: number;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row.
			 * When the row is created implicitly using a JavaScript dictionary object,
			 * use this property rather than `row` to access any custom row properties.
			 * Here's an example of creating a row implicitly, which is not the recommended way.
			 * ``` js
			 * var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
			 * var table = Ti.UI.createTableView({data: data});
			 * ```
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 *  Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TableView_twofingertap_Event extends TableViewBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when user stops two-pan gesture interaction for selecting multiple rows.
		 * It is used in conjunction with <Titanium.UI.TableView.allowsMultipleSelectionInteraction>.
		 */
		interface TableView_rowsselected_Event extends TableViewBaseEvent {
			/**
			 * List of rows selected by user.
			 */
			selectedRows: SelectedRowObject[];

			/**
			 * First row selected when user started interaction.
			 */
			startingRow: SelectedRowObject;

		}
		/**
		 * Fired when a table row is deleted by the user.
		 */
		interface TableView_delete_Event extends TableViewBaseEvent {
			/**
			 * Indicates whether the delete button was clicked. Always `false` for this event.
			 */
			detail: boolean;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row. Use this property rather than `row` to access any custom row
			 * properties.
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * Indicates whether the table is in search mode. Always `false` for this event.
			 */
			searchMode: boolean;

			/**
			 * Table view section object, if the deleted row is contained in a section.
			 */
			section: Titanium.UI.TableViewSection;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the index bar is clicked by the user.
		 */
		interface TableView_indexclick_Event extends TableViewBaseEvent {
			/**
			 * The index number clicked.
			 */
			index: number;

			/**
			 * The title of the index clicked.
			 */
			title: string;

		}
		/**
		 * Fired when a table row is moved by the user.
		 */
		interface TableView_move_Event extends TableViewBaseEvent {
			/**
			 * Boolean to indicate if the right area was clicked. Always `false` for this event.
			 */
			detail: boolean;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Properties of the row. Use this property rather than `row` to access any custom row
			 * properties.
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * Boolean to indicate if the table is in search mode. Always `false` for this event.
			 */
			searchMode: boolean;

			/**
			 * Table view section object, if the deleted row is contained in a section.
			 */
			section: Titanium.UI.TableViewSection;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the table view is scrolled.
		 */
		interface TableView_scroll_Event extends TableViewBaseEvent {
			/**
			 * Dictionary with `x` and `y` properties containing the content offset.
			 */
			contentOffset: Point;

			/**
			 * Dictionary with `width` and `height` properties containing the size of the content
			 * (regardless of the display size in the case of scrolling).
			 */
			contentSize: Size;

			/**
			 * Row index of the topmost visible row in the view.
			 */
			firstVisibleItem: number;

			/**
			 * Dictionary with `width` and `height` properties containing the size of the visible
			 * table view
			 */
			size: Size;

			/**
			 * Total number of rows in the view.
			 */
			totalItemCount: number;

			/**
			 * Number of rows currently visible in the view.
			 */
			visibleItemCount: number;

		}
		/**
		 * Fired when the table view stops scrolling.
		 */
		interface TableView_scrollend_Event extends TableViewBaseEvent {
			/**
			 * Dictionary with `x` and `y` properties containing the content offset.
			 */
			contentOffset: Point;

			/**
			 * Dictionary with `width` and `height` properties containing the size of the content
			 * (regardless of the display size in the case of scrolling).
			 */
			contentSize: Size;

			/**
			 * Dictionary with `width` and `height` properties containing the size of the visible
			 * table view.
			 */
			size: Size;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the scrollable region starts being dragged.
		 */
		interface TableView_dragstart_Event extends TableViewBaseEvent {
		}
		/**
		 * Fired when the scrollable region stops being dragged.
		 */
		interface TableView_dragend_Event extends TableViewBaseEvent {
			/**
			 * Indicates whether scrolling will continue but decelerate, now that the drag gesture has
			 * been released by the touch. If `false`, scrolling will stop immediately.
			 */
			decelerate: boolean;

		}
		interface TableViewEventMap extends ProxyEventMap {
			click: TableView_click_Event;

			dblclick: TableView_dblclick_Event;

			delete: TableView_delete_Event;

			doubletap: TableView_doubletap_Event;

			dragend: TableView_dragend_Event;

			dragstart: TableView_dragstart_Event;

			focus: TableView_focus_Event;

			indexclick: TableView_indexclick_Event;

			keypressed: TableView_keypressed_Event;

			longclick: TableView_longclick_Event;

			longpress: TableView_longpress_Event;

			move: TableView_move_Event;

			pinch: TableView_pinch_Event;

			postlayout: TableView_postlayout_Event;

			rowsselected: TableView_rowsselected_Event;

			scroll: TableView_scroll_Event;

			scrollend: TableView_scrollend_Event;

			singletap: TableView_singletap_Event;

			swipe: TableView_swipe_Event;

			touchcancel: TableView_touchcancel_Event;

			touchend: TableView_touchend_Event;

			touchmove: TableView_touchmove_Event;

			touchstart: TableView_touchstart_Event;

			twofingertap: TableView_twofingertap_Event;

		}
		/**
		 * A table view is used to present information, organized in sections and rows, in a
		 * vertically-scrolling view.
		 */
		class TableView extends Titanium.UI.View {
			/**
			 * Determines whether multiple items of this table view can be selected at the same time while editing the table.
			 */
			allowsMultipleSelectionDuringEditing: boolean;

			/**
			 * Allows a two-finger pan gesture to automatically transition the table view into editing mode and start selecting rows.
			 */
			allowsMultipleSelectionInteraction: boolean;

			/**
			 * Determines whether this table's rows can be selected.
			 */
			allowsSelection: boolean;

			/**
			 * Determines whether this table's rows can be selected while editing the table.
			 */
			allowsSelectionDuringEditing: boolean;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Rows of the table view.
			 */
			data: Titanium.UI.TableViewRow[] | Titanium.UI.TableViewSection[];

			/**
			 * A Boolean indicating whether the underlying content is dimmed during a search.
			 */
			dimBackgroundForSearch: boolean;

			/**
			 * Determines the rows' default editable behavior, which allows them to be deleted by the user
			 * when the table is in `editing` or `moving` mode.
			 */
			editable: boolean;

			/**
			 * Determines whether row editing mode is active.
			 */
			editing: boolean;

			/**
			 * Determines whether the search is limited to the start of the string
			 */
			filterAnchored: boolean;

			/**
			 * Filter attribute to be used when searching.
			 */
			filterAttribute: string;

			/**
			 * Determines whether the search is case insensitive.
			 */
			filterCaseInsensitive: boolean;

			/**
			 * Sets fixedSize mode on Android TableView.
			 */
			fixedSize: boolean;

			/**
			 * When set to false, the ListView will not draw the divider before the footer view.
			 */
			footerDividersEnabled: boolean;

			/**
			 * Table view footer title.
			 */
			footerTitle: string;

			/**
			 * Table view footer as a view that will be rendered instead of a label.
			 */
			footerView: Titanium.UI.View;

			/**
			 * When set to false, the ListView will not draw the divider after the header view.
			 */
			headerDividersEnabled: boolean;

			/**
			 * View positioned above the first row that is only revealed when the user drags the table
			 * contents down.
			 */
			headerPullView: Titanium.UI.View;

			/**
			 * Table view header title.
			 */
			headerTitle: string;

			/**
			 * Table view header as a view that will be rendered instead of a label.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Determines whether the search field should hide on completion.
			 */
			hideSearchOnSelection: boolean;

			/**
			 * Array of objects (with `title` and `index` properties) to control the table view index.
			 */
			index: TableViewIndexEntry[];

			/**
			 * Max number of row class names.
			 */
			maxClassname: number;

			/**
			 * Maximum row height for table view rows.
			 */
			maxRowHeight: number;

			/**
			 * Minimum row height for table view rows.
			 */
			minRowHeight: number;

			/**
			 * Determines the rows' default moveable behavior, which allows them to be re-ordered by the
			 * user when the table is in `editing` or `moving` mode.
			 */
			moveable: boolean;

			/**
			 * Determines whether row moving mode is active.
			 */
			moving: boolean;

			/**
			 * Determines the behavior when the user overscrolls the view.
			 */
			overScrollMode: number;

			/**
			 * View positioned above the first row that is only revealed when the user drags the list view contents down.
			 */
			refreshControl: Titanium.UI.RefreshControl;

			/**
			 * The background color of the search results (iOS-only).
			 */
			resultsBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Separator line color between rows inside search results,
			 * as a color name or hex triplet (iOS-only).
			 */
			resultsSeparatorColor: string | Titanium.UI.Color;

			/**
			 * The insets for search results separators (applies to all cells & iOS-only).
			 */
			resultsSeparatorInsets: HorizontalInsets;

			/**
			 * The separator style of the search results (iOS-only).
			 */
			resultsSeparatorStyle: number;

			/**
			 * Default row height for table view rows.
			 */
			rowHeight: number;

			/**
			 * The insets for table view cells (applies to all cells).
			 */
			rowSeparatorInsets: HorizontalInsets;

			/**
			 * Style of the scrollbar.
			 */
			scrollIndicatorStyle: number;

			/**
			 * If `true`, the tableview can be scrolled.
			 */
			scrollable: boolean;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Search field to use for the table view.
			 */
			search: Titanium.UI.SearchBar | Titanium.UI.Android.SearchView;

			/**
			 * Determines whether the [SearchBar](Titanium.UI.SearchBar) or [SearchView](Titanium.UI.Android.SearchView) appears as part of the TableView.
			 */
			searchAsChild: boolean;

			/**
			 * Determines whether the search field is visible.
			 */
			searchHidden: boolean;

			/**
			 * Number of sections in this table view.
			 */
			readonly sectionCount: number;

			/**
			 * Padding above each section header.
			 */
			sectionHeaderTopPadding: number;

			/**
			 * Sections of this table.
			 */
			sections: Titanium.UI.TableViewSection[];

			/**
			 * Separator line color between rows, as a color name or hex triplet.
			 */
			separatorColor: string | Titanium.UI.Color;

			/**
			 * The insets for table view separators (applies to all cells).
			 * @deprecated Use [Titanium.UI.TableView.tableSeparatorInsets](Titanium.UI.TableView.tableSeparatorInsets) instead.
			 */
			separatorInsets: HorizontalInsets;

			/**
			 * Separator style constant.
			 */
			separatorStyle: number;

			/**
			 * A Boolean indicating whether search bar will be in navigation bar.
			 */
			showSearchBarInNavBar: boolean;

			/**
			 * Determines whether the selection checkmark is displayed on selected rows.
			 */
			showSelectionCheck: boolean;

			/**
			 * Determines whether this table view displays a vertical scroll indicator.
			 */
			showVerticalScrollIndicator: boolean;

			/**
			 * Style of the table view, specified using one of the constants from
			 * <Titanium.UI.iOS.TableViewStyle>.
			 */
			style: number;

			/**
			 * The insets for the table view header and footer.
			 */
			tableSeparatorInsets: HorizontalInsets;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TableViewEventMap>(name: K, callback: (this: Titanium.UI.TableView, event: TableViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Appends a single row or an array of rows to the end of the table.
			 */
			appendRow(row: Titanium.UI.TableViewRow | Dictionary<Titanium.UI.TableViewRow> | Titanium.UI.TableViewRow[] | Array<Dictionary<Titanium.UI.TableViewRow>>, animation?: TableViewAnimationProperties): void;

			/**
			 * Appends a single section or an array of sections to the end of the table.
			 */
			appendSection(section: Titanium.UI.TableViewSection | Dictionary<Titanium.UI.TableViewSection> | Titanium.UI.TableViewSection[] | Array<Dictionary<Titanium.UI.TableViewSection>>, animation?: TableViewAnimationProperties): void;

			/**
			 * Deletes an existing row.
			 */
			deleteRow(row: number | Titanium.UI.TableViewRow, animation?: TableViewAnimationProperties): void;

			/**
			 * Deletes an existing section.
			 */
			deleteSection(section: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Programmatically deselects a row.
			 */
			deselectRow(row: number): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TableViewEventMap>(name: K, event?: TableViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Inserts a row after another row.
			 */
			insertRowAfter(index: number, row: Titanium.UI.TableViewRow | Dictionary<Titanium.UI.TableViewRow>, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a row before another row.
			 */
			insertRowBefore(index: number, row: Titanium.UI.TableViewRow | Dictionary<Titanium.UI.TableViewRow>, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a section after another section.
			 */
			insertSectionAfter(index: number, section: Titanium.UI.TableViewSection | Dictionary<Titanium.UI.TableViewSection>, animation?: TableViewAnimationProperties): void;

			/**
			 * Inserts a section before another section.
			 */
			insertSectionBefore(index: number, section: Titanium.UI.TableViewSection | Dictionary<Titanium.UI.TableViewSection>, animation?: TableViewAnimationProperties): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TableViewEventMap>(name: K, callback: (this: Titanium.UI.TableView, event: TableViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Scrolls the table view to ensure that the specified row is on screen.
			 */
			scrollToIndex(index: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Scrolls the table to a specific top position where 0 is the topmost y position in the
			 * table view.
			 */
			scrollToTop(top: number, animation?: TableViewAnimationProperties): void;

			/**
			 * Programmatically selects a row. In Android, it sets the currently selected item. If in touch mode,
			 * the item will not be selected but it will still be positioned appropriately. If the specified
			 * selection position is less than 0, then the item at position 0 will be selected.
			 */
			selectRow(row: number): void;

			/**
			 * Sets this tableview's content insets.
			 */
			setContentInsets(edgeInsets: Padding, options?: AnimatedWithDurationOptions): void;

			/**
			 * Sets the value of the content offset of the table view without animation by default.
			 */
			setContentOffset(contentOffset: Point, options?: AnimatedOptions): void;

			/**
			 * Sets the data in the table.
			 */
			setData(data: Titanium.UI.TableViewRow[] | Array<Dictionary<Titanium.UI.TableViewRow>> | Titanium.UI.TableViewSection[], animation?: TableViewAnimationProperties): void;

			/**
			 * Sets the value of the [Titanium.UI.TableView.headerPullView] property.
			 * @deprecated Use the <Titanium.UI.TableView.headerPullView> property instead.
			 */
			setHeaderPullView: never;

			/**
			 * Updates an existing row, optionally with animation.
			 */
			updateRow(index: number, row: Titanium.UI.TableViewRow, animation: TableViewAnimationProperties): void;

			/**
			 * Updates an existing section, optionally with animation.
			 */
			updateSection(index: number, section: Titanium.UI.TableViewSection, animation: TableViewAnimationProperties): void;

		}
		/**
		 * Base event for class Titanium.UI.TableViewRow
		 */
		interface TableViewRowBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TableViewRow;

		}
		/**
		 * Fired when a table row is clicked by the user.
		 */
		interface TableViewRow_click_Event extends TableViewRowBaseEvent {
			/**
			 * Indicates whether the detail button was clicked. Only `true` if `row.hasDetail` is
			 * `true` and the detail button was clicked.
			 */
			detail: boolean;

			/**
			 * Row index.
			 */
			index: number;

			/**
			 * Table view row object.
			 */
			row: Titanium.UI.TableViewRow;

			/**
			 * Dictionary containing the properties set on the row.
			 */
			rowData: Dictionary<Titanium.UI.TableViewRow>;

			/**
			 * Boolean to indicate if the table is in search mode.
			 */
			searchMode: boolean;

			/**
			 * Table view section object, if the clicked row is contained in a section.
			 */
			section: Titanium.UI.TableViewSection;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TableViewRow_dblclick_Event extends TableViewRowBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface TableViewRow_doubletap_Event extends TableViewRowBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface TableViewRow_focus_Event extends TableViewRowBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TableViewRow_keypressed_Event extends TableViewRowBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TableViewRow_longclick_Event extends TableViewRowBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TableViewRow_longpress_Event extends TableViewRowBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TableViewRow_pinch_Event extends TableViewRowBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TableViewRow_postlayout_Event extends TableViewRowBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TableViewRow_singletap_Event extends TableViewRowBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface TableViewRow_swipe_Event extends TableViewRowBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch gesture is interrupted by the device.
		 */
		interface TableViewRow_touchcancel_Event extends TableViewRowBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch gesture is complete.
		 */
		interface TableViewRow_touchend_Event extends TableViewRowBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch..
		 */
		interface TableViewRow_touchmove_Event extends TableViewRowBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture against this view.
		 */
		interface TableViewRow_touchstart_Event extends TableViewRowBaseEvent {
			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TableViewRow_twofingertap_Event extends TableViewRowBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface TableViewRowEventMap extends ProxyEventMap {
			click: TableViewRow_click_Event;

			dblclick: TableViewRow_dblclick_Event;

			doubletap: TableViewRow_doubletap_Event;

			focus: TableViewRow_focus_Event;

			keypressed: TableViewRow_keypressed_Event;

			longclick: TableViewRow_longclick_Event;

			longpress: TableViewRow_longpress_Event;

			pinch: TableViewRow_pinch_Event;

			postlayout: TableViewRow_postlayout_Event;

			singletap: TableViewRow_singletap_Event;

			swipe: TableViewRow_swipe_Event;

			touchcancel: TableViewRow_touchcancel_Event;

			touchend: TableViewRow_touchend_Event;

			touchmove: TableViewRow_touchmove_Event;

			touchstart: TableViewRow_touchstart_Event;

			twofingertap: TableViewRow_twofingertap_Event;

		}
		/**
		 * A table view row is an individual item in a table, organized into table view sections.
		 */
		class TableViewRow extends Titanium.UI.View {
			/**
			 * A succint label associated with the table row for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * Background color to render when the row is selected, as a color name or hex triplet.
			 */
			backgroundSelectedColor: string | Titanium.UI.Color;

			/**
			 * Background image to render when the row is selected.
			 */
			backgroundSelectedImage: string;

			/**
			 * Class name for the row.
			 */
			className: string;

			/**
			 * Default text color of the row when not selected, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Text to display on the delete button when editable is enabled
			 */
			deleteButtonTitle: string;

			/**
			 * Determines the rows' editable behavior, which allows them to be deleted by the user when the
			 * table is in `editing` or `moving` mode.
			 */
			editable: boolean;

			/**
			 * Font to use for the row title.
			 */
			font: Font;

			/**
			 * The footer title of the row.
			 * @deprecated Use the <Titanium.UI.TableViewRow.footerTitle> property instead.
			 */
			footer: string;

			/**
			 * The footer title of the row.
			 */
			footerTitle: string;

			/**
			 * Determines whether a system-provided checkmark is displayed on the right-hand side of
			 * the row.
			 */
			hasCheck: boolean;

			/**
			 * Determines whether a system-provided arrow is displayed on the right-hand side of the row.
			 */
			hasChild: boolean;

			/**
			 * Determines whether a system-provided detail disclosure button is displayed on the right-hand
			 * side of the row.
			 */
			hasDetail: boolean;

			/**
			 * The header title of the row.
			 * @deprecated Use the <Titanium.UI.TableViewRow.headerTitle> property instead.
			 */
			header: string;

			/**
			 * The header title of the row.
			 */
			headerTitle: string;

			/**
			 * Indention level for the row.
			 */
			indentionLevel: number;

			/**
			 * Image to render in the left image area of the row, specified as a local path or URL.
			 */
			leftImage: string;

			/**
			 * Determines the rows' moveable behavior, which allows them to be re-ordered by the user when
			 * the table is in `editing` or `moving` mode.
			 */
			moveable: boolean;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * Image to render in the right image area of the row, specified as a local path or URL.
			 */
			rightImage: string;

			/**
			 * Background color to render when the row is selected, as a color name or hex triplet.
			 * @deprecated This property has been deprecated in favor of <Titanium.UI.TableViewRow.backgroundSelectedColor>.
			 */
			selectedBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Background image to render when the row is selected.
			 * @deprecated This property has been deprecated in favor of <Titanium.UI.TableViewRow.backgroundSelectedImage>.
			 */
			selectedBackgroundImage: string;

			/**
			 * Color of the row text when the row is selected, as a color name or hex triplet.
			 */
			selectedColor: string | Titanium.UI.Color;

			/**
			 * Selection style constant to control the selection color.
			 */
			selectionStyle: number;

			/**
			 * Text to display on the row.
			 */
			title: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TableViewRowEventMap>(name: K, callback: (this: Titanium.UI.TableViewRow, event: TableViewRowEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate: never;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TableViewRowEventMap>(name: K, event?: TableViewRowEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TableViewRowEventMap>(name: K, callback: (this: Titanium.UI.TableViewRow, event: TableViewRowEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * A table view section is a container within a table used to organize table view rows.
		 */
		class TableViewSection extends Titanium.Proxy {
			/**
			 * Title of this section footer.
			 */
			footerTitle: string;

			/**
			 * View to use for this section footer.
			 */
			footerView: Titanium.UI.View;

			/**
			 * Title of this section header.
			 */
			headerTitle: string;

			/**
			 * View to use for this section header.
			 */
			headerView: Titanium.UI.View;

			/**
			 * Number of rows in this section.
			 */
			readonly rowCount: number;

			/**
			 * Rows in this section.
			 */
			readonly rows: Titanium.UI.TableViewRow[];

			/**
			 * Adds a table view row to this section.
			 */
			add(row: Titanium.UI.TableViewRow): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes a table view row from this section.
			 */
			remove(row: Titanium.UI.TableViewRow): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Returns a row in this section.
			 */
			rowAtIndex(index: number): Titanium.UI.TableViewRow;

		}
		/**
		 * Base event for class Titanium.UI.TextArea
		 */
		interface TextAreaBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TextArea;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface TextArea_click_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TextArea_dblclick_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface TextArea_doubletap_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when this text area gains focus.
		 */
		interface TextArea_focus_Event extends TextAreaBaseEvent {
			/**
			 * Value of this text area.
			 */
			value: string;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TextArea_keypressed_Event extends TextAreaBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TextArea_longclick_Event extends TextAreaBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TextArea_longpress_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TextArea_pinch_Event extends TextAreaBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TextArea_postlayout_Event extends TextAreaBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TextArea_singletap_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface TextArea_swipe_Event extends TextAreaBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface TextArea_touchcancel_Event extends TextAreaBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface TextArea_touchend_Event extends TextAreaBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface TextArea_touchmove_Event extends TextAreaBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface TextArea_touchstart_Event extends TextAreaBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TextArea_twofingertap_Event extends TextAreaBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when this text area loses focus.
		 */
		interface TextArea_blur_Event extends TextAreaBaseEvent {
			/**
			 * Value of this text area.
			 */
			value: string;

		}
		/**
		 * Fired when this text area value changes.
		 */
		interface TextArea_change_Event extends TextAreaBaseEvent {
			/**
			 * Content height value of this text area
			 */
			contentHeight: number;

			/**
			 * New value of this text area.
			 */
			value: string;

		}
		/**
		 * Fired when user interacts with a URL in the text area. See [handleLinks](Titanium.UI.TextArea.handleLinks).
		 */
		interface TextArea_link_Event extends TextAreaBaseEvent {
			/**
			 * This is false. This event does not bubble.
			 */
			bubbles: boolean;

			/**
			 * An array of two numbers [location, length] describing the character range of the text associated with this URL.
			 */
			range: any[];

			/**
			 * The URL that is associated with this event.
			 */
			url: string;

		}
		/**
		 * Fired when the return key is pressed on the keyboard.
		 */
		interface TextArea_return_Event extends TextAreaBaseEvent {
			/**
			 * Value of this text area.
			 */
			value: string;

		}
		/**
		 * Fired when text in this text area is selected.
		 */
		interface TextArea_selected_Event extends TextAreaBaseEvent {
			/**
			 * Dictionary that describes the position and length of the selected text.
			 */
			range: textAreaSelectedParams;

		}
		interface TextAreaEventMap extends ProxyEventMap {
			blur: TextArea_blur_Event;

			change: TextArea_change_Event;

			click: TextArea_click_Event;

			dblclick: TextArea_dblclick_Event;

			doubletap: TextArea_doubletap_Event;

			focus: TextArea_focus_Event;

			keypressed: TextArea_keypressed_Event;

			link: TextArea_link_Event;

			longclick: TextArea_longclick_Event;

			longpress: TextArea_longpress_Event;

			pinch: TextArea_pinch_Event;

			postlayout: TextArea_postlayout_Event;

			return: TextArea_return_Event;

			selected: TextArea_selected_Event;

			singletap: TextArea_singletap_Event;

			swipe: TextArea_swipe_Event;

			touchcancel: TextArea_touchcancel_Event;

			touchend: TextArea_touchend_Event;

			touchmove: TextArea_touchmove_Event;

			touchstart: TextArea_touchstart_Event;

			twofingertap: TextArea_twofingertap_Event;

		}
		/**
		 * A multiline text field that supports editing and scrolling.
		 */
		class TextArea extends Titanium.UI.View {
			/**
			 * Hint text attributed string.
			 */
			attributedHintText: Titanium.UI.AttributedString;

			/**
			 * TextArea attributed string.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Automatically convert text to clickable links.
			 */
			autoLink: number;

			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether to automatically correct text entered into this text area.
			 */
			autocorrect: boolean;

			/**
			 * Sets the autofill type for the text area.
			 */
			autofillType: string;

			/**
			 * Border style for the text area.
			 */
			borderStyle: number;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Determines whether the value of this text area should be cleared when it is focused.
			 */
			clearOnEdit: boolean;

			/**
			 * Color of the text in this text area, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Determines whether this field can be edited.
			 */
			editable: boolean;

			/**
			 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
			 */
			ellipsize: boolean;

			/**
			 * Determines if user can copy or cut text from the text area.
			 */
			enableCopy: boolean;

			/**
			 * Determines whether the return key is enabled automatically when there is text in this text
			 * area.
			 */
			enableReturnKey: boolean;

			/**
			 * Determines whether this TextArea has focus.
			 */
			readonly focused: boolean;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Leave some space above the keyboard in landscape mode or not.
			 */
			fullscreen: boolean;

			/**
			 * Specifies if the text area should allow user interaction with the given URL in the given range of text.
			 */
			handleLinks: boolean;

			/**
			 * Hint text to display when the field is empty.
			 */
			hintText: string;

			/**
			 * Color of hint text that displays when field is empty.
			 */
			hintTextColor: string;

			/**
			 * Hint type to display on the text field.
			 */
			hintType: number;

			/**
			 * Determines the appearance of the keyboard displayed when this text area is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Array of toolbar button objects or a [toolbar](Titanium.UI.Toolbar) to be used when the
			 * keyboard is displayed.
			 */
			keyboardToolbar: Titanium.UI.View[] | Titanium.UI.Toolbar;

			/**
			 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
			 */
			keyboardToolbarColor: string | Titanium.UI.Color;

			/**
			 * Height of the keyboard toolbar if keyboardToolbar is an array.
			 */
			keyboardToolbarHeight: number;

			/**
			 * Keyboard type to display when this text area is focused.
			 */
			keyboardType: number;

			/**
			 * Number of lines tall the text area height will be, if set.
			 */
			lines: number;

			/**
			 * Maximum length of text field input.
			 */
			maxLength: number;

			/**
			 * Maximum line count of text field input.
			 */
			maxLines: number;

			/**
			 * Sets the left and right padding of this TextArea. The text will always be vertically centered.
			 */
			padding: Padding;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this text area is focused.
			 */
			returnKeyType: number;

			/**
			 * Determines whether this text area can be scrolled.
			 */
			scrollable: boolean;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * Returns the currently selected text of the text area.
			 */
			readonly selection: textAreaSelectedParams;

			/**
			 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above. This property can only be set upon creation.
			 */
			showUndoRedoActions: boolean;

			/**
			 * Determines if the return key should be suppressed during text entry.
			 */
			suppressReturn: boolean;

			/**
			 * Text alignment within this text area.
			 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
			 */
			textAlign: string | number;

			/**
			 * Value of this text area, which may be set programmatically and modified by the user.
			 */
			value: string;

			/**
			 * Vertical alignment within this text area.
			 */
			verticalAlign: number | string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TextAreaEventMap>(name: K, callback: (this: Titanium.UI.TextArea, event: TextAreaEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Forces this text area to lose focus.
			 */
			blur(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TextAreaEventMap>(name: K, event?: TextAreaEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Forces this text area to gain focus.
			 */
			focus(): void;

			/**
			 * Returns `true` if this text area contains text.
			 */
			hasText(): boolean;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TextAreaEventMap>(name: K, callback: (this: Titanium.UI.TextArea, event: TextAreaEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Selects the text in range (start, end).
			 */
			setSelection(start: number, end: number): void;

		}
		/**
		 * Base event for class Titanium.UI.TextField
		 */
		interface TextFieldBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.TextField;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface TextField_click_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface TextField_dblclick_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface TextField_doubletap_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the field gains focus.
		 */
		interface TextField_focus_Event extends TextFieldBaseEvent {
			/**
			 * Value of the field.
			 */
			value: string;

		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface TextField_keypressed_Event extends TextFieldBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface TextField_longclick_Event extends TextFieldBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface TextField_longpress_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface TextField_pinch_Event extends TextFieldBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface TextField_postlayout_Event extends TextFieldBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface TextField_singletap_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface TextField_swipe_Event extends TextFieldBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface TextField_touchcancel_Event extends TextFieldBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface TextField_touchend_Event extends TextFieldBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface TextField_touchmove_Event extends TextFieldBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface TextField_touchstart_Event extends TextFieldBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface TextField_twofingertap_Event extends TextFieldBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the field loses focus.
		 */
		interface TextField_blur_Event extends TextFieldBaseEvent {
			/**
			 * Value of the field.
			 */
			value: string;

		}
		/**
		 * Fired when the field value changes.
		 */
		interface TextField_change_Event extends TextFieldBaseEvent {
			/**
			 * New value of the field.
			 */
			value: string;

		}
		/**
		 * Fired when the return key is pressed on the keyboard.
		 */
		interface TextField_return_Event extends TextFieldBaseEvent {
			/**
			 * Value of this text area.
			 */
			value: string;

		}
		interface TextFieldEventMap extends ProxyEventMap {
			blur: TextField_blur_Event;

			change: TextField_change_Event;

			click: TextField_click_Event;

			dblclick: TextField_dblclick_Event;

			doubletap: TextField_doubletap_Event;

			focus: TextField_focus_Event;

			keypressed: TextField_keypressed_Event;

			longclick: TextField_longclick_Event;

			longpress: TextField_longpress_Event;

			pinch: TextField_pinch_Event;

			postlayout: TextField_postlayout_Event;

			return: TextField_return_Event;

			singletap: TextField_singletap_Event;

			swipe: TextField_swipe_Event;

			touchcancel: TextField_touchcancel_Event;

			touchend: TextField_touchend_Event;

			touchmove: TextField_touchmove_Event;

			touchstart: TextField_touchstart_Event;

			twofingertap: TextField_twofingertap_Event;

		}
		/**
		 * A single line text field.
		 */
		class TextField extends Titanium.UI.View {
			/**
			 * Hint text attributed string.
			 */
			attributedHintText: Titanium.UI.AttributedString;

			/**
			 * TextField attributed string.
			 */
			attributedString: Titanium.UI.AttributedString;

			/**
			 * Automatically convert text to clickable links.
			 */
			autoLink: number;

			/**
			 * Determines how text is capitalized during typing.
			 */
			autocapitalization: number;

			/**
			 * Determines whether to automatically correct text entered into this text field.
			 */
			autocorrect: boolean;

			/**
			 * Sets the autofill type for the text field.
			 */
			autofillType: string;

			/**
			 * Border style for the field.
			 */
			borderStyle: number;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Determines when the clear button is displayed.
			 */
			clearButtonMode: number;

			/**
			 * Determines whether the value of this text field should be cleared when it is focused.
			 */
			clearOnEdit: boolean;

			/**
			 * Color of the text in this text field, as a color name or hex triplet.
			 */
			color: string | Titanium.UI.Color;

			/**
			 * Determines whether this field can be edited.
			 */
			editable: boolean;

			/**
			 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
			 */
			ellipsize: boolean;

			/**
			 * Determines if user can copy or cut text from the text field.
			 */
			enableCopy: boolean;

			/**
			 * Determines whether the return key is enabled automatically when there is text in this text
			 * field.
			 */
			enableReturnKey: boolean;

			/**
			 * Determines whether this TextField has focus.
			 */
			readonly focused: boolean;

			/**
			 * Font to use for text.
			 */
			font: Font;

			/**
			 * Leave some space above the keyboard in landscape mode or not.
			 */
			fullscreen: boolean;

			/**
			 * Hint text to display when the field is empty.
			 */
			hintText: string;

			/**
			 * Hint text color to display when the field is empty.
			 */
			hintTextColor: string | Titanium.UI.Color;

			/**
			 * Hint type to display on the text field.
			 */
			hintType: number;

			/**
			 * Key identifying a string from the locale file to use for the
			 * [hintText](Titanium.UI.TextField.hintText) property.
			 */
			hinttextid: string;

			/**
			 * Input type to accept in the text field. Also influences the Keyboard type to display.
			 */
			inputType: number[];

			/**
			 * Determines the appearance of the keyboard displayed when this field is focused.
			 */
			keyboardAppearance: number;

			/**
			 * Array of toolbar button objects or a [toolbar](Titanium.UI.Toolbar) to be used when the
			 * keyboard is displayed.
			 */
			keyboardToolbar: Titanium.UI.View[] | Titanium.UI.Toolbar;

			/**
			 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
			 */
			keyboardToolbarColor: string | Titanium.UI.Color;

			/**
			 * Height of the keyboard toolbar if keyboardToolbar is an array.
			 */
			keyboardToolbarHeight: number;

			/**
			 * Keyboard type to display when this text field is focused.
			 */
			keyboardType: number;

			/**
			 * Left button view to display in the `TextField`.
			 */
			leftButton: Titanium.UI.View;

			/**
			 * Determines when to display the left button view.
			 */
			leftButtonMode: number;

			/**
			 * Padding between the left button and the edge of the field.
			 */
			leftButtonPadding: number;

			/**
			 * Maximum length of text field input.
			 */
			maxLength: number;

			/**
			 * Minimum size of the font when the font is sized based on the contents.  Enables font
			 * scaling to fit.
			 */
			minimumFontSize: number;

			/**
			 * Sets the padding of this text field.
			 */
			padding: TextFieldPadding;

			/**
			 * Obscure the input text from the user.
			 */
			passwordMask: boolean;

			/**
			 * Set password rules that should be used for this text field.
			 */
			passwordRules: string;

			/**
			 * Specifies the text to display on the keyboard `Return` key when this field is focused.
			 */
			returnKeyType: number;

			/**
			 * Right button view.
			 */
			rightButton: Titanium.UI.View;

			/**
			 * Determines when to display the right button view.
			 */
			rightButtonMode: number;

			/**
			 * Padding between the right button and the edge of the field.
			 */
			rightButtonPadding: number;

			/**
			 * Returns the currently selected text of the text field.
			 */
			readonly selection: textFieldSelectedParams;

			/**
			 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above.
			 */
			showUndoRedoActions: boolean;

			/**
			 * Determines whether the return key should be suppressed during entry.
			 */
			suppressReturn: boolean;

			/**
			 * Text alignment within this text field.
			 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
			 */
			textAlign: string | number;

			/**
			 * Value of this text field, which may be set programmatically and modified by the user.
			 */
			value: string;

			/**
			 * Vertical alignment within this text field.
			 */
			verticalAlign: number | string;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof TextFieldEventMap>(name: K, callback: (this: Titanium.UI.TextField, event: TextFieldEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Forces the field to lose focus.
			 */
			blur(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof TextFieldEventMap>(name: K, event?: TextFieldEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Forces the field to gain focus.
			 */
			focus(): void;

			/**
			 * Returns `true` if this text field contains text.
			 */
			hasText(): boolean;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof TextFieldEventMap>(name: K, callback: (this: Titanium.UI.TextField, event: TextFieldEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Selects the text in range (start, end).
			 */
			setSelection(start: number, end: number): void;

		}
		/**
		 * Base event for class Titanium.UI.Toolbar
		 */
		interface ToolbarBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Toolbar;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Toolbar_click_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Toolbar_dblclick_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Toolbar_doubletap_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface Toolbar_focus_Event extends ToolbarBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Toolbar_keypressed_Event extends ToolbarBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Toolbar_longclick_Event extends ToolbarBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Toolbar_longpress_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Toolbar_pinch_Event extends ToolbarBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Toolbar_postlayout_Event extends ToolbarBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Toolbar_singletap_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Toolbar_swipe_Event extends ToolbarBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Toolbar_touchcancel_Event extends ToolbarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Toolbar_touchend_Event extends ToolbarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Toolbar_touchmove_Event extends ToolbarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Toolbar_touchstart_Event extends ToolbarBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Toolbar_twofingertap_Event extends ToolbarBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ToolbarEventMap extends ProxyEventMap {
			click: Toolbar_click_Event;

			dblclick: Toolbar_dblclick_Event;

			doubletap: Toolbar_doubletap_Event;

			focus: Toolbar_focus_Event;

			keypressed: Toolbar_keypressed_Event;

			longclick: Toolbar_longclick_Event;

			longpress: Toolbar_longpress_Event;

			pinch: Toolbar_pinch_Event;

			postlayout: Toolbar_postlayout_Event;

			singletap: Toolbar_singletap_Event;

			swipe: Toolbar_swipe_Event;

			touchcancel: Toolbar_touchcancel_Event;

			touchend: Toolbar_touchend_Event;

			touchmove: Toolbar_touchmove_Event;

			touchstart: Toolbar_touchstart_Event;

			twofingertap: Toolbar_twofingertap_Event;

		}
		/**
		 * A Toolbar can contain buttons, as well as certain other widgets, including text fields and labels.
		 */
		class Toolbar extends Titanium.UI.View {
			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: never;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: never;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: never;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: never;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: never;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: never;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: never;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: never;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: never;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: never;

			/**
			 * Background color for the toolbar, as a color name or hex triplet.
			 */
			barColor: string | Titanium.UI.Color;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * Returns the margin after the toolbar's content when there are action buttons.
			 */
			contentInsetEndWithActions: number;

			/**
			 * Returns the margin at the toolbar's content start when there is a navigation button.
			 */
			contentInsetStartWithNavigation: number;

			/**
			 * If `true`, the background of the toolbar extends upwards.
			 */
			extendBackground: boolean;

			/**
			 * An array of buttons (or other widgets) contained in the toolbar.
			 */
			items: Titanium.UI.View[];

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: never;

			/**
			 * Image to be used as a logo in the Toolbar.
			 */
			logo: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Image to be used for a navigation icon.
			 */
			navigationIcon: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Image to be used for the overflow menu.
			 */
			overflowIcon: string | Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: never;

			/**
			 * Text of the subtitle.
			 */
			subtitle: string;

			/**
			 * Color for toolbar's subtitle
			 */
			subtitleTextColor: string;

			/**
			 * Text of the title.
			 */
			title: string;

			/**
			 * Color string with any Titanium supported format
			 */
			titleTextColor: string;

			/**
			 * If `true`, a translucent background color is used for the toolbar.
			 */
			translucent: boolean;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ToolbarEventMap>(name: K, callback: (this: Titanium.UI.Toolbar, event: ToolbarEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Collapses expanded ActionViews if there is any
			 */
			collapseActionViews(): void;

			/**
			 * Collapses expandend ActionViews and hides overflow menu
			 */
			dismissPopupMenus(): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ToolbarEventMap>(name: K, event?: ToolbarEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the margin at the toolbar's content end.
			 */
			getContentInsetEnd(): number;

			/**
			 * Returns the margin on the left of the toolbar's content.
			 */
			getContentInsetLeft(): number;

			/**
			 * Returns the margin on the right of the toolbar's content.
			 */
			getContentInsetRight(): number;

			/**
			 * Returns the margin at the toolbar's content start.
			 */
			getContentInsetStart(): number;

			/**
			 * Returns the margin at the toolbar's content end that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetEnd(): number;

			/**
			 * Returns the margin on the left of the toolbar's content that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetLeft(): number;

			/**
			 * Returns the margin on the right of the toolbar's content that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetRight(): number;

			/**
			 * Returns the margin at the toolbar's content start that will be used with the current configuration of the toolbar.
			 */
			getCurrentContentInsetStart(): number;

			/**
			 * Checks if the toolbar is currently hosting an expanded action view.
			 */
			hasExpandedActionView(): boolean;

			/**
			 * Hides the overflow menu if there is one.
			 */
			hideOverflowMenu(): void;

			/**
			 * Checks if the toolbar is currently hosting an expanded action view.
			 */
			isOverflowMenuShowing(): boolean;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ToolbarEventMap>(name: K, callback: (this: Titanium.UI.Toolbar, event: ToolbarEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Sets the content margins of the toolbar
			 */
			setContentInsetsAbsolute(insetLeft: number, insetRight: number): void;

			/**
			 * Sets the content margins relative to the layout direction
			 */
			setContentInsetsRelative(insetStart: number, insetEnd: number): void;

			/**
			 * Shows the overflow menu if there is one
			 */
			showOverflowMenu(): void;

		}
		/**
		 * Base event for class Titanium.UI.View
		 */
		interface ViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.View;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface View_click_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface View_dblclick_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface View_doubletap_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface View_focus_Event extends ViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface View_keypressed_Event extends ViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface View_longclick_Event extends ViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface View_longpress_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface View_pinch_Event extends ViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface View_postlayout_Event extends ViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface View_singletap_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface View_swipe_Event extends ViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface View_touchcancel_Event extends ViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface View_touchend_Event extends ViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface View_touchmove_Event extends ViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface View_touchstart_Event extends ViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface View_twofingertap_Event extends ViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		interface ViewEventMap extends ProxyEventMap {
			click: View_click_Event;

			dblclick: View_dblclick_Event;

			doubletap: View_doubletap_Event;

			focus: View_focus_Event;

			keypressed: View_keypressed_Event;

			longclick: View_longclick_Event;

			longpress: View_longpress_Event;

			pinch: View_pinch_Event;

			postlayout: View_postlayout_Event;

			singletap: View_singletap_Event;

			swipe: View_swipe_Event;

			touchcancel: View_touchcancel_Event;

			touchend: View_touchend_Event;

			touchmove: View_touchmove_Event;

			touchstart: View_touchstart_Event;

			twofingertap: View_twofingertap_Event;

		}
		/**
		 * An empty drawing surface or container
		 */
		class View extends Titanium.Proxy {
			/**
			 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
			 */
			accessibilityHidden: boolean;

			/**
			 * Briefly describes what performing an action (such as a click) on the view will do.
			 */
			accessibilityHint: string;

			/**
			 * A succint label identifying the view for the device's accessibility service.
			 */
			accessibilityLabel: string;

			/**
			 * A string describing the value (if any) of the view for the device's accessibility service.
			 */
			accessibilityValue: string;

			/**
			 * Coordinate of the view about which to pivot an animation.
			 */
			anchorPoint: Point;

			/**
			 * Current position of the view during an animation.
			 */
			readonly animatedCenter: Point;

			/**
			 * Background color of the view, as a color name or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Disabled background color of the view, as a color name or hex triplet.
			 */
			backgroundDisabledColor: string;

			/**
			 * Disabled background image for the view, specified as a local file path or URL.
			 */
			backgroundDisabledImage: string;

			/**
			 * Focused background color of the view, as a color name or hex triplet.
			 */
			backgroundFocusedColor: string;

			/**
			 * Focused background image for the view, specified as a local file path or URL.
			 */
			backgroundFocusedImage: string;

			/**
			 * A background gradient for the view.
			 */
			backgroundGradient: Gradient;

			/**
			 * Background image for the view, specified as a local file path or URL.
			 */
			backgroundImage: string;

			/**
			 * Size of the left end cap.
			 */
			backgroundLeftCap: number;

			/**
			 * Determines whether to tile a background across a view.
			 */
			backgroundRepeat: boolean;

			/**
			 * Selected background color of the view, as a color name or hex triplet.
			 */
			backgroundSelectedColor: string | Titanium.UI.Color;

			/**
			 * Selected background image url for the view, specified as a local file path or URL.
			 */
			backgroundSelectedImage: string;

			/**
			 * Size of the top end cap.
			 */
			backgroundTopCap: number;

			/**
			 * Border color of the view, as a color name or hex triplet.
			 */
			borderColor: string | Titanium.UI.Color;

			/**
			 * Radius for the rounded corners of the view's border.
			 */
			borderRadius: number | string | number[] | string[];

			/**
			 * Border width of the view.
			 */
			borderWidth: number;

			/**
			 * View's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * View's center position, in the parent view's coordinates.
			 */
			center: Point;

			/**
			 * Array of this view's child views.
			 */
			readonly children: Titanium.UI.View[];

			/**
			 * View's clipping behavior.
			 */
			clipMode: number;

			/**
			 * Base elevation of the view relative to its parent in pixels.
			 */
			elevation: number;

			/**
			 * Discards touch related events if another app's system overlay covers the view.
			 */
			filterTouchesWhenObscured: boolean;

			/**
			 * Whether view should be focusable while navigating with the trackball.
			 */
			focusable: boolean;

			/**
			 * View height, in platform-specific units.
			 */
			height: number | string;

			/**
			 * Sets the behavior when hiding an object to release or keep the free space
			 */
			hiddenBehavior: number;

			/**
			 * Adds a horizontal parallax effect to the view
			 */
			horizontalMotionEffect: MinMaxOptions;

			/**
			 * Determines whether the layout has wrapping behavior.
			 */
			horizontalWrap: boolean;

			/**
			 * View's identifier.
			 */
			id?: string;

			/**
			 * Determines whether to keep the device screen on.
			 */
			keepScreenOn: boolean;

			/**
			 * Specifies how the view positions its children.
			 * One of: 'composite', 'vertical', or 'horizontal'.
			 */
			layout: string;

			/**
			 * View's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
			 */
			opacity: number;

			/**
			 * When on, animate call overrides current animation if applicable.
			 */
			overrideCurrentAnimation: boolean;

			/**
			 * The preview context used in the 3D-Touch feature "Peek and Pop".
			 */
			previewContext: Titanium.UI.iOS.PreviewContext;

			/**
			 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
			 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
			 */
			pullBackgroundColor: string | Titanium.UI.Color;

			/**
			 * The bounding box of the view relative to its parent, in system units.
			 */
			readonly rect: DimensionWithAbsolutes;

			/**
			 * View's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * Clockwise 2D rotation of the view in degrees.
			 */
			rotation: number;

			/**
			 * Clockwise rotation of the view in degrees (x-axis).
			 */
			rotationX: number;

			/**
			 * Clockwise rotation of the view in degrees (y-axis).
			 */
			rotationY: number;

			/**
			 * Scaling of the view in x-axis in pixels.
			 */
			scaleX: number;

			/**
			 * Scaling of the view in y-axis in pixels.
			 */
			scaleY: number;

			/**
			 * The size of the view in system units.
			 */
			readonly size: Dimension;

			/**
			 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
			 */
			softKeyboardOnFocus: number;

			/**
			 * The view's tintColor
			 */
			tintColor: string | Titanium.UI.Color;

			/**
			 * The view's top position.
			 */
			top: number | string;

			/**
			 * Determines whether view should receive touch events.
			 */
			touchEnabled: boolean;

			/**
			 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
			 */
			touchFeedback: boolean;

			/**
			 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
			 */
			touchFeedbackColor: string;

			/**
			 * Transformation matrix to apply to the view.
			 */
			transform: Titanium.UI.Matrix2D | Titanium.UI.Matrix3D;

			/**
			 * A name to identify this view in activity transition.
			 */
			transitionName: string;

			/**
			 * Horizontal location of the view relative to its left position in pixels.
			 */
			translationX: number;

			/**
			 * Vertical location of the view relative to its top position in pixels.
			 */
			translationY: number;

			/**
			 * Depth of the view relative to its elevation in pixels.
			 */
			translationZ: number;

			/**
			 * Adds a vertical parallax effect to the view
			 */
			verticalMotionEffect: MinMaxOptions;

			/**
			 * Determines the color of the shadow.
			 */
			viewShadowColor: string | Titanium.UI.Color;

			/**
			 * Determines the offset for the shadow of the view.
			 */
			viewShadowOffset: Point;

			/**
			 * Determines the blur radius used to create the shadow.
			 */
			viewShadowRadius: number | string;

			/**
			 * Determines whether the view is visible.
			 */
			visible: boolean;

			/**
			 * View's width, in platform-specific units.
			 */
			width: number | string;

			/**
			 * Z-index stack order position, relative to other sibling views.
			 */
			zIndex: number;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add(view: Titanium.UI.View | Titanium.UI.View[]): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof ViewEventMap>(name: K, callback: (this: Titanium.UI.View, event: ViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Animates this view.
			 */
			animate(animation: Titanium.UI.Animation | Dictionary<Titanium.UI.Animation>, callback?: (param0: any) => void): void;

			/**
			 * Removes all previously added motion effects.
			 */
			clearMotionEffects(): void;

			/**
			 * Translates a point from this view's coordinate system to another view's coordinate system.
			 */
			convertPointToView(point: Point, destinationView: Titanium.UI.View): Point;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof ViewEventMap>(name: K, event?: ViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the matching view of a given view ID.
			 */
			getViewById(id: string): Titanium.UI.View;

			/**
			 * Hides this view.
			 */
			hide(options?: AnimatedOptions): void;

			/**
			 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			insertAt(params: ViewPositionOptions): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove(view: Titanium.UI.View): void;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof ViewEventMap>(name: K, callback: (this: Titanium.UI.View, event: ViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt(params: ViewPositionOptions): void;

			/**
			 * Makes this view visible.
			 */
			show(options?: AnimatedOptions): void;

			/**
			 * Starts a batch update of this view's layout properties.
			 * @deprecated Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
			 */
			startLayout: never;

			/**
			 * Returns an image of the rendered view, as a Blob.
			 */
			toImage(callback?: (param0: Titanium.Blob) => void, honorScaleFactor?: boolean): Titanium.Blob;

			/**
			 * Performs a batch update of all supplied layout properties and schedules a layout pass after
			 * they have been updated.
			 * @deprecated Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
			 */
			updateLayout: never;

		}
		/**
		 * Base event for class Titanium.UI.WebView
		 */
		interface WebViewBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.WebView;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface WebView_click_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface WebView_dblclick_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface WebView_doubletap_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the view element gains focus.
		 */
		interface WebView_focus_Event extends WebViewBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface WebView_keypressed_Event extends WebViewBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface WebView_longclick_Event extends WebViewBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface WebView_longpress_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface WebView_pinch_Event extends WebViewBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface WebView_postlayout_Event extends WebViewBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface WebView_singletap_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface WebView_swipe_Event extends WebViewBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface WebView_touchcancel_Event extends WebViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface WebView_touchend_Event extends WebViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface WebView_touchmove_Event extends WebViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface WebView_touchstart_Event extends WebViewBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface WebView_twofingertap_Event extends WebViewBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired before the web view starts loading its content.
		 */
		interface WebView_beforeload_Event extends WebViewBaseEvent {
			/**
			 * Indicate if the event was generated from the main page or an iframe.
			 */
			isMainFrame: boolean;

			/**
			 * Constant indicating the user's action.
			 */
			navigationType: number;

			/**
			 * URL of the web document being loaded.
			 */
			url: string;

		}
		/**
		 * Fired when the web view cannot load the content.
		 */
		interface WebView_error_Event extends WebViewBaseEvent {
			/**
			 * Error code.
			 * If the error was generated by the operating system, that system's error value
			 * is used. Otherwise, this value will be -1.
			 */
			code: number;

			/**
			 * Error message, if any returned. May be undefined.
			 */
			error: string;

			/**
			 * Indicates a successful operation. Returns `false`.
			 */
			success: boolean;

			/**
			 * URL of the web document.
			 */
			url: string;

		}
		/**
		 * Fired when the web view content is loaded.
		 */
		interface WebView_load_Event extends WebViewBaseEvent {
			/**
			 * URL of the web document.
			 */
			url: string;

		}
		/**
		 * Fired when loading resource.
		 */
		interface WebView_onLoadResource_Event extends WebViewBaseEvent {
			/**
			 * The url of the resource that will load.
			 */
			url: string;

		}
		/**
		 * Fired when an SSL error occurred.
		 */
		interface WebView_sslerror_Event extends WebViewBaseEvent {
			/**
			 * SSL error code.
			 */
			code: number;

		}
		/**
		 * Fired when a blacklisted URL is stopped.
		 */
		interface WebView_blacklisturl_Event extends WebViewBaseEvent {
			/**
			 * The URL of the web document that is stopped.
			 */
			url: string;

		}
		/**
		 * Fired when a URL has been blocked from loading.
		 */
		interface WebView_blockedurl_Event extends WebViewBaseEvent {
			/**
			 * The URL of the web document that has been blocked from loading.
			 */
			url: string;

		}
		/**
		 * Fired when a script message is received from a webpage.
		 */
		interface WebView_message_Event extends WebViewBaseEvent {
			/**
			 * The body of the message sent from webview.
			 */
			body: string;

			/**
			 * A Boolean value indicating whether the frame is the web site's main frame or a subframe.
			 */
			isMainFrame: boolean;

			/**
			 * The name of the message handler to which the message is sent.
			 */
			name: string;

			/**
			 * URL of the web document being loaded.
			 */
			url: string;

		}
		/**
		 * Fired when webpage download progresses.
		 */
		interface WebView_progress_Event extends WebViewBaseEvent {
			/**
			 * URL of the web document being loaded.
			 */
			url: string;

			/**
			 * An estimate of what fraction of the current navigation has been loaded.
			 */
			value: number;

		}
		/**
		 * Fired when a web view receives a server redirect.
		 */
		interface WebView_redirect_Event extends WebViewBaseEvent {
			/**
			 * Page title of webpage.
			 */
			title: string;

			/**
			 * URL of the web document being loaded.
			 */
			url: string;

		}
		/**
		 * Fired when <Titanium.UI.WebView.allowedURLSchemes> contains scheme of opening url.
		 */
		interface WebView_handleurl_Event extends WebViewBaseEvent {
			/**
			 * Handler <Titanium.UI.iOS.WebViewDecisionHandler>.
			 */
			handler: string;

			/**
			 * URL of the web document being loaded.
			 */
			url: string;

		}
		interface WebViewEventMap extends ProxyEventMap {
			beforeload: WebView_beforeload_Event;

			blacklisturl: WebView_blacklisturl_Event;

			blockedurl: WebView_blockedurl_Event;

			click: WebView_click_Event;

			dblclick: WebView_dblclick_Event;

			doubletap: WebView_doubletap_Event;

			error: WebView_error_Event;

			focus: WebView_focus_Event;

			handleurl: WebView_handleurl_Event;

			keypressed: WebView_keypressed_Event;

			load: WebView_load_Event;

			longclick: WebView_longclick_Event;

			longpress: WebView_longpress_Event;

			message: WebView_message_Event;

			onLoadResource: WebView_onLoadResource_Event;

			pinch: WebView_pinch_Event;

			postlayout: WebView_postlayout_Event;

			progress: WebView_progress_Event;

			redirect: WebView_redirect_Event;

			singletap: WebView_singletap_Event;

			sslerror: WebView_sslerror_Event;

			swipe: WebView_swipe_Event;

			touchcancel: WebView_touchcancel_Event;

			touchend: WebView_touchend_Event;

			touchmove: WebView_touchmove_Event;

			touchstart: WebView_touchstart_Event;

			twofingertap: WebView_twofingertap_Event;

		}
		/**
		 * The web view allows you to open an HTML5 based view which can load either local or remote content.
		 */
		class WebView extends Titanium.UI.View {
			/**
			 * List of allowed URL schemes for the web view.
			 */
			allowedURLSchemes: string[];

			/**
			 * A Boolean value indicating whether horizontal swipe gestures will trigger back-forward list navigations.
			 */
			allowsBackForwardNavigationGestures: boolean;

			/**
			 * A Boolean value that determines whether pressing on a link displays a preview of the
			 * destination for the link.
			 */
			allowsLinkPreview: boolean;

			/**
			 * Path of file or directory to allow read access by the WebView.
			 */
			assetsDirectory: string;

			/**
			 * An array of url strings to blacklist.
			 * @deprecated Use the <Titanium.UI.WebView.blockedURLs> property instead.
			 */
			blacklistedURLs: string[];

			/**
			 * An array of url strings to be blocked.
			 */
			blockedURLs: string[];

			/**
			 * Determines how a cache is used in this web view.
			 */
			cacheMode: number;

			/**
			 * The cache policy for the request.
			 */
			cachePolicy: number;

			/**
			 * Array of this view's child views.
			 */
			readonly children: never;

			/**
			 * The configuration for the new web view.
			 */
			configuration: Titanium.UI.iOS.WebViewConfiguration;

			/**
			 * Web content to load.
			 */
			data: Titanium.Blob | Titanium.Filesystem.File;

			/**
			 * Determines whether the view will bounce when scrolling to the edge of the scrollable region.
			 */
			disableBounce: boolean;

			/**
			 * Determines whether or not the webview should not be able to display the context menu.
			 */
			disableContextMenu: boolean;

			/**
			 * Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)
			 */
			enableJavascriptInterface: boolean;

			/**
			 * If `true`, zoom controls are enabled.
			 */
			enableZoomControls: boolean;

			/**
			 * Lets the webview handle platform supported urls
			 * @deprecated This property in no more supported in Titanium SDK 8.0.0+. Use property <Titanium.UI.WebView.allowedURLSchemes>
			 * in conjuction with <Titanium.UI.WebView.handleurl>. See the example section
			 * "Usage of allowedURLSchemes and handleurl in iOS".
			 *
			 */
			handlePlatformUrl: boolean;

			/**
			 * Hides activity indicator when loading remote URL.
			 */
			hideLoadIndicator: boolean;

			/**
			 * HTML content of this web view.
			 */
			html: string;

			/**
			 * Controls whether to ignore invalid SSL certificates or not.
			 */
			ignoreSslError: boolean;

			/**
			 * A Boolean value indicating whether web content can programmatically display the keyboard.
			 */
			keyboardDisplayRequiresUserAction: boolean;

			/**
			 * Enables using light touches to make a selection and activate mouseovers.
			 */
			lightTouchEnabled: boolean;

			/**
			 * Indicates if the webview is loading content.
			 */
			loading: boolean;

			/**
			 * If `true`, allows the loading of insecure resources from a secure origin.
			 */
			mixedContentMode: boolean;

			/**
			 * Callback function called when there is a request for the application to create a new window
			 * to host new content.
			 */
			onCreateWindow: (param0: any) => void;

			/**
			 * Fired before navigating to a link.
			 */
			onlink: (param0: OnLinkURLResponse) => void;

			/**
			 * Determines the behavior when the user overscrolls the view.
			 */
			overScrollMode: number;

			/**
			 * Determines how to treat content that requires plugins in this web view.
			 */
			pluginState: number;

			/**
			 * An estimate of what fraction of the current navigation has been loaded.
			 */
			readonly progress: number;

			/**
			 * Sets extra request headers for this web view to use on subsequent URL requests.
			 */
			requestHeaders: any;

			/**
			 * If `true`, scale contents to fit the web view.
			 */
			scalesPageToFit: boolean;

			/**
			 * Controls whether the scroll-to-top gesture is effective.
			 */
			scrollsToTop: boolean;

			/**
			 * A Boolean value indicating whether all resources on the page have been loaded through
			 * securely encrypted connections.
			 */
			readonly secure: boolean;

			/**
			 * The level of granularity with which the user can interactively select content in the web view.
			 */
			readonly selectionGranularity: number;

			/**
			 * The timeout interval for the request, in seconds.
			 */
			timeout: number;

			/**
			 * Returns page title of webpage.
			 */
			readonly title: string;

			/**
			 * URL to the web document.
			 */
			url: string;

			/**
			 * The User-Agent header used by the web view when requesting content.
			 */
			userAgent: string;

			/**
			 * Explicitly specifies if this web view handles touches.
			 */
			willHandleTouches: boolean;

			/**
			 * Manage the zoom-level of the current page.
			 */
			zoomLevel: number;

			/**
			 * Adds a child to this view's hierarchy.
			 */
			add: never;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof WebViewEventMap>(name: K, callback: (this: Titanium.UI.WebView, event: WebViewEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a script message handler.
			 */
			addScriptMessageHandler(handlerName: string): void;

			/**
			 * Adds a user script.
			 */
			addUserScript(params: UserScriptParams): void;

			/**
			 * An object which maintains a list of visited pages used to go back and forward to the most recent page.
			 */
			backForwardList(): BackForwardList;

			/**
			 * Returns `true` if the web view can go back in its history list.
			 */
			canGoBack(): boolean;

			/**
			 * Returns `true` if the web view can go forward in its history list.
			 */
			canGoForward(): boolean;

			/**
			 * Create a PDF document representation from the web page currently displayed in the WebView.
			 */
			createPDF(callback: (param0: DataCreationResult) => void): void;

			/**
			 * Create WebKit web archive data representing the current web content of the WebView.
			 */
			createWebArchive(callback: (param0: DataCreationResult) => void): void;

			/**
			 * Evaluates a JavaScript expression inside the context of the web view and
			 * optionally, returns a result. If a callback function is passed in as second argument,
			 * the evaluation will take place asynchronously and the the callback function will be called with the result.
			 */
			evalJS(code: string, callback?: (param0: string) => void): string;

			/**
			 * Searches the page contents for the given string.
			 */
			findString(searchString: string, options?: StringSearchOptions, callback?: (param0: SearchResult) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof WebViewEventMap>(name: K, event?: WebViewEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Goes back one entry in the web view's history list, to the previous page.
			 */
			goBack(): void;

			/**
			 * Goes forward one entry in this web view's history list, if possible.
			 */
			goForward(): void;

			/**
			 * Pauses native webview plugins.
			 */
			pause(): void;

			/**
			 * Releases memory when the web view is no longer needed.
			 */
			release(): void;

			/**
			 * Reloads the current webpage.
			 */
			reload(): void;

			/**
			 * Removes a child view from this view's hierarchy.
			 */
			remove: never;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Removes all associated user scripts.
			 */
			removeAllUserScripts(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof WebViewEventMap>(name: K, callback: (this: Titanium.UI.WebView, event: WebViewEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a script message handler.
			 */
			removeScriptMessageHandler(name: string): void;

			/**
			 * Forces the web view to repaint its contents.
			 */
			repaint(): void;

			/**
			 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
			 */
			replaceAt: never;

			/**
			 * Resume native webview plugins.
			 */
			resume(): void;

			/**
			 * Sets the basic authentication for this web view to use on subsequent URL requests.
			 */
			setBasicAuthentication(username: string, password: string, persistence: number): void;

			/**
			 * Sets the value of [html](Titanium.UI.WebView.html) property.
			 */
			setHtml(html: string, options?: setHtmlOptions): void;

			/**
			 * Add native properties for observing for change.
			 */
			startListeningToProperties(propertyList: ReadonlyArray<string>): void;

			/**
			 * Remove native properties from observing.
			 */
			stopListeningToProperties(propertyList: ReadonlyArray<string>): void;

			/**
			 * Stops loading a currently loading page.
			 */
			stopLoading(): void;

			/**
			 * Takes a snapshot of the view's visible viewport.
			 */
			takeSnapshot(callback: (param0: SnapshotResult) => void): void;

		}
		/**
		 * Base event for class Titanium.UI.Window
		 */
		interface WindowBaseEvent extends Ti.Event {
			/**
			 * Source object that fired the event.
			 */
			source: Titanium.UI.Window;

		}
		/**
		 * Fired when the device detects a click against the view.
		 */
		interface Window_click_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double click against the view.
		 */
		interface Window_dblclick_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the double click passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a double tap against the view.
		 */
		interface Window_doubletap_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the double tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the window gains focus.
		 */
		interface Window_focus_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when a hardware key is pressed in the view.
		 */
		interface Window_keypressed_Event extends WindowBaseEvent {
			/**
			 * The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.
			 */
			keyCode: number;

		}
		/**
		 * Fired when the device detects a long click.
		 */
		interface Window_longclick_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the device detects a long press.
		 */
		interface Window_longpress_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the long press passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a pinch gesture.
		 */
		interface Window_pinch_Event extends WindowBaseEvent {
			/**
			 * The average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpan: number;

			/**
			 * The average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanX: number;

			/**
			 * The average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			currentSpanY: number;

			/**
			 * The X coordinate of the current gesture's focal point.
			 */
			focusX: number;

			/**
			 * The Y coordinate of the current gesture's focal point.
			 */
			focusY: number;

			/**
			 * Returns `true` if a scale gesture is in progress, `false` otherwise.
			 */
			inProgress: boolean;

			/**
			 * The previous average distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpan: number;

			/**
			 * The previous average X distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanX: number;

			/**
			 * The previous average Y distance between each of the pointers forming the gesture in progress through
			 * the focal point.
			 */
			previousSpanY: number;

			/**
			 * The scale factor relative to the points of the two touches in screen coordinates.
			 */
			scale: number;

			/**
			 * The event time of the current event being processed.
			 */
			time: number;

			/**
			 * The time difference in milliseconds between the previous accepted scaling event and the
			 * current scaling event.
			 */
			timeDelta: number;

			/**
			 * The velocity of the pinch in scale factor per second.
			 */
			velocity: number;

		}
		/**
		 * Fired when a layout cycle is finished.
		 */
		interface Window_postlayout_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the device detects a single tap against the view.
		 */
		interface Window_singletap_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the single tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a swipe gesture against the view.
		 */
		interface Window_swipe_Event extends WindowBaseEvent {
			/**
			 * Direction of the swipe--either 'left', 'right', 'up', or 'down'.
			 */
			direction: string;

			/**
			 * Returns `true` if the swipe passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event's endpoint from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is interrupted by the device.
		 */
		interface Window_touchcancel_Event extends WindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when a touch event is completed.
		 */
		interface Window_touchend_Event extends WindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects movement of a touch.
		 */
		interface Window_touchmove_Event extends WindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired as soon as the device detects a touch gesture.
		 */
		interface Window_touchstart_Event extends WindowBaseEvent {
			/**
			 * A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
			 * being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
			 * Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
			 */
			altitudeAngle: number;

			/**
			 * The x value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewX: number;

			/**
			 * The y value of the unit vector that points in the direction of the azimuth of the stylus.
			 * Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
			 */
			azimuthUnitVectorInViewY: number;

			/**
			 * The current force value of the touch event.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
			 */
			force: number;

			/**
			 * Maximum possible value of the force property.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			maximumPossibleForce: number;

			/**
			 * Returns `true` if the touch passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * The current size of the touch area. Note: This property is only available on some Android devices.
			 */
			size: number;

			/**
			 * The time (in seconds) when the touch was used in correlation with the system start up.
			 * Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
			 */
			timestamp: number;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the device detects a two-finger tap against the view.
		 */
		interface Window_twofingertap_Event extends WindowBaseEvent {
			/**
			 * Returns `true` if the tap passed through an overlapping window belonging to another app.
			 * This is a security feature to protect an app from "tapjacking", where a malicious app can use a
			 * system overlay to intercept touch events in your app or to trick the end-user to tap on UI
			 * in your app intended for the overlay.
			 */
			obscured: boolean;

			/**
			 * X coordinate of the event from the `source` view's coordinate system.
			 */
			x: number;

			/**
			 * Y coordinate of the event from the `source` view's coordinate system.
			 */
			y: number;

		}
		/**
		 * Fired when the back button is pressed by the user.
		 */
		interface Window_androidback_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the Camera button is released.
		 */
		interface Window_androidcamera_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the Camera button is half-pressed then released.
		 */
		interface Window_androidfocus_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the Search button is released.
		 */
		interface Window_androidsearch_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the volume down button is released.
		 */
		interface Window_androidvoldown_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the volume up button is released.
		 */
		interface Window_androidvolup_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the window loses focus.
		 */
		interface Window_blur_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the window is closed.
		 */
		interface Window_close_Event extends WindowBaseEvent {
		}
		/**
		 * Fired when the window is opened.
		 */
		interface Window_open_Event extends WindowBaseEvent {
		}
		interface WindowEventMap extends ProxyEventMap {
			androidback: Window_androidback_Event;

			androidcamera: Window_androidcamera_Event;

			androidfocus: Window_androidfocus_Event;

			androidsearch: Window_androidsearch_Event;

			androidvoldown: Window_androidvoldown_Event;

			androidvolup: Window_androidvolup_Event;

			blur: Window_blur_Event;

			click: Window_click_Event;

			close: Window_close_Event;

			dblclick: Window_dblclick_Event;

			doubletap: Window_doubletap_Event;

			focus: Window_focus_Event;

			keypressed: Window_keypressed_Event;

			longclick: Window_longclick_Event;

			longpress: Window_longpress_Event;

			open: Window_open_Event;

			pinch: Window_pinch_Event;

			postlayout: Window_postlayout_Event;

			singletap: Window_singletap_Event;

			swipe: Window_swipe_Event;

			touchcancel: Window_touchcancel_Event;

			touchend: Window_touchend_Event;

			touchmove: Window_touchmove_Event;

			touchstart: Window_touchstart_Event;

			twofingertap: Window_twofingertap_Event;

		}
		/**
		 * The Window is an empty drawing surface or container.
		 */
		class Window extends Titanium.UI.View {
			/**
			 * Contains a reference to the Android Activity object associated with this window.
			 */
			readonly activity: Titanium.Android.Activity;

			/**
			 * The type of transition used when activity is entering.
			 */
			activityEnterTransition: number;

			/**
			 * The type of transition used when activity is exiting.
			 */
			activityExitTransition: number;

			/**
			 * The type of transition used when reentering to a previously started activity.
			 */
			activityReenterTransition: number;

			/**
			 * The type of transition used when returning from a previously started activity.
			 */
			activityReturnTransition: number;

			/**
			 * The type of enter transition used when animating shared elements between two activities.
			 */
			activitySharedElementEnterTransition: number;

			/**
			 * The type of exit transition used when animating shared elements between two activities.
			 */
			activitySharedElementExitTransition: number;

			/**
			 * The type of reenter transition used when animating shared elements between two activities.
			 */
			activitySharedElementReenterTransition: number;

			/**
			 * The type of return transition used when animating shared elements between two activities.
			 */
			activitySharedElementReturnTransition: number;

			/**
			 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
			 */
			autoAdjustScrollViewInsets: boolean;

			/**
			 * Title for the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitle: string;

			/**
			 * The image to show as the back button. This is only valid when the window is a child of a tab.
			 */
			backButtonTitleImage: string | Titanium.Blob;

			/**
			 * Background color of the window, as a color name or hex triplet.
			 */
			backgroundColor: string | Titanium.UI.Color;

			/**
			 * Background color for the nav bar, as a color name or hex triplet.
			 */
			barColor: string | Titanium.UI.Color;

			/**
			 * Background image for the nav bar, specified as a URL to a local image.
			 */
			barImage: string;

			/**
			 * Window's bottom position, in platform-specific units.
			 */
			bottom: number | string;

			/**
			 * Determines whether this Window is closed.
			 */
			readonly closed: boolean;

			/**
			 * Boolean value indicating if the application should exit when the Android
			 * Back button is pressed while the window is being shown or when the window
			 * is closed programmatically.
			 */
			exitOnClose: boolean;

			/**
			 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
			 */
			extendEdges: number[];

			/**
			 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
			 */
			extendSafeArea: boolean;

			/**
			 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
			 */
			flagSecure: boolean;

			/**
			 * Determines whether this TextArea has focus.
			 */
			readonly focused: boolean;

			/**
			 * Boolean value indicating if the window is fullscreen.
			 */
			fullscreen: boolean;

			/**
			 * Set this to true to hide the shadow image of the navigation bar.
			 */
			hideShadow: boolean;

			/**
			 * Set this to true to hide the back button of navigation bar.
			 */
			hidesBackButton: boolean;

			/**
			 * Set this to true to hide the navigation bar on swipe.
			 */
			hidesBarsOnSwipe: boolean;

			/**
			 * Set this to true to hide the navigation bar on tap.
			 */
			hidesBarsOnTap: boolean;

			/**
			 * Set this to true to hide the navigation bar when the keyboard appears.
			 */
			hidesBarsWhenKeyboardAppears: boolean;

			/**
			 * A Boolean value indicating whether the integrated search bar is hidden when scrolling any underlying content.
			 */
			hidesSearchBarWhenScrolling: boolean;

			/**
			 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
			 */
			homeIndicatorAutoHidden: boolean;

			/**
			 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
			 */
			includeOpaqueBars: boolean;

			/**
			 * The mode to use when displaying the title of the navigation bar.
			 */
			largeTitleDisplayMode: number;

			/**
			 * A Boolean value indicating whether the title should be displayed in a large format.
			 */
			largeTitleEnabled: boolean;

			/**
			 * Window's left position, in platform-specific units.
			 */
			left: number | string;

			/**
			 * View to show in the left nav bar area.
			 */
			leftNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the left nav bar area.
			 */
			leftNavButtons: Titanium.UI.View[];

			/**
			 * Indicates to open a modal window or not.
			 */
			modal: boolean;

			/**
			 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
			 */
			navBarHidden: boolean;

			/**
			 * The tintColor to apply to the navigation bar.
			 */
			navTintColor: string | Titanium.UI.Color;

			/**
			 * The <Titanium.UI.NavigationWindow> instance hosting this window.
			 */
			readonly navigationWindow: Titanium.UI.NavigationWindow;

			/**
			 * Callback function that overrides the default behavior when the user presses the **Back**
			 * button.
			 */
			onBack: () => void;

			/**
			 * The opacity from 0.0-1.0.
			 */
			opacity: number;

			/**
			 * Current orientation of the window.
			 */
			readonly orientation: number;

			/**
			 * Array of supported orientation modes, specified using the orientation
			 * constants defined in <Titanium.UI>.
			 */
			orientationModes: number[];

			/**
			 * Window's right position, in platform-specific units.
			 */
			right: number | string;

			/**
			 * View to show in the right nav bar area.
			 */
			rightNavButton: Titanium.UI.View;

			/**
			 * An Array of views to show in the right nav bar area.
			 */
			rightNavButtons: Titanium.UI.View[];

			/**
			 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
			 */
			readonly safeAreaPadding: Padding;

			/**
			 * Shadow image for the navigation bar, specified as a URL to a local image..
			 */
			shadowImage: string;

			/**
			 * Boolean value to enable split action bar.
			 * @deprecated Deprecated in AppCompat theme. The same behaviour can be achived by using Toolbar.
			 */
			splitActionBar: boolean;

			/**
			 * The status bar style associated with this window.
			 */
			statusBarStyle: number;

			/**
			 * Maintain a sustainable level of performance.
			 */
			sustainedPerformanceMode: boolean;

			/**
			 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
			 */
			swipeToClose: boolean;

			/**
			 * Boolean value indicating if the tab bar should be hidden.
			 */
			tabBarHidden: boolean;

			/**
			 * Name of the theme to apply to the window.
			 */
			theme: string;

			/**
			 * Title of the window.
			 */
			title: string;

			/**
			 * Title text attributes of the window.
			 */
			titleAttributes: titleAttributesParams;

			/**
			 * View to show in the title area of the nav bar.
			 */
			titleControl: Titanium.UI.View;

			/**
			 * Image to show in the title area of the nav bar, specified as a local file path or URL.
			 */
			titleImage: string;

			/**
			 * Title prompt for the window.
			 */
			titlePrompt: string;

			/**
			 * Key identifying a string from the locale file to use for the window title.
			 */
			titleid: string;

			/**
			 * Key identifying a string from the locale file to use for the window title prompt.
			 */
			titlepromptid: string;

			/**
			 * Array of button objects to show in the window's toolbar.
			 */
			toolbar: Titanium.UI.View[];

			/**
			 * Window's top position, in platform-specific units.
			 */
			top: number | string;

			/**
			 * Use a transition animation when opening or closing windows in a
			 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
			 */
			transitionAnimation: Titanium.Proxy;

			/**
			 * Boolean value indicating if the nav bar is translucent.
			 */
			translucent: boolean;

			/**
			 * Additional flags to set on the Activity Window.
			 */
			windowFlags: number;

			/**
			 * Set the pixel format for the Activity's Window.
			 */
			windowPixelFormat: number;

			/**
			 * Determines whether a window's soft input area (ie software keyboard) is visible
			 * as it receives focus and how the window behaves in order to accomodate it while keeping its
			 * contents in view.
			 */
			windowSoftInputMode: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener<K extends keyof WindowEventMap>(name: K, callback: (this: Titanium.UI.Window, event: WindowEventMap[K]) => void): void;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a common UI element to participate in window transition animation.
			 */
			addSharedElement(view: Titanium.UI.View, transitionName: string): void;

			/**
			 * Closes the window.
			 */
			close(params?: Titanium.UI.Animation | Dictionary<Titanium.UI.Animation> | closeWindowParams): Promise<any>;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent<K extends keyof WindowEventMap>(name: K, event?: WindowEventMap[K]): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Hides the navigation bar.
			 */
			hideNavBar(options?: AnimatedOptions): void;

			/**
			 * Hides the tab bar. Must be called before opening the window.
			 */
			hideTabBar(): void;

			/**
			 * Makes the bottom toolbar invisible.
			 */
			hideToolbar(options?: AnimatedOptions): void;

			/**
			 * Opens the window.
			 */
			open(params?: openWindowParams): Promise<any>;

			/**
			 * Removes all child views from this view's hierarchy.
			 */
			removeAllChildren: never;

			/**
			 * Clears all added shared elements.
			 */
			removeAllSharedElements(): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener<K extends keyof WindowEventMap>(name: K, callback: (this: Titanium.UI.Window, event: WindowEventMap[K]) => void): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Sets the array of items to show in the window's toolbar.
			 */
			setToolbar(items: ReadonlyArray<any>, params?: windowToolbarParam): void;

			/**
			 * Makes the navigation bar visible.
			 */
			showNavBar(options?: AnimatedOptions): void;

			/**
			 * Makes the bottom toolbar visible.
			 */
			showToolbar(options?: AnimatedOptions): void;

		}
		/**
		 * Apple iOS specific UI capabilities.  All properties, methods and events in this namespace will
		 * only work on Apple iOS devices.
		 */
		class iOS extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Value of the badge for the application's springboard icon.
			 */
			static appBadge: number;

			/**
			 * Determines whether the shake to edit system-wide capability is enabled.
			 */
			static appSupportsShakeToEdit: boolean;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * Determines if the 3D-Touch capability "Force Touch" is supported (`true`) or not (`false`) by the device.
			 */
			static readonly forceTouchSupported: boolean;

			/**
			 * Sets the global status bar background color for the application. Android does not support setting instances of <Titanium.UI.Color>
			 */
			static statusBarBackgroundColor: string | Titanium.UI.Color;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.AnchorAttachmentBehavior>.
			 */
			static createAnchorAttachmentBehavior(parameters?: Dictionary<Titanium.UI.iOS.AnchorAttachmentBehavior>): Titanium.UI.iOS.AnchorAttachmentBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Animator>.
			 */
			static createAnimator(parameters?: Dictionary<Titanium.UI.iOS.Animator>): Titanium.UI.iOS.Animator;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.BlurView>.
			 */
			static createBlurView(parameters?: Dictionary<Titanium.UI.iOS.BlurView>): Titanium.UI.iOS.BlurView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.CollisionBehavior>.
			 */
			static createCollisionBehavior(parameters?: Dictionary<Titanium.UI.iOS.CollisionBehavior>): Titanium.UI.iOS.CollisionBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.CoverFlowView>.
			 */
			static createCoverFlowView(parameters?: Dictionary<Titanium.UI.iOS.CoverFlowView>): Titanium.UI.iOS.CoverFlowView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.DocumentViewer>.
			 */
			static createDocumentViewer(parameters?: Dictionary<Titanium.UI.iOS.DocumentViewer>): Titanium.UI.iOS.DocumentViewer;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.DynamicItemBehavior>.
			 */
			static createDynamicItemBehavior(parameters?: Dictionary<Titanium.UI.iOS.DynamicItemBehavior>): Titanium.UI.iOS.DynamicItemBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.GravityBehavior>.
			 */
			static createGravityBehavior(parameters?: Dictionary<Titanium.UI.iOS.GravityBehavior>): Titanium.UI.iOS.GravityBehavior;

			/**
			 * Creates a live photo badge to be used together with the
			 * <Titanium.UI.iOS.LivePhotoView> API.
			 */
			static createLivePhotoBadge(type: number): Titanium.Blob;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.LivePhotoView>.
			 */
			static createLivePhotoView(parameters?: Dictionary<Titanium.UI.iOS.LivePhotoView>): Titanium.UI.iOS.LivePhotoView;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.MenuPopup>.
			 */
			static createMenuPopup(parameters?: Dictionary<Titanium.UI.iOS.MenuPopup>): Titanium.UI.iOS.MenuPopup;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.NavigationWindow>.
			 * @deprecated Use [Titanium.UI.NavigationWindow](Titanium.UI.NavigationWindow) instead.
			 */
			static createNavigationWindow: never;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewAction>.
			 */
			static createPreviewAction(parameters?: Dictionary<Titanium.UI.iOS.PreviewAction>): Titanium.UI.iOS.PreviewAction;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewActionGroup>.
			 */
			static createPreviewActionGroup(parameters?: Dictionary<Titanium.UI.iOS.PreviewActionGroup>): Titanium.UI.iOS.PreviewActionGroup;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PreviewContext>.
			 */
			static createPreviewContext(parameters?: Dictionary<Titanium.UI.iOS.PreviewContext>): Titanium.UI.iOS.PreviewContext;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.PushBehavior>.
			 */
			static createPushBehavior(parameters?: Dictionary<Titanium.UI.iOS.PushBehavior>): Titanium.UI.iOS.PushBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.SnapBehavior>.
			 */
			static createSnapBehavior(parameters?: Dictionary<Titanium.UI.iOS.SnapBehavior>): Titanium.UI.iOS.SnapBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.SplitWindow>.
			 */
			static createSplitWindow(parameters?: Dictionary<Titanium.UI.iOS.SplitWindow>): Titanium.UI.iOS.SplitWindow;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Stepper>.
			 */
			static createStepper(parameters?: Dictionary<Titanium.UI.iOS.Stepper>): Titanium.UI.iOS.Stepper;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.SystemButton>.
			 */
			static createSystemButton(parameters?: Dictionary<Titanium.UI.iOS.SystemButton>): Titanium.UI.iOS.SystemButton;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.TabbedBar>.
			 * @deprecated Use [Titanium.UI.TabbedBar](Titanium.UI.TabbedBar) instead.
			 */
			static createTabbedBar: never;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.Toolbar>.
			 * @deprecated Use the cross-platform [Titanium.UI.Toolbar](Titanium.UI.Toolbar) instead.
			 */
			static createToolbar: never;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.TransitionAnimation>.
			 */
			static createTransitionAnimation(parameters?: Dictionary<Titanium.UI.iOS.TransitionAnimation>): Titanium.UI.iOS.TransitionAnimation;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.ViewAttachmentBehavior>.
			 */
			static createViewAttachmentBehavior(parameters?: Dictionary<Titanium.UI.iOS.ViewAttachmentBehavior>): Titanium.UI.iOS.ViewAttachmentBehavior;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewConfiguration>.
			 */
			static createWebViewConfiguration(parameters?: Dictionary<Titanium.UI.iOS.WebViewConfiguration>): Titanium.UI.iOS.WebViewConfiguration;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewDecisionHandler>.
			 */
			static createWebViewDecisionHandler(parameters?: Dictionary<Titanium.UI.iOS.WebViewDecisionHandler>): Titanium.UI.iOS.WebViewDecisionHandler;

			/**
			 * Creates and returns an instance of <Titanium.UI.iOS.WebViewProcessPool>.
			 */
			static createWebViewProcessPool(parameters?: Dictionary<Titanium.UI.iOS.WebViewProcessPool>): Titanium.UI.iOS.WebViewProcessPool;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Get image from SF Symbols provided by Apple.
			 */
			static systemImage(name: string, parameters?: SystemImageParameters): Titanium.Blob;

		}
		/**
		 * iPad specific UI capabilities.
		 */
		class iPad extends Titanium.Module {
			/**
			 * The name of the API that this proxy corresponds to.
			 */
			static readonly apiName: string;

			/**
			 * Indicates if the proxy will bubble an event to its parent.
			 */
			static bubbleParent: boolean;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Applies the properties to the proxy.
			 */
			static applyProperties(props: any): void;

			/**
			 * Creates and returns an instance of <Titanium.UI.iPad.Popover>.
			 */
			static createPopover(parameters?: Dictionary<Titanium.UI.iPad.Popover>): Titanium.UI.iPad.Popover;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			static fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
	}
	/**
	 * The top level XML module.  The XML module is used for parsing and processing XML-based content.
	 */
	namespace XML {
		/**
		 * This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself not the entity declaration. The nodeName attribute that is inherited from Node contains the name of the entity. An Entity node does not have any parent.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-527DCFF2) on Android and iOS.
		 */
		namespace Entity {
			/**
			 * For unparsed entities, the name of the notation for the entity. For parsed entities, this is `null`.
			 */
			const notationName: string;

			/**
			 * The public identifier associated with the entity, if specified. If the public identifier was not specified, this is `null`.
			 */
			const publicId: string;

			/**
			 * The system identifier associated with the entity, if specified. If the system identifier was not specified, this is null.
			 */
			const systemId: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Represents a notation declared in the DTD.  Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-5431D1B9) on Android and iOS.
		 */
		namespace Notation {
			/**
			 * The public identifier of this notation. If the public identifier was not specified, this is `null`.
			 */
			const publicId: string;

			/**
			 * The system identifier of this notation. If the system identifier was not specified, this is `null`.
			 */
			const systemId: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			function addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			function fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			function removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Represents an attribute of an [Element](Titanium.XML.Element).
		 */
		class Attr extends Titanium.XML.Node {
			/**
			 * Attribute name
			 */
			readonly name: string;

			/**
			 * The <Titanium.XML.Element> to which the attribute belongs.
			 */
			readonly ownerElement: Titanium.XML.Element;

			/**
			 * True if this attribute was explicitly given a value in the instance document, false otherwise.
			 */
			readonly specified: boolean;

			/**
			 * The attribute value as a string.
			 */
			value: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Used to include blocks of literal text containing characters that would otherwise need
		 * to be escaped.
		 */
		class CDATASection extends Titanium.XML.Text {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * An interface extending <Titanium.XML.Node> with a set of attributes and methods for accessing character data in the DOM.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-FF21A306) on Android and iOS. For reasons of compatibility with the javascript engine, text is represented by UTF-8 instead of UTF-16 on Android and iOS.
		 */
		class CharacterData extends Titanium.XML.Node {
			/**
			 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
			 */
			data: string;

			/**
			 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
			 */
			readonly length: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
			 */
			appendData(arg: string): void;

			/**
			 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			deleteData(offset: number, count: number): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
			 */
			insertData(offset: number, arg: string): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			replaceData(offset: number, count: number, arg: string): void;

			/**
			 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
			 */
			substringData(offset: number, count: number): string;

		}
		/**
		 * Represents the contents of an XML comment.
		 */
		class Comment extends Titanium.XML.CharacterData {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The <Titanium.XML.DOMImplementation> interface provides a number of methods for performing operations that are independent of any particular instance of the document object model.Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490) on Android and iOS.
		 */
		class DOMImplementation extends Titanium.Proxy {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Creates an <Titanium.XML.Document> object of the specified type with its document element. Raises an exception if qualifiedName is malformed, contains an illegal character, or is inconsistent with namespaceURI. Also raises an exception if doctype has already been used with a different document.
			 */
			createDocument(namespaceURI: string, qualifiedName: string, doctype: Titanium.XML.DocumentType): Titanium.XML.Document;

			/**
			 * Creates an empty <Titanium.XML.DocumentType> node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. Raises an exception if qualifiedName is malformed or contains an illegal character.
			 */
			createDocumentType(qualifiedName: string, publicId: string, systemId: string): Titanium.XML.DocumentType;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Test if the <Titanium.XML.DOMImplementation> implements a specific feature.
			 */
			hasFeature(feature: string, version: string): boolean;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * The DOM Document returned from <Titanium.XML.parseString>.
		 */
		class Document extends Titanium.XML.Node {
			/**
			 * An interface to the list of entities that are defined for the document, such as via a Document Type Definition (DTD).
			 */
			readonly doctype: Titanium.XML.DocumentType;

			/**
			 * Root element of this document.
			 */
			readonly documentElement: Titanium.XML.Element;

			/**
			 * [DOMImplementation](Titanium.XML.DOMImplementation) object associated with this
			 * document.
			 */
			readonly implementation: Titanium.XML.DOMImplementation;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Creates an attribute with the given name.
			 */
			createAttribute(name: string): Titanium.XML.Attr;

			/**
			 * Creates an attribute with the given name and namespace.
			 */
			createAttributeNS(namespaceURI: string, name: string): Titanium.XML.Attr;

			/**
			 * Creates and returns a [CDATASection](Titanium.XML.CDATASection).
			 */
			createCDATASection(data: string): Titanium.XML.CDATASection;

			/**
			 * Creates a [Comment](Titanium.XML.Comment) with the supplied string data.
			 */
			createComment(data: string): Titanium.XML.Comment;

			/**
			 * Creates an empty [DocumentFragment](Titanium.XML.DocumentFragment).
			 */
			createDocumentFragment(): Titanium.XML.DocumentFragment;

			/**
			 * Creates an element with the given tag name.
			 */
			createElement(tagName: string): Titanium.XML.Element;

			/**
			 * Create a new element with the given namespace and name.
			 */
			createElementNS(namespaceURI: string, name: string): Titanium.XML.Element;

			/**
			 * Creates an [EntityReference](Titanium.XML.EntityReference) with the given name.
			 */
			createEntityReference(name: string): Titanium.XML.EntityReference;

			/**
			 * Creates a processing instruction for inserting into the DOM tree.
			 */
			createProcessingInstruction(target: string, data: string): Titanium.XML.ProcessingInstruction;

			/**
			 * Creates a text node.
			 */
			createTextNode(data: string): Titanium.XML.Text;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns an [Element](Titanium.XML.Element) that has an ID attribute with the given value.
			 */
			getElementById(elementId: string): Titanium.XML.Element;

			/**
			 * Returns a node list of elements in the document which have the given tag.
			 */
			getElementsByTagName(tagname: string): Titanium.XML.NodeList;

			/**
			 * Returns a node list of elements in the document which belong to the given namespace and have the given tag name.
			 */
			getElementsByTagNameNS(namespaceURI: string, localname: string): Titanium.XML.NodeList;

			/**
			 * Imports a node from another document to this document,
			 * without altering or removing the source node from the original document.
			 */
			importNode(importedNode: Titanium.XML.Node, deep: boolean): Titanium.XML.Node;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * A lightweight document object used as a container for a group of nodes.
		 */
		class DocumentFragment extends Titanium.XML.Node {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Each <Titanium.XML.Document> has a `doctype` attribute whose value is either 'null' or a <Titanium.XML.DocumentType> object.
		 */
		interface DocumentType extends Titanium.XML.Node {
			/**
			 * A <Titanium.XML.NamedNodeMap> containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded.
			 */
			readonly entities: Titanium.XML.NamedNodeMap;

			/**
			 * The internal subset as a string.
			 */
			readonly internalSubset: string;

			/**
			 * The name of DTD; i.e., the name immediately following the `DOCTYPE` keyword.
			 */
			readonly name: string;

			/**
			 * A <Titanium.XML.NamedNodeMap> containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the <Titanium.XML.Notation> interface.
			 */
			readonly notations: Titanium.XML.NamedNodeMap;

			/**
			 * The public identifier of the external subset.
			 */
			readonly publicId: string;

			/**
			 * The system identifier of the external subset.
			 */
			readonly systemId: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Represents an element in a DOM document, a <Titanium.XML.Node> defined by a start-tag and end-tag (or an empty tag). Elements may have [attributes](Titanium.XML.Attr) associated with them.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614) on Android and iOS with some non-standard extensions.
		 */
		class Element extends Titanium.XML.Node {
			/**
			 * The name of the element, as defined by its tag.
			 */
			readonly tagName: string;

			/**
			 * Content (value) of all text nodes within this node.
			 * @deprecated Use [Titanium.XML.Element.textContent](Titanium.XML.Element.textContent) instead.
			 */
			readonly text: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Retrieves an attribute value by name, returning it as a string.
			 */
			getAttribute(name: string): string;

			/**
			 * Retrieves an attribute value by local name and namespace URI, returning it as a string.
			 */
			getAttributeNS(namespaceURI: string, localName: string): string;

			/**
			 * Retrieves an attribute value by name, returning it as a <Titanium.XML.Attr> object.
			 */
			getAttributeNode(name: string): Titanium.XML.Attr;

			/**
			 * Retrieves an attribute value by local name and namespace URI, returning it as a <Titanium.XML.Attr> object.
			 */
			getAttributeNodeNS(namespaceURI: string, localName: string): Titanium.XML.Attr;

			/**
			 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given tag name, in preorder traversal.
			 */
			getElementsByTagName(name: string): Titanium.XML.NodeList;

			/**
			 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given local name and namespace URI, in preorder traversal.
			 */
			getElementsByTagNameNS(namespaceURI: string, localName: string): Titanium.XML.NodeList;

			/**
			 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
			 */
			hasAttribute(name: string): boolean;

			/**
			 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
			 */
			hasAttributeNS(namespaceURI: string, localName: string): boolean;

			/**
			 * Removes an attribute by name. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
			 */
			removeAttribute(name: string): void;

			/**
			 * Removes an attribute by local name and namespace URI. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
			 */
			removeAttributeNS(namespaceURI: string, localName: string): void;

			/**
			 * Removes the specified attribute node. If the removed attribute has a default value, it is replaced immediately, with the same namespace and local name as the removed attribute, if applicable. Throws an exception if the element is read-only, or the attribute is not an attribute of the element.
			 */
			removeAttributeNode(oldAttr: Titanium.XML.Attr): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Adds a new attribute. Any attribute with the same name is replaced. Throws an exception if the element is read-only, or if the name contains an illegal character.
			 */
			setAttribute(name: string, value: string): void;

			/**
			 * Adds a new attribute. Any attribute with the same local name and namespace URI is present on the element is replaced, with its prefix changed to that of the `qualifiedName` parameter. Throws an exception if the element is read-only, if the name contains an illegal character, or if the qualified name contains an error.
			 */
			setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;

			/**
			 * Adds a new attribute. Any attribute with the same `nodeName` as the argument is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
			 */
			setAttributeNode(newAttr: Titanium.XML.Attr): Titanium.XML.Attr;

			/**
			 * Adds a new attribute. Any attribute with the same local name and namespace URI is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
			 */
			setAttributeNodeNS(newAttr: Titanium.XML.Attr): Titanium.XML.Attr;

		}
		/**
		 * Represents an XML entity reference.
		 */
		class EntityReference extends Titanium.XML.Node {
			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * A key-value paired map that maps String objects to <Titanium.XML.Node> objects.
		 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1780488922) on Android and iOS.
		 */
		class NamedNodeMap extends Titanium.Proxy {
			/**
			 * The number of nodes in the map. The valid range of child node indices is 0-`length`-1, inclusive.
			 */
			readonly length: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Retrieves a node specified by name.
			 */
			getNamedItem(name: string): Titanium.XML.Node;

			/**
			 * Retrieves a node specified by name and namespace. Returns `null` if no matching node is in the map.
			 */
			getNamedItemNS(namespaceURI: string, localName: string): Titanium.XML.Node;

			/**
			 * Retrieves the node at the specified index of the map. Note that NamedNodeMaps are not ordered.
			 */
			item(index: number): Titanium.XML.Node;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Removes a node from the map specified by name. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value.
			 */
			removeNamedItem(name: string): Titanium.XML.Node;

			/**
			 * Removes a node from the map specified by local name and namespace URI. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value. Returns the node removed from the map, or `null` if there is no corresponding node.
			 */
			removeNamedItemNS(namespaceURI: string, localName: string): Titanium.XML.Node;

			/**
			 * Adds a node using its `nodeName` attribute. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
			 */
			setNamedItem(node: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Adds a node using its `namespaceURI` and `localName` attributes. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
			 */
			setNamedItemNS(node: Titanium.XML.Node): Titanium.XML.Node;

		}
		/**
		 * A single node in the [Document](Titanium.XML.Document) tree.
		 */
		class Node extends Titanium.Proxy {
			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Attr](Titanium.XML.Attr) node.
			 */
			readonly ATTRIBUTE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [CDATASection](Titanium.XML.CDATASection) node.
			 */
			readonly CDATA_SECTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Comment](Titanium.XML.Comment) node.
			 */
			readonly COMMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
			 */
			readonly DOCUMENT_FRAGMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Document](Titanium.XML.Document) node.
			 */
			readonly DOCUMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [DocumentType](Titanium.XML.DocumentType) node.
			 */
			readonly DOCUMENT_TYPE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Element](Titanium.XML.Element) node.
			 */
			readonly ELEMENT_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [Entity](Titanium.XML.Entity) node.
			 */
			readonly ENTITY_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
			 * [EntityReference](Titanium.XML.EntityReference) node.
			 */
			readonly ENTITY_REFERENCE_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Notation](Titanium.XML.Notation) node.
			 */
			readonly NOTATION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
			 */
			readonly PROCESSING_INSTRUCTION_NODE: number;

			/**
			 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
			 * [Text](Titanium.XML.Text) node.
			 */
			readonly TEXT_NODE: number;

			/**
			 * A map of this node's attributes.
			 */
			readonly attributes: Titanium.XML.NamedNodeMap;

			/**
			 * A <Titanium.XML.NodeList> of this node's children.
			 */
			readonly childNodes: Titanium.XML.NodeList;

			/**
			 * This node's first child.
			 */
			readonly firstChild: Titanium.XML.Node;

			/**
			 * This node's last child.
			 */
			readonly lastChild: Titanium.XML.Node;

			/**
			 * Local part of the qualified name of this node.
			 */
			localName: string;

			/**
			 * Namespace URI of this node.
			 */
			readonly namespaceURI: string;

			/**
			 * This node's next sibling.
			 */
			readonly nextSibling: Titanium.XML.Node;

			/**
			 * Name of this node.
			 */
			readonly nodeName: string;

			/**
			 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
			 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
			 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
			 */
			readonly nodeType: number;

			/**
			 * Content (value) of this node.
			 */
			nodeValue: string;

			/**
			 * This node's owning document.
			 */
			readonly ownerDocument: Titanium.XML.Document;

			/**
			 * This node's parent node.
			 */
			readonly parentNode: Titanium.XML.Node;

			/**
			 * Namespace prefix of this node.
			 */
			prefix: string;

			/**
			 * This node's previous sibling.
			 */
			readonly previousSibling: Titanium.XML.Node;

			/**
			 * Content (value) of all text nodes within this node.
			 * @deprecated Use [Titanium.XML.Node.textContent](Titanium.XML.Node.textContent) instead.
			 */
			readonly text: string;

			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Appends the node `newChild` as a child of this node.
			 */
			appendChild(newChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Returns a duplicate of this node.
			 */
			cloneNode(deep: boolean): Titanium.XML.Node;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns `true` if this node has attributes.
			 */
			hasAttributes(): boolean;

			/**
			 * Returns `true` if this node has child nodes.
			 */
			hasChildNodes(): boolean;

			/**
			 * Inserts the node `newChild` before the node `refChild`.
			 */
			insertBefore(newChild: Titanium.XML.Node, refChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Tests whether the DOM implementation supports a specific feature.
			 */
			isSupported(feature: string, version: string): boolean;

			/**
			 * Normalizes text and attribute nodes in this node's child hierarchy.
			 */
			normalize(): void;

			/**
			 * Removes a child node from this node.
			 */
			removeChild(oldChild: Titanium.XML.Node): Titanium.XML.Node;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Replaces the node `oldChild` with the node `newChild`.
			 */
			replaceChild(newChild: Titanium.XML.Node, oldChild: Titanium.XML.Node): Titanium.XML.Node;

		}
		/**
		 * A list of <Titanium.XML.Node> objects. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177) on Android and iOS.
		 */
		class NodeList extends Titanium.Proxy {
			/**
			 * The length of the node list.
			 */
			readonly length: number;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Returns the <Titanium.XML.Node> object at the specified index.
			 */
			item(index: number): Titanium.XML.Node;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * A way to keep processor-specific information in the text of the document. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1004215813) on Android and iOS.
		 */
		class ProcessingInstruction extends Titanium.Proxy {
			/**
			 * Retrieve the content of this processing instruction. This from the first non white space character after the target to the character immediatly preceding the ?>. When setting a processing instruction, a DOMException may be thrown on an invalid instruction.
			 */
			data: string;

			/**
			 * Retrieve the target of this processing instruction. XML defines this as being the first token following the markup that begins the processing instruction.
			 */
			readonly target: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		}
		/**
		 * Represents the textual content of an <Titanium.XML.Element> or <Titanium.XML.Attr> Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1312295772) on Android and iOS.
		 */
		class Text extends Titanium.XML.CharacterData {
			/**
			 * Content (value) of all text nodes within this node.
			 */
			readonly textContent: string;

			/**
			 * Adds the specified callback as an event listener for the named event.
			 */
			addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Fires a synthesized event to any registered listeners.
			 */
			fireEvent(name: string, event?: any): void;

			/**
			 * Removes the specified callback as an event listener for the named event.
			 */
			removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

			/**
			 * Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.
			 */
			splitText(offset: number): Titanium.XML.Text;

		}
	}
	/**
	 * The top-level API module, containing methods to output messages to the system log.
	 */
	class API extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Logs messages with a `debug` severity-level.
		 */
		static debug(message: string[] | string): void;

		/**
		 * Logs messages with an `error` severity-level.
		 */
		static error(message: string[] | string): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Logs messages with an `info` severity-level.
		 */
		static info(message: string[] | string): void;

		/**
		 * Logs messages with the specified severity-level.
		 */
		static log(level: string, message: string[] | string): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Logs messages with a `timestamp` severity-level, prefixed with a timestamp float number
		 * representing the number of seconds since January 1st, 2001.
		 */
		static timestamp(message: string[] | string): void;

		/**
		 * Logs messages with a `trace` severity-level.
		 */
		static trace(message: string[] | string): void;

		/**
		 * Logs messages with a `warn` severity-level.
		 */
		static warn(message: string[] | string): void;

	}
	/**
	 * Base event for class Titanium.Accelerometer
	 */
	interface AccelerometerBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Accelerometer;

	}
	/**
	 * Fired when the accelerometer changes.
	 */
	interface Accelerometer_update_Event extends AccelerometerBaseEvent {
		/**
		 * Reference timestamp since the previous change. This is not a valid timestamp and should
		 * simply be used to determine the number of milliseconds between events.
		 */
		timestamp: number;

		/**
		 * Current `x` axis of the device.
		 */
		x: number;

		/**
		 * Current `y` axis of the device.
		 */
		y: number;

		/**
		 * Current `z` axis of the device.
		 */
		z: number;

	}
	interface AccelerometerEventMap extends ProxyEventMap {
		update: Accelerometer_update_Event;

	}
	/**
	 * The top-level Accelerometer module, used to determine the device's physical position.
	 */
	class Accelerometer extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof AccelerometerEventMap>(name: K, callback: (this: Titanium.Accelerometer, event: AccelerometerEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof AccelerometerEventMap>(name: K, event?: AccelerometerEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof AccelerometerEventMap>(name: K, callback: (this: Titanium.Accelerometer, event: AccelerometerEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * The top-level Android module.
	 */
	class Android extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * References the top-most window's activity.
		 */
		static readonly currentActivity: Titanium.Android.Activity;

		/**
		 * Service in the active context.
		 */
		static readonly currentService: Titanium.Android.Service;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * The first activity launched by the application.
		 */
		static readonly rootActivity: Titanium.Android.Activity;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Creates and returns an instance of <Titanium.Android.BigPictureStyle>.
		 */
		static createBigPictureStyle(parameters?: Dictionary<Titanium.Android.BigPictureStyle>): Titanium.Android.BigPictureStyle;

		/**
		 * Creates and returns an instance of <Titanium.Android.BigTextStyle>.
		 */
		static createBigTextStyle(parameters?: Dictionary<Titanium.Android.BigTextStyle>): Titanium.Android.BigTextStyle;

		/**
		 * Create an `Intent` to be used in a broadcast.
		 */
		static createBroadcastIntent(parameters?: Dictionary<Titanium.Android.Intent>): Titanium.Android.Intent;

		/**
		 * Creates and returns an instance of <Titanium.Android.BroadcastReceiver>.
		 */
		static createBroadcastReceiver(parameters?: Dictionary<Titanium.Android.BroadcastReceiver>): Titanium.Android.BroadcastReceiver;

		/**
		 * Creates and returns an instance of <Titanium.Android.Intent>.
		 */
		static createIntent(parameters?: Dictionary<Titanium.Android.Intent>): Titanium.Android.Intent;

		/**
		 * Creates an activity chooser intent, used to allow the user to select a target activity
		 * for an intent.
		 */
		static createIntentChooser(intent: Titanium.Android.Intent, title: string): Titanium.Android.Intent;

		/**
		 * Creates and returns an instance of <Titanium.Android.Notification>.
		 */
		static createNotification(parameters?: Dictionary<Titanium.Android.Notification>): Titanium.Android.Notification;

		/**
		 * Creates and returns an instance of <Titanium.Android.NotificationChannel>.
		 */
		static createNotificationChannel(parameters?: Dictionary<Titanium.Android.NotificationChannel>): Titanium.Android.NotificationChannel;

		/**
		 * Creates a [PendingIntent](Titanium.Android.PendingIntent) to be used inside a
		 * [Notification](Titanium.Android.Notification).
		 */
		static createPendingIntent(parameters?: Dictionary<Titanium.Android.PendingIntent>): Titanium.Android.PendingIntent;

		/**
		 * Creates and returns an instance of <Titanium.Android.QuickSettingsService>.
		 */
		static createQuickSettingsService(parameters?: Dictionary<Titanium.Android.QuickSettingsService>): Titanium.Android.QuickSettingsService;

		/**
		 * Creates and returns an instance of <Titanium.Android.RemoteViews>.
		 */
		static createRemoteViews(parameters?: Dictionary<Titanium.Android.RemoteViews>): Titanium.Android.RemoteViews;

		/**
		 * Create a <Titanium.Android.Service> so you can start/stop it and listen for events from it.
		 */
		static createService(intent: Titanium.Android.Intent): Titanium.Android.Service;

		/**
		 * Create an `Intent` to be used to start a service.
		 */
		static createServiceIntent(options: ServiceIntentOptions): Titanium.Android.Intent;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Returns `true` if the app has permission access.
		 */
		static hasPermission(permission: string | string[]): boolean;

		/**
		 * Check on state of Service.
		 */
		static isServiceRunning(intent: Titanium.Android.Intent): boolean;

		/**
		 * Registers broadcast receiver for the given actions.
		 */
		static registerBroadcastReceiver(broadcastReceiver: Titanium.Android.BroadcastReceiver, actions: ReadonlyArray<string>): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Request for permission access.
		 */
		static requestPermissions(permissions: string | string[], callback?: (param0: RequestPermissionAccessResult) => void): Promise<RequestPermissionAccessResult>;

		/**
		 * Starts a simple service.
		 */
		static startService(intent: Titanium.Android.Intent): void;

		/**
		 * Stop a simple service that was started with `startService`.
		 */
		static stopService(intent: Titanium.Android.Intent): void;

		/**
		 * Unregisters a broadcast receiver.
		 */
		static unregisterBroadcastReceiver(broadcastReceiver: Titanium.Android.BroadcastReceiver): void;

	}
	/**
	 * Base event for class Titanium.App
	 */
	interface AppBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.App;

	}
	/**
	 * Fired by the system when the device's accessibility service is turned on or off.
	 */
	interface App_accessibilitychanged_Event extends AppBaseEvent {
		/**
		 * Whether accessibility is now enabled or disabled.
		 */
		enabled: boolean;

	}
	/**
	 * Fired by the system when the application is about to be terminated.
	 */
	interface App_close_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the app receives a warning from the operating system about low memory availability.
	 */
	interface App_memorywarning_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the application transitions from active to inactive state on a multitasked system.
	 */
	interface App_pause_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the application transitions to the background on a multitasked system.
	 */
	interface App_paused_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the proximity sensor changes state.
	 */
	interface App_proximity_Event extends AppBaseEvent {
		/**
		 * Proximity state value.
		 */
		state: boolean;

	}
	/**
	 * Fired when an uncaught JavaScript exception occurs.
	 */
	interface App_uncaughtException_Event extends AppBaseEvent {
		/**
		 * The column offset on the line where the error occured.
		 */
		column: number;

		/**
		 * The java stack trace of the exception. (Deprecated since 9.0.0. Use `nativeStack` instead.)
		 * @deprecated Use `nativeStack` property for cross-platform parity.
		 */
		javaStack: string;

		/**
		 * The javascript stack trace of the exception. (Deprecated since 9.0.0. Use `stack` instead.)
		 * @deprecated Use `stack` property for cross-platform parity.
		 */
		javascriptStack: string;

		/**
		 * The line where the error occurred.
		 */
		line: number;

		/**
		 * The offset on the line where the error occurred. (Deprecated since 9.0.0. Use `column` instead.)
		 * @deprecated Use `column` property for cross-platform parity.
		 */
		lineOffset: number;

		/**
		 * The line source reference.
		 */
		lineSource: string;

		/**
		 * The error message.
		 */
		message: string;

		/**
		 * The native platform stack trace of the exception.
		 */
		nativeStack: string;

		/**
		 * A unique identification for the source file.
		 */
		sourceId: number;

		/**
		 * The name of the source file.
		 */
		sourceName: string;

		/**
		 * The URL to the source file.
		 */
		sourceURL: string;

		/**
		 * The javascript stack trace of the exception.
		 */
		stack: string;

		/**
		 * The title for the error.
		 */
		title: string;

		/**
		 * The type of error.
		 */
		type: string;

	}
	/**
	 * Fired when the application returns to the foreground on a multitasked system.
	 */
	interface App_resume_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the application returns to the foreground.
	 */
	interface App_resumed_Event extends AppBaseEvent {
	}
	/**
	 * Fired after the "app.js" or "alloy.js" gets executed during application startup.
	 */
	interface App_started_Event extends AppBaseEvent {
	}
	/**
	 * Fired when the soft keyboard is presented, on and off the screen.
	 */
	interface App_keyboardframechanged_Event extends AppBaseEvent {
		/**
		 * The duration of the keyboard animation. This parameter is only available on Titanium SDK 4.0.0 and later.
		 */
		animationDuration: number;

		/**
		 * A dictionary with keys x, y, width and height representing the frame of keyboard on screen.
		 */
		keyboardFrame: Dimension;

	}
	/**
	 * Fired when there is a significant change in the time.
	 */
	interface App_significanttimechange_Event extends AppBaseEvent {
	}
	/**
	 * Fired when a <Titanium.UI.ShortcutItem> is clicked.
	 */
	interface App_shortcutitemclick_Event extends AppBaseEvent {
		/**
		 * Identifier of the clicked shortcut item.
		 */
		id: string;

	}
	/**
	 * Called whenever an interaction with the window occurred. To be used together with the <Titanium.App.trackUserInteraction> property.
	 */
	interface App_userinteraction_Event extends AppBaseEvent {
	}
	interface AppEventMap extends ProxyEventMap {
		accessibilitychanged: App_accessibilitychanged_Event;

		close: App_close_Event;

		keyboardframechanged: App_keyboardframechanged_Event;

		memorywarning: App_memorywarning_Event;

		pause: App_pause_Event;

		paused: App_paused_Event;

		proximity: App_proximity_Event;

		resume: App_resume_Event;

		resumed: App_resumed_Event;

		shortcutitemclick: App_shortcutitemclick_Event;

		significanttimechange: App_significanttimechange_Event;

		started: App_started_Event;

		uncaughtException: App_uncaughtException_Event;

		userinteraction: App_userinteraction_Event;

	}
	/**
	 * The top-level App module is mainly used for accessing information about the
	 * application at runtime, and for sending or listening for system events.
	 */
	class App extends Titanium.Module {
		/**
		 * Indicates whether Accessibility is enabled by the system.
		 */
		static readonly accessibilityEnabled: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * The arguments passed to the application on startup.
		 */
		static arguments: launchOptions;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Application copyright statement, determined by `tiapp.xml`.
		 */
		static readonly copyright: string;

		/**
		 * A reference to the currnet background service running when the application is placed in the background.
		 */
		static readonly currentService: Titanium.App.iOS.BackgroundService;

		/**
		 * Build type that reflects how the application was packaged.
		 * Returns one of the following values:
		 * * `development` (Simulator)
		 * * `test` (Device)
		 * * `production` (App Store / Adhoc)
		 */
		static readonly deployType: string;

		/**
		 * Application description, determined by `tiapp.xml`.
		 */
		static readonly description: string;

		/**
		 * Prevents network activity indicator from being displayed.
		 */
		static disableNetworkActivityIndicator: boolean;

		/**
		 * Shows the application's splash screen on app resume.
		 */
		static forceSplashAsSnapshot: boolean;

		/**
		 * Application globally-unique ID, determined by `tiapp.xml`.
		 */
		static readonly guid: string;

		/**
		 * Application ID, from `tiapp.xml`.
		 */
		static readonly id: string;

		/**
		 * Determines whether the screen is locked when the device is idle.
		 */
		static idleTimerDisabled: boolean;

		/**
		 * The install ID for this application.
		 */
		static readonly installId: string;

		/**
		 * Indicates whether or not the soft keyboard is visible.
		 */
		static readonly keyboardVisible: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Application name, determined by `tiapp.xml`.
		 */
		static readonly name: string;

		/**
		 * Determines whether proximity detection is enabled.
		 */
		static proximityDetection: boolean;

		/**
		 * Indicates the state of the device's proximity sensor, according to the
		 * <Titanium.App.proximity> event.
		 */
		static readonly proximityState: boolean;

		/**
		 * Application publisher, from `tiapp.xml`.
		 */
		static readonly publisher: string;

		/**
		 * Unique session identifier for the current continuous run of the application.
		 */
		static readonly sessionId: string;

		/**
		 * Indicates whether or not the user interaction shoud be tracked.
		 */
		static trackUserInteraction: boolean;

		/**
		 * Application URL, from `tiapp.xml`.
		 */
		static readonly url: string;

		/**
		 * Application version, from `tiapp.xml`.
		 */
		static readonly version: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof AppEventMap>(name: K, callback: (this: Titanium.App, event: AppEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof AppEventMap>(name: K, event?: AppEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Fire a system-level event such as <Titanium.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT>.
		 */
		static fireSystemEvent(eventName: string, param?: string): void;

		/**
		 * Returns the arguments passed to the application on startup.
		 * @deprecated Use the <Titanium.App.arguments> property instead
		 */
		static getArguments(): launchOptions;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof AppEventMap>(name: K, callback: (this: Titanium.App, event: AppEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * A container for binary data.
	 */
	class Blob extends Titanium.Proxy {
		/**
		 * File object represented by this blob, or `null` if this blob is not
		 * associated with a file.
		 */
		readonly file: Titanium.Filesystem.File;

		/**
		 * If this blob represents an image, this is the height of the image in pixels.
		 */
		readonly height: number;

		/**
		 * Length of this blob in bytes.
		 */
		readonly length: number;

		/**
		 * Mime type of the data in this blob.
		 */
		readonly mimeType: string;

		/**
		 * If this blob represents a [File](Titanium.Filesystem.File), this is the file URL
		 * that represents it.
		 */
		readonly nativePath: string;

		/**
		 * Size of the blob in pixels (for image blobs) or bytes (for all other blobs).
		 */
		readonly size: number;

		/**
		 * UTF-8 string representation of the data in this blob.
		 */
		readonly text: string;

		/**
		 * If the blob references an image, this provides the height in pixels after factoring in EXIF orientation.
		 */
		readonly uprightHeight: number;

		/**
		 * If the blob references an image, this provides the width in pixels after factoring in EXIF orientation.
		 */
		readonly uprightWidth: number;

		/**
		 * If this blob represents an image, this is the width of the image in pixels.
		 */
		readonly width: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Appends the data from another blob to this blob.
		 */
		append(blob: Titanium.Blob): void;

		/**
		 * Returns a `Promise` that resolves with the contents of the blob as binary data contained in an `ArrayBuffer`.
		 */
		arrayBuffer(): Promise<ArrayBuffer>;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Creates a new blob by compressing the underlying image to the specified quality.
		 */
		imageAsCompressed(quality: number): Titanium.Blob;

		/**
		 * Creates a new blob by cropping the underlying image to the specified dimensions.
		 */
		imageAsCropped(options: Dimension): Titanium.Blob;

		/**
		 * Creates a new blob by resizing and scaling the underlying image to the specified dimensions.
		 */
		imageAsResized(width: number, height: number): Titanium.Blob;

		/**
		 * Returns a thumbnail version of the underlying image, optionally with a border and rounded corners.
		 */
		imageAsThumbnail(size: number, borderSize?: number, cornerRadius?: number): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with an added alpha channel.
		 */
		imageWithAlpha(): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with rounded corners added.
		 */
		imageWithRoundedCorner(cornerSize: number, borderSize?: number): Titanium.Blob;

		/**
		 * Returns a copy of the underlying image with an added transparent border.
		 */
		imageWithTransparentBorder(size: number): Titanium.Blob;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Returns an `ArrayBuffer` representation of this blob.
		 */
		toArrayBuffer(): ArrayBuffer;

		/**
		 * Returns a string representation of this blob.
		 */
		toString(): string;

	}
	/**
	 * Wrapper around <Titanium.Blob> that implements the <Titanium.IOStream> interface.
	 */
	class BlobStream extends Titanium.IOStream {
		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * Buffer is a mutable, resizable container for raw data.
	 */
	class Buffer extends Titanium.Proxy {
		/**
		 * Byte order of this buffer.
		 */
		byteOrder: number;

		/**
		 * Length of the buffer in bytes.
		 */
		length: number;

		/**
		 * The type of data encoding to use with `value`.
		 */
		type: string;

		/**
		 * Data to be encoded.
		 */
		value: number | string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Appends `sourceBuffer` to the this buffer.
		 */
		append(sourceBuffer: Titanium.Buffer, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Clears this buffer's contents but does not change the size of the buffer.
		 */
		clear(): void;

		/**
		 * Creates a complete or partial copy of this buffer.
		 */
		clone(offset?: number, length?: number): Titanium.Buffer;

		/**
		 * Copies data from `sourceBuffer` into the current buffer at `offset`.
		 */
		copy(sourceBuffer: Titanium.Buffer, offset: number, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Fills this buffer with the specified byte value.
		 */
		fill(fillByte: number, offset?: number, length?: number): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Inserts data from `sourceBuffer` into this buffer at `offset`.
		 */
		insert(sourceBuffer: Titanium.Buffer, offset: number, sourceOffset?: number, sourceLength?: number): number;

		/**
		 * Releases the space allocated to the buffer, and sets its length to 0.
		 */
		release(): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Converts this buffer to a <Titanium.Blob>.
		 */
		toBlob(): Titanium.Blob;

		/**
		 * Converts this buffer to a String.
		 */
		toString(): string;

	}
	/**
	 * Wrapper around <Titanium.Buffer> that implements the <Titanium.IOStream> interface.
	 */
	class BufferStream extends Titanium.IOStream {
		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * Base event for class Titanium.Calendar
	 */
	interface CalendarBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Calendar;

	}
	/**
	 * Fired when the database backing the EventKit module is modified.
	 */
	interface Calendar_change_Event extends CalendarBaseEvent {
	}
	interface CalendarEventMap extends ProxyEventMap {
		change: Calendar_change_Event;

	}
	/**
	 * The Calendar module provides an API for accessing the native calendar functionality.
	 */
	class Calendar extends Titanium.Module {
		/**
		 * All alerts in selected calendars.
		 */
		static readonly allAlerts: Titanium.Calendar.Alert[];

		/**
		 * All calendars known to the native calendar app.
		 */
		static readonly allCalendars: Titanium.Calendar.Calendar[];

		/**
		 * All calendars known to the native calendar app that can add, edit, and
		 * delete items in the calendar.
		 */
		static readonly allEditableCalendars: Titanium.Calendar.Calendar[];

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Returns an authorization constant indicating if the application has access to the events in the EventKit.
		 */
		static readonly calendarAuthorization: number;

		/**
		 * Calendar that events are added to by default, as specified by user settings.
		 */
		static readonly defaultCalendar: Titanium.Calendar.Calendar;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
		 */
		static readonly selectableCalendars: Titanium.Calendar.Calendar[];

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof CalendarEventMap>(name: K, callback: (this: Titanium.Calendar, event: CalendarEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof CalendarEventMap>(name: K, event?: CalendarEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Gets the calendar with the specified identifier.
		 */
		static getCalendarById(id: string): Titanium.Calendar.Calendar;

		/**
		 * Returns `true` if the app has calendar access.
		 */
		static hasCalendarPermissions(): boolean;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof CalendarEventMap>(name: K, callback: (this: Titanium.Calendar, event: CalendarEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Requests for calendar access.
		 */
		static requestCalendarPermissions(callback?: (param0: EventsAuthorizationResponse) => void): Promise<EventsAuthorizationResponse>;

	}
	/**
	 * A module for translating between primitive types and raw byte streams.
	 */
	class Codec extends Titanium.Module {
		/**
		 * Big endian (network) byte order -- that is, the most significant byte first.
		 */
		static readonly BIG_ENDIAN: number;

		/**
		 * ASCII character encoding..
		 */
		static readonly CHARSET_ASCII: string;

		/**
		 * ISO 8859-1 (Latin-1) character encoding.
		 */
		static readonly CHARSET_ISO_LATIN_1: string;

		/**
		 * UTF-16 character encoding with default byte order.
		 */
		static readonly CHARSET_UTF16: string;

		/**
		 * UTF-16 character encoding with big endian byte order.
		 */
		static readonly CHARSET_UTF16BE: string;

		/**
		 * UTF-16 character encoding with little endian byte order.
		 */
		static readonly CHARSET_UTF16LE: string;

		/**
		 * UTF-8 character encoding.
		 */
		static readonly CHARSET_UTF8: string;

		/**
		 * Little endian byte order -- that is, the least significant byte first.
		 */
		static readonly LITTLE_ENDIAN: number;

		/**
		 * 8-bit integer encoding type.
		 */
		static readonly TYPE_BYTE: string;

		/**
		 * 64-bit double precision floating-point type.
		 */
		static readonly TYPE_DOUBLE: string;

		/**
		 * 32-bit single precision floating-point type.
		 */
		static readonly TYPE_FLOAT: string;

		/**
		 * 32-bit integer encoding type.
		 */
		static readonly TYPE_INT: string;

		/**
		 * 64-bit integer encoding type.
		 */
		static readonly TYPE_LONG: string;

		/**
		 * 16-bit integer encoding type.
		 */
		static readonly TYPE_SHORT: string;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Decodes a number from the `source` buffer using the specified data type.
		 */
		static decodeNumber(options: DecodeNumberDict): number;

		/**
		 * Decodes the source buffer into a String using the supplied character set.
		 */
		static decodeString(options: DecodeStringDict): string;

		/**
		 * Encodes a number and writes it to a buffer.
		 */
		static encodeNumber(options: EncodeNumberDict): number;

		/**
		 * Encodes a string into a series of bytes in a buffer using the specified character set.
		 */
		static encodeString(options: Dictionary<EncodeStringDict>): number;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Get the OS native byte order (either <Titanium.Codec.BIG_ENDIAN> or
		 * <Titanium.Codec.LITTLE_ENDIAN>).
		 */
		static getNativeByteOrder(): number;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * Base event for class Titanium.Contacts
	 */
	interface ContactsBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Contacts;

	}
	/**
	 * Fired when the database backing the contacts module is modified externally.
	 */
	interface Contacts_reload_Event extends ContactsBaseEvent {
	}
	interface ContactsEventMap extends ProxyEventMap {
		reload: Contacts_reload_Event;

	}
	/**
	 * The top-level Contacts module, used for accessing and modifying the system contacts address book.
	 */
	class Contacts extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Returns an authorization constant indicating if the application has access to the address book.
		 */
		static readonly contactsAuthorization: number;

		/**
		 * A boolean value that indicates whether to fetch the notes stored in contacts or not.
		 */
		static includeNote: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof ContactsEventMap>(name: K, callback: (this: Titanium.Contacts, event: ContactsEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Creates and returns an instance of <Titanium.Contacts.Group>.
		 */
		static createGroup(parameters?: Dictionary<Titanium.Contacts.Group>): Titanium.Contacts.Group;

		/**
		 * Creates and returns an instance of <Titanium.Contacts.Person>, and commits all pending
		 * changes to the underlying contacts database.
		 */
		static createPerson(parameters?: Dictionary<Titanium.Contacts.Person>): Titanium.Contacts.Person;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof ContactsEventMap>(name: K, event?: ContactsEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Gets all groups.
		 */
		static getAllGroups(): Titanium.Contacts.Group[];

		/**
		 * Gets all people, unless a limit is specified.
		 */
		static getAllPeople(limit: number): Titanium.Contacts.Person[];

		/**
		 * Gets the group with the specified identifier.
		 */
		static getGroupByIdentifier(id: string): Titanium.Contacts.Group;

		/**
		 * Gets people with a `firstName`, `middleName` or `lastName` field, or a combination
		 * of these fields, that match the specified name.
		 */
		static getPeopleWithName(name: string): Titanium.Contacts.Person[];

		/**
		 * Gets the person with the specified identifier.
		 */
		static getPersonByIdentifier(id: number): Titanium.Contacts.Person;

		/**
		 * Returns `true` if the app has contacts access.
		 */
		static hasContactsPermissions(): boolean;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof ContactsEventMap>(name: K, callback: (this: Titanium.Contacts, event: ContactsEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Removes a group from the address book.
		 */
		static removeGroup(group: Titanium.Contacts.Group): void;

		/**
		 * Removes a contact from the address book.
		 */
		static removePerson(person: Titanium.Contacts.Person): void;

		/**
		 * Requests for contacts access.
		 */
		static requestContactsPermissions(callback?: (param0: ContactsAuthorizationResponse) => void): Promise<ContactsAuthorizationResponse>;

		/**
		 * Commits all pending changes to the underlying contacts database.
		 */
		static save(contacts: ReadonlyArray<Titanium.Contacts.Person>): void;

		/**
		 * Displays a picker that allows a person to be selected.
		 */
		static showContacts(params: showContactsParams): void;

	}
	/**
	 * The top-level `Database` module, used for creating and accessing the
	 * in-application SQLite database.
	 */
	class Database extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Installs an SQLite database to device's internal storage.
		 */
		static install(path: string, dbName: string): Titanium.Database.DB;

		/**
		 * Opens an SQLite database.
		 */
		static open(dbName: string): Titanium.Database.DB;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * The base type for all Titanium events.
	 */
	interface Event {
		/**
		 * True if the event will try to bubble up if possible.
		 */
		readonly bubbles: boolean;

		/**
		 * Set to true to stop the event from bubbling.
		 */
		cancelBubble: boolean;

		/**
		 * Source object that fired the event.
		 */
		readonly source: any;

		/**
		 * Name of the event fired.
		 */
		readonly type: string;

	}
	/**
	 * The top level filesystem module, used to access files and directories on the device.
	 */
	class Filesystem extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Path to the application's internal cache directory.
		 */
		static readonly applicationCacheDirectory: string;

		/**
		 * Path to the application's data directory.
		 */
		static readonly applicationDataDirectory: string;

		/**
		 * Path to the iOS application directory.
		 */
		static readonly applicationDirectory: string;

		/**
		 * Path to the application support directory.
		 */
		static readonly applicationSupportDirectory: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Path to the app's sandboxed cache folder on removable storage, such as SD card.
		 */
		static readonly externalCacheDirectory: string;

		/**
		 * Path to the app's sandboxed folder on removable storage, such as SD card.
		 */
		static readonly externalStorageDirectory: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Platform-specific line ending constant.
		 */
		static readonly lineEnding: string;

		/**
		 * Path to the application's raw resource directory.
		 */
		static readonly resRawDirectory: string;

		/**
		 * Path to the application's resource directory.
		 */
		static readonly resourcesDirectory: string;

		/**
		 * Platform-specific path separator constant.
		 */
		static readonly separator: string;

		/**
		 * Path for the application's temporary directory.
		 */
		static readonly tempDirectory: string;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Creates a temporary directory and returns a [File](Titanium.Filesystem.File) object representing the new directory.
		 */
		static createTempDirectory(): Titanium.Filesystem.File;

		/**
		 * Creates a temporary file and returns a [File](Titanium.Filesystem.File) object representing the new file.
		 */
		static createTempFile(): Titanium.Filesystem.File;

		/**
		 * Returns the path to the container directory associated with the specified security application group ID.
		 */
		static directoryForSuite(suiteName: string): string;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Returns a `Blob` object representing the asset catalog image identified by the path arguments.
		 */
		static getAsset(...path: string[]): Titanium.Blob;

		/**
		 * Returns a `File` object representing the file identified by the path arguments.
		 */
		static getFile(...path: string[]): Titanium.Filesystem.File;

		/**
		 * Returns a `File` object representing the file identified by the path arguments.
		 */
		static getFile(path: ReadonlyArray<string>): Titanium.Filesystem.File;

		/**
		 * Returns `true` if the app has storage permissions.
		 */
		static hasStoragePermissions(): boolean;

		/**
		 * Returns `true` if the device supports external storage *and* the external storage device is mounted.
		 */
		static isExternalStoragePresent(): boolean;

		/**
		 * Opens file using the <Titanium.IOStream> interface.
		 */
		static openStream(mode: number, path: string): Titanium.Filesystem.FileStream;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Requests for storage permissions
		 */
		static requestStoragePermissions(callback?: (param0: RequestStorageAccessResult) => void): Promise<RequestStorageAccessResult>;

	}
	/**
	 * Base event for class Titanium.Geolocation
	 */
	interface GeolocationBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Geolocation;

	}
	/**
	 * Fired when the device detects interface and requires calibration.
	 */
	interface Geolocation_calibration_Event extends GeolocationBaseEvent {
	}
	/**
	 * Fired when an heading update is received.
	 */
	interface Geolocation_heading_Event extends GeolocationBaseEvent {
		/**
		 * If `success` is `false`, the error code is available.
		 */
		code: number;

		/**
		 * If `success` is false, a string describing the error.
		 */
		error: string;

		/**
		 * Dictionary object containing the heading data.
		 */
		heading: HeadingData;

		/**
		 * Indicate if the heading event was successfully received. Android returns this since SDK 7.5.0.
		 */
		success: boolean;

	}
	/**
	 * Fired when a location update is received.
	 */
	interface Geolocation_location_Event extends GeolocationBaseEvent {
		/**
		 * if `success` is false, the error code if available.
		 */
		code: number;

		/**
		 * If `success` is true, actual location data for this update.
		 */
		coords: LocationCoordinates;

		/**
		 * If `success` is false, a string describing the error.
		 */
		error: string;

		/**
		 * If `success` is true, object describing the location provider generating this update.
		 */
		provider: LocationProviderDict;

		/**
		 * Indicates if location data was successfully retrieved.
		 */
		success: boolean;

	}
	/**
	 * Fired when location updates are paused by the OS.
	 */
	interface Geolocation_locationupdatepaused_Event extends GeolocationBaseEvent {
	}
	/**
	 * Fired when location manager is resumed by the OS.
	 */
	interface Geolocation_locationupdateresumed_Event extends GeolocationBaseEvent {
	}
	/**
	 * Fired when changes are made to the authorization status for location services.
	 */
	interface Geolocation_authorization_Event extends GeolocationBaseEvent {
		/**
		 * New authorization status for the application.
		 */
		authorizationStatus: number;

	}
	interface GeolocationEventMap extends ProxyEventMap {
		authorization: Geolocation_authorization_Event;

		calibration: Geolocation_calibration_Event;

		heading: Geolocation_heading_Event;

		location: Geolocation_location_Event;

		locationupdatepaused: Geolocation_locationupdatepaused_Event;

		locationupdateresumed: Geolocation_locationupdateresumed_Event;

	}
	/**
	 * The top level Geolocation module. The Geolocation module is used for accessing device location based information.
	 */
	class Geolocation extends Titanium.Module {
		/**
		 * Specifies the requested accuracy for location updates.
		 */
		static accuracy: number;

		/**
		 * The type of user activity to be associated with the location updates.
		 */
		static activityType: number;

		/**
		 * Determines if the app can do background location updates.
		 */
		static allowsBackgroundLocationUpdates: boolean;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The minimum change of position (in meters) before a 'location' event is fired.
		 */
		static distanceFilter: number;

		/**
		 * Indicates whether the current device supports a compass.
		 */
		static readonly hasCompass: boolean;

		/**
		 * Minimum heading change (in degrees) before a `heading` event is fired.
		 */
		static headingFilter: number;

		/**
		 * Interval in milliseconds before a `heading` event is fired.
		 */
		static headingTime: number;

		/**
		 * JSON representation of the last geolocation received.
		 */
		static readonly lastGeolocation: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * A value that indicates the level of location accuracy the app has permission to use.
		 */
		static readonly locationAccuracyAuthorization: number;

		/**
		 * Returns an authorization constant indicating if the application has access to location services.
		 */
		static readonly locationServicesAuthorization: number;

		/**
		 * Indicates if the user has enabled or disabled location services for the device (not the application).
		 */
		static readonly locationServicesEnabled: boolean;

		/**
		 * Indicates whether the location updates may be paused.
		 */
		static pauseLocationUpdateAutomatically: boolean;

		/**
		 * Specifies that an indicator be shown when the app makes use of continuous
		 * background location updates.
		 */
		static showBackgroundLocationIndicator: boolean;

		/**
		 * Determines whether the compass calibration UI is shown if needed.
		 */
		static showCalibration: boolean;

		/**
		 * Indicates if the location changes should be updated only when a significant change
		 * in location occurs.
		 */
		static trackSignificantLocationChange: boolean;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof GeolocationEventMap>(name: K, callback: (this: Titanium.Geolocation, event: GeolocationEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof GeolocationEventMap>(name: K, event?: GeolocationEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Resolves an address to a location.
		 */
		static forwardGeocoder(address: string, callback?: (param0: ForwardGeocodeResponse) => void): Promise<ForwardGeocodeResponse>;

		/**
		 * Retrieves the current compass heading.
		 */
		static getCurrentHeading(callback?: (param0: HeadingResponse) => void): Promise<HeadingResponse>;

		/**
		 * Retrieves the last known location from the device.
		 */
		static getCurrentPosition(callback?: (param0: LocationResults) => void): Promise<LocationResults>;

		/**
		 * Returns `true` if the app has location access.
		 */
		static hasLocationPermissions(authorizationType: number): boolean;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof GeolocationEventMap>(name: K, callback: (this: Titanium.Geolocation, event: GeolocationEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Requests for location access.
		 */
		static requestLocationPermissions(authorizationType: number, callback?: (param0: LocationAuthorizationResponse) => void): Promise<LocationAuthorizationResponse>;

		/**
		 * Requests the user's permission to temporarily use location services with full accuracy.
		 */
		static requestTemporaryFullAccuracyAuthorization(purposeKey: string, callback: (param0: LocationAccuracyAuthorizationResponse) => void): void;

		/**
		 * Tries to resolve a location to an address.
		 */
		static reverseGeocoder(latitude: number, longitude: number, callback?: (param0: ReverseGeocodeResponse) => void): Promise<ReverseGeocodeResponse>;

	}
	/**
	 * Base event for class Titanium.Gesture
	 */
	interface GestureBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Gesture;

	}
	/**
	 * Fired when the device orientation changes.
	 */
	interface Gesture_orientationchange_Event extends GestureBaseEvent {
		/**
		 * Orientation of the device.
		 */
		orientation: number;

	}
	/**
	 * Fired when the device is shaken.
	 */
	interface Gesture_shake_Event extends GestureBaseEvent {
		/**
		 * Time interval since previous shake event. On iOS, this value is 0 for the first shake
		 * event in a series.
		 */
		timestamp: number;

		/**
		 * Acceleration along the X axis, in Gs.
		 */
		x: number;

		/**
		 * Acceleration along the Y axis, in Gs.
		 */
		y: number;

		/**
		 * Acceleration along the Z axis, in Gs.
		 */
		z: number;

	}
	interface GestureEventMap extends ProxyEventMap {
		orientationchange: Gesture_orientationchange_Event;

		shake: Gesture_shake_Event;

	}
	/**
	 * The Gesture module is responsible for high-level device gestures such as orientation changes
	 * and shake gestures.
	 */
	class Gesture extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Indicates if the device is currently held in landscape form.
		 */
		static readonly landscape: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Orientation of the device.
		 */
		static readonly orientation: number;

		/**
		 * Indicates if the device is currently held in portrait form.
		 */
		static readonly portrait: boolean;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof GestureEventMap>(name: K, callback: (this: Titanium.Gesture, event: GestureEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof GestureEventMap>(name: K, event?: GestureEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof GestureEventMap>(name: K, callback: (this: Titanium.Gesture, event: GestureEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * IOStream is the interface that all stream types implement.
	 */
	// tslint:disable-next-line:interface-name
	class IOStream extends Titanium.Proxy {
		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Closes this stream.
		 */
		close(): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Indicates whether this stream is readable.
		 */
		isReadable(): boolean;

		/**
		 * Indicates whether this stream is writable.
		 */
		isWritable(): boolean;

		/**
		 * Reads data from this stream into a buffer.
		 */
		read(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => void): number;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Writes data from a buffer to this stream.
		 */
		write(buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => void): number;

	}
	/**
	 * Base event for class Titanium.Locale
	 */
	interface LocaleBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Locale;

	}
	/**
	 * Fired when the device locale changes.
	 */
	interface Locale_change_Event extends LocaleBaseEvent {
	}
	interface LocaleEventMap extends ProxyEventMap {
		change: Locale_change_Event;

	}
	/**
	 * The top level Locale module.
	 */
	class Locale extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Country of the current system locale, as an ISO 2-letter code.
		 */
		static readonly currentCountry: string;

		/**
		 * Language of the current system locale, as an ISO 2-letter code.
		 */
		static readonly currentLanguage: string;

		/**
		 * Current system locale, as a combination of ISO 2-letter language and country codes.
		 */
		static readonly currentLocale: string;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof LocaleEventMap>(name: K, callback: (this: Titanium.Locale, event: LocaleEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof LocaleEventMap>(name: K, event?: LocaleEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Formats a telephone number according to the current system locale.
		 */
		static formatTelephoneNumber(number: string): string;

		/**
		 * Returns the ISO 3-letter currency code for the specified locale.
		 */
		static getCurrencyCode(locale: string): string;

		/**
		 * Returns the currency symbol for the specified currency code.
		 */
		static getCurrencySymbol(currencyCode: string): string;

		/**
		 * Returns the currency symbol for the specified locale.
		 */
		static getLocaleCurrencySymbol(locale: string): string;

		/**
		 * Returns a string, localized according to the current system locale using the appropriate
		 * `/i18n/LANG/strings.xml` localization file.
		 */
		static getString(key: string, hint?: string): string;

		/**
		 * Parses a number from the given string using the current or given locale.
		 */
		static parseDecimal(text: string, locale?: string): number;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof LocaleEventMap>(name: K, callback: (this: Titanium.Locale, event: LocaleEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Sets the current language of the application.
		 */
		static setLanguage(language: string): void;

	}
	/**
	 * Base event for class Titanium.Media
	 */
	interface MediaBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Media;

	}
	/**
	 * Fires when the camera overlay is ready to take pictures.
	 */
	interface Media_cameraready_Event extends MediaBaseEvent {
	}
	/**
	 * Fired when an audio line type change is detected.
	 */
	interface Media_routechange_Event extends MediaBaseEvent {
		/**
		 * Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
		 */
		currentRoute: RouteDescription;

		/**
		 * Returns a description of the old route, consisting of zero or more input ports and zero or more output ports.
		 */
		oldRoute: RouteDescription;

		/**
		 * The reason for route change.
		 */
		reason: string;

	}
	/**
	 * Fired when the volume output changes.
	 */
	interface Media_volume_Event extends MediaBaseEvent {
		/**
		 * New volume level in dB.
		 */
		volume: number;

	}
	interface MediaEventMap extends ProxyEventMap {
		cameraready: Media_cameraready_Event;

		routechange: Media_routechange_Event;

		volume: Media_volume_Event;

	}
	/**
	 * The top-level Media module.
	 */
	class Media extends Titanium.Module {
		/**
		 * Media type constant for medium-quality video recording.
		 */
		static readonly QUALITY_640x480: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		static readonly QUALITY_IFRAME_1280x720: number;

		/**
		 * Media type constant for medium-quality video recording.
		 */
		static readonly QUALITY_IFRAME_960x540: number;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * An instance of <Titanium.Media.MusicPlayer> representing the app-specific music player.
		 */
		static readonly appMusicPlayer: Titanium.Media.MusicPlayer;

		/**
		 * Returns `true` if the device is playing audio.
		 */
		static readonly audioPlaying: boolean;

		/**
		 * A constant for the audio session category to be used.
		 */
		static audioSessionCategory: string;

		/**
		 * Array of media type constants supported for the camera.
		 */
		static availableCameraMediaTypes: string[];

		/**
		 * Array indicating which cameras are available, `CAMERA_FRONT`, `CAMERA_REAR` or both.
		 */
		static readonly availableCameras: number[];

		/**
		 * Array of media type constants supported for saving to the device's camera roll or saved images album.
		 */
		static availablePhotoGalleryMediaTypes: string[];

		/**
		 * Array of media type constants supported for the photo library.
		 */
		static availablePhotoMediaTypes: string[];

		/**
		 * Current average microphone level in dB or -1 if microphone monitoring is disabled.
		 */
		static averageMicrophonePower: number;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Returns the authorization status for the camera.
		 */
		static readonly cameraAuthorization: number;

		/**
		 * Determines how the flash is fired when using the device's camera.
		 */
		static cameraFlashMode: number;

		/**
		 * `true` if the device has a recording input device available.
		 */
		static readonly canRecord: boolean;

		/**
		 * Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
		 */
		static readonly currentRoute: RouteDescription;

		/**
		 * `true` if the device has camera support.
		 */
		static readonly isCameraSupported: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Current microphone level peak power in dB or -1 if microphone monitoring is disabled.
		 */
		static readonly peakMicrophonePower: number;

		/**
		 * An instance of <Titanium.Media.MusicPlayer> representing the system-wide music player.
		 */
		static readonly systemMusicPlayer: Titanium.Media.MusicPlayer;

		/**
		 * Current volume of the playback device.
		 */
		static readonly volume: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof MediaEventMap>(name: K, callback: (this: Titanium.Media, event: MediaEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Plays a device beep notification.
		 */
		static beep(): void;

		/**
		 * Creates and returns an instance of <Titanium.Media.AudioPlayer>.
		 */
		static createAudioPlayer(parameters?: Dictionary<Titanium.Media.AudioPlayer>): Titanium.Media.AudioPlayer;

		/**
		 * Creates and returns an instance of <Titanium.Media.AudioRecorder>.
		 */
		static createAudioRecorder(parameters?: Dictionary<Titanium.Media.AudioRecorder>): Titanium.Media.AudioRecorder;

		/**
		 * Creates and returns an instance of <Titanium.Media.Sound>.
		 */
		static createSound(parameters?: Dictionary<Titanium.Media.Sound>): Titanium.Media.Sound;

		/**
		 * Creates and returns an instance of <Titanium.Media.SystemAlert>.
		 * @deprecated This iOS-only API has been deprecated and moved to the [Ti.SystemAlert](https://github.com/appcelerator-modules/ti.systemalert) module in 8.0.0.
		 */
		static createSystemAlert(parameters?: Dictionary<Titanium.Media.SystemAlert>): Titanium.Media.SystemAlert;

		/**
		 * Creates and returns an instance of <Titanium.Media.VideoPlayer>.
		 */
		static createVideoPlayer(parameters?: Dictionary<Titanium.Media.VideoPlayer>): Titanium.Media.VideoPlayer;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof MediaEventMap>(name: K, event?: MediaEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Returns `true` if the app has audio permissions.
		 * @deprecated Use [Titanium.Media.hasAudioRecorderPermissions](Titanium.Media.hasAudioRecorderPermissions) instead.
		 */
		static hasAudioPermissions: never;

		/**
		 * Returns `true` if the app has audio permissions.
		 */
		static hasAudioRecorderPermissions(): boolean;

		/**
		 * Returns `true` if the app has camera access.
		 */
		static hasCameraPermissions(): boolean;

		/**
		 * Returns `true` if the app has music library access.
		 */
		static hasMusicLibraryPermissions(): boolean;

		/**
		 * Returns `true` if the app has photo gallery permissions.
		 */
		static hasPhotoGalleryPermissions(): boolean;

		/**
		 * Hides the device camera UI.
		 */
		static hideCamera(): void;

		/**
		 * Hides the music library.
		 */
		static hideMusicLibrary(): void;

		/**
		 * Returns `true` if the source supports the specified media type.
		 */
		static isMediaTypeSupported(source: string, type: string): boolean;

		/**
		 * Shows the music library and allows the user to select one or more tracks.
		 */
		static openMusicLibrary(options: MusicLibraryOptionsType): void;

		/**
		 * Opens the photo gallery image picker.
		 */
		static openPhotoGallery(options: PhotoGalleryOptionsType): void;

		/**
		 * Displays the given image.
		 */
		static previewImage(options: Dictionary<PreviewImageOptions>): void;

		/**
		 * Searches the music library for items matching the specified search predicates.
		 */
		static queryMusicLibrary(query: MediaQueryType): Titanium.Media.Item[];

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof MediaEventMap>(name: K, callback: (this: Titanium.Media, event: MediaEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Request the user's permission for audio recording.
		 */
		static requestAudioRecorderPermissions(callback?: (param0: MediaAuthorizationResponse) => void): Promise<MediaAuthorizationResponse>;

		/**
		 * Requests for camera access.
		 */
		static requestCameraPermissions(callback?: (param0: RequestCameraAccessResult) => void): Promise<RequestCameraAccessResult>;

		/**
		 * Request permissions for the native music-library.
		 */
		static requestMusicLibraryPermissions(callback: (param0: RequestMusicLibraryAccessResult) => void): void;

		/**
		 * Requests for photo gallery permissions.
		 */
		static requestPhotoGalleryPermissions(callback?: (param0: RequestPhotoGalleryAccessResult) => void): Promise<RequestPhotoGalleryAccessResult>;

		/**
		 * Saves media to the device's photo gallery / camera roll.
		 */
		static saveToPhotoGallery(media: Titanium.Blob | Titanium.Filesystem.File, callbacks: any): void;

		/**
		 * Overrides the default audio route when using the <Titanium.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD> session mode.
		 */
		static setOverrideAudioRoute(route: number): void;

		/**
		 * Shows the camera.
		 */
		static showCamera(options: CameraOptionsType): void;

		/**
		 * Starts monitoring the microphone sound level.
		 */
		static startMicrophoneMonitor(): void;

		/**
		 * Starts video capture using the camera specified.
		 */
		static startVideoCapture(): void;

		/**
		 * Stops monitoring the microphone sound level.
		 */
		static stopMicrophoneMonitor(): void;

		/**
		 * Stops video capture using the camera specified.
		 */
		static stopVideoCapture(): void;

		/**
		 * Switches between front and rear-facing cameras. Make sure to set one of the below constants to determine
		 * the camera you want to switch to.
		 */
		static switchCamera(camera: number): void;

		/**
		 * Uses the device camera to capture a photo.
		 */
		static takePicture(): void;

		/**
		 * Takes a screen shot of the visible UI on the device.
		 */
		static takeScreenshot(callback: (param0: ScreenshotResult) => void): void;

		/**
		 * Makes the device vibrate.
		 */
		static vibrate(pattern?: ReadonlyArray<number>): void;

	}
	/**
	 * Base type for all Titanium modules.
	 */
	class Module extends Titanium.Proxy {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * Base event for class Titanium.Network
	 */
	interface NetworkBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Network;

	}
	/**
	 * Fired when network connectivity changes.
	 */
	interface Network_change_Event extends NetworkBaseEvent {
		/**
		 * New network type
		 */
		networkType: number;

		/**
		 * New network type as a string.
		 */
		networkTypeName: string;

		/**
		 * Boolean indicating if the device is connected to the network.
		 */
		online: boolean;

		/**
		 * Human-readable text describing the reason for the change.
		 */
		reason: string;

	}
	interface NetworkEventMap extends ProxyEventMap {
		change: Network_change_Event;

	}
	/**
	 * The top level network module.
	 */
	class Network extends Titanium.Module {
		/**
		 * A list of all cookies in the cookie storage.
		 */
		static readonly allHTTPCookies: Titanium.Network.Cookie[];

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Network type value as a constant.
		 */
		static readonly networkType: number;

		/**
		 * Network type as a String. Returns one of `NONE`, `WIFI`, `LAN`, `MOBILE`, or `UNKNOWN`.
		 */
		static readonly networkTypeName: string;

		/**
		 * Boolean value indicating if the device is connected to the network.
		 */
		static readonly online: boolean;

		/**
		 * Remote device UUID if the device is registered with the Apple Push Notification
		 * Service, or null if it is not registered.
		 */
		static readonly remoteDeviceUUID: string;

		/**
		 * Array of push notification type constants enabled for the application.
		 */
		static readonly remoteNotificationTypes: number[];

		/**
		 * Indicates whether push  notifications have been enabled using
		 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
		 */
		static readonly remoteNotificationsEnabled: boolean;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof NetworkEventMap>(name: K, callback: (this: Titanium.Network, event: NetworkEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Adds a cookie to the HTTP client cookie store.
		 */
		static addHTTPCookie(cookie: Titanium.Network.Cookie): void;

		/**
		 * Adds a cookie to the system cookie store.
		 */
		static addSystemCookie(cookie: Titanium.Network.Cookie): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Creates and returns a `BonjourBrowser` object.
		 */
		static createBonjourBrowser(serviceType: string, domain: string, parameters?: Dictionary<Titanium.Network.BonjourBrowser>): Titanium.Network.BonjourBrowser;

		/**
		 * Creates and returns a `BonjourService` object.
		 */
		static createBonjourService(name: string, type: string, domain: string, parameters?: Dictionary<Titanium.Network.BonjourService>): Titanium.Network.BonjourService;

		/**
		 * Creates and returns an instance of <Titanium.Network.Cookie>.
		 */
		static createCookie(parameters?: Dictionary<Titanium.Network.Cookie>): Titanium.Network.Cookie;

		/**
		 * Creates and returns an instance of <Titanium.Network.HTTPClient>.
		 */
		static createHTTPClient(parameters?: Dictionary<Titanium.Network.HTTPClient>): Titanium.Network.HTTPClient;

		/**
		 * Creates and returns an instance of <Titanium.Network.TCPSocket>.
		 * @deprecated Use [Titanium.Network.Socket.TCP](Titanium.Network.Socket.TCP) where possible.
		 *
		 */
		static createTCPSocket: never;

		/**
		 * Returns a decoded version of a URI encoded value.
		 */
		static decodeURIComponent(value: string): string;

		/**
		 * Returns a URI encoded version of the specified URI component.
		 */
		static encodeURIComponent(value: string): string;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof NetworkEventMap>(name: K, event?: NetworkEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Gets all the cookies with the domain, path and name matched with the given values from the HTTP client cookie store.
		 */
		static getHTTPCookies(domain: string, path: string, name: string): Titanium.Network.Cookie[];

		/**
		 * Gets all the cookies with the domain matched with the given values from the HTTP client cookie store.
		 */
		static getHTTPCookiesForDomain(domain: string): Titanium.Network.Cookie[];

		/**
		 * Gets all the cookies with the domain, path and name matched with the given values from the system cookie store.
		 */
		static getSystemCookies(domain: string, path: string, name: string): Titanium.Network.Cookie[];

		/**
		 * Registers for push notifications with the Apple Push Notification Service.
		 */
		static registerForPushNotifications(config: PushNotificationConfig): void;

		/**
		 * Removes all the cookies from the HTTP client cookie store.
		 */
		static removeAllHTTPCookies(): void;

		/**
		 * Removes all the cookie from the system client cookie store.
		 */
		static removeAllSystemCookies(): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof NetworkEventMap>(name: K, callback: (this: Titanium.Network, event: NetworkEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Removes the cookie with the domain, path and name exactly the same as the given values from the HTTP client cookie store.
		 */
		static removeHTTPCookie(domain: string, path: string, name: string): void;

		/**
		 * Removes the cookies with the domain matched with the given values from the HTTP client cookie store.
		 */
		static removeHTTPCookiesForDomain(domain: string): void;

		/**
		 * Removes the cookie with the domain, path and name exactly the same as the given values from the system cookie store.
		 */
		static removeSystemCookie(domain: string, path: string, name: string): void;

		/**
		 * Unregisters the application for push notifications.
		 */
		static unregisterForPushNotifications(): void;

	}
	/**
	 * Base event for class Titanium.Platform
	 */
	interface PlatformBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.Platform;

	}
	/**
	 * Fired when the battery state changes. This is measured in 5% increments on iPhone/iPad.
	 */
	interface Platform_battery_Event extends PlatformBaseEvent {
		/**
		 * Percentage battery power level.
		 */
		level: number;

		/**
		 * The battery state.
		 */
		state: number;

	}
	interface PlatformEventMap extends ProxyEventMap {
		battery: Platform_battery_Event;

	}
	/**
	 * The top-level Platform module.  The Platform module is used to access the device's platform-related
	 * functionality.
	 */
	class Platform extends Titanium.Module {
		/**
		 * System's WIFI IP address. No other network types are supported.
		 */
		static readonly address: string;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * System's processor architecture.
		 */
		static readonly architecture: string;

		/**
		 * System's unused memory, measured in bytes.
		 */
		static readonly availableMemory: number;

		/**
		 * Battery level in percent, accessible only when `batteryMonitoring` is enabled. Measured
		 * in 5% increments on iPhone/iPad.
		 */
		static readonly batteryLevel: number;

		/**
		 * Determines whether battery monitoring is enabled.
		 */
		static batteryMonitoring: boolean;

		/**
		 * Indicates the state of the battery. Accessible only when `batteryMonitoring` is enabled.
		 */
		static readonly batteryState: number;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Returns the DisplayCaps object.
		 */
		static readonly displayCaps: Titanium.Platform.DisplayCaps;

		/**
		 * Applications's globally-unique ID (UUID).
		 */
		static readonly id: string;

		/**
		 * An alphanumeric string unique to each device, used only for serving advertisements.
		 */
		static identifierForAdvertising: string;

		/**
		 * An alphanumeric string that uniquely identifies a device to the app's vendor.
		 */
		static readonly identifierForVendor: string;

		/**
		 * A Boolean value that indicates whether the user has limited ad tracking.
		 */
		static readonly isAdvertisingTrackingEnabled: boolean;

		/**
		 * A Boolean value that indicates whether the current app is running as a translated
		 * binary using Rosetta on an Apple Silicon device.
		 */
		static readonly isTranslatedBinaryOnAppleSilicon: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * System's default language.
		 */
		static readonly locale: string;

		/**
		 * System's network interface mac address, or app UUID.
		 */
		static readonly macaddress: string;

		/**
		 * Manufacturer of the device.
		 */
		static readonly manufacturer: string;

		/**
		 * Model of the device.
		 */
		static readonly model: string;

		/**
		 * Name of the platform. Returns `android` for the Android platform, `iPhone OS` for the iOS
		 * platform (iPhone, iPad, or iPod Touch), and `windows` for the Windows platform.
		 * This property returns `iOS` for for the iOS platform (iPhone & iPod Touch). For the iPad,
		 * it returns `iOS` for iOS < 13 and `iPadOS` for iPadOS > 13 as part of the iPadOS rebranding
		 * for the iPad. If you need one identifier for both iOS and iPadOS, use <Titanium.Platform.osname>
		 * instead.
		 */
		static readonly name: string;

		/**
		 * System's WIFI network mask. No other network types are supported.
		 */
		static readonly netmask: string;

		/**
		 * Short name of the system's Operating System. Returns `android` for the Android platfrom,
		 * `iphone` for the iPhone or iPod Touch, `ipad` for the iPad, `windowsphone` for Windows Phone, and `windowsstore` for Windows Store
		 * platform.
		 */
		static readonly osname: string;

		/**
		 * Operating System architecture. On Android, this is `32bit`.
		 */
		static readonly ostype: string;

		/**
		 * Number of logical processing cores.
		 */
		static readonly processorCount: number;

		/**
		 * Short name of the JavaScript runtime in use.
		 */
		static readonly runtime: string;

		/**
		 * System's total memory, measured in bytes.
		 */
		static readonly totalMemory: number;

		/**
		 * System uptime since last boot in seconds.
		 */
		static readonly uptime: number;

		/**
		 * System name, if set. On iOS, this can be found in Settings > General > About > Name.
		 */
		static readonly username: string;

		/**
		 * The operating system's version string.
		 */
		static readonly version: string;

		/**
		 * The operating system's major version number.
		 */
		static readonly versionMajor: number;

		/**
		 * The operating system's minor version number.
		 */
		static readonly versionMinor: number;

		/**
		 * The operating system's patch version number.
		 */
		static readonly versionPatch: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof PlatformEventMap>(name: K, callback: (this: Titanium.Platform, event: PlatformEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Returns whether the system is configured with a default application to handle the URL's protocol/scheme.
		 */
		static canOpenURL(url: string): boolean;

		/**
		 * Returns an array of basic cpu information for all logical processors
		 */
		static cpus(): CPU[];

		/**
		 * Creates a globally-unique identifier.
		 */
		static createUUID(): string;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof PlatformEventMap>(name: K, event?: PlatformEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Returns whether the system settings are configured to show times in 24-hour format.
		 */
		static is24HourTimeFormat(): boolean;

		/**
		 * Opens this URL using the system's default application for its protocol/scheme.
		 */
		static openURL(url: string, options?: OpenURLOptions, callback?: (...args: any[]) => void): boolean;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof PlatformEventMap>(name: K, callback: (this: Titanium.Platform, event: PlatformEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * The base for all Titanium objects.
	 */
	class Proxy {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		lifecycleContainer?: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Proxy identifier
		 */
		id?: string | number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * Stream module containing stream utility methods.
	 */
	class Stream extends Titanium.Module {
		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in append
		 * mode.
		 */
		static readonly MODE_APPEND: number;

		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in read
		 * mode.
		 */
		static readonly MODE_READ: number;

		/**
		 * Use with [createStream](Titanium.Stream.createStream) to open a stream in write
		 * mode.
		 */
		static readonly MODE_WRITE: number;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Creates stream from a `Buffer` or `Blob` object.
		 */
		static createStream(params: CreateStreamArgs): Titanium.IOStream;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Reads data from input stream and passes it to a handler method.
		 */
		static pump(inputStream: Titanium.IOStream, handler: (param0: PumpCallbackArgs) => void, maxChunkSize: number, isAsync?: boolean): void;

		/**
		 * Asynchronously reads data from an [IOStream](Titanium.IOStream) into a buffer.
		 */
		static read(sourceStream: Titanium.IOStream, buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: ReadCallbackArgs) => void): void;

		/**
		 * Reads all data from the specified [IOStream](Titanium.IOStream).
		 */
		static readAll(sourceStream: Titanium.IOStream, buffer?: Titanium.Buffer, resultsCallback?: (param0: ReadCallbackArgs) => void): Titanium.Buffer | void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Asynchronously writes data from a buffer to an [IOStream](Titanium.IOStream).
		 */
		static write(outputStream: Titanium.IOStream, buffer: Titanium.Buffer, offset?: number, length?: number, resultsCallback?: (param0: WriteCallbackArgs) => void): void;

		/**
		 * Writes all data from an input stream to an output stream.
		 */
		static writeStream(inputStream: Titanium.IOStream, outputStream: Titanium.IOStream, maxChunkSize: number, resultsCallback?: (param0: WriteStreamCallbackArgs) => void): void;

	}
	/**
	 * Base event for class Titanium.UI
	 */
	interface UIBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.UI;

	}
	/**
	 * Fired when the `userInterfaceStyle` changes.
	 */
	interface UI_userinterfacestyle_Event extends UIBaseEvent {
		/**
		 * The new userInterfaceStyle value.
		 */
		value: number;

	}
	interface UIEventMap extends ProxyEventMap {
		userinterfacestyle: UI_userinterfacestyle_Event;

	}
	/**
	 * The main <Titanium.UI> module.
	 */
	class UI extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Sets the background color of the master view (when there are no windows or other top-level
		 * controls displayed).
		 */
		static backgroundColor: string | Titanium.UI.Color;

		/**
		 * Local path or URL to an image file for setting a background for the master view (when there
		 * are no windows or other top-level controls displayed).
		 */
		static backgroundImage: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Forces the app to used assigned theme instead of the system theme.
		 */
		static overrideUserInterfaceStyle: number;

		/**
		 * The current mode for the device (corresponding to night/dark or light/normal)
		 * @deprecated Use [userInterfaceStyle](Titanium.UI.userInterfaceStyle) instead.
		 */
		static semanticColorType: string;

		/**
		 * Sets the global tint color of the application. It is inherited by the child views and can be
		 * overwritten by them using the `tintColor` property.
		 */
		static tintColor: string | Titanium.UI.Color;

		/**
		 * The style associated with the user interface.
		 */
		static readonly userInterfaceStyle: number;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof UIEventMap>(name: K, callback: (this: Titanium.UI, event: UIEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Converts one type of unit to another using the metrics of the main display.
		 */
		static convertUnits(convertFromValue: string, convertToUnits: number): number;

		/**
		 * Creates and returns an instance of <Titanium.UI.2DMatrix>.
		 * @deprecated Use [Titanium.UI.createMatrix2D](Titanium.UI.createMatrix2D) instead.
		 */
		static create2DMatrix(parameters?: Matrix2DCreationDict): Titanium.UI.Matrix2D;

		/**
		 * Creates and returns an instance of <Titanium.UI.3DMatrix>.
		 * @deprecated Use [Titanium.UI.createMatrix3D](Titanium.UI.createMatrix3D) instead.
		 */
		static create3DMatrix(parameters?: Matrix3DCreationDict): Titanium.UI.Matrix3D;

		/**
		 * Creates and returns an instance of <Titanium.UI.ActivityIndicator>.
		 */
		static createActivityIndicator(parameters?: Dictionary<Titanium.UI.ActivityIndicator>): Titanium.UI.ActivityIndicator;

		/**
		 * Creates and returns an instance of <Titanium.UI.AlertDialog>.
		 */
		static createAlertDialog(parameters?: Dictionary<Titanium.UI.AlertDialog>): Titanium.UI.AlertDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.Animation>.
		 */
		static createAnimation(parameters?: Dictionary<Titanium.UI.Animation>): Titanium.UI.Animation;

		/**
		 * Creates and returns an instance of <Titanium.UI.AttributedString>.
		 */
		static createAttributedString(parameters?: Dictionary<Titanium.UI.AttributedString>): Titanium.UI.AttributedString;

		/**
		 * Creates and returns an instance of <Titanium.UI.Button>.
		 */
		static createButton(parameters?: Dictionary<Titanium.UI.Button>): Titanium.UI.Button;

		/**
		 * Creates and returns an instance of <Titanium.UI.ButtonBar>.
		 */
		static createButtonBar(parameters?: Dictionary<Titanium.UI.ButtonBar>): Titanium.UI.ButtonBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.Color>.
		 */
		static createColor(parameters?: Dictionary<Titanium.UI.Color>): Titanium.UI.Color;

		/**
		 * Creates and returns an instance of <Titanium.UI.DashboardItem>.
		 */
		static createDashboardItem(parameters?: Dictionary<Titanium.UI.DashboardItem>): Titanium.UI.DashboardItem;

		/**
		 * Creates and returns an instance of <Titanium.UI.DashboardView>.
		 */
		static createDashboardView(parameters?: Dictionary<Titanium.UI.DashboardView>): Titanium.UI.DashboardView;

		/**
		 * Creates and returns an instance of <Titanium.UI.EmailDialog>.
		 */
		static createEmailDialog(parameters?: Dictionary<Titanium.UI.EmailDialog>): Titanium.UI.EmailDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.ImageView>.
		 */
		static createImageView(parameters?: Dictionary<Titanium.UI.ImageView>): Titanium.UI.ImageView;

		/**
		 * Creates and returns an instance of <Titanium.UI.Label>.
		 */
		static createLabel(parameters?: Dictionary<Titanium.UI.Label>): Titanium.UI.Label;

		/**
		 * Creates and returns an instance of <Titanium.UI.ListSection>.
		 */
		static createListSection(parameters?: Dictionary<Titanium.UI.ListSection>): Titanium.UI.ListSection;

		/**
		 * Creates and returns an instance of <Titanium.UI.ListView>.
		 */
		static createListView(parameters?: Dictionary<Titanium.UI.ListView>): Titanium.UI.ListView;

		/**
		 * Creates and returns an instance of <Titanium.UI.MaskedImage>.
		 */
		static createMaskedImage(parameters?: Dictionary<Titanium.UI.MaskedImage>): Titanium.UI.MaskedImage;

		/**
		 * Creates and returns an instance of <Titanium.UI.Matrix2D>.
		 */
		static createMatrix2D(parameters?: Matrix2DCreationDict): Titanium.UI.Matrix2D;

		/**
		 * Creates and returns an instance of <Titanium.UI.Matrix3D>.
		 */
		static createMatrix3D(parameters?: Matrix3DCreationDict): Titanium.UI.Matrix3D;

		/**
		 * Creates and returns an instance of <Titanium.UI.NavigationWindow>.
		 */
		static createNavigationWindow(parameters?: Dictionary<Titanium.UI.NavigationWindow>): Titanium.UI.NavigationWindow;

		/**
		 * Creates and returns an instance of <Titanium.UI.Notification>.
		 */
		static createNotification(parameters?: Dictionary<Titanium.UI.Notification>): Titanium.UI.Notification;

		/**
		 * Creates and returns an instance of <Titanium.UI.OptionBar>.
		 */
		static createOptionBar(parameters?: Dictionary<Titanium.UI.OptionBar>): Titanium.UI.OptionBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.OptionDialog>.
		 */
		static createOptionDialog(parameters?: Dictionary<Titanium.UI.OptionDialog>): Titanium.UI.OptionDialog;

		/**
		 * Creates and returns an instance of <Titanium.UI.Picker>.
		 */
		static createPicker(parameters?: Dictionary<Titanium.UI.Picker>): Titanium.UI.Picker;

		/**
		 * Creates and returns an instance of <Titanium.UI.PickerColumn>.
		 */
		static createPickerColumn(parameters?: Dictionary<Titanium.UI.PickerColumn>): Titanium.UI.PickerColumn;

		/**
		 * Creates and returns an instance of <Titanium.UI.PickerRow>.
		 */
		static createPickerRow(parameters?: Dictionary<Titanium.UI.PickerRow>): Titanium.UI.PickerRow;

		/**
		 * Creates and returns an instance of <Titanium.UI.ProgressBar>.
		 */
		static createProgressBar(parameters?: Dictionary<Titanium.UI.ProgressBar>): Titanium.UI.ProgressBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.RefreshControl>.
		 */
		static createRefreshControl(parameters?: Dictionary<Titanium.UI.RefreshControl>): Titanium.UI.RefreshControl;

		/**
		 * Creates and returns an instance of <Titanium.UI.ScrollView>.
		 */
		static createScrollView(parameters?: Dictionary<Titanium.UI.ScrollView>): Titanium.UI.ScrollView;

		/**
		 * Creates and returns an instance of <Titanium.UI.ScrollableView>.
		 */
		static createScrollableView(parameters?: Dictionary<Titanium.UI.ScrollableView>): Titanium.UI.ScrollableView;

		/**
		 * Creates and returns an instance of <Titanium.UI.SearchBar>.
		 */
		static createSearchBar(parameters?: Dictionary<Titanium.UI.SearchBar>): Titanium.UI.SearchBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.Shortcut>.
		 */
		static createShortcut(parameters?: Dictionary<Titanium.UI.Shortcut>): Titanium.UI.Shortcut;

		/**
		 * Creates and returns an instance of <Titanium.UI.ShortcutItem>.
		 */
		static createShortcutItem(parameters?: Dictionary<Titanium.UI.ShortcutItem>): Titanium.UI.ShortcutItem;

		/**
		 * Creates and returns an instance of <Titanium.UI.Slider>.
		 */
		static createSlider(parameters?: Dictionary<Titanium.UI.Slider>): Titanium.UI.Slider;

		/**
		 * Creates and returns an instance of <Titanium.UI.Switch>.
		 */
		static createSwitch(parameters?: Dictionary<Titanium.UI.Switch>): Titanium.UI.Switch;

		/**
		 * Creates and returns an instance of <Titanium.UI.Tab>.
		 */
		static createTab(parameters?: Dictionary<Titanium.UI.Tab>): Titanium.UI.Tab;

		/**
		 * Creates and returns an instance of <Titanium.UI.TabGroup>.
		 */
		static createTabGroup(parameters?: Dictionary<Titanium.UI.TabGroup>): Titanium.UI.TabGroup;

		/**
		 * Creates and returns an instance of <Titanium.UI.TabbedBar>.
		 */
		static createTabbedBar(parameters?: Dictionary<Titanium.UI.TabbedBar>): Titanium.UI.TabbedBar;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableView>.
		 */
		static createTableView(parameters?: Dictionary<Titanium.UI.TableView>): Titanium.UI.TableView;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableViewRow>.
		 */
		static createTableViewRow(parameters?: Dictionary<Titanium.UI.TableViewRow>): Titanium.UI.TableViewRow;

		/**
		 * Creates and returns an instance of <Titanium.UI.TableViewSection>.
		 */
		static createTableViewSection(parameters?: Dictionary<Titanium.UI.TableViewSection>): Titanium.UI.TableViewSection;

		/**
		 * Creates and returns an instance of <Titanium.UI.TextArea>.
		 */
		static createTextArea(parameters?: Dictionary<Titanium.UI.TextArea>): Titanium.UI.TextArea;

		/**
		 * Creates and returns an instance of <Titanium.UI.TextField>.
		 */
		static createTextField(parameters?: Dictionary<Titanium.UI.TextField>): Titanium.UI.TextField;

		/**
		 * Creates and returns an instance of <Titanium.UI.Toolbar>.
		 */
		static createToolbar(parameters?: Dictionary<Titanium.UI.Toolbar>): Titanium.UI.Toolbar;

		/**
		 * Creates and returns an instance of <Titanium.UI.View>.
		 */
		static createView(parameters?: Dictionary<Titanium.UI.View>): Titanium.UI.View;

		/**
		 * Creates and returns an instance of <Titanium.UI.WebView>.
		 */
		static createWebView(parameters?: Dictionary<Titanium.UI.WebView>): Titanium.UI.WebView;

		/**
		 * Creates and returns an instance of <Titanium.UI.Window>.
		 */
		static createWindow(parameters?: Dictionary<Titanium.UI.Window>): Titanium.UI.Window;

		/**
		 * Fetches the correct color to be used with a UI element dependent on the users current dark mode setting on iOS 13 and above, or the [Titanium.UI.semanticColorType](Titanium.UI.semanticColorType) setting in other instances.
		 * Will return a valid string value to be used for color properties on Android. This may be a hex string or an `rgba()` function.
		 */
		static fetchSemanticColor(colorName: string): Titanium.UI.Color | string;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof UIEventMap>(name: K, event?: UIEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof UIEventMap>(name: K, callback: (this: Titanium.UI, event: UIEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

	}
	/**
	 * The top-level Utils module, containing a set of JavaScript methods that are often useful when
	 * building applications.
	 */
	class Utils extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Returns the specified data decoded from Base64.
		 */
		static base64decode(obj: string | Titanium.Blob | Titanium.Filesystem.File): Titanium.Blob;

		/**
		 * Returns the specified data encoded to Base64.
		 */
		static base64encode(obj: string | Titanium.Blob | Titanium.Filesystem.File): Titanium.Blob;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Returns a MD5 digest of the specified data as a hex-based String.
		 */
		static md5HexDigest(obj: string | Titanium.Blob): string;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Returns a SHA-1 hash of the specified data as a hex-based String.
		 */
		static sha1(obj: string | Titanium.Blob): string;

		/**
		 * Returns a SHA-256 hash of the specified data as a hex-based String.
		 */
		static sha256(obj: string | Titanium.Blob): string;

	}
	/**
	 * Base event for class Titanium.WatchSession
	 */
	interface WatchSessionBaseEvent extends Ti.Event {
		/**
		 * Source object that fired the event.
		 */
		source: Titanium.WatchSession;

	}
	/**
	 * App received message from apple watch in foreground. Will be called on startup if the
	 * incoming message caused the receiver to launch.
	 */
	interface WatchSession_receivemessage_Event extends WatchSessionBaseEvent {
		/**
		 * The message content
		 */
		message: any;

	}
	/**
	 * App received app context from apple watch. Will be called on startup if an applicationContext is available.
	 */
	interface WatchSession_receiveapplicationcontext_Event extends WatchSessionBaseEvent {
		/**
		 * The application Context
		 */
		applicationContext: any;

	}
	/**
	 * App received user info from apple watch in background. Will be called on startup if the user info finished
	 * transferring when the receiver was not running.
	 */
	interface WatchSession_receiveuserinfo_Event extends WatchSessionBaseEvent {
		/**
		 * The user info content
		 */
		userInfo: any;

	}
	/**
	 * App received file from apple watch in background.
	 */
	interface WatchSession_receivefile_Event extends WatchSessionBaseEvent {
		/**
		 * The downloaded data as a Titanium.Blob object.
		 */
		data: Titanium.Blob;

		/**
		 * Error code if transfer failed.
		 */
		errorCode: number;

		/**
		 * Error message if any.
		 */
		message: string;

		/**
		 * Information about the file.
		 */
		metaData: any;

		/**
		 * If the transfer was successful.
		 */
		success: boolean;

	}
	/**
	 * The watch state has changed.
	 */
	interface WatchSession_watchstatechanged_Event extends WatchSessionBaseEvent {
		/**
		 * Returns the current activation state of the watch.  Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.activationState> for more infos.
		 */
		activationState: number;

		/**
		 * If the apple watch is currently activated. Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.isActivated> for more infos.
		 */
		isActivated: boolean;

		/**
		 * If the complication is enabled in the apple watch.
		 */
		isComplicationEnabled: boolean;

		/**
		 * If the device is paired with the apple watch.
		 */
		isPaired: boolean;

		/**
		 * If apple watch is currently reachable.
		 */
		isReachable: boolean;

		/**
		 * If the watch app is installed in the apple watch.
		 */
		isWatchAppInstalled: boolean;

	}
	/**
	 * The watch reachability state has changed.
	 */
	interface WatchSession_reachabilitychanged_Event extends WatchSessionBaseEvent {
		/**
		 * Returns the current activation state of the watch.  Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.activationState> for more infos.
		 */
		activationState: number;

		/**
		 * If the apple watch is currently activated. Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.isActivated> for more infos.
		 */
		isActivated: boolean;

		/**
		 * If the complication is enabled in the apple watch.
		 */
		isComplicationEnabled: boolean;

		/**
		 * If the device is paired with the apple watch.
		 */
		isPaired: boolean;

		/**
		 * If apple watch is currently reachable.
		 */
		isReachable: boolean;

		/**
		 * If the watch app is installed in the apple watch.
		 */
		isWatchAppInstalled: boolean;

	}
	/**
	 * Fired when the application completed user info transfer to the watch app.
	 */
	interface WatchSession_finishuserinfotransfer_Event extends WatchSessionBaseEvent {
		/**
		 * Error code if transfer failed.
		 */
		errorCode: number;

		/**
		 * Error message if any.
		 */
		message: string;

		/**
		 * If the transfer was successful.
		 */
		success: boolean;

		/**
		 * The downloaded data as a Titanium.Blob object.
		 */
		userInfo: any;

	}
	/**
	 * App completed file transfer to watch app.
	 */
	interface WatchSession_finishfiletransfer_Event extends WatchSessionBaseEvent {
		/**
		 * Error code if transfer failed.
		 */
		errorCode: number;

		/**
		 * URL of the file transferred.
		 */
		fileURL: string;

		/**
		 * Error message if any.
		 */
		message: string;

		/**
		 * meta data of the file transferred.
		 */
		metaData: any;

		/**
		 * If the transfer was successful.
		 */
		success: boolean;

	}
	/**
	 * Called when the session can no longer be used to modify or add any new transfers and,
	 * all interactive messages will be cancelled, but events for background transfers can still fire.
	 * This will happen when the selected watch is being changed.
	 */
	interface WatchSession_inactive_Event extends WatchSessionBaseEvent {
		/**
		 * Returns the current activation state of the watch.  Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.activationState> for more infos.
		 */
		activationState: number;

		/**
		 * If the apple watch is currently activated. Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.isActivated> for more infos.
		 */
		isActivated: boolean;

		/**
		 * If the complication is enabled in the apple watch.
		 */
		isComplicationEnabled: boolean;

		/**
		 * If the device is paired with the apple watch.
		 */
		isPaired: boolean;

		/**
		 * If apple watch is currently reachable.
		 */
		isReachable: boolean;

		/**
		 * If the watch app is installed in the apple watch.
		 */
		isWatchAppInstalled: boolean;

	}
	/**
	 * Called when all events for the previously selected watch has occurred.
	 * The session can be re-activated for the now selected watch using activateSession.
	 */
	interface WatchSession_deactivate_Event extends WatchSessionBaseEvent {
		/**
		 * Returns the current activation state of the watch.  Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.activationState> for more infos.
		 */
		activationState: number;

		/**
		 * If the apple watch has currently content pending. Only available on iOS 10.0
		 * and later. See <Titanium.WatchSession.hasContentPending> for more infos.
		 */
		hasContentPending: boolean;

		/**
		 * If the apple watch is currently activated. Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.isActivated> for more infos.
		 */
		isActivated: boolean;

		/**
		 * If the complication is enabled in the apple watch.
		 */
		isComplicationEnabled: boolean;

		/**
		 * If the device is paired with the apple watch.
		 */
		isPaired: boolean;

		/**
		 * If apple watch is currently reachable.
		 */
		isReachable: boolean;

		/**
		 * If the watch app is installed in the apple watch.
		 */
		isWatchAppInstalled: boolean;

		/**
		 * If the apple watch has complication userInfo transfers left. Only available on iOS 10.0
		 * and later. See <Titanium.WatchSession.remainingComplicationUserInfoTransfers> for more infos.
		 */
		remainingComplicationUserInfoTransfers: boolean;

	}
	/**
	 * Called when the session has completed activation. If session state is
	 * <Titanium.WatchSession.ACTIVATION_STATE_NOT_ACTIVATED> there will be an error
	 * with more details.
	 */
	interface WatchSession_activationCompleted_Event extends WatchSessionBaseEvent {
		/**
		 * Returns the current activation state of the watch.  Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.activationState> for more infos.
		 */
		activationState: number;

		/**
		 * If the apple watch is currently activated. Only available on iOS 9.3
		 * and later. See <Titanium.WatchSession.isActivated> for more infos.
		 */
		isActivated: boolean;

		/**
		 * If the complication is enabled in the apple watch.
		 */
		isComplicationEnabled: boolean;

		/**
		 * If the device is paired with the apple watch.
		 */
		isPaired: boolean;

		/**
		 * If apple watch is currently reachable.
		 */
		isReachable: boolean;

		/**
		 * If the watch app is installed in the apple watch.
		 */
		isWatchAppInstalled: boolean;

	}
	interface WatchSessionEventMap extends ProxyEventMap {
		activationCompleted: WatchSession_activationCompleted_Event;

		deactivate: WatchSession_deactivate_Event;

		finishfiletransfer: WatchSession_finishfiletransfer_Event;

		finishuserinfotransfer: WatchSession_finishuserinfotransfer_Event;

		inactive: WatchSession_inactive_Event;

		reachabilitychanged: WatchSession_reachabilitychanged_Event;

		receiveapplicationcontext: WatchSession_receiveapplicationcontext_Event;

		receivefile: WatchSession_receivefile_Event;

		receivemessage: WatchSession_receivemessage_Event;

		receiveuserinfo: WatchSession_receiveuserinfo_Event;

		watchstatechanged: WatchSession_watchstatechanged_Event;

	}
	/**
	 * Used to enable data and file transfers between a watchOS and iOS application.
	 */
	class WatchSession extends Titanium.Module {
		/**
		 * The watch is currently activated.
		 */
		static readonly ACTIVATION_STATE_ACTIVATED: number;

		/**
		 * The watch is currently inactive.
		 */
		static readonly ACTIVATION_STATE_INACTIVE: number;

		/**
		 * The watch is currently not activated.
		 */
		static readonly ACTIVATION_STATE_NOT_ACTIVATED: number;

		/**
		 * Returns the current activation state of the watch.
		 */
		static readonly activationState: number;

		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * Returns `true` if there is more content for the session to deliver.
		 */
		static readonly hasContentPending: boolean;

		/**
		 * Returns `true` if the watch is currently activated.
		 */
		static readonly isActivated: boolean;

		/**
		 * Returns `true` if complication is enabled on the installed watch app.
		 */
		static readonly isComplicationEnabled: boolean;

		/**
		 * Returns `true` if the device is paired with a watch.
		 */
		static readonly isPaired: boolean;

		/**
		 * Returns `true` if the watch is currently reachable.
		 */
		static readonly isReachable: boolean;

		/**
		 * Returns `true` if the device supports watch connectivity.
		 */
		static readonly isSupported: boolean;

		/**
		 * Returns `true` if the accompanying watch app is installed.
		 */
		static readonly isWatchAppInstalled: boolean;

		/**
		 * The most recent application context sent to the watch app.
		 */
		static readonly recentApplicationContext: any;

		/**
		 * The number of calls remaining to `transferCurrentComplication` before the system starts
		 * transferring the complicationUserInfo as regular userInfos.
		 */
		static readonly remainingComplicationUserInfoTransfers: number;

		/**
		 * Activates the watch session
		 */
		static activateSession(): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener<K extends keyof WatchSessionEventMap>(name: K, callback: (this: Titanium.WatchSession, event: WatchSessionEventMap[K]) => void): void;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Cancels all incomplete file transfers to the apple watch.
		 */
		static cancelAllFileTransfers(): void;

		/**
		 * Cancels all incomplete transfers to the apple watch.
		 */
		static cancelAllTransfers(): void;

		/**
		 * Cancels all incomplete user info and complication transfers to the apple watch.
		 */
		static cancelAllUserInfoTransfers(): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent<K extends keyof WatchSessionEventMap>(name: K, event?: WatchSessionEventMap[K]): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener<K extends keyof WatchSessionEventMap>(name: K, callback: (this: Titanium.WatchSession, event: WatchSessionEventMap[K]) => void): void;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Sends a message to the apple watch.
		 */
		static sendMessage(message: any, reply?: (param0: MessageReply) => void): void;

		/**
		 * Transfers complication data to the watch application.
		 */
		static transferCurrentComplication(params: any): void;

		/**
		 * Transfers a file to the apple watch.
		 */
		static transferFile(params: any): void;

		/**
		 * Transfers an user info to the apple watch.
		 */
		static transferUserInfo(params: any): void;

		/**
		 * Sends an app context update to the apple watch.
		 */
		static updateApplicationContext(params: any): void;

	}
	/**
	 * The top level XML module.  The XML module is used for parsing and processing XML-based content.
	 */
	class XML extends Titanium.Module {
		/**
		 * The name of the API that this proxy corresponds to.
		 */
		static readonly apiName: string;

		/**
		 * Indicates if the proxy will bubble an event to its parent.
		 */
		static bubbleParent: boolean;

		/**
		 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
		 */
		static lifecycleContainer: Titanium.UI.Window | Titanium.UI.TabGroup;

		/**
		 * Adds the specified callback as an event listener for the named event.
		 */
		static addEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Applies the properties to the proxy.
		 */
		static applyProperties(props: any): void;

		/**
		 * Fires a synthesized event to any registered listeners.
		 */
		static fireEvent(name: string, event?: any): void;

		/**
		 * Parses an XML string into a <Titanium.XML.Document> object.
		 */
		static parseString(xml: string): Titanium.XML.Document;

		/**
		 * Removes the specified callback as an event listener for the named event.
		 */
		static removeEventListener(name: string, callback: (param0: Titanium.Event) => void): void;

		/**
		 * Serializes a [Node](Titanium.XML.Node) object into a string.
		 */
		static serializeToString(node: Titanium.XML.Node): string;

	}
	/**
	 * The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.
	 * @deprecated Use the standalone [Ti.Yahoo](https://github.com/appcelerator-modules/ti.yahoo) module instead.
	 */
	const Yahoo: never;
}
/**
 * Provide at least the property `identifier` and `url` property to identify a local
 * image, sound or video. If your media is invalid, the API will throw an error log and
 * skip the invalid attachment.
 */
interface UserNotificationAttachment {
	/**
	 * The identifier of this attachment.
	 */
	identifier: string;

	/**
	 * An additional dictionary of options to provide.
	 */
	options?: any;

	/**
	 * The URL to the attachment's data. If you have obtained this attachment from
	 * the notification-center then the URL will be security-scoped.
	 */
	url: string;

}
/**
 * Response when receiving pending or local notifications
 * in <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
interface UserNotificationCallbackResponse {
	/**
	 * An array of identifiers used to create notifications.
	 */
	notifications?: UserNotificationDictionary[];

}
/**
 * Dictionary of notification data used in the array of `notifications`
 * when receiving pending or local notifications in
 * <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
interface UserNotificationDictionary {
	/**
	 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
	 * type: String
	 */
	alertAction?: string;

	/**
	 * Alert message.
	 */
	alertBody?: string;

	/**
	 * Image displayed instead of `Default.png` when launching the application.
	 */
	alertLaunchImage?: string;

	/**
	 * Subtitle of the notification.
	 */
	alertSubtitle?: string;

	/**
	 * Title of the notification.
	 */
	alertTitle?: string;

	/**
	 * Application badge value.
	 */
	badge?: number;

	/**
	 * Category identifier of the notification.
	 */
	category?: string;

	/**
	 * Date and time when the notification was configured to fire.
	 */
	date?: Date;

	/**
	 * The notification identifier.
	 */
	identifier: string;

	/**
	 * Region of the notification.
	 */
	region?: any;

	/**
	 * Path to the sound file configured to play when the notification was fired.
	 */
	sound?: string;

	/**
	 * Timezone of the date when the notification was configured to fire.
	 */
	timezone?: string;

	/**
	 * Custom data object.
	 */
	userInfo?: any;

}
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 * To retrieve the current notification settings, use the
 * <Titanium.App.iOS.UserNotificationCenter.requestUserNotificationSettings> method.
 */
interface UserNotificationSettings {
	/**
	 * Set of categories of user notification actions required by the applicaiton to use.
	 */
	categories?: Titanium.App.iOS.UserNotificationCategory[];

	/**
	 * Notification types to use.
	 */
	types?: number[];

}
/**
 * Dictionary of options for the <Titanium.UI.WebView.addUserScript> method.
 */
interface UserScriptParams {
	/**
	 * The time when the script should be injected into the webpage.
	 */
	injectionTime?: number;

	/**
	 * A Boolean value indicating whether the script should be injected only into the
	 * main frame (true) or into all frames (false).
	 */
	mainFrameOnly?: boolean;

	/**
	 * A script that can be injected into a webpage.
	 */
	source?: string;

}
/**
 * Pass an object with the following key-value pairs:
 *   * `view` (Titanium.UI.View): View to insert
 *   * `position` (Number): Position in the [children](Titanium.UI.View.children) array of
 *     the view elment to replace.
 */
interface ViewPositionOptions {
	/**
	 * Position in the [children](Titanium.UI.View.children) array of the view element to replace.
	 */
	position?: number;

	/**
	 * View to insert. Required.
	 */
	view: Titanium.UI.View;

}
/**
 * Template that represents a view subcomponent of an <ItemTemplate>.
 */
interface ViewTemplate {
	/**
	 * View's ID (or set of IDs) used for data binding. This value must be unique.
	 */
	bindId?: string;

	/**
	 * Contains an array of subview templates to be added (in order) as children to this view.
	 */
	childTemplates?: ViewTemplate[];

	/**
	 * Contains key-value pairs of view events and their listeners that are applied to this view component.
	 */
	events?: any;

	/**
	 * Contains key-value pairs of view properties and their values that are applied to this view component.
	 */
	properties?: any;

	/**
	 * View's class name, for example, `Ti.UI.Button`.
	 */
	type: string;

}
/**
 * The parameter passed to the <Titanium.UI.iOS.WebViewConfiguration.preferences> method.
 */
interface WebViewPreferencesObject {
	/**
	 * A Boolean value indicating whether JavaScript can open windows without user interaction.
	 */
	javaScriptCanOpenWindowsAutomatically?: boolean;

	/**
	 * A Boolean value indicating whether JavaScript is enabled.
	 */
	javaScriptEnabled?: boolean;

	/**
	 * The minimum font size in points.
	 */
	minimumFontSize?: number;

}
/**
 * Argument passed to the write callback when an asynchronous
 * [write](Titanium.Stream.write) operation
 * finishes.
 */
interface WriteCallbackArgs extends ErrorResponse {
	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Stream being written to.
	 */
	source?: Titanium.IOStream;

	/**
	 * Indicates if the operation succeeded.
	 */
	success?: boolean;

}
/**
 * Argument passed to the callback when an asynchronous
 * [writeStream](Titanium.Stream.writeStream) operation finishes.
 */
interface WriteStreamCallbackArgs extends ErrorResponse {
	/**
	 * Number of bytes processed, or -1 in the event of an error or end of stream.
	 */
	bytesProcessed?: number;

	/**
	 * Stream being read from.
	 */
	fromStream?: Titanium.IOStream;

	/**
	 * Stream being written to.
	 */
	toStream?: Titanium.IOStream;

}
/**
 * Properties passed to a yql callback to report a success or failure.
 */
interface YQLResponse extends ErrorResponse {
	/**
	 * Error code. Returns 0 if `success` is `true`.
	 */
	code?: number;

	/**
	 * The data payload received from the YQL.
	 */
	data?: any;

	/**
	 * Error message, if any returned.
	 */
	error?: string;

	/**
	 * Error message, if any returned. Use `error` instead
	 * @deprecated
	 */
	message?: string;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.close> method.
 */
interface closeWindowParams {
	/**
	 * Animation resource to use for the incoming activity.
	 */
	activityEnterAnimation?: number;

	/**
	 * Animation resource to use for the outgoing activity.
	 */
	activityExitAnimation?: number;

	/**
	 * Determines whether to use an animated effect when the window is closed. Defaults to `true` on Android, `false` on iOS.
	 */
	animated?: boolean;

	/**
	 * duration of the animation in milliseconds
	 */
	animationDuration?: number;

	/**
	 * Transition type to use during a transition animation.
	 */
	animationStyle?: number;

}
/**
 * Dictionary containing `daysOfWeek` and `week`.
 */
interface daysOfTheWeekDictionary {
	/**
	 * The day of the week. Values are from 1 to 7, with Sunday being 1.
	 */
	daysOfWeek?: number;

	/**
	 * The week number of the day of the week.
	 * Values range from -53 to 53. A negative value indicates a value from the end of
	 * the range. 0 indicates the week number is irrelevant.
	 */
	week?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.hide> method.
 */
interface hideParams {
	/**
	 * Determines whether to animate the dialog as it is dismissed.
	 */
	animated?: boolean;

}
/**
 * Dictionary describing the arguments passed to the application on startup.
 * Use the [getArguments](Titanium.App.getArguments) method to retrieve the launch options.
 */
interface launchOptions {
	/**
	 * If set to `true`, this key indicates that the application was launched in response to an
	 * incoming location event.
	 */
	launchOptionsLocationKey?: boolean;

	/**
	 * This key indicates that the application was launched by another
	 * application with the specified bundle ID.
	 */
	source?: string;

	/**
	 * This key indicates that the application was launched in order to open
	 * the specified URL.
	 */
	url?: string;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.open> method.
 */
interface openWindowParams {
	/**
	 * Animation resource to run on the activity being opened.
	 */
	activityEnterAnimation?: number;

	/**
	 * Animation resource to run on the activity that is being put in background as a window is being opened above it.
	 */
	activityExitAnimation?: number;

	/**
	 * Determines whether to use an animated effect when the window is shown.
	 */
	animated?: boolean;

	/**
	 * Window's bottom position, in platform-specific units.
	 */
	bottom?: number | string;

	/**
	 * Indicates whether the window enforces modal behaviour.
	 */
	forceModal?: boolean;

	/**
	 * Determines if the window is fullscreen.
	 */
	fullscreen?: boolean;

	/**
	 * Window's height, in platform-specific units.
	 */
	height?: number | string;

	/**
	 * Window's left position, in platform-specific units.
	 */
	left?: number | string;

	/**
	 * Determines whether to open the window modal in front of other windows.
	 */
	modal?: boolean;

	/**
	 * Presentation style of this modal window.
	 */
	modalStyle?: number;

	/**
	 * Transition style of this modal window.
	 */
	modalTransitionStyle?: number;

	/**
	 * For modal windows, hides the nav bar (`true`) or shows the nav bar (`false`).
	 */
	navBarHidden?: boolean;

	/**
	 * Window's right position, in platform-specific units.
	 */
	right?: number | string;

	/**
	 * Window's top position, in platform-specific units.
	 */
	top?: number | string;

	/**
	 * Transition style of this non-modal window.
	 */
	transition?: number;

	/**
	 * Window's width, in platform-specific units.
	 */
	width?: number | string;

}
/**
 * Dictionary containing either `endDate` or `occurrenceCount` property.
 */
interface recurrenceEndDictionary {
	/**
	 * End date of the recurrence end, or undefined if the recurrence end is count-based.
	 */
	endDate?: Date;

	/**
	 * Occurrence count of the recurrence end, or 0 if the recurrence end is date-based.
	 */
	occurrenceCount?: number;

}
/**
 * Options used by <Titanium.UI.WebView.setHtml>
 */
interface setHtmlOptions {
	/**
	 * Sets the URL that the web content's paths will be relative to.
	 */
	baseURL?: string;

	/**
	 * Sets the MIME type for the content. Defaults to "text/html" if not specified.
	 */
	mimeType?: string;

}
/**
 * Dictionary describing the shadow effect for text.
 */
interface shadowDict {
	/**
	 * Specifies the blur radius of the shadow.
	 */
	blurRadius?: number;

	/**
	 * Color name or hex triplet specifying the color of the shadow.
	 */
	color?: string | Titanium.UI.Color;

	/**
	 * <Size> with the properties `width` and `height` used as the horizontal
	 * and vertical offset of the shadow, respectively.
	 */
	offset?: Size;

}
/**
 * Dictionary of options for the <Titanium.Contacts.showContacts> method.
 */
interface showContactsParams {
	/**
	 * Determines whether to animate the show/hide of the contacts picker (iPhone, iPad only.)
	 */
	animated?: boolean;

	/**
	 * Function to call when selection is canceled.
	 */
	cancel?: (param0: any) => void;

	/**
	 * Field names to show when selecting properties. By default, shows all available.
	 */
	fields?: string[];

	/**
	 * Function to call when a person is selected. Must not be used with `selectedProperty` property.
	 */
	selectedPerson?: (param0: any) => void;

	/**
	 * Function to call when a property is selected. Must not be used with `selectedPerson`
	 * property.
	 * Note: If ringtone or texttone is selected, null values are returned, since these are unsupported
	 * by Apple.
	 * Since iOS 9.0, there is a native apple issue whereby it may return null if the birthday property
	 * is selected on certain device models.
	 * The callback contains the selected property and a 'person' object of type <Titanium.Contacts.Person>.
	 * Since iOS 9.0, apple only returns the person object with partial information. Currently it is known to
	 * at least contain the selected property and fullName.
	 */
	selectedProperty?: (param0: any) => void;

}
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.show> method.
 */
interface showParams {
	/**
	 * Determines whether to animate the dialog as it is shown.
	 */
	animated?: boolean;

	/**
	 * Array of String instances.
	 */
	buttonNames?: string[];

	/**
	 * String to be used as a message for the dialog.
	 */
	message?: string;

	/**
	 * Array of String instances.
	 */
	options?: string[];

	/**
	 * Positions the arrow of the option dialog relative to the attached view's dimensions.
	 */
	rect?: Dimension;

	/**
	 * String to be used as title for the dialog.
	 */
	title?: string;

	/**
	 * View to which to attach the dialog.
	 */
	view?: Titanium.UI.View;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextArea.selected> event and <Titanium.UI.TextArea.selection> property that describes
 * position and length of the selected text.
 */
interface textAreaSelectedParams {
	/**
	 * Number of characters selected.
	 */
	length?: number;

	/**
	 * Starting position of selected text.
	 */
	location?: number;

}
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.selection> property that describes
 * position and length of the selected text.
 */
interface textFieldSelectedParams {
	/**
	 * Number of characters selected.
	 */
	length?: number;

	/**
	 * Starting position of selected text.
	 */
	location?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.titleAttributes> property.
 */
interface titleAttributesParams {
	/**
	 * Color of the window title, as a color name or hex triplet.
	 */
	color?: string | Titanium.UI.Color;

	/**
	 * Font to use for the window title.
	 */
	font?: Font;

	/**
	 * Shadow color and offset for the window title.
	 */
	shadow?: shadowDict;

}
/**
 * Parameter for wakeLock
 */
interface wakeLockOptions {
	/**
	 * Wake lock level and flag. See [PowerManager.newWakeLock in the Android API Reference](https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int,%20java.lang.String))
	 */
	flags?: number;

	/**
	 * Minimum time the device will be switched on (plus device switch-off time)
	 */
	time?: number;

}
/**
 * Dictionary of options for the <Titanium.UI.Window.setToolbar> method.
 */
interface windowToolbarParam {
	/**
	 * Defines if the toolbar appearance is animated.
	 */
	animated?: boolean;

	/**
	 * Background color for the toolbar, as a color name or hex triplet.
	 */
	barColor?: string | Titanium.UI.Color;

	/**
	 * The tintColor to apply to the tool bar.
	 */
	tintColor?: string | Titanium.UI.Color;

	/**
	 * Defines if the toolbar is translucent.
	 */
	translucent?: boolean;

}

import Ti = Titanium;
